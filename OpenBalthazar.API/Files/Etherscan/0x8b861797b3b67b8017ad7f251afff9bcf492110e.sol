[{"SourceCode":"pragma solidity ^0.5.2;\r\n\r\n// LEE is a digital escrow program in beta. Use at your own risk. || lexDAO ||\r\n\r\ncontract lexDAOetherEscrow {\r\n    \r\n    address payable public buyer;\r\n    address payable public seller;\r\n    address payable public arbitrator;\r\n    uint256 public price;\r\n    string public details;\r\n    string public complaint;\r\n    bool public disputed;\r\n    bool public closed;\r\n    \r\n    event Released(uint256 indexed price);\r\n    event Disputed(address indexed complainant);\r\n    event Resolved(uint256 indexed buyerAward, uint256 indexed sellerAward);\r\n    \r\n    constructor(\r\n        address payable _buyer,\r\n        address payable _seller,\r\n        address payable _arbitrator,\r\n        string memory _details) payable public {\r\n        buyer = _buyer;\r\n        seller = _seller;\r\n        arbitrator = _arbitrator;\r\n        price = msg.value;\r\n        details = _details;\r\n    }\r\n    \r\n    function release() public {\r\n        require(msg.sender == buyer);\r\n        require(disputed == false);\r\n        address(seller).transfer(price);\r\n        closed = true;\r\n        emit Released(price);\r\n    }\r\n    \r\n    function dispute(string memory _complaint) public {\r\n        require(msg.sender == buyer || msg.sender == seller);\r\n        require(closed == false);\r\n        disputed = true;\r\n        complaint = _complaint;\r\n        emit Disputed(msg.sender);\r\n    }\r\n    \r\n    function resolve(uint256 buyerAward, uint256 sellerAward) public {\r\n        require(msg.sender == arbitrator);\r\n        require(disputed == true);\r\n        uint256 arbFee = price / 20;\r\n        require(buyerAward \u002B sellerAward \u002B arbFee == price);\r\n        address(buyer).transfer(buyerAward);\r\n        address(seller).transfer(sellerAward);\r\n        address(arbitrator).transfer(arbFee);\r\n        closed = true;\r\n        emit Resolved(buyerAward, sellerAward);\r\n    }\r\n    \r\n    function getBalance() public view returns (uint256) {\r\n        return address(this).balance;\r\n    }\r\n}\r\n\r\ncontract lexDAOetherEscrowFactory {\r\n    \r\n    uint8 public LEEversion = 1;\r\n    \r\n    address payable public arbitrator = 0x97103fda00a2b47EaC669568063C00e65866a633; // lexDAO Agent\r\n    \r\n    lexDAOetherEscrow private LEE;\r\n    \r\n    address[] public escrows;\r\n    \r\n    event Deployed(\r\n        address indexed lexDAOetherEscrow, \r\n        address indexed _buyer, \r\n        address indexed _seller);\r\n        \r\n    event ArbUpdated(address indexed newArb);\r\n    \r\n    function newLEE(\r\n        address payable _seller, \r\n        string memory _details) payable public {\r\n        require(arbitrator != address(0));\r\n           \r\n        LEE = (new lexDAOetherEscrow).value(msg.value)(\r\n            msg.sender,\r\n            _seller,\r\n            arbitrator,\r\n            _details);\r\n        \r\n        escrows.push(address(LEE));\r\n        \r\n        emit Deployed(address(LEE), msg.sender, _seller);\r\n\r\n    }\r\n    \r\n    function getEscrowCount() public view returns (uint256 escrowCount) {\r\n        return escrows.length;\r\n    }\r\n    \r\n    function getEscrowAddresses() public view returns (address[] memory) {\r\n        return escrows;\r\n    }\r\n    \r\n    function updateArbitrator(address payable newArb) public {\r\n        require(msg.sender == arbitrator);\r\n        arbitrator = newArb;\r\n        \r\n        emit ArbUpdated(newArb);\r\n    }\r\n}","ABI":"[{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022escrows\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022getEscrowCount\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022escrowCount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022getEscrowAddresses\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address[]\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022arbitrator\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022LEEversion\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint8\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_seller\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_details\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022name\u0022:\u0022newLEE\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:true,\u0022stateMutability\u0022:\u0022payable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022newArb\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022updateArbitrator\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022lexDAOetherEscrow\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022_buyer\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022_seller\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022Deployed\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022newArb\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022ArbUpdated\u0022,\u0022type\u0022:\u0022event\u0022}]","ContractName":"lexDAOetherEscrowFactory","CompilerVersion":"v0.5.9\u002Bcommit.e560f70d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://a876222cc162903b58f190057f76ca06a664c7180f4b60c1069e6acbfa0cedb8"}]