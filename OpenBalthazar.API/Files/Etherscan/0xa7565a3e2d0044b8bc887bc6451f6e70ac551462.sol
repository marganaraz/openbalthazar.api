[{"SourceCode":"pragma solidity ^0.4.26;\r\n\r\n// This is the smart contract for Simple FOMO\r\n// A game theory based lottery that rewards the last entry with the 50% of the pot.\r\n// Round 2 now also rewards the address/person that has the most entries with the other 50% of the pot\r\n// This encourages players to enter early so they can take advantage of the lower entry cost.\r\n\r\n// Modeled on the infamous Fomo3D but without its complexities, Simple FOMO has safeguards to reduce the chance\r\n// a person will clog the blockchain to make them become the last entry and the winner.\r\n\r\ncontract Simple_FOMO_Round_2 {\r\n\r\n  // Administrator information\r\n  address public feeAddress; // This is the address of the person that collects the fees, nothing more, nothing less. It can be changed.\r\n  uint256 public feePercent = 2500; // This is the percent of the fee (2500 = 2.5%, 1 = 0.001%)\r\n\r\n  // Lotto information\r\n  uint256 public potSize = 0; // This is the size of the lottery pool in Wei\r\n  uint256 public entryCost = 1000000000000000; // This is the initial cost to enter the lottery pool (0.001 ETH)\r\n  uint256 constant entryCostStep = 5000000000000000; // This is the increase in the entry cost per 10 entries (0.005 ETH)\r\n  address public lastEntryAddress; // This is the address of the person who has entered the pool last\r\n  address public mostEntryAddress; // The address that has the most entries\r\n  uint256 public mostEntryCount = 0; // Represents the number of entries from the top entry address\r\n  uint256 public deadline; // This represents the initial deadline for the pool\r\n  uint256 constant gameDuration = 7; // This is the default amount of days the lottery will last for, can be extended with entries\r\n  uint256 public extensionTime = 600; // The default extension time per entry (600 seconds = 10 minutes)\r\n                                      // Extension time is increased by 0.5 seconds for each entry\r\n\r\n  // Player information                                    \r\n  uint256 public totalEntries = 0; // The total amount of entries in the pool\r\n  mapping (address =\u003E uint256) private entryAmountList; // A list of entry amounts, mapped by each address (key)\r\n\r\n  constructor() public payable {\r\n    feeAddress = msg.sender; // Set the contract creator to the first feeAddress\r\n    lastEntryAddress = msg.sender;\r\n    mostEntryAddress = msg.sender;\r\n    potSize = msg.value;\r\n    deadline = now \u002B gameDuration * 86400; // Set the game to end 7 days after lottery start\r\n  }\r\n\r\n  event ClaimedLotto(address _user, uint256 _amount); // Auxillary events\r\n  event MostEntries(address _user, uint256 _amount, uint256 _entries);\r\n  event AddedEntry(address _user, uint256 _amount, uint256 _entrycount);\r\n  event AddedNewParticipant(address _user);\r\n  event ChangedFeeAddress(address _newFeeAddress);\r\n  event FailedFeeSend(address _user, uint256 _amount);\r\n\r\n  // View function\r\n  function viewLottoDetails() public view returns (\r\n    uint256 _entryCost,\r\n    uint256 _potSize,\r\n    address _lastEntryAddress,\r\n    address _mostEntryAddress,\r\n    uint256 _mostEntryCount, \r\n    uint256 _deadline\r\n  ) {\r\n    return (entryCost, potSize, lastEntryAddress, mostEntryAddress, mostEntryCount, deadline);\r\n  }\r\n\r\n  // Action functions\r\n  // Change contract fee address\r\n  function changeContractFeeAddress(address _newFeeAddress) public {\r\n    require (msg.sender == feeAddress); // Only the current feeAddress can change the feeAddress of the contract\r\n    \r\n    feeAddress = _newFeeAddress; // Update the fee address\r\n\r\n     // Trigger event.\r\n    emit ChangedFeeAddress(_newFeeAddress);\r\n  }\r\n\r\n  // Withdraw from pool when time has expired\r\n  function claimLottery() public {\r\n    require (msg.sender == lastEntryAddress || msg.sender == mostEntryAddress); // Only the last person to enter or most entries can claim the lottery\r\n    uint256 currentTime = now; // Get the current time in seconds\r\n    uint256 claimTime = deadline \u002B 300; // Add 5 minutes to the deadline, only after then can the lotto be claimed\r\n    require (currentTime \u003E claimTime);\r\n    // Congrats, this person has won the lottery\r\n    require (potSize \u003E 0); // Cannot claim an empty pot\r\n    uint256 totalTransferAmount = potSize; // The amount that is going to the winners\r\n    potSize = 0; // Set the potSize to zero before contacting the external address\r\n\r\n    uint256 transferAmountLastEntry = totalTransferAmount / 2; // This is the amount going to the last entry\r\n    uint256 transferAmountMostEntries = totalTransferAmount - transferAmountLastEntry; // The rest goes to the player with most entries\r\n\r\n    // Send to external accounts\r\n    // This method will only be used once, so make sure the receiving address is not a contract\r\n    bool sendok_most = mostEntryAddress.send(transferAmountMostEntries);\r\n    bool sendok_last = lastEntryAddress.send(transferAmountLastEntry);\r\n\r\n     // Trigger event.\r\n    if(sendok_last == true){\r\n      emit ClaimedLotto(lastEntryAddress, transferAmountLastEntry);\r\n    }\r\n    if(sendok_most == true){\r\n      emit MostEntries(mostEntryAddress, transferAmountMostEntries, mostEntryCount);\r\n    } \r\n  }\r\n\r\n  // Add entry to the pool\r\n  function addEntry() public payable {\r\n    require (msg.value == entryCost); // Entry must be equal to entry cost, not more or less\r\n    uint256 currentTime = now; // Get the current time in seconds\r\n    require (currentTime \u003C= deadline); // Cannot submit an entry if the deadline has passed\r\n\r\n    // Add this player to the entry list if not already on it (new in Round 2)\r\n    uint256 entryAmount = entryAmountList[msg.sender];\r\n    if(entryAmount == 0){\r\n      // This is a new participant\r\n      emit AddedNewParticipant(msg.sender);\r\n    }\r\n    entryAmount\u002B\u002B;\r\n    entryAmountList[msg.sender] = entryAmount; // Increase the entry count for this participant\r\n\r\n    //Now compare this entry to the most entries\r\n    if(entryAmount \u003E mostEntryCount){\r\n      // This entry makes this user have the most entries\r\n      mostEntryCount = entryAmount;\r\n      mostEntryAddress = msg.sender;\r\n    }\r\n\r\n    // Entry is valid, now modify the pool based on it\r\n    uint256 feeAmount = (entryCost * feePercent) / 100000; // Calculate the usage fee\r\n    uint256 potAddition = entryCost - feeAmount; // This is the amount actually going into the pot\r\n\r\n    potSize = potSize \u002B potAddition; // Add this amount to the pot\r\n    extensionTime = 600 \u002B (totalEntries / 2); // The extension time increases as more entries are submitted\r\n    totalEntries = totalEntries \u002B 1; // Increased the amount of entries\r\n    if(totalEntries % 10 == 0){\r\n      entryCost = entryCost \u002B entryCostStep; // Increase the cost to enter every 10 entries\r\n    }\r\n\r\n    if(currentTime \u002B extensionTime \u003E deadline){ // Move the deadline if the extension time brings it beyond\r\n      deadline = currentTime \u002B extensionTime;\r\n    }\r\n\r\n    lastEntryAddress = msg.sender; // Now this entry is the last address for now\r\n\r\n    //Pay a fee to the feeAddress\r\n    bool sentfee = feeAddress.send(feeAmount);\r\n    if(sentfee == false){\r\n      emit FailedFeeSend(feeAddress, feeAmount); // Create an event in case of fee sending failed, but don\u0027t stop registering the entry\r\n    }\r\n\r\n    // Trigger event.\r\n    emit AddedEntry(msg.sender, msg.value, entryAmountList[msg.sender]);\r\n  }\r\n}","ABI":"[{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022mostEntryAddress\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022viewLottoDetails\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022_entryCost\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_potSize\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_lastEntryAddress\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_mostEntryAddress\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_mostEntryCount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_deadline\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_newFeeAddress\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022changeContractFeeAddress\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022deadline\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022feeAddress\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022potSize\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022feePercent\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022totalEntries\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022addEntry\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:true,\u0022stateMutability\u0022:\u0022payable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022claimLottery\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022entryCost\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022lastEntryAddress\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022mostEntryCount\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022extensionTime\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[],\u0022payable\u0022:true,\u0022stateMutability\u0022:\u0022payable\u0022,\u0022type\u0022:\u0022constructor\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022_user\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022_amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022ClaimedLotto\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022_user\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022_amount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022_entries\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022MostEntries\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022_user\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022_amount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022_entrycount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022AddedEntry\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022_user\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022AddedNewParticipant\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022_newFeeAddress\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022ChangedFeeAddress\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022_user\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022_amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022FailedFeeSend\u0022,\u0022type\u0022:\u0022event\u0022}]","ContractName":"Simple_FOMO_Round_2","CompilerVersion":"v0.4.26\u002Bcommit.4563c3fc","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://85d596b2d3a965811ce649e3c14a664ccc31cea054a3e46c4452a64b0653675e"}]