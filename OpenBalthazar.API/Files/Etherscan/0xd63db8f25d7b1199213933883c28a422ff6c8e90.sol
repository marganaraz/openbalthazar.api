[{"SourceCode":"pragma solidity ^0.5.0 \u003C0.6.0;\r\n\r\ncontract EtherSwap {\r\n    struct Swap {\r\n        uint256 amount;\r\n\r\n        address payable claimAddress;\r\n        address payable refundAddress;\r\n\r\n        uint256 timelock;\r\n\r\n        // True if the swap is pending; false if it was claimed or refunded\r\n        bool pending;\r\n    }\r\n\r\n    mapping (bytes32 =\u003E Swap) private swaps;\r\n\r\n    event Claim(bytes32 _preimageHash);\r\n    event Creation(bytes32 _preimageHash);\r\n    event Refund(bytes32 _preimageHash);\r\n\r\n    modifier onlyPendingSwaps(bytes32 _preimageHash) {\r\n        require(swaps[_preimageHash].pending == true, \u0022there is no pending swap with this preimage hash\u0022);\r\n        _;\r\n    }\r\n\r\n    function create(bytes32 _preimageHash, address payable _claimAddress, uint256 _timelock) external payable {\r\n        require(msg.value \u003E 0, \u0022the amount must not be zero\u0022);\r\n        require(swaps[_preimageHash].amount == 0, \u0022a swap with this preimage hash exists already\u0022);\r\n\r\n        // Add the created swap to the map\r\n        swaps[_preimageHash] = Swap({\r\n            amount: msg.value,\r\n            claimAddress: _claimAddress,\r\n            refundAddress: msg.sender,\r\n            timelock: _timelock,\r\n            pending: true\r\n        });\r\n\r\n        // Emit an event for the swap creation\r\n        emit Creation(_preimageHash);\r\n    }\r\n\r\n    function claim(bytes32 _preimageHash, bytes calldata _preimage) external onlyPendingSwaps(_preimageHash) {\r\n        require(_preimageHash == sha256(_preimage), \u0022the preimage does not correspond the provided hash\u0022);\r\n\r\n        swaps[_preimageHash].pending = false;\r\n        Swap memory swap = swaps[_preimageHash];\r\n\r\n        // Transfer the Ether to the recipient\r\n        swap.claimAddress.transfer(swap.amount);\r\n\r\n        // Emit an event for the successful claim\r\n        emit Claim(_preimageHash);\r\n    }\r\n\r\n    function refund(bytes32 _preimageHash) external onlyPendingSwaps(_preimageHash) {\r\n        require(swaps[_preimageHash].timelock \u003C= block.timestamp, \u0022swap has not timed out yet\u0022);\r\n\r\n        swaps[_preimageHash].pending = false;\r\n        Swap memory swap = swaps[_preimageHash];\r\n\r\n        // Transfer the Ether back to the initial sender\r\n        swap.refundAddress.transfer(swap.amount);\r\n\r\n        // Emit an event for the refund\r\n        emit Refund(_preimageHash);\r\n    }\r\n\r\n    function getSwapInfo(bytes32 _preimageHash) external view returns (\r\n        uint256 amount,\r\n        address claimAddress,\r\n        address refundAddress,\r\n        uint256 timelock,\r\n        bool pending\r\n    ) {\r\n        Swap memory swap = swaps[_preimageHash];\r\n        return (swap.amount, swap.claimAddress, swap.refundAddress, swap.timelock, swap.pending);\r\n    }\r\n}","ABI":"[{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022_preimageHash\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022Claim\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022_preimageHash\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022Creation\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022_preimageHash\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022Refund\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022_preimageHash\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022internalType\u0022:\u0022bytes\u0022,\u0022name\u0022:\u0022_preimage\u0022,\u0022type\u0022:\u0022bytes\u0022}],\u0022name\u0022:\u0022claim\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022_preimageHash\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022internalType\u0022:\u0022address payable\u0022,\u0022name\u0022:\u0022_claimAddress\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_timelock\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022create\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:true,\u0022stateMutability\u0022:\u0022payable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022_preimageHash\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022getSwapInfo\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022claimAddress\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022refundAddress\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022timelock\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022pending\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022_preimageHash\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022refund\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022}]","ContractName":"EtherSwap","CompilerVersion":"v0.5.12\u002Bcommit.7709ece9","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://b8afd8a84a0d75aabd21b0b2cdb2c7a997b8d9515f03fa03253e66f1db266988"}]