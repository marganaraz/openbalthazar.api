[{"SourceCode":"pragma solidity ^0.5.10;\r\n\r\n/* Beta - Do not use! \r\n * This is a mainnet launch of a beta contract, used\r\n * to test integration with other mainnet assets. \r\n * Use as own risk - david@hashtables.net\r\n */\r\n\r\nlibrary SafeMath {\r\n    function add(uint a, uint b) internal pure returns(uint c) {\r\n        c = a \u002B b;\r\n        require(c \u003E= a);\r\n    }\r\n    function sub(uint a, uint b) internal pure returns(uint c) {\r\n        require(b \u003C= a);\r\n        c = a - b;\r\n    }\r\n    function mul(uint a, uint b) internal pure returns(uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    }\r\n    function div(uint a, uint b) internal pure returns(uint c) {\r\n        require(b \u003E 0);\r\n        c = a / b;\r\n    }\r\n}\r\n\r\ncontract ERC20Interface {\r\n    function totalSupply() public view returns(uint);\r\n    function balanceOf(address tokenOwner) public view returns(uint balance);\r\n    function allowance(address tokenOwner, address spender) public view returns(uint remaining);\r\n    function transfer(address to, uint tokens) public returns(bool success);\r\n    function approve(address spender, uint tokens) public returns(bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns(bool success);\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\n\r\ncontract TimeLock {\r\n\r\n    using SafeMath for uint;\r\n\r\n    struct Deposit {\r\n        address tokenAddress;\r\n        uint depositTime;\r\n        uint tokenAmount;\r\n        uint freezeDuration;\r\n    }\r\n\r\n    mapping (address =\u003E uint) public tokensFrozen;\r\n    mapping (address =\u003E Deposit[]) public deposits;\r\n\r\n    uint defaultFreezeDuration = 5 minutes;\r\n\r\n    event TokensFrozen (\r\n        address indexed userAddress,\r\n        address indexed tokenAddress,\r\n        uint freezeIndex,\r\n        uint depositTime,\r\n        uint tokenAmount,\r\n        uint freezeDuration\r\n\t);\r\n\r\n    event TokensUnfrozen (\r\n        address indexed userAddress,\r\n        address indexed tokenAddress,\r\n        uint freezeIndex,\r\n        uint depositTime,\r\n        uint tokenAmount,\r\n        uint freezeDuration\r\n\t);\r\n\r\n    constructor() public {\r\n\r\n    }\r\n\r\n    // This is the deposit/freeze function. You call the original token contract and it has a callback to this function.\r\n    // For this reason, this contract cannot accept direct deposits of tokens, so please do not send them here. \r\n    // See documentation for more detais. \r\n    function receiveApproval(address _sender, uint256 _value, address _tokenContract, bytes memory _extraData) public {\r\n        require(_value \u003E 0, \u0022Error: Value must be \u003E 0\u0022);\r\n\r\n        // Once approved, transferFrom users wallet to ours. Calculate prior balance, and new balance to account for deflationary tokens.\r\n        uint _oldBalance = ERC20Interface(_tokenContract).balanceOf(address(this));\r\n        require(ERC20Interface(_tokenContract).transferFrom(_sender, address(this), _value), \u0022Could not transfer tokens to Time Lock contract address.\u0022);\r\n        uint _newBalance = ERC20Interface(_tokenContract).balanceOf(address(this));\r\n        uint _balanceDiff = _newBalance.sub(_oldBalance); \r\n        uint _tokenAmount = _balanceDiff; //_balanceDiff; \r\n        \r\n        uint _freezeDuration = defaultFreezeDuration;\r\n        uint _freezeIndex = deposits[_sender].length;\r\n\r\n        if(deposits[_sender].length \u003C 1) deposits[_sender];\r\n        \r\n        Deposit memory deposit;\r\n        deposit.tokenAddress = _tokenContract;\r\n        deposit.depositTime = now;\r\n        deposit.tokenAmount = _tokenAmount;\r\n        deposit.freezeDuration = _freezeDuration;\r\n        deposits[_sender].push(deposit);\r\n        \r\n        tokensFrozen[_tokenContract] \u002B= _tokenAmount; // Update global stats for token.\r\n\r\n        emit TokensFrozen(_sender, _tokenContract, _freezeIndex, now, _tokenAmount, _freezeDuration);\r\n    }\r\n\r\n    function addFreezeTime(uint _freezeIndex, uint _timeToAdd) public {\r\n        require(deposits[msg.sender][_freezeIndex].tokenAmount \u003E 0, \u0022You do not have enough tokens!\u0022);\r\n        deposits[msg.sender][_freezeIndex].freezeDuration \u002B= _timeToAdd;\r\n//        emit TokensFrozen(msg.sender, deposit.tokenAddress, _freezeIndex, now, deposit.tokenAmount, deposit.freezeDuration);\r\n    }\r\n\r\n    function unfreeze(uint _freezeIndex) public {\r\n        Deposit memory deposit = deposits[msg.sender][_freezeIndex];\r\n        //require(deposit, \u0022Deposit not found!\u0022);\r\n        require(deposit.tokenAmount \u003E 0, \u0022You do not have enough tokens!\u0022);\r\n        require(now \u003E= deposit.depositTime.add(deposit.freezeDuration), \u0022Tokens are locked!\u0022);\r\n        require(_freezeIndex \u003C deposits[msg.sender].length, \u0022Could not find any freeze at index provided during. Aborting removal of index.\u0022);\r\n        require(tokensFrozen[deposit.tokenAddress] \u003E= deposit.tokenAmount);\r\n        require(ERC20Interface(deposit.tokenAddress).transfer(msg.sender, deposit.tokenAmount), \u0022Could not withdraw token!\u0022);\r\n\r\n        tokensFrozen[deposit.tokenAddress] -= deposit.tokenAmount; // Update global stats for token.\r\n        \r\n        for (uint i = _freezeIndex; i\u003Cdeposits[msg.sender].length-1; i\u002B\u002B){\r\n            deposits[msg.sender][i] = deposits[msg.sender][i\u002B1];\r\n        }\r\n        deposits[msg.sender].length--;\r\n    \r\n        emit TokensUnfrozen(msg.sender, deposit.tokenAddress, _freezeIndex, now, deposit.tokenAmount, deposit.freezeDuration);\r\n    }\r\n    \r\n    function getDepositCount(address _addr) public view returns (uint256 _freezeCount) {\r\n        return deposits[_addr].length;\r\n    }\r\n\r\n    function getDepositByID(address _addr, uint _freezeIndex) public view returns (\r\n        address _userAddress,\r\n        address _tokenAddress,\r\n        uint _depositTime,\r\n        uint _tokenAmount,\r\n        uint _freezeDuration\r\n    ) {\r\n        Deposit memory deposit = deposits[_addr][_freezeIndex];\r\n        \r\n        return (_addr,\r\n            deposit.tokenAddress,\r\n            deposit.depositTime,\r\n            deposit.tokenAmount,\r\n            deposit.freezeDuration\r\n        );\r\n    }\r\n\r\n    function getTokenCount(address _tokenAddr) public view returns (uint256 _freezeCount) {\r\n        return tokensFrozen[_tokenAddr];\r\n    }\r\n    \r\n}","ABI":"[{\u0022inputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022constructor\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022userAddress\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022tokenAddress\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022freezeIndex\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022depositTime\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022tokenAmount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022freezeDuration\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022TokensFrozen\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022userAddress\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022tokenAddress\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022freezeIndex\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022depositTime\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022tokenAmount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022freezeDuration\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022TokensUnfrozen\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_freezeIndex\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_timeToAdd\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022addFreezeTime\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022deposits\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022tokenAddress\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022depositTime\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022tokenAmount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022freezeDuration\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_addr\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_freezeIndex\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022getDepositByID\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_userAddress\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_tokenAddress\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_depositTime\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_tokenAmount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_freezeDuration\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_addr\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022getDepositCount\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_freezeCount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_tokenAddr\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022getTokenCount\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_freezeCount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_sender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_value\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_tokenContract\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022bytes\u0022,\u0022name\u0022:\u0022_extraData\u0022,\u0022type\u0022:\u0022bytes\u0022}],\u0022name\u0022:\u0022receiveApproval\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022tokensFrozen\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_freezeIndex\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022unfreeze\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022}]","ContractName":"TimeLock","CompilerVersion":"v0.5.12\u002Bcommit.7709ece9","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://333b0e1fa445bcf00d1c59af526f9268c650131b8efc2e0aadaa78083af80bca"}]