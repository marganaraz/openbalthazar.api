[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b \u003E 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c \u002B a % b); // There is no case in which this doesn\u0027t hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b \u003C= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a \u002B b;\r\n    assert(c \u003E= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n\r\ncontract CryptoHearthStone {\r\n  using SafeMath for uint256;\r\n  struct Card {\r\n        uint attribute; // Card occupational attributes\r\n        uint256 price;// Card price\r\n        address delegate; // person delegated to\r\n        bool isSale;//Is the card sold?\r\n  }\r\n\r\n  Card[] private cards;\r\n\r\n  mapping (address =\u003E uint) private ownershipCardCount;\r\n\r\n  event Transfer(address from, address to, uint256 cardId);\r\n\r\n  event CardSold(uint256 cardId, uint256 price, address prevOwner, address newOwner);\r\n\r\n  event userSell(uint256 cardId, uint256 price, address owner);\r\n\r\n  event CancelCardSell(uint256 cardId, address owner);\r\n\r\n  uint constant private DEFAULT_START_PRICE = 0.01 ether;\r\n  uint constant private FIRST_PRICE_LIMIT =  0.5 ether;\r\n  uint constant private SECOND_PRICE_LIMIT =  2 ether;\r\n  uint constant private THIRD_PRICE_LIMIT =  5 ether;\r\n\r\n  uint constant private FIRST_COMMISSION_LEVEL = 6;\r\n  uint constant private SECOND_COMMISSION_LEVEL = 5;\r\n  uint constant private THIRD_COMMISSION_LEVEL = 4;\r\n  uint constant private FOURTH_COMMISSION_LEVEL = 3;\r\n\r\n  address private owner;\r\n  mapping (address =\u003E bool) private admins;\r\n\r\n  function CryptoHearthStone () public {\r\n    owner = msg.sender;\r\n    admins[owner] = true;\r\n  }\r\n   /* Modifiers */\r\n   modifier onlyOwner() {\r\n     require(owner == msg.sender);\r\n     _;\r\n   }\r\n\r\n   modifier onlyAdmins() {\r\n     require(admins[msg.sender]);\r\n     _;\r\n   }\r\n\r\n   function addAdmin (address _admin) onlyOwner() public {\r\n     admins[_admin] = true;\r\n   }\r\n\r\n   function removeAdmin (address _admin) onlyOwner() public {\r\n     delete admins[_admin];\r\n   }\r\n\r\n   function withdrawAll () onlyAdmins() public {\r\n     msg.sender.transfer(this.balance);\r\n   }\r\n\r\n  function withdrawAmount (uint256 _amount) onlyAdmins() public {\r\n    msg.sender.transfer(_amount);\r\n  }\r\n\r\n  function initCards (uint _attribut) onlyAdmins() public {\r\n      for(uint i=0;i\u003C10;i\u002B\u002B)\r\n      {\r\n          createCard(_attribut,20800000000000000);\r\n      }\r\n  }\r\n\r\n  function createCard (uint _attribute, uint256 _price) onlyAdmins() public {\r\n    require(_price \u003E 0);\r\n\r\n    Card memory _card = Card({\r\n      attribute: _attribute,\r\n      price: _price,\r\n      delegate: msg.sender,\r\n      isSale: true\r\n    });\r\n    cards.push(_card);\r\n  }\r\n\r\n  function getCard(uint _id) public view returns (uint attribute, uint256 price,address delegate,bool isSale,bool isWoner) {\r\n    require(_id \u003C cards.length);\r\n    require(_addressNotNull(msg.sender));\r\n    Card memory _card=cards[_id];\r\n    isWoner=false;\r\n    if(_card.delegate==msg.sender) isWoner=true;\r\n    return (_card.attribute,_card.price,_card.delegate,_card.isSale,isWoner);\r\n  }\r\n\r\n  function getMyCards(address _owner) public view returns (uint[] userCards) {\r\n    require(_addressNotNull(_owner));\r\n    uint cardCount = ownershipCardCount[_owner];\r\n    userCards = new uint[](cardCount);\r\n    if(_owner==owner)return userCards;\r\n    uint totalTeams = cards.length;\r\n    uint resultIndex = 0;\r\n    if (cardCount \u003E 0) {\r\n      for (uint pos = 0; pos \u003C totalTeams; pos\u002B\u002B) {\r\n        if (cardOwnerOf(pos) == _owner) {\r\n          userCards[resultIndex] = pos;\r\n          resultIndex\u002B\u002B;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  function purchase(uint _cardId) public payable {\r\n    address oldOwner = cardOwnerOf(_cardId);\r\n    address newOwner = msg.sender;\r\n\r\n    uint sellingPrice = cards[_cardId].price;\r\n    require(newOwner != owner);\r\n\r\n    require(oldOwner != newOwner);\r\n\r\n    require(_addressNotNull(newOwner));\r\n\r\n    require(cards[_cardId].isSale == true);\r\n\r\n    require(msg.value \u003E= sellingPrice);\r\n\r\n    uint payment =  _calculatePaymentToOwner(sellingPrice);\r\n    uint excessPayment = msg.value.sub(sellingPrice);\r\n\r\n    _transfer(oldOwner, newOwner, _cardId);\r\n    if (oldOwner != address(this)) {\r\n      oldOwner.transfer(payment);\r\n    }\r\n\r\n    newOwner.transfer(excessPayment);\r\n\r\n    CardSold(_cardId, sellingPrice, oldOwner, newOwner);\r\n  }\r\n\r\n  function sell(uint _cardId, uint256 _price) public {\r\n      require(_price \u003E 0);\r\n      address oldOwner = cardOwnerOf(_cardId);\r\n      require(_addressNotNull(oldOwner));\r\n      require(oldOwner == msg.sender);\r\n      cards[_cardId].price=_price;\r\n      cards[_cardId].isSale=true;\r\n      userSell(_cardId, _price,oldOwner);\r\n  }\r\n\r\n  function CancelSell(uint _cardId) public {\r\n      address oldOwner = cardOwnerOf(_cardId);\r\n      require(_addressNotNull(oldOwner));\r\n      require(oldOwner == msg.sender);\r\n      cards[_cardId].isSale=false;\r\n      CancelCardSell(_cardId,oldOwner);\r\n  }\r\n\r\n  function _calculatePaymentToOwner(uint _sellingPrice) private pure returns (uint payment) {\r\n    if (_sellingPrice \u003C FIRST_PRICE_LIMIT) {\r\n      payment = uint256(_sellingPrice.mul(100-FIRST_COMMISSION_LEVEL).div(100));\r\n    }\r\n    else if (_sellingPrice \u003C SECOND_PRICE_LIMIT) {\r\n      payment = uint256(_sellingPrice.mul(100-SECOND_COMMISSION_LEVEL).div(100));\r\n    }\r\n    else if (_sellingPrice \u003C THIRD_PRICE_LIMIT) {\r\n      payment = uint256(_sellingPrice.mul(100-THIRD_COMMISSION_LEVEL).div(100));\r\n    }\r\n    else {\r\n      payment = uint256(_sellingPrice.mul(100-FOURTH_COMMISSION_LEVEL).div(100));\r\n    }\r\n  }\r\n\r\n  function cardOwnerOf(uint _cardId) public view returns (address cardOwner) {\r\n    require(_cardId \u003C cards.length);\r\n    cardOwner = cards[_cardId].delegate;\r\n  }\r\n\r\n  function _addressNotNull(address _to) private pure returns (bool) {\r\n    return _to != address(0);\r\n  }\r\n\r\n  function _transfer(address _from, address _to, uint _cardId) private {\r\n    ownershipCardCount[_to]\u002B\u002B;\r\n    cards[_cardId].delegate=_to;\r\n    cards[_cardId].isSale=false;\r\n    if (_from != address(0)) {\r\n      ownershipCardCount[_from]--;\r\n    }\r\n\r\n    Transfer(_from, _to, _cardId);\r\n  }\r\n}","ABI":"[{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022withdrawAmount\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_cardId\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022cardOwnerOf\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022cardOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_attribute\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_price\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022createCard\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_admin\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022removeAdmin\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_owner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022getMyCards\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022userCards\u0022,\u0022type\u0022:\u0022uint256[]\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_admin\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022addAdmin\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_attribut\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022initCards\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022withdrawAll\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_cardId\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022CancelSell\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_id\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022getCard\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022attribute\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022price\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022delegate\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022isSale\u0022,\u0022type\u0022:\u0022bool\u0022},{\u0022name\u0022:\u0022isWoner\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_cardId\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_price\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022sell\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_cardId\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022purchase\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:true,\u0022stateMutability\u0022:\u0022payable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022constructor\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022from\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022cardId\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022Transfer\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022cardId\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022price\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022prevOwner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022CardSold\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022cardId\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022price\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022owner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022userSell\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022cardId\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022owner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022CancelCardSell\u0022,\u0022type\u0022:\u0022event\u0022}]","ContractName":"CryptoHearthStone","CompilerVersion":"v0.4.22\u002Bcommit.4cb486ee","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://b2aa83b1c4d8b80e923bb5f086cf9ffaab5220753951f153bf05c72cadbdff80"}]