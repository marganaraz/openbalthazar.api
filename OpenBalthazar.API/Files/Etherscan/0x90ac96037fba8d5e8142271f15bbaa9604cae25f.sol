[{"SourceCode":"pragma solidity ^0.4.9;\r\n \r\n /* https://github.com/LykkeCity/EthereumApiDotNetCore/blob/master/src/ContractBuilder/contracts/token/SafeMath.sol */\r\ncontract SafeMath {\r\n    uint256 constant public MAX_UINT256 =\r\n    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n\r\n    function safeAdd(uint256 x, uint256 y) constant internal returns (uint256 z) {\r\n        if (x \u003E MAX_UINT256 - y) throw;\r\n        return x \u002B y;\r\n    }\r\n\r\n    function safeSub(uint256 x, uint256 y) constant internal returns (uint256 z) {\r\n        if (x \u003C y) throw;\r\n        return x - y;\r\n    }\r\n\r\n    function safeMul(uint256 x, uint256 y) constant internal returns (uint256 z) {\r\n        if (y == 0) return 0;\r\n        if (x \u003E MAX_UINT256 / y) throw;\r\n        return x * y;\r\n    }\r\n}\r\n\r\n contract ContractReceiver {\r\n    function tokenFallback(address _from, uint _value, bytes _data);\r\n}\r\n \r\ncontract ERC223Token is SafeMath {\r\n    \r\n  event Transfer(address indexed _from, address indexed _to, uint256 _value, bytes _data);\r\n\r\n  mapping(address =\u003E uint) balances;\r\n  \r\n  string public name    = \u0022Shadow Box\u0022;\r\n  string public symbol  = \u0022SHBOX\u0022;\r\n  uint8 public decimals = 18;\r\n  uint256 public totalSupply;\r\n  \r\n  function ERC223Token()\r\n  {\r\n      //Supply of 100 tokens with 18 decimals. (100 \u002B 18 times zero)\r\n      balances[0xb659871eA0bF341D3DE8AD768873bed169A8B87a] = 100000000 * 10**uint(decimals);\r\n      totalSupply = balances[0xb659871eA0bF341D3DE8AD768873bed169A8B87a];\r\n  }\r\n  \r\n  \r\n  // Function to access name of token .\r\n  function name() constant returns (string _name) {\r\n      return name;\r\n  }\r\n  // Function to access symbol of token .\r\n  function symbol() constant returns (string _symbol) {\r\n      return symbol;\r\n  }\r\n  // Function to access decimals of token .\r\n  function decimals() constant returns (uint8 _decimals) {\r\n      return decimals;\r\n  }\r\n  // Function to access total supply of tokens .\r\n  function totalSupply() constant returns (uint256 _totalSupply) {\r\n      return totalSupply;\r\n  }\r\n  \r\n  \r\n  // Function that is called when a user or another contract wants to transfer funds .\r\n  function transfer(address _to, uint _value, bytes _data, string _custom_fallback) returns (bool success) {\r\n      \r\n    if(isContract(_to)) {\r\n        if (balanceOf(msg.sender) \u003C _value) throw;\r\n        balances[msg.sender] = safeSub(balanceOf(msg.sender), _value);\r\n        balances[_to] = safeAdd(balanceOf(_to), _value);\r\n        assert(_to.call.value(0)(bytes4(sha3(_custom_fallback)), msg.sender, _value, _data));\r\n        Transfer(msg.sender, _to, _value, _data);\r\n        return true;\r\n    }\r\n    else {\r\n        return transferToAddress(_to, _value, _data);\r\n    }\r\n}\r\n  \r\n\r\n  // Function that is called when a user or another contract wants to transfer funds .\r\n  function transfer(address _to, uint _value, bytes _data) returns (bool success) {\r\n      \r\n    if(isContract(_to)) {\r\n        return transferToContract(_to, _value, _data);\r\n    }\r\n    else {\r\n        return transferToAddress(_to, _value, _data);\r\n    }\r\n}\r\n  \r\n  // Standard function transfer similar to ERC20 transfer with no _data .\r\n  // Added due to backwards compatibility reasons .\r\n  function transfer(address _to, uint _value) returns (bool success) {\r\n      \r\n    //standard function transfer similar to ERC20 transfer with no _data\r\n    //added due to backwards compatibility reasons\r\n    bytes memory empty;\r\n    if(isContract(_to)) {\r\n        return transferToContract(_to, _value, empty);\r\n    }\r\n    else {\r\n        return transferToAddress(_to, _value, empty);\r\n    }\r\n}\r\n\r\n//assemble the given address bytecode. If bytecode exists then the _addr is a contract.\r\n  function isContract(address _addr) private returns (bool is_contract) {\r\n      uint length;\r\n      assembly {\r\n            //retrieve the size of the code on target address, this needs assembly\r\n            length := extcodesize(_addr)\r\n      }\r\n      return (length\u003E0);\r\n    }\r\n\r\n  //function that is called when transaction target is an address\r\n  function transferToAddress(address _to, uint _value, bytes _data) private returns (bool success) {\r\n    if (balanceOf(msg.sender) \u003C _value) throw;\r\n    balances[msg.sender] = safeSub(balanceOf(msg.sender), _value);\r\n    balances[_to] = safeAdd(balanceOf(_to), _value);\r\n    Transfer(msg.sender, _to, _value, _data);\r\n    return true;\r\n  }\r\n  \r\n  //function that is called when transaction target is a contract\r\n  function transferToContract(address _to, uint _value, bytes _data) private returns (bool success) {\r\n    if (balanceOf(msg.sender) \u003C _value) throw;\r\n    balances[msg.sender] = safeSub(balanceOf(msg.sender), _value);\r\n    balances[_to] = safeAdd(balanceOf(_to), _value);\r\n    ContractReceiver receiver = ContractReceiver(_to);\r\n    receiver.tokenFallback(msg.sender, _value, _data);\r\n    Transfer(msg.sender, _to, _value, _data);\r\n    return true;\r\n}\r\n\r\n\r\n  function balanceOf(address _owner) constant returns (uint balance) {\r\n    return balances[_owner];\r\n  }\r\n}","ABI":"[{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022name\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022_name\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022totalSupply\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022_totalSupply\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022decimals\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022_decimals\u0022,\u0022type\u0022:\u0022uint8\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022MAX_UINT256\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_owner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022balanceOf\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022balance\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022symbol\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022_symbol\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022transfer\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022success\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_value\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_data\u0022,\u0022type\u0022:\u0022bytes\u0022}],\u0022name\u0022:\u0022transfer\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022success\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_value\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_data\u0022,\u0022type\u0022:\u0022bytes\u0022},{\u0022name\u0022:\u0022_custom_fallback\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022name\u0022:\u0022transfer\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022success\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022constructor\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022_from\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022_to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022_value\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022_data\u0022,\u0022type\u0022:\u0022bytes\u0022}],\u0022name\u0022:\u0022Transfer\u0022,\u0022type\u0022:\u0022event\u0022}]","ContractName":"ERC223Token","CompilerVersion":"v0.4.19\u002Bcommit.c4cbbb05","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://1f18153516b3c5291e75839fc086d2505049971a237a73e07d2b44c3786f8b83"}]