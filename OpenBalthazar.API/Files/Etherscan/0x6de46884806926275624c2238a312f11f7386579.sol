[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\n/**\r\n* @title ERC20 interface\r\n* @dev see https://github.com/ethereum/EIPs/issues/20\r\n*/\r\ninterface IERC20 {\r\nfunction transfer(address to, uint256 value) external returns (bool);\r\n\r\nfunction approve(address spender, uint256 value) external returns (bool);\r\n\r\nfunction transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\nfunction totalSupply() external view returns (uint256);\r\n\r\nfunction balanceOf(address who) external view returns (uint256);\r\n\r\nfunction allowance(address owner, address spender) external view returns (uint256);\r\n\r\nevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\nevent Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts\\open-zeppelin-contracts\\math\\SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n* @title SafeMath\r\n* @dev Unsigned math operations with safety checks that revert on error\r\n*/\r\nlibrary SafeMath {\r\n/**\r\n* @dev Multiplies two unsigned integers, reverts on overflow.\r\n*/\r\nfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n// Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\r\n// benefit is lost if \u0027b\u0027 is also tested.\r\n// See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\nif (a == 0) {\r\nreturn 0;\r\n}\r\n\r\nuint256 c = a * b;\r\nrequire(c / a == b);\r\n\r\nreturn c;\r\n}\r\n\r\n/**\r\n* @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n*/\r\nfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n// Solidity only automatically asserts when dividing by 0\r\nrequire(b \u003E 0);\r\nuint256 c = a / b;\r\n// assert(a == b * c \u002B a % b); // There is no case in which this doesn\u0027t hold\r\n\r\nreturn c;\r\n}\r\n\r\n/**\r\n* @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n*/\r\nfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\nrequire(b \u003C= a);\r\nuint256 c = a - b;\r\n\r\nreturn c;\r\n}\r\n\r\n/**\r\n* @dev Adds two unsigned integers, reverts on overflow.\r\n*/\r\nfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\r\nuint256 c = a \u002B b;\r\nrequire(c \u003E= a);\r\n\r\nreturn c;\r\n}\r\n\r\n/**\r\n* @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n* reverts when dividing by zero.\r\n*/\r\nfunction mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\nrequire(b != 0);\r\nreturn a % b;\r\n}\r\n}\r\n\r\n// File: contracts\\open-zeppelin-contracts\\token\\ERC20\\ERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n \r\n\r\n/**\r\n* @title Standard ERC20 token\r\n*\r\n* @dev Implementation of the basic standard token.\r\n* https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\r\n* Originally based on code by FirstBlood:\r\n* https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n*\r\n* This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for\r\n* all accounts just by listening to said events. Note that this isn\u0027t required by the specification, and other\r\n* compliant implementations may not do it.\r\n*/\r\ncontract ERC20 is IERC20 {\r\nusing SafeMath for uint256;\r\n\r\nmapping (address =\u003E uint256) private _balances;\r\n\r\nmapping (address =\u003E mapping (address =\u003E uint256)) private _allowed;\r\n\r\nuint256 private _totalSupply;\r\n\r\n/**\r\n* @dev Total number of tokens in existence\r\n*/\r\nfunction totalSupply() public view returns (uint256) {\r\nreturn _totalSupply;\r\n}\r\n\r\n/**\r\n* @dev Gets the balance of the specified address.\r\n* @param owner The address to query the balance of.\r\n* @return An uint256 representing the amount owned by the passed address.\r\n*/\r\nfunction balanceOf(address owner) public view returns (uint256) {\r\nreturn _balances[owner];\r\n}\r\n\r\n/**\r\n* @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n* @param owner address The address which owns the funds.\r\n* @param spender address The address which will spend the funds.\r\n* @return A uint256 specifying the amount of tokens still available for the spender.\r\n*/\r\nfunction allowance(address owner, address spender) public view returns (uint256) {\r\nreturn _allowed[owner][spender];\r\n}\r\n\r\n/**\r\n* @dev Transfer token for a specified address\r\n* @param to The address to transfer to.\r\n* @param value The amount to be transferred.\r\n*/\r\nfunction transfer(address to, uint256 value) public returns (bool) {\r\n_transfer(msg.sender, to, value);\r\nreturn true;\r\n}\r\n\r\n/**\r\n* @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n* Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n* and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n* race condition is to first reduce the spender\u0027s allowance to 0 and set the desired value afterwards:\r\n* https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n* @param spender The address which will spend the funds.\r\n* @param value The amount of tokens to be spent.\r\n*/\r\nfunction approve(address spender, uint256 value) public returns (bool) {\r\n_approve(msg.sender, spender, value);\r\nreturn true;\r\n}\r\n\r\n/**\r\n* @dev Transfer tokens from one address to another.\r\n* Note that while this function emits an Approval event, this is not required as per the specification,\r\n* and other compliant implementations may not emit the event.\r\n* @param from address The address which you want to send tokens from\r\n* @param to address The address which you want to transfer to\r\n* @param value uint256 the amount of tokens to be transferred\r\n*/\r\nfunction transferFrom(address from, address to, uint256 value) public returns (bool) {\r\n_transfer(from, to, value);\r\n_approve(from, msg.sender, _allowed[from][msg.sender].sub(value));\r\nreturn true;\r\n}\r\n\r\n/**\r\n* @dev Increase the amount of tokens that an owner allowed to a spender.\r\n* approve should be called when allowed_[_spender] == 0. To increment\r\n* allowed value is better to use this function to avoid 2 calls (and wait until\r\n* the first transaction is mined)\r\n* From MonolithDAO Token.sol\r\n* Emits an Approval event.\r\n* @param spender The address which will spend the funds.\r\n* @param addedValue The amount of tokens to increase the allowance by.\r\n*/\r\nfunction increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n_approve(msg.sender, spender, _allowed[msg.sender][spender].add(addedValue));\r\nreturn true;\r\n}\r\n\r\n/**\r\n* @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n* approve should be called when allowed_[_spender] == 0. To decrement\r\n* allowed value is better to use this function to avoid 2 calls (and wait until\r\n* the first transaction is mined)\r\n* From MonolithDAO Token.sol\r\n* Emits an Approval event.\r\n* @param spender The address which will spend the funds.\r\n* @param subtractedValue The amount of tokens to decrease the allowance by.\r\n*/\r\nfunction decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n_approve(msg.sender, spender, _allowed[msg.sender][spender].sub(subtractedValue));\r\nreturn true;\r\n}\r\n\r\n/**\r\n* @dev Transfer token for a specified addresses\r\n* @param from The address to transfer from.\r\n* @param to The address to transfer to.\r\n* @param value The amount to be transferred.\r\n*/\r\nfunction _transfer(address from, address to, uint256 value) internal {\r\nrequire(to != address(0));\r\n\r\n_balances[from] = _balances[from].sub(value);\r\n_balances[to] = _balances[to].add(value);\r\nemit Transfer(from, to, value);\r\n}\r\n\r\n/**\r\n* @dev Internal function that mints an amount of the token and assigns it to\r\n* an account. This encapsulates the modification of balances such that the\r\n* proper events are emitted.\r\n* @param account The account that will receive the created tokens.\r\n* @param value The amount that will be created.\r\n*/\r\nfunction _mint(address account, uint256 value) internal {\r\nrequire(account != address(0));\r\n\r\n_totalSupply = _totalSupply.add(value);\r\n_balances[account] = _balances[account].add(value);\r\nemit Transfer(address(0), account, value);\r\n}\r\n\r\n/**\r\n* @dev Internal function that burns an amount of the token of a given\r\n* account.\r\n* @param account The account whose tokens will be burnt.\r\n* @param value The amount that will be burnt.\r\n*/\r\nfunction _burn(address account, uint256 value) internal {\r\nrequire(account != address(0));\r\n\r\n_totalSupply = _totalSupply.sub(value);\r\n_balances[account] = _balances[account].sub(value);\r\nemit Transfer(account, address(0), value);\r\n}\r\n\r\n/**\r\n* @dev Approve an address to spend another addresses\u0027 tokens.\r\n* @param owner The address that owns the tokens.\r\n* @param spender The address that will spend the tokens.\r\n* @param value The number of tokens that can be spent.\r\n*/\r\nfunction _approve(address owner, address spender, uint256 value) internal {\r\nrequire(spender != address(0));\r\nrequire(owner != address(0));\r\n\r\n_allowed[owner][spender] = value;\r\nemit Approval(owner, spender, value);\r\n}\r\n\r\n/**\r\n* @dev Internal function that burns an amount of the token of a given\r\n* account, deducting from the sender\u0027s allowance for said account. Uses the\r\n* internal burn function.\r\n* Emits an Approval event (reflecting the reduced allowance).\r\n* @param account The account whose tokens will be burnt.\r\n* @param value The amount that will be burnt.\r\n*/\r\nfunction _burnFrom(address account, uint256 value) internal {\r\n_burn(account, value);\r\n_approve(account, msg.sender, _allowed[account][msg.sender].sub(value));\r\n}\r\n}\r\n\r\n// File: contracts\\ERC20\\HabriumERC20Token.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n* @title HabriumERC20Token\r\n* @author Habrium (visit https://Habrium.com)\r\n*\r\n* @dev Standard ERC20 token with optional functions implemented.\r\n* For full specification of ERC-20 standard see:\r\n* https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\r\n*/\r\ncontract HabriumERC20Token is ERC20 {\r\n\r\nstring private _name;\r\nstring private _symbol;\r\nuint8 private _decimals;\r\n\r\nconstructor(string memory name, string memory symbol, uint8 decimals, uint256 totalSupply, address payable feeReceiver, address tokenOwnerAddress) public payable {\r\n_name = name;\r\n_symbol = symbol;\r\n_decimals = decimals;\r\n\r\n// set tokenOwnerAddress as owner of all tokens\r\n_mint(tokenOwnerAddress, totalSupply);\r\n\r\n// pay the service fee for contract deployment\r\nfeeReceiver.transfer(msg.value);\r\n}\r\n\r\n// optional functions from ERC20 stardard\r\n\r\n/**\r\n* @return the name of the token.\r\n*/\r\nfunction name() public view returns (string memory) {\r\nreturn _name;\r\n}\r\n\r\n/**\r\n* @return the symbol of the token.\r\n*/\r\nfunction symbol() public view returns (string memory) {\r\nreturn _symbol;\r\n}\r\n\r\n/**\r\n* @return the number of decimals of the token.\r\n*/\r\nfunction decimals() public view returns (uint8) {\r\nreturn _decimals;\r\n}\r\n}","ABI":"[{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022name\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022spender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022approve\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022totalSupply\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022from\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022transferFrom\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022decimals\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint8\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022spender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022addedValue\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022increaseAllowance\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022owner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022balanceOf\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022symbol\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022spender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022subtractedValue\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022decreaseAllowance\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022transfer\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022owner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022spender\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022allowance\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[{\u0022name\u0022:\u0022name\u0022,\u0022type\u0022:\u0022string\u0022},{\u0022name\u0022:\u0022symbol\u0022,\u0022type\u0022:\u0022string\u0022},{\u0022name\u0022:\u0022decimals\u0022,\u0022type\u0022:\u0022uint8\u0022},{\u0022name\u0022:\u0022totalSupply\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022feeReceiver\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022tokenOwnerAddress\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:true,\u0022stateMutability\u0022:\u0022payable\u0022,\u0022type\u0022:\u0022constructor\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022from\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022Transfer\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022owner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022spender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022Approval\u0022,\u0022type\u0022:\u0022event\u0022}]","ContractName":"HabriumERC20Token","CompilerVersion":"v0.5.0\u002Bcommit.1d4f565a","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000f8277896582678ac000000000000000000000000000000818650c82aac2a2bca045055465b41b828191c8a000000000000000000000000818650c82aac2a2bca045055465b41b828191c8a000000000000000000000000000000000000000000000000000000000000000d4861627269756d20546f6b656e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044841425200000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://ccb944955937f48372841bfab662807f9986c5ace06e95fb41df1853a9d6622c"}]