[{"SourceCode":"// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity\u0027s arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * \u0060SafeMath\u0060 restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it\u0027s recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060\u002B\u0060 operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a \u002B b;\r\n        require(c \u003E= a, \u0022SafeMath: addition overflow\u0022);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060-\u0060 operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b \u003C= a, \u0022SafeMath: subtraction overflow\u0022);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060*\u0060 operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\r\n        // benefit is lost if \u0027b\u0027 is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \u0022SafeMath: multiplication overflow\u0022);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060/\u0060 operator. Note: this function uses a\r\n     * \u0060revert\u0060 opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b \u003E 0, \u0022SafeMath: division by zero\u0022);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c \u002B a % b); // There is no case in which this doesn\u0027t hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060%\u0060 operator. This function uses a \u0060revert\u0060\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \u0022SafeMath: modulo by zero\u0022);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/ITwistedSisterAccessControls.sol\r\n\r\npragma solidity ^0.5.12;\r\n\r\ncontract ITwistedSisterAccessControls {\r\n    function isWhitelisted(address account) public view returns (bool);\r\n\r\n    function isWhitelistAdmin(address account) public view returns (bool);\r\n}\r\n\r\n// File: contracts/interfaces/ITwistedSisterTokenCreator.sol\r\n\r\npragma solidity ^0.5.12;\r\n\r\ncontract ITwistedSisterTokenCreator {\r\n    function createTwisted(\r\n        uint256 _round,\r\n        uint256 _parameter,\r\n        string calldata _ipfsHash,\r\n        address _recipient\r\n    ) external returns (uint256 _tokenId);\r\n}\r\n\r\n// File: contracts/interfaces/ITwistedSisterArtistCommissionRegistry.sol\r\n\r\npragma solidity ^0.5.12;\r\n\r\ncontract ITwistedSisterArtistCommissionRegistry {\r\n    function getCommissionSplits() external view returns (uint256[] memory _percentages, address payable[] memory _artists);\r\n    function getMaxCommission() external view returns (uint256);\r\n}\r\n\r\n// File: contracts/TwistedSisterArtistFundSplitter.sol\r\n\r\npragma solidity ^0.5.12;\r\n\r\n\r\n\r\n\r\ncontract TwistedSisterArtistFundSplitter {\r\n    using SafeMath for uint256;\r\n\r\n    event FundSplitAndTransferred(uint256 _totalValue, address payable _recipient);\r\n\r\n    ITwistedSisterArtistCommissionRegistry public artistCommissionRegistry;\r\n\r\n    constructor(ITwistedSisterArtistCommissionRegistry _artistCommissionRegistry) public {\r\n        artistCommissionRegistry = _artistCommissionRegistry;\r\n    }\r\n\r\n    function() external payable {\r\n        (uint256[] memory _percentages, address payable[] memory _artists) = artistCommissionRegistry.getCommissionSplits();\r\n        require(_percentages.length \u003E 0, \u0022No commissions found\u0022);\r\n\r\n        uint256 modulo = artistCommissionRegistry.getMaxCommission();\r\n\r\n        for (uint256 i = 0; i \u003C _percentages.length; i\u002B\u002B) {\r\n            uint256 percentage = _percentages[i];\r\n            address payable artist = _artists[i];\r\n\r\n            uint256 valueToSend = msg.value.div(modulo).mul(percentage);\r\n            (bool success, ) = artist.call.value(valueToSend)(\u0022\u0022);\r\n            require(success, \u0022Transfer failed\u0022);\r\n\r\n            emit FundSplitAndTransferred(valueToSend, artist);\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/TwistedSisterAuction.sol\r\n\r\npragma solidity ^0.5.12;\r\n\r\n\r\n\r\n\r\n\r\ncontract TwistedSisterAuction {\r\n    using SafeMath for uint256;\r\n\r\n    event BidAccepted(\r\n        uint256 indexed _round,\r\n        uint256 _timeStamp,\r\n        uint256 _param,\r\n        uint256 _amount,\r\n        address indexed _bidder\r\n    );\r\n\r\n    event BidderRefunded(\r\n        uint256 indexed _round,\r\n        uint256 _amount,\r\n        address indexed _bidder\r\n    );\r\n\r\n    event RoundFinalised(\r\n        uint256 indexed _round,\r\n        uint256 _timestamp,\r\n        uint256 _param,\r\n        uint256 _highestBid,\r\n        address _highestBidder\r\n    );\r\n\r\n    address payable printingFund;\r\n    address payable auctionOwner;\r\n\r\n    uint256 public auctionStartTime;\r\n\r\n    uint256 public minBid = 0.02 ether;\r\n    uint256 public currentRound = 1;\r\n    uint256 public numOfRounds = 21;\r\n    uint256 public roundLengthInSeconds = 0.5 days;\r\n    uint256 constant public secondsInADay = 1 days;\r\n\r\n    // round \u003C\u003E parameter from highest bidder\r\n    mapping(uint256 =\u003E uint256) public winningRoundParameter;\r\n\r\n    // round \u003C\u003E highest bid value\r\n    mapping(uint256 =\u003E uint256) public highestBidFromRound;\r\n\r\n    // round \u003C\u003E address of the highest bidder\r\n    mapping(uint256 =\u003E address) public highestBidderFromRound;\r\n\r\n    ITwistedSisterAccessControls public accessControls;\r\n    ITwistedSisterTokenCreator public twistedTokenCreator;\r\n    TwistedSisterArtistFundSplitter public artistFundSplitter;\r\n\r\n    modifier isWhitelisted() {\r\n        require(accessControls.isWhitelisted(msg.sender), \u0022Caller not whitelisted\u0022);\r\n        _;\r\n    }\r\n\r\n    constructor(ITwistedSisterAccessControls _accessControls,\r\n                ITwistedSisterTokenCreator _twistedTokenCreator,\r\n                TwistedSisterArtistFundSplitter _artistFundSplitter,\r\n                address payable _printingFund,\r\n                address payable _auctionOwner,\r\n                uint256 _auctionStartTime) public {\r\n        require(now \u003C _auctionStartTime, \u0022Auction start time is not in the future\u0022);\r\n        accessControls = _accessControls;\r\n        twistedTokenCreator = _twistedTokenCreator;\r\n        artistFundSplitter = _artistFundSplitter;\r\n        printingFund = _printingFund;\r\n        auctionStartTime = _auctionStartTime;\r\n        auctionOwner = _auctionOwner;\r\n    }\r\n\r\n    function _isWithinBiddingWindowForRound() internal view returns (bool) {\r\n        uint256 offsetFromStartingRound = currentRound.sub(1);\r\n        uint256 currentRoundSecondsOffsetSinceFirstRound = secondsInADay.mul(offsetFromStartingRound);\r\n        uint256 currentRoundStartTime = auctionStartTime.add(currentRoundSecondsOffsetSinceFirstRound);\r\n        uint256 currentRoundEndTime = currentRoundStartTime.add(roundLengthInSeconds);\r\n        return now \u003E= currentRoundStartTime \u0026\u0026 now \u003C= currentRoundEndTime;\r\n    }\r\n\r\n    function _isBidValid(uint256 _bidValue) internal view {\r\n        require(currentRound \u003C= numOfRounds, \u0022Auction has ended\u0022);\r\n        require(_bidValue \u003E= minBid, \u0022The bid didn\u0027t reach the minimum bid threshold\u0022);\r\n        require(_bidValue \u003E= highestBidFromRound[currentRound].add(minBid), \u0022The bid was not higher than the last\u0022);\r\n        require(_isWithinBiddingWindowForRound(), \u0022This round\u0027s bidding window is not open\u0022);\r\n    }\r\n\r\n    function _refundHighestBidder() internal {\r\n        uint256 highestBidAmount = highestBidFromRound[currentRound];\r\n        if (highestBidAmount \u003E 0) {\r\n            address highestBidder = highestBidderFromRound[currentRound];\r\n\r\n            // Clear out highest bidder as there is no longer one\r\n            delete highestBidderFromRound[currentRound];\r\n\r\n            (bool success, ) = highestBidder.call.value(highestBidAmount)(\u0022\u0022);\r\n            require(success, \u0022Failed to refund the highest bidder\u0022);\r\n\r\n            emit BidderRefunded(currentRound, highestBidAmount, highestBidder);\r\n        }\r\n    }\r\n\r\n    function _splitFundsFromHighestBid() internal {\r\n        // Split - 50% -\u003E 3D Printing Fund, 50% -\u003E TwistedArtistFundSplitter\r\n        uint256 valueToSend = highestBidFromRound[currentRound.sub(1)].div(2);\r\n\r\n        (bool pfSuccess, ) = printingFund.call.value(valueToSend)(\u0022\u0022);\r\n        require(pfSuccess, \u0022Failed to transfer funds to the printing fund\u0022);\r\n\r\n        (bool fsSuccess, ) = address(artistFundSplitter).call.value(valueToSend)(\u0022\u0022);\r\n        require(fsSuccess, \u0022Failed to send funds to the auction fund splitter\u0022);\r\n    }\r\n\r\n    function bid(uint256 _parameter) external payable {\r\n        require(_parameter \u003E 0, \u0022The parameter cannot be zero\u0022);\r\n        _isBidValid(msg.value);\r\n        _refundHighestBidder();\r\n        highestBidFromRound[currentRound] = msg.value;\r\n        highestBidderFromRound[currentRound] = msg.sender;\r\n        winningRoundParameter[currentRound] = _parameter;\r\n        emit BidAccepted(currentRound, now, winningRoundParameter[currentRound], highestBidFromRound[currentRound], highestBidderFromRound[currentRound]);\r\n    }\r\n\r\n    function issueTwistAndPrepNextRound(string calldata _ipfsHash) external isWhitelisted {\r\n        require(!_isWithinBiddingWindowForRound(), \u0022Current round still active\u0022);\r\n        require(currentRound \u003C= numOfRounds, \u0022Auction has ended\u0022);\r\n\r\n        uint256 previousRound = currentRound;\r\n        currentRound = currentRound.add(1);\r\n\r\n        // Handle no-bid scenario\r\n        if (highestBidderFromRound[previousRound] == address(0)) {\r\n            highestBidderFromRound[previousRound] = auctionOwner;\r\n            winningRoundParameter[previousRound] = 1; // 1 is the default and first param (1...64)\r\n        }\r\n\r\n        // Issue the TWIST\r\n        address winner = highestBidderFromRound[previousRound];\r\n        uint256 winningRoundParam = winningRoundParameter[previousRound];\r\n        uint256 tokenId = twistedTokenCreator.createTwisted(previousRound, winningRoundParam, _ipfsHash, winner);\r\n        require(tokenId == previousRound, \u0022Error minting the TWIST token\u0022);\r\n\r\n        // Take the proceedings from the highest bid and split funds accordingly\r\n        _splitFundsFromHighestBid();\r\n\r\n        emit RoundFinalised(previousRound, now, winningRoundParam, highestBidFromRound[previousRound], winner);\r\n    }\r\n\r\n    function updateAuctionStartTime(uint256 _auctionStartTime) external isWhitelisted {\r\n        auctionStartTime = _auctionStartTime;\r\n    }\r\n\r\n    function updateNumberOfRounds(uint256 _numOfRounds) external isWhitelisted {\r\n        require(_numOfRounds \u003E= currentRound, \u0022Number of rounds can\u0027t be smaller than the number of previous\u0022);\r\n        numOfRounds = _numOfRounds;\r\n    }\r\n\r\n    function updateRoundLength(uint256 _roundLengthInSeconds) external isWhitelisted {\r\n        require(_roundLengthInSeconds \u003C secondsInADay);\r\n        roundLengthInSeconds = _roundLengthInSeconds;\r\n    }\r\n\r\n    function updateArtistFundSplitter(TwistedSisterArtistFundSplitter _artistFundSplitter) external isWhitelisted {\r\n        artistFundSplitter = _artistFundSplitter;\r\n    }\r\n}","ABI":"[{\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022contract ITwistedSisterAccessControls\u0022,\u0022name\u0022:\u0022_accessControls\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022contract ITwistedSisterTokenCreator\u0022,\u0022name\u0022:\u0022_twistedTokenCreator\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022contract TwistedSisterArtistFundSplitter\u0022,\u0022name\u0022:\u0022_artistFundSplitter\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022address payable\u0022,\u0022name\u0022:\u0022_printingFund\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022address payable\u0022,\u0022name\u0022:\u0022_auctionOwner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_auctionStartTime\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022constructor\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_round\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_timeStamp\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_param\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_amount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_bidder\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022BidAccepted\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_round\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_amount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_bidder\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022BidderRefunded\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_round\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_timestamp\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_param\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_highestBid\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_highestBidder\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022RoundFinalised\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022accessControls\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022contract ITwistedSisterAccessControls\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022artistFundSplitter\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022contract TwistedSisterArtistFundSplitter\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022auctionStartTime\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_parameter\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022bid\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:true,\u0022stateMutability\u0022:\u0022payable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022currentRound\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022highestBidFromRound\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022highestBidderFromRound\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022string\u0022,\u0022name\u0022:\u0022_ipfsHash\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022name\u0022:\u0022issueTwistAndPrepNextRound\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022minBid\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022numOfRounds\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022roundLengthInSeconds\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022secondsInADay\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022twistedTokenCreator\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022contract ITwistedSisterTokenCreator\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022contract TwistedSisterArtistFundSplitter\u0022,\u0022name\u0022:\u0022_artistFundSplitter\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022updateArtistFundSplitter\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_auctionStartTime\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022updateAuctionStartTime\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_numOfRounds\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022updateNumberOfRounds\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_roundLengthInSeconds\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022updateRoundLength\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022winningRoundParameter\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022}]","ContractName":"TwistedSisterAuction","CompilerVersion":"v0.5.12\u002Bcommit.7709ece9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000095a825196046f2322943d06119eb530b1bb064bb00000000000000000000000062acb9a3ecdc880dc8ab6dfd6cf48ca07ed10de400000000000000000000000031130d3ad9e408d502a799495e7d24073743b5d2000000000000000000000000b2d3097580b5d1a5e352ec9fc96566d792bc67d40000000000000000000000007edf95dea126e5ef4fc2fcffc83c6bbde82d5c54000000000000000000000000000000000000000000000000000000005dbd3780","Library":"","SwarmSource":"bzzr://277c700e6e53dbf173c82f9e46cb7a25927ff769a0440f3d6fd576256a2a5fed"}]