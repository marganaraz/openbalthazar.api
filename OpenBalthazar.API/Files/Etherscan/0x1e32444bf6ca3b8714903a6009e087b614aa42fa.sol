[{"SourceCode":"pragma solidity ^0.5.12;\r\n\r\nlibrary SafeMath {\r\n    \r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n   \r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n   \r\n    modifier onlyOwner() {\r\n        require(msg.sender == _owner);\r\n        _;\r\n    }\r\n\r\n    function rescuebtcgwTokens(address tokenAddr, address receiver, uint256 amount) external onlyOwner {\r\n        IERC20 __btcgw = IERC20(tokenAddr);\r\n        require(receiver != address(0));\r\n        uint256 __balance = __btcgw.balanceOf(address(this));\r\n        \r\n        require(__balance \u003E= amount);\r\n        assert(__btcgw.transfer(receiver, amount));\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function balanceOf(address owner) external view returns (uint256);\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n}\r\n\r\n //--BTCGW BatchTransfer--Carstyle--\r\ncontract BatchTransfer is Ownable{\r\n    using SafeMath for uint256;\r\n    \r\n    IERC20 BTCGW = IERC20(0x305F8157C1f841fBD378f636aBF390c5b4C0e330); //contract address of BTCGW\r\n\r\n    \r\n    function batchTransferBoth(address payable[] memory accounts, uint256 etherValue, uint256 btcgwValue) public payable {\r\n        uint256 __etherBalance = address(this).balance;\r\n        uint256 __btcgwAllowance = BTCGW.allowance(msg.sender, address(this));\r\n\r\n        require(__etherBalance \u003E= etherValue.mul(accounts.length));\r\n        require(__btcgwAllowance \u003E= btcgwValue.mul(accounts.length));\r\n\r\n        for (uint256 i = 0; i \u003C accounts.length; i\u002B\u002B) {\r\n            accounts[i].transfer(etherValue);\r\n            assert(BTCGW.transferFrom(msg.sender, accounts[i], btcgwValue));\r\n        }\r\n    }\r\n\r\n    function batchTransferEther(address payable[] memory accounts, uint256 etherValue) public payable {\r\n        uint256 __etherBalance = address(this).balance;\r\n\r\n        require(__etherBalance \u003E= etherValue.mul(accounts.length));\r\n\r\n        for (uint256 i = 0; i \u003C accounts.length; i\u002B\u002B) {\r\n            accounts[i].transfer(etherValue);\r\n        }\r\n    }\r\n\r\n   \r\n    function batchTransferBTCGW(address[] memory accounts, uint256 btcgwValue) public {\r\n        uint256 __btcgwAllowance = BTCGW.allowance(msg.sender, address(this));\r\n\r\n        require(__btcgwAllowance \u003E= btcgwValue.mul(accounts.length));\r\n\r\n        for (uint256 i = 0; i \u003C accounts.length; i\u002B\u002B) {\r\n            assert(BTCGW.transferFrom(msg.sender, accounts[i], btcgwValue));\r\n        }\r\n    }\r\n}","ABI":"[{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022previousOwner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022OwnershipTransferred\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address[]\u0022,\u0022name\u0022:\u0022accounts\u0022,\u0022type\u0022:\u0022address[]\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022btcgwValue\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022batchTransferBTCGW\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address payable[]\u0022,\u0022name\u0022:\u0022accounts\u0022,\u0022type\u0022:\u0022address[]\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022etherValue\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022btcgwValue\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022batchTransferBoth\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:true,\u0022stateMutability\u0022:\u0022payable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address payable[]\u0022,\u0022name\u0022:\u0022accounts\u0022,\u0022type\u0022:\u0022address[]\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022etherValue\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022batchTransferEther\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:true,\u0022stateMutability\u0022:\u0022payable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022owner\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022tokenAddr\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022receiver\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022rescuebtcgwTokens\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022}]","ContractName":"BatchTransfer","CompilerVersion":"v0.5.12\u002Bcommit.7709ece9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://138b402c0454e9d3df70a188172f8d0ae95d4175dd0342736ac1c8e4e6ea788b"}]