[{"SourceCode":"pragma solidity \u003E=0.4.22 \u003C0.7.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity\u0027s arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * \u0060SafeMath\u0060 restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it\u0027s recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060\u002B\u0060 operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a \u002B b;\r\n        require(c \u003E= a, \u0022SafeMath: addition overflow\u0022);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060-\u0060 operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b \u003C= a, \u0022SafeMath: subtraction overflow\u0022);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060*\u0060 operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\r\n        // benefit is lost if \u0027b\u0027 is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \u0022SafeMath: multiplication overflow\u0022);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060/\u0060 operator. Note: this function uses a\r\n     * \u0060revert\u0060 opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b \u003E 0, \u0022SafeMath: division by zero\u0022);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c \u002B a % b); // There is no case in which this doesn\u0027t hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060%\u0060 operator. This function uses a \u0060revert\u0060\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \u0022SafeMath: modulo by zero\u0022);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\nlibrary StringUtils {\r\n  /// @dev Does a byte-by-byte lexicographical comparison of two strings.\r\n  /// @return a negative number if \u0060_a\u0060 is smaller, zero if they are equal\r\n  /// and a positive numbe if \u0060_b\u0060 is smaller.\r\n  function compare(string memory _a, string memory _b) internal pure returns(int) {\r\n    bytes memory a = bytes(_a);\r\n    bytes memory b = bytes(_b);\r\n    uint minLength = a.length;\r\n    if (b.length \u003C minLength) { \r\n      minLength = b.length;\r\n    }\r\n    //@todo unroll the loop into increments of 32 and do full 32 byte comparisons\r\n    for (uint i = 0; i \u003C minLength; i\u002B\u002B) {\r\n      if (a[i] \u003C b[i]) return -1;\r\n      else if (a[i] \u003E b[i]) return 1;\r\n    }\r\n\r\n    if (a.length \u003C b.length) {\r\n      return -1;\r\n    } else if (a.length \u003E b.length) {\r\n      return 1;\r\n    } else {\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  /// @dev Compares two strings and returns true iff they are equal.\r\n  function equal(string memory _a, string memory _b) internal pure returns(bool) {\r\n    return compare(_a, _b) == 0;\r\n  }\r\n\r\n  /// @dev Finds the index of the first occurrence of _needle in _haystack\r\n  function indexOf(string memory _haystack, string memory _needle) internal pure returns(int) {\r\n    bytes memory h = bytes(_haystack);\r\n    bytes memory n = bytes(_needle);\r\n    if (h.length \u003C 1 || n.length \u003C 1 || (n.length \u003E h.length)) {\r\n      return -1;\r\n    } else if (h.length \u003E (2 ** 128 - 1)) {\r\n      // since we have to be able to return -1 (if the char isn\u0027t found or input error), \r\n      // this function must return an \u0022int\u0022 type with a max length of (2^128 - 1)\r\n      return -1;\r\n    } else {\r\n      uint subindex = 0;\r\n      for (uint i = 0; i \u003C h.length; i\u002B\u002B) {\r\n        if (h[i] == n[0]) { // found the first char of b\r\n          subindex = 1;\r\n          while (\r\n            subindex \u003C n.length \r\n            \u0026\u0026 (i \u002B subindex) \u003C h.length \r\n            \u0026\u0026 h[i \u002B subindex] == n[subindex]\r\n          ) { // search until the chars don\u0027t match or until we reach the end of a or b\r\n            subindex\u002B\u002B;\r\n          }\r\n          \r\n          if (subindex == n.length)\r\n            return int(i);\r\n        }\r\n      }\r\n      return -1;\r\n    }\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * A library for only submit hash string to blockchain\r\n *\r\n */\r\nlibrary HashOperateLib {\r\n  using SafeMath for uint256;\r\n  using StringUtils for string;\r\n\r\n  struct ExInfo {\r\n    address saver;\r\n    string saverName;\r\n    uint256 saveTime;\r\n  }\r\n\r\n  struct Info {\r\n    mapping(string =\u003E ExInfo) hashInfo;\r\n    string[] hashLib;\r\n  }\r\n\r\n  /**\r\n   * @dev insertHash,insert method\r\n   * @param  _self is where the data will be saved\r\n   * @param  _hash is input value of hash\r\n   * @return bool,true is successful and false is failed\r\n   */\r\n  function insertHash(Info storage _self, string memory _hash, string memory _saverName) \r\n    internal \r\n    returns (bool) \r\n  {\r\n    if (_self.hashInfo[_hash].saveTime \u003E 0) {\r\n      return false;\r\n    } else {\r\n      _self.hashInfo[_hash].saver = msg.sender; // not msg.sender, we need the origin TX submitter;\r\n      _self.hashInfo[_hash].saveTime = now;\r\n      _self.hashInfo[_hash].saverName = _saverName;\r\n      _self.hashLib.push(_hash);\r\n\r\n      return true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev deleteHash,delete method\r\n   * @param  _self is where the data will be saved\r\n   *         _hash is input value of hash\r\n   * @return bool,true is successful and false is failed\r\n   */\r\n  function deleteHash(Info storage _self, string memory _hash) internal returns (bool) {\r\n    require(!_hash.equal(\u0022\u0022));\r\n    if (_self.hashInfo[_hash].saveTime \u003E 0) {\r\n      delete _self.hashInfo[_hash];\r\n      removeHash(_self, _hash);\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev selectHash,select method\r\n   * @param  _self is where the data will be saved\r\n   *         _hash is input value of hash\r\n   * @return true/false,saver,save time\r\n   */\r\n  function selectHash(Info storage _self, string memory _hash) \r\n    internal \r\n    view \r\n    returns (bool, address, string memory, uint256) \r\n  {\r\n    if (_self.hashInfo[_hash].saveTime \u003E 0) {\r\n      return (\r\n        true, \r\n        _self.hashInfo[_hash].saver,\r\n        _self.hashInfo[_hash].saverName, \r\n        _self.hashInfo[_hash].saveTime\r\n      );\r\n    } else {\r\n      return (false, address(0), \u0022\u0022, 0);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev getHashByInd,get one hash string by its index\r\n   * @param  _self is where the data will be saved\r\n   *         _ind is input value of the index\r\n   * @return string, the hash string\r\n   */\r\n  function getHashByInd(Info storage _self, uint _ind) internal view returns (string memory) {\r\n    return (_self.hashLib[_ind]);\r\n  }\r\n\r\n  /**\r\n   * @dev getHashByInd,get one hash string by its index\r\n   * @param  _self is where the data will be saved\r\n   *         _ind is input value of the index\r\n   * @return string, the hash string\r\n   */\r\n  function isHashExisted(Info storage _self, string memory _hash) \r\n    internal \r\n    view \r\n    returns (bool) \r\n  {\r\n    return (_self.hashInfo[_hash].saveTime \u003E 0);\r\n  }\r\n\r\n  /**\r\n   * @dev remove a hash value from hash info storage\r\n   *\r\n   * @param _hashStr the account address in the list\r\n   */\r\n  function removeHash(Info storage _self, string memory _hashStr) internal returns (bool) {\r\n    uint i = 0;\r\n    for (; i \u003C _self.hashLib.length; i = i.add(1)) {\r\n      if (_self.hashLib[i].equal(_hashStr)) \r\n        break;\r\n    }\r\n\r\n    if (i \u003E= _self.hashLib.length)\r\n      return false;\r\n\r\n    uint lastInd = _self.hashLib.length.sub(1);\r\n    while (i \u003C lastInd) {\r\n      _self.hashLib[i] = _self.hashLib[i.add(1)];\r\n      i = i.add(1);\r\n    }\r\n\r\n    delete _self.hashLib[lastInd];\r\n    _self.hashLib.length = lastInd;\r\n\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * \u0060onlyOwner\u0060, which can be aplied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \u0022Ownable: caller is not the owner\u0022);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * \u0060onlyOwner\u0060 functions anymore. Can only be called by the current owner.\r\n     *\r\n     * \u003E Note: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (\u0060newOwner\u0060).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (\u0060newOwner\u0060).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \u0022Ownable: new owner is the zero address\u0022);\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n/*\r\n * @title String \u0026 slice utility library for Solidity contracts.\r\n * @author Nick Johnson \u003Carachnid@notdot.net\u003E\r\n *\r\n * @dev Functionality in this library is largely implemented using an\r\n *      abstraction called a \u0027slice\u0027. A slice represents a part of a string -\r\n *      anything from the entire string to a single character, or even no\r\n *      characters at all (a 0-length slice). Since a slice only has to specify\r\n *      an offset and a length, copying and manipulating slices is a lot less\r\n *      expensive than copying and manipulating the strings they reference.\r\n *\r\n *      To further reduce gas costs, most functions on slice that need to return\r\n *      a slice modify the original one instead of allocating a new one; for\r\n *      instance, \u0060s.split(\u0022.\u0022)\u0060 will return the text up to the first \u0027.\u0027,\r\n *      modifying s to only contain the remainder of the string after the \u0027.\u0027.\r\n *      In situations where you do not want to modify the original slice, you\r\n *      can make a copy first with \u0060.copy()\u0060, for example:\r\n *      \u0060s.copy().split(\u0022.\u0022)\u0060. Try and avoid using this idiom in loops; since\r\n *      Solidity has no memory management, it will result in allocating many\r\n *      short-lived slices that are later discarded.\r\n *\r\n *      Functions that return two slices come in two versions: a non-allocating\r\n *      version that takes the second slice as an argument, modifying it in\r\n *      place, and an allocating version that allocates and returns the second\r\n *      slice; see \u0060nextRune\u0060 for example.\r\n *\r\n *      Functions that have to copy string data will return strings rather than\r\n *      slices; these can be cast back to slices for further processing if\r\n *      required.\r\n *\r\n *      For convenience, some functions are provided with non-modifying\r\n *      variants that create a new slice and return both; for instance,\r\n *      \u0060s.splitNew(\u0027.\u0027)\u0060 leaves s unmodified, and returns two values\r\n *      corresponding to the left and right parts of the string.\r\n */\r\n\r\n\r\nlibrary strings {\r\n    struct slice {\r\n        uint _len;\r\n        uint _ptr;\r\n    }\r\n\r\n    function memcpy(uint dest, uint src, uint len) private pure {\r\n        // Copy word-length chunks while possible\r\n        for(; len \u003E= 32; len -= 32) {\r\n            assembly {\r\n                mstore(dest, mload(src))\r\n            }\r\n            dest \u002B= 32;\r\n            src \u002B= 32;\r\n        }\r\n\r\n        // Copy remaining bytes\r\n        uint mask = 256 ** (32 - len) - 1;\r\n        assembly {\r\n            let srcpart := and(mload(src), not(mask))\r\n            let destpart := and(mload(dest), mask)\r\n            mstore(dest, or(destpart, srcpart))\r\n        }\r\n    }\r\n\r\n    /*\r\n     * @dev Returns a slice containing the entire string.\r\n     * @param self The string to make a slice from.\r\n     * @return A newly allocated slice containing the entire string.\r\n     */\r\n    function toSlice(string memory self) internal pure returns (slice memory) {\r\n        uint ptr;\r\n        assembly {\r\n            ptr := add(self, 0x20)\r\n        }\r\n        return slice(bytes(self).length, ptr);\r\n    }\r\n\r\n    /*\r\n     * @dev Returns the length of a null-terminated bytes32 string.\r\n     * @param self The value to find the length of.\r\n     * @return The length of the string, from 0 to 32.\r\n     */\r\n    function len(bytes32 self) internal pure returns (uint) {\r\n        uint ret;\r\n        if (self == 0)\r\n            return 0;\r\n        if (uint(self) \u0026 0xffffffffffffffffffffffffffffffff == 0) {\r\n            ret \u002B= 16;\r\n            self = bytes32(uint(self) / 0x100000000000000000000000000000000);\r\n        }\r\n        if (uint(self) \u0026 0xffffffffffffffff == 0) {\r\n            ret \u002B= 8;\r\n            self = bytes32(uint(self) / 0x10000000000000000);\r\n        }\r\n        if (uint(self) \u0026 0xffffffff == 0) {\r\n            ret \u002B= 4;\r\n            self = bytes32(uint(self) / 0x100000000);\r\n        }\r\n        if (uint(self) \u0026 0xffff == 0) {\r\n            ret \u002B= 2;\r\n            self = bytes32(uint(self) / 0x10000);\r\n        }\r\n        if (uint(self) \u0026 0xff == 0) {\r\n            ret \u002B= 1;\r\n        }\r\n        return 32 - ret;\r\n    }\r\n\r\n    /*\r\n     * @dev Returns a slice containing the entire bytes32, interpreted as a\r\n     *      null-terminated utf-8 string.\r\n     * @param self The bytes32 value to convert to a slice.\r\n     * @return A new slice containing the value of the input argument up to the\r\n     *         first null.\r\n     */\r\n    function toSliceB32(bytes32 self) internal pure returns (slice memory ret) {\r\n        // Allocate space for \u0060self\u0060 in memory, copy it there, and point ret at it\r\n        assembly {\r\n            let ptr := mload(0x40)\r\n            mstore(0x40, add(ptr, 0x20))\r\n            mstore(ptr, self)\r\n            mstore(add(ret, 0x20), ptr)\r\n        }\r\n        ret._len = len(self);\r\n    }\r\n\r\n    /*\r\n     * @dev Returns a new slice containing the same data as the current slice.\r\n     * @param self The slice to copy.\r\n     * @return A new slice containing the same data as \u0060self\u0060.\r\n     */\r\n    function copy(slice memory self) internal pure returns (slice memory) {\r\n        return slice(self._len, self._ptr);\r\n    }\r\n\r\n    /*\r\n     * @dev Copies a slice to a new string.\r\n     * @param self The slice to copy.\r\n     * @return A newly allocated string containing the slice\u0027s text.\r\n     */\r\n    function toString(slice memory self) internal pure returns (string memory) {\r\n        string memory ret = new string(self._len);\r\n        uint retptr;\r\n        assembly { retptr := add(ret, 32) }\r\n\r\n        memcpy(retptr, self._ptr, self._len);\r\n        return ret;\r\n    }\r\n\r\n    /*\r\n     * @dev Returns the length in runes of the slice. Note that this operation\r\n     *      takes time proportional to the length of the slice; avoid using it\r\n     *      in loops, and call \u0060slice.empty()\u0060 if you only need to know whether\r\n     *      the slice is empty or not.\r\n     * @param self The slice to operate on.\r\n     * @return The length of the slice in runes.\r\n     */\r\n    function len(slice memory self) internal pure returns (uint l) {\r\n        // Starting at ptr-31 means the LSB will be the byte we care about\r\n        uint ptr = self._ptr - 31;\r\n        uint end = ptr \u002B self._len;\r\n        for (l = 0; ptr \u003C end; l\u002B\u002B) {\r\n            uint8 b;\r\n            assembly { b := and(mload(ptr), 0xFF) }\r\n            if (b \u003C 0x80) {\r\n                ptr \u002B= 1;\r\n            } else if(b \u003C 0xE0) {\r\n                ptr \u002B= 2;\r\n            } else if(b \u003C 0xF0) {\r\n                ptr \u002B= 3;\r\n            } else if(b \u003C 0xF8) {\r\n                ptr \u002B= 4;\r\n            } else if(b \u003C 0xFC) {\r\n                ptr \u002B= 5;\r\n            } else {\r\n                ptr \u002B= 6;\r\n            }\r\n        }\r\n    }\r\n\r\n    /*\r\n     * @dev Returns true if the slice is empty (has a length of 0).\r\n     * @param self The slice to operate on.\r\n     * @return True if the slice is empty, False otherwise.\r\n     */\r\n    function empty(slice memory self) internal pure returns (bool) {\r\n        return self._len == 0;\r\n    }\r\n\r\n    /*\r\n     * @dev Returns a positive number if \u0060other\u0060 comes lexicographically after\r\n     *      \u0060self\u0060, a negative number if it comes before, or zero if the\r\n     *      contents of the two slices are equal. Comparison is done per-rune,\r\n     *      on unicode codepoints.\r\n     * @param self The first slice to compare.\r\n     * @param other The second slice to compare.\r\n     * @return The result of the comparison.\r\n     */\r\n    function compare(slice memory self, slice memory other) internal pure returns (int) {\r\n        uint shortest = self._len;\r\n        if (other._len \u003C self._len)\r\n            shortest = other._len;\r\n\r\n        uint selfptr = self._ptr;\r\n        uint otherptr = other._ptr;\r\n        for (uint idx = 0; idx \u003C shortest; idx \u002B= 32) {\r\n            uint a;\r\n            uint b;\r\n            assembly {\r\n                a := mload(selfptr)\r\n                b := mload(otherptr)\r\n            }\r\n            if (a != b) {\r\n                // Mask out irrelevant bytes and check again\r\n                uint256 mask = uint256(-1); // 0xffff...\r\n                if(shortest \u003C 32) {\r\n                  mask = ~(2 ** (8 * (32 - shortest \u002B idx)) - 1);\r\n                }\r\n                uint256 diff = (a \u0026 mask) - (b \u0026 mask);\r\n                if (diff != 0)\r\n                    return int(diff);\r\n            }\r\n            selfptr \u002B= 32;\r\n            otherptr \u002B= 32;\r\n        }\r\n        return int(self._len) - int(other._len);\r\n    }\r\n\r\n    /*\r\n     * @dev Returns true if the two slices contain the same text.\r\n     * @param self The first slice to compare.\r\n     * @param self The second slice to compare.\r\n     * @return True if the slices are equal, false otherwise.\r\n     */\r\n    function equals(slice memory self, slice memory other) internal pure returns (bool) {\r\n        return compare(self, other) == 0;\r\n    }\r\n\r\n    /*\r\n     * @dev Extracts the first rune in the slice into \u0060rune\u0060, advancing the\r\n     *      slice to point to the next rune and returning \u0060self\u0060.\r\n     * @param self The slice to operate on.\r\n     * @param rune The slice that will contain the first rune.\r\n     * @return \u0060rune\u0060.\r\n     */\r\n    function nextRune(slice memory self, slice memory rune) internal pure returns (slice memory) {\r\n        rune._ptr = self._ptr;\r\n\r\n        if (self._len == 0) {\r\n            rune._len = 0;\r\n            return rune;\r\n        }\r\n\r\n        uint l;\r\n        uint b;\r\n        // Load the first byte of the rune into the LSBs of b\r\n        assembly { b := and(mload(sub(mload(add(self, 32)), 31)), 0xFF) }\r\n        if (b \u003C 0x80) {\r\n            l = 1;\r\n        } else if(b \u003C 0xE0) {\r\n            l = 2;\r\n        } else if(b \u003C 0xF0) {\r\n            l = 3;\r\n        } else {\r\n            l = 4;\r\n        }\r\n\r\n        // Check for truncated codepoints\r\n        if (l \u003E self._len) {\r\n            rune._len = self._len;\r\n            self._ptr \u002B= self._len;\r\n            self._len = 0;\r\n            return rune;\r\n        }\r\n\r\n        self._ptr \u002B= l;\r\n        self._len -= l;\r\n        rune._len = l;\r\n        return rune;\r\n    }\r\n\r\n    /*\r\n     * @dev Returns the first rune in the slice, advancing the slice to point\r\n     *      to the next rune.\r\n     * @param self The slice to operate on.\r\n     * @return A slice containing only the first rune from \u0060self\u0060.\r\n     */\r\n    function nextRune(slice memory self) internal pure returns (slice memory ret) {\r\n        nextRune(self, ret);\r\n    }\r\n\r\n    /*\r\n     * @dev Returns the number of the first codepoint in the slice.\r\n     * @param self The slice to operate on.\r\n     * @return The number of the first codepoint in the slice.\r\n     */\r\n    function ord(slice memory self) internal pure returns (uint ret) {\r\n        if (self._len == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint word;\r\n        uint length;\r\n        uint divisor = 2 ** 248;\r\n\r\n        // Load the rune into the MSBs of b\r\n        assembly { word:= mload(mload(add(self, 32))) }\r\n        uint b = word / divisor;\r\n        if (b \u003C 0x80) {\r\n            ret = b;\r\n            length = 1;\r\n        } else if(b \u003C 0xE0) {\r\n            ret = b \u0026 0x1F;\r\n            length = 2;\r\n        } else if(b \u003C 0xF0) {\r\n            ret = b \u0026 0x0F;\r\n            length = 3;\r\n        } else {\r\n            ret = b \u0026 0x07;\r\n            length = 4;\r\n        }\r\n\r\n        // Check for truncated codepoints\r\n        if (length \u003E self._len) {\r\n            return 0;\r\n        }\r\n\r\n        for (uint i = 1; i \u003C length; i\u002B\u002B) {\r\n            divisor = divisor / 256;\r\n            b = (word / divisor) \u0026 0xFF;\r\n            if (b \u0026 0xC0 != 0x80) {\r\n                // Invalid UTF-8 sequence\r\n                return 0;\r\n            }\r\n            ret = (ret * 64) | (b \u0026 0x3F);\r\n        }\r\n\r\n        return ret;\r\n    }\r\n\r\n    /*\r\n     * @dev Returns the keccak-256 hash of the slice.\r\n     * @param self The slice to hash.\r\n     * @return The hash of the slice.\r\n     */\r\n    function keccak(slice memory self) internal pure returns (bytes32 ret) {\r\n        assembly {\r\n            ret := keccak256(mload(add(self, 32)), mload(self))\r\n        }\r\n    }\r\n\r\n    /*\r\n     * @dev Returns true if \u0060self\u0060 starts with \u0060needle\u0060.\r\n     * @param self The slice to operate on.\r\n     * @param needle The slice to search for.\r\n     * @return True if the slice starts with the provided text, false otherwise.\r\n     */\r\n    function startsWith(slice memory self, slice memory needle) internal pure returns (bool) {\r\n        if (self._len \u003C needle._len) {\r\n            return false;\r\n        }\r\n\r\n        if (self._ptr == needle._ptr) {\r\n            return true;\r\n        }\r\n\r\n        bool equal;\r\n        assembly {\r\n            let length := mload(needle)\r\n            let selfptr := mload(add(self, 0x20))\r\n            let needleptr := mload(add(needle, 0x20))\r\n            equal := eq(keccak256(selfptr, length), keccak256(needleptr, length))\r\n        }\r\n        return equal;\r\n    }\r\n\r\n    /*\r\n     * @dev If \u0060self\u0060 starts with \u0060needle\u0060, \u0060needle\u0060 is removed from the\r\n     *      beginning of \u0060self\u0060. Otherwise, \u0060self\u0060 is unmodified.\r\n     * @param self The slice to operate on.\r\n     * @param needle The slice to search for.\r\n     * @return \u0060self\u0060\r\n     */\r\n    function beyond(slice memory self, slice memory needle) internal pure returns (slice memory) {\r\n        if (self._len \u003C needle._len) {\r\n            return self;\r\n        }\r\n\r\n        bool equal = true;\r\n        if (self._ptr != needle._ptr) {\r\n            assembly {\r\n                let length := mload(needle)\r\n                let selfptr := mload(add(self, 0x20))\r\n                let needleptr := mload(add(needle, 0x20))\r\n                equal := eq(keccak256(selfptr, length), keccak256(needleptr, length))\r\n            }\r\n        }\r\n\r\n        if (equal) {\r\n            self._len -= needle._len;\r\n            self._ptr \u002B= needle._len;\r\n        }\r\n\r\n        return self;\r\n    }\r\n\r\n    /*\r\n     * @dev Returns true if the slice ends with \u0060needle\u0060.\r\n     * @param self The slice to operate on.\r\n     * @param needle The slice to search for.\r\n     * @return True if the slice starts with the provided text, false otherwise.\r\n     */\r\n    function endsWith(slice memory self, slice memory needle) internal pure returns (bool) {\r\n        if (self._len \u003C needle._len) {\r\n            return false;\r\n        }\r\n\r\n        uint selfptr = self._ptr \u002B self._len - needle._len;\r\n\r\n        if (selfptr == needle._ptr) {\r\n            return true;\r\n        }\r\n\r\n        bool equal;\r\n        assembly {\r\n            let length := mload(needle)\r\n            let needleptr := mload(add(needle, 0x20))\r\n            equal := eq(keccak256(selfptr, length), keccak256(needleptr, length))\r\n        }\r\n\r\n        return equal;\r\n    }\r\n\r\n    /*\r\n     * @dev If \u0060self\u0060 ends with \u0060needle\u0060, \u0060needle\u0060 is removed from the\r\n     *      end of \u0060self\u0060. Otherwise, \u0060self\u0060 is unmodified.\r\n     * @param self The slice to operate on.\r\n     * @param needle The slice to search for.\r\n     * @return \u0060self\u0060\r\n     */\r\n    function until(slice memory self, slice memory needle) internal pure returns (slice memory) {\r\n        if (self._len \u003C needle._len) {\r\n            return self;\r\n        }\r\n\r\n        uint selfptr = self._ptr \u002B self._len - needle._len;\r\n        bool equal = true;\r\n        if (selfptr != needle._ptr) {\r\n            assembly {\r\n                let length := mload(needle)\r\n                let needleptr := mload(add(needle, 0x20))\r\n                equal := eq(keccak256(selfptr, length), keccak256(needleptr, length))\r\n            }\r\n        }\r\n\r\n        if (equal) {\r\n            self._len -= needle._len;\r\n        }\r\n\r\n        return self;\r\n    }\r\n\r\n    // Returns the memory address of the first byte of the first occurrence of\r\n    // \u0060needle\u0060 in \u0060self\u0060, or the first byte after \u0060self\u0060 if not found.\r\n    function findPtr(uint selflen, uint selfptr, uint needlelen, uint needleptr) private pure returns (uint) {\r\n        uint ptr = selfptr;\r\n        uint idx;\r\n\r\n        if (needlelen \u003C= selflen) {\r\n            if (needlelen \u003C= 32) {\r\n                bytes32 mask = bytes32(~(2 ** (8 * (32 - needlelen)) - 1));\r\n\r\n                bytes32 needledata;\r\n                assembly { needledata := and(mload(needleptr), mask) }\r\n\r\n                uint end = selfptr \u002B selflen - needlelen;\r\n                bytes32 ptrdata;\r\n                assembly { ptrdata := and(mload(ptr), mask) }\r\n\r\n                while (ptrdata != needledata) {\r\n                    if (ptr \u003E= end)\r\n                        return selfptr \u002B selflen;\r\n                    ptr\u002B\u002B;\r\n                    assembly { ptrdata := and(mload(ptr), mask) }\r\n                }\r\n                return ptr;\r\n            } else {\r\n                // For long needles, use hashing\r\n                bytes32 hash;\r\n                assembly { hash := keccak256(needleptr, needlelen) }\r\n\r\n                for (idx = 0; idx \u003C= selflen - needlelen; idx\u002B\u002B) {\r\n                    bytes32 testHash;\r\n                    assembly { testHash := keccak256(ptr, needlelen) }\r\n                    if (hash == testHash)\r\n                        return ptr;\r\n                    ptr \u002B= 1;\r\n                }\r\n            }\r\n        }\r\n        return selfptr \u002B selflen;\r\n    }\r\n\r\n    // Returns the memory address of the first byte after the last occurrence of\r\n    // \u0060needle\u0060 in \u0060self\u0060, or the address of \u0060self\u0060 if not found.\r\n    function rfindPtr(uint selflen, uint selfptr, uint needlelen, uint needleptr) private pure returns (uint) {\r\n        uint ptr;\r\n\r\n        if (needlelen \u003C= selflen) {\r\n            if (needlelen \u003C= 32) {\r\n                bytes32 mask = bytes32(~(2 ** (8 * (32 - needlelen)) - 1));\r\n\r\n                bytes32 needledata;\r\n                assembly { needledata := and(mload(needleptr), mask) }\r\n\r\n                ptr = selfptr \u002B selflen - needlelen;\r\n                bytes32 ptrdata;\r\n                assembly { ptrdata := and(mload(ptr), mask) }\r\n\r\n                while (ptrdata != needledata) {\r\n                    if (ptr \u003C= selfptr)\r\n                        return selfptr;\r\n                    ptr--;\r\n                    assembly { ptrdata := and(mload(ptr), mask) }\r\n                }\r\n                return ptr \u002B needlelen;\r\n            } else {\r\n                // For long needles, use hashing\r\n                bytes32 hash;\r\n                assembly { hash := keccak256(needleptr, needlelen) }\r\n                ptr = selfptr \u002B (selflen - needlelen);\r\n                while (ptr \u003E= selfptr) {\r\n                    bytes32 testHash;\r\n                    assembly { testHash := keccak256(ptr, needlelen) }\r\n                    if (hash == testHash)\r\n                        return ptr \u002B needlelen;\r\n                    ptr -= 1;\r\n                }\r\n            }\r\n        }\r\n        return selfptr;\r\n    }\r\n\r\n    /*\r\n     * @dev Modifies \u0060self\u0060 to contain everything from the first occurrence of\r\n     *      \u0060needle\u0060 to the end of the slice. \u0060self\u0060 is set to the empty slice\r\n     *      if \u0060needle\u0060 is not found.\r\n     * @param self The slice to search and modify.\r\n     * @param needle The text to search for.\r\n     * @return \u0060self\u0060.\r\n     */\r\n    function find(slice memory self, slice memory needle) internal pure returns (slice memory) {\r\n        uint ptr = findPtr(self._len, self._ptr, needle._len, needle._ptr);\r\n        self._len -= ptr - self._ptr;\r\n        self._ptr = ptr;\r\n        return self;\r\n    }\r\n\r\n    /*\r\n     * @dev Modifies \u0060self\u0060 to contain the part of the string from the start of\r\n     *      \u0060self\u0060 to the end of the first occurrence of \u0060needle\u0060. If \u0060needle\u0060\r\n     *      is not found, \u0060self\u0060 is set to the empty slice.\r\n     * @param self The slice to search and modify.\r\n     * @param needle The text to search for.\r\n     * @return \u0060self\u0060.\r\n     */\r\n    function rfind(slice memory self, slice memory needle) internal pure returns (slice memory) {\r\n        uint ptr = rfindPtr(self._len, self._ptr, needle._len, needle._ptr);\r\n        self._len = ptr - self._ptr;\r\n        return self;\r\n    }\r\n\r\n    /*\r\n     * @dev Splits the slice, setting \u0060self\u0060 to everything after the first\r\n     *      occurrence of \u0060needle\u0060, and \u0060token\u0060 to everything before it. If\r\n     *      \u0060needle\u0060 does not occur in \u0060self\u0060, \u0060self\u0060 is set to the empty slice,\r\n     *      and \u0060token\u0060 is set to the entirety of \u0060self\u0060.\r\n     * @param self The slice to split.\r\n     * @param needle The text to search for in \u0060self\u0060.\r\n     * @param token An output parameter to which the first token is written.\r\n     * @return \u0060token\u0060.\r\n     */\r\n    function split(slice memory self, slice memory needle, slice memory token) internal pure returns (slice memory) {\r\n        uint ptr = findPtr(self._len, self._ptr, needle._len, needle._ptr);\r\n        token._ptr = self._ptr;\r\n        token._len = ptr - self._ptr;\r\n        if (ptr == self._ptr \u002B self._len) {\r\n            // Not found\r\n            self._len = 0;\r\n        } else {\r\n            self._len -= token._len \u002B needle._len;\r\n            self._ptr = ptr \u002B needle._len;\r\n        }\r\n        return token;\r\n    }\r\n\r\n    /*\r\n     * @dev Splits the slice, setting \u0060self\u0060 to everything after the first\r\n     *      occurrence of \u0060needle\u0060, and returning everything before it. If\r\n     *      \u0060needle\u0060 does not occur in \u0060self\u0060, \u0060self\u0060 is set to the empty slice,\r\n     *      and the entirety of \u0060self\u0060 is returned.\r\n     * @param self The slice to split.\r\n     * @param needle The text to search for in \u0060self\u0060.\r\n     * @return The part of \u0060self\u0060 up to the first occurrence of \u0060delim\u0060.\r\n     */\r\n    function split(slice memory self, slice memory needle) internal pure returns (slice memory token) {\r\n        split(self, needle, token);\r\n    }\r\n\r\n    /*\r\n     * @dev Splits the slice, setting \u0060self\u0060 to everything before the last\r\n     *      occurrence of \u0060needle\u0060, and \u0060token\u0060 to everything after it. If\r\n     *      \u0060needle\u0060 does not occur in \u0060self\u0060, \u0060self\u0060 is set to the empty slice,\r\n     *      and \u0060token\u0060 is set to the entirety of \u0060self\u0060.\r\n     * @param self The slice to split.\r\n     * @param needle The text to search for in \u0060self\u0060.\r\n     * @param token An output parameter to which the first token is written.\r\n     * @return \u0060token\u0060.\r\n     */\r\n    function rsplit(slice memory self, slice memory needle, slice memory token) internal pure returns (slice memory) {\r\n        uint ptr = rfindPtr(self._len, self._ptr, needle._len, needle._ptr);\r\n        token._ptr = ptr;\r\n        token._len = self._len - (ptr - self._ptr);\r\n        if (ptr == self._ptr) {\r\n            // Not found\r\n            self._len = 0;\r\n        } else {\r\n            self._len -= token._len \u002B needle._len;\r\n        }\r\n        return token;\r\n    }\r\n\r\n    /*\r\n     * @dev Splits the slice, setting \u0060self\u0060 to everything before the last\r\n     *      occurrence of \u0060needle\u0060, and returning everything after it. If\r\n     *      \u0060needle\u0060 does not occur in \u0060self\u0060, \u0060self\u0060 is set to the empty slice,\r\n     *      and the entirety of \u0060self\u0060 is returned.\r\n     * @param self The slice to split.\r\n     * @param needle The text to search for in \u0060self\u0060.\r\n     * @return The part of \u0060self\u0060 after the last occurrence of \u0060delim\u0060.\r\n     */\r\n    function rsplit(slice memory self, slice memory needle) internal pure returns (slice memory token) {\r\n        rsplit(self, needle, token);\r\n    }\r\n\r\n    /*\r\n     * @dev Counts the number of nonoverlapping occurrences of \u0060needle\u0060 in \u0060self\u0060.\r\n     * @param self The slice to search.\r\n     * @param needle The text to search for in \u0060self\u0060.\r\n     * @return The number of occurrences of \u0060needle\u0060 found in \u0060self\u0060.\r\n     */\r\n    function count(slice memory self, slice memory needle) internal pure returns (uint cnt) {\r\n        uint ptr = findPtr(self._len, self._ptr, needle._len, needle._ptr) \u002B needle._len;\r\n        while (ptr \u003C= self._ptr \u002B self._len) {\r\n            cnt\u002B\u002B;\r\n            ptr = findPtr(self._len - (ptr - self._ptr), ptr, needle._len, needle._ptr) \u002B needle._len;\r\n        }\r\n    }\r\n\r\n    /*\r\n     * @dev Returns True if \u0060self\u0060 contains \u0060needle\u0060.\r\n     * @param self The slice to search.\r\n     * @param needle The text to search for in \u0060self\u0060.\r\n     * @return True if \u0060needle\u0060 is found in \u0060self\u0060, false otherwise.\r\n     */\r\n    function contains(slice memory self, slice memory needle) internal pure returns (bool) {\r\n        return rfindPtr(self._len, self._ptr, needle._len, needle._ptr) != self._ptr;\r\n    }\r\n\r\n    /*\r\n     * @dev Returns a newly allocated string containing the concatenation of\r\n     *      \u0060self\u0060 and \u0060other\u0060.\r\n     * @param self The first slice to concatenate.\r\n     * @param other The second slice to concatenate.\r\n     * @return The concatenation of the two strings.\r\n     */\r\n    function concat(slice memory self, slice memory other) internal pure returns (string memory) {\r\n        string memory ret = new string(self._len \u002B other._len);\r\n        uint retptr;\r\n        assembly { retptr := add(ret, 32) }\r\n        memcpy(retptr, self._ptr, self._len);\r\n        memcpy(retptr \u002B self._len, other._ptr, other._len);\r\n        return ret;\r\n    }\r\n\r\n    /*\r\n     * @dev Joins an array of slices, using \u0060self\u0060 as a delimiter, returning a\r\n     *      newly allocated string.\r\n     * @param self The delimiter to use.\r\n     * @param parts A list of slices to join.\r\n     * @return A newly allocated string containing all the slices in \u0060parts\u0060,\r\n     *         joined with \u0060self\u0060.\r\n     */\r\n    function join(slice memory self, slice[] memory parts) internal pure returns (string memory) {\r\n        if (parts.length == 0)\r\n            return \u0022\u0022;\r\n\r\n        uint length = self._len * (parts.length - 1);\r\n        for(uint i = 0; i \u003C parts.length; i\u002B\u002B)\r\n            length \u002B= parts[i]._len;\r\n\r\n        string memory ret = new string(length);\r\n        uint retptr;\r\n        assembly { retptr := add(ret, 32) }\r\n\r\n        for(uint i = 0; i \u003C parts.length; i\u002B\u002B) {\r\n            memcpy(retptr, parts[i]._ptr, parts[i]._len);\r\n            retptr \u002B= parts[i]._len;\r\n            if (i \u003C parts.length - 1) {\r\n                memcpy(retptr, self._ptr, self._len);\r\n                retptr \u002B= self._len;\r\n            }\r\n        }\r\n\r\n        return ret;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * This contract will take charge of submitting base hash value to blockchain\r\n * it will be inherited by other hash operating contracts\r\n */\r\ncontract DRCHashBase is Ownable {\r\n  //import the HashOperateLib for contract\r\n  using HashOperateLib for HashOperateLib.Info;\r\n  using StringUtils for string;\r\n  using strings for *;\r\n  using SafeMath for uint256;\r\n\r\n  HashOperateLib.Info internal hashInfoLib;\r\n  string public memo;\r\n  mapping(string =\u003E string) internal txHashInfo; // hash =\u003E txHash\r\n  mapping(string =\u003E string) internal insertedHashInfo; // txHash =\u003E hash\r\n\r\n\r\n  /**\r\n   * @dev set the memo to describe the objective of the contract\r\n   */\r\n  function setMemo(string memory _memoStr) public onlyOwner returns(bool) {\r\n    memo = _memoStr;\r\n    return true;\r\n  }  \r\n\r\n  /**\r\n   * @dev add Tx hash for the hash string uploaded to blockchain\r\n   * @param _hash is input value of hash\r\n   * @param _txHash is the Tx hash value generated by action of inserting hash\r\n   * @return bool,true is successful and false is failed\r\n   */\r\n  function addTxIdForOnchainData(string memory _hash, string memory _txHash) \r\n    public \r\n    onlyOwner \r\n    returns (bool) \r\n  {\r\n    require(!_hash.equal(\u0022\u0022));\r\n\r\n    if (!hashInfoLib.isHashExisted(_hash)) {\r\n      return false;\r\n    } else {\r\n      txHashInfo[_hash] = _txHash;\r\n      insertedHashInfo[_txHash] = _hash;\r\n      return true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev get Tx hash for the hash string uploaded to blockchain\r\n   * @param _hash is input value of hash\r\n   * @return is the Tx hash value generated by action of inserting hash\r\n   */\r\n  function getTxIdByHash(string memory _hash) public view returns (string memory) {\r\n    require(!_hash.equal(\u0022\u0022));\r\n    return txHashInfo[_hash];\r\n  }\r\n\r\n  /**\r\n   * @dev get inserted hash string by the Tx hash\r\n   * @param _txHash is input value of Tx hash\r\n   * @return is the hash string corresponding to the Tx hash\r\n   */\r\n  function getHashByTxId(string memory _txHash) public view returns (string memory) {\r\n    require(!_txHash.equal(\u0022\u0022));\r\n    return insertedHashInfo[_txHash];\r\n  }\r\n\r\n  /**\r\n   * @dev get a group of Tx hashs for the hash strings uploaded to blockchain\r\n   * @param _indices is array of the index of the Tx hash group\r\n   * @return is the Tx hash value generated by action of inserting hash\r\n   */\r\n  function getInsertedHashGroup(uint[] memory _indices) public view returns (bytes memory) {\r\n    uint len = _indices.length;\r\n\r\n    strings.slice[] memory hashSlices = new strings.slice[](len);\r\n    for(uint i = 0; i \u003C len; i = i.add(1)) {\r\n      string memory tmpHashStr = hashInfoLib.getHashByInd(_indices[i]);\r\n      hashSlices[i] = tmpHashStr.toSlice();\r\n    }\r\n    string memory hashStrs = \u0022,\u0022.toSlice().join(hashSlices);\r\n\r\n    return (abi.encode(hashStrs));\r\n  }\r\n\r\n  /**\r\n   * @dev insertHash,insert hash into contract with bytes data\r\n\t * @param _hash is input value of hash\r\n   * @param _uploadedData is the data being uploaded with hash value\r\n\t * @return bool,true is successful and false is failed\r\n   */\r\n  function insertHash(string memory _hash, bytes memory _uploadedData) public returns(bool);\r\n\r\n  /**\r\n\t * @dev selectHash,select hash from contract\r\n\t * @param _hash is input value of hash\r\n\t * @return true/false,saver,uploadedData,save time\r\n\t */\r\n  function selectHash(string memory _hash) public view returns (bool, address, bytes memory, uint256, string memory);\r\n    \r\n\t/**\r\n\t * @dev deleteHash,delete hash into contract\r\n\t * @param _hash is input value of hash\r\n\t * @return bool,true is successful and false is failed\r\n\t */\r\n  function deleteHash(string memory _hash) public returns (bool);\r\n\r\n}\r\n\r\n/**\r\n * This contract will take charge of submitting pure hash data to blockchain\r\n *\r\n */\r\ncontract DRCHashDataCon is DRCHashBase {\r\n  event LogInsertHash(address indexed _saver, string _hash, bool _bool);\r\n  event LogDeleteHash(address indexed _saver, string _hash, bool _bool);\r\n\r\n\t/**\r\n\t * @dev Constructor,not used just reserved\r\n\t */\r\n  constructor() public {\r\n  }\r\n\t\r\n\t/**\r\n\t * @dev insertHash,insert hash into contract\r\n\t * @param _hash is input value of hash\r\n   * @param _uploadedData is the uploaded value on to the blockchain\r\n\t * @return bool,true is successful and false is failed\r\n\t */\r\n  function insertHash(string memory _hash, bytes memory _uploadedData) \r\n    public \r\n    onlyOwner \r\n    returns (bool) \r\n  {\r\n    require(!_hash.equal(\u0022\u0022));\r\n    string memory _saverName = abi.decode(_uploadedData, (string));\r\n    bool res = hashInfoLib.insertHash(_hash, _saverName);\r\n    require(res);\r\n    emit LogInsertHash(msg.sender, _hash, res);\r\n    return res;\r\n  }\r\n    \r\n\t/**\r\n\t * @dev selectHash,select hash from contract\r\n\t * @param _hash is input value of hash\r\n\t * @return true/false,saver,save time\r\n\t */\r\n  function selectHash(string memory _hash) \r\n    public \r\n    view \r\n    returns (bool, address, bytes memory, uint256, string memory) \r\n  {\r\n    (\r\n      bool res, \r\n      address saver, \r\n      string memory saverName, \r\n      uint256 saveTime\r\n    ) = hashInfoLib.selectHash(_hash);\r\n    \r\n    string memory txHash = getTxIdByHash(_hash);\r\n    return (res, saver, abi.encode(saverName), saveTime, txHash);\r\n  } \r\n    \r\n\t/**\r\n\t * @dev deleteHash,delete hash into contract\r\n\t * @param _hash is input value of hash\r\n\t * @return bool,true is successful and false is failed\r\n\t */\r\n  function deleteHash(string memory _hash) public onlyOwner returns (bool) {\r\n    bool res = hashInfoLib.deleteHash(_hash);\r\n    emit LogDeleteHash(msg.sender, _hash, res);\r\n\r\n    return res;\r\n  } \r\n\r\n}","ABI":"[{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_memoStr\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022name\u0022:\u0022setMemo\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_hash\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022name\u0022:\u0022getTxIdByHash\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_indices\u0022,\u0022type\u0022:\u0022uint256[]\u0022}],\u0022name\u0022:\u0022getInsertedHashGroup\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bytes\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022memo\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_hash\u0022,\u0022type\u0022:\u0022string\u0022},{\u0022name\u0022:\u0022_uploadedData\u0022,\u0022type\u0022:\u0022bytes\u0022}],\u0022name\u0022:\u0022insertHash\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022renounceOwnership\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022owner\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022isOwner\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_hash\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022name\u0022:\u0022deleteHash\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_hash\u0022,\u0022type\u0022:\u0022string\u0022},{\u0022name\u0022:\u0022_txHash\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022name\u0022:\u0022addTxIdForOnchainData\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_hash\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022name\u0022:\u0022selectHash\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bytes\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022transferOwnership\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_txHash\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022name\u0022:\u0022getHashByTxId\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022constructor\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022_saver\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022_hash\u0022,\u0022type\u0022:\u0022string\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022_bool\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022name\u0022:\u0022LogInsertHash\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022_saver\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022_hash\u0022,\u0022type\u0022:\u0022string\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022_bool\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022name\u0022:\u0022LogDeleteHash\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022previousOwner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022OwnershipTransferred\u0022,\u0022type\u0022:\u0022event\u0022}]","ContractName":"DRCHashDataCon","CompilerVersion":"v0.5.8\u002Bcommit.23d335f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://ba08a46e99cd7303458b4f32c95eac18d2bb60b89e4bed0103b3c147b8b97630"}]