[{"SourceCode":"pragma solidity ^0.4.25;\r\n \r\n/*\r\n* 27% Buy Fees\r\n* 27% Sell Fees\r\n* 1% Transfer Fees\r\n* 10% Affiliate Commission\r\n* 1% Daily Interest (As long as sufficient ETH is available in the interest pool)\r\n* Website: HTTPS://WWW.GUARANTEEDDIVS.ORG\r\n*/\r\n\r\n\r\ncontract Ownable {\r\n    \r\n    address public owner;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n    \r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract Gold is Ownable{\r\n    using SafeMath for uint256;\r\n    \r\n     modifier onlyBagholders {\r\n        require(myTokens() \u003E 0);\r\n        _;\r\n    }\r\n      \r\n     modifier onlyStronghands {\r\n        require(myDividends(true) \u003E 0);\r\n        _;\r\n    }\r\n    \r\n   \r\n      \r\n    event onTokenPurchase(\r\n        address indexed customerAddress,\r\n        uint256 incomingEthereum,\r\n        uint256 tokensMinted,\r\n        address indexed referredBy,\r\n        uint timestamp,\r\n        uint256 price\r\n);\r\n\r\n    event onTokenSell(\r\n        address indexed customerAddress,\r\n        uint256 tokensBurned,\r\n        uint256 ethereumEarned,\r\n        uint timestamp,\r\n        uint256 price\r\n);\r\n\r\n    event onReinvestment(\r\n        address indexed customerAddress,\r\n        uint256 ethereumReinvested,\r\n        uint256 tokensMinted\r\n);\r\n\r\n    event onWithdraw(\r\n        address indexed customerAddress,\r\n        uint256 ethereumWithdrawn\r\n);\r\n\r\n    event Transfer(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 tokens\r\n);\r\n\r\n    string public name = \u0022Gold\u0022;\r\n    string public symbol = \u0022GLD\u0022;\r\n    uint8 constant public decimals = 18;\r\n    uint8 constant internal entryFee_ = 35; //Includes the dev fee and the money alloted for the daily fixed interest. 27% is the actual fee that will be distributed as dividends.\r\n    uint8 constant internal transferFee_ = 1;\r\n    uint8 constant internal ExitFee_ = 27; \r\n    uint8 constant internal refferalFee_ = 10;\r\n    uint8 constant internal DevFee_ = 1; \r\n    uint8 constant internal DailyInterest_ = 1; \r\n    uint8 constant internal IntFee_ = 6; \r\n    uint256 public InterestPool_ = 0; \r\n    uint256 constant internal tokenPriceInitial_ = 0.0000001 ether;\r\n    uint256 constant internal tokenPriceIncremental_ = 0.00000001 ether;\r\n    uint256 constant internal magnitude = 2**64;\r\n    uint256 public stakingRequirement = 0e18;\r\n    uint256 public launchtime = 1574006400;\r\n     \r\n    mapping(address =\u003E uint256) internal tokenBalanceLedger_;\r\n    mapping(address =\u003E uint256) internal referralBalance_;\r\n    mapping(address =\u003E int256) internal payoutsTo_;\r\n    uint256 internal tokenSupply_;\r\n    uint256 internal profitPerShare_;\r\n    address dev = 0xb0B2fdde021b5a7D1397aeCeB89eBDCf17cd76e2;\r\n    address dev1 = 0x329De1aFe6e87e4C0c4716A22067A852c42898A7; \r\n    \r\n\r\n        function buy(address _referredBy) public payable returns (uint256) {\r\n        require(now \u003E= launchtime);\r\n        uint256 DevFee = msg.value.div(100).mul(DevFee_);\r\n        dev.transfer(DevFee);\r\n        dev1.transfer(DevFee);\r\n        uint256 DailyInt1 = msg.value.div(100).mul(IntFee_);\r\n        InterestPool_ \u002B= DailyInt1;\r\n        purchaseTokens(msg.value, _referredBy);\r\n    }\r\n    \r\n        function() payable public {\r\n        require(now \u003E= launchtime);\r\n        uint256 DevFee = msg.value.div(100).mul(DevFee_);\r\n        dev.transfer(DevFee);\r\n        dev1.transfer(DevFee);\r\n        uint256 DailyInt1 = msg.value.div(100).mul(IntFee_);\r\n        InterestPool_ \u002B= DailyInt1;\r\n        purchaseTokens(msg.value, 0x0);\r\n    }\r\n    \r\n        function IDD() public {\r\n        require(msg.sender==owner);\r\n        uint256 Contract_Bal = SafeMath.sub((address(this).balance), InterestPool_);\r\n        uint256 DailyInterestFinal = SafeMath.div(SafeMath.mul(Contract_Bal, DailyInterest_), 100);   \r\n        InterestPool_ -= DailyInterestFinal;\r\n        DividendsDistribution(DailyInterestFinal, 0x0);\r\n     }\r\n    \r\n    function DivsAddon() public payable returns (uint256) {\r\n        DividendsDistribution(msg.value, 0x0);\r\n    }\r\n    \r\n    \r\n\r\n        function reinvest() onlyStronghands public {\r\n        uint256 _dividends = myDividends(false);\r\n        address _customerAddress = msg.sender;\r\n        payoutsTo_[_customerAddress] \u002B=  (int256) (_dividends * magnitude);\r\n        _dividends \u002B= referralBalance_[_customerAddress];\r\n        referralBalance_[_customerAddress] = 0;\r\n        uint256 _tokens = purchaseTokens(_dividends, 0x0);\r\n        emit onReinvestment(_customerAddress, _dividends, _tokens);\r\n    }\r\n\r\n    function exit() public {\r\n        address _customerAddress = msg.sender;\r\n        uint256 _tokens = tokenBalanceLedger_[_customerAddress];\r\n        if (_tokens \u003E 0) sell(_tokens);\r\n        withdraw();\r\n    }\r\n\r\n    function withdraw() onlyStronghands public {\r\n        address _customerAddress = msg.sender;\r\n        uint256 _dividends = myDividends(false);\r\n        payoutsTo_[_customerAddress] \u002B= (int256) (_dividends * magnitude);\r\n        _dividends \u002B= referralBalance_[_customerAddress];\r\n        referralBalance_[_customerAddress] = 0;\r\n        _customerAddress.transfer(_dividends);\r\n        emit onWithdraw(_customerAddress, _dividends);\r\n    }\r\n\r\n    function sell(uint256 _amountOfTokens) onlyBagholders public {\r\n        address _customerAddress = msg.sender;\r\n        require(_amountOfTokens \u003C= tokenBalanceLedger_[_customerAddress]);\r\n        uint256 _tokens = _amountOfTokens;\r\n        uint256 _ethereum = tokensToEthereum_(_tokens);\r\n        uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, exitFee()), 100);\r\n        uint256 _devexit = SafeMath.div(SafeMath.mul(_ethereum, 8), 100);\r\n        uint256 _taxedEthereum1 = SafeMath.sub(_ethereum, _dividends);\r\n        uint256 _taxedEthereum = SafeMath.sub(_taxedEthereum1, _devexit);\r\n        uint256 _devexitindividual_final = SafeMath.div(SafeMath.mul(_ethereum, DevFee_), 100);\r\n        uint256 DailyIntFinal = SafeMath.div(SafeMath.mul(_ethereum, IntFee_), 100);\r\n        InterestPool_ \u002B= DailyIntFinal;\r\n        tokenSupply_ = SafeMath.sub(tokenSupply_, _tokens);\r\n        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _tokens);\r\n        dev.transfer(_devexitindividual_final); \r\n        dev1.transfer(_devexitindividual_final);\r\n        \r\n        \r\n        int256 _updatedPayouts = (int256) (profitPerShare_ * _tokens \u002B (_taxedEthereum * magnitude));\r\n        payoutsTo_[_customerAddress] -= _updatedPayouts;\r\n\r\n        if (tokenSupply_ \u003E 0) {\r\n            profitPerShare_ = SafeMath.add(profitPerShare_, (_dividends * magnitude) / tokenSupply_);\r\n        }\r\n        emit onTokenSell(_customerAddress, _tokens, _taxedEthereum, now, buyPrice());\r\n    }\r\n\r\n    function transfer(address _toAddress, uint256 _amountOfTokens) onlyBagholders public returns (bool) {\r\n        address _customerAddress = msg.sender;\r\n        require(_amountOfTokens \u003C= tokenBalanceLedger_[_customerAddress]);\r\n\r\n        if (myDividends(true) \u003E 0) {\r\n            withdraw();\r\n        }\r\n\r\n        uint256 _tokenFee = SafeMath.div(SafeMath.mul(_amountOfTokens, transferFee_), 100);\r\n        uint256 _taxedTokens = SafeMath.sub(_amountOfTokens, _tokenFee);\r\n        uint256 _dividends = tokensToEthereum_(_tokenFee);\r\n\r\n        tokenSupply_ = SafeMath.sub(tokenSupply_, _tokenFee);\r\n        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\r\n        tokenBalanceLedger_[_toAddress] = SafeMath.add(tokenBalanceLedger_[_toAddress], _taxedTokens);\r\n        payoutsTo_[_customerAddress] -= (int256) (profitPerShare_ * _amountOfTokens);\r\n        payoutsTo_[_toAddress] \u002B= (int256) (profitPerShare_ * _taxedTokens);\r\n        profitPerShare_ = SafeMath.add(profitPerShare_, (_dividends * magnitude) / tokenSupply_);\r\n        emit Transfer(_customerAddress, _toAddress, _taxedTokens);\r\n        return true;\r\n    }\r\n\r\n\r\n    function totalEthereumBalance() public view returns (uint256) {\r\n        return this.balance;\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return tokenSupply_;\r\n    }\r\n\r\n    function myTokens() public view returns (uint256) {\r\n        address _customerAddress = msg.sender;\r\n        return balanceOf(_customerAddress);\r\n    }\r\n\r\n    function myDividends(bool _includeReferralBonus) public view returns (uint256) {\r\n        address _customerAddress = msg.sender;\r\n        return _includeReferralBonus ? dividendsOf(_customerAddress) \u002B referralBalance_[_customerAddress] : dividendsOf(_customerAddress) ;\r\n    }\r\n\r\n    function balanceOf(address _customerAddress) public view returns (uint256) {\r\n        return tokenBalanceLedger_[_customerAddress];\r\n    }\r\n\r\n    function dividendsOf(address _customerAddress) public view returns (uint256) {\r\n        return (uint256) ((int256) (profitPerShare_ * tokenBalanceLedger_[_customerAddress]) - payoutsTo_[_customerAddress]) / magnitude;\r\n    }\r\n\r\n    function sellPrice() public view returns (uint256) {\r\n        // our calculation relies on the token supply, so we need supply. Doh.\r\n        if (tokenSupply_ == 0) {\r\n            return tokenPriceInitial_ - tokenPriceIncremental_;\r\n        } else {\r\n            uint256 _ethereum = tokensToEthereum_(1e18);\r\n            uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, exitFee()), 100);\r\n            uint256 _devexit = SafeMath.div(SafeMath.mul(_ethereum, 8), 100);\r\n            uint256 _taxedEthereum1 = SafeMath.sub(_ethereum, _dividends);\r\n            uint256 _taxedEthereum = SafeMath.sub(_taxedEthereum1, _devexit);\r\n            return _taxedEthereum;\r\n        }\r\n    }\r\n\r\n    function buyPrice() public view returns (uint256) {\r\n        if (tokenSupply_ == 0) {\r\n            return tokenPriceInitial_ \u002B tokenPriceIncremental_;\r\n        } else {\r\n            uint256 _ethereum = tokensToEthereum_(1e18);\r\n            uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, entryFee_), 100);\r\n            uint256 _devexit = SafeMath.div(SafeMath.mul(_ethereum, 8), 100);\r\n            uint256 _taxedEthereum1 = SafeMath.add(_ethereum, _dividends);\r\n            uint256 _taxedEthereum = SafeMath.add(_taxedEthereum1, _devexit);\r\n            return _taxedEthereum;\r\n        }\r\n    }\r\n\r\n    function calculateTokensReceived(uint256 _ethereumToSpend) public view returns (uint256) {\r\n        uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereumToSpend, entryFee_), 100);\r\n        uint256 _devbuyfees = SafeMath.div(SafeMath.mul(_ethereumToSpend, 8), 100);\r\n        uint256 _taxedEthereum1 = SafeMath.sub(_ethereumToSpend, _dividends);\r\n        uint256 _taxedEthereum = SafeMath.sub(_taxedEthereum1, _devbuyfees);\r\n        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);\r\n        return _amountOfTokens;\r\n    }\r\n\r\n    function calculateEthereumReceived(uint256 _tokensToSell) public view returns (uint256) {\r\n        require(_tokensToSell \u003C= tokenSupply_);\r\n        uint256 _ethereum = tokensToEthereum_(_tokensToSell);\r\n        uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, exitFee()), 100);\r\n        uint256 _devexit = SafeMath.div(SafeMath.mul(_ethereum, 8), 100);\r\n        uint256 _taxedEthereum1 = SafeMath.sub(_ethereum, _dividends);\r\n        uint256 _taxedEthereum = SafeMath.sub(_taxedEthereum1, _devexit);\r\n        return _taxedEthereum;\r\n    }\r\n\r\n   function exitFee() public view returns (uint8) {\r\n        return ExitFee_;\r\n    }\r\n    \r\n\r\n\r\n  function purchaseTokens(uint256 _incomingEthereum, address _referredBy) internal returns (uint256) {\r\n        address _customerAddress = msg.sender;\r\n        uint256 _undividedDividends = SafeMath.div(SafeMath.mul(_incomingEthereum, entryFee_), 100);\r\n        uint256 _referralBonus = SafeMath.div(SafeMath.mul(_undividedDividends, refferalFee_), 100);\r\n        uint256 _devbuyfees = SafeMath.div(SafeMath.mul(_incomingEthereum, 8), 100);\r\n        uint256 _dividends1 = SafeMath.sub(_undividedDividends, _referralBonus);\r\n        uint256 _dividends = SafeMath.sub(_dividends1, _devbuyfees);\r\n        uint256 _taxedEthereum = SafeMath.sub(_incomingEthereum, _undividedDividends);\r\n        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);\r\n        uint256 _fee = _dividends * magnitude;\r\n\r\n        require(_amountOfTokens \u003E 0 \u0026\u0026 SafeMath.add(_amountOfTokens, tokenSupply_) \u003E tokenSupply_);\r\n\r\n        if (\r\n            _referredBy != 0x0000000000000000000000000000000000000000 \u0026\u0026\r\n            _referredBy != _customerAddress \u0026\u0026\r\n            tokenBalanceLedger_[_referredBy] \u003E= stakingRequirement\r\n        ) {\r\n            referralBalance_[_referredBy] = SafeMath.add(referralBalance_[_referredBy], _referralBonus);\r\n        } else {\r\n            _dividends = SafeMath.add(_dividends, _referralBonus);\r\n            _fee = _dividends * magnitude;\r\n        }\r\n\r\n        if (tokenSupply_ \u003E 0) {\r\n            tokenSupply_ = SafeMath.add(tokenSupply_, _amountOfTokens);\r\n            profitPerShare_ \u002B= (_dividends * magnitude / tokenSupply_);\r\n            _fee = _fee - (_fee - (_amountOfTokens * (_dividends * magnitude / tokenSupply_)));\r\n        } else {\r\n            tokenSupply_ = _amountOfTokens;\r\n        }\r\n\r\n        tokenBalanceLedger_[_customerAddress] = SafeMath.add(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\r\n        int256 _updatedPayouts = (int256) (profitPerShare_ * _amountOfTokens - _fee);\r\n        payoutsTo_[_customerAddress] \u002B= _updatedPayouts;\r\n        emit onTokenPurchase(_customerAddress, _incomingEthereum, _amountOfTokens, _referredBy, now, buyPrice());\r\n\r\n        return _amountOfTokens;\r\n    }\r\n\r\n\r\n       function DividendsDistribution(uint256 _incomingEthereum, address _referredBy) internal returns (uint256) {\r\n        address _customerAddress = msg.sender;\r\n        uint256 _undividedDividends = SafeMath.div(SafeMath.mul(_incomingEthereum, 100), 100);\r\n        uint256 _referralBonus = SafeMath.div(SafeMath.mul(_undividedDividends, refferalFee_), 100);\r\n        uint256 _dividends = SafeMath.sub(_undividedDividends, _referralBonus);\r\n        uint256 _taxedEthereum = SafeMath.sub(_incomingEthereum, _undividedDividends);\r\n        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);\r\n        uint256 _fee = _dividends * magnitude;\r\n\r\n        require(_amountOfTokens \u003E= 0 \u0026\u0026 SafeMath.add(_amountOfTokens, tokenSupply_) \u003E= tokenSupply_);\r\n\r\n        if (\r\n            _referredBy != 0x0000000000000000000000000000000000000000 \u0026\u0026\r\n            _referredBy != _customerAddress \u0026\u0026\r\n            tokenBalanceLedger_[_referredBy] \u003E= stakingRequirement\r\n        ) {\r\n            referralBalance_[_referredBy] = SafeMath.add(referralBalance_[_referredBy], _referralBonus);\r\n        } else {\r\n            _dividends = SafeMath.add(_dividends, _referralBonus);\r\n            _fee = _dividends * magnitude;\r\n        }\r\n\r\n        if (tokenSupply_ \u003E 0) {\r\n            tokenSupply_ = SafeMath.add(tokenSupply_, _amountOfTokens);\r\n            profitPerShare_ \u002B= (_dividends * magnitude / tokenSupply_);\r\n            _fee = _fee - (_fee - (_amountOfTokens * (_dividends * magnitude / tokenSupply_)));\r\n        } else {\r\n            tokenSupply_ = _amountOfTokens;\r\n        }\r\n\r\n        tokenBalanceLedger_[_customerAddress] = SafeMath.add(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\r\n        int256 _updatedPayouts = (int256) (profitPerShare_ * _amountOfTokens - _fee);\r\n        payoutsTo_[_customerAddress] \u002B= _updatedPayouts;\r\n        emit onTokenPurchase(_customerAddress, _incomingEthereum, _amountOfTokens, _referredBy, now, buyPrice());\r\n\r\n        return _amountOfTokens;\r\n    }\r\n\r\n    function ethereumToTokens_(uint256 _ethereum) internal view returns (uint256) {\r\n        uint256 _tokenPriceInitial = tokenPriceInitial_ * 1e18;\r\n        uint256 _tokensReceived =\r\n            (\r\n                (\r\n                    SafeMath.sub(\r\n                        (sqrt\r\n                            (\r\n                                (_tokenPriceInitial ** 2)\r\n                                \u002B\r\n                                (2 * (tokenPriceIncremental_ * 1e18) * (_ethereum * 1e18))\r\n                                \u002B\r\n                                ((tokenPriceIncremental_ ** 2) * (tokenSupply_ ** 2))\r\n                                \u002B\r\n                                (2 * tokenPriceIncremental_ * _tokenPriceInitial*tokenSupply_)\r\n                            )\r\n                        ), _tokenPriceInitial\r\n                    )\r\n                ) / (tokenPriceIncremental_)\r\n            ) - (tokenSupply_);\r\n\r\n        return _tokensReceived;\r\n    }\r\n\r\n    function tokensToEthereum_(uint256 _tokens) internal view returns (uint256) {\r\n        uint256 tokens_ = (_tokens \u002B 1e18);\r\n        uint256 _tokenSupply = (tokenSupply_ \u002B 1e18);\r\n        uint256 _etherReceived =\r\n            (\r\n                SafeMath.sub(\r\n                    (\r\n                        (\r\n                            (\r\n                                tokenPriceInitial_ \u002B (tokenPriceIncremental_ * (_tokenSupply / 1e18))\r\n                            ) - tokenPriceIncremental_\r\n                        ) * (tokens_ - 1e18)\r\n                    ), (tokenPriceIncremental_ * ((tokens_ ** 2 - tokens_) / 1e18)) / 2\r\n                )\r\n                / 1e18);\r\n\r\n        return _etherReceived;\r\n    }\r\n\r\n      function setLaunchTime(uint256 _LaunchTime) public {\r\n      require(msg.sender==owner);\r\n      launchtime = _LaunchTime;\r\n    }\r\n\r\n    function updateDev(address _address)  {\r\n       require(msg.sender==owner);\r\n       dev = _address;\r\n    }\r\n    \r\n    function updateDev1(address _address)  {\r\n        require(msg.sender==owner);\r\n        dev1 = _address;\r\n    }\r\n\r\n\r\n    function sqrt(uint256 x) internal pure returns (uint256 y) {\r\n        uint256 z = (x \u002B 1) / 2;\r\n        y = x;\r\n\r\n        while (z \u003C y) {\r\n            y = z;\r\n            z = (x / z \u002B z) / 2;\r\n        }\r\n    }\r\n\r\n\r\n}\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b \u003C= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a \u002B b;\r\n        assert(c \u003E= a);\r\n        return c;\r\n    }\r\n}","ABI":"[{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_customerAddress\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022dividendsOf\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022name\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_ethereumToSpend\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022calculateTokensReceived\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022totalSupply\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_tokensToSell\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022calculateEthereumReceived\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022IDD\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022decimals\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint8\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022withdraw\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022sellPrice\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022stakingRequirement\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022DivsAddon\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:true,\u0022stateMutability\u0022:\u0022payable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_address\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022updateDev1\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022exitFee\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint8\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_includeReferralBonus\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022name\u0022:\u0022myDividends\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022totalEthereumBalance\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_customerAddress\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022balanceOf\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022buyPrice\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022owner\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022InterestPool_\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_address\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022updateDev\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022myTokens\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022symbol\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_LaunchTime\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022setLaunchTime\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_toAddress\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_amountOfTokens\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022transfer\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_amountOfTokens\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022sell\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022exit\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_referredBy\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022buy\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:true,\u0022stateMutability\u0022:\u0022payable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022launchtime\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022reinvest\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022payable\u0022:true,\u0022stateMutability\u0022:\u0022payable\u0022,\u0022type\u0022:\u0022fallback\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022customerAddress\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022incomingEthereum\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022tokensMinted\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022referredBy\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022timestamp\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022price\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022onTokenPurchase\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022customerAddress\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022tokensBurned\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022ethereumEarned\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022timestamp\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022price\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022onTokenSell\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022customerAddress\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022ethereumReinvested\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022tokensMinted\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022onReinvestment\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022customerAddress\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022ethereumWithdrawn\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022onWithdraw\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022from\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022tokens\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022Transfer\u0022,\u0022type\u0022:\u0022event\u0022}]","ContractName":"Gold","CompilerVersion":"v0.4.25\u002Bcommit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://ff7b93ca6b9bbd17f527d7fdfc6eb5acf6af220658d11298c026d60a7aebde25"}]