[{"SourceCode":"pragma solidity 0.5.1;\r\n\r\n/**\r\n * @title An Ether or token balance scanner\r\n * @author Maarten Zuidhoorn\r\n * @author Luit Hollander\r\n */\r\ncontract BalanceScanner {\r\n  /**\r\n   * @notice Get the Ether balance for all addresses specified\r\n   * @param addresses The addresses to get the Ether balance for\r\n   * @return The Ether balance for all addresses in the same order as specified\r\n   */\r\n  function etherBalances(address[] calldata addresses) external view returns (uint256[] memory balances) {\r\n    balances = new uint256[](addresses.length);\r\n\r\n    for (uint256 i = 0; i \u003C addresses.length; i\u002B\u002B) {\r\n      balances[i] = addresses[i].balance;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Get the ERC-20 token balance of \u0060token\u0060 for all addresses specified\r\n   * @dev This does not check if the \u0060token\u0060 address specified is actually an ERC-20 token\r\n   * @param addresses The addresses to get the token balance for\r\n   * @param token The address of the ERC-20 token contract\r\n   * @return The token balance for all addresses in the same order as specified\r\n   */\r\n  function tokenBalances(address[] calldata addresses, address token) external returns (uint256[] memory balances) {\r\n    balances = new uint256[](addresses.length);\r\n\r\n    for (uint256 i = 0; i \u003C addresses.length; i\u002B\u002B) {\r\n      balances[i] = tokenBalance(addresses[i], token);\r\n    }\r\n  }\r\n\r\n  /**\r\n    * @notice Get the ERC-20 token balance from multiple contracts for a single owner\r\n    * @param owner The address of the token owner\r\n    * @param contracts The addresses of the ERC-20 token contracts\r\n    * @return The token balances in the same order as specified\r\n   */\r\n  function tokensBalance(address owner, address[] calldata contracts) external returns (uint256[] memory balances) {\r\n    balances = new uint256[](contracts.length);\r\n\r\n    for (uint256 i = 0; i \u003C contracts.length; i\u002B\u002B) {\r\n      balances[i] = tokenBalance(owner, contracts[i]);\r\n    }\r\n  }\r\n\r\n  /**\r\n    * @notice Get the ERC-20 token balance for a single contract\r\n    * @param owner The address of the token owner\r\n    * @param token The address of the ERC-20 token contract\r\n    * @return The token balance, or zero if the address is not a contract, or does not implement the \u0060balanceOf\u0060\r\n      function\r\n  */\r\n  function tokenBalance(address owner, address token) internal returns (uint256 balance) {\r\n    balance = 0;\r\n    uint256 size = codeSize(token);\r\n\r\n    if (size \u003E 0) {\r\n      (bool success, bytes memory data) = token.call(abi.encodeWithSelector(bytes4(0x70a08231), owner));\r\n      if (success) {\r\n        (balance) = abi.decode(data, (uint256));\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n    * @notice Get code size of address\r\n    * @param _address The address to get code size from\r\n    * @return Unsigned 256-bits integer\r\n   */\r\n  function codeSize(address _address) internal view returns (uint256 size) {\r\n    assembly {\r\n      size := extcodesize(_address)\r\n    }\r\n  }\r\n}","ABI":"[{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022addresses\u0022,\u0022type\u0022:\u0022address[]\u0022},{\u0022name\u0022:\u0022token\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022tokenBalances\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022balances\u0022,\u0022type\u0022:\u0022uint256[]\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022addresses\u0022,\u0022type\u0022:\u0022address[]\u0022}],\u0022name\u0022:\u0022etherBalances\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022balances\u0022,\u0022type\u0022:\u0022uint256[]\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022owner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022contracts\u0022,\u0022type\u0022:\u0022address[]\u0022}],\u0022name\u0022:\u0022tokensBalance\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022balances\u0022,\u0022type\u0022:\u0022uint256[]\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022}]","ContractName":"BalanceScanner","CompilerVersion":"v0.5.1\u002Bcommit.c8a2cb62","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://6e5723272cebd1b04a8e06cc8c3eb09b28044e273986cf03b9271fe3e42bfbc4"}]