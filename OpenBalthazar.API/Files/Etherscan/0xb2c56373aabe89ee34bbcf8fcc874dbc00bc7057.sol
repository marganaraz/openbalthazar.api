[{"SourceCode":"pragma solidity ^0.5.11;\r\n\r\n// Public-Sale for #3277-12000 stage of Voken2.0\r\n//\r\n// More info:\r\n//   https://vision.network\r\n//   https://voken.io\r\n//\r\n// Contact us:\r\n//   support@vision.network\r\n//   support@voken.io\r\n\r\n\r\n/**\r\n * @dev Uint256 wrappers over Solidity\u0027s arithmetic operations with added overflow checks.\r\n */\r\nlibrary SafeMath256 {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a \u002B b;\r\n        require(c \u003E= a, \u0022SafeMath: addition overflow\u0022);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \u0022SafeMath: subtraction overflow\u0022);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b \u003C= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \u0022SafeMath: multiplication overflow\u0022);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \u0022SafeMath: division by zero\u0022);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b \u003E 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \u0022SafeMath: modulo by zero\u0022);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Uint16 wrappers over Solidity\u0027s arithmetic operations with added overflow checks.\r\n */\r\nlibrary SafeMath16 {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on overflow.\r\n     */\r\n    function add(uint16 a, uint16 b) internal pure returns (uint16) {\r\n        uint16 c = a \u002B b;\r\n        require(c \u003E= a, \u0022SafeMath: addition overflow\u0022);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     */\r\n    function sub(uint16 a, uint16 b) internal pure returns (uint16) {\r\n        return sub(a, b, \u0022SafeMath: subtraction overflow\u0022);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     */\r\n    function sub(uint16 a, uint16 b, string memory errorMessage) internal pure returns (uint16) {\r\n        require(b \u003C= a, errorMessage);\r\n        uint16 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\r\n     */\r\n    function mul(uint16 a, uint16 b) internal pure returns (uint16) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint16 c = a * b;\r\n        require(c / a == b, \u0022SafeMath: multiplication overflow\u0022);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     */\r\n    function div(uint16 a, uint16 b) internal pure returns (uint16) {\r\n        return div(a, b, \u0022SafeMath: division by zero\u0022);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     */\r\n    function div(uint16 a, uint16 b, string memory errorMessage) internal pure returns (uint16) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b \u003E 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     */\r\n    function mod(uint16 a, uint16 b) internal pure returns (uint16) {\r\n        return mod(a, b, \u0022SafeMath: modulo by zero\u0022);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     */\r\n    function mod(uint16 a, uint16 b, string memory errorMessage) internal pure returns (uint16) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address =\u003E bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev Give an account access to this role.\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(!has(role, account), \u0022Roles: account already has role\u0022);\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Remove an account\u0027s access to this role.\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(has(role, account), \u0022Roles: account does not have role\u0022);\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Check if an account has this role.\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0), \u0022Roles: account is the zero address\u0022);\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n */\r\ncontract Ownable {\r\n    address internal _owner;\r\n    address internal _newOwner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    event OwnershipAccepted(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addresses of the current and new owner.\r\n     */\r\n    function owner() public view returns (address currentOwner, address newOwner) {\r\n        currentOwner = _owner;\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(msg.sender), \u0022Ownable: caller is not the owner\u0022);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner(address account) public view returns (bool) {\r\n        return account == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (\u0060newOwner\u0060).\r\n     *\r\n     * IMPORTANT: Need to run {acceptOwnership} by the new owner.\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \u0022Ownable: new owner is the zero address\u0022);\r\n\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _newOwner = newOwner;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (\u0060newOwner\u0060).\r\n     *\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Accept ownership of the contract.\r\n     *\r\n     * Can only be called by the new owner.\r\n     */\r\n    function acceptOwnership() public {\r\n        require(msg.sender == _newOwner, \u0022Ownable: caller is not the new owner address\u0022);\r\n        require(msg.sender != address(0), \u0022Ownable: caller is the zero address\u0022);\r\n\r\n        emit OwnershipAccepted(_owner, msg.sender);\r\n        _owner = msg.sender;\r\n        _newOwner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Rescue compatible ERC20 Token\r\n     *\r\n     * Can only be called by the current owner.\r\n     */\r\n    function rescueTokens(address tokenAddr, address recipient, uint256 amount) external onlyOwner {\r\n        IERC20 _token = IERC20(tokenAddr);\r\n        require(recipient != address(0), \u0022Rescue: recipient is the zero address\u0022);\r\n        uint256 balance = _token.balanceOf(address(this));\r\n\r\n        require(balance \u003E= amount, \u0022Rescue: amount exceeds balance\u0022);\r\n        _token.transfer(recipient, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraw Ether\r\n     *\r\n     * Can only be called by the current owner.\r\n     */\r\n    function withdrawEther(address payable recipient, uint256 amount) external onlyOwner {\r\n        require(recipient != address(0), \u0022Withdraw: recipient is the zero address\u0022);\r\n\r\n        uint256 balance = address(this).balance;\r\n\r\n        require(balance \u003E= amount, \u0022Withdraw: amount exceeds balance\u0022);\r\n        recipient.transfer(amount);\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n    bool private _paused;\r\n\r\n    event Paused(address account);\r\n    event Unpaused(address account);\r\n\r\n\r\n    /**\r\n     * @dev Constructor\r\n     */\r\n    constructor () internal {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @return Returns true if the contract is paused, false otherwise.\r\n     */\r\n    function paused() public view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!_paused, \u0022Paused\u0022);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Sets paused state.\r\n     *\r\n     * Can only be called by the current owner.\r\n     */\r\n    function setPaused(bool value) external onlyOwner {\r\n        _paused = value;\r\n\r\n        if (_paused) {\r\n            emit Paused(msg.sender);\r\n        } else {\r\n            emit Unpaused(msg.sender);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Part of ERC20 interface.\r\n */\r\ninterface IERC20 {\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n}\r\n\r\n\r\n/**\r\n * @title Voken2.0 interface.\r\n */\r\ninterface IVoken2 {\r\n    function balanceOf(address owner) external view returns (uint256);\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function mint(address account, uint256 amount) external returns (bool);\r\n    function mintWithAllocation(address account, uint256 amount, address allocationContract) external returns (bool);\r\n    function whitelisted(address account) external view returns (bool);\r\n    function whitelistReferee(address account) external view returns (address payable);\r\n    function whitelistReferralsCount(address account) external view returns (uint256);\r\n}\r\n\r\n\r\n/**\r\n * @dev Interface of an allocation contract\r\n */\r\ninterface IAllocation {\r\n    function reservedOf(address account) external view returns (uint256);\r\n}\r\n\r\n\r\n/**\r\n * @dev Allocation for VOKEN\r\n */\r\nlibrary Allocations {\r\n    struct Allocation {\r\n        uint256 amount;\r\n        uint256 timestamp;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title VokenShareholders interface.\r\n */\r\ninterface VokenShareholders {\r\n    //\r\n}\r\n\r\n\r\n/**\r\n * @title Voken Public Sale v2.0\r\n */\r\ncontract VokenPublicSale2 is Ownable, Pausable, IAllocation {\r\n    using SafeMath16 for uint16;\r\n    using SafeMath256 for uint256;\r\n    using Roles for Roles.Role;\r\n    using Allocations for Allocations.Allocation;\r\n\r\n    // Proxy\r\n    Roles.Role private _proxies;\r\n\r\n    // Addresses\r\n    IVoken2 private _VOKEN = IVoken2(0xFfFAb974088Bd5bF3d7E6F522e93Dd7861264cDB);\r\n    VokenShareholders private _SHAREHOLDERS = VokenShareholders(0x7712F76D2A52141D44461CDbC8b660506DCAB752);\r\n    address payable private _TEAM;\r\n\r\n    // Referral rewards, 35% for 15 levels\r\n    uint16[15] private REWARDS_PCT = [6, 6, 5, 4, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1];\r\n\r\n    // Limit\r\n    uint16[] private LIMIT_COUNTER = [1, 1, 10, 50, 100, 200, 300];\r\n    uint256[] private LIMIT_WEIS = [100 ether, 50 ether, 40 ether, 30 ether, 20 ether, 10 ether, 5 ether];\r\n    uint256 private LIMIT_WEI_MIN = 3 ether;\r\n\r\n    // 6,000 000 gas mininum\r\n    uint24 private GAS_MIN = 6000000;\r\n\r\n    // Price\r\n    uint256 private VOKEN_USD_PRICE_START = 1000;       // $      0.00100 USD\r\n    uint256 private VOKEN_USD_PRICE_STEP = 10;          // $    \u002B 0.00001 USD\r\n    uint256 private STAGE_USD_CAP_START = 100000000;    // $    100 USD\r\n    uint256 private STAGE_USD_CAP_STEP = 1000000;       // $     \u002B1 USD\r\n    uint256 private STAGE_USD_CAP_MAX = 15100000000;    // $ 15,100 USD\r\n\r\n    // 1 Ether|Voken = xx.xxxxxx USD, with 6 decimals\r\n    uint256 private _etherUsdPrice;\r\n    uint256 private _vokenUsdPrice;\r\n\r\n    // Progress\r\n    uint16 private SEASON_MAX = 100;    // 100 seasons max\r\n    uint16 private SEASON_LIMIT = 20;   // 20 season total\r\n    uint16 private SEASON_STAGES = 600; // each 600 stages is a season\r\n    uint16 private STAGE_MAX = SEASON_STAGES.mul(SEASON_MAX);\r\n    uint16 private STAGE_LIMIT = SEASON_STAGES.mul(SEASON_LIMIT);\r\n    uint16 private _stage;\r\n    uint16 private _season;\r\n\r\n    // Sum\r\n    uint256 private _txs;\r\n    uint256 private _vokenIssued;\r\n    uint256 private _vokenIssuedTxs;\r\n    uint256 private _vokenBonus;\r\n    uint256 private _vokenBonusTxs;\r\n    uint256 private _weiSold;\r\n    uint256 private _weiRewarded;\r\n    uint256 private _weiShareholders;\r\n    uint256 private _weiTeam;\r\n    uint256 private _weiPended;\r\n    uint256 private _usdSold;\r\n    uint256 private _usdRewarded;\r\n\r\n    // Shareholders ratio\r\n    uint256 private SHAREHOLDERS_RATIO_START = 15000000;    // 15%, with 8 decimals\r\n    uint256 private SHAREHOLDERS_RATIO_DISTANCE = 50000000; // 50%, with 8 decimals\r\n    uint256 private _shareholdersRatio;\r\n\r\n    // Cache\r\n    bool private _cacheWhitelisted;\r\n    uint256 private _cacheWeiShareholders;\r\n    uint256 private _cachePended;\r\n    uint16[] private _cacheRewards;\r\n    address payable[] private _cacheReferees;\r\n\r\n    // Allocations\r\n    mapping (address =\u003E Allocations.Allocation[]) private _allocations;\r\n\r\n    // Account\r\n    mapping (address =\u003E uint256) private _accountVokenIssued;\r\n    mapping (address =\u003E uint256) private _accountVokenBonus;\r\n    mapping (address =\u003E uint256) private _accountVokenReferral;\r\n    mapping (address =\u003E uint256) private _accountVokenReferrals;\r\n    mapping (address =\u003E uint256) private _accountUsdPurchased;\r\n    mapping (address =\u003E uint256) private _accountWeiPurchased;\r\n    mapping (address =\u003E uint256) private _accountUsdRewarded;\r\n    mapping (address =\u003E uint256) private _accountWeiRewarded;\r\n\r\n    // Stage\r\n    mapping (uint16 =\u003E uint256) private _stageUsdSold;\r\n    mapping (uint16 =\u003E uint256) private _stageVokenIssued;\r\n    mapping (uint16 =\u003E uint256) private _stageVokenBonus;\r\n\r\n    // Season\r\n    mapping (uint16 =\u003E uint256) private _seasonWeiSold;\r\n    mapping (uint16 =\u003E uint256) private _seasonWeiRewarded;\r\n    mapping (uint16 =\u003E uint256) private _seasonWeiShareholders;\r\n    mapping (uint16 =\u003E uint256) private _seasonWeiPended;\r\n    mapping (uint16 =\u003E uint256) private _seasonUsdSold;\r\n    mapping (uint16 =\u003E uint256) private _seasonUsdRewarded;\r\n    mapping (uint16 =\u003E uint256) private _seasonUsdShareholders;\r\n    mapping (uint16 =\u003E uint256) private _seasonVokenIssued;\r\n    mapping (uint16 =\u003E uint256) private _seasonVokenBonus;\r\n\r\n    // Account in season\r\n    mapping (uint16 =\u003E mapping (address =\u003E uint256)) private _vokenSeasonAccountIssued;\r\n    mapping (uint16 =\u003E mapping (address =\u003E uint256)) private _vokenSeasonAccountBonus;\r\n    mapping (uint16 =\u003E mapping (address =\u003E uint256)) private _vokenSeasonAccountReferral;\r\n    mapping (uint16 =\u003E mapping (address =\u003E uint256)) private _vokenSeasonAccountReferrals;\r\n    mapping (uint16 =\u003E mapping (address =\u003E uint256)) private _weiSeasonAccountPurchased;\r\n    mapping (uint16 =\u003E mapping (address =\u003E uint256)) private _weiSeasonAccountReferrals;\r\n    mapping (uint16 =\u003E mapping (address =\u003E uint256)) private _weiSeasonAccountRewarded;\r\n    mapping (uint16 =\u003E mapping (address =\u003E uint256)) private _usdSeasonAccountPurchased;\r\n    mapping (uint16 =\u003E mapping (address =\u003E uint256)) private _usdSeasonAccountReferrals;\r\n    mapping (uint16 =\u003E mapping (address =\u003E uint256)) private _usdSeasonAccountRewarded;\r\n\r\n    // Season wei limit accounts\r\n    mapping (uint16 =\u003E mapping (uint256 =\u003E address[])) private _seasonLimitAccounts;\r\n    mapping (uint16 =\u003E address[]) private _seasonLimitWeiMinAccounts;\r\n\r\n    // Referrals\r\n    mapping (uint16 =\u003E address[]) private _seasonAccounts;\r\n    mapping (uint16 =\u003E address[]) private _seasonReferrals;\r\n    mapping (uint16 =\u003E mapping (address =\u003E bool)) private _seasonHasAccount;\r\n    mapping (uint16 =\u003E mapping (address =\u003E bool)) private _seasonHasReferral;\r\n    mapping (uint16 =\u003E mapping (address =\u003E address[])) private _seasonAccountReferrals;\r\n    mapping (uint16 =\u003E mapping (address =\u003E mapping (address =\u003E bool))) private _seasonAccountHasReferral;\r\n\r\n    // Events\r\n    event ProxyAdded(address indexed account);\r\n    event ProxyRemoved(address indexed account);\r\n    event StageClosed(uint256 _stageNumber);\r\n    event SeasonClosed(uint16 _seasonNumber);\r\n    event AuditEtherPriceUpdated(uint256 value, address indexed account);\r\n\r\n    event Log(uint256 value);\r\n\r\n    /**\r\n     * @dev Throws if called by account which is not a proxy.\r\n     */\r\n    modifier onlyProxy() {\r\n        require(isProxy(msg.sender), \u0022ProxyRole: caller does not have the Proxy role\u0022);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the \u0060account\u0060 has the Proxy role.\r\n     */\r\n    function isProxy(address account) public view returns (bool) {\r\n        return _proxies.has(account);\r\n    }\r\n\r\n    /**\r\n     * @dev Give an \u0060account\u0060 access to the Proxy role.\r\n     *\r\n     * Can only be called by the current owner.\r\n     */\r\n    function addProxy(address account) public onlyOwner {\r\n        _proxies.add(account);\r\n        emit ProxyAdded(account);\r\n    }\r\n\r\n    /**\r\n     * @dev Remove an \u0060account\u0060 access from the Proxy role.\r\n     *\r\n     * Can only be called by the current owner.\r\n     */\r\n    function removeProxy(address account) public onlyOwner {\r\n        _proxies.remove(account);\r\n        emit ProxyRemoved(account);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the VOKEN address.\r\n     */\r\n    function VOKEN() public view returns (IVoken2) {\r\n        return _VOKEN;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the shareholders contract address.\r\n     */\r\n    function SHAREHOLDERS() public view returns (VokenShareholders) {\r\n        return _SHAREHOLDERS;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the team wallet address.\r\n     */\r\n    function TEAM() public view returns (address) {\r\n        return _TEAM;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the main status.\r\n     */\r\n    function status() public view returns (uint16 stage,\r\n                                           uint16 season,\r\n                                           uint256 etherUsdPrice,\r\n                                           uint256 vokenUsdPrice,\r\n                                           uint256 shareholdersRatio) {\r\n        if (_stage \u003E STAGE_MAX) {\r\n            stage = STAGE_MAX;\r\n            season = SEASON_MAX;\r\n        }\r\n        else {\r\n            stage = _stage;\r\n            season = _season;\r\n        }\r\n\r\n        etherUsdPrice = _etherUsdPrice;\r\n        vokenUsdPrice = _vokenUsdPrice;\r\n        shareholdersRatio = _shareholdersRatio;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the sum.\r\n     */\r\n    function sum() public view returns(uint256 vokenIssued,\r\n                                       uint256 vokenBonus,\r\n                                       uint256 weiSold,\r\n                                       uint256 weiRewarded,\r\n                                       uint256 weiShareholders,\r\n                                       uint256 weiTeam,\r\n                                       uint256 weiPended,\r\n                                       uint256 usdSold,\r\n                                       uint256 usdRewarded) {\r\n        vokenIssued = _vokenIssued;\r\n        vokenBonus = _vokenBonus;\r\n\r\n        weiSold = _weiSold;\r\n        weiRewarded = _weiRewarded;\r\n        weiShareholders = _weiShareholders;\r\n        weiTeam = _weiTeam;\r\n        weiPended = _weiPended;\r\n\r\n        usdSold = _usdSold;\r\n        usdRewarded = _usdRewarded;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the transactions\u0027 counter.\r\n     */\r\n    function transactions() public view returns(uint256 txs,\r\n                                                uint256 vokenIssuedTxs,\r\n                                                uint256 vokenBonusTxs) {\r\n        txs = _txs;\r\n        vokenIssuedTxs = _vokenIssuedTxs;\r\n        vokenBonusTxs = _vokenBonusTxs;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the \u0060account\u0060 data.\r\n     */\r\n    function queryAccount(address account) public view returns (uint256 vokenIssued,\r\n                                                                uint256 vokenBonus,\r\n                                                                uint256 vokenReferral,\r\n                                                                uint256 vokenReferrals,\r\n                                                                uint256 weiPurchased,\r\n                                                                uint256 weiRewarded,\r\n                                                                uint256 usdPurchased,\r\n                                                                uint256 usdRewarded) {\r\n        vokenIssued = _accountVokenIssued[account];\r\n        vokenBonus = _accountVokenBonus[account];\r\n        vokenReferral = _accountVokenReferral[account];\r\n        vokenReferrals = _accountVokenReferrals[account];\r\n        weiPurchased = _accountWeiPurchased[account];\r\n        weiRewarded = _accountWeiRewarded[account];\r\n        usdPurchased = _accountUsdPurchased[account];\r\n        usdRewarded = _accountUsdRewarded[account];\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the stage data by \u0060stageIndex\u0060.\r\n     */\r\n    function stage(uint16 stageIndex) public view returns (uint256 vokenUsdPrice,\r\n                                                           uint256 shareholdersRatio,\r\n                                                           uint256 vokenIssued,\r\n                                                           uint256 vokenBonus,\r\n                                                           uint256 vokenCap,\r\n                                                           uint256 vokenOnSale,\r\n                                                           uint256 usdSold,\r\n                                                           uint256 usdCap,\r\n                                                           uint256 usdOnSale) {\r\n        if (stageIndex \u003C= STAGE_LIMIT) {\r\n            vokenUsdPrice = _calcVokenUsdPrice(stageIndex);\r\n            shareholdersRatio = _calcShareholdersRatio(stageIndex);\r\n\r\n            vokenIssued = _stageVokenIssued[stageIndex];\r\n            vokenBonus = _stageVokenBonus[stageIndex];\r\n            vokenCap = _stageVokenCap(stageIndex);\r\n            vokenOnSale = vokenCap.sub(vokenIssued);\r\n\r\n            usdSold = _stageUsdSold[stageIndex];\r\n            usdCap = _stageUsdCap(stageIndex);\r\n            usdOnSale = usdCap.sub(usdSold);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the season data by \u0060seasonNumber\u0060.\r\n     */\r\n    function season(uint16 seasonNumber) public view returns (uint256 vokenIssued,\r\n                                                              uint256 vokenBonus,\r\n                                                              uint256 weiSold,\r\n                                                              uint256 weiRewarded,\r\n                                                              uint256 weiShareholders,\r\n                                                              uint256 weiPended,\r\n                                                              uint256 usdSold,\r\n                                                              uint256 usdRewarded,\r\n                                                              uint256 usdShareholders) {\r\n        if (seasonNumber \u003C= SEASON_LIMIT) {\r\n            vokenIssued = _seasonVokenIssued[seasonNumber];\r\n            vokenBonus = _seasonVokenBonus[seasonNumber];\r\n\r\n            weiSold = _seasonWeiSold[seasonNumber];\r\n            weiRewarded = _seasonWeiRewarded[seasonNumber];\r\n            weiShareholders = _seasonWeiShareholders[seasonNumber];\r\n            weiPended = _seasonWeiPended[seasonNumber];\r\n\r\n            usdSold = _seasonUsdSold[seasonNumber];\r\n            usdRewarded = _seasonUsdRewarded[seasonNumber];\r\n            usdShareholders = _seasonUsdShareholders[seasonNumber];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the \u0060account\u0060 data of #\u0060seasonNumber\u0060 season.\r\n     */\r\n    function accountInSeason(address account, uint16 seasonNumber) public view returns (uint256 vokenIssued,\r\n                                                                                        uint256 vokenBonus,\r\n                                                                                        uint256 vokenReferral,\r\n                                                                                        uint256 vokenReferrals,\r\n                                                                                        uint256 weiPurchased,\r\n                                                                                        uint256 weiReferrals,\r\n                                                                                        uint256 weiRewarded,\r\n                                                                                        uint256 usdPurchased,\r\n                                                                                        uint256 usdReferrals,\r\n                                                                                        uint256 usdRewarded) {\r\n        if (seasonNumber \u003E 0 \u0026\u0026 seasonNumber \u003C= SEASON_LIMIT) {\r\n            vokenIssued = _vokenSeasonAccountIssued[seasonNumber][account];\r\n            vokenBonus = _vokenSeasonAccountBonus[seasonNumber][account];\r\n            vokenReferral = _vokenSeasonAccountReferral[seasonNumber][account];\r\n            vokenReferrals = _vokenSeasonAccountReferrals[seasonNumber][account];\r\n            weiPurchased = _weiSeasonAccountPurchased[seasonNumber][account];\r\n            weiReferrals = _weiSeasonAccountReferrals[seasonNumber][account];\r\n            weiRewarded = _weiSeasonAccountRewarded[seasonNumber][account];\r\n            usdPurchased = _usdSeasonAccountPurchased[seasonNumber][account];\r\n            usdReferrals = _usdSeasonAccountReferrals[seasonNumber][account];\r\n            usdRewarded = _usdSeasonAccountRewarded[seasonNumber][account];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Referral accounts in a season by \u0060seasonNumber\u0060.\r\n     */\r\n    function seasonReferrals(uint16 seasonNumber) public view returns (address[] memory) {\r\n        return _seasonReferrals[seasonNumber];\r\n    }\r\n\r\n    /**\r\n     * @dev Referral accounts in a season by \u0060seasonNumber\u0060 of \u0060account\u0060.\r\n     */\r\n    function seasonAccountReferrals(uint16 seasonNumber, address account) public view returns (address[] memory) {\r\n        return _seasonAccountReferrals[seasonNumber][account];\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    /**\r\n     * @dev Voken price in USD, by \u0060stageIndex\u0060.\r\n     */\r\n    function _calcVokenUsdPrice(uint16 stageIndex) private view returns (uint256) {\r\n        return VOKEN_USD_PRICE_START.add(VOKEN_USD_PRICE_STEP.mul(stageIndex));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the shareholders ratio by \u0060stageIndex\u0060.\r\n     */\r\n    function _calcShareholdersRatio(uint16 stageIndex) private view returns (uint256) {\r\n        return SHAREHOLDERS_RATIO_START.add(SHAREHOLDERS_RATIO_DISTANCE.mul(stageIndex).div(STAGE_MAX));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the dollor cap of \u0060stageIndex\u0060.\r\n     */\r\n    function _stageUsdCap(uint16 stageIndex) private view returns (uint256) {\r\n        uint256 __usdCap = STAGE_USD_CAP_START.add(STAGE_USD_CAP_STEP.mul(stageIndex));\r\n\r\n        if (__usdCap \u003E STAGE_USD_CAP_MAX) {\r\n            return STAGE_USD_CAP_MAX;\r\n        }\r\n\r\n        return __usdCap;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the Voken cap of \u0060stageIndex\u0060.\r\n     */\r\n    function _stageVokenCap(uint16 stageIndex) private view returns (uint256) {\r\n        return _stageUsdCap(stageIndex).mul(1000000).div(_calcVokenUsdPrice(stageIndex));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an {uint256} by \u0060value\u0060 * _shareholdersRatio / 100000000\r\n     */\r\n    function _2shareholders(uint256 value) private view returns (uint256) {\r\n        return value.mul(_shareholdersRatio).div(100000000);\r\n    }\r\n\r\n    /**\r\n     * @dev wei =\u003E USD, by \u0060weiAmount\u0060.\r\n     */\r\n    function _wei2usd(uint256 weiAmount) private view returns (uint256) {\r\n        return weiAmount.mul(_etherUsdPrice).div(1 ether);\r\n    }\r\n\r\n    /**\r\n     * @dev USD =\u003E wei, by \u0060usdAmount\u0060.\r\n     */\r\n    function _usd2wei(uint256 usdAmount) private view returns (uint256) {\r\n        return usdAmount.mul(1 ether).div(_etherUsdPrice);\r\n    }\r\n\r\n    /**\r\n     * @dev USD =\u003E voken, by \u0060usdAmount\u0060.\r\n     */\r\n    function _usd2voken(uint256 usdAmount) private view returns (uint256) {\r\n        return usdAmount.mul(1000000).div(_vokenUsdPrice);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the season number by \u0060stageIndex\u0060.\r\n     */\r\n    function _seasonNumber(uint16 stageIndex) private view returns (uint16) {\r\n        if (stageIndex \u003E 0) {\r\n            uint16 __seasonNumber = stageIndex.div(SEASON_STAGES);\r\n\r\n            if (stageIndex.mod(SEASON_STAGES) \u003E 0) {\r\n                return __seasonNumber.add(1);\r\n            }\r\n\r\n            return __seasonNumber;\r\n        }\r\n\r\n        return 1;\r\n    }\r\n\r\n    /**\r\n     * Close the current stage.\r\n     */\r\n    function _closeStage() private {\r\n        _stage = _stage.add(1);\r\n        emit StageClosed(_stage);\r\n\r\n        // Close current season\r\n        uint16 __seasonNumber = _seasonNumber(_stage);\r\n        if (_season \u003C __seasonNumber) {\r\n            _season = __seasonNumber;\r\n            emit SeasonClosed(_season);\r\n        }\r\n\r\n        _vokenUsdPrice = _calcVokenUsdPrice(_stage);\r\n        _shareholdersRatio = _calcShareholdersRatio(_stage);\r\n    }\r\n\r\n    /**\r\n     * @dev Update audit ether price.\r\n     */\r\n    function updateEtherUsdPrice(uint256 value) external onlyProxy {\r\n        _etherUsdPrice = value;\r\n        emit AuditEtherPriceUpdated(value, msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Update team wallet address.\r\n     */\r\n    function updateTeamWallet(address payable account) external onlyOwner {\r\n        _TEAM = account;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns current max wei value.\r\n     */\r\n    function weiMax() public view returns (uint256) {\r\n        for(uint16 i = 0; i \u003C LIMIT_WEIS.length; i\u002B\u002B) {\r\n            if (_seasonLimitAccounts[_season][i].length \u003C LIMIT_COUNTER[i]) {\r\n                return LIMIT_WEIS[i];\r\n            }\r\n        }\r\n\r\n        return LIMIT_WEI_MIN;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the {limitIndex} and {weiMax}.\r\n     */\r\n    function _limit(uint256 weiAmount) private view returns (uint256 __wei) {\r\n        uint256 __purchased = _weiSeasonAccountPurchased[_season][msg.sender];\r\n        for(uint16 i = 0; i \u003C LIMIT_WEIS.length; i\u002B\u002B) {\r\n            if (__purchased \u003E= LIMIT_WEIS[i]) {\r\n                return 0;\r\n            }\r\n\r\n            if (__purchased \u003C LIMIT_WEIS[i]) {\r\n                __wei = LIMIT_WEIS[i].sub(__purchased);\r\n                if (weiAmount \u003E= __wei \u0026\u0026 _seasonLimitAccounts[_season][i].length \u003C LIMIT_COUNTER[i]) {\r\n                    return __wei;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (__purchased \u003C LIMIT_WEI_MIN) {\r\n            return LIMIT_WEI_MIN.sub(__purchased);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Updates the season limit accounts, or wei min accounts.\r\n     */\r\n    function _updateSeasonLimits() private {\r\n        uint256 __purchased = _weiSeasonAccountPurchased[_season][msg.sender];\r\n        if (__purchased \u003E LIMIT_WEI_MIN) {\r\n            for(uint16 i = 0; i \u003C LIMIT_WEIS.length; i\u002B\u002B) {\r\n                if (__purchased \u003E= LIMIT_WEIS[i]) {\r\n                    _seasonLimitAccounts[_season][i].push(msg.sender);\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n\r\n        else if (__purchased == LIMIT_WEI_MIN) {\r\n            _seasonLimitWeiMinAccounts[_season].push(msg.sender);\r\n            return;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the accounts of wei limit, by \u0060seasonNumber\u0060 and \u0060limitIndex\u0060.\r\n     */\r\n    function seasonLimitAccounts(uint16 seasonNumber, uint16 limitIndex) public view returns (uint256 weis, address[] memory accounts) {\r\n        if (limitIndex \u003C LIMIT_WEIS.length) {\r\n            weis = LIMIT_WEIS[limitIndex];\r\n            accounts = _seasonLimitAccounts[seasonNumber][limitIndex];\r\n        }\r\n\r\n        else {\r\n            weis = LIMIT_WEI_MIN;\r\n            accounts = _seasonLimitWeiMinAccounts[seasonNumber];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev constructor\r\n     */\r\n    constructor () public {\r\n        _stage = 3277;\r\n        _season = _seasonNumber(_stage);\r\n        _vokenUsdPrice = _calcVokenUsdPrice(_stage);\r\n        _shareholdersRatio = _calcShareholdersRatio(_stage);\r\n\r\n        _TEAM = msg.sender;\r\n        addProxy(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Receive ETH, and excute the exchange.\r\n     */\r\n    function () external payable whenNotPaused {\r\n        require(_etherUsdPrice \u003E 0, \u0022VokenPublicSale2: Audit ETH price is zero\u0022);\r\n        require(_stage \u003C= STAGE_MAX, \u0022VokenPublicSale2: Voken Public-Sale Completled\u0022);\r\n\r\n        uint256 __usdAmount;\r\n        uint256 __usdRemain;\r\n        uint256 __usdUsed;\r\n        uint256 __weiUsed;\r\n        uint256 __voken;\r\n\r\n        // Limit\r\n        uint256 __weiMax = _limit(msg.value);\r\n        if (__weiMax \u003C msg.value) {\r\n            __usdAmount = _wei2usd(__weiMax);\r\n        }\r\n        else {\r\n            __usdAmount = _wei2usd(msg.value);\r\n        }\r\n\r\n        __usdRemain = __usdAmount;\r\n\r\n        if (__usdRemain \u003E 0) {\r\n            // cache\r\n            _cache();\r\n\r\n            // USD =\u003E Voken\r\n            while (gasleft() \u003E GAS_MIN \u0026\u0026 __usdRemain \u003E 0 \u0026\u0026 _stage \u003C= STAGE_LIMIT) {\r\n                uint256 __txVokenIssued;\r\n                (__txVokenIssued, __usdRemain) = _tx(__usdRemain);\r\n                __voken = __voken.add(__txVokenIssued);\r\n            }\r\n\r\n            // Used\r\n            __usdUsed = __usdAmount.sub(__usdRemain);\r\n            __weiUsed = _usd2wei(__usdUsed);\r\n\r\n            // Whitelist\r\n            if (_cacheWhitelisted \u0026\u0026 __voken \u003E 0) {\r\n                _mintVokenBonus(__voken);\r\n\r\n                for(uint16 i = 0; i \u003C _cacheReferees.length; i\u002B\u002B) {\r\n                    address payable __referee = _cacheReferees[i];\r\n                    uint256 __usdReward = __usdUsed.mul(_cacheRewards[i]).div(100);\r\n                    uint256 __weiReward = __weiUsed.mul(_cacheRewards[i]).div(100);\r\n\r\n                    __referee.transfer(__weiReward);\r\n                    _usdRewarded = _usdRewarded.add(__usdReward);\r\n                    _weiRewarded = _weiRewarded.add(__weiReward);\r\n                    _accountUsdRewarded[__referee] = _accountUsdRewarded[__referee].add(__usdReward);\r\n                    _accountWeiRewarded[__referee] = _accountWeiRewarded[__referee].add(__weiReward);\r\n                }\r\n\r\n                if (_cachePended \u003E 0) {\r\n                    _weiPended = _weiPended.add(__weiUsed.mul(_cachePended).div(100));\r\n                }\r\n            }\r\n\r\n            // Counter\r\n            if (__weiUsed \u003E 0) {\r\n                _txs = _txs.add(1);\r\n                _usdSold = _usdSold.add(__usdUsed);\r\n                _weiSold = _weiSold.add(__weiUsed);\r\n                _accountUsdPurchased[msg.sender] = _accountUsdPurchased[msg.sender].add(__usdUsed);\r\n                _accountWeiPurchased[msg.sender] = _accountWeiPurchased[msg.sender].add(__weiUsed);\r\n\r\n                // Wei for SHAREHOLDERS\r\n                _weiShareholders = _weiShareholders.add(_cacheWeiShareholders);\r\n                (bool __bool,) = address(_SHAREHOLDERS).call.value(_cacheWeiShareholders)(\u0022\u0022);\r\n                assert(__bool);\r\n\r\n                // Wei for TEAM\r\n                uint256 __weiTeam = _weiSold.sub(_weiRewarded).sub(_weiShareholders).sub(_weiPended).sub(_weiTeam);\r\n                _weiTeam = _weiTeam.add(__weiTeam);\r\n                _TEAM.transfer(__weiTeam);\r\n\r\n                // Update season limits\r\n                _updateSeasonLimits();\r\n            }\r\n\r\n            // Reset cache\r\n            _resetCache();\r\n        }\r\n\r\n        // If wei remains, refund.\r\n        uint256 __weiRemain = msg.value.sub(__weiUsed);\r\n        if (__weiRemain \u003E 0) {\r\n            msg.sender.transfer(__weiRemain);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Cache.\r\n     */\r\n    function _cache() private {\r\n        if (!_seasonHasAccount[_season][msg.sender]) {\r\n            _seasonAccounts[_season].push(msg.sender);\r\n            _seasonHasAccount[_season][msg.sender] = true;\r\n        }\r\n\r\n        _cacheWhitelisted = _VOKEN.whitelisted(msg.sender);\r\n        if (_cacheWhitelisted) {\r\n            address __account = msg.sender;\r\n            for(uint16 i = 0; i \u003C REWARDS_PCT.length; i\u002B\u002B) {\r\n                address __referee = _VOKEN.whitelistReferee(__account);\r\n\r\n                if (__referee != address(0) \u0026\u0026 __referee != __account \u0026\u0026 _VOKEN.whitelistReferralsCount(__referee) \u003E i) {\r\n                    if (!_seasonHasReferral[_season][__referee]) {\r\n                        _seasonReferrals[_season].push(__referee);\r\n                        _seasonHasReferral[_season][__referee] = true;\r\n                    }\r\n\r\n                    if (!_seasonAccountHasReferral[_season][__referee][__account]) {\r\n                        _seasonAccountReferrals[_season][__referee].push(__account);\r\n                        _seasonAccountHasReferral[_season][__referee][__account] = true;\r\n                    }\r\n\r\n                    _cacheReferees.push(address(uint160(__referee)));\r\n                    _cacheRewards.push(REWARDS_PCT[i]);\r\n                }\r\n                else {\r\n                    _cachePended = _cachePended.add(REWARDS_PCT[i]);\r\n                }\r\n\r\n                __account = __referee;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Reset cache.\r\n     */\r\n    function _resetCache() private {\r\n        delete _cacheWeiShareholders;\r\n\r\n        if (_cacheWhitelisted) {\r\n            delete _cacheWhitelisted;\r\n            delete _cacheReferees;\r\n            delete _cacheRewards;\r\n            delete _cachePended;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev USD =\u003E Voken\r\n     */\r\n    function _tx(uint256 __usd) private returns (uint256 __voken, uint256 __usdRemain) {\r\n        uint256 __stageUsdCap = _stageUsdCap(_stage);\r\n        uint256 __usdUsed;\r\n\r\n        // in stage\r\n        if (_stageUsdSold[_stage].add(__usd) \u003C= __stageUsdCap) {\r\n            __usdUsed = __usd;\r\n\r\n            (__voken, ) = _calcExchange(__usdUsed);\r\n            _mintVokenIssued(__voken);\r\n\r\n            // close stage, if stage dollor cap reached\r\n            if (__stageUsdCap == _stageUsdSold[_stage]) {\r\n                _closeStage();\r\n            }\r\n        }\r\n\r\n        // close stage\r\n        else {\r\n            __usdUsed = __stageUsdCap.sub(_stageUsdSold[_stage]);\r\n\r\n            (__voken, ) = _calcExchange(__usdUsed);\r\n            _mintVokenIssued(__voken);\r\n\r\n            _closeStage();\r\n\r\n            __usdRemain = __usd.sub(__usdUsed);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev USD =\u003E voken \u0026 wei, and make records.\r\n     */\r\n    function _calcExchange(uint256 __usd) private returns (uint256 __voken, uint256 __wei) {\r\n        __wei = _usd2wei(__usd);\r\n        __voken = _usd2voken(__usd);\r\n\r\n        uint256 __usdShareholders = _2shareholders(__usd);\r\n        uint256 __weiShareholders = _usd2wei(__usdShareholders);\r\n\r\n        // Stage: usd\r\n        _stageUsdSold[_stage] = _stageUsdSold[_stage].add(__usd);\r\n\r\n        // Season: usd, wei\r\n        _seasonUsdSold[_season] = _seasonUsdSold[_season].add(__usd);\r\n        _seasonWeiSold[_season] = _seasonWeiSold[_season].add(__wei);\r\n\r\n        // Season: wei pended\r\n        if (_cachePended \u003E 0) {\r\n            _seasonWeiPended[_season] = _seasonWeiPended[_season].add(__wei.mul(_cachePended).div(100));\r\n        }\r\n\r\n        // Season shareholders: usd, wei\r\n        _seasonUsdShareholders[_season] = _seasonUsdShareholders[_season].add(__usdShareholders);\r\n        _seasonWeiShareholders[_season] = _seasonWeiShareholders[_season].add(__weiShareholders);\r\n\r\n        // Cache\r\n        _cacheWeiShareholders = _cacheWeiShareholders.add(__weiShareholders);\r\n\r\n        // Season =\u003E account: usd, wei\r\n        _usdSeasonAccountPurchased[_season][msg.sender] = _usdSeasonAccountPurchased[_season][msg.sender].add(__usd);\r\n        _weiSeasonAccountPurchased[_season][msg.sender] = _weiSeasonAccountPurchased[_season][msg.sender].add(__wei);\r\n\r\n        // season referral account\r\n        if (_cacheWhitelisted) {\r\n            for (uint16 i = 0; i \u003C _cacheRewards.length; i\u002B\u002B) {\r\n                address __referee = _cacheReferees[i];\r\n                uint256 __usdReward = __usd.mul(_cacheRewards[i]).div(100);\r\n                uint256 __weiReward = __wei.mul(_cacheRewards[i]).div(100);\r\n\r\n                // season\r\n                _seasonUsdRewarded[_season] = _seasonUsdRewarded[_season].add(__usdReward);\r\n                _seasonWeiRewarded[_season] = _seasonWeiRewarded[_season].add(__weiReward);\r\n\r\n                // season =\u003E account\r\n                _usdSeasonAccountRewarded[_season][__referee] = _usdSeasonAccountRewarded[_season][__referee].add(__usdReward);\r\n                _weiSeasonAccountRewarded[_season][__referee] = _weiSeasonAccountRewarded[_season][__referee].add(__weiReward);\r\n                _usdSeasonAccountReferrals[_season][__referee] = _usdSeasonAccountReferrals[_season][__referee].add(__usd);\r\n                _weiSeasonAccountReferrals[_season][__referee] = _weiSeasonAccountReferrals[_season][__referee].add(__wei);\r\n\r\n                _vokenSeasonAccountReferrals[_season][__referee] = _vokenSeasonAccountReferrals[_season][__referee].add(__voken);\r\n                _accountVokenReferrals[__referee] = _accountVokenReferrals[__referee].add(__voken);\r\n\r\n                if (i == 0) {\r\n                    _vokenSeasonAccountReferral[_season][__referee] = _vokenSeasonAccountReferral[_season][__referee].add(__voken);\r\n                    _accountVokenReferral[__referee] = _accountVokenReferral[__referee].add(__voken);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Mint Voken issued.\r\n     */\r\n    function _mintVokenIssued(uint256 amount) private {\r\n        // Global\r\n        _vokenIssued = _vokenIssued.add(amount);\r\n        _vokenIssuedTxs = _vokenIssuedTxs.add(1);\r\n\r\n        // Account\r\n        _accountVokenIssued[msg.sender] = _accountVokenIssued[msg.sender].add(amount);\r\n\r\n        // Stage\r\n        _stageVokenIssued[_stage] = _stageVokenIssued[_stage].add(amount);\r\n\r\n        // Season\r\n        _seasonVokenIssued[_season] = _seasonVokenIssued[_season].add(amount);\r\n        _vokenSeasonAccountIssued[_season][msg.sender] = _vokenSeasonAccountIssued[_season][msg.sender].add(amount);\r\n\r\n        // Mint\r\n        assert(_VOKEN.mint(msg.sender, amount));\r\n    }\r\n\r\n    /**\r\n     * @dev Mint Voken bonus.\r\n     */\r\n    function _mintVokenBonus(uint256 amount) private {\r\n        // Global\r\n        _vokenBonus = _vokenBonus.add(amount);\r\n        _vokenBonusTxs = _vokenBonusTxs.add(1);\r\n\r\n        // Account\r\n        _accountVokenBonus[msg.sender] = _accountVokenBonus[msg.sender].add(amount);\r\n\r\n        // Stage\r\n        _stageVokenBonus[_stage] = _stageVokenBonus[_stage].add(amount);\r\n\r\n        // Season\r\n        _seasonVokenBonus[_season] = _seasonVokenBonus[_season].add(amount);\r\n        _vokenSeasonAccountBonus[_season][msg.sender] = _vokenSeasonAccountBonus[_season][msg.sender].add(amount);\r\n\r\n        // Mint with allocation\r\n        Allocations.Allocation memory __allocation;\r\n        __allocation.amount = amount;\r\n        __allocation.timestamp = now;\r\n        _allocations[msg.sender].push(__allocation);\r\n        assert(_VOKEN.mintWithAllocation(msg.sender, amount, address(this)));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the reserved amount of VOKEN by \u0060account\u0060.\r\n     */\r\n    function reservedOf(address account) public view returns (uint256) {\r\n        Allocations.Allocation[] memory __allocations = _allocations[account];\r\n\r\n        uint256 __len = __allocations.length;\r\n        if (__len \u003E 0) {\r\n            uint256 __vokenIssued = _accountVokenIssued[account];\r\n            uint256 __vokenBonus = _accountVokenBonus[account];\r\n            uint256 __vokenReferral = _accountVokenReferral[account];\r\n            uint256 __vokenBalance = _VOKEN.balanceOf(account);\r\n\r\n            // balance fixed, by Voken issued.\r\n            if (__vokenIssued \u003C __vokenBalance) {\r\n                __vokenBalance = __vokenBalance.sub(__vokenIssued);\r\n            }\r\n            else {\r\n                __vokenBalance = 0;\r\n            }\r\n\r\n            // balance fixed, by Voken bonus.\r\n            if (__vokenBonus \u003C __vokenBalance) {\r\n                __vokenBalance = __vokenBalance.sub(__vokenBonus);\r\n            }\r\n            else {\r\n                __vokenBalance = 0;\r\n            }\r\n\r\n            uint256 __reserved;\r\n            for (uint256 i = 0; i \u003C __len; i\u002B\u002B) {\r\n                // Voken reserved.\r\n                Allocations.Allocation memory __allocation = __allocations[i];\r\n                __reserved = __reserved.add(__allocation.amount);\r\n                if (now \u003E= __allocation.timestamp.add(90 days)) {\r\n                    // default: 180 days.\r\n                    uint256 __distance = 180 days;\r\n\r\n                    // shorten the distance, by Voken referral, at least 120 days.\r\n                    if (__vokenReferral \u003E __allocation.amount) {\r\n                        __distance = __distance.sub(__vokenReferral.div(__allocation.amount).mul(1 days));\r\n                        if (__distance \u003E 120 days) {\r\n                            __distance = 120 days;\r\n                        }\r\n                    }\r\n\r\n                    // shorten the distance, by Voken holding\r\n                    if (__vokenBalance \u003E __allocation.amount) {\r\n                        __distance = __distance.sub(__vokenBalance.div(__allocation.amount).mul(30 days));\r\n                    }\r\n\r\n                    // at least: 90 days\r\n                    if (__distance \u003E 90 days) {\r\n                        __distance = 90 days;\r\n                    }\r\n\r\n                    // calc reserved\r\n                    uint256 __timestamp = __allocation.timestamp.add(__distance);\r\n                    if (now \u003E __timestamp) {\r\n                        uint256 __passed = now.sub(__timestamp).div(1 days).add(1);\r\n\r\n                        if (__passed \u003E 30) {\r\n                            __reserved = __reserved.sub(__allocation.amount);\r\n                        }\r\n                        else {\r\n                            __reserved = __reserved.sub(__allocation.amount.mul(__passed).div(30));\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            return __reserved;\r\n        }\r\n\r\n        return 0;\r\n    }\r\n}","ABI":"[{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022name\u0022:\u0022setPaused\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022transactions\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022txs\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022vokenIssuedTxs\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022vokenBonusTxs\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint16\u0022,\u0022name\u0022:\u0022seasonNumber\u0022,\u0022type\u0022:\u0022uint16\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022seasonAccountReferrals\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022address[]\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address[]\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022status\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint16\u0022,\u0022name\u0022:\u0022stage\u0022,\u0022type\u0022:\u0022uint16\u0022},{\u0022internalType\u0022:\u0022uint16\u0022,\u0022name\u0022:\u0022season\u0022,\u0022type\u0022:\u0022uint16\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022etherUsdPrice\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022vokenUsdPrice\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022shareholdersRatio\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022addProxy\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022isProxy\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022isOwner\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint16\u0022,\u0022name\u0022:\u0022seasonNumber\u0022,\u0022type\u0022:\u0022uint16\u0022}],\u0022name\u0022:\u0022accountInSeason\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022vokenIssued\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022vokenBonus\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022vokenReferral\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022vokenReferrals\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022weiPurchased\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022weiReferrals\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022weiRewarded\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022usdPurchased\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022usdReferrals\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022usdRewarded\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address payable\u0022,\u0022name\u0022:\u0022recipient\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022withdrawEther\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022queryAccount\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022vokenIssued\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022vokenBonus\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022vokenReferral\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022vokenReferrals\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022weiPurchased\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022weiRewarded\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022usdPurchased\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022usdRewarded\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint16\u0022,\u0022name\u0022:\u0022seasonNumber\u0022,\u0022type\u0022:\u0022uint16\u0022},{\u0022internalType\u0022:\u0022uint16\u0022,\u0022name\u0022:\u0022limitIndex\u0022,\u0022type\u0022:\u0022uint16\u0022}],\u0022name\u0022:\u0022seasonLimitAccounts\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022weis\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022address[]\u0022,\u0022name\u0022:\u0022accounts\u0022,\u0022type\u0022:\u0022address[]\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022paused\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022SHAREHOLDERS\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022contract VokenShareholders\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint16\u0022,\u0022name\u0022:\u0022seasonNumber\u0022,\u0022type\u0022:\u0022uint16\u0022}],\u0022name\u0022:\u0022seasonReferrals\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022address[]\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address[]\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint16\u0022,\u0022name\u0022:\u0022stageIndex\u0022,\u0022type\u0022:\u0022uint16\u0022}],\u0022name\u0022:\u0022stage\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022vokenUsdPrice\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022shareholdersRatio\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022vokenIssued\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022vokenBonus\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022vokenCap\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022vokenOnSale\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022usdSold\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022usdCap\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022usdOnSale\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022acceptOwnership\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address payable\u0022,\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022updateTeamWallet\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022sum\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022vokenIssued\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022vokenBonus\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022weiSold\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022weiRewarded\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022weiShareholders\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022weiTeam\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022weiPended\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022usdSold\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022usdRewarded\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022owner\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022currentOwner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022VOKEN\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022contract IVoken2\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint16\u0022,\u0022name\u0022:\u0022seasonNumber\u0022,\u0022type\u0022:\u0022uint16\u0022}],\u0022name\u0022:\u0022season\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022vokenIssued\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022vokenBonus\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022weiSold\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022weiRewarded\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022weiShareholders\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022weiPended\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022usdSold\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022usdRewarded\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022usdShareholders\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022removeProxy\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022reservedOf\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022tokenAddr\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022recipient\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022rescueTokens\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022TEAM\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022weiMax\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022updateEtherUsdPrice\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022transferOwnership\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022constructor\u0022},{\u0022payable\u0022:true,\u0022stateMutability\u0022:\u0022payable\u0022,\u0022type\u0022:\u0022fallback\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022ProxyAdded\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022ProxyRemoved\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_stageNumber\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022StageClosed\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint16\u0022,\u0022name\u0022:\u0022_seasonNumber\u0022,\u0022type\u0022:\u0022uint16\u0022}],\u0022name\u0022:\u0022SeasonClosed\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022AuditEtherPriceUpdated\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022Log\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022Paused\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022Unpaused\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022previousOwner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022OwnershipTransferred\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022previousOwner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022OwnershipAccepted\u0022,\u0022type\u0022:\u0022event\u0022}]","ContractName":"VokenPublicSale2","CompilerVersion":"v0.5.11\u002Bcommit.c082d0b4","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://1ea00b5cd357fe67574ffbe4cb38efc1fcbaa63b8ebe9f0fcf36da0db13f79a2"}]