[{"SourceCode":"// File: contracts/ERC721/el/IBurnableEtherLegendsToken.sol\r\n\r\npragma solidity 0.5.0;\r\n\r\ninterface IBurnableEtherLegendsToken {        \r\n    function burn(uint256 tokenId) external;\r\n}\r\n\r\n// File: contracts/ERC721/el/IMintableEtherLegendsToken.sol\r\n\r\npragma solidity 0.5.0;\r\n\r\ninterface IMintableEtherLegendsToken {        \r\n    function mintTokenOfType(address to, uint256 idOfTokenType) external;\r\n}\r\n\r\n// File: contracts/ERC721/el/ITokenDefinitionManager.sol\r\n\r\npragma solidity 0.5.0;\r\n\r\ninterface ITokenDefinitionManager {        \r\n    function getNumberOfTokenDefinitions() external view returns (uint256);\r\n    function hasTokenDefinition(uint256 tokenTypeId) external view returns (bool);\r\n    function getTokenTypeNameAtIndex(uint256 index) external view returns (string memory);\r\n    function getTokenTypeName(uint256 tokenTypeId) external view returns (string memory);\r\n    function getTokenTypeId(string calldata name) external view returns (uint256);\r\n    function getCap(uint256 tokenTypeId) external view returns (uint256);\r\n    function getAbbreviation(uint256 tokenTypeId) external view returns (string memory);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/introspection/IERC165.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * [EIP](https://eips.ethereum.org/EIPS/eip-165).\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others (\u0060ERC165Checker\u0060).\r\n *\r\n * For an implementation, see \u0060ERC165\u0060.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * \u0060interfaceId\u0060. See the corresponding\r\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC721/IERC721.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ncontract IERC721 is IERC165 {\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of NFTs in \u0060owner\u0060\u0027s account.\r\n     */\r\n    function balanceOf(address owner) public view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the NFT specified by \u0060tokenId\u0060.\r\n     */\r\n    function ownerOf(uint256 tokenId) public view returns (address owner);\r\n\r\n    /**\r\n     * @dev Transfers a specific NFT (\u0060tokenId\u0060) from one account (\u0060from\u0060) to\r\n     * another (\u0060to\u0060).\r\n     *\r\n     * \r\n     *\r\n     * Requirements:\r\n     * - \u0060from\u0060, \u0060to\u0060 cannot be zero.\r\n     * - \u0060tokenId\u0060 must be owned by \u0060from\u0060.\r\n     * - If the caller is not \u0060from\u0060, it must be have been allowed to move this\r\n     * NFT by either \u0060approve\u0060 or \u0060setApproveForAll\u0060.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) public;\r\n    /**\r\n     * @dev Transfers a specific NFT (\u0060tokenId\u0060) from one account (\u0060from\u0060) to\r\n     * another (\u0060to\u0060).\r\n     *\r\n     * Requirements:\r\n     * - If the caller is not \u0060from\u0060, it must be approved to move this NFT by\r\n     * either \u0060approve\u0060 or \u0060setApproveForAll\u0060.\r\n     */\r\n    function transferFrom(address from, address to, uint256 tokenId) public;\r\n    function approve(address to, uint256 tokenId) public;\r\n    function getApproved(uint256 tokenId) public view returns (address operator);\r\n\r\n    function setApprovalForAll(address operator, bool _approved) public;\r\n    function isApprovedForAll(address owner, address operator) public view returns (bool);\r\n\r\n\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public;\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC721/IERC721Enumerable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ncontract IERC721Enumerable is IERC721 {\r\n    function totalSupply() public view returns (uint256);\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view returns (uint256 tokenId);\r\n\r\n    function tokenByIndex(uint256 index) public view returns (uint256);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC721/IERC721Metadata.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ncontract IERC721Metadata is IERC721 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC721/IERC721Full.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, full implementation interface\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ncontract IERC721Full is IERC721, IERC721Enumerable, IERC721Metadata {\r\n    // solhint-disable-previous-line no-empty-blocks\r\n}\r\n\r\n// File: contracts/ERC721/el/IEtherLegendsToken.sol\r\n\r\npragma solidity 0.5.0;\r\n\r\n\r\n\r\n\r\n\r\ncontract IEtherLegendsToken is IERC721Full, IMintableEtherLegendsToken, IBurnableEtherLegendsToken, ITokenDefinitionManager {\r\n    function totalSupplyOfType(uint256 tokenTypeId) external view returns (uint256);\r\n    function getTypeIdOfToken(uint256 tokenId) external view returns (uint256);\r\n}\r\n\r\n// File: contracts/ERC721/el/IBoosterPack.sol\r\n\r\npragma solidity 0.5.0;\r\n\r\ninterface IBoosterPack {        \r\n    function getNumberOfCards() external view returns (uint256);\r\n    function getCardTypeIdAtIndex(uint256 index) external view returns (uint256);\r\n    function getPricePerCard() external view returns (uint256);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see \u0060ERC20Detailed\u0060.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by \u0060account\u0060.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves \u0060amount\u0060 tokens from the caller\u0027s account to \u0060recipient\u0060.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a \u0060Transfer\u0060 event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that \u0060spender\u0060 will be\r\n     * allowed to spend on behalf of \u0060owner\u0060 through \u0060transferFrom\u0060. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when \u0060approve\u0060 or \u0060transferFrom\u0060 are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets \u0060amount\u0060 as the allowance of \u0060spender\u0060 over the caller\u0027s tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * \u003E Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an \u0060Approval\u0060 event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves \u0060amount\u0060 tokens from \u0060sender\u0060 to \u0060recipient\u0060 using the\r\n     * allowance mechanism. \u0060amount\u0060 is then deducted from the caller\u0027s\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a \u0060Transfer\u0060 event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when \u0060value\u0060 tokens are moved from one account (\u0060from\u0060) to\r\n     * another (\u0060to\u0060).\r\n     *\r\n     * Note that \u0060value\u0060 may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a \u0060spender\u0060 for an \u0060owner\u0060 is set by\r\n     * a call to \u0060approve\u0060. \u0060value\u0060 is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * \u0060onlyOwner\u0060, which can be aplied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \u0022Ownable: caller is not the owner\u0022);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * \u0060onlyOwner\u0060 functions anymore. Can only be called by the current owner.\r\n     *\r\n     * \u003E Note: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (\u0060newOwner\u0060).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (\u0060newOwner\u0060).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \u0022Ownable: new owner is the zero address\u0022);\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/utils/ReentrancyGuard.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from \u0060ReentrancyGuard\u0060 will make the \u0060nonReentrant\u0060 modifier\r\n * available, which can be aplied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single \u0060nonReentrant\u0060 guard, functions marked as\r\n * \u0060nonReentrant\u0060 may not call one another. This can be worked around by making\r\n * those functions \u0060private\u0060, and then adding \u0060external\u0060 \u0060nonReentrant\u0060 entry\r\n * points to them.\r\n */\r\ncontract ReentrancyGuard {\r\n    /// @dev counter to allow mutex lock with only one SSTORE operation\r\n    uint256 private _guardCounter;\r\n\r\n    constructor () internal {\r\n        // The counter starts at one to prevent changing it from zero to a non-zero\r\n        // value, which is a more expensive operation.\r\n        _guardCounter = 1;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a \u0060nonReentrant\u0060 function from another \u0060nonReentrant\u0060\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the \u0060nonReentrant\u0060 function external, and make it call a\r\n     * \u0060private\u0060 function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _guardCounter \u002B= 1;\r\n        uint256 localCounter = _guardCounter;\r\n        _;\r\n        require(localCounter == _guardCounter, \u0022ReentrancyGuard: reentrant call\u0022);\r\n    }\r\n}\r\n\r\n// File: contracts/ERC721/el/BoosterPack.sol\r\n\r\npragma solidity 0.5.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract BoosterPack is IBoosterPack, Ownable, ReentrancyGuard {\r\n\r\n  // Address where funds are collected\r\n  address public payee;\r\n\r\n  // Address where elementeum funds are payed to users from\r\n  address public funder;\r\n\r\n  // Address that is permitted to call destroyContract\r\n  address public permittedDestroyer;\r\n\r\n  // ETH price per card\r\n  uint256 public pricePerCard = 50 finney;\r\n\r\n  uint256[] public cardTypeIds;\r\n  uint16 private totalWeight;\r\n  mapping (uint16 =\u003E uint256) private rollToCard;\r\n  mapping (uint256 =\u003E uint256) private cardToElementeumReturned;\r\n  bytes32 private lastHash;\r\n\r\n  IEtherLegendsToken public etherLegendsToken;\r\n  IERC20 public elementeumToken;\r\n\r\n  constructor(address payeeWallet, address funderWallet) public \r\n    Ownable() \r\n    ReentrancyGuard() {\r\n    payee = payeeWallet;\r\n    funder = funderWallet;\r\n    lastHash = keccak256(abi.encodePacked(block.number));\r\n  }\r\n\r\n  /**\r\n   * @dev fallback function ***DO NOT OVERRIDE***\r\n   */\r\n  function () external payable {\r\n    purchaseCards(msg.sender);\r\n  }\r\n\r\n  function destroyContract() external {\r\n    require(msg.sender == permittedDestroyer, \u0022caller is not the permitted destroyer - should be address of BoosterPackFactory\u0022);\r\n    address payable payableOwner = address(uint160(owner()));\r\n    selfdestruct(payableOwner);\r\n  }\r\n\r\n  function setEtherLegendsToken(address addr) external {\r\n    _requireOnlyOwner();\r\n    etherLegendsToken = IEtherLegendsToken(addr);\r\n  }  \r\n\r\n  function setElementeumERC20ContractAddress(address addr) external {\r\n    _requireOnlyOwner();\r\n    elementeumToken = IERC20(addr);\r\n  }    \r\n\r\n  function setPricePerCard(uint256 price) public {\r\n    _requireOnlyOwner();\r\n    pricePerCard = price;\r\n  }\r\n\r\n  function permitDestruction(address addr) external {\r\n    _requireOnlyOwner();\r\n    require(addr != address(0));\r\n    permittedDestroyer = addr;\r\n  }\r\n\r\n  function setDropWeights(uint256[] calldata tokenTypeIds, uint8[] calldata weights, uint256[] calldata elementeumsReturned) external {\r\n    _requireOnlyOwner();\r\n    require(\r\n      tokenTypeIds.length \u003E 0 \u0026\u0026 \r\n      tokenTypeIds.length == weights.length \u0026\u0026 \r\n      tokenTypeIds.length == elementeumsReturned.length, \r\n      \u0022array lengths are not the same\u0022);\r\n\r\n    for(uint256 i = 0; i \u003C tokenTypeIds.length; i\u002B\u002B) {\r\n      setDropWeight(tokenTypeIds[i], weights[i], elementeumsReturned[i]);\r\n    }    \r\n  }\r\n\r\n  function setDropWeight(uint256 tokenTypeId, uint8 weight, uint256 elementeumReturned) public {\r\n    _requireOnlyOwner();    \r\n    require(etherLegendsToken.hasTokenDefinition(tokenTypeId), \u0022card is not defined\u0022);\r\n    totalWeight \u002B= weight;\r\n    for(uint16 i = totalWeight - weight; i \u003C totalWeight; i\u002B\u002B) {\r\n      rollToCard[i] = tokenTypeId;\r\n    }\r\n    cardToElementeumReturned[tokenTypeId] = elementeumReturned;\r\n    cardTypeIds.push(tokenTypeId);\r\n  }\r\n\r\n  function getNumberOfCards() external view returns (uint256) {\r\n    return cardTypeIds.length;\r\n  }\r\n\r\n  function getCardTypeIdAtIndex(uint256 index) external view returns (uint256) {\r\n    require(index \u003C cardTypeIds.length, \u0022Index Out Of Range\u0022);\r\n    return cardTypeIds[index];\r\n  }\r\n\r\n  function getPricePerCard() external view returns (uint256) {\r\n    return pricePerCard;\r\n  }\r\n\r\n  function getCardTypeIds() external view returns (uint256[] memory) {\r\n    return cardTypeIds;\r\n  }  \r\n\r\n  function purchaseCards(address beneficiary) public payable nonReentrant {\r\n    require(msg.sender == tx.origin, \u0022caller must be transaction origin (only human)\u0022);    \r\n    require(msg.value \u003E= pricePerCard, \u0022purchase price not met\u0022);\r\n    require(pricePerCard \u003E 0, \u0022price per card must be greater than 0\u0022);\r\n    require(totalWeight \u003E 0, \u0022total weight must be greater than 0\u0022);\r\n\r\n    uint256 numberOfCards = _min(msg.value / pricePerCard, (gasleft() - 100000) / 200000);\r\n    uint256 totalElementeumToReturn = 0;\r\n    bytes32 tempLastHash =  lastHash;    \r\n    for(uint256 i = 0; i \u003C numberOfCards; i\u002B\u002B) {\r\n        tempLastHash = keccak256(abi.encodePacked(block.number, tempLastHash, msg.sender, gasleft()));\r\n        uint16 randNumber = uint16(uint256(tempLastHash) % (totalWeight));        \r\n        uint256 cardType = rollToCard[randNumber];\r\n\r\n        etherLegendsToken.mintTokenOfType(beneficiary, cardType);        \r\n        totalElementeumToReturn \u002B= cardToElementeumReturned[cardType];                \r\n    }\r\n\r\n    lastHash = tempLastHash; // Save in the blockchain for next tx\r\n    \r\n    if(totalElementeumToReturn \u003E 0) {\r\n      uint256 elementeumThatCanBeReturned = _min(totalElementeumToReturn, _min(elementeumToken.allowance(funder, address(this)), elementeumToken.balanceOf(funder)));\r\n      if(elementeumThatCanBeReturned \u003E 0) {\r\n        elementeumToken.transferFrom(funder, beneficiary, elementeumThatCanBeReturned);      \r\n      }            \r\n    }\r\n\r\n    uint256 change = msg.value - (pricePerCard * numberOfCards); //This amount to be refunded as it was unused\r\n    address payable payableWallet = address(uint160(payee));\r\n    payableWallet.transfer(pricePerCard  * numberOfCards);\r\n    if(change \u003E 0) {\r\n      msg.sender.transfer(change);\r\n    }\r\n  }\r\n\r\n  function _min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    return a \u003C b ? a : b;\r\n  }  \r\n\r\n  function _requireOnlyOwner() internal view {\r\n    require(isOwner(), \u0022Ownable: caller is not the owner\u0022);\r\n  }\r\n}\r\n\r\n// File: contracts/ERC721/el/IBoosterPackFactory.sol\r\n\r\npragma solidity 0.5.0;\r\n\r\ninterface IBoosterPackFactory {        \r\n    function getNumberOfBoosterPacks() external view returns (uint256);\r\n    function getBoosterPackAddressAtIndex(uint256 index) external view returns (address);\r\n    function getBoosterPackNameAtIndex(uint256 index) external view returns (string memory);\r\n    function getBoosterPackContractAddresses() external view returns (address[] memory);\r\n    function getAddressOfBoosterPack(string calldata packName) external view returns (address);\r\n}\r\n\r\n// File: contracts/ERC721/el/BoosterPackFactory.sol\r\n\r\npragma solidity 0.5.0;\r\n\r\n\r\n\r\n\r\ncontract BoosterPackFactory is IBoosterPackFactory, Ownable {\r\n  \r\n  address[] public boosterPackContracts;\r\n  address public etherLegendsTokenAddress;\r\n  address public elementeumTokenAddress;\r\n\r\n  mapping (address =\u003E uint256) private boosterPackIndexMap;\r\n  mapping (string =\u003E address) private boosterPackNameToAddressLookup;    \r\n  mapping (address =\u003E string) private boosterPackAddressToNameLookup;      \r\n\r\n  constructor() public \r\n    Ownable()\r\n  {\r\n\r\n  }    \r\n\r\n  function() external payable {\r\n    revert(\u0022Use of the fallback function is not permitted.\u0022);\r\n  }\r\n\r\n  function destroyContract() external {\r\n    _requireOnlyOwner();\r\n    require(boosterPackContracts.length == 0, \u0022Cannot destroy the factory until all booster packs have been destroyed using destroyBoosterPack function.\u0022);\r\n    address payable payableOwner = address(uint160(owner()));\r\n    selfdestruct(payableOwner);\r\n  }\r\n\r\n  function createBoosterPack(uint256 pricePerCard, string calldata packName, address payeeWallet, address funderWallet) external {\r\n    _requireOnlyOwner();\r\n    require(bytes(packName).length \u003C 32, \u0022pack name may not exceed 31 characters\u0022);\r\n    BoosterPack pack = new BoosterPack(payeeWallet, funderWallet);\r\n    address packAddress = address(pack);    \r\n    boosterPackIndexMap[packAddress] = boosterPackContracts.length;\r\n    boosterPackNameToAddressLookup[packName] = packAddress;\r\n    boosterPackAddressToNameLookup[packAddress] = packName;\r\n    boosterPackContracts.push(packAddress);\r\n    pack.setEtherLegendsToken(etherLegendsTokenAddress);\r\n    pack.setElementeumERC20ContractAddress(elementeumTokenAddress);\r\n    pack.setPricePerCard(pricePerCard);\r\n    pack.permitDestruction(address(this));\r\n    pack.transferOwnership(msg.sender);\r\n  } \r\n\r\n  function destroyBoosterPack(address payable packAddress) public {\r\n    _requireOnlyOwner();\r\n    require(packAddress != address(0));\r\n\r\n    uint256 indexOfBoosterPack = boosterPackIndexMap[packAddress];\r\n    \r\n    string memory packName = getNameOfBoosterPack(packAddress);\r\n    bytes memory tempEmptyStringTest = bytes(packName);\r\n    require(tempEmptyStringTest.length != 0, \u0022Attempted to destroy a booster pack that does not exist.\u0022);\r\n    \r\n    BoosterPack pack = BoosterPack(packAddress);\r\n    pack.destroyContract();\r\n\r\n    address priorLastPackAddress = boosterPackContracts[boosterPackContracts.length - 1];\r\n    boosterPackContracts[indexOfBoosterPack] = boosterPackContracts[boosterPackContracts.length - 1];\r\n    boosterPackIndexMap[priorLastPackAddress] = indexOfBoosterPack;\r\n    delete boosterPackContracts[boosterPackContracts.length - 1];\r\n    boosterPackContracts.length--;\r\n    boosterPackNameToAddressLookup[packName] = address(0);\r\n    boosterPackAddressToNameLookup[packAddress] = \u0022\u0022;        \r\n    delete boosterPackIndexMap[packAddress];\r\n  }\r\n\r\n  function getNumberOfBoosterPacks() external view returns (uint256) {\r\n    return boosterPackContracts.length;\r\n  }\r\n\r\n  function getBoosterPackAddressAtIndex(uint256 index) external view returns (address) {\r\n    require(index \u003C boosterPackContracts.length, \u0022Index Out Of Range\u0022);\r\n    return boosterPackContracts[index];\r\n  }\r\n\r\n  function getBoosterPackNameAtIndex(uint256 index) external view returns (string memory) {\r\n    require(index \u003C boosterPackContracts.length, \u0022Index Out Of Range\u0022);\r\n    return boosterPackAddressToNameLookup[boosterPackContracts[index]];\r\n  }\r\n    \r\n  function getBoosterPackContractAddresses() external view returns (address[] memory) {\r\n    return boosterPackContracts;\r\n  }  \r\n\r\n  function getAddressOfBoosterPack(string calldata packName) external view returns (address) {\r\n    return boosterPackNameToAddressLookup[packName];\r\n  }\r\n\r\n  function getNameOfBoosterPack(address packAddress) public view returns (string memory) {\r\n    return boosterPackAddressToNameLookup[packAddress];\r\n  }\r\n\r\n  function setEtherLegendsToken(address addr) external {\r\n    _requireOnlyOwner();\r\n    etherLegendsTokenAddress = addr;\r\n  }    \r\n\r\n  function setElementeumERC20ContractAddress(address addr) external {\r\n    _requireOnlyOwner();\r\n    elementeumTokenAddress = addr;\r\n  }    \r\n\r\n  function _requireOnlyOwner() internal view {\r\n    require(isOwner(), \u0022Ownable: caller is not the owner\u0022);\r\n  }\r\n}","ABI":"[{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022destroyContract\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022packAddress\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022getNameOfBoosterPack\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022packAddress\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022destroyBoosterPack\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022getNumberOfBoosterPacks\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022getBoosterPackContractAddresses\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address[]\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022renounceOwnership\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022owner\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022isOwner\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022boosterPackContracts\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022pricePerCard\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022packName\u0022,\u0022type\u0022:\u0022string\u0022},{\u0022name\u0022:\u0022payeeWallet\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022funderWallet\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022createBoosterPack\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022index\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022getBoosterPackAddressAtIndex\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022elementeumTokenAddress\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022etherLegendsTokenAddress\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022addr\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022setElementeumERC20ContractAddress\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022packName\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022name\u0022:\u0022getAddressOfBoosterPack\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022addr\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022setEtherLegendsToken\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022index\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022getBoosterPackNameAtIndex\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022transferOwnership\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022constructor\u0022},{\u0022payable\u0022:true,\u0022stateMutability\u0022:\u0022payable\u0022,\u0022type\u0022:\u0022fallback\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022previousOwner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022OwnershipTransferred\u0022,\u0022type\u0022:\u0022event\u0022}]","ContractName":"BoosterPackFactory","CompilerVersion":"v0.5.0\u002Bcommit.1d4f565a","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://9ec6f7608e7b3dcd9c9c88affa9f2d00cd56902c6241e8396de60b770b1b5afb"}]