[{"SourceCode":"pragma solidity ^0.4.19;\r\n\r\n/* Interface for ERC20 Tokens */\r\ncontract Token {\r\n    bytes32 public standard;\r\n    bytes32 public name;\r\n    bytes32 public symbol;\r\n    uint256 public totalSupply;\r\n    uint8 public decimals;\r\n    bool public allowTransactions;\r\n    mapping (address =\u003E uint256) public balanceOf;\r\n    mapping (address =\u003E mapping (address =\u003E uint256)) public allowance;\r\n    function transfer(address _to, uint256 _value) returns (bool success);\r\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success);\r\n    function approve(address _spender, uint256 _value) returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\r\n}\r\n\r\n/* Interface for pTokens contract */\r\ncontract pToken {\r\n    function redeem(uint256 _value, string memory _btcAddress) public returns (bool _success);\r\n}\r\n\r\n// The DMEX base Contract\r\ncontract DMEX_Base {\r\n    function assert(bool assertion) {\r\n        if (!assertion) throw;\r\n    }\r\n\r\n    // Safe Multiply Function - prevents integer overflow \r\n    function safeMul(uint a, uint b) returns (uint) {\r\n        uint c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    // Safe Subtraction Function - prevents integer overflow \r\n    function safeSub(uint a, uint b) returns (uint) {\r\n        assert(b \u003C= a);\r\n        return a - b;\r\n    }\r\n\r\n    // Safe Addition Function - prevents integer overflow \r\n    function safeAdd(uint a, uint b) returns (uint) {\r\n        uint c = a \u002B b;\r\n        assert(c\u003E=a \u0026\u0026 c\u003E=b);\r\n        return c;\r\n    }\r\n\r\n    address public owner; // holds the address of the contract owner\r\n    mapping (address =\u003E bool) public admins; // mapping of admin addresses\r\n    mapping (address =\u003E bool) public futuresContracts; // mapping of connected futures contracts\r\n    event SetFuturesContract(address futuresContract, bool isFuturesContract);\r\n\r\n    // Event fired when the owner of the contract is changed\r\n    event SetOwner(address indexed previousOwner, address indexed newOwner);\r\n\r\n    // Allows only the owner of the contract to execute the function\r\n    modifier onlyOwner {\r\n        assert(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    // Changes the owner of the contract\r\n    function setOwner(address newOwner) onlyOwner {\r\n        SetOwner(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n    // Owner getter function\r\n    function getOwner() returns (address out) {\r\n        return owner;\r\n    }\r\n\r\n    // Adds or disables an admin account\r\n    function setAdmin(address admin, bool isAdmin) onlyOwner {\r\n        admins[admin] = isAdmin;\r\n    }\r\n\r\n\r\n    // Adds or disables a futuresContract address\r\n    function setFuturesContract(address futuresContract, bool isFuturesContract) onlyOwner {\r\n        if (fistFuturesContract == address(0))\r\n        {\r\n            fistFuturesContract = futuresContract;            \r\n        }\r\n        else\r\n        {\r\n            revert();\r\n        }\r\n\r\n        futuresContracts[futuresContract] = isFuturesContract;\r\n\r\n        emit SetFuturesContract(futuresContract, isFuturesContract);\r\n    }\r\n\r\n    // Allows for admins only to call the function\r\n    modifier onlyAdmin {\r\n        if (msg.sender != owner \u0026\u0026 !admins[msg.sender]) throw;\r\n        _;\r\n    }\r\n\r\n    // Allows for futures contracts only to call the function\r\n    modifier onlyFuturesContract {\r\n        if (!futuresContracts[msg.sender]) throw;\r\n        _;\r\n    }\r\n\r\n    function() external {\r\n        throw;\r\n    }\r\n\r\n    mapping (address =\u003E mapping (address =\u003E uint256)) public balances; // mapping of token addresses to mapping of balances and reserve (bitwise compressed) // balances[token][user]\r\n\r\n    mapping (address =\u003E uint256) public userFirstDeposits; // mapping of user addresses and block number of first deposit\r\n\r\n    address public gasFeeAccount; // the account that receives the trading fees\r\n    address public fistFuturesContract; // 0x if there are no futures contracts set yet\r\n\r\n    uint256 public inactivityReleasePeriod; // period in blocks before a user can use the withdraw() function\r\n    mapping (bytes32 =\u003E bool) public withdrawn; // mapping of withdraw requests, makes sure the same withdrawal is not executed twice\r\n\r\n    bool public destroyed = false; // contract is destoryed\r\n    uint256 public destroyDelay = 1000000; // number of blocks after destroy contract still active (aprox 6 monthds)\r\n    uint256 public destroyBlock;\r\n\r\n    // Deposit event fired when a deposit takes place\r\n    event Deposit(address indexed token, address indexed user, uint256 amount, uint256 balance);\r\n\r\n    // Withdraw event fired when a withdrawal id executed\r\n    event Withdraw(address indexed token, address indexed user, uint256 amount, uint256 balance, uint256 withdrawFee);\r\n    \r\n    // pTokenRedeemEvent event fired when a pToken withdrawal is executed\r\n    event pTokenRedeemEvent(address indexed token, address indexed user, uint256 amount, string destinationAddress);\r\n\r\n    // Allow futuresContract \r\n    event AllowFuturesContract(address futuresContract, address user);\r\n\r\n    // Change inactivity release period event\r\n    event InactivityReleasePeriodChange(uint256 value);\r\n\r\n    // Sets the inactivity period before a user can withdraw funds manually\r\n    function setInactivityReleasePeriod(uint256 expiry) onlyOwner returns (bool success) {\r\n        if (expiry \u003E 1000000) throw;\r\n        inactivityReleasePeriod = expiry;\r\n\r\n        emit InactivityReleasePeriodChange(expiry);\r\n        return true;\r\n    }\r\n\r\n    // Constructor function, initializes the contract and sets the core variables\r\n    function DMEX_Base(address feeAccount_, uint256 inactivityReleasePeriod_) {\r\n        owner = msg.sender;\r\n        gasFeeAccount = feeAccount_;\r\n        inactivityReleasePeriod = inactivityReleasePeriod_;\r\n    }\r\n\r\n    // Sets the inactivity period before a user can withdraw funds manually\r\n    function destroyContract() onlyOwner returns (bool success) {\r\n        if (destroyed) throw;\r\n        destroyBlock = block.number;\r\n\r\n        return true;\r\n    }\r\n\r\n    function updateBalanceAndReserve (address token, address user, uint256 balance, uint256 reserve) private\r\n    {\r\n        uint256 character = uint256(balance);\r\n        character |= reserve\u003C\u003C128;\r\n\r\n        balances[token][user] = character;\r\n    }\r\n\r\n    function updateBalance (address token, address user, uint256 balance) private returns (bool)\r\n    {\r\n        uint256 character = uint256(balance);\r\n        character |= getReserve(token, user)\u003C\u003C128;\r\n\r\n        balances[token][user] = character;\r\n        return true;\r\n    }\r\n\r\n    function updateReserve (address token, address user, uint256 reserve) private\r\n    {\r\n        uint256 character = uint256(balanceOf(token, user));\r\n        character |= reserve\u003C\u003C128;\r\n\r\n        balances[token][user] = character;\r\n    }\r\n\r\n    function decodeBalanceAndReserve (address token, address user) returns (uint256[2])\r\n    {\r\n        uint256 character = balances[token][user];\r\n        uint256 balance = uint256(uint128(character));\r\n        uint256 reserve = uint256(uint128(character\u003E\u003E128));\r\n\r\n        return [balance, reserve];\r\n    }\r\n\r\n\r\n    // Returns the balance of a specific token for a specific user\r\n    function balanceOf(address token, address user) view returns (uint256) {\r\n        //return tokens[token][user];\r\n        return decodeBalanceAndReserve(token, user)[0];\r\n    }\r\n\r\n    // Returns the reserved amound of token for user\r\n    function getReserve(address token, address user) public view returns (uint256) { \r\n        //return reserve[token][user];  \r\n        return decodeBalanceAndReserve(token, user)[1];\r\n    }\r\n\r\n    // Sets reserved amount for specific token and user (can only be called by futures contract)\r\n    function setReserve(address token, address user, uint256 amount) onlyFuturesContract returns (bool success) { \r\n        updateReserve(token, user, amount);\r\n        return true; \r\n    }\r\n\r\n    function setBalance(address token, address user, uint256 amount) onlyFuturesContract returns (bool success)     {\r\n        updateBalance(token, user, amount);\r\n        return true;\r\n        \r\n    }\r\n\r\n    function subBalanceAddReserve(address token, address user, uint256 subBalance, uint256 addReserve) onlyFuturesContract returns (bool)\r\n    {\r\n        if (balanceOf(token, user) \u003C subBalance) return false;\r\n        updateBalanceAndReserve(token, user, safeSub(balanceOf(token, user), subBalance), safeAdd(getReserve(token, user), addReserve));\r\n        return true;\r\n    }\r\n\r\n    function addBalanceSubReserve(address token, address user, uint256 addBalance, uint256 subReserve) onlyFuturesContract returns (bool)\r\n    {\r\n        if (getReserve(token, user) \u003C subReserve) return false;\r\n        updateBalanceAndReserve(token, user, safeAdd(balanceOf(token, user), addBalance), safeSub(getReserve(token, user), subReserve));\r\n        return true;\r\n    }\r\n\r\n    function addBalanceAddReserve(address token, address user, uint256 addBalance, uint256 addReserve) onlyFuturesContract returns (bool)\r\n    {\r\n        updateBalanceAndReserve(token, user, safeAdd(balanceOf(token, user), addBalance), safeAdd(getReserve(token, user), addReserve));\r\n    }\r\n\r\n    function subBalanceSubReserve(address token, address user, uint256 subBalance, uint256 subReserve) onlyFuturesContract returns (bool)\r\n    {\r\n        if (balanceOf(token, user) \u003C subBalance || getReserve(token, user) \u003C subReserve) return false;\r\n        updateBalanceAndReserve(token, user, safeSub(balanceOf(token, user), subBalance), safeSub(getReserve(token, user), subReserve));\r\n        return true;\r\n    }\r\n\r\n    // Returns the available balance of a specific token for a specific user\r\n    function availableBalanceOf(address token, address user) view returns (uint256) {\r\n        return safeSub(balanceOf(token, user), getReserve(token, user));\r\n    }\r\n\r\n    // Increases the user balance\r\n    function addBalance(address token, address user, uint256 amount) private\r\n    {\r\n        updateBalance(token, user, safeAdd(balanceOf(token, user), amount));\r\n    }\r\n\r\n    // Decreases user balance\r\n    function subBalance(address token, address user, uint256 amount) private\r\n    {\r\n        if (availableBalanceOf(token, user) \u003C amount) throw; \r\n        updateBalance(token, user, safeSub(balanceOf(token, user), amount));\r\n    }\r\n\r\n\r\n\r\n    // Returns the inactivity release perios\r\n    function getInactivityReleasePeriod() view returns (uint256)\r\n    {\r\n        return inactivityReleasePeriod;\r\n    }\r\n\r\n\r\n    // Deposit ETH to contract\r\n    function deposit() payable {\r\n        if (destroyed) revert();\r\n        \r\n        addBalance(address(0), msg.sender, msg.value); // adds the deposited amount to user balance\r\n        if (userFirstDeposits[msg.sender] == 0) userFirstDeposits[msg.sender] = block.number;\r\n        emit Deposit(address(0), msg.sender, msg.value, balanceOf(address(0), msg.sender)); // fires the deposit event\r\n    }\r\n\r\n    // Deposit ETH to contract for a user\r\n    function depositForUser(address user) payable {\r\n        if (destroyed) revert();\r\n        addBalance(address(0), user, msg.value); // adds the deposited amount to user balance\r\n        emit Deposit(address(0), user, msg.value, balanceOf(address(0), user)); // fires the deposit event\r\n    }\r\n\r\n    // Deposit token to contract\r\n    function depositToken(address token, uint128 amount) {\r\n        if (destroyed) revert();\r\n        \r\n        addBalance(token, msg.sender, amount); // adds the deposited amount to user balance\r\n\r\n        if (!Token(token).transferFrom(msg.sender, this, amount)) throw; // attempts to transfer the token to this contract, if fails throws an error\r\n        emit Deposit(token, msg.sender, amount, balanceOf(token, msg.sender)); // fires the deposit event\r\n    }\r\n\r\n    // Deposit token to contract for a user\r\n    function depositTokenForUser(address token, uint128 amount, address user) {        \r\n        addBalance(token, user, amount); // adds the deposited amount to user balance\r\n\r\n        if (!Token(token).transferFrom(msg.sender, this, amount)) throw; // attempts to transfer the token to this contract, if fails throws an error\r\n        emit Deposit(token, user, amount, balanceOf(token, user)); // fires the deposit event\r\n    }\r\n\r\n    // Deposit token to contract for a user anc charge a deposit fee\r\n    function depositTokenForUserWithFee(address token, uint128 amount, address user, uint256 depositFee) {        \r\n        if (safeMul(depositFee, 1e18) / amount \u003E 1e17) revert(); // deposit fee is more than 10% of the deposit amount\r\n        addBalance(token, user, safeSub(amount, depositFee)); // adds the deposited amount to user balance\r\n        \r\n        addBalance(token, gasFeeAccount, depositFee); // adds the deposit fee to the gasFeeAccount\r\n        \r\n        if (!Token(token).transferFrom(msg.sender, this, amount)) revert(); // attempts to transfer the token to this contract, if fails throws an error\r\n        \r\n        emit Deposit(token, user, safeSub(amount, depositFee), balanceOf(token, user)); // fires the deposit event\r\n    }\r\n\r\n    function withdraw(address token, uint256 amount) returns (bool success) {\r\n        \r\n        if (availableBalanceOf(token, msg.sender) \u003C amount) throw;\r\n\r\n        subBalance(token, msg.sender, amount); // subtracts the withdrawed amount from user balance\r\n\r\n        if (token == address(0)) { // checks if withdrawal is a token or ETH, ETH has address 0x00000... \r\n            if (!msg.sender.send(amount)) throw; // send ETH\r\n        } else {\r\n            if (!Token(token).transfer(msg.sender, amount)) throw; // Send token\r\n        }\r\n        emit Withdraw(token, msg.sender, amount, balanceOf(token, msg.sender), 0); // fires the Withdraw event\r\n    }\r\n\r\n    function pTokenRedeem(address token, uint256 amount, string destinationAddress) returns (bool success) {\r\n        \r\n        if (availableBalanceOf(token, msg.sender) \u003C amount) revert();\r\n\r\n        subBalance(token, msg.sender, amount); // subtracts the withdrawal amount from user balance\r\n\r\n        if (!pToken(token).redeem(amount, destinationAddress)) revert();\r\n        emit pTokenRedeemEvent(token, msg.sender, amount, destinationAddress);\r\n    }\r\n\r\n    function releaseFundsAfterDestroy(address token, uint256 amount) onlyOwner returns (bool success) {\r\n        if (!destroyed) throw;\r\n        if (safeAdd(destroyBlock, destroyDelay) \u003E block.number) throw; // destroy delay not yet passed\r\n\r\n        if (token == address(0)) { // checks if withdrawal is a token or ETH, ETH has address 0x00000... \r\n            if (!msg.sender.send(amount)) throw; // send ETH\r\n        } else {\r\n            if (!Token(token).transfer(msg.sender, amount)) throw; // Send token\r\n        }\r\n    }\r\n \r\n\r\n    // Withdrawal function used by the server to execute withdrawals\r\n    function withdrawForUser(\r\n        address token, // the address of the token to be withdrawn\r\n        uint256 amount, // the amount to be withdrawn\r\n        address user, // address of the user\r\n        uint256 nonce, // nonce to make the request unique\r\n        uint8 v, // part of user signature\r\n        bytes32 r, // part of user signature\r\n        bytes32 s, // part of user signature\r\n        uint256 feeWithdrawal // the transaction gas fee that will be deducted from the user balance\r\n    ) onlyAdmin returns (bool success) {\r\n        bytes32 hash = keccak256(this, token, amount, user, nonce, feeWithdrawal); // creates the hash for the withdrawal request\r\n        if (withdrawn[hash]) throw; // checks if the withdrawal was already executed, if true, throws an error\r\n        withdrawn[hash] = true; // sets the withdrawal as executed\r\n        if (ecrecover(keccak256(\u0022\\x19Ethereum Signed Message:\\n32\u0022, hash), v, r, s) != user) throw; // checks that the provided signature is valid\r\n        \r\n        if (availableBalanceOf(token, user) \u003C amount) throw; // checks that user has enough balance\r\n\r\n        subBalance(token, user, amount); // subtracts the withdrawal amount from the user balance\r\n\r\n        addBalance(token, gasFeeAccount, feeWithdrawal); // moves the gas fee to the feeAccount\r\n\r\n        if (token == address(0)) { // checks if the withdrawal is in ETH or Tokens\r\n            if (!user.send(safeSub(amount, feeWithdrawal))) throw; // sends ETH\r\n        } else {\r\n            if (!Token(token).transfer(user, safeSub(amount, feeWithdrawal))) throw; // sends tokens\r\n        }\r\n        emit Withdraw(token, user, amount, balanceOf(token, user), feeWithdrawal); // fires the withdraw event\r\n    }\r\n\r\n    function batchWithdrawForUser(\r\n        address[] token, // the address of the token to be withdrawn\r\n        uint256[] amount, // the amount to be withdrawn\r\n        address[] user, // address of the user\r\n        uint256[] nonce, // nonce to make the request unique\r\n        uint8[] v, // part of user signature\r\n        bytes32[] r, // part of user signature\r\n        bytes32[] s, // part of user signature\r\n        uint256[] feeWithdrawal // the transaction gas fee that will be deducted from the user balance\r\n    ) onlyAdmin \r\n    {\r\n        for (uint i = 0; i \u003C amount.length; i\u002B\u002B) {\r\n            withdrawForUser(\r\n                token[i],\r\n                amount[i],\r\n                user[i],\r\n                nonce[i],\r\n                v[i],\r\n                r[i],\r\n                s[i],\r\n                feeWithdrawal[i]\r\n            );\r\n        }\r\n    } \r\n\r\n    // Withdrawal function used by the server to execute withdrawals\r\n    function pTokenRedeemForUser(\r\n        address token, // the address of the token to be withdrawn\r\n        uint256 amount, // the amount to be withdrawn\r\n        address user, // address of the user\r\n        string destinationAddress, // the destination address of the user (BTC address for pBTC)\r\n        uint256 nonce, // nonce to make the request unique\r\n        uint8 v, // part of user signature\r\n        bytes32 r, // part of user signature\r\n        bytes32 s, // part of user signature\r\n        uint256 feeWithdrawal // the transaction gas fee that will be deducted from the user balance\r\n    ) onlyAdmin returns (bool success) {\r\n        bytes32 hash = keccak256(this, token, amount, user, nonce, destinationAddress, feeWithdrawal); // creates the hash for the withdrawal request\r\n        if (withdrawn[hash]) throw; // checks if the withdrawal was already executed, if true, throws an error\r\n        withdrawn[hash] = true; // sets the withdrawal as executed\r\n        if (ecrecover(keccak256(\u0022\\x19Ethereum Signed Message:\\n32\u0022, hash), v, r, s) != user) throw; // checks that the provided signature is valid\r\n        \r\n        if (availableBalanceOf(token, user) \u003C amount) throw; // checks that user has enough balance\r\n\r\n        subBalance(token, user, amount); // subtracts the withdrawal amount from the user balance\r\n\r\n        addBalance(token, gasFeeAccount, feeWithdrawal); // moves the gas fee to the feeAccount\r\n\r\n        if (!pToken(token).redeem(amount, destinationAddress)) revert();\r\n\r\n        emit pTokenRedeemEvent(token, user, amount, destinationAddress);\r\n    }\r\n    \r\n\r\n    function getMakerTakerBalances(address token, address maker, address taker) view returns (uint256[4])\r\n    {\r\n        return [\r\n            balanceOf(token, maker),\r\n            balanceOf(token, taker),\r\n            getReserve(token, maker),\r\n            getReserve(token, taker)\r\n        ];\r\n    }\r\n\r\n    function getUserBalances(address token, address user) view returns (uint256[2])\r\n    {\r\n        return [\r\n            balanceOf(token, user),\r\n            getReserve(token, user)\r\n        ];\r\n    }\r\n}","ABI":"[{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022futuresContracts\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022assertion\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022name\u0022:\u0022assert\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022token\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint128\u0022},{\u0022name\u0022:\u0022user\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022depositTokenForUser\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022destroyContract\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022success\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022setOwner\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022destroyBlock\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022gasFeeAccount\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022token\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022user\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022subBalance\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022addReserve\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022subBalanceAddReserve\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022futuresContract\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022isFuturesContract\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022name\u0022:\u0022setFuturesContract\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022token\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022user\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022availableBalanceOf\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022destroyed\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022withdrawn\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022token\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022user\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022setReserve\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022success\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022token\u0022,\u0022type\u0022:\u0022address[]\u0022},{\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256[]\u0022},{\u0022name\u0022:\u0022user\u0022,\u0022type\u0022:\u0022address[]\u0022},{\u0022name\u0022:\u0022nonce\u0022,\u0022type\u0022:\u0022uint256[]\u0022},{\u0022name\u0022:\u0022v\u0022,\u0022type\u0022:\u0022uint8[]\u0022},{\u0022name\u0022:\u0022r\u0022,\u0022type\u0022:\u0022bytes32[]\u0022},{\u0022name\u0022:\u0022s\u0022,\u0022type\u0022:\u0022bytes32[]\u0022},{\u0022name\u0022:\u0022feeWithdrawal\u0022,\u0022type\u0022:\u0022uint256[]\u0022}],\u0022name\u0022:\u0022batchWithdrawForUser\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022admins\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022admin\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022isAdmin\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022name\u0022:\u0022setAdmin\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022token\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022user\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022subBalance\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022subReserve\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022subBalanceSubReserve\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022token\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022user\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022addBalance\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022subReserve\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022addBalanceSubReserve\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022token\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022destinationAddress\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022name\u0022:\u0022pTokenRedeem\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022success\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022token\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint128\u0022},{\u0022name\u0022:\u0022user\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022depositFee\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022depositTokenForUserWithFee\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022user\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022depositForUser\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:true,\u0022stateMutability\u0022:\u0022payable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022getOwner\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022out\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022owner\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022token\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022maker\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022taker\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022getMakerTakerBalances\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256[4]\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022a\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022b\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022safeSub\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022getInactivityReleasePeriod\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022token\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022user\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022addBalance\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022addReserve\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022addBalanceAddReserve\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022userFirstDeposits\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022token\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint128\u0022}],\u0022name\u0022:\u0022depositToken\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022token\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022user\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022setBalance\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022success\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022balances\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022token\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022user\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022getUserBalances\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256[2]\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022token\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022releaseFundsAfterDestroy\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022success\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022token\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022user\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022getReserve\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022destroyDelay\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022token\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022user\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022decodeBalanceAndReserve\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256[2]\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022a\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022b\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022safeMul\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022deposit\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:true,\u0022stateMutability\u0022:\u0022payable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022token\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022user\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022destinationAddress\u0022,\u0022type\u0022:\u0022string\u0022},{\u0022name\u0022:\u0022nonce\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022v\u0022,\u0022type\u0022:\u0022uint8\u0022},{\u0022name\u0022:\u0022r\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022name\u0022:\u0022s\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022name\u0022:\u0022feeWithdrawal\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022pTokenRedeemForUser\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022success\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022token\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022user\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022nonce\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022v\u0022,\u0022type\u0022:\u0022uint8\u0022},{\u0022name\u0022:\u0022r\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022name\u0022:\u0022s\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022name\u0022:\u0022feeWithdrawal\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022withdrawForUser\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022success\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022expiry\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022setInactivityReleasePeriod\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022success\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022a\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022b\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022safeAdd\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022inactivityReleasePeriod\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022token\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022withdraw\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022success\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022token\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022user\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022balanceOf\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022fistFuturesContract\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[{\u0022name\u0022:\u0022feeAccount_\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022inactivityReleasePeriod_\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022constructor\u0022},{\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022fallback\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022futuresContract\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022isFuturesContract\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022name\u0022:\u0022SetFuturesContract\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022previousOwner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022SetOwner\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022token\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022user\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022balance\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022Deposit\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022token\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022user\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022balance\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022withdrawFee\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022Withdraw\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022token\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022user\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022destinationAddress\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022name\u0022:\u0022pTokenRedeemEvent\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022futuresContract\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022user\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022AllowFuturesContract\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022InactivityReleasePeriodChange\u0022,\u0022type\u0022:\u0022event\u0022}]","ContractName":"DMEX_Base","CompilerVersion":"v0.4.26\u002Bcommit.4563c3fc","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000095445852148540acb6fcb9e39856d15f1c41638100000000000000000000000000000000000000000000000000000000000001f4","Library":"","SwarmSource":"bzzr://82e86bab0e1b4a29fb7d7791db1dd8188147feae56cc53d8da43cdc222d81df5"}]