[{"SourceCode":"pragma solidity \u003E=0.5.0 \u003C0.6.0;\r\n/**\r\n * @title KyberNetworkProxy\r\n * @dev Mock of the KyberNetworkProxy. Only used in development\r\n */\r\ncontract KyberNetworkProxy {\r\n\r\n    constructor() public {\r\n    }\r\n\r\n    /**\r\n     * @dev Get a mocked up rate for the trade\r\n     */\r\n    function getExpectedRate(\r\n        address /* src */,\r\n        address /* dest */,\r\n        uint /* srcQty */\r\n        )\r\n        public pure\r\n        returns(uint expectedRate, uint slippageRate)\r\n    {\r\n        return (32749000000000000000, 31766530000000000000);\r\n    }\r\n\r\n    /// @notice use token address ETH_TOKEN_ADDRESS for ether\r\n    /// @dev makes a trade between src and dest token and send dest token to destAddress\r\n    /// @param maxDestAmount A limit on the amount of dest tokens\r\n    /// @return amount of actual dest tokens\r\n    function trade(\r\n        address /* src */,\r\n        uint /* srcAmount */,\r\n        address /* dest */,\r\n        address /* destAddress */,\r\n        uint  maxDestAmount,\r\n        uint /* minConversionRate */,\r\n        address /* walletId */\r\n    )\r\n        public\r\n        payable\r\n        returns(uint)\r\n    {\r\n      return maxDestAmount;\r\n    }\r\n\r\n    /// @dev makes a trade between src and dest token and send dest tokens to msg sender\r\n    /// @return amount of actual dest tokens\r\n    function swapTokenToToken(\r\n        address /* src */,\r\n        uint /* srcAmount */,\r\n        address /* dest */,\r\n        uint /* minConversionRate */\r\n    )\r\n        public pure\r\n        returns(uint)\r\n    {\r\n        return 100;\r\n    }\r\n\r\n    /// @dev makes a trade from Ether to token. Sends token to msg sender\r\n    /// @return amount of actual dest tokens\r\n    function swapEtherToToken(\r\n        address /* token */,\r\n        uint /* minConversionRate */\r\n    ) public payable returns(uint) {\r\n        return 200;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\ncontract SafeTransfer {\r\n    function _safeTransfer(ERC20Token _token, address _to, uint256 _value) internal returns (bool result) {\r\n        _token.transfer(_to, _value);\r\n        assembly {\r\n        switch returndatasize()\r\n            case 0 {\r\n            result := not(0)\r\n            }\r\n            case 32 {\r\n            returndatacopy(0, 0, 32)\r\n            result := mload(0)\r\n            }\r\n            default {\r\n            revert(0, 0)\r\n            }\r\n        }\r\n        require(result, \u0022Unsuccessful token transfer\u0022);\r\n    }\r\n\r\n    function _safeTransferFrom(\r\n        ERC20Token _token,\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    ) internal returns (bool result)\r\n    {\r\n        _token.transferFrom(_from, _to, _value);\r\n        assembly {\r\n        switch returndatasize()\r\n            case 0 {\r\n            result := not(0)\r\n            }\r\n            case 32 {\r\n            returndatacopy(0, 0, 32)\r\n            result := mload(0)\r\n            }\r\n            default {\r\n            revert(0, 0)\r\n            }\r\n        }\r\n        require(result, \u0022Unsuccessful token transfer\u0022);\r\n    }\r\n}/* solium-disable security/no-block-members */\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \u0022user permissions\u0022.\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original \u0060owner\u0060 of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Get the contract\u0027s owner\r\n     * @return the address of the owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \u0022Only the contract\u0027s owner can invoke this function\u0022);\r\n        _;\r\n    }\r\n\r\n     /**\r\n      * @dev Sets an owner address\r\n      * @param _newOwner new owner address\r\n      */\r\n    function _setOwner(address _newOwner) internal {\r\n        _owner = _newOwner;\r\n    }\r\n\r\n    /**\r\n     * @dev is sender the owner of the contract?\r\n     * @return true if \u0060msg.sender\u0060 is the owner of the contract.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to relinquish control of the contract.\r\n     *      Renouncing to ownership will leave the contract without an owner.\r\n     *      It will not be possible to call the functions with the \u0060onlyOwner\u0060\r\n     *      modifier anymore.\r\n     */\r\n    function renounceOwnership() external onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param _newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address _newOwner) external onlyOwner {\r\n        _transferOwnership(_newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param _newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address _newOwner) internal {\r\n        require(_newOwner != address(0), \u0022New owner cannot be address(0)\u0022);\r\n        emit OwnershipTransferred(_owner, _newOwner);\r\n        _owner = _newOwner;\r\n    }\r\n}\r\n\r\n\r\n// Abstract contract for the full ERC 20 Token standard\r\n// https://github.com/ethereum/EIPs/issues/20\r\n\r\ninterface ERC20Token {\r\n\r\n    /**\r\n     * @notice send \u0060_value\u0060 token to \u0060_to\u0060 from \u0060msg.sender\u0060\r\n     * @param _to The address of the recipient\r\n     * @param _value The amount of token to be transferred\r\n     * @return Whether the transfer was successful or not\r\n     */\r\n    function transfer(address _to, uint256 _value) external returns (bool success);\r\n\r\n    /**\r\n     * @notice \u0060msg.sender\u0060 approves \u0060_spender\u0060 to spend \u0060_value\u0060 tokens\r\n     * @param _spender The address of the account able to transfer the tokens\r\n     * @param _value The amount of tokens to be approved for transfer\r\n     * @return Whether the approval was successful or not\r\n     */\r\n    function approve(address _spender, uint256 _value) external returns (bool success);\r\n\r\n    /**\r\n     * @notice send \u0060_value\u0060 token to \u0060_to\u0060 from \u0060_from\u0060 on the condition it is approved by \u0060_from\u0060\r\n     * @param _from The address of the sender\r\n     * @param _to The address of the recipient\r\n     * @param _value The amount of token to be transferred\r\n     * @return Whether the transfer was successful or not\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\r\n\r\n    /**\r\n     * @param _owner The address from which the balance will be retrieved\r\n     * @return The balance\r\n     */\r\n    function balanceOf(address _owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @param _owner The address of the account owning tokens\r\n     * @param _spender The address of the account able to transfer the tokens\r\n     * @return Amount of remaining tokens allowed to spent\r\n     */\r\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\r\n\r\n    /**\r\n     * @notice return total supply of tokens\r\n     */\r\n    function totalSupply() external view returns (uint256 supply);\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title KyberFeeBurner\r\n * @dev Contract that holds assets for the purpose of trading them to SNT and burning them\r\n * @dev Assets come from the Escrow contract fees\r\n */\r\ncontract KyberFeeBurner is Ownable, SafeTransfer {\r\n\r\n    address public SNT;\r\n    address public burnAddress;\r\n    address public walletId;\r\n    KyberNetworkProxy public kyberNetworkProxy;\r\n    uint public maxSlippageRate;\r\n\r\n    // In Kyber\u0027s contracts, this is the address for ETH\r\n    address constant internal ETH_TOKEN_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n\r\n    /**\r\n     * @param _snt Address of the SNT contract\r\n     * @param _burnAddress Address where to burn the assets\r\n     * @param _kyberNetworkProxy License contract instance address for arbitrators\r\n     * @param _walletId Wallet address to send part of the fees to (used for the fee sharing program)\r\n     * @param _maxSlippageRate Max slippage rate to accept a trade\r\n     */\r\n    constructor(address _snt, address _burnAddress, address _kyberNetworkProxy, address _walletId, uint _maxSlippageRate) public {\r\n        SNT = _snt;\r\n        burnAddress = _burnAddress;\r\n        kyberNetworkProxy = KyberNetworkProxy(_kyberNetworkProxy);\r\n        walletId = _walletId;\r\n\r\n        setMaxSlippageRate(_maxSlippageRate);\r\n    }\r\n\r\n    event SNTAddressChanged(address sender, address prevSNTAddress, address newSNTAddress);\r\n\r\n    /**\r\n     * @dev Changes the SNT contract address\r\n     * @param _snt New SNT contract address\r\n     */\r\n    function setSNT(address _snt) external onlyOwner {\r\n        emit SNTAddressChanged(msg.sender, SNT, _snt);\r\n        SNT = _snt;\r\n    }\r\n\r\n    event BurnAddressChanged(address sender, address prevBurnAddress, address newBurnAddress);\r\n\r\n    /**\r\n     * @dev Changes the burn address\r\n     * @param _burnAddress New burn address\r\n     */\r\n    function setBurnAddress(address _burnAddress) external onlyOwner {\r\n        emit BurnAddressChanged(msg.sender, burnAddress, _burnAddress);\r\n        burnAddress = _burnAddress;\r\n    }\r\n\r\n    event KyberNetworkProxyAddressChanged(address sender, address prevKyberAddress, address newKyberAddress);\r\n\r\n    /**\r\n     * @dev Changes the KyberNetworkProxy contract address\r\n     * @param _kyberNetworkProxy New KyberNetworkProxy address\r\n     */\r\n    function setKyberNetworkProxyAddress(address _kyberNetworkProxy) external onlyOwner {\r\n        emit KyberNetworkProxyAddressChanged(msg.sender, address(kyberNetworkProxy), _kyberNetworkProxy);\r\n        kyberNetworkProxy = KyberNetworkProxy(_kyberNetworkProxy);\r\n    }\r\n\r\n    event WalletIdChanged(address sender, address prevWalletId, address newWalletId);\r\n\r\n    /**\r\n     * @dev Changes the walletId address (for the fee sharing program)\r\n     * @param _walletId New walletId address\r\n     */\r\n    function setWalletId(address _walletId) external onlyOwner {\r\n        emit WalletIdChanged(msg.sender, walletId, _walletId);\r\n        walletId = _walletId;\r\n    }\r\n\r\n    /**\r\n     * @dev Changes the current max slippage rate\r\n     * @param _newSlippageRate New slippage rate\r\n     */\r\n    function setMaxSlippageRate(uint _newSlippageRate) public onlyOwner {\r\n        require(_newSlippageRate \u003C= 10000, \u0022Invalid slippage rate\u0022);\r\n        emit SlippageRateChanged(msg.sender, maxSlippageRate, _newSlippageRate);\r\n        maxSlippageRate = _newSlippageRate;\r\n    }\r\n\r\n    event SlippageRateChanged(address sender, uint oldRate, uint newRate);\r\n\r\n    event Swap(address sender, address srcToken, address destToken, uint srcAmount, uint destAmount);\r\n\r\n\r\n    /**\r\n     * @dev Swaps the total balance of the selected asset to SNT and transfers it to the burn address\r\n     * @param _token Address of the asset to trade\r\n     */\r\n    function swap(address _token) public {\r\n        if (_token == address(0)) {\r\n            swap(_token, address(this).balance);\r\n        } else {\r\n            ERC20Token t = ERC20Token(_token);\r\n            swap(_token, t.balanceOf(address(this)));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Swaps the selected asset to SNT and transfers it to the burn address\r\n     * @param _token Address of the asset to trade\r\n     * @param _amount Amount to swap\r\n     */\r\n    function swap(address _token, uint _amount) public {\r\n        uint tokensToTradeRate;\r\n        uint ratePer1Token;\r\n        uint minAcceptedRate;\r\n\r\n        uint destAmount;\r\n\r\n        if (_token == address(0)) {\r\n            require(_amount \u003C= address(this).balance, \u0022Invalid amount\u0022);\r\n\r\n            (ratePer1Token,) = kyberNetworkProxy.getExpectedRate(ETH_TOKEN_ADDRESS, SNT, 1 ether);\r\n            (tokensToTradeRate,) = kyberNetworkProxy.getExpectedRate(ETH_TOKEN_ADDRESS, SNT, _amount);\r\n            minAcceptedRate = (ratePer1Token * (10000 - maxSlippageRate)) / 10000;\r\n            require(tokensToTradeRate \u003E= minAcceptedRate, \u0022Rate is not acceptable\u0022);\r\n\r\n            destAmount = kyberNetworkProxy.trade.value(_amount)(ETH_TOKEN_ADDRESS, _amount, SNT, burnAddress, 0 - uint256(1), tokensToTradeRate, walletId);\r\n            emit Swap(msg.sender, ETH_TOKEN_ADDRESS, SNT, _amount, destAmount);\r\n        } else {\r\n            ERC20Token t = ERC20Token(_token);\r\n            require(_amount \u003C= t.balanceOf(address(this)), \u0022Invalid amount\u0022);\r\n\r\n            if (_token == SNT) {\r\n                require(_safeTransfer(t, burnAddress, _amount), \u0022SNT transfer failure\u0022);\r\n                emit Swap(msg.sender, SNT, SNT, _amount, _amount);\r\n                return;\r\n            } else {\r\n                // Mitigate ERC20 Approve front-running attack, by initially setting allowance to 0\r\n                require(ERC20Token(_token).approve(address(kyberNetworkProxy), 0), \u0022Failed to reset approval\u0022);\r\n\r\n                // Set the spender\u0027s token allowance to tokenQty\r\n                require(ERC20Token(_token).approve(address(kyberNetworkProxy), _amount), \u0022Failed to approve trade amount\u0022);\r\n\r\n                (ratePer1Token,) = kyberNetworkProxy.getExpectedRate(_token, SNT, 1 ether);\r\n                (tokensToTradeRate,) = kyberNetworkProxy.getExpectedRate(_token, SNT, _amount);\r\n                minAcceptedRate = (ratePer1Token * (10000 - maxSlippageRate)) / 10000;\r\n                require(tokensToTradeRate \u003E= minAcceptedRate, \u0022Rate is not acceptable\u0022);\r\n\r\n                destAmount = kyberNetworkProxy.trade(_token, _amount, SNT, burnAddress, 0 - uint256(1), tokensToTradeRate, walletId);\r\n\r\n                emit Swap(msg.sender, _token, SNT, _amount, destAmount);\r\n            }\r\n        }\r\n    }\r\n\r\n    event EscapeTriggered(address sender, address token, uint amount);\r\n\r\n    /**\r\n     * @dev Exits the selected asset to the owner\r\n     * @param _token Address of the asset to exit\r\n     */\r\n    function escape(address _token) external onlyOwner {\r\n        if (_token == address(0)) {\r\n            uint ethBalance = address(this).balance;\r\n            address ownerAddr = address(uint160(owner()));\r\n            (bool success, ) = ownerAddr.call.value(ethBalance)(\u0022\u0022);\r\n            require(success, \u0022Transfer failed.\u0022);\r\n            emit EscapeTriggered(msg.sender, _token, ethBalance);\r\n        } else {\r\n            ERC20Token t = ERC20Token(_token);\r\n            uint tokenBalance = t.balanceOf(address(this));\r\n            require(_safeTransfer(t, owner(), tokenBalance), \u0022Token transfer error\u0022);\r\n            emit EscapeTriggered(msg.sender, _token, tokenBalance);\r\n        }\r\n    }\r\n\r\n    function() payable external {\r\n    }\r\n\r\n}","ABI":"[{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_token\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022swap\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_walletId\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022setWalletId\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_burnAddress\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022setBurnAddress\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022burnAddress\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022renounceOwnership\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_kyberNetworkProxy\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022setKyberNetworkProxyAddress\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_snt\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022setSNT\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022owner\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022isOwner\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_token\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022escape\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022walletId\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022maxSlippageRate\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022SNT\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_token\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022swap\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022kyberNetworkProxy\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_newSlippageRate\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022setMaxSlippageRate\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022transferOwnership\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[{\u0022name\u0022:\u0022_snt\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_burnAddress\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_kyberNetworkProxy\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_walletId\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_maxSlippageRate\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022constructor\u0022},{\u0022payable\u0022:true,\u0022stateMutability\u0022:\u0022payable\u0022,\u0022type\u0022:\u0022fallback\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022sender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022prevSNTAddress\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022newSNTAddress\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022SNTAddressChanged\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022sender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022prevBurnAddress\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022newBurnAddress\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022BurnAddressChanged\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022sender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022prevKyberAddress\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022newKyberAddress\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022KyberNetworkProxyAddressChanged\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022sender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022prevWalletId\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022newWalletId\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022WalletIdChanged\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022sender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022oldRate\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022newRate\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022SlippageRateChanged\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022sender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022srcToken\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022destToken\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022srcAmount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022destAmount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022Swap\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022sender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022token\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022EscapeTriggered\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022previousOwner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022OwnershipTransferred\u0022,\u0022type\u0022:\u0022event\u0022}]","ContractName":"KyberFeeBurner","CompilerVersion":"v0.5.10\u002Bcommit.5a6ea5b1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000744d70fdbe2ba4cf95131626614a1763df805b9e0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000818e6fecd516ecc3849daf6845e3ec868087b7550000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012c","Library":"","SwarmSource":"bzzr://559c875729ded3452cd1d867e1b478083ba74ecd00aea7b251d6eb9fc0fae200"}]