[{"SourceCode":"pragma solidity 0.6.1;\r\n\r\n\r\ninterface XcertBurnable {\r\n\r\n  \r\n  function destroy(\r\n    uint256 _tokenId\r\n  )\r\n    external;\r\n\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n  \r\n  string constant OVERFLOW = \u0022008001\u0022;\r\n  string constant SUBTRAHEND_GREATER_THEN_MINUEND = \u0022008002\u0022;\r\n  string constant DIVISION_BY_ZERO = \u0022008003\u0022;\r\n\r\n  \r\n  function mul(\r\n    uint256 _factor1,\r\n    uint256 _factor2\r\n  )\r\n    internal\r\n    pure\r\n    returns (uint256 product)\r\n  {\r\n    \r\n    \r\n    \r\n    if (_factor1 == 0)\r\n    {\r\n      return 0;\r\n    }\r\n\r\n    product = _factor1 * _factor2;\r\n    require(product / _factor1 == _factor2, OVERFLOW);\r\n  }\r\n\r\n  \r\n  function div(\r\n    uint256 _dividend,\r\n    uint256 _divisor\r\n  )\r\n    internal\r\n    pure\r\n    returns (uint256 quotient)\r\n  {\r\n    \r\n    require(_divisor \u003E 0, DIVISION_BY_ZERO);\r\n    quotient = _dividend / _divisor;\r\n    \r\n  }\r\n\r\n  \r\n  function sub(\r\n    uint256 _minuend,\r\n    uint256 _subtrahend\r\n  )\r\n    internal\r\n    pure\r\n    returns (uint256 difference)\r\n  {\r\n    require(_subtrahend \u003C= _minuend, SUBTRAHEND_GREATER_THEN_MINUEND);\r\n    difference = _minuend - _subtrahend;\r\n  }\r\n\r\n  \r\n  function add(\r\n    uint256 _addend1,\r\n    uint256 _addend2\r\n  )\r\n    internal\r\n    pure\r\n    returns (uint256 sum)\r\n  {\r\n    sum = _addend1 \u002B _addend2;\r\n    require(sum \u003E= _addend1, OVERFLOW);\r\n  }\r\n\r\n  \r\n  function mod(\r\n    uint256 _dividend,\r\n    uint256 _divisor\r\n  )\r\n    internal\r\n    pure\r\n    returns (uint256 remainder)\r\n  {\r\n    require(_divisor != 0, DIVISION_BY_ZERO);\r\n    remainder = _dividend % _divisor;\r\n  }\r\n\r\n}\r\n\r\ncontract Abilitable {\r\n  using SafeMath for uint;\r\n\r\n  \r\n  string constant NOT_AUTHORIZED = \u0022017001\u0022;\r\n  string constant INVALID_INPUT = \u0022017002\u0022;\r\n\r\n  \r\n  uint8 constant SUPER_ABILITY = 1;\r\n\r\n  \r\n  uint8 constant ALLOW_SUPER_ABILITY = 2;\r\n\r\n  \r\n  uint8 constant EMPTY_SLOT_1 = 4;\r\n\r\n  \r\n  uint8 constant EMPTY_SLOT_2 = 8;\r\n\r\n  \r\n  uint8 constant ALL_DEFAULT_ABILITIES = 15;\r\n\r\n  \r\n  mapping(address =\u003E uint256) public addressToAbility;\r\n\r\n  \r\n  event SetAbilities(\r\n    address indexed _target,\r\n    uint256 indexed _abilities\r\n  );\r\n\r\n  \r\n  modifier hasAbilities(\r\n    uint256 _abilities\r\n  )\r\n  {\r\n    require(_abilities \u003E 0, INVALID_INPUT);\r\n    require(\r\n      addressToAbility[msg.sender] \u0026 _abilities == _abilities,\r\n      NOT_AUTHORIZED\r\n    );\r\n    _;\r\n  }\r\n\r\n  \r\n  constructor()\r\n    public\r\n  {\r\n    addressToAbility[msg.sender] = ALL_DEFAULT_ABILITIES;\r\n  }\r\n\r\n  \r\n  function grantAbilities(\r\n    address _target,\r\n    uint256 _abilities\r\n  )\r\n    external\r\n    hasAbilities(SUPER_ABILITY)\r\n  {\r\n    addressToAbility[_target] |= _abilities;\r\n    emit SetAbilities(_target, addressToAbility[_target]);\r\n  }\r\n\r\n  \r\n  function revokeAbilities(\r\n    address _target,\r\n    uint256 _abilities\r\n  )\r\n    external\r\n    hasAbilities(SUPER_ABILITY)\r\n  {\r\n    addressToAbility[_target] \u0026= ~_abilities;\r\n    emit SetAbilities(_target, addressToAbility[_target]);\r\n  }\r\n\r\n  \r\n  function setAbilities(\r\n    address _target,\r\n    uint256 _abilities\r\n  )\r\n    external\r\n    hasAbilities(SUPER_ABILITY)\r\n  {\r\n    addressToAbility[_target] = _abilities;\r\n    emit SetAbilities(_target, _abilities);\r\n  }\r\n\r\n  \r\n  function isAble(\r\n    address _target,\r\n    uint256 _abilities\r\n  )\r\n    external\r\n    view\r\n    returns (bool)\r\n  {\r\n    require(_abilities \u003E 0, INVALID_INPUT);\r\n    return (addressToAbility[_target] \u0026 _abilities) == _abilities;\r\n  }\r\n\r\n}\r\n\r\ncontract XcertBurnProxy is\r\n  Abilitable\r\n{\r\n\r\n  \r\n  uint8 constant ABILITY_TO_EXECUTE = 16;\r\n\r\n  \r\n  function destroy(\r\n    address _xcert,\r\n    uint256 _id\r\n  )\r\n    external\r\n    hasAbilities(ABILITY_TO_EXECUTE)\r\n  {\r\n    XcertBurnable(_xcert).destroy(_id);\r\n  }\r\n\r\n}","ABI":"[{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_target\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_abilities\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022SetAbilities\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022addressToAbility\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_xcert\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_id\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022destroy\u0022,\u0022outputs\u0022:[],\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_target\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_abilities\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022grantAbilities\u0022,\u0022outputs\u0022:[],\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_target\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_abilities\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022isAble\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_target\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_abilities\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022revokeAbilities\u0022,\u0022outputs\u0022:[],\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_target\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_abilities\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022setAbilities\u0022,\u0022outputs\u0022:[],\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022}]","ContractName":"XcertBurnProxy","CompilerVersion":"v0.6.1\u002Bcommit.e6f7d5a4","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"ipfs://8f7a0bf453d57639da22894ade8e536293d4d7c7452b63a42116e3c43b82138f"}]