[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2017-09-13\r\n*/\r\n\r\npragma solidity ^0.4.11;\r\n\r\ncontract DGDb_Auction{\r\n    \r\n    Badge public badge_obj;\r\n    \r\n    address public beneficiary;\r\n    uint public expiry_date;\r\n    \r\n    address public highest_bidder;\r\n    uint public highest_bid;\r\n    mapping(address =\u003E uint) pending_returns;\r\n    \r\n    \r\n    function DGDb_Auction(address beneficiary_address, address badge_address, uint duration_in_days){\r\n        beneficiary = beneficiary_address;\r\n        badge_obj = Badge(badge_address);\r\n        expiry_date = now \u002B duration_in_days * 1 days;\r\n    }\r\n    \r\n    // This function is called every time someone sends ether to this contract\r\n    function() payable {\r\n        require(now \u003C (expiry_date));\r\n        require(msg.value \u003E highest_bid);\r\n        \r\n        uint num_badges = badge_obj.balanceOf(this);\r\n        require(num_badges \u003E 0);\r\n        \r\n        if (highest_bidder != 0) {\r\n            pending_returns[highest_bidder] \u002B= highest_bid;\r\n        }\r\n        \r\n        highest_bidder = msg.sender;\r\n        highest_bid = msg.value;\r\n    }\r\n    \r\n    // Bidders that have been outbid can call this to retrieve their ETH\r\n    function withdraw_ether() returns (bool) {\r\n        uint amount = pending_returns[msg.sender];\r\n        if (amount \u003E 0) {\r\n            pending_returns[msg.sender] = 0;\r\n            if (!msg.sender.send(amount)) {\r\n                pending_returns[msg.sender] = amount;\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    \r\n    // For winner (or creator if no bids) to retrieve badge\r\n    function withdraw_badge() {\r\n        require(now \u003E= (expiry_date));\r\n        \r\n        uint num_badges = badge_obj.balanceOf(this);\r\n        \r\n        if (highest_bid \u003E 0){\r\n            badge_obj.transfer(highest_bidder, num_badges);\r\n        } else {\r\n            badge_obj.transfer(beneficiary, num_badges);\r\n        }\r\n    }\r\n    \r\n    // For auction creator to retrieve ETH 1 day after auction ends\r\n    function end_auction() {\r\n        require(msg.sender == beneficiary);\r\n        require(now \u003E (expiry_date \u002B 1 days));\r\n        selfdestruct(beneficiary);\r\n    }\r\n}\r\n\r\ncontract Badge{\r\nfunction Badge();\r\nfunction approve(address _spender,uint256 _value)returns(bool success);\r\nfunction setOwner(address _owner)returns(bool success);\r\nfunction totalSupply()constant returns(uint256 );\r\nfunction transferFrom(address _from,address _to,uint256 _value)returns(bool success);\r\nfunction subtractSafely(uint256 a,uint256 b)returns(uint256 );\r\nfunction mint(address _owner,uint256 _amount)returns(bool success);\r\nfunction safeToAdd(uint256 a,uint256 b)returns(bool );\r\nfunction balanceOf(address _owner)constant returns(uint256 balance);\r\nfunction owner()constant returns(address );\r\nfunction transfer(address _to,uint256 _value)returns(bool success);\r\nfunction addSafely(uint256 a,uint256 b)returns(uint256 result);\r\nfunction locked()constant returns(bool );\r\nfunction allowance(address _owner,address _spender)constant returns(uint256 remaining);\r\nfunction safeToSubtract(uint256 a,uint256 b)returns(bool );\r\n}","ABI":"[{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022expiry_date\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022beneficiary\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022withdraw_ether\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022withdraw_badge\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022end_auction\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022highest_bidder\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022badge_obj\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022highest_bid\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[{\u0022name\u0022:\u0022beneficiary_address\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022badge_address\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022duration_in_days\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022type\u0022:\u0022constructor\u0022},{\u0022payable\u0022:true,\u0022type\u0022:\u0022fallback\u0022}]","ContractName":"DGDb_Auction","CompilerVersion":"v0.4.11\u002Bcommit.68ef5810","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000001a4680db969113f11b324ca06f1ff3783cc67b9c00000000000000000000000054bda709fed875224eae569bb6817d96ef7ed9ad0000000000000000000000000000000000000000000000000000000000000003","Library":"","SwarmSource":"bzzr://55684b745332129f485595a4bf11e677ccef856ab87707e542ab5ec91390ef8b"}]