[{"SourceCode":"pragma solidity ^0.6.0;\r\n\r\n/**\r\n * @title InstaList\r\n * @dev Registry For Smart Account Authorised user.\r\n */\r\n\r\ninterface AccountInterface {\r\n    function isAuth(address _user) external view returns (bool);\r\n}\r\n\r\n\r\ncontract DSMath {\r\n\r\n    function add(uint64 x, uint64 y) internal pure returns (uint64 z) {\r\n        require((z = x \u002B y) \u003E= x, \u0022ds-math-add-overflow\u0022);\r\n    }\r\n\r\n    function sub(uint64 x, uint64 y) internal pure returns (uint64 z) {\r\n        require((z = x - y) \u003C= x, \u0022ds-math-sub-underflow\u0022);\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract Variables is DSMath {\r\n\r\n    // The InstaIndex Address.\r\n    address public constant instaIndex = 0x1c503F1544500C05da80cd326D97342f2B13a732;\r\n\r\n    // Smart Account Count.\r\n    uint64 public accounts;\r\n    // Smart Account ID (Smart Account Address =\u003E Account ID).\r\n    mapping (address =\u003E uint64) public accountID;\r\n    // Smart Account Address (Smart Account ID =\u003E Smart Account Address).\r\n    mapping (uint64 =\u003E address) public accountAddr;\r\n\r\n    // User Link (User Address =\u003E UserLink(Account ID of First and Last And Count of Smart Accounts)).\r\n    mapping (address =\u003E UserLink) public userLink;\r\n    // Linked List of Users (User Address =\u003E Smart Account ID =\u003E UserList(Previous and next Account ID)).\r\n    mapping (address =\u003E mapping(uint64 =\u003E UserList)) public userList;\r\n\r\n    struct UserLink {\r\n        uint64 first;\r\n        uint64 last;\r\n        uint64 count;\r\n    }\r\n    struct UserList {\r\n        uint64 prev;\r\n        uint64 next;\r\n    }\r\n\r\n    // Account Link (Smart Account ID =\u003E AccountLink).\r\n    mapping (uint64 =\u003E AccountLink) public accountLink; // account =\u003E account linked list connection\r\n    // Linked List of Accounts (Smart Account ID =\u003E Account Address =\u003E AccountList).\r\n    mapping (uint64 =\u003E mapping (address =\u003E AccountList)) public accountList; // account =\u003E user address =\u003E list\r\n\r\n    struct AccountLink {\r\n        address first;\r\n        address last;\r\n        uint64 count;\r\n    }\r\n    struct AccountList {\r\n        address prev;\r\n        address next;\r\n    }\r\n\r\n}\r\n\r\ncontract Configure is Variables {\r\n\r\n    /**\r\n     * @dev Add Account to User Linked List.\r\n     * @param _owner Acount Owner.\r\n     * @param _account Smart Account Address.\r\n    */\r\n    function addAccount(address _owner, uint64 _account) internal {\r\n        if (userLink[_owner].last != 0) {\r\n            userList[_owner][_account].prev = userLink[_owner].last;\r\n            userList[_owner][userLink[_owner].last].next = _account;\r\n        }\r\n        if (userLink[_owner].first == 0) userLink[_owner].first = _account;\r\n        userLink[_owner].last = _account;\r\n        userLink[_owner].count = add(userLink[_owner].count, 1);\r\n    }\r\n\r\n    /**\r\n     * @dev Remove Account from User Linked List.\r\n     * @param _owner Acount Owner/User.\r\n     * @param _account Smart Account Address.\r\n    */\r\n    function removeAccount(address _owner, uint64 _account) internal {\r\n        uint64 _prev = userList[_owner][_account].prev;\r\n        uint64 _next = userList[_owner][_account].next;\r\n        if (_prev != 0) userList[_owner][_prev].next = _next;\r\n        if (_next != 0) userList[_owner][_next].prev = _prev;\r\n        if (_prev == 0) userLink[_owner].first = _next;\r\n        if (_next == 0) userLink[_owner].last = _prev;\r\n        userLink[_owner].count = sub(userLink[_owner].count, 1);\r\n        delete userList[_owner][_account];\r\n    }\r\n\r\n    /**\r\n     * @dev Add Owner to Account Linked List.\r\n     * @param _owner Acount Owner.\r\n     * @param _account Smart Account Address.\r\n    */\r\n    function addUser(address _owner, uint64 _account) internal {\r\n        if (accountLink[_account].last != address(0)) {\r\n            accountList[_account][_owner].prev = accountLink[_account].last;\r\n            accountList[_account][accountLink[_account].last].next = _owner;\r\n        }\r\n        if (accountLink[_account].first == address(0)) accountLink[_account].first = _owner;\r\n        accountLink[_account].last = _owner;\r\n        accountLink[_account].count = add(accountLink[_account].count, 1);\r\n    }\r\n\r\n    /**\r\n     * @dev Remove Owner from Account Linked List.\r\n     * @param _owner Acount Owner.\r\n     * @param _account Smart Account Address.\r\n    */\r\n    function removeUser(address _owner, uint64 _account) internal {\r\n        address _prev = accountList[_account][_owner].prev;\r\n        address _next = accountList[_account][_owner].next;\r\n        if (_prev != address(0)) accountList[_account][_prev].next = _next;\r\n        if (_next != address(0)) accountList[_account][_next].prev = _prev;\r\n        if (_prev == address(0)) accountLink[_account].first = _next;\r\n        if (_next == address(0)) accountLink[_account].last = _prev;\r\n        accountLink[_account].count = sub(accountLink[_account].count, 1);\r\n        delete accountList[_account][_owner];\r\n    }\r\n\r\n}\r\n\r\ncontract InstaList is Configure {\r\n\r\n    /**\r\n     * @dev Enable Auth for Smart Account.\r\n     * @param _owner Owner Address.\r\n    */\r\n    function addAuth(address _owner) external {\r\n        require(accountID[msg.sender] != 0, \u0022not-account\u0022);\r\n        require(AccountInterface(msg.sender).isAuth(_owner), \u0022not-owner\u0022);\r\n        addAccount(_owner, accountID[msg.sender]);\r\n        addUser(_owner, accountID[msg.sender]);\r\n    }\r\n\r\n    /**\r\n     * @dev Disable Auth for Smart Account.\r\n     * @param _owner Owner Address.\r\n    */\r\n    function removeAuth(address _owner) external {\r\n        require(accountID[msg.sender] != 0, \u0022not-account\u0022);\r\n        require(!AccountInterface(msg.sender).isAuth(_owner), \u0022already-owner\u0022);\r\n        removeAccount(_owner, accountID[msg.sender]);\r\n        removeUser(_owner, accountID[msg.sender]);\r\n    }\r\n\r\n    /**\r\n     * @dev Setup Initial configuration of Smart Account.\r\n     * @param _account Smart Account Address.\r\n    */\r\n    function init(address  _account) external {\r\n        require(msg.sender == instaIndex, \u0022not-index\u0022);\r\n        accounts\u002B\u002B;\r\n        accountID[_account] = accounts;\r\n        accountAddr[accounts] = _account;\r\n    }\r\n\r\n}","ABI":"[{\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint64\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint64\u0022}],\u0022name\u0022:\u0022accountAddr\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022accountID\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint64\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint64\u0022}],\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint64\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint64\u0022}],\u0022name\u0022:\u0022accountLink\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022first\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022last\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint64\u0022,\u0022name\u0022:\u0022count\u0022,\u0022type\u0022:\u0022uint64\u0022}],\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint64\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint64\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022accountList\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022prev\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022next\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[],\u0022name\u0022:\u0022accounts\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint64\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint64\u0022}],\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_owner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022addAuth\u0022,\u0022outputs\u0022:[],\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022init\u0022,\u0022outputs\u0022:[],\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[],\u0022name\u0022:\u0022instaIndex\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_owner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022removeAuth\u0022,\u0022outputs\u0022:[],\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022userLink\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint64\u0022,\u0022name\u0022:\u0022first\u0022,\u0022type\u0022:\u0022uint64\u0022},{\u0022internalType\u0022:\u0022uint64\u0022,\u0022name\u0022:\u0022last\u0022,\u0022type\u0022:\u0022uint64\u0022},{\u0022internalType\u0022:\u0022uint64\u0022,\u0022name\u0022:\u0022count\u0022,\u0022type\u0022:\u0022uint64\u0022}],\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint64\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint64\u0022}],\u0022name\u0022:\u0022userList\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint64\u0022,\u0022name\u0022:\u0022prev\u0022,\u0022type\u0022:\u0022uint64\u0022},{\u0022internalType\u0022:\u0022uint64\u0022,\u0022name\u0022:\u0022next\u0022,\u0022type\u0022:\u0022uint64\u0022}],\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022}]","ContractName":"InstaList","CompilerVersion":"v0.6.1\u002Bcommit.e6f7d5a4","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"ipfs://6e4daec0a53624ee7b79e0a517d88c85aa10e764afc58eff78fbd04bc7641280"}]