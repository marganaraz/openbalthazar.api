[{"SourceCode":"pragma solidity \u003E0.4.99 \u003C0.6.0;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, reverts on overflow.\r\n    */\r\n    function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        if (_a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = _a * _b;\r\n        require(c / _a == _b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        require(_b \u003E 0);\r\n        // Solidity only automatically asserts when dividing by 0\r\n        uint256 c = _a / _b;\r\n        // assert(_a == _b * c \u002B _a % _b); // There is no case in which this doesn\u0027t hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        require(_b \u003C= _a);\r\n        uint256 c = _a - _b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, reverts on overflow.\r\n    */\r\n    function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n        uint256 c = _a \u002B _b;\r\n        require(c \u003E= _a);\r\n\r\n        return c;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \u0022user permissions\u0022.\r\n */\r\ncontract Ownable {\r\n    address payable private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original \u0060owner\u0060 of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor(address payable newOwner) public {\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @return the address of the owner.\r\n     */\r\n    function owner() public view returns (address payable) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \u0022Ownable: caller is not the owner\u0022);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return true if \u0060msg.sender\u0060 is the owner of the contract.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address payable newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address payable newOwner) internal {\r\n        require(newOwner != address(0), \u0022Ownable: new owner is the zero address\u0022);\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract TicketsStorage is Ownable {\r\n    using SafeMath for uint;\r\n\r\n    struct Ticket {\r\n        address payable wallet;\r\n        uint investment;\r\n        uint stakeAmount;\r\n        uint stake;\r\n        uint happyNumber;\r\n        uint8[] percentArray;\r\n        address payable ownerWallet;\r\n    }\r\n\r\n    mapping(address =\u003E mapping(uint =\u003E Ticket)) private tickets;\r\n    // adrress of contract -\u003E round -\u003E Ticket\r\n\r\n    mapping(address =\u003E mapping(bytes32 =\u003E uint)) numberTicket;\r\n    // adrress of contract -\u003E hash -\u003E Ticket\r\n\r\n    mapping(address =\u003E bool) private parentContract;\r\n    //address of contract -\u003E bool\r\n    mapping(address =\u003E bool) private whitelist;\r\n    //address of contract -\u003E bool\r\n\r\n    event FindedNumber(address indexed requestor, uint reqValue, uint findValue);\r\n\r\n\r\n    modifier onlyParentContract {\r\n        require(parentContract[msg.sender] || isOwner(), \u0022onlyParentContract methods called by non - parent of contract.\u0022);\r\n        _;\r\n    }\r\n\r\n    modifier onlyWhitelist {\r\n        require(whitelist[msg.sender] || isOwner(), \u0022only whitelist contract methods called by non - parent of contract.\u0022);\r\n        _;\r\n    }\r\n\r\n    constructor() public\r\n    Ownable(msg.sender)\r\n    { }\r\n\r\n    function save(address _contract, uint _round, address payable _wallet, uint _investment, uint _stake, uint8[] memory _percentArray, address payable _ownerWallet) public onlyWhitelist {\r\n        Ticket storage ticket = tickets[_contract][_round];\r\n        ticket.wallet = _wallet;\r\n        ticket.investment = _investment;\r\n        ticket.stake = _stake;\r\n        if (_percentArray.length \u003C 6) {\r\n            for (uint i=0; i\u003C6; i\u002B\u002B) {\r\n                ticket.percentArray.push(0);\r\n            }\r\n        } else {\r\n            ticket.percentArray = _percentArray;\r\n        }\r\n        ticket.ownerWallet = _ownerWallet;\r\n    }\r\n\r\n    function saveHash(address _contract, bytes32 _hash, uint _round) public onlyWhitelist {\r\n        numberTicket[_contract][_hash] = _round;\r\n    }\r\n\r\n    function update(address _contract, uint _round, uint _stakeAmount, uint _happyNumber) public onlyWhitelist {\r\n        Ticket storage ticket = tickets[_contract][_round];\r\n        ticket.stakeAmount = _stakeAmount;\r\n        ticket.happyNumber = _happyNumber;\r\n    }\r\n\r\n    function ticketInfo(address _contract, uint round) public view returns (\r\n        address payable _wallet,\r\n        uint _investment,\r\n        uint _stakeAmount,\r\n        uint _stake,\r\n        uint _happyNumber,\r\n        uint8[] memory _percentArray,\r\n        address payable _ownerWallet\r\n    ) {\r\n        Ticket memory ticket = tickets[_contract][round];\r\n        _wallet = ticket.wallet;\r\n        _investment = ticket.investment;\r\n        _stakeAmount = ticket.stakeAmount;\r\n        _stake = ticket.stake;\r\n        _happyNumber = ticket.happyNumber;\r\n        _percentArray = ticket.percentArray;\r\n        _ownerWallet = ticket.ownerWallet;\r\n    }\r\n\r\n    function numberTicketFromHash(address _contract, bytes32 _hash) public view returns (uint) {\r\n        return numberTicket[_contract][_hash];\r\n    }\r\n\r\n    function findHappyNumber(uint step) public onlyWhitelist returns (uint) {\r\n        uint happyNumber = getRandomNumber(step);\r\n        emit FindedNumber(msg.sender, step, happyNumber);\r\n        return happyNumber;\r\n    }\r\n\r\n    function getRandomNumber(uint step) internal view returns (uint randomNumber) {\r\n        if (step \u003E 0) {\r\n            uint numberOne = uint8(getByteByIndex(30, blockhash(block.number-1)));\r\n            uint numberTwo = uint8(getByteByIndex(29, blockhash(block.number-2)));\r\n            uint numberThree = uint8(getByteByIndex(28, blockhash(block.number-3)));\r\n            uint numberFor = uint8(getByteByIndex(10, blockhash(block.number-4)));\r\n            uint random = 0;\r\n            if (step \u003C 5) {\r\n                random = numberTwo.add(numberFor).add(numberThree);\r\n            }\r\n            if (step \u003E= 5 \u0026\u0026 step \u003C 970000) {\r\n                random = numberOne.mul(numberTwo);\r\n                random = random.add(numberFor);\r\n                random = random.mul(numberThree).sub(numberFor);\r\n            }\r\n            if (step \u003E= 970000 \u0026\u0026 step \u003C 96000000) {\r\n                random = numberOne.mul(numberTwo).mul(numberFor);\r\n                random = random.add(numberFor);\r\n                random = random.mul(numberThree).sub(numberFor);\r\n            }\r\n            if (step \u003E= 96000000) {\r\n                random = numberOne.mul(numberTwo).mul(numberFor);\r\n                random = random.mul(numberOne).add(numberFor);\r\n                random = random.mul(numberThree).mul(numberTwo).sub(numberFor);\r\n            }\r\n            randomNumber = random % step;\r\n            return randomNumber \u002B 1;\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    function randomBytes(uint blockn, address entropyAddress) public pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(bytes32(blockn),entropyAddress));\r\n    }\r\n\r\n    function getByteByIndex(uint number, bytes32 strBytes) private pure returns (byte lastByte) {\r\n        require(number \u003C 32 \u0026\u0026 number \u003E= 0);\r\n        lastByte = strBytes[number];\r\n    }\r\n\r\n    function setWhitelist(address _contract, bool _status) onlyParentContract public {\r\n        whitelist[_contract] = _status;\r\n    }\r\n\r\n    function finish() external onlyOwner {\r\n        address payable __owner = owner();\r\n        selfdestruct(__owner);\r\n    }\r\n\r\n    function setParentContract(address _contract, bool _status) onlyOwner public {\r\n        parentContract[_contract] = _status;\r\n    }\r\n}","ABI":"[{\u0022inputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022constructor\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022requestor\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022reqValue\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022findValue\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022FindedNumber\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022previousOwner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022OwnershipTransferred\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022step\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022findHappyNumber\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022finish\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022isOwner\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_contract\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022_hash\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022numberTicketFromHash\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022owner\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022address payable\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022blockn\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022entropyAddress\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022randomBytes\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022pure\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_contract\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_round\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022address payable\u0022,\u0022name\u0022:\u0022_wallet\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_investment\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_stake\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint8[]\u0022,\u0022name\u0022:\u0022_percentArray\u0022,\u0022type\u0022:\u0022uint8[]\u0022},{\u0022internalType\u0022:\u0022address payable\u0022,\u0022name\u0022:\u0022_ownerWallet\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022save\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_contract\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022_hash\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_round\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022saveHash\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_contract\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022_status\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022name\u0022:\u0022setParentContract\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_contract\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022_status\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022name\u0022:\u0022setWhitelist\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_contract\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022round\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022ticketInfo\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022address payable\u0022,\u0022name\u0022:\u0022_wallet\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_investment\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_stakeAmount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_stake\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_happyNumber\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint8[]\u0022,\u0022name\u0022:\u0022_percentArray\u0022,\u0022type\u0022:\u0022uint8[]\u0022},{\u0022internalType\u0022:\u0022address payable\u0022,\u0022name\u0022:\u0022_ownerWallet\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address payable\u0022,\u0022name\u0022:\u0022newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022transferOwnership\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_contract\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_round\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_stakeAmount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_happyNumber\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022update\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022}]","ContractName":"TicketsStorage","CompilerVersion":"v0.5.12\u002Bcommit.7709ece9","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://7d8ad14ba3348c952eff08f68d364c1c28013358c258487cad7328a832069e07"}]