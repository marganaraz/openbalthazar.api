[{"SourceCode":"pragma solidity ^0.5.1;\r\nlibrary SafeMath {\r\n    function add(uint a, uint b) internal pure returns (uint c) {\r\n        c = a \u002B b;\r\n        require(c \u003E= a);\r\n    }\r\n    function sub(uint a, uint b) internal pure returns (uint c) {\r\n        require(b \u003C= a);\r\n        c = a - b;\r\n    }\r\n    function mul(uint a, uint b) internal pure returns (uint c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    }\r\n    function div(uint a, uint b) internal pure returns (uint c) {\r\n        require(b \u003E 0);\r\n        c = a / b;\r\n    }\r\n}\r\nlibrary ExtendedMath {\r\n    function limitLessThan(uint a, uint b) internal pure returns (uint c) {\r\n        if(a \u003E b) return b;\r\n        return a;\r\n    }\r\n}\r\ncontract ERC20Interface {\r\n    function totalSupply() public view returns (uint);\r\n    function balanceOf(address tokenOwner) public view returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n}\r\ncontract ApproveAndCallFallBack {\r\n    function receiveApproval(address from, uint256 tokens, address token, bytes memory data) public;\r\n}\r\ncontract Owned {\r\n    address public owner;\r\n    address public newOwner;\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n}\r\n// --------------------------------------------------------------------------\r\n// --------------------------------------------------------------------------\r\n// \u0027CARBON\u0027 contract\r\n// Mineable ERC20 Token using Proof Of Work\r\n//\r\n// Symbol      : \u0022C\u0022\r\n// Name        : \u0022CARBON\u0022\r\n// Total supply: \u002221,000,000.00\u0022\r\n// Decimals    : 15\r\n// ----------------------------------------------------------------------------\r\n// ----------------------------------------------------------------------------\r\ncontract CARBON is ERC20Interface, Owned {\r\n    using SafeMath for uint;\r\n    using ExtendedMath for uint;\r\n    string public symbol;\r\n    string public  name;\r\n    uint8 public decimals;\r\n    uint public _totalSupply;\r\n     uint public latestDifficultyPeriodStarted;\r\n    uint public epochCount;\r\n    uint public _BLOCKS_PER_READJUSTMENT = 1024;\r\n    uint public  _MINIMUM_TARGET = 2**16; \r\n    uint public  _MAXIMUM_TARGET = 2**234;\r\n    uint public miningTarget;\r\n    bytes32 public challengeNumber;\r\n    uint public rewardEra;\r\n    uint public maxSupplyForEra;\r\n    address public lastRewardTo;\r\n    uint public lastRewardAmount;\r\n    uint public lastRewardEthBlockNumber;\r\n    bool locked = false;\r\n    mapping(bytes32 =\u003E bytes32) solutionForChallenge;\r\n    uint public tokensMinted;\r\n    mapping(address =\u003E uint) balances;\r\n    mapping(address =\u003E mapping(address =\u003E uint)) allowed;\r\n    event Mint(address indexed from, uint reward_amount, uint epochCount, bytes32 newChallengeNumber);\r\n    constructor () public onlyOwner{\r\n        symbol = \u0022C\u0022;\r\n        name = \u0022CARBON\u0022;\r\n        decimals = 15;\r\n        _totalSupply = 21000000 * 17**uint(decimals);\r\n        if(locked) revert();\r\n        locked = true;\r\n        tokensMinted = 0;\r\n        rewardEra = 0;\r\n        maxSupplyForEra = _totalSupply.div(2);\r\n        miningTarget = _MAXIMUM_TARGET;\r\n        latestDifficultyPeriodStarted = block.number;\r\n        _startNewMiningEpoch();\r\n    }\r\n        function mint(uint256 nonce, bytes32 challenge_digest) public returns (bool success) {\r\n            bytes32 digest =  keccak256(abi.encodePacked(challengeNumber, msg.sender, nonce ));\r\n            if (digest != challenge_digest) revert();\r\n            if(uint256(digest) \u003E miningTarget) revert();\r\n             bytes32 solution = solutionForChallenge[challengeNumber];\r\n             solutionForChallenge[challengeNumber] = digest;\r\n             if(solution != 0x0) revert();\r\n            uint reward_amount = getMiningReward();\r\n            balances[msg.sender] = balances[msg.sender].add(reward_amount);\r\n            tokensMinted = tokensMinted.add(reward_amount);\r\n            assert(tokensMinted \u003C= maxSupplyForEra);\r\n            lastRewardTo = msg.sender;\r\n            lastRewardAmount = reward_amount;\r\n            lastRewardEthBlockNumber = block.number;\r\n             _startNewMiningEpoch();\r\n              emit Mint(msg.sender, reward_amount, epochCount, challengeNumber );\r\n           return true;\r\n        }\r\n    function _startNewMiningEpoch() internal {\r\n      if( tokensMinted.add(getMiningReward()) \u003E maxSupplyForEra \u0026\u0026 rewardEra \u003C 39)\r\n      {\r\n        rewardEra = rewardEra \u002B 1;\r\n      }\r\n      maxSupplyForEra = _totalSupply - _totalSupply.div( 2**(rewardEra \u002B 1));\r\n      epochCount = epochCount.add(1);\r\n      if(epochCount % _BLOCKS_PER_READJUSTMENT == 0)\r\n      {\r\n        _reAdjustDifficulty();\r\n      }\r\n      challengeNumber = blockhash(block.number - 1);\r\n        \r\n    }\r\n    function _reAdjustDifficulty() internal {\r\n        uint ethBlocksSinceLastDifficultyPeriod = block.number - latestDifficultyPeriodStarted;\r\n        uint epochsMined = _BLOCKS_PER_READJUSTMENT;\r\n        uint targetEthBlocksPerDiffPeriod = epochsMined * 60;\r\n        if( ethBlocksSinceLastDifficultyPeriod \u003C targetEthBlocksPerDiffPeriod ){\r\n          uint excess_block_pct = (targetEthBlocksPerDiffPeriod.mul(100)).div( ethBlocksSinceLastDifficultyPeriod );\r\n          uint excess_block_pct_extra = excess_block_pct.sub(100).limitLessThan(1000);\r\n          miningTarget = miningTarget.sub(miningTarget.div(2000).mul(excess_block_pct_extra));\r\n        }else{\r\n          uint shortage_block_pct = (ethBlocksSinceLastDifficultyPeriod.mul(100)).div( targetEthBlocksPerDiffPeriod );\r\n          uint shortage_block_pct_extra = shortage_block_pct.sub(100).limitLessThan(1000);\r\n          miningTarget = miningTarget.add(miningTarget.div(2000).mul(shortage_block_pct_extra));\r\n        }\r\n        latestDifficultyPeriodStarted = block.number;\r\n        if(miningTarget \u003C _MINIMUM_TARGET)\r\n        {\r\n          miningTarget = _MINIMUM_TARGET;\r\n        }\r\n        if(miningTarget \u003E _MAXIMUM_TARGET)\r\n        {\r\n          miningTarget = _MAXIMUM_TARGET;\r\n        }\r\n    }\r\n    function getChallengeNumber() public view returns (bytes32) {\r\n        return challengeNumber;\r\n    }\r\n     function getMiningDifficulty() public view returns (uint) {\r\n        return _MAXIMUM_TARGET.div(miningTarget);\r\n    }\r\n    function getMiningTarget() public view returns (uint) {\r\n       return miningTarget;\r\n   }\r\n    function getMiningReward() public view returns (uint) {\r\n         return (50 * 17**uint(decimals) ).div( 2**rewardEra ) ;\r\n    }\r\n    function getMintDigest(uint256 nonce, bytes32 challenge_number) public view returns (bytes32 digesttest) {\r\n        bytes32 digest = keccak256(abi.encodePacked(challenge_number,msg.sender,nonce));\r\n        return digest;\r\n        }\r\n      function checkMintSolution(uint256 nonce, bytes32 challenge_digest, bytes32 challenge_number, uint testTarget) public view returns (bool success) {\r\n          bytes32 digest = keccak256(abi.encodePacked(challenge_number,msg.sender,nonce));\r\n          if(uint256(digest) \u003E testTarget) revert();\r\n          return (digest == challenge_digest);\r\n        }\r\n    function totalSupply() public view returns (uint) {\r\n        return _totalSupply  - balances[address(0)];\r\n    }\r\n    function balanceOf(address tokenOwner) public view returns (uint balance) {\r\n        return balances[tokenOwner];\r\n    }\r\n    function transfer(address to, uint tokens) public returns (bool success) {\r\n        balances[msg.sender] = balances[msg.sender].sub(tokens);\r\n        balances[to] = balances[to].add(tokens);\r\n        emit Transfer(msg.sender, to, tokens);\r\n        return true;\r\n    }\r\n    function approve(address spender, uint tokens) public returns (bool success) {\r\n        allowed[msg.sender][spender] = tokens;\r\n        emit Approval(msg.sender, spender, tokens);\r\n        return true;\r\n    }\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\r\n        balances[from] = balances[from].sub(tokens);\r\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\r\n        balances[to] = balances[to].add(tokens);\r\n        emit Transfer(from, to, tokens);\r\n        return true;\r\n    }\r\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining) {\r\n        return allowed[tokenOwner][spender];\r\n    }\r\n    function approveAndCall(address spender, uint tokens, bytes memory data) public returns (bool success) {\r\n        allowed[msg.sender][spender] = tokens;\r\n        emit Approval(msg.sender, spender, tokens);\r\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);\r\n        return true;\r\n    }\r\n    function () external payable {\r\n        revert();\r\n    }\r\n    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\r\n        return ERC20Interface(tokenAddress).transfer(owner, tokens);\r\n    }\r\n}\r\n// ----------------------------------------------------------------------------\r\n// ----------------------------------------------------------------------------\r\n//           |||||||||||||||||||||||||||||||||||||\r\n//           ||79////////A\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\||\r\n//           ||/////////AAA\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\||\r\n//           ||////////Au|Au\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\||\r\n//           ||///////Au|||Au\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\||\r\n//           ||//////Au|||||Au\\\\\\\\\\\\\\Au\\\\\\\\\\Au\\\\||\r\n//           ||/////AuAuAuAuAuA\\\\\\\\\\\\Au\\\\\\\\\\Au\\\\||\r\n//           ||////Au|||||||||Au\\\\\\\\\\Au\\\\\\\\\\Au\\\\||\r\n//           ||///Au|||||||||||Au\\\\\\\\Au\\\\\\\\\\Au\\\\||\r\n//           ||//Au|||||||||||||Au\\\\\\\\Au\\\\\\\\Au\\\\||\r\n//           ||/Au|||||||||||||||Au\\\\\\\\AuAuAu\\Au||\r\n//           ||/////////////GOLD\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\||\r\n//           ||////////////196.967\\\\\\\\\\\\\\\\\\\\\\\\\\\\||\r\n//           |||||||||||||||||||||||||||||||||||||\r\n// ----------------------------------------------------------------------------\r\n// ----------------------------------------------------------------------------\r\n// ----------------------------------------------------------------------------\r\n// ----------------------------------------------------------------------------\r\n// \u0027GOLD\u0027 contract\r\n// Mineable ERC20 Token using Proof Of Work\r\n//\r\n// Symbol      : \u0022Au\u0022\r\n// Name        : \u0022GOLD\u0022\r\n// Total supply: \u002221,000,000.00\u0022\r\n// Decimals    : 15\r\n// ----------------------------------------------------------------------------\r\n// ----------------------------------------------------------------------------\r\ncontract GOLD is ERC20Interface, Owned {\r\n    using SafeMath for uint;\r\n    using ExtendedMath for uint;\r\n    string public symbol;\r\n    string public  name;\r\n    uint8 public decimals;\r\n    uint public _totalSupply;\r\n     uint public latestDifficultyPeriodStarted;\r\n    uint public epochCount;\r\n    uint public _BLOCKS_PER_READJUSTMENT = 1024;\r\n    uint public  _MINIMUM_TARGET = 2**16; \r\n    uint public  _MAXIMUM_TARGET = 2**234;\r\n    uint public miningTarget;\r\n    bytes32 public challengeNumber;\r\n    uint public rewardEra;\r\n    uint public maxSupplyForEra;\r\n    address public lastRewardTo;\r\n    uint public lastRewardAmount;\r\n    uint public lastRewardEthBlockNumber;\r\n    bool locked = false;\r\n    mapping(bytes32 =\u003E bytes32) solutionForChallenge;\r\n    uint public tokensMinted;\r\n    mapping(address =\u003E uint) balances;\r\n    mapping(address =\u003E mapping(address =\u003E uint)) allowed;\r\n    event Mint(address indexed from, uint reward_amount, uint epochCount, bytes32 newChallengeNumber);\r\n    constructor () public onlyOwner{\r\n        symbol = \u0022Au\u0022;\r\n        name = \u0022GOLD\u0022;\r\n        decimals = 15;\r\n        _totalSupply = 21000000 * 17**uint(decimals);\r\n        if(locked) revert();\r\n        locked = true;\r\n        tokensMinted = 0;\r\n        rewardEra = 0;\r\n        maxSupplyForEra = _totalSupply.div(2);\r\n        miningTarget = _MAXIMUM_TARGET;\r\n        latestDifficultyPeriodStarted = block.number;\r\n        _startNewMiningEpoch();\r\n    }\r\n        function mint(uint256 nonce, bytes32 challenge_digest) public returns (bool success) {\r\n            bytes32 digest =  keccak256(abi.encodePacked(challengeNumber, msg.sender, nonce ));\r\n            if (digest != challenge_digest) revert();\r\n            if(uint256(digest) \u003E miningTarget) revert();\r\n             bytes32 solution = solutionForChallenge[challengeNumber];\r\n             solutionForChallenge[challengeNumber] = digest;\r\n             if(solution != 0x0) revert();\r\n            uint reward_amount = getMiningReward();\r\n            balances[msg.sender] = balances[msg.sender].add(reward_amount);\r\n            tokensMinted = tokensMinted.add(reward_amount);\r\n            assert(tokensMinted \u003C= maxSupplyForEra);\r\n            lastRewardTo = msg.sender;\r\n            lastRewardAmount = reward_amount;\r\n            lastRewardEthBlockNumber = block.number;\r\n             _startNewMiningEpoch();\r\n              emit Mint(msg.sender, reward_amount, epochCount, challengeNumber );\r\n           return true;\r\n        }\r\n    function _startNewMiningEpoch() internal {\r\n      if( tokensMinted.add(getMiningReward()) \u003E maxSupplyForEra \u0026\u0026 rewardEra \u003C 39)\r\n      {\r\n        rewardEra = rewardEra \u002B 1;\r\n      }\r\n      maxSupplyForEra = _totalSupply - _totalSupply.div( 2**(rewardEra \u002B 1));\r\n      epochCount = epochCount.add(1);\r\n      if(epochCount % _BLOCKS_PER_READJUSTMENT == 0)\r\n      {\r\n        _reAdjustDifficulty();\r\n      }\r\n      challengeNumber = blockhash(block.number - 1);\r\n        \r\n    }\r\n    function _reAdjustDifficulty() internal {\r\n        uint ethBlocksSinceLastDifficultyPeriod = block.number - latestDifficultyPeriodStarted;\r\n        uint epochsMined = _BLOCKS_PER_READJUSTMENT;\r\n        uint targetEthBlocksPerDiffPeriod = epochsMined * 60;\r\n        if( ethBlocksSinceLastDifficultyPeriod \u003C targetEthBlocksPerDiffPeriod ){\r\n          uint excess_block_pct = (targetEthBlocksPerDiffPeriod.mul(100)).div( ethBlocksSinceLastDifficultyPeriod );\r\n          uint excess_block_pct_extra = excess_block_pct.sub(100).limitLessThan(1000);\r\n          miningTarget = miningTarget.sub(miningTarget.div(2000).mul(excess_block_pct_extra));\r\n        }else{\r\n          uint shortage_block_pct = (ethBlocksSinceLastDifficultyPeriod.mul(100)).div( targetEthBlocksPerDiffPeriod );\r\n          uint shortage_block_pct_extra = shortage_block_pct.sub(100).limitLessThan(1000);\r\n          miningTarget = miningTarget.add(miningTarget.div(2000).mul(shortage_block_pct_extra));\r\n        }\r\n        latestDifficultyPeriodStarted = block.number;\r\n        if(miningTarget \u003C _MINIMUM_TARGET)\r\n        {\r\n          miningTarget = _MINIMUM_TARGET;\r\n        }\r\n        if(miningTarget \u003E _MAXIMUM_TARGET)\r\n        {\r\n          miningTarget = _MAXIMUM_TARGET;\r\n        }\r\n    }\r\n    function getChallengeNumber() public view returns (bytes32) {\r\n        return challengeNumber;\r\n    }\r\n     function getMiningDifficulty() public view returns (uint) {\r\n        return _MAXIMUM_TARGET.div(miningTarget);\r\n    }\r\n    function getMiningTarget() public view returns (uint) {\r\n       return miningTarget;\r\n   }\r\n    function getMiningReward() public view returns (uint) {\r\n         return (50 * 17**uint(decimals) ).div( 2**rewardEra ) ;\r\n    }\r\n    function getMintDigest(uint256 nonce, bytes32 challenge_number) public view returns (bytes32 digesttest) {\r\n        bytes32 digest = keccak256(abi.encodePacked(challenge_number,msg.sender,nonce));\r\n        return digest;\r\n        }\r\n      function checkMintSolution(uint256 nonce, bytes32 challenge_digest, bytes32 challenge_number, uint testTarget) public view returns (bool success) {\r\n          bytes32 digest = keccak256(abi.encodePacked(challenge_number,msg.sender,nonce));\r\n          if(uint256(digest) \u003E testTarget) revert();\r\n          return (digest == challenge_digest);\r\n        }\r\n    function totalSupply() public view returns (uint) {\r\n        return _totalSupply  - balances[address(0)];\r\n    }\r\n    function balanceOf(address tokenOwner) public view returns (uint balance) {\r\n        return balances[tokenOwner];\r\n    }\r\n    function transfer(address to, uint tokens) public returns (bool success) {\r\n        balances[msg.sender] = balances[msg.sender].sub(tokens);\r\n        balances[to] = balances[to].add(tokens);\r\n        emit Transfer(msg.sender, to, tokens);\r\n        return true;\r\n    }\r\n    function approve(address spender, uint tokens) public returns (bool success) {\r\n        allowed[msg.sender][spender] = tokens;\r\n        emit Approval(msg.sender, spender, tokens);\r\n        return true;\r\n    }\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\r\n        balances[from] = balances[from].sub(tokens);\r\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\r\n        balances[to] = balances[to].add(tokens);\r\n        emit Transfer(from, to, tokens);\r\n        return true;\r\n    }\r\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining) {\r\n        return allowed[tokenOwner][spender];\r\n    }\r\n    function approveAndCall(address spender, uint tokens, bytes memory data) public returns (bool success) {\r\n        allowed[msg.sender][spender] = tokens;\r\n        emit Approval(msg.sender, spender, tokens);\r\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);\r\n        return true;\r\n    }\r\n    function () external payable {\r\n        revert();\r\n    }\r\n    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\r\n        return ERC20Interface(tokenAddress).transfer(owner, tokens);\r\n    }\r\n}\r\n// ----------------------------------------------------------------------------\r\n// ----------------------------------------------------------------------------\r\n//           |||||||||||||||||||||||||||||||||||||\r\n//           ||79////////A\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\||\r\n//           ||/////////AAA\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\||\r\n//           ||////////Ag|Ag\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\||\r\n//           ||///////Ag|||Ag\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\||\r\n//           ||//////Ag|||||Ag\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\||\r\n//           ||/////AgAgAgAgAgA\\\\\\\\\\\\\\AgAgAg\\\\\\\\||\r\n//           ||////Ag|||||||||Ag\\\\\\\\Ag\\\\\\\\\\\\Ag\\\\||\r\n//           ||///Ag|||||||||||Ag\\\\\\Ag\\\\\\\\AgAg\\\\||\r\n//           ||//Ag|||||||||||||Ag\\\\\\\\AgAgAgAg\\\\||\r\n//           ||/Ag|||||||||||||||Ag\\\\\\\\\\\\\\\\\\Ag\\\\||\r\n//           ||////////////SILVER\\\\\\\\Ag\\\\\\\\\\Ag\\\\||\r\n//           ||////////////196.967\\\\\\\\\\AgAgAg\\\\\\||\r\n//           |||||||||||||||||||||||||||||||||||||\r\n// --------------------------------------------------------------------------\r\n// --------------------------------------------------------------------------\r\n// ----------------------------------------------------------------------------\r\n// ----------------------------------------------------------------------------\r\n// \u0027SILVER\u0027 contract\r\n// Mineable ERC20 Token using Proof Of Work\r\n//\r\n// Symbol      : \u0022Ag\u0022\r\n// Name        : \u0022SILVER\u0022\r\n// Total supply: \u002221,000,000.00\u0022\r\n// Decimals    : 15\r\n// ----------------------------------------------------------------------------\r\n// ----------------------------------------------------------------------------\r\ncontract SILVER is ERC20Interface, Owned {\r\n    using SafeMath for uint;\r\n    using ExtendedMath for uint;\r\n    string public symbol;\r\n    string public  name;\r\n    uint8 public decimals;\r\n    uint public _totalSupply;\r\n     uint public latestDifficultyPeriodStarted;\r\n    uint public epochCount;\r\n    uint public _BLOCKS_PER_READJUSTMENT = 1024;\r\n    uint public  _MINIMUM_TARGET = 2**16; \r\n    uint public  _MAXIMUM_TARGET = 2**234;\r\n    uint public miningTarget;\r\n    bytes32 public challengeNumber;\r\n    uint public rewardEra;\r\n    uint public maxSupplyForEra;\r\n    address public lastRewardTo;\r\n    uint public lastRewardAmount;\r\n    uint public lastRewardEthBlockNumber;\r\n    bool locked = false;\r\n    mapping(bytes32 =\u003E bytes32) solutionForChallenge;\r\n    uint public tokensMinted;\r\n    mapping(address =\u003E uint) balances;\r\n    mapping(address =\u003E mapping(address =\u003E uint)) allowed;\r\n    event Mint(address indexed from, uint reward_amount, uint epochCount, bytes32 newChallengeNumber);\r\n    constructor () public onlyOwner{\r\n        symbol = \u0022Ag\u0022;\r\n        name = \u0022SILVER\u0022;\r\n        decimals = 15;\r\n        _totalSupply = 21000000 * 17**uint(decimals);\r\n        if(locked) revert();\r\n        locked = true;\r\n        tokensMinted = 0;\r\n        rewardEra = 0;\r\n        maxSupplyForEra = _totalSupply.div(2);\r\n        miningTarget = _MAXIMUM_TARGET;\r\n        latestDifficultyPeriodStarted = block.number;\r\n        _startNewMiningEpoch();\r\n    }\r\n        function mint(uint256 nonce, bytes32 challenge_digest) public returns (bool success) {\r\n            bytes32 digest =  keccak256(abi.encodePacked(challengeNumber, msg.sender, nonce ));\r\n            if (digest != challenge_digest) revert();\r\n            if(uint256(digest) \u003E miningTarget) revert();\r\n             bytes32 solution = solutionForChallenge[challengeNumber];\r\n             solutionForChallenge[challengeNumber] = digest;\r\n             if(solution != 0x0) revert();\r\n            uint reward_amount = getMiningReward();\r\n            balances[msg.sender] = balances[msg.sender].add(reward_amount);\r\n            tokensMinted = tokensMinted.add(reward_amount);\r\n            assert(tokensMinted \u003C= maxSupplyForEra);\r\n            lastRewardTo = msg.sender;\r\n            lastRewardAmount = reward_amount;\r\n            lastRewardEthBlockNumber = block.number;\r\n             _startNewMiningEpoch();\r\n              emit Mint(msg.sender, reward_amount, epochCount, challengeNumber );\r\n           return true;\r\n        }\r\n    function _startNewMiningEpoch() internal {\r\n      if( tokensMinted.add(getMiningReward()) \u003E maxSupplyForEra \u0026\u0026 rewardEra \u003C 39)\r\n      {\r\n        rewardEra = rewardEra \u002B 1;\r\n      }\r\n      maxSupplyForEra = _totalSupply - _totalSupply.div( 2**(rewardEra \u002B 1));\r\n      epochCount = epochCount.add(1);\r\n      if(epochCount % _BLOCKS_PER_READJUSTMENT == 0)\r\n      {\r\n        _reAdjustDifficulty();\r\n      }\r\n      challengeNumber = blockhash(block.number - 1);\r\n        \r\n    }\r\n    function _reAdjustDifficulty() internal {\r\n        uint ethBlocksSinceLastDifficultyPeriod = block.number - latestDifficultyPeriodStarted;\r\n        uint epochsMined = _BLOCKS_PER_READJUSTMENT;\r\n        uint targetEthBlocksPerDiffPeriod = epochsMined * 60;\r\n        if( ethBlocksSinceLastDifficultyPeriod \u003C targetEthBlocksPerDiffPeriod ){\r\n          uint excess_block_pct = (targetEthBlocksPerDiffPeriod.mul(100)).div( ethBlocksSinceLastDifficultyPeriod );\r\n          uint excess_block_pct_extra = excess_block_pct.sub(100).limitLessThan(1000);\r\n          miningTarget = miningTarget.sub(miningTarget.div(2000).mul(excess_block_pct_extra));\r\n        }else{\r\n          uint shortage_block_pct = (ethBlocksSinceLastDifficultyPeriod.mul(100)).div( targetEthBlocksPerDiffPeriod );\r\n          uint shortage_block_pct_extra = shortage_block_pct.sub(100).limitLessThan(1000);\r\n          miningTarget = miningTarget.add(miningTarget.div(2000).mul(shortage_block_pct_extra));\r\n        }\r\n        latestDifficultyPeriodStarted = block.number;\r\n        if(miningTarget \u003C _MINIMUM_TARGET)\r\n        {\r\n          miningTarget = _MINIMUM_TARGET;\r\n        }\r\n        if(miningTarget \u003E _MAXIMUM_TARGET)\r\n        {\r\n          miningTarget = _MAXIMUM_TARGET;\r\n        }\r\n    }\r\n    function getChallengeNumber() public view returns (bytes32) {\r\n        return challengeNumber;\r\n    }\r\n     function getMiningDifficulty() public view returns (uint) {\r\n        return _MAXIMUM_TARGET.div(miningTarget);\r\n    }\r\n    function getMiningTarget() public view returns (uint) {\r\n       return miningTarget;\r\n   }\r\n    function getMiningReward() public view returns (uint) {\r\n         return (50 * 17**uint(decimals) ).div( 2**rewardEra ) ;\r\n    }\r\n    function getMintDigest(uint256 nonce, bytes32 challenge_number) public view returns (bytes32 digesttest) {\r\n        bytes32 digest = keccak256(abi.encodePacked(challenge_number,msg.sender,nonce));\r\n        return digest;\r\n        }\r\n      function checkMintSolution(uint256 nonce, bytes32 challenge_digest, bytes32 challenge_number, uint testTarget) public view returns (bool success) {\r\n          bytes32 digest = keccak256(abi.encodePacked(challenge_number,msg.sender,nonce));\r\n          if(uint256(digest) \u003E testTarget) revert();\r\n          return (digest == challenge_digest);\r\n        }\r\n    function totalSupply() public view returns (uint) {\r\n        return _totalSupply  - balances[address(0)];\r\n    }\r\n    function balanceOf(address tokenOwner) public view returns (uint balance) {\r\n        return balances[tokenOwner];\r\n    }\r\n    function transfer(address to, uint tokens) public returns (bool success) {\r\n        balances[msg.sender] = balances[msg.sender].sub(tokens);\r\n        balances[to] = balances[to].add(tokens);\r\n        emit Transfer(msg.sender, to, tokens);\r\n        return true;\r\n    }\r\n    function approve(address spender, uint tokens) public returns (bool success) {\r\n        allowed[msg.sender][spender] = tokens;\r\n        emit Approval(msg.sender, spender, tokens);\r\n        return true;\r\n    }\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\r\n        balances[from] = balances[from].sub(tokens);\r\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\r\n        balances[to] = balances[to].add(tokens);\r\n        emit Transfer(from, to, tokens);\r\n        return true;\r\n    }\r\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining) {\r\n        return allowed[tokenOwner][spender];\r\n    }\r\n    function approveAndCall(address spender, uint tokens, bytes memory data) public returns (bool success) {\r\n        allowed[msg.sender][spender] = tokens;\r\n        emit Approval(msg.sender, spender, tokens);\r\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);\r\n        return true;\r\n    }\r\n    function () external payable {\r\n        revert();\r\n    }\r\n    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\r\n        return ERC20Interface(tokenAddress).transfer(owner, tokens);\r\n    }\r\n}\r\n// ----------------------------------------------------------------------------\r\n// ----------------------------------------------------------------------------\r\n//           |||||||||||||||||||||||||||||||||||||\r\n//           ||78///PtPtPtPt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\||\r\n//           ||/////Pt//////Pt\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\||\r\n//           ||/////Pt//////Pt\\\\\\\\\\\\\\Pt\\\\\\\\\\\\\\\\\\||\r\n//           ||/////Pt//////Pt\\\\\\\\\\\\\\Pt\\\\\\\\\\\\\\\\\\||\r\n//           ||/////PtPtPtPt\\\\\\\\\\\\\\\\\\Pt\\\\\\\\\\\\\\\\\\||\r\n//           ||/////Pt/////////\\\\\\\\PtPtPtPtPt\\\\\\||\r\n//           ||/////Pt//////////\\\\\\\\\\Pt\\\\\\\\\\\\\\\\\\||\r\n//           ||/////Pt///////////\\\\\\\\Pt\\\\\\\\\\\\\\\\\\||\r\n//           ||/////Pt////////////\\\\\\\\Pt\\\\\\\\\\\\\\\\||\r\n//           ||/////Pt/////////////\\\\\\\\PtPtPt\\\\\\||\r\n//           ||///////////PLATINUM\\\\\\\\\\\\\\\\\\\\\\\\\\\\||\r\n//           ||////////////195.084\\\\\\\\\\\\\\\\\\\\\\\\\\\\||\r\n//           |||||||||||||||||||||||||||||||||||||\r\n// ----------------------------------------------------------------------------\r\n// ----------------------------------------------------------------------------\r\n// ----------------------------------------------------------------------------\r\n// ----------------------------------------------------------------------------\r\n// \u0027PLATINUM\u0027 contract\r\n// Mineable ERC20 Token using Proof Of Work\r\n//\r\n// Symbol      : \u0022Pt\u0022\r\n// Name        : \u0022PLATINUM\u0022\r\n// Total supply: \u002221,000,000.00\u0022\r\n// Decimals    : 15\r\n// ----------------------------------------------------------------------------\r\n// ----------------------------------------------------------------------------\r\ncontract PLATINUM is ERC20Interface, Owned {\r\n    using SafeMath for uint;\r\n    using ExtendedMath for uint;\r\n    string public symbol;\r\n    string public  name;\r\n    uint8 public decimals;\r\n    uint public _totalSupply;\r\n     uint public latestDifficultyPeriodStarted;\r\n    uint public epochCount;\r\n    uint public _BLOCKS_PER_READJUSTMENT = 1024;\r\n    uint public  _MINIMUM_TARGET = 2**16; \r\n    uint public  _MAXIMUM_TARGET = 2**234;\r\n    uint public miningTarget;\r\n    bytes32 public challengeNumber;\r\n    uint public rewardEra;\r\n    uint public maxSupplyForEra;\r\n    address public lastRewardTo;\r\n    uint public lastRewardAmount;\r\n    uint public lastRewardEthBlockNumber;\r\n    bool locked = false;\r\n    mapping(bytes32 =\u003E bytes32) solutionForChallenge;\r\n    uint public tokensMinted;\r\n    mapping(address =\u003E uint) balances;\r\n    mapping(address =\u003E mapping(address =\u003E uint)) allowed;\r\n    event Mint(address indexed from, uint reward_amount, uint epochCount, bytes32 newChallengeNumber);\r\n    constructor () public onlyOwner{\r\n        symbol = \u0022Pt\u0022;\r\n        name = \u0022PLATINUM\u0022;\r\n        decimals = 15;\r\n        _totalSupply = 21000000 * 17**uint(decimals);\r\n        if(locked) revert();\r\n        locked = true;\r\n        tokensMinted = 0;\r\n        rewardEra = 0;\r\n        maxSupplyForEra = _totalSupply.div(2);\r\n        miningTarget = _MAXIMUM_TARGET;\r\n        latestDifficultyPeriodStarted = block.number;\r\n        _startNewMiningEpoch();\r\n    }\r\n        function mint(uint256 nonce, bytes32 challenge_digest) public returns (bool success) {\r\n            bytes32 digest =  keccak256(abi.encodePacked(challengeNumber, msg.sender, nonce ));\r\n            if (digest != challenge_digest) revert();\r\n            if(uint256(digest) \u003E miningTarget) revert();\r\n             bytes32 solution = solutionForChallenge[challengeNumber];\r\n             solutionForChallenge[challengeNumber] = digest;\r\n             if(solution != 0x0) revert();\r\n            uint reward_amount = getMiningReward();\r\n            balances[msg.sender] = balances[msg.sender].add(reward_amount);\r\n            tokensMinted = tokensMinted.add(reward_amount);\r\n            assert(tokensMinted \u003C= maxSupplyForEra);\r\n            lastRewardTo = msg.sender;\r\n            lastRewardAmount = reward_amount;\r\n            lastRewardEthBlockNumber = block.number;\r\n             _startNewMiningEpoch();\r\n              emit Mint(msg.sender, reward_amount, epochCount, challengeNumber );\r\n           return true;\r\n        }\r\n    function _startNewMiningEpoch() internal {\r\n      if( tokensMinted.add(getMiningReward()) \u003E maxSupplyForEra \u0026\u0026 rewardEra \u003C 39)\r\n      {\r\n        rewardEra = rewardEra \u002B 1;\r\n      }\r\n      maxSupplyForEra = _totalSupply - _totalSupply.div( 2**(rewardEra \u002B 1));\r\n      epochCount = epochCount.add(1);\r\n      if(epochCount % _BLOCKS_PER_READJUSTMENT == 0)\r\n      {\r\n        _reAdjustDifficulty();\r\n      }\r\n      challengeNumber = blockhash(block.number - 1);\r\n        \r\n    }\r\n    function _reAdjustDifficulty() internal {\r\n        uint ethBlocksSinceLastDifficultyPeriod = block.number - latestDifficultyPeriodStarted;\r\n        uint epochsMined = _BLOCKS_PER_READJUSTMENT;\r\n        uint targetEthBlocksPerDiffPeriod = epochsMined * 60;\r\n        if( ethBlocksSinceLastDifficultyPeriod \u003C targetEthBlocksPerDiffPeriod ){\r\n          uint excess_block_pct = (targetEthBlocksPerDiffPeriod.mul(100)).div( ethBlocksSinceLastDifficultyPeriod );\r\n          uint excess_block_pct_extra = excess_block_pct.sub(100).limitLessThan(1000);\r\n          miningTarget = miningTarget.sub(miningTarget.div(2000).mul(excess_block_pct_extra));\r\n        }else{\r\n          uint shortage_block_pct = (ethBlocksSinceLastDifficultyPeriod.mul(100)).div( targetEthBlocksPerDiffPeriod );\r\n          uint shortage_block_pct_extra = shortage_block_pct.sub(100).limitLessThan(1000);\r\n          miningTarget = miningTarget.add(miningTarget.div(2000).mul(shortage_block_pct_extra));\r\n        }\r\n        latestDifficultyPeriodStarted = block.number;\r\n        if(miningTarget \u003C _MINIMUM_TARGET)\r\n        {\r\n          miningTarget = _MINIMUM_TARGET;\r\n        }\r\n        if(miningTarget \u003E _MAXIMUM_TARGET)\r\n        {\r\n          miningTarget = _MAXIMUM_TARGET;\r\n        }\r\n    }\r\n    function getChallengeNumber() public view returns (bytes32) {\r\n        return challengeNumber;\r\n    }\r\n     function getMiningDifficulty() public view returns (uint) {\r\n        return _MAXIMUM_TARGET.div(miningTarget);\r\n    }\r\n    function getMiningTarget() public view returns (uint) {\r\n       return miningTarget;\r\n   }\r\n    function getMiningReward() public view returns (uint) {\r\n         return (50 * 17**uint(decimals) ).div( 2**rewardEra ) ;\r\n    }\r\n    function getMintDigest(uint256 nonce, bytes32 challenge_number) public view returns (bytes32 digesttest) {\r\n        bytes32 digest = keccak256(abi.encodePacked(challenge_number,msg.sender,nonce));\r\n        return digest;\r\n        }\r\n      function checkMintSolution(uint256 nonce, bytes32 challenge_digest, bytes32 challenge_number, uint testTarget) public view returns (bool success) {\r\n          bytes32 digest = keccak256(abi.encodePacked(challenge_number,msg.sender,nonce));\r\n          if(uint256(digest) \u003E testTarget) revert();\r\n          return (digest == challenge_digest);\r\n        }\r\n    function totalSupply() public view returns (uint) {\r\n        return _totalSupply  - balances[address(0)];\r\n    }\r\n    function balanceOf(address tokenOwner) public view returns (uint balance) {\r\n        return balances[tokenOwner];\r\n    }\r\n    function transfer(address to, uint tokens) public returns (bool success) {\r\n        balances[msg.sender] = balances[msg.sender].sub(tokens);\r\n        balances[to] = balances[to].add(tokens);\r\n        emit Transfer(msg.sender, to, tokens);\r\n        return true;\r\n    }\r\n    function approve(address spender, uint tokens) public returns (bool success) {\r\n        allowed[msg.sender][spender] = tokens;\r\n        emit Approval(msg.sender, spender, tokens);\r\n        return true;\r\n    }\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\r\n        balances[from] = balances[from].sub(tokens);\r\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\r\n        balances[to] = balances[to].add(tokens);\r\n        emit Transfer(from, to, tokens);\r\n        return true;\r\n    }\r\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining) {\r\n        return allowed[tokenOwner][spender];\r\n    }\r\n    function approveAndCall(address spender, uint tokens, bytes memory data) public returns (bool success) {\r\n        allowed[msg.sender][spender] = tokens;\r\n        emit Approval(msg.sender, spender, tokens);\r\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);\r\n        return true;\r\n    }\r\n    function () external payable {\r\n        revert();\r\n    }\r\n    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\r\n        return ERC20Interface(tokenAddress).transfer(owner, tokens);\r\n    }\r\n}\r\n// ----------------------------------------------------------------------------\r\n// ----------------------------------------------------------------------------\r\n//           |||||||||||||||||||||||||||||||||||||\r\n//           ||78///PdPdPdPd////////////////////||\r\n//           ||/////Pd//////Pd/////////////Pd///||\r\n//           ||/////Pd//////Pd/////////////Pd///||\r\n//           ||/////Pd//////Pd/////////////Pd///||\r\n//           ||/////PdPdPdPd///////////////Pd///||\r\n//           ||/////Pd///////////////PdPdPdPd///||\r\n//           ||/////Pd/////////////Pd//////Pd///||\r\n//           ||/////Pd/////////////Pd//////Pd///||\r\n//           ||/////Pd/////////////Pd////PdPd///||\r\n//           ||/////Pd///////////////PdPd//Pd///||\r\n//           ||///////////PALLADIUM\\\\\\\\\\\\\\\\\\\\\\\\\\||\r\n//           ||////////////195.084\\\\\\\\\\\\\\\\\\\\\\\\\\\\||\r\n//           |||||||||||||||||||||||||||||||||||||\r\n// ----------------------------------------------------------------------------\r\n// ----------------------------------------------------------------------------\r\n// ----------------------------------------------------------------------------\r\n// ----------------------------------------------------------------------------\r\n// \u0027PALLADIUM\u0027 contract\r\n// Mineable ERC20 Token using Proof Of Work\r\n//\r\n// Symbol      : \u0022Pd\u0022\r\n// Name        : \u0022PALLADIUM\u0022\r\n// Total supply: \u002221,000,000.00\u0022\r\n// Decimals    : 15\r\n// ----------------------------------------------------------------------------\r\n// ----------------------------------------------------------------------------\r\ncontract PALLADIUM is ERC20Interface, Owned {\r\n    using SafeMath for uint;\r\n    using ExtendedMath for uint;\r\n    string public symbol;\r\n    string public  name;\r\n    uint8 public decimals;\r\n    uint public _totalSupply;\r\n     uint public latestDifficultyPeriodStarted;\r\n    uint public epochCount;\r\n    uint public _BLOCKS_PER_READJUSTMENT = 1024;\r\n    uint public  _MINIMUM_TARGET = 2**16; \r\n    uint public  _MAXIMUM_TARGET = 2**234;\r\n    uint public miningTarget;\r\n    bytes32 public challengeNumber;\r\n    uint public rewardEra;\r\n    uint public maxSupplyForEra;\r\n    address public lastRewardTo;\r\n    uint public lastRewardAmount;\r\n    uint public lastRewardEthBlockNumber;\r\n    bool locked = false;\r\n    mapping(bytes32 =\u003E bytes32) solutionForChallenge;\r\n    uint public tokensMinted;\r\n    mapping(address =\u003E uint) balances;\r\n    mapping(address =\u003E mapping(address =\u003E uint)) allowed;\r\n    event Mint(address indexed from, uint reward_amount, uint epochCount, bytes32 newChallengeNumber);\r\n    constructor () public onlyOwner{\r\n        symbol = \u0022Pd\u0022;\r\n        name = \u0022PALLADIUM\u0022;\r\n        decimals = 15;\r\n        _totalSupply = 21000000 * 17**uint(decimals);\r\n        if(locked) revert();\r\n        locked = true;\r\n        tokensMinted = 0;\r\n        rewardEra = 0;\r\n        maxSupplyForEra = _totalSupply.div(2);\r\n        miningTarget = _MAXIMUM_TARGET;\r\n        latestDifficultyPeriodStarted = block.number;\r\n        _startNewMiningEpoch();\r\n    }\r\n        function mint(uint256 nonce, bytes32 challenge_digest) public returns (bool success) {\r\n            bytes32 digest =  keccak256(abi.encodePacked(challengeNumber, msg.sender, nonce ));\r\n            if (digest != challenge_digest) revert();\r\n            if(uint256(digest) \u003E miningTarget) revert();\r\n             bytes32 solution = solutionForChallenge[challengeNumber];\r\n             solutionForChallenge[challengeNumber] = digest;\r\n             if(solution != 0x0) revert();\r\n            uint reward_amount = getMiningReward();\r\n            balances[msg.sender] = balances[msg.sender].add(reward_amount);\r\n            tokensMinted = tokensMinted.add(reward_amount);\r\n            assert(tokensMinted \u003C= maxSupplyForEra);\r\n            lastRewardTo = msg.sender;\r\n            lastRewardAmount = reward_amount;\r\n            lastRewardEthBlockNumber = block.number;\r\n             _startNewMiningEpoch();\r\n              emit Mint(msg.sender, reward_amount, epochCount, challengeNumber );\r\n           return true;\r\n        }\r\n    function _startNewMiningEpoch() internal {\r\n      if( tokensMinted.add(getMiningReward()) \u003E maxSupplyForEra \u0026\u0026 rewardEra \u003C 39)\r\n      {\r\n        rewardEra = rewardEra \u002B 1;\r\n      }\r\n      maxSupplyForEra = _totalSupply - _totalSupply.div( 2**(rewardEra \u002B 1));\r\n      epochCount = epochCount.add(1);\r\n      if(epochCount % _BLOCKS_PER_READJUSTMENT == 0)\r\n      {\r\n        _reAdjustDifficulty();\r\n      }\r\n      challengeNumber = blockhash(block.number - 1);\r\n        \r\n    }\r\n    function _reAdjustDifficulty() internal {\r\n        uint ethBlocksSinceLastDifficultyPeriod = block.number - latestDifficultyPeriodStarted;\r\n        uint epochsMined = _BLOCKS_PER_READJUSTMENT;\r\n        uint targetEthBlocksPerDiffPeriod = epochsMined * 60;\r\n        if( ethBlocksSinceLastDifficultyPeriod \u003C targetEthBlocksPerDiffPeriod ){\r\n          uint excess_block_pct = (targetEthBlocksPerDiffPeriod.mul(100)).div( ethBlocksSinceLastDifficultyPeriod );\r\n          uint excess_block_pct_extra = excess_block_pct.sub(100).limitLessThan(1000);\r\n          miningTarget = miningTarget.sub(miningTarget.div(2000).mul(excess_block_pct_extra));\r\n        }else{\r\n          uint shortage_block_pct = (ethBlocksSinceLastDifficultyPeriod.mul(100)).div( targetEthBlocksPerDiffPeriod );\r\n          uint shortage_block_pct_extra = shortage_block_pct.sub(100).limitLessThan(1000);\r\n          miningTarget = miningTarget.add(miningTarget.div(2000).mul(shortage_block_pct_extra));\r\n        }\r\n        latestDifficultyPeriodStarted = block.number;\r\n        if(miningTarget \u003C _MINIMUM_TARGET)\r\n        {\r\n          miningTarget = _MINIMUM_TARGET;\r\n        }\r\n        if(miningTarget \u003E _MAXIMUM_TARGET)\r\n        {\r\n          miningTarget = _MAXIMUM_TARGET;\r\n        }\r\n    }\r\n    function getChallengeNumber() public view returns (bytes32) {\r\n        return challengeNumber;\r\n    }\r\n     function getMiningDifficulty() public view returns (uint) {\r\n        return _MAXIMUM_TARGET.div(miningTarget);\r\n    }\r\n    function getMiningTarget() public view returns (uint) {\r\n       return miningTarget;\r\n   }\r\n    function getMiningReward() public view returns (uint) {\r\n         return (50 * 17**uint(decimals) ).div( 2**rewardEra ) ;\r\n    }\r\n    function getMintDigest(uint256 nonce, bytes32 challenge_number) public view returns (bytes32 digesttest) {\r\n        bytes32 digest = keccak256(abi.encodePacked(challenge_number,msg.sender,nonce));\r\n        return digest;\r\n        }\r\n      function checkMintSolution(uint256 nonce, bytes32 challenge_digest, bytes32 challenge_number, uint testTarget) public view returns (bool success) {\r\n          bytes32 digest = keccak256(abi.encodePacked(challenge_number,msg.sender,nonce));\r\n          if(uint256(digest) \u003E testTarget) revert();\r\n          return (digest == challenge_digest);\r\n        }\r\n    function totalSupply() public view returns (uint) {\r\n        return _totalSupply  - balances[address(0)];\r\n    }\r\n    function balanceOf(address tokenOwner) public view returns (uint balance) {\r\n        return balances[tokenOwner];\r\n    }\r\n    function transfer(address to, uint tokens) public returns (bool success) {\r\n        balances[msg.sender] = balances[msg.sender].sub(tokens);\r\n        balances[to] = balances[to].add(tokens);\r\n        emit Transfer(msg.sender, to, tokens);\r\n        return true;\r\n    }\r\n    function approve(address spender, uint tokens) public returns (bool success) {\r\n        allowed[msg.sender][spender] = tokens;\r\n        emit Approval(msg.sender, spender, tokens);\r\n        return true;\r\n    }\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\r\n        balances[from] = balances[from].sub(tokens);\r\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\r\n        balances[to] = balances[to].add(tokens);\r\n        emit Transfer(from, to, tokens);\r\n        return true;\r\n    }\r\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining) {\r\n        return allowed[tokenOwner][spender];\r\n    }\r\n    function approveAndCall(address spender, uint tokens, bytes memory data) public returns (bool success) {\r\n        allowed[msg.sender][spender] = tokens;\r\n        emit Approval(msg.sender, spender, tokens);\r\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);\r\n        return true;\r\n    }\r\n    function () external payable {\r\n        revert();\r\n    }\r\n    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\r\n        return ERC20Interface(tokenAddress).transfer(owner, tokens);\r\n    }\r\n}","ABI":"[{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022name\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022spender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022tokens\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022approve\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022success\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022lastRewardEthBlockNumber\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022getMiningDifficulty\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022nonce\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022challenge_digest\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022mint\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022success\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022totalSupply\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022from\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022tokens\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022transferFrom\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022success\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022rewardEra\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022decimals\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint8\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022getMiningTarget\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022_totalSupply\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022getMiningReward\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022getChallengeNumber\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022maxSupplyForEra\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022tokensMinted\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022lastRewardTo\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022tokenOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022balanceOf\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022balance\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022acceptOwnership\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022nonce\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022challenge_digest\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022name\u0022:\u0022challenge_number\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022name\u0022:\u0022testTarget\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022checkMintSolution\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022success\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022epochCount\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022_MAXIMUM_TARGET\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022miningTarget\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022challengeNumber\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022owner\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022symbol\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022nonce\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022challenge_number\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022getMintDigest\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022digesttest\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022tokens\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022transfer\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022success\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022_BLOCKS_PER_READJUSTMENT\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022lastRewardAmount\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022spender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022tokens\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022data\u0022,\u0022type\u0022:\u0022bytes\u0022}],\u0022name\u0022:\u0022approveAndCall\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022success\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022latestDifficultyPeriodStarted\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022newOwner\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022tokenAddress\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022tokens\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022transferAnyERC20Token\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022success\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022_MINIMUM_TARGET\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022tokenOwner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022spender\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022allowance\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022remaining\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022transferOwnership\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022constructor\u0022},{\u0022payable\u0022:true,\u0022stateMutability\u0022:\u0022payable\u0022,\u0022type\u0022:\u0022fallback\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022from\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022reward_amount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022epochCount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022newChallengeNumber\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022Mint\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022_from\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022_to\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022OwnershipTransferred\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022from\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022tokens\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022Transfer\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022tokenOwner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022spender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022tokens\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022Approval\u0022,\u0022type\u0022:\u0022event\u0022}]","ContractName":"GOLD","CompilerVersion":"v0.5.1\u002Bcommit.c8a2cb62","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://131f08aa38752c50915af24104187297651c3b67c0847b90ebadc6b65efa2e32"}]