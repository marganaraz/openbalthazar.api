[{"SourceCode":"pragma solidity ^0.5.11;\r\n\r\n/**\r\n * @dev Wrappers over Solidity\u0027s arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * \u0060SafeMath\u0060 restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it\u0027s recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060\u002B\u0060 operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a \u002B b;\r\n        require(c \u003E= a, \u0022SafeMath: addition overflow\u0022);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060-\u0060 operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b \u003C= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060*\u0060 operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\r\n        // benefit is lost if \u0027b\u0027 is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \u0022SafeMath: multiplication overflow\u0022);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060/\u0060 operator. Note: this function uses a\r\n     * \u0060revert\u0060 opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b \u003E 0, errorMessage);\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * \u0060onlyOwner\u0060, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable {\r\n    address public owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \u0022Ownable: caller is not the owner\u0022);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (\u0060newOwner\u0060).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0), \u0022Ownable: new owner is the zero address\u0022);\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface of ISKRA\u0027s contract.\r\n * https://etherscan.io/address/0xAab80423dAA0334aBA8f16726677c23619E38773\r\n */\r\ninterface ISKRA {\r\n    function transfer(address to, uint256 tokens) external returns (bool success);\r\n    function transferFrom(address from, address to, uint256 tokens) external returns (bool success);\r\n}\r\n\r\ncontract Logic is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    struct Position {\r\n        string name;\r\n        string description;\r\n        string imageUrl;\r\n        string link;\r\n        uint256 capInUSD;\r\n        uint256 votePriceInTokens;\r\n        uint256 voteYes;\r\n        uint256 voteNo;\r\n        bool archived;\r\n        uint256 finishedAt;\r\n        uint256 createdAt;\r\n    }\r\n\r\n    Position[] positions;\r\n    ISKRA public iskraToken;\r\n    mapping(address =\u003E mapping(uint256 =\u003E uint256)) private isVoted;\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the iskra token.\r\n     */\r\n    constructor(address _token) public {\r\n        iskraToken = ISKRA(_token);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the result of converting bytes to two uint256 numbers.\r\n     */\r\n    function parse64BytesToTwoUint256(bytes memory data) public pure returns(uint256, uint256) {\r\n        uint256 parsed1;\r\n        uint256 parsed2;\r\n        assembly {\r\n\t        parsed1 := mload(add(data, 32))\r\n\t        parsed2 := mload(add(data, 64))\r\n        }\r\n        return (parsed1, parsed2);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the result of converting two uint256 numbers to bytes.\r\n     */\r\n    function parseTwoUint256ToBytes(uint256 x, uint256 y) public pure returns (bytes memory b) {\r\n        b = new bytes(64);\r\n        assembly {\r\n            mstore(add(b, 32), x)\r\n            mstore(add(b, 64), y)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev If all conditions are pass, this method transfers tokens(position price) from specific participant and records vote\r\n     */\r\n    function receiveApproval(address _from, uint256 _tokens, address _token, bytes memory _data) public {\r\n        (uint256 toPosition, uint256 voteStatus) = parse64BytesToTwoUint256(_data);\r\n        require(isVoted[_from][toPosition] == 0, \u0022User has already voted\u0022);\r\n        require(_tokens == positions[toPosition].votePriceInTokens, \u0022Not enough tokens for this position\u0022);\r\n        require(positions[toPosition].finishedAt \u003E now, \u0022Position time is expired\u0022);\r\n\r\n        ISKRA(_token).transferFrom(_from, address(this), _tokens);\r\n        _vote(toPosition, voteStatus, _from);\r\n    }\r\n\r\n    /**\r\n     * @dev Implementation of voting logic\r\n     */\r\n    function _vote(uint256 toPosition, uint256 voteStatus, address _from) internal {\r\n        require(voteStatus == 1 || voteStatus == 2, \u0022Invalid vote status\u0022);\r\n        if (voteStatus == 2) {\r\n            positions[toPosition].voteYes = positions[toPosition].voteYes.add(1);\r\n            isVoted[_from][toPosition] = voteStatus;\r\n        } else {\r\n            positions[toPosition].voteNo = positions[toPosition].voteNo.add(1);\r\n            isVoted[_from][toPosition] = voteStatus;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Allow contract\u0027s owner to create a new position\r\n     */\r\n    function addNewPostition(\r\n        string memory _name,\r\n        string memory _description,\r\n        string memory _imageUrl,\r\n        string memory _link,\r\n        uint256 _capInUSD,\r\n        uint256 _votePriceInTokens,\r\n        uint256 _finishedAt\r\n    ) public onlyOwner {\r\n        Position memory newPosition = Position({\r\n            name: _name,\r\n            description: _description,\r\n            imageUrl: _imageUrl,\r\n            link: _link,\r\n            capInUSD: _capInUSD,\r\n            votePriceInTokens: _votePriceInTokens,\r\n            finishedAt: _finishedAt,\r\n            createdAt: block.timestamp,\r\n            voteYes: 0,\r\n            voteNo: 0,\r\n            archived: false\r\n        });\r\n        positions.push(newPosition);\r\n    }\r\n\r\n    /**\r\n     * @dev Allow contract\u0027s owner to edit specific position\r\n     */\r\n    function editPosition(\r\n        uint256 _positionIndex,\r\n        string memory _name,\r\n        string memory _description,\r\n        string memory _imageUrl,\r\n        string memory _link,\r\n        uint256 _capInUSD,\r\n        uint256 _votePriceInTokens,\r\n        uint256 _finishedAt\r\n    ) public onlyOwner {\r\n        positions[_positionIndex].name = _name;\r\n        positions[_positionIndex].description = _description;\r\n        positions[_positionIndex].imageUrl = _imageUrl;\r\n        positions[_positionIndex].link = _link;\r\n        positions[_positionIndex].capInUSD = _capInUSD;\r\n        positions[_positionIndex].votePriceInTokens = _votePriceInTokens;\r\n        positions[_positionIndex].finishedAt = _finishedAt;\r\n    }\r\n\r\n    /**\r\n     * @dev Allow contract\u0027s owner to withdraw specific amount of ISKRA tokens from this contract\r\n     */\r\n    function withdrawTokens(address _wallet, uint256 _tokens) public onlyOwner {\r\n        iskraToken.transfer(_wallet, _tokens);\r\n    }\r\n\r\n    /**\r\n     * @dev Allow contract\u0027s owner to change archive status of specific position\r\n     */\r\n    function changeStatus(uint256 toPosition) public onlyOwner {\r\n        positions[toPosition].archived = !positions[toPosition].archived;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns amount of all positions\r\n     */\r\n    function positionAmount() public view returns(uint256) {\r\n        return positions.length;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns strings details of specific postions\r\n     * This functionality is divided into two methods because solidity compiler has limit of returned values\r\n     */\r\n    function positionDetails(uint256 _index) public view returns(\r\n        string memory name,\r\n        string memory description,\r\n        string memory imageUrl,\r\n        string memory link,\r\n        bool archived\r\n    ) {\r\n        return (\r\n            positions[_index].name,\r\n            positions[_index].description,\r\n            positions[_index].imageUrl,\r\n            positions[_index].link,\r\n            positions[_index].archived\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Returns numbers details of specific postions\r\n     * This functionality is divided into two methods because solidity compiler has limit of returned values\r\n     */\r\n    function postionNumbers(uint256 _index) public view returns(\r\n        uint256 capInUSD,\r\n        uint256 votePriceInTokens,\r\n        uint256 finishedAt,\r\n        uint256 createdAt,\r\n        uint256 voteYes,\r\n        uint256 voteNo\r\n    ) {\r\n        return (\r\n            positions[_index].capInUSD,\r\n            positions[_index].votePriceInTokens,\r\n            positions[_index].finishedAt,\r\n            positions[_index].createdAt,\r\n            positions[_index].voteYes,\r\n            positions[_index].voteNo\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Returns voting result of specific participant\r\n     */\r\n    function voterInfo(address _voter, uint256 _position) public view returns(uint256) {\r\n        return isVoted[_voter][_position];\r\n    }\r\n}","ABI":"[{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_wallet\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_tokens\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022withdrawTokens\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_index\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022positionDetails\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022string\u0022,\u0022name\u0022:\u0022name\u0022,\u0022type\u0022:\u0022string\u0022},{\u0022internalType\u0022:\u0022string\u0022,\u0022name\u0022:\u0022description\u0022,\u0022type\u0022:\u0022string\u0022},{\u0022internalType\u0022:\u0022string\u0022,\u0022name\u0022:\u0022imageUrl\u0022,\u0022type\u0022:\u0022string\u0022},{\u0022internalType\u0022:\u0022string\u0022,\u0022name\u0022:\u0022link\u0022,\u0022type\u0022:\u0022string\u0022},{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022archived\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022bytes\u0022,\u0022name\u0022:\u0022data\u0022,\u0022type\u0022:\u0022bytes\u0022}],\u0022name\u0022:\u0022parse64BytesToTwoUint256\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022pure\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_positionIndex\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022string\u0022,\u0022name\u0022:\u0022_name\u0022,\u0022type\u0022:\u0022string\u0022},{\u0022internalType\u0022:\u0022string\u0022,\u0022name\u0022:\u0022_description\u0022,\u0022type\u0022:\u0022string\u0022},{\u0022internalType\u0022:\u0022string\u0022,\u0022name\u0022:\u0022_imageUrl\u0022,\u0022type\u0022:\u0022string\u0022},{\u0022internalType\u0022:\u0022string\u0022,\u0022name\u0022:\u0022_link\u0022,\u0022type\u0022:\u0022string\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_capInUSD\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_votePriceInTokens\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_finishedAt\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022editPosition\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022iskraToken\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022contract ISKRA\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022string\u0022,\u0022name\u0022:\u0022_name\u0022,\u0022type\u0022:\u0022string\u0022},{\u0022internalType\u0022:\u0022string\u0022,\u0022name\u0022:\u0022_description\u0022,\u0022type\u0022:\u0022string\u0022},{\u0022internalType\u0022:\u0022string\u0022,\u0022name\u0022:\u0022_imageUrl\u0022,\u0022type\u0022:\u0022string\u0022},{\u0022internalType\u0022:\u0022string\u0022,\u0022name\u0022:\u0022_link\u0022,\u0022type\u0022:\u0022string\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_capInUSD\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_votePriceInTokens\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_finishedAt\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022addNewPostition\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022x\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022y\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022parseTwoUint256ToBytes\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bytes\u0022,\u0022name\u0022:\u0022b\u0022,\u0022type\u0022:\u0022bytes\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022pure\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022owner\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_from\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_tokens\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_token\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022bytes\u0022,\u0022name\u0022:\u0022_data\u0022,\u0022type\u0022:\u0022bytes\u0022}],\u0022name\u0022:\u0022receiveApproval\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_index\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022postionNumbers\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022capInUSD\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022votePriceInTokens\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022finishedAt\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022createdAt\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022voteYes\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022voteNo\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_voter\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_position\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022voterInfo\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022toPosition\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022changeStatus\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022transferOwnership\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022positionAmount\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_token\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022constructor\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022previousOwner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022OwnershipTransferred\u0022,\u0022type\u0022:\u0022event\u0022}]","ContractName":"Logic","CompilerVersion":"v0.5.11\u002Bcommit.c082d0b4","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000aab80423daa0334aba8f16726677c23619e38773","Library":"","SwarmSource":"bzzr://fe3a2d64c092622a68114f8ad0704cac1289925ad31cb741c1e0a2cc77f2dffe"}]