[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMathLibrary {\r\n    /**\r\n    * @dev Multiplies two unsigned integers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\r\n        // benefit is lost if \u0027b\u0027 is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b \u003E 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c \u002B a % b); // There is no case in which this doesn\u0027t hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b \u003C= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two unsigned integers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a \u002B b;\r\n        require(c \u003E= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @title IERC20Token\r\n * @dev Standard ERC-20 interface used to interact with BIDL.\r\n */\r\ninterface IERC20Token {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address who) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Burn(address indexed from, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title DistributionPool\r\n * @dev Contract used to lock investor\u0027s ETH and distribute the BIDL tokens.\r\n */\r\ncontract DistributionPool {\r\n    \r\n    using SafeMathLibrary for uint256;\r\n    \r\n    event WeiPerBIDL(uint256 value);\r\n    event Activated();\r\n    event Unlock(uint256 amountBIDL, uint256 amountWei);\r\n    \r\n    // Reference variable to a BIDL smart contract.\r\n    IERC20Token private _bidlToken;\r\n    \r\n    // Pool participant address.\r\n    address payable private _poolParticipant;\r\n    \r\n    // Authorized Blockbid adminisrator.\r\n    address private _blockbidAdmin; //0x8bfbaf7F61946a847E8740970b93B95096F95867;\r\n    \r\n    // Amount of ETH that will be unlocked per each BIDL released.\r\n    uint256 private _weiPerBidl = (100 * 1e18) / (1000000 * 1e2);\r\n    \r\n    // Maximum amount of staked ETH (in wei units).\r\n    uint256 private _maxBalanceWei = 1000 ether;\r\n    \r\n    // Turns on the ability of the contract to unlock BIDL tokens and ETH.\r\n    bool private _activated = false;\r\n    \r\n    modifier onlyBlockbidAdmin() {\r\n        require(_blockbidAdmin == msg.sender);\r\n        _;\r\n    }\r\n    \r\n    modifier onlyWhenActivated() {\r\n        require(_activated);\r\n        _;\r\n    }\r\n\r\n    function bidlToken() public view returns (IERC20Token) {\r\n        return _bidlToken;\r\n    }\r\n\r\n    function poolParticipant() public view returns (address) {\r\n        return _poolParticipant;\r\n    }\r\n\r\n    function blockbidAdmin() public view returns (address) {\r\n        return _blockbidAdmin;\r\n    }\r\n\r\n    function weiPerBidl() public view returns (uint256) {\r\n        return _weiPerBidl;\r\n    }\r\n\r\n    function maxBalanceWei() public view returns (uint256) {\r\n        return _maxBalanceWei;\r\n    }\r\n\r\n    function isActivated() public view returns (bool) {\r\n        return _activated;\r\n    }\r\n    \r\n    function setWeiPerBIDL(uint256 value) public onlyBlockbidAdmin {\r\n        _weiPerBidl = value;  \r\n        emit WeiPerBIDL(value);\r\n    }\r\n\r\n    // Used by Blockbid admin to calculate amount of BIDL to deposit in the contract.\r\n    function admin_getBidlAmountToDeposit() public view returns (uint256) {\r\n        uint256 weiBalance = address(this).balance;\r\n        uint256 bidlAmountSupposedToLock = weiBalance / _weiPerBidl;\r\n        uint256 bidlBalance = _bidlToken.balanceOf(address(this));\r\n        if (bidlAmountSupposedToLock \u003C bidlBalance) {\r\n            return 0;\r\n        }\r\n        return bidlAmountSupposedToLock - bidlBalance;\r\n    }\r\n    \r\n    // Called by Blockbid admin to release the ETH and part of the BIDL tokens.\r\n    function admin_unlock(uint256 amountBIDL) public onlyBlockbidAdmin onlyWhenActivated {\r\n        _bidlToken.transfer(_poolParticipant, amountBIDL);\r\n        \r\n        uint256 weiToUnlock = _weiPerBidl * amountBIDL;\r\n        _poolParticipant.transfer(weiToUnlock);\r\n        \r\n        emit Unlock(amountBIDL, weiToUnlock);\r\n    }\r\n    \r\n    // Prevent any further deposits and start distribution phase.\r\n    function admin_activate() public onlyBlockbidAdmin {\r\n        require(_poolParticipant != address(0));\r\n        require(!_activated);\r\n        _activated = true;\r\n\t\temit Activated();\r\n    }\r\n    \r\n    // Can be used by Blockbid admin to destroy the contract and return all funds to investors.\r\n    function admin_destroy() public onlyBlockbidAdmin {\r\n        // Drain all BIDL back into Blockbid\u0027s admin address.\r\n        uint256 bidlBalance = _bidlToken.balanceOf(address(this));\r\n        _bidlToken.transfer(_blockbidAdmin, bidlBalance);\r\n\r\n        // Destroy the contract.\r\n        selfdestruct(_poolParticipant);\r\n    }\r\n    \r\n    // Process ETH coming from the pool participant address.\r\n    function () external payable {\r\n        // Do not allow changing participant address after it has been set.\r\n        if (_poolParticipant != address(0) \u0026\u0026 _poolParticipant != msg.sender) {\r\n            revert();\r\n        }\r\n\r\n        // Do not allow top-ups if the contract had been activated.\r\n        if (_activated) {\r\n            revert();\r\n        }\r\n\t\t\r\n\t\tuint256 weiBalance = address(this).balance;\r\n\t\t\r\n\t\t// Refund excessive ETH.\r\n\t\tif (weiBalance \u003E _maxBalanceWei) {\r\n\t\t    uint256 excessiveWei = weiBalance.sub(_maxBalanceWei);\r\n\t\t    msg.sender.transfer(excessiveWei);\r\n\t\t    weiBalance = _maxBalanceWei;\r\n\t\t}\r\n\t\t\r\n\t\tif (_poolParticipant != msg.sender) \r\n\t\t    _poolParticipant = msg.sender;\r\n    }\r\n\t\r\n\tconstructor () public\r\n\t{\r\n        _blockbidAdmin = 0x8bfbaf7F61946a847E8740970b93B95096F95867;\r\n        _bidlToken = IERC20Token(0x5C7Ec304a60ED545518085bb4aBa156E8a7596F6);\r\n\t}\r\n}","ABI":"[{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022blockbidAdmin\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022weiPerBidl\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022isActivated\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022admin_activate\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022admin_getBidlAmountToDeposit\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022maxBalanceWei\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022bidlToken\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022contract IERC20Token\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022setWeiPerBIDL\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022amountBIDL\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022admin_unlock\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022admin_destroy\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022poolParticipant\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022constructor\u0022},{\u0022payable\u0022:true,\u0022stateMutability\u0022:\u0022payable\u0022,\u0022type\u0022:\u0022fallback\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022WeiPerBIDL\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022Activated\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022amountBIDL\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022amountWei\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022Unlock\u0022,\u0022type\u0022:\u0022event\u0022}]","ContractName":"DistributionPool","CompilerVersion":"v0.5.11\u002Bcommit.c082d0b4","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://1ae3f74376bec658dc004f10538594b218177997345c894f0fbfc9192eba38c1"}]