[{"SourceCode":"pragma solidity ^0.5.0;\r\n// produced by the Solididy File Flattener (c) David Appleton 2018\r\n// contact : dave@akomba.com\r\n// released under Apache 2.0 licence\r\n// input  /home/dave/Documents/gotests/auctionTests/auction/auction_reveal_list.sol\r\n// flattened :  Tuesday, 27-Aug-19 13:53:00 UTC\r\ncontract Ownable {\r\n  address payable private _owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == _owner, \u0022Forbidden\u0022);\r\n    _;\r\n  }\r\n\r\n  constructor() public {\r\n    _owner = msg.sender;\r\n  }\r\n\r\n  function owner() public view returns (address payable) {\r\n    return _owner;\r\n  }\r\n\r\n  function transferOwnership(address payable newOwner) public onlyOwner {\r\n    require(newOwner != address(0), \u0022Non-zero address required.\u0022);\r\n    emit OwnershipTransferred(_owner, newOwner);\r\n    _owner = newOwner;\r\n  }\r\n}\r\n\r\ninterface IERC20 {\r\n  /**\r\n   * @dev Returns the amount of tokens in existence.\r\n   */\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Returns the amount of tokens owned by \u0060account\u0060.\r\n   */\r\n  function balanceOf(address account) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Moves \u0060amount\u0060 tokens from the caller\u0027s account to \u0060recipient\u0060.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Returns the remaining number of tokens that \u0060spender\u0060 will be\r\n   * allowed to spend on behalf of \u0060owner\u0060 through {transferFrom}. This is\r\n   * zero by default.\r\n   *\r\n   * This value changes when {approve} or {transferFrom} are called.\r\n   */\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Sets \u0060amount\u0060 as the allowance of \u0060spender\u0060 over the caller\u0027s tokens.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n   * that someone may use both the old and the new allowance by unfortunate\r\n   * transaction ordering. One possible solution to mitigate this race\r\n   * condition is to first reduce the spender\u0027s allowance to 0 and set the\r\n   * desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   *\r\n   * Emits an {Approval} event.\r\n   */\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Moves \u0060amount\u0060 tokens from \u0060sender\u0060 to \u0060recipient\u0060 using the\r\n   * allowance mechanism. \u0060amount\u0060 is then deducted from the caller\u0027s\r\n   * allowance.\r\n   *\r\n   * Returns a boolean value indicating whether the operation succeeded.\r\n   *\r\n   * Emits a {Transfer} event.\r\n   */\r\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n  /**\r\n   * @dev Emitted when \u0060value\u0060 tokens are moved from one account (\u0060from\u0060) to\r\n   * another (\u0060to\u0060).\r\n   *\r\n   * Note that \u0060value\u0060 may be zero.\r\n   */\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n  /**\r\n   * @dev Emitted when the allowance of a \u0060spender\u0060 for an \u0060owner\u0060 is set by\r\n   * a call to {approve}. \u0060value\u0060 is the new allowance.\r\n   */\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract auction is Ownable {\r\n\r\n    struct data {\r\n        bytes32 hashValue;\r\n        uint256 value;\r\n        bool    haveBid;\r\n        bool    revealed;\r\n        bool    refunded;\r\n        bool    flagged;\r\n        uint256 bid;\r\n    }\r\n\r\n    mapping (address =\u003E data) public information;\r\n    mapping (uint256 =\u003E address[]) public reveals;\r\n    mapping (address =\u003E bool) private done;\r\n    uint256[] private revealedValues;\r\n\r\n    uint256 private startBids;\r\n    uint256 private endBids;\r\n    uint256 private startReveal;\r\n    uint256 private endReveal;\r\n\r\n    uint256 private startWithdraw;\r\n    uint256 private endWithdraw;\r\n\r\n    uint256 private winningAmount;\r\n\r\n    uint256 public  minimumBid;\r\n\r\n    address payable private  wallet;\r\n\r\n    event  MinimumBid(uint256 _minimumBid);\r\n\r\n    event BiddingPeriod( uint256 startBids, uint256 endBids);\r\n    event RevealPeriod( uint256 startReveal, uint256 endReveal);\r\n    event WithdrawPeriod( uint256 startWithdraw, uint256 endWithdraw);\r\n\r\n\r\n    event BidSubmitted(address bidder, uint256 funding, bytes32 hash);\r\n    event BidRevealed(address bidder, uint256 bid);\r\n\r\n    event WinningAmount(uint256 winningAmount);\r\n    event WinnerWithTie(address tiedWinner);\r\n    event Refund(address bidder, uint256 refund);\r\n    event NothingToRefund(address bidder);\r\n    event RefundChange(address bidder, uint256 change);\r\n\r\n    event BalanceWithdrawn(address recipient,uint256 amount);\r\n\r\n    event Wallet(address _wallet);\r\n\r\n    modifier duringBidding {\r\n        require(now \u003E= startBids,\u0022Bidding not started yet\u0022);\r\n        require(now \u003C endBids,\u0022Bidding has ended\u0022);\r\n        _;\r\n    }\r\n\r\n    modifier duringReveal {\r\n        require(now \u003E= startReveal,\u0022Reveal not started yet\u0022);\r\n        require(now \u003C endReveal,\u0022Reveal has ended\u0022);\r\n        _;\r\n    }\r\n\r\n    modifier afterReveal {\r\n        require(now \u003E endReveal,\u0022Reveal has not ended yet\u0022);\r\n        _;\r\n    }\r\n\r\n    modifier duringWithdraw {\r\n        require(now \u003E startWithdraw,\u0022Withdraw has not started yet\u0022);\r\n        require(now \u003C endWithdraw,\u0022Withdraw period over\u0022);\r\n        _;\r\n    }\r\n\r\n    modifier afterWithdraw {\r\n        require(now \u003E endWithdraw,\u0022Withdraw period over\u0022);\r\n        _;\r\n    }\r\n\r\n    constructor(uint256 _startBids, uint256 _endBids, uint256 _startReveal, uint256 _endReveal, uint256 _minimumBid, address payable _wallet)\r\n    public {\r\n        require(_startBids != 0, \u0022dates must be non zero\u0022);\r\n        require(_endBids != 0, \u0022dates must be non zero\u0022);\r\n        require(_startReveal != 0, \u0022dates must be non zero\u0022);\r\n        require(_endReveal != 0, \u0022dates must be non zero\u0022);\r\n        require(_minimumBid != 0, \u0022minimum bid must be non zero\u0022);\r\n        require(_wallet != address(0), \u0022Invalid wallet address\u0022);\r\n\r\n        startBids = _startBids;\r\n        endBids = _endBids;\r\n        startReveal = _startReveal;\r\n        endReveal = _endReveal;\r\n        minimumBid = _minimumBid;\r\n        wallet = _wallet;\r\n\r\n        emit BiddingPeriod(startBids,endBids);\r\n        emit RevealPeriod(startReveal,endReveal);\r\n        emit MinimumBid(minimumBid);\r\n        emit Wallet(wallet);\r\n    }\r\n\r\n\r\n    function biddingTime(bytes32 _hash) public payable duringBidding {\r\n        require(! information[msg.sender].haveBid, \u0022only one bid per address\u0022);\r\n        require(msg.value \u003E minimumBid,\u0022Amount sent is less than minimum bid\u0022);\r\n\r\n        data storage myData = information[msg.sender];\r\n        myData.hashValue = _hash;\r\n        myData.value = msg.value;\r\n        myData.haveBid = true;\r\n\r\n        emit BidSubmitted(msg.sender, msg.value, _hash);\r\n    }\r\n\r\n    function reveal(uint256 _bid, bytes memory randString) public duringReveal {\r\n        bytes32 myHash = calculateHash(_bid,randString);\r\n        data storage myData = information[msg.sender];\r\n        require(myHash == myData.hashValue, \u0022hashes do not match\u0022);\r\n        require(_bid \u003C= myData.value,\u0022Bid not valid\u0022);\r\n        require(_bid \u003E= minimumBid,\u0022Bid was less than minimum bid\u0022);\r\n        require(!myData.revealed,\u0022Bid already revealed\u0022);\r\n\r\n        myData.bid = _bid;\r\n        myData.revealed = true;\r\n\r\n        uint256 newLen = reveals[_bid].push(msg.sender);\r\n        if (newLen == 1) {\r\n            revealedValues.push(_bid);\r\n        }\r\n\r\n        emit BidRevealed(msg.sender,_bid);\r\n    }\r\n\r\n    function setWinningAmount(uint256 _winningAmount) public onlyOwner afterReveal {\r\n        winningAmount = _winningAmount;\r\n\r\n        emit WinningAmount(winningAmount);\r\n    }\r\n\r\n    function setWinningAddresses(address[] memory theAddresses,bool flagged) public onlyOwner  afterReveal{\r\n        uint256 pos;\r\n        for (pos = 0; pos \u003C theAddresses.length; pos\u002B\u002B) {\r\n            information[theAddresses[pos]].flagged = flagged;\r\n            emit WinnerWithTie(theAddresses[pos]);\r\n        }\r\n    }\r\n\r\n    function startWithdrawal(uint256 _startWithdraw, uint256 _endWithdraw) public onlyOwner {\r\n        require(winningAmount \u003E 0,\u0022Winning Amount Not Set\u0022);\r\n        require(_startWithdraw \u003E now,\u0022Cannot start withdrawal in the past\u0022);\r\n\r\n        startWithdraw = _startWithdraw;\r\n        endWithdraw = _endWithdraw;\r\n\r\n        emit WithdrawPeriod(startWithdraw,endWithdraw);\r\n    }\r\n\r\n    function withdrawRefund() public duringWithdraw {\r\n        data storage myData = information[msg.sender];\r\n        require(myData.bid \u003E 0,\u0022No bid submitted\u0022);\r\n        require(myData.revealed,\u0022bid was not revealed\u0022);\r\n        require(!myData.refunded,\u0022Already refunded\u0022);\r\n\r\n        myData.refunded = true;\r\n        uint withdraw;\r\n        bool winner;\r\n        (withdraw,winner) = withdrawalAmount(msg.sender);\r\n\r\n        if (!winner) {\r\n            emit Refund(msg.sender,withdraw);\r\n        } else if (withdraw \u003E 0){\r\n            emit RefundChange(msg.sender,withdraw);\r\n        } else {\r\n            emit NothingToRefund(msg.sender);\r\n        }\r\n        if (withdraw \u003E 0) {\r\n            msg.sender.transfer(withdraw);\r\n        }\r\n    }\r\n\r\n    function earlyWithdrawal(address[] memory winners) public onlyOwner duringWithdraw {\r\n        uint256 amount;\r\n        uint256 pos;\r\n        uint256 len = winners.length;\r\n        for (pos = 0; pos \u003C len; pos\u002B\u002B) {\r\n            address addr = winners[pos];\r\n            if (!done[addr]){\r\n                bool winner;\r\n                bool inperiod;\r\n                (winner, inperiod) = isWinner(addr);\r\n                require(winner \u0026\u0026 inperiod,\u0022Not a winner\u0022);\r\n                amount \u002B= information[addr].bid;\r\n            }\r\n            done[addr] = true;\r\n        }\r\n        emit BalanceWithdrawn(wallet,amount);\r\n        wallet.transfer(amount);\r\n    }\r\n\r\n\r\n\r\n    function withdrawFees() public afterWithdraw onlyOwner {\r\n        emit BalanceWithdrawn(wallet,address(this).balance);\r\n        wallet.transfer(address(this).balance);\r\n    }\r\n\r\n    function calculateHash(uint256 _bid, bytes memory _randString) public pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(_bid,_randString));\r\n    }\r\n\r\n    function isWinner(address check) public view returns(bool winner, bool inPeriod) {\r\n        if (now \u003C startWithdraw) {\r\n            return (false,false);\r\n        }\r\n        inPeriod = (now \u003C endWithdraw); // already checked \u003E start\r\n        winner = (information[check].bid \u003E winningAmount) ||\r\n        ((information[check].bid == winningAmount) \u0026\u0026 (information[check].flagged));\r\n    }\r\n\r\n    function withdrawalAmount(address check) public view returns (uint256,bool) {\r\n        bool winner;\r\n        bool inPeriod;\r\n        (winner,inPeriod) = isWinner(check);\r\n        if (!inPeriod) return (0,false);\r\n        data memory myData = information[check];\r\n        if (!myData.revealed) return (0,false);\r\n        if (winner) {\r\n            return (myData.value - myData.bid, true);\r\n        }\r\n        return (myData.value, false);\r\n    }\r\n\r\n    function inBidding() public view returns (bool) {\r\n        return (now \u003E startBids) \u0026\u0026 (now \u003C endBids);\r\n    }\r\n    function inReveal() public view returns (bool) {\r\n        return (now \u003E startReveal) \u0026\u0026 (now \u003C endReveal);\r\n    }\r\n    function inWithdraw() public view returns (bool) {\r\n        return (now \u003E startWithdraw) \u0026\u0026 (now \u003C endWithdraw);\r\n    }\r\n\r\n    // NOTE : Value is sorted by order of reveal NOT VALUE\r\n    function revealedValue(uint256 position) public view returns (uint256) {\r\n        require(position \u003C= revealedValues.length,\u0022position not in array\u0022);\r\n        return revealedValues[position];\r\n    }\r\n\r\n    function numberOfRevealedValues() public view returns (uint256) {\r\n        return revealedValues.length;\r\n    }\r\n\r\n    function numberOfRevealsForValue(uint256 value) public view returns (uint256) {\r\n        return reveals[value].length;\r\n    }\r\n\r\n  function transferAnyERC20Token(address tokenAddress, uint256 amount) public onlyOwner returns (bool) {\r\n    return IERC20(tokenAddress).transfer(owner(), amount);\r\n  }\r\n}","ABI":"[{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022withdrawRefund\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022inReveal\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022numberOfRevealedValues\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022withdrawFees\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_bid\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_randString\u0022,\u0022type\u0022:\u0022bytes\u0022}],\u0022name\u0022:\u0022calculateHash\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022pure\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022theAddresses\u0022,\u0022type\u0022:\u0022address[]\u0022},{\u0022name\u0022:\u0022flagged\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022name\u0022:\u0022setWinningAddresses\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_startWithdraw\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_endWithdraw\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022startWithdrawal\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_winningAmount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022setWinningAmount\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022owner\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022check\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022isWinner\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022winner\u0022,\u0022type\u0022:\u0022bool\u0022},{\u0022name\u0022:\u0022inPeriod\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022inBidding\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_hash\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022biddingTime\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:true,\u0022stateMutability\u0022:\u0022payable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022inWithdraw\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022information\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022hashValue\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022haveBid\u0022,\u0022type\u0022:\u0022bool\u0022},{\u0022name\u0022:\u0022revealed\u0022,\u0022type\u0022:\u0022bool\u0022},{\u0022name\u0022:\u0022refunded\u0022,\u0022type\u0022:\u0022bool\u0022},{\u0022name\u0022:\u0022flagged\u0022,\u0022type\u0022:\u0022bool\u0022},{\u0022name\u0022:\u0022bid\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022winners\u0022,\u0022type\u0022:\u0022address[]\u0022}],\u0022name\u0022:\u0022earlyWithdrawal\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_bid\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022randString\u0022,\u0022type\u0022:\u0022bytes\u0022}],\u0022name\u0022:\u0022reveal\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022minimumBid\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022check\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022withdrawalAmount\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022tokenAddress\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022transferAnyERC20Token\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022position\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022revealedValue\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022reveals\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022numberOfRevealsForValue\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022transferOwnership\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[{\u0022name\u0022:\u0022_startBids\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_endBids\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_startReveal\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_endReveal\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_minimumBid\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_wallet\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022constructor\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022_minimumBid\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022MinimumBid\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022startBids\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022endBids\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022BiddingPeriod\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022startReveal\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022endReveal\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022RevealPeriod\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022startWithdraw\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022endWithdraw\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022WithdrawPeriod\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022bidder\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022funding\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022hash\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022BidSubmitted\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022bidder\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022bid\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022BidRevealed\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022winningAmount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022WinningAmount\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022tiedWinner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022WinnerWithTie\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022bidder\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022refund\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022Refund\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022bidder\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022NothingToRefund\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022bidder\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022change\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022RefundChange\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022recipient\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022BalanceWithdrawn\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022_wallet\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022Wallet\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022previousOwner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022OwnershipTransferred\u0022,\u0022type\u0022:\u0022event\u0022}]","ContractName":"auction","CompilerVersion":"v0.5.10\u002Bcommit.5a6ea5b1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000005d656190000000000000000000000000000000000000000000000000000000005d680490000000000000000000000000000000000000000000000000000000005d680491000000000000000000000000000000000000000000000000000000005d6d4a900000000000000000000000000000000000000000000000004139c1192c5600000000000000000000000000006a1517622feb74a242e68a26f423ae38e020a0b1","Library":"","SwarmSource":"bzzr://6099a520ab00c954c993a08f8f6cd1a6975198ddb3e358b3a49d3082f162f442"}]