[{"SourceCode":"pragma solidity ^0.5.3;\r\n\r\ncontract Moloch {\r\n    using SafeMath for uint256;\r\n\r\n    /***************\r\n    GLOBAL CONSTANTS\r\n    ***************/\r\n    uint256 public periodDuration; // default = 17280 = 4.8 hours in seconds (5 periods per day)\r\n    uint256 public votingPeriodLength; // default = 35 periods (7 days)\r\n    uint256 public gracePeriodLength; // default = 35 periods (7 days)\r\n    uint256 public abortWindow; // default = 5 periods (1 day)\r\n    uint256 public proposalDeposit; // default = 10 ETH (~$1,000 worth of ETH at contract deployment)\r\n    uint256 public dilutionBound; // default = 3 - maximum multiplier a YES voter will be obligated to pay in case of mass ragequit\r\n    uint256 public processingReward; // default = 0.1 - amount of ETH to give to whoever processes a proposal\r\n    uint256 public summoningTime; // needed to determine the current period\r\n    string public summoningStamp; // string stamp recording details of Moloch Summoning \r\n\r\n    IERC20 public approvedToken; // approved token contract reference; default = wETH\r\n    GuildBank public guildBank; // guild bank contract reference\r\n\r\n    // HARD-CODED LIMITS\r\n    // These numbers are quite arbitrary; they are small enough to avoid overflows when doing calculations\r\n    // with periods or shares, yet big enough to not limit reasonable use cases.\r\n    uint256 constant MAX_VOTING_PERIOD_LENGTH = 10**18; // maximum length of voting period\r\n    uint256 constant MAX_GRACE_PERIOD_LENGTH = 10**18; // maximum length of grace period\r\n    uint256 constant MAX_DILUTION_BOUND = 10**18; // maximum dilution bound\r\n    uint256 constant MAX_NUMBER_OF_SHARES = 10**18; // maximum number of shares that can be minted\r\n\r\n    /***************\r\n    EVENTS\r\n    ***************/\r\n    event SubmitProposal(uint256 proposalIndex, address indexed delegateKey, address indexed memberAddress, address indexed applicant, uint256 tokenTribute, uint256 sharesRequested);\r\n    event SubmitVote(uint256 indexed proposalIndex, address indexed delegateKey, address indexed memberAddress, uint8 uintVote);\r\n    event ProcessProposal(uint256 indexed proposalIndex, address indexed applicant, address indexed memberAddress, uint256 tokenTribute, uint256 sharesRequested, bool didPass);\r\n    event Ragequit(address indexed memberAddress, uint256 sharesToBurn);\r\n    event Abort(uint256 indexed proposalIndex, address applicantAddress);\r\n    event UpdateDelegateKey(address indexed memberAddress, address newDelegateKey);\r\n    event SummonComplete(address indexed summoner, uint256 shares);\r\n\r\n    /******************\r\n    INTERNAL ACCOUNTING\r\n    ******************/\r\n    uint256 public totalShares = 0; // total shares across all members\r\n    uint256 public totalSharesRequested = 0; // total shares that have been requested in unprocessed proposals\r\n\r\n    enum Vote {\r\n        Null, // default value, counted as abstention\r\n        Yes,\r\n        No\r\n    }\r\n\r\n    struct Member {\r\n        address delegateKey; // the key responsible for submitting proposals and voting - defaults to member address unless updated\r\n        uint256 shares; // the # of shares assigned to this member\r\n        bool exists; // always true once a member has been created\r\n        uint256 highestIndexYesVote; // highest proposal index # on which the member voted YES\r\n    }\r\n\r\n    struct Proposal {\r\n        address proposer; // the member who submitted the proposal\r\n        address applicant; // the applicant who wishes to become a member - this key will be used for withdrawals\r\n        uint256 sharesRequested; // the # of shares the applicant is requesting\r\n        uint256 startingPeriod; // the period in which voting can start for this proposal\r\n        uint256 yesVotes; // the total number of YES votes for this proposal\r\n        uint256 noVotes; // the total number of NO votes for this proposal\r\n        bool processed; // true only if the proposal has been processed\r\n        bool didPass; // true only if the proposal passed\r\n        bool aborted; // true only if applicant calls \u0022abort\u0022 fn before end of voting period\r\n        uint256 tokenTribute; // amount of tokens offered as tribute\r\n        string details; // proposal details - could be IPFS hash, plaintext, or JSON\r\n        uint256 maxTotalSharesAtYesVote; // the maximum # of total shares encountered at a yes vote on this proposal\r\n        mapping (address =\u003E Vote) votesByMember; // the votes on this proposal by each member\r\n    }\r\n\r\n    mapping (address =\u003E Member) public members;\r\n    mapping (address =\u003E address) public memberAddressByDelegateKey;\r\n    Proposal[] public proposalQueue;\r\n\r\n    /********\r\n    MODIFIERS\r\n    ********/\r\n    modifier onlyMember {\r\n        require(members[msg.sender].shares \u003E 0, \u0022Moloch::onlyMember - not a member\u0022);\r\n        _;\r\n    }\r\n\r\n    modifier onlyDelegate {\r\n        require(members[memberAddressByDelegateKey[msg.sender]].shares \u003E 0, \u0022Moloch::onlyDelegate - not a delegate\u0022);\r\n        _;\r\n    }\r\n\r\n    /********\r\n    FUNCTIONS\r\n    ********/\r\n    constructor(\r\n        address summoner,\r\n        address _approvedToken,\r\n        uint256 _periodDuration,\r\n        uint256 _votingPeriodLength,\r\n        uint256 _gracePeriodLength,\r\n        uint256 _abortWindow,\r\n        uint256 _proposalDeposit,\r\n        uint256 _dilutionBound,\r\n        uint256 _processingReward,\r\n        string memory _summoningStamp\r\n    ) public {\r\n        require(summoner != address(0), \u0022Moloch::constructor - summoner cannot be 0\u0022);\r\n        require(_approvedToken != address(0), \u0022Moloch::constructor - _approvedToken cannot be 0\u0022);\r\n        require(_periodDuration \u003E 0, \u0022Moloch::constructor - _periodDuration cannot be 0\u0022);\r\n        require(_votingPeriodLength \u003E 0, \u0022Moloch::constructor - _votingPeriodLength cannot be 0\u0022);\r\n        require(_votingPeriodLength \u003C= MAX_VOTING_PERIOD_LENGTH, \u0022Moloch::constructor - _votingPeriodLength exceeds limit\u0022);\r\n        require(_gracePeriodLength \u003C= MAX_GRACE_PERIOD_LENGTH, \u0022Moloch::constructor - _gracePeriodLength exceeds limit\u0022);\r\n        require(_abortWindow \u003E 0, \u0022Moloch::constructor - _abortWindow cannot be 0\u0022);\r\n        require(_abortWindow \u003C= _votingPeriodLength, \u0022Moloch::constructor - _abortWindow must be smaller than or equal to _votingPeriodLength\u0022);\r\n        require(_dilutionBound \u003E 0, \u0022Moloch::constructor - _dilutionBound cannot be 0\u0022);\r\n        require(_dilutionBound \u003C= MAX_DILUTION_BOUND, \u0022Moloch::constructor - _dilutionBound exceeds limit\u0022);\r\n        require(_proposalDeposit \u003E= _processingReward, \u0022Moloch::constructor - _proposalDeposit cannot be smaller than _processingReward\u0022);\r\n\r\n        approvedToken = IERC20(_approvedToken);\r\n\r\n        guildBank = new GuildBank(_approvedToken);\r\n\r\n        periodDuration = _periodDuration;\r\n        votingPeriodLength = _votingPeriodLength;\r\n        gracePeriodLength = _gracePeriodLength;\r\n        abortWindow = _abortWindow;\r\n        proposalDeposit = _proposalDeposit;\r\n        dilutionBound = _dilutionBound;\r\n        processingReward = _processingReward;\r\n        summoningStamp = _summoningStamp;\r\n\r\n        summoningTime = now;\r\n\r\n        members[summoner] = Member(summoner, 1, true, 0);\r\n        memberAddressByDelegateKey[summoner] = summoner;\r\n        totalShares = 1;\r\n\r\n        emit SummonComplete(summoner, 1);\r\n    }\r\n\r\n    /*****************\r\n    PROPOSAL FUNCTIONS\r\n    *****************/\r\n    function submitProposal(\r\n        address applicant,\r\n        uint256 tokenTribute,\r\n        uint256 sharesRequested,\r\n        string memory details\r\n    )\r\n        public\r\n        onlyDelegate\r\n    {\r\n        require(applicant != address(0), \u0022Moloch::submitProposal - applicant cannot be 0\u0022);\r\n\r\n        // Make sure we won\u0027t run into overflows when doing calculations with shares.\r\n        // Note that totalShares \u002B totalSharesRequested \u002B sharesRequested is an upper bound\r\n        // on the number of shares that can exist until this proposal has been processed.\r\n        require(totalShares.add(totalSharesRequested).add(sharesRequested) \u003C= MAX_NUMBER_OF_SHARES, \u0022Moloch::submitProposal - too many shares requested\u0022);\r\n\r\n        totalSharesRequested = totalSharesRequested.add(sharesRequested);\r\n\r\n        address memberAddress = memberAddressByDelegateKey[msg.sender];\r\n\r\n        // collect proposal deposit from proposer and store it in the Moloch until the proposal is processed\r\n        require(approvedToken.transferFrom(msg.sender, address(this), proposalDeposit), \u0022Moloch::submitProposal - proposal deposit token transfer failed\u0022);\r\n\r\n        // collect tribute from applicant and store it in the Moloch until the proposal is processed\r\n        require(approvedToken.transferFrom(applicant, address(this), tokenTribute), \u0022Moloch::submitProposal - tribute token transfer failed\u0022);\r\n\r\n        // compute startingPeriod for proposal\r\n        uint256 startingPeriod = max(\r\n            getCurrentPeriod(),\r\n            proposalQueue.length == 0 ? 0 : proposalQueue[proposalQueue.length.sub(1)].startingPeriod\r\n        ).add(1);\r\n\r\n        // create proposal ...\r\n        Proposal memory proposal = Proposal({\r\n            proposer: memberAddress,\r\n            applicant: applicant,\r\n            sharesRequested: sharesRequested,\r\n            startingPeriod: startingPeriod,\r\n            yesVotes: 0,\r\n            noVotes: 0,\r\n            processed: false,\r\n            didPass: false,\r\n            aborted: false,\r\n            tokenTribute: tokenTribute,\r\n            details: details,\r\n            maxTotalSharesAtYesVote: 0\r\n        });\r\n\r\n        // ... and append it to the queue\r\n        proposalQueue.push(proposal);\r\n\r\n        uint256 proposalIndex = proposalQueue.length.sub(1);\r\n        emit SubmitProposal(proposalIndex, msg.sender, memberAddress, applicant, tokenTribute, sharesRequested);\r\n    }\r\n\r\n    function submitVote(uint256 proposalIndex, uint8 uintVote) public onlyDelegate {\r\n        address memberAddress = memberAddressByDelegateKey[msg.sender];\r\n        Member storage member = members[memberAddress];\r\n\r\n        require(proposalIndex \u003C proposalQueue.length, \u0022Moloch::submitVote - proposal does not exist\u0022);\r\n        Proposal storage proposal = proposalQueue[proposalIndex];\r\n\r\n        require(uintVote \u003C 3, \u0022Moloch::submitVote - uintVote must be less than 3\u0022);\r\n        Vote vote = Vote(uintVote);\r\n\r\n        require(getCurrentPeriod() \u003E= proposal.startingPeriod, \u0022Moloch::submitVote - voting period has not started\u0022);\r\n        require(!hasVotingPeriodExpired(proposal.startingPeriod), \u0022Moloch::submitVote - proposal voting period has expired\u0022);\r\n        require(proposal.votesByMember[memberAddress] == Vote.Null, \u0022Moloch::submitVote - member has already voted on this proposal\u0022);\r\n        require(vote == Vote.Yes || vote == Vote.No, \u0022Moloch::submitVote - vote must be either Yes or No\u0022);\r\n        require(!proposal.aborted, \u0022Moloch::submitVote - proposal has been aborted\u0022);\r\n\r\n        // store vote\r\n        proposal.votesByMember[memberAddress] = vote;\r\n\r\n        // count vote\r\n        if (vote == Vote.Yes) {\r\n            proposal.yesVotes = proposal.yesVotes.add(member.shares);\r\n\r\n            // set highest index (latest) yes vote - must be processed for member to ragequit\r\n            if (proposalIndex \u003E member.highestIndexYesVote) {\r\n                member.highestIndexYesVote = proposalIndex;\r\n            }\r\n\r\n            // set maximum of total shares encountered at a yes vote - used to bound dilution for yes voters\r\n            if (totalShares \u003E proposal.maxTotalSharesAtYesVote) {\r\n                proposal.maxTotalSharesAtYesVote = totalShares;\r\n            }\r\n\r\n        } else if (vote == Vote.No) {\r\n            proposal.noVotes = proposal.noVotes.add(member.shares);\r\n        }\r\n\r\n        emit SubmitVote(proposalIndex, msg.sender, memberAddress, uintVote);\r\n    }\r\n\r\n    function processProposal(uint256 proposalIndex) public {\r\n        require(proposalIndex \u003C proposalQueue.length, \u0022Moloch::processProposal - proposal does not exist\u0022);\r\n        Proposal storage proposal = proposalQueue[proposalIndex];\r\n\r\n        require(getCurrentPeriod() \u003E= proposal.startingPeriod.add(votingPeriodLength).add(gracePeriodLength), \u0022Moloch::processProposal - proposal is not ready to be processed\u0022);\r\n        require(proposal.processed == false, \u0022Moloch::processProposal - proposal has already been processed\u0022);\r\n        require(proposalIndex == 0 || proposalQueue[proposalIndex.sub(1)].processed, \u0022Moloch::processProposal - previous proposal must be processed\u0022);\r\n\r\n        proposal.processed = true;\r\n        totalSharesRequested = totalSharesRequested.sub(proposal.sharesRequested);\r\n\r\n        bool didPass = proposal.yesVotes \u003E proposal.noVotes;\r\n\r\n        // Make the proposal fail if the dilutionBound is exceeded\r\n        if (totalShares.mul(dilutionBound) \u003C proposal.maxTotalSharesAtYesVote) {\r\n            didPass = false;\r\n        }\r\n\r\n        // PROPOSAL PASSED\r\n        if (didPass \u0026\u0026 !proposal.aborted) {\r\n\r\n            proposal.didPass = true;\r\n\r\n            // if the applicant is already a member, add to their existing shares\r\n            if (members[proposal.applicant].exists) {\r\n                members[proposal.applicant].shares = members[proposal.applicant].shares.add(proposal.sharesRequested);\r\n\r\n            // the applicant is a new member, create a new record for them\r\n            } else {\r\n                // if the applicant address is already taken by a member\u0027s delegateKey, reset it to their member address\r\n                if (members[memberAddressByDelegateKey[proposal.applicant]].exists) {\r\n                    address memberToOverride = memberAddressByDelegateKey[proposal.applicant];\r\n                    memberAddressByDelegateKey[memberToOverride] = memberToOverride;\r\n                    members[memberToOverride].delegateKey = memberToOverride;\r\n                }\r\n\r\n                // use applicant address as delegateKey by default\r\n                members[proposal.applicant] = Member(proposal.applicant, proposal.sharesRequested, true, 0);\r\n                memberAddressByDelegateKey[proposal.applicant] = proposal.applicant;\r\n            }\r\n\r\n            // mint new shares\r\n            totalShares = totalShares.add(proposal.sharesRequested);\r\n\r\n            // transfer tokens to guild bank\r\n            require(\r\n                approvedToken.transfer(address(guildBank), proposal.tokenTribute),\r\n                \u0022Moloch::processProposal - token transfer to guild bank failed\u0022\r\n            );\r\n\r\n        // PROPOSAL FAILED OR ABORTED\r\n        } else {\r\n            // return all tokens to the applicant\r\n            require(\r\n                approvedToken.transfer(proposal.applicant, proposal.tokenTribute),\r\n                \u0022Moloch::processProposal - failing vote token transfer failed\u0022\r\n            );\r\n        }\r\n\r\n        // send msg.sender the processingReward\r\n        require(\r\n            approvedToken.transfer(msg.sender, processingReward),\r\n            \u0022Moloch::processProposal - failed to send processing reward to msg.sender\u0022\r\n        );\r\n\r\n        // return deposit to proposer (subtract processing reward)\r\n        require(\r\n            approvedToken.transfer(proposal.proposer, proposalDeposit.sub(processingReward)),\r\n            \u0022Moloch::processProposal - failed to return proposal deposit to proposer\u0022\r\n        );\r\n\r\n        emit ProcessProposal(\r\n            proposalIndex,\r\n            proposal.applicant,\r\n            proposal.proposer,\r\n            proposal.tokenTribute,\r\n            proposal.sharesRequested,\r\n            didPass\r\n        );\r\n    }\r\n\r\n    function ragequit(uint256 sharesToBurn) public onlyMember {\r\n        uint256 initialTotalShares = totalShares;\r\n\r\n        Member storage member = members[msg.sender];\r\n\r\n        require(member.shares \u003E= sharesToBurn, \u0022Moloch::ragequit - insufficient shares\u0022);\r\n\r\n        require(canRagequit(member.highestIndexYesVote), \u0022Moloch::ragequit - cant ragequit until highest index proposal member voted YES on is processed\u0022);\r\n\r\n        // burn shares\r\n        member.shares = member.shares.sub(sharesToBurn);\r\n        totalShares = totalShares.sub(sharesToBurn);\r\n\r\n        // instruct guildBank to transfer fair share of tokens to the ragequitter\r\n        require(\r\n            guildBank.withdraw(msg.sender, sharesToBurn, initialTotalShares),\r\n            \u0022Moloch::ragequit - withdrawal of tokens from guildBank failed\u0022\r\n        );\r\n\r\n        emit Ragequit(msg.sender, sharesToBurn);\r\n    }\r\n\r\n    function abort(uint256 proposalIndex) public {\r\n        require(proposalIndex \u003C proposalQueue.length, \u0022Moloch::abort - proposal does not exist\u0022);\r\n        Proposal storage proposal = proposalQueue[proposalIndex];\r\n\r\n        require(msg.sender == proposal.applicant, \u0022Moloch::abort - msg.sender must be applicant\u0022);\r\n        require(getCurrentPeriod() \u003C proposal.startingPeriod.add(abortWindow), \u0022Moloch::abort - abort window must not have passed\u0022);\r\n        require(!proposal.aborted, \u0022Moloch::abort - proposal must not have already been aborted\u0022);\r\n\r\n        uint256 tokensToAbort = proposal.tokenTribute;\r\n        proposal.tokenTribute = 0;\r\n        proposal.aborted = true;\r\n\r\n        // return all tokens to the applicant\r\n        require(\r\n            approvedToken.transfer(proposal.applicant, tokensToAbort),\r\n            \u0022Moloch::processProposal - failed to return tribute to applicant\u0022\r\n        );\r\n\r\n        emit Abort(proposalIndex, msg.sender);\r\n    }\r\n\r\n    function updateDelegateKey(address newDelegateKey) public onlyMember {\r\n        require(newDelegateKey != address(0), \u0022Moloch::updateDelegateKey - newDelegateKey cannot be 0\u0022);\r\n\r\n        // skip checks if member is setting the delegate key to their member address\r\n        if (newDelegateKey != msg.sender) {\r\n            require(!members[newDelegateKey].exists, \u0022Moloch::updateDelegateKey - cant overwrite existing members\u0022);\r\n            require(!members[memberAddressByDelegateKey[newDelegateKey]].exists, \u0022Moloch::updateDelegateKey - cant overwrite existing delegate keys\u0022);\r\n        }\r\n\r\n        Member storage member = members[msg.sender];\r\n        memberAddressByDelegateKey[member.delegateKey] = address(0);\r\n        memberAddressByDelegateKey[newDelegateKey] = msg.sender;\r\n        member.delegateKey = newDelegateKey;\r\n\r\n        emit UpdateDelegateKey(msg.sender, newDelegateKey);\r\n    }\r\n\r\n    /***************\r\n    GETTER FUNCTIONS\r\n    ***************/\r\n    function max(uint256 x, uint256 y) internal pure returns (uint256) {\r\n        return x \u003E= y ? x : y;\r\n    }\r\n\r\n    function getCurrentPeriod() public view returns (uint256) {\r\n        return now.sub(summoningTime).div(periodDuration);\r\n    }\r\n\r\n    function getProposalQueueLength() public view returns (uint256) {\r\n        return proposalQueue.length;\r\n    }\r\n\r\n    // can only ragequit if the latest proposal you voted YES on has been processed\r\n    function canRagequit(uint256 highestIndexYesVote) public view returns (bool) {\r\n        require(highestIndexYesVote \u003C proposalQueue.length, \u0022Moloch::canRagequit - proposal does not exist\u0022);\r\n        return proposalQueue[highestIndexYesVote].processed;\r\n    }\r\n\r\n    function hasVotingPeriodExpired(uint256 startingPeriod) public view returns (bool) {\r\n        return getCurrentPeriod() \u003E= startingPeriod.add(votingPeriodLength);\r\n    }\r\n\r\n    function getMemberProposalVote(address memberAddress, uint256 proposalIndex) public view returns (Vote) {\r\n        require(members[memberAddress].exists, \u0022Moloch::getMemberProposalVote - member doesn\u0027t exist\u0022);\r\n        require(proposalIndex \u003C proposalQueue.length, \u0022Moloch::getMemberProposalVote - proposal doesn\u0027t exist\u0022);\r\n        return proposalQueue[proposalIndex].votesByMember[memberAddress];\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original \u0060owner\u0060 of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @return the address of the owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return true if \u0060msg.sender\u0060 is the owner of the contract.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to relinquish control of the contract.\r\n     * @notice Renouncing to ownership will leave the contract without an owner.\r\n     * It will not be possible to call the functions with the \u0060onlyOwner\u0060\r\n     * modifier anymore.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract GuildBank is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    IERC20 public approvedToken; // approved token contract reference\r\n\r\n    event Withdrawal(address indexed receiver, uint256 amount);\r\n\r\n    constructor(address approvedTokenAddress) public {\r\n        approvedToken = IERC20(approvedTokenAddress);\r\n    }\r\n\r\n    function withdraw(address receiver, uint256 shares, uint256 totalShares) public onlyOwner returns (bool) {\r\n        uint256 amount = approvedToken.balanceOf(address(this)).mul(shares).div(totalShares);\r\n        emit Withdrawal(receiver, amount);\r\n        return approvedToken.transfer(receiver, amount);\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Multiplies two unsigned integers, reverts on overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\r\n        // benefit is lost if \u0027b\u0027 is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b \u003E 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c \u002B a % b); // There is no case in which this doesn\u0027t hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b \u003C= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two unsigned integers, reverts on overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a \u002B b;\r\n        require(c \u003E= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n     * reverts when dividing by zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}","ABI":"[{\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022summoner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_approvedToken\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_periodDuration\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_votingPeriodLength\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_gracePeriodLength\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_abortWindow\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_proposalDeposit\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_dilutionBound\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_processingReward\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022string\u0022,\u0022name\u0022:\u0022_summoningStamp\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022constructor\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022proposalIndex\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022applicantAddress\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022Abort\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022proposalIndex\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022applicant\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022memberAddress\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022tokenTribute\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022sharesRequested\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022didPass\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022name\u0022:\u0022ProcessProposal\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022memberAddress\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022sharesToBurn\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022Ragequit\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022proposalIndex\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022delegateKey\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022memberAddress\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022applicant\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022tokenTribute\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022sharesRequested\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022SubmitProposal\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022proposalIndex\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022delegateKey\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022memberAddress\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint8\u0022,\u0022name\u0022:\u0022uintVote\u0022,\u0022type\u0022:\u0022uint8\u0022}],\u0022name\u0022:\u0022SubmitVote\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022summoner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022shares\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022SummonComplete\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022memberAddress\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022newDelegateKey\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022UpdateDelegateKey\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022proposalIndex\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022abort\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022abortWindow\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022approvedToken\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022contract IERC20\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022highestIndexYesVote\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022canRagequit\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022dilutionBound\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022getCurrentPeriod\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022memberAddress\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022proposalIndex\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022getMemberProposalVote\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022enum Moloch.Vote\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint8\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022getProposalQueueLength\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022gracePeriodLength\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022guildBank\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022contract GuildBank\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022startingPeriod\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022hasVotingPeriodExpired\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022memberAddressByDelegateKey\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022members\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022delegateKey\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022shares\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022exists\u0022,\u0022type\u0022:\u0022bool\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022highestIndexYesVote\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022periodDuration\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022proposalIndex\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022processProposal\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022processingReward\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022proposalDeposit\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022proposalQueue\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022proposer\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022applicant\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022sharesRequested\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022startingPeriod\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022yesVotes\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022noVotes\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022processed\u0022,\u0022type\u0022:\u0022bool\u0022},{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022didPass\u0022,\u0022type\u0022:\u0022bool\u0022},{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022aborted\u0022,\u0022type\u0022:\u0022bool\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022tokenTribute\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022string\u0022,\u0022name\u0022:\u0022details\u0022,\u0022type\u0022:\u0022string\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022maxTotalSharesAtYesVote\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022sharesToBurn\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022ragequit\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022applicant\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022tokenTribute\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022sharesRequested\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022string\u0022,\u0022name\u0022:\u0022details\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022name\u0022:\u0022submitProposal\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022proposalIndex\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint8\u0022,\u0022name\u0022:\u0022uintVote\u0022,\u0022type\u0022:\u0022uint8\u0022}],\u0022name\u0022:\u0022submitVote\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022summoningStamp\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022string\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022summoningTime\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022totalShares\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022totalSharesRequested\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022newDelegateKey\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022updateDelegateKey\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022votingPeriodLength\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022}]","ContractName":"Moloch","CompilerVersion":"v0.5.13\u002Bcommit.5b0b510c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000001c0aa8ccd568d90d61659f060d1bfb1e6f855a200000000000000000000000006b175474e89094c44da98b954eedeac495271d0fibrary":"","SwarmSource":"bzzr://4de1d837959f8d6815c9abcccf9c825b8d232184a35233b4c37a70f3426e9c81"}]