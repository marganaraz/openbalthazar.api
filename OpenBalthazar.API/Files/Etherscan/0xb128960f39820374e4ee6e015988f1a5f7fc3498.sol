[{"SourceCode":"pragma solidity ^0.5.10;\r\n\r\ncontract ValueProvider {\r\n    function getValue(bytes32 key) public view returns (bytes32 value);\r\n    event ValueUpdate(bytes32 indexed key, bytes32 indexed value);\r\n}\r\n\r\ncontract DMap3 is ValueProvider {\r\n    address                   public allocator;\r\n    mapping(bytes32=\u003Ebool)    public locked;\r\n    mapping(bytes32=\u003Ebytes32) public values;\r\n    mapping(bytes32=\u003Eaddress) public owners;\r\n    mapping(bytes32=\u003Eaddress) public offered;\r\n\r\n    event ValueUpdate( bytes32 indexed key\r\n                     , bytes32 indexed value );\r\n    event ValueLocked( bytes32 indexed key\r\n                     , bytes32 indexed value );\r\n    event OwnerUpdate( bytes32 indexed key\r\n                     , address indexed oldOwner\r\n                     , address indexed newOwner );\r\n\r\n    constructor() public {\r\n        allocator = msg.sender;\r\n    }\r\n    function setAllocator(address newAllocator) public {\r\n        assert(msg.sender == allocator);\r\n        allocator = newAllocator;\r\n    }\r\n    function allocate(bytes32 key, address owner) public {\r\n        assert( ! locked[key]);\r\n        assert(msg.sender == allocator);\r\n        assert(owner != address(0));\r\n        assert(owners[key] != address(0));\r\n        owners[key] = owner;\r\n        emit OwnerUpdate(key, address(this), owner);\r\n    }\r\n    function lock(bytes32 key) public {\r\n        assert( ! locked[key]); // one lock event\r\n        assert(msg.sender == owners[key]);\r\n        locked[key] = true;\r\n        owners[key] = address(0);\r\n        offered[key] = address(0);\r\n        emit ValueLocked(key, values[key]);\r\n    }\r\n    function offer(bytes32 key, address to) public {\r\n        assert( ! locked[key]);\r\n        assert(msg.sender == owners[key]);\r\n        offered[key] = to;\r\n    }\r\n    function accept(bytes32 key) public {\r\n        assert( ! locked[key]);\r\n        assert(msg.sender == offered[key]);\r\n        emit OwnerUpdate(key, owners[key], offered[key]);\r\n        owners[key] = msg.sender;\r\n        offered[key] = address(0);\r\n    }\r\n    function setValue(bytes32 key, bytes32 value) public {\r\n        assert( ! locked[key]);\r\n        assert(msg.sender == owners[key]);\r\n        values[key] = value;\r\n        emit ValueUpdate(key, value);\r\n    }\r\n    function getValue(bytes32 key) public view returns (bytes32) {\r\n        return values[key];\r\n    }\r\n}","ABI":"[{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022key\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022lock\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022key\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022setValue\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022key\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022name\u0022:\u0022to\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022offer\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022key\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022getValue\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022offered\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022allocator\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022key\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022name\u0022:\u0022owner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022allocate\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022newAllocator\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022setAllocator\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022locked\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022values\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022key\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022accept\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022owners\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022constructor\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022key\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022ValueUpdate\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022key\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022ValueLocked\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022key\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022oldOwner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022OwnerUpdate\u0022,\u0022type\u0022:\u0022event\u0022}]","ContractName":"DMap3","CompilerVersion":"v0.5.10\u002Bcommit.5a6ea5b1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://d98aec9b43b4728b340b7310350e80d947bef65a7b80a26bbc3b1d618faffe27"}]