[{"SourceCode":"// File: node_modules\\openzeppelin-solidity\\contracts\\ownership\\Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * \u0060onlyOwner\u0060, which can be aplied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \u0022Ownable: caller is not the owner\u0022);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * \u0060onlyOwner\u0060 functions anymore. Can only be called by the current owner.\r\n     *\r\n     * \u003E Note: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (\u0060newOwner\u0060).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (\u0060newOwner\u0060).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \u0022Ownable: new owner is the zero address\u0022);\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts\\LAND\\ILANDRegistry.sol\r\n\r\n// solium-disable linebreak-style\r\npragma solidity ^0.5.0;\r\n\r\ninterface ILANDRegistry {\r\n\r\n  // LAND can be assigned by the owner\r\n  function assignNewParcel(int x, int y, address beneficiary) external;\r\n  function assignMultipleParcels(int[] calldata x, int[] calldata y, address beneficiary) external;\r\n\r\n  // After one year, LAND can be claimed from an inactive public key\r\n  function ping() external;\r\n\r\n  // LAND-centric getters\r\n  function encodeTokenId(int x, int y) external pure returns (uint256);\r\n  function decodeTokenId(uint value) external pure returns (int, int);\r\n  function exists(int x, int y) external view returns (bool);\r\n  function ownerOfLand(int x, int y) external view returns (address);\r\n  function ownerOfLandMany(int[] calldata x, int[] calldata y) external view returns (address[] memory);\r\n  function landOf(address owner) external view returns (int[] memory, int[] memory);\r\n  function landData(int x, int y) external view returns (string memory);\r\n\r\n  // Transfer LAND\r\n  function transferLand(int x, int y, address to) external;\r\n  function transferManyLand(int[] calldata x, int[] calldata y, address to) external;\r\n\r\n  // Update LAND\r\n  function updateLandData(int x, int y, string calldata data) external;\r\n  function updateManyLandData(int[] calldata x, int[] calldata y, string calldata data) external;\r\n\r\n  //operators\r\n  function setUpdateOperator(uint256 assetId, address operator) external;\r\n\r\n  // Events\r\n\r\n  event Update(\r\n    uint256 indexed assetId,\r\n    address indexed holder,\r\n    address indexed operator,\r\n    string data\r\n  );\r\n\r\n  event UpdateOperator(\r\n    uint256 indexed assetId,\r\n    address indexed operator\r\n  );\r\n\r\n  event DeployAuthorized(\r\n    address indexed _caller,\r\n    address indexed _deployer\r\n  );\r\n\r\n  event DeployForbidden(\r\n    address indexed _caller,\r\n    address indexed _deployer\r\n  );\r\n}\r\n\r\n// File: contracts\\LAND\\IEstateRegistry.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\ncontract IEstateRegistry {\r\n  function mint(address to, string calldata metadata) external returns (uint256);\r\n  function ownerOf(uint256 _tokenId) public view returns (address _owner); // from ERC721\r\n  function setManyLandUpdateOperator(uint256 _estateId, uint256[] memory _landIds, address _operator) public;\r\n\r\n  // Events\r\n  event CreateEstate(\r\n    address indexed _owner,\r\n    uint256 indexed _estateId,\r\n    string _data\r\n  );\r\n\r\n  event AddLand(\r\n    uint256 indexed _estateId,\r\n    uint256 indexed _landId\r\n  );\r\n\r\n  event RemoveLand(\r\n    uint256 indexed _estateId,\r\n    uint256 indexed _landId,\r\n    address indexed _destinatary\r\n  );\r\n\r\n  event Update(\r\n    uint256 indexed _assetId,\r\n    address indexed _holder,\r\n    address indexed _operator,\r\n    string _data\r\n  );\r\n\r\n  event UpdateOperator(\r\n    uint256 indexed _estateId,\r\n    address indexed _operator\r\n  );\r\n\r\n  event UpdateManager(\r\n    address indexed _owner,\r\n    address indexed _operator,\r\n    address indexed _caller,\r\n    bool _approved\r\n  );\r\n\r\n  event SetLANDRegistry(\r\n    address indexed _registry\r\n  );\r\n}\r\n\r\n// File: contracts\\AetheriaFirstStageProxy.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\ncontract AetheriaFirstStageProxy is Ownable {\r\n    ILANDRegistry private landContract;\r\n\tIEstateRegistry private estateContract;\r\n\tuint256 private estateId;\r\n\taddress private delegatedSigner;\r\n\tmapping(uint256 =\u003E uint) private replayProtection;\r\n\tuint public currentNonce;\r\n\r\n\tconstructor (address landContractAddress, address estateContractAddress, uint256 _estateId) public {\r\n        landContract = ILANDRegistry(landContractAddress);\r\n\t\testateContract = IEstateRegistry(estateContractAddress);\r\n\t\testateId = _estateId;\r\n\t\tdelegatedSigner = owner();\r\n\t\tcurrentNonce = 1;\r\n    }\r\n\r\n\tfunction _isReplayProtectionValid(uint256[] memory plotIds, uint nonce) private view returns (bool) {\r\n\t\tfor(uint i = 0; i \u003C plotIds.length; i\u002B\u002B) {\r\n\t\t\tif(replayProtection[plotIds[i]] \u003E nonce) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction setDelegatedSigner(address newDelegate) external onlyOwner {\r\n\t\tdelegatedSigner = newDelegate;\r\n\t\temit DelegateChanged(delegatedSigner);\r\n\t}\r\n\r\n\tfunction getDelegatedSigner() public view returns (address ){\r\n\t\treturn delegatedSigner;\r\n\t}\r\n\r\n\tfunction getMessageHash(address userAddress, uint256[] memory plotIds, uint nonce) public pure returns (bytes32)\r\n\t{\r\n\t\treturn keccak256(abi.encode(userAddress, plotIds, nonce));\r\n\t}\r\n\r\n\tfunction buildPrefixedHash(bytes32 msgHash) public pure returns (bytes32)\r\n\t{\r\n\t\tbytes memory prefix = \u0022\\x19Ethereum Signed Message:\\n32\u0022;\r\n\t\treturn keccak256(abi.encodePacked(prefix, msgHash));\r\n\t}\r\n\r\n\tfunction verifySender(bytes32 msgHash, uint8 _v, bytes32 _r, bytes32 _s) private view returns (bool)\r\n\t{\r\n\t\tbytes32 prefixedHash = buildPrefixedHash(msgHash);\r\n\t\treturn ecrecover(prefixedHash, _v, _r, _s) == delegatedSigner;\r\n\t}\r\n\r\n\tfunction updatePlot(address userAddress, uint256[] calldata plotIds, uint nonce, uint8 _v, bytes32 _r, bytes32 _s) external {\r\n\t\tbytes32 msgHash = getMessageHash(userAddress, plotIds, nonce);\r\n\t\trequire(verifySender(msgHash, _v, _r, _s), \u0022Invalid Sig\u0022);\r\n\t\trequire(_isReplayProtectionValid(plotIds, nonce), \u0022Nonce to low\u0022);\r\n        for (uint i = 0; i\u003CplotIds.length; i\u002B\u002B) {\r\n\t\t\treplayProtection[plotIds[i]] = nonce;\r\n        }\r\n\t\testateContract.setManyLandUpdateOperator(estateId, plotIds, userAddress);\r\n        if (currentNonce \u003C= nonce)\r\n        {\r\n            currentNonce = nonce\u002B1;\r\n        }\r\n\t\temit PlotOwnerUpdate(\r\n\t\t\tuserAddress,\r\n\t\t\tplotIds\r\n\t\t);\r\n\t}\r\n\r\n\tevent DelegateChanged(\r\n\t\taddress newDelegatedAddress\r\n\t);\r\n\r\n\tevent PlotOwnerUpdate(\r\n\t\taddress newOperator,\r\n\t\tuint256[] plotIds\r\n\t);\r\n}","ABI":"[{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022userAddress\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022plotIds\u0022,\u0022type\u0022:\u0022uint256[]\u0022},{\u0022name\u0022:\u0022nonce\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_v\u0022,\u0022type\u0022:\u0022uint8\u0022},{\u0022name\u0022:\u0022_r\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022name\u0022:\u0022_s\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022updatePlot\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022getDelegatedSigner\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022newDelegate\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022setDelegatedSigner\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022renounceOwnership\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022owner\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022isOwner\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022currentNonce\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022userAddress\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022plotIds\u0022,\u0022type\u0022:\u0022uint256[]\u0022},{\u0022name\u0022:\u0022nonce\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022getMessageHash\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022pure\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022msgHash\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022buildPrefixedHash\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022pure\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022transferOwnership\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[{\u0022name\u0022:\u0022landContractAddress\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022estateContractAddress\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_estateId\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022constructor\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022newDelegatedAddress\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022DelegateChanged\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022newOperator\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022plotIds\u0022,\u0022type\u0022:\u0022uint256[]\u0022}],\u0022name\u0022:\u0022PlotOwnerUpdate\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022previousOwner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022OwnershipTransferred\u0022,\u0022type\u0022:\u0022event\u0022}]","ContractName":"AetheriaFirstStageProxy","CompilerVersion":"v0.5.1\u002Bcommit.c8a2cb62","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000f87e31492faf9a91b02ee0deaad50d51d56d5d4d000000000000000000000000959e104e1a4db6317fa58f8295f586e1a978c297000000000000000000000000000000000000000000000000000000000000082c","Library":"","SwarmSource":"bzzr://35152fabd0344327d7b4529baa169a1846d6469a3f2562d0b98794f26e3f7172"}]