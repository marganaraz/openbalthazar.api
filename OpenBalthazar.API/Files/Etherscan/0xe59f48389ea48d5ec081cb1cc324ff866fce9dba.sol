[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    require(c / a == b, \u0027SafeMath.mul\u0027);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b \u003E 0, \u0027SafeMath.div\u0027);\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b \u003C= a, \u0027SafeMath.sub\u0027);\r\n    uint256 c = a - b;\r\n    return c;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a \u002B b;\r\n    require(c \u003E= a, \u0027SafeMath.add\u0027);\r\n    return c;\r\n  }\r\n\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0, \u0027SafeMath.mod\u0027);\r\n    return a % b;\r\n  }\r\n}\r\n\r\ncontract ReentrancyGuard {\r\n  uint256 private _guardCounter;\r\n\r\n  constructor() public {\r\n    _guardCounter = 1;\r\n  }\r\n\r\n  modifier nonReentrant() {\r\n    _guardCounter \u002B= 1;\r\n    uint256 localCounter = _guardCounter;\r\n    _;\r\n    require(localCounter == _guardCounter, \u0027ReentrancyGuard.nonReentrant\u0027);\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  constructor () public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner, \u0022ONLY_CONTRACT_OWNER\u0022);\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0), \u0022INVALID_OWNER\u0022);\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n}\r\n\r\ninterface IERC165 {\r\n  function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\ncontract IERC721 is IERC165 {\r\n  event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n  event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n  event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n  function balanceOf(address owner) public view returns (uint256 balance);\r\n  function ownerOf(uint256 tokenId) public view returns (address owner);\r\n  function safeTransferFrom(address from, address to, uint256 tokenId) public;\r\n  function transferFrom(address from, address to, uint256 tokenId) public;\r\n  function approve(address to, uint256 tokenId) public;\r\n  function getApproved(uint256 tokenId) public view returns (address operator);\r\n  function setApprovalForAll(address operator, bool _approved) public;\r\n  function isApprovedForAll(address owner, address operator) public view returns (bool);\r\n  function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public;\r\n}\r\n\r\ncontract CryptoLuckyBags is ReentrancyGuard, Ownable {\r\n  using SafeMath for uint256;\r\n\r\n  event Create(\r\n    uint256 indexed id,\r\n    address indexed creator,\r\n    uint256 total,\r\n    uint256 price,\r\n    uint256 unsealingTimestamp,\r\n    bool sellingAfterUnsealingFlag,\r\n    bool codeFlag,\r\n    uint256 feePercentage\r\n  );\r\n\r\n  event Draw(\r\n    uint256 indexed id,\r\n    address indexed drawer,\r\n    uint256 indexed code\r\n  );\r\n\r\n  // TODO: 1\u56DE\u3042\u305F\u308A\u306E\u500B\u6570\u3092\u8A2D\u5B9A\u3067\u304D\u308B\u3088\u3046\u306B\u3059\u308B\r\n  struct LuckyBag {\r\n    uint256 id;\r\n    address payable creator;\r\n    address[] contractAddresses;\r\n    uint256[] tokenIds;\r\n    uint256 price;\r\n    uint256 total;\r\n    uint256 inventory;\r\n    uint256 unsealingTimestamp;\r\n    bool sellingAfterUnsealingFlag;\r\n    bool codeFlag;\r\n    bytes32[] hashedCodes;\r\n    address[] drawers;\r\n    uint256 feePercentage;\r\n  }\r\n\r\n  string constant public VERSION = \u00271.0\u0027;\r\n\r\n  uint256 public feePercentage = 3;\r\n  uint256 public feePerCode = 100000000000000; // 0.0001 ETH\r\n  uint256 public unsealTimestampLimit = 604800; // \u958B\u5C01\u65E5\u306F\u6700\u5927 1 \u9031\u9593\u5148\r\n  uint256 public balance;\r\n\r\n  uint8 public CODE_STATUS_NOT_EXIST = 0;\r\n  uint8 public CODE_STATUS_NOT_USED = 1;\r\n  uint8 public CODE_STATUS_USED = 2;\r\n\r\n  mapping (uint256 =\u003E LuckyBag) public luckyBags;\r\n  mapping (uint256 =\u003E mapping (address =\u003E uint256)) public drawerToNotYetSendNum;\r\n  mapping (uint256 =\u003E mapping (bytes32 =\u003E uint8)) public codeStatus;\r\n  mapping (uint256 =\u003E uint256) public deposit;\r\n  mapping (address =\u003E uint256[]) private creatorToIds;\r\n  mapping (address =\u003E uint256[]) private drawerToIds;\r\n\r\n  // \u3053\u306E\u95A2\u6570\u3092\u547C\u3073\u51FA\u3059\u524D\u306B\u3001\u3053\u306E\u30B3\u30F3\u30C8\u30E9\u30AF\u30C8\u306B approval \u3092\u4E0E\u3048\u3066\u304A\u304F\u5FC5\u8981\u304C\u3042\u308B\r\n  function create(uint256 id, address[] calldata contractAddresses, uint256[] calldata tokenIds, uint256 price,\r\n    uint256 unsealingTimestamp, bool sellingAfterUnsealingFlag, bytes32[] calldata hashedCodes) external payable nonReentrant {\r\n    if (hashedCodes.length \u003E 0) {\r\n      require(msg.value == feePerCode * hashedCodes.length, \u0027insufficient code fee\u0027);\r\n      balance = balance.add(msg.value);\r\n    }\r\n    for (uint i = 0; i \u003C tokenIds.length; i\u002B\u002B) {\r\n      IERC721 token = IERC721(contractAddresses[i]);\r\n      require(msg.sender == token.ownerOf(tokenIds[i]), \u0027not owner\u0027);\r\n      token.transferFrom(msg.sender, address(this), tokenIds[i]);\r\n    }\r\n    createInner(id, contractAddresses, tokenIds, price, unsealingTimestamp, sellingAfterUnsealingFlag, hashedCodes);\r\n  }\r\n\r\n  function draw(uint256 id, uint256 code, bool withUnsealFlag) external payable nonReentrant {\r\n    LuckyBag storage luckyBag = luckyBags[id];\r\n    require(luckyBag.creator != address(0), \u0027not exist lucky bag\u0027);\r\n    require(luckyBag.inventory \u003E= 1, \u0027sold out\u0027);\r\n    require(luckyBag.price == msg.value || luckyBag.codeFlag, \u0027not match price\u0027);\r\n    require(useCode(luckyBag, code), \u0027invalid code\u0027);\r\n    luckyBag.inventory = luckyBag.inventory.sub(1);\r\n    drawerToIds[msg.sender].push(id);\r\n\r\n    if (!luckyBag.codeFlag) {\r\n      deposit[id] = deposit[id].add(msg.value);\r\n    }\r\n    drawerToNotYetSendNum[id][msg.sender] = drawerToNotYetSendNum[id][msg.sender].add(1);\r\n    emit Draw(id, msg.sender, code);\r\n\r\n    if (block.timestamp \u003E= luckyBag.unsealingTimestamp) {\r\n      require(luckyBag.sellingAfterUnsealingFlag, \u0027sale period has passed\u0027);\r\n      if (withUnsealFlag) {\r\n        drawerToNotYetSendNum[id][msg.sender] = drawerToNotYetSendNum[id][msg.sender].sub(1);\r\n        decideAndSendItem(luckyBag);\r\n        sendEther(luckyBag);\r\n      }\r\n    }\r\n  }\r\n\r\n  function unseal(uint256 id) external nonReentrant {\r\n    LuckyBag storage luckyBag = luckyBags[id];\r\n    require(luckyBag.creator != address(0), \u0027not exist lucky bag\u0027);\r\n    require(drawerToNotYetSendNum[id][msg.sender] \u003E= 1, \u0027no items to unseal\u0027);\r\n    require(block.timestamp \u003E= luckyBag.unsealingTimestamp, \u0027can not unseal yet\u0027);\r\n    drawerToNotYetSendNum[id][msg.sender] = drawerToNotYetSendNum[id][msg.sender].sub(1);\r\n    decideAndSendItem(luckyBag);\r\n    if (!luckyBag.codeFlag) {\r\n      deposit[id] = deposit[id].sub(luckyBag.price);\r\n      sendEther(luckyBag);\r\n    }\r\n  }\r\n\r\n  function batchUnseal(uint256[] calldata ids) external nonReentrant {\r\n    uint32 totalCount = uint32(ids.length);\r\n    for (uint32 i = 0; i \u003C totalCount; i\u002B\u002B) {\r\n      uint256 id = ids[i];\r\n      LuckyBag storage luckyBag = luckyBags[id];\r\n      require(luckyBag.creator != address(0), \u0027not exist lucky bag\u0027);\r\n      require(drawerToNotYetSendNum[id][msg.sender] \u003E= 1, \u0027no items to unseal\u0027);\r\n      require(block.timestamp \u003E= luckyBag.unsealingTimestamp, \u0027can not unseal yet\u0027);\r\n      drawerToNotYetSendNum[id][msg.sender] = drawerToNotYetSendNum[id][msg.sender].sub(1);\r\n      decideAndSendItem(luckyBag);\r\n      if (!luckyBag.codeFlag) {\r\n        deposit[id] = deposit[id].sub(luckyBag.price);\r\n        sendEther(luckyBag);\r\n      }\r\n    }\r\n  }\r\n\r\n  function batchWithdrawInventory(uint256[] calldata ids) external nonReentrant {\r\n    uint32 totalCount = uint32(ids.length);\r\n    for (uint32 i = 0; i \u003C totalCount; i\u002B\u002B) {\r\n      uint256 id = ids[i];\r\n      LuckyBag storage luckyBag = luckyBags[id];\r\n      require(luckyBag.creator != address(0), \u0027not exist lucky bag\u0027);\r\n      require(luckyBag.creator == msg.sender, \u0027not creator\u0027);\r\n      require(luckyBag.inventory \u003E= 1, \u0027sold out\u0027);\r\n      require(block.timestamp \u003E= luckyBag.unsealingTimestamp, \u0027can not withdraw inventory yet\u0027);\r\n      luckyBag.inventory = luckyBag.inventory.sub(1);\r\n      drawerToIds[msg.sender].push(id);\r\n      decideAndSendItem(luckyBag);\r\n    }\r\n  }\r\n\r\n  function withdrawInventory(uint256 id) external nonReentrant {\r\n    LuckyBag storage luckyBag = luckyBags[id];\r\n    require(luckyBag.creator != address(0), \u0027not exist lucky bag\u0027);\r\n    require(luckyBag.creator == msg.sender, \u0027not creator\u0027);\r\n    require(luckyBag.inventory \u003E= 1, \u0027sold out\u0027);\r\n    require(block.timestamp \u003E= luckyBag.unsealingTimestamp, \u0027can not withdraw inventory yet\u0027);\r\n    luckyBag.inventory = luckyBag.inventory.sub(1);\r\n    drawerToIds[msg.sender].push(id);\r\n    decideAndSendItem(luckyBag);\r\n  }\r\n\r\n  function withdraw(uint256 id) external nonReentrant {\r\n    require(luckyBags[id].creator == msg.sender, \u0027not creator\u0027);\r\n    require(deposit[id] \u003E 0, \u0027insufficient deposit\u0027);\r\n    uint256 amount = deposit[id];\r\n    deposit[id] = 0;\r\n    msg.sender.transfer(amount);\r\n  }\r\n\r\n  function get(uint256 id) external view\r\n    returns (address creator, address[] memory contractAddresses, uint256[] memory tokenIds,\r\n      uint256 price, uint256 total, uint256 inventory, uint256 unsealingTimestamp,\r\n      bool sellingAfterUnsealingFlag, bool codeFlag, address[] memory drawers, uint256 thisFeePercentage\r\n    ) {\r\n    LuckyBag memory luckyBag = luckyBags[id];\r\n    require(luckyBag.creator != address(0), \u0027not exist lucky bag\u0027);\r\n    return (\r\n      luckyBag.creator,\r\n      luckyBag.contractAddresses,\r\n      luckyBag.tokenIds,\r\n      luckyBag.price,\r\n      luckyBag.total,\r\n      luckyBag.inventory,\r\n      luckyBag.unsealingTimestamp,\r\n      luckyBag.sellingAfterUnsealingFlag,\r\n      luckyBag.codeFlag,\r\n      luckyBag.drawers,\r\n      luckyBag.feePercentage\r\n    );\r\n  }\r\n\r\n  function getCreatedIds(address creator) external view returns (uint256[] memory) {\r\n    return creatorToIds[creator];\r\n  }\r\n\r\n  function getDrawnIds(address drawer) external view returns (uint256[] memory) {\r\n    return drawerToIds[drawer];\r\n  }\r\n\r\n  function getInventories(uint256 id1, uint256 id2, uint256 id3, uint256 id4, uint256 id5)\r\n    external view returns (uint256, uint256, uint256, uint256, uint256) {\r\n    return(luckyBags[id1].inventory, luckyBags[id2].inventory, luckyBags[id3].inventory, luckyBags[id4].inventory, luckyBags[id5].inventory);\r\n  }\r\n\r\n  function addCodes(uint256 id, bytes32[] memory hashedCodes) public {\r\n    require(msg.sender == luckyBags[id].creator, \u0027not creator\u0027);\r\n    uint32 totalCount = uint32(hashedCodes.length);\r\n    for (uint32 i = 0; i \u003C totalCount; i\u002B\u002B) {\r\n      codeStatus[id][hashedCodes[i]] = CODE_STATUS_NOT_USED;\r\n    }\r\n  }\r\n\r\n  function transfer(address payable to, uint256 amount) public onlyOwner {\r\n    require(balance \u003E= amount, \u0027insufficient balance\u0027);\r\n    require(to != address(0), \u0027invalid to address\u0027);\r\n    balance = balance.sub(amount);\r\n    to.transfer(amount);\r\n  }\r\n\r\n  function setFeePercentage(uint256 newFeePercentage) public onlyOwner {\r\n    feePercentage = newFeePercentage;\r\n  }\r\n\r\n  function setFeePerCode(uint256 newFeePerCode) public onlyOwner {\r\n    feePerCode = newFeePerCode;\r\n  }\r\n\r\n  function setUnsealTimestampLimit(uint256 newUnsealTimestampLimit) public onlyOwner {\r\n    unsealTimestampLimit = newUnsealTimestampLimit;\r\n  }\r\n\r\n  // ---\r\n\r\n  function createInner(uint256 id, address[] memory contractAddresses, uint256[] memory tokenIds,\r\n    uint256 price, uint256 unsealingTimestamp, bool sellingAfterUnsealingFlag, bytes32[] memory hashedCodes) internal {\r\n    require(luckyBags[id].creator == address(0), \u0027already exist id\u0027);\r\n    require((block.timestamp \u002B unsealTimestampLimit) \u003E= unsealingTimestamp, \u0027invalid unsealingTimestamp\u0027);\r\n    address[] memory drawers = new address[](tokenIds.length);\r\n    bool codeFlag = hashedCodes.length \u003E 0 ? true : false;\r\n    luckyBags[id] = LuckyBag(\r\n      id, msg.sender, contractAddresses, tokenIds,\r\n      price, tokenIds.length, tokenIds.length, unsealingTimestamp,\r\n      sellingAfterUnsealingFlag, codeFlag, hashedCodes, drawers, feePercentage\r\n    );\r\n    creatorToIds[msg.sender].push(id);\r\n    if (hashedCodes.length \u003E 0) {\r\n      addCodes(id, hashedCodes);\r\n    }\r\n    emit Create(id, msg.sender, tokenIds.length,\r\n      price, unsealingTimestamp, codeFlag, sellingAfterUnsealingFlag, feePercentage);\r\n  }\r\n\r\n  function useCode(LuckyBag memory luckyBag, uint256 code) internal returns (bool) {\r\n    if (!luckyBag.codeFlag) {\r\n      return true;\r\n    }\r\n    bytes32 hashedCode = keccak256(abi.encodePacked(code));\r\n    if (codeStatus[luckyBag.id][hashedCode] == CODE_STATUS_NOT_USED) {\r\n      codeStatus[luckyBag.id][hashedCode] = CODE_STATUS_USED;\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  function decideAndSendItem(LuckyBag storage luckyBag) internal {\r\n    uint32 totalCount = uint32(luckyBag.tokenIds.length);\r\n    uint32 index = getRandomNum(totalCount);\r\n    for (uint32 i = 0; i \u003C totalCount; i\u002B\u002B) {\r\n      if (luckyBag.drawers[index] != address(0)) {\r\n        index = (index \u002B 1) % totalCount;\r\n        continue;\r\n      }\r\n      luckyBag.drawers[index] = msg.sender;\r\n      break;\r\n    }\r\n    IERC721(luckyBag.contractAddresses[index]).transferFrom(address(this), msg.sender, luckyBag.tokenIds[index]);\r\n  }\r\n\r\n  function getRandomNum(uint32 max) internal view returns (uint32) {\r\n    return uint32(uint256(keccak256(abi.encodePacked(block.timestamp, block.difficulty))) % max);\r\n  }\r\n\r\n  function sendEther(LuckyBag memory luckyBag) internal {\r\n    uint256 fee = getFee(luckyBag.price, luckyBag.feePercentage);\r\n    luckyBag.creator.transfer(luckyBag.price.sub(fee));\r\n    balance = balance.add(fee);\r\n  }\r\n\r\n  function getFee(uint256 amount, uint256 _feePercentage) internal pure returns (uint256) {\r\n    return amount.div(100).mul(_feePercentage);\r\n  }\r\n}","ABI":"[{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022id\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022creator\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022total\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022price\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022unsealingTimestamp\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022sellingAfterUnsealingFlag\u0022,\u0022type\u0022:\u0022bool\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022codeFlag\u0022,\u0022type\u0022:\u0022bool\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022feePercentage\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022Create\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022id\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022drawer\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022code\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022Draw\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022previousOwner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022OwnershipTransferred\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022CODE_STATUS_NOT_EXIST\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint8\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint8\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022CODE_STATUS_NOT_USED\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint8\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint8\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022CODE_STATUS_USED\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint8\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint8\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022VERSION\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022string\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022id\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022bytes32[]\u0022,\u0022name\u0022:\u0022hashedCodes\u0022,\u0022type\u0022:\u0022bytes32[]\u0022}],\u0022name\u0022:\u0022addCodes\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022balance\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256[]\u0022,\u0022name\u0022:\u0022ids\u0022,\u0022type\u0022:\u0022uint256[]\u0022}],\u0022name\u0022:\u0022batchUnseal\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256[]\u0022,\u0022name\u0022:\u0022ids\u0022,\u0022type\u0022:\u0022uint256[]\u0022}],\u0022name\u0022:\u0022batchWithdrawInventory\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022codeStatus\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint8\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint8\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022id\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022address[]\u0022,\u0022name\u0022:\u0022contractAddresses\u0022,\u0022type\u0022:\u0022address[]\u0022},{\u0022internalType\u0022:\u0022uint256[]\u0022,\u0022name\u0022:\u0022tokenIds\u0022,\u0022type\u0022:\u0022uint256[]\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022price\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022unsealingTimestamp\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022sellingAfterUnsealingFlag\u0022,\u0022type\u0022:\u0022bool\u0022},{\u0022internalType\u0022:\u0022bytes32[]\u0022,\u0022name\u0022:\u0022hashedCodes\u0022,\u0022type\u0022:\u0022bytes32[]\u0022}],\u0022name\u0022:\u0022create\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:true,\u0022stateMutability\u0022:\u0022payable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022deposit\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022id\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022code\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022withUnsealFlag\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022name\u0022:\u0022draw\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:true,\u0022stateMutability\u0022:\u0022payable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022drawerToNotYetSendNum\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022feePerCode\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022feePercentage\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022id\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022get\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022creator\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022address[]\u0022,\u0022name\u0022:\u0022contractAddresses\u0022,\u0022type\u0022:\u0022address[]\u0022},{\u0022internalType\u0022:\u0022uint256[]\u0022,\u0022name\u0022:\u0022tokenIds\u0022,\u0022type\u0022:\u0022uint256[]\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022price\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022total\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022inventory\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022unsealingTimestamp\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022sellingAfterUnsealingFlag\u0022,\u0022type\u0022:\u0022bool\u0022},{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022codeFlag\u0022,\u0022type\u0022:\u0022bool\u0022},{\u0022internalType\u0022:\u0022address[]\u0022,\u0022name\u0022:\u0022drawers\u0022,\u0022type\u0022:\u0022address[]\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022thisFeePercentage\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022creator\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022getCreatedIds\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256[]\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256[]\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022drawer\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022getDrawnIds\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256[]\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256[]\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022id1\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022id2\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022id3\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022id4\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022id5\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022getInventories\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022luckyBags\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022id\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022address payable\u0022,\u0022name\u0022:\u0022creator\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022price\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022total\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022inventory\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022unsealingTimestamp\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022sellingAfterUnsealingFlag\u0022,\u0022type\u0022:\u0022bool\u0022},{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022codeFlag\u0022,\u0022type\u0022:\u0022bool\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022feePercentage\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022owner\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022newFeePerCode\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022setFeePerCode\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022newFeePercentage\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022setFeePercentage\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022newUnsealTimestampLimit\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022setUnsealTimestampLimit\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address payable\u0022,\u0022name\u0022:\u0022to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022transfer\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022transferOwnership\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022id\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022unseal\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022unsealTimestampLimit\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022id\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022withdraw\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022id\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022withdrawInventory\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022}]","ContractName":"CryptoLuckyBags","CompilerVersion":"v0.5.12\u002Bcommit.7709ece9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://d8ea5308545ed97d71bc0ab3b83f3d8237e7df5ba9569abc3c2caccc2677a922"}]