[{"SourceCode":"pragma solidity ^0.6.2;\r\n\r\ncontract Savings {\r\n\tmapping(address =\u003E mapping(address =\u003E uint256)) private balances;\r\n\tmapping(address =\u003E mapping(address =\u003E uint)) private experations;\r\n\r\n\r\n    // Function to deposit currency to the contract\r\n    // _duration is in blocks from current\r\n\tfunction deposit(address _tokenAddress, uint256 _amount, uint _duration) public returns (bool success) {\r\n\r\n\r\n\t\t// Require that user doesn\u0027t have any pending balances in this token\r\n\t\trequire(balances[msg.sender][_tokenAddress] == 0, \u0022You can\u0027t have two pending pools with the same currency\u0022);\r\n\r\n\t\t// Check that we have allowance to transfer tokens\r\n\t\trequire(ERC20Interface(_tokenAddress).allowance(msg.sender,address(this)) \u003E= _amount, \u0022Allowance is too low for this transaction\u0022);\r\n\r\n\t\t// Check that user has requested balance\r\n\t\trequire(ERC20Interface(_tokenAddress).balanceOf(msg.sender) \u003E= _amount,\u0022Wallet balance is too low for this transaction\u0022);\r\n\r\n\r\n\t\t// Good to go, execute transaction\r\n\t\t\r\n\r\n\t\t// transfer tokens to this contract\r\n\t\trequire(ERC20Interface(_tokenAddress).transferFrom(msg.sender,address(this),_amount));\r\n\r\n\t\t// Experation is current block plus duration\r\n\t\tuint experation = block.number \u002B _duration;\r\n\t\tassert(experation \u003E block.number);\r\n\r\n\t\tbalances[msg.sender][_tokenAddress] = _amount;\r\n\t\texperations[msg.sender][_tokenAddress] = experation;\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction withdraw(address _tokenAddress) public returns (bool success) {\r\n\t\t//Require that value is not zero\r\n\t\trequire(balances[msg.sender][_tokenAddress] \u003E 0, \u0022Sender does not own any of specified token in Savings contract\u0022);\r\n\r\n\t\t// Require that term has ended\r\n\t\trequire(experations[msg.sender][_tokenAddress] \u003C= block.number, \u0022The term has not ended yet\u0022);\r\n\r\n\t\t// Store amount to send back then clear before sending. Protects against attack.\r\n\t\tuint256 withdrawalAmount = balances[msg.sender][_tokenAddress];\r\n\r\n\t\t// Clear term from contract\r\n\t\tbalances[msg.sender][_tokenAddress] = 0;\r\n\r\n\t\t// Send back tokens\r\n\t\trequire(ERC20Interface(_tokenAddress).transfer(msg.sender,withdrawalAmount));\r\n\r\n\t\treturn true;\r\n\t}\r\n}\r\n\r\n\r\n\r\ninterface ERC20Interface {\r\n\tfunction totalSupply() external view returns (uint supply);\r\n    function balanceOf(address _owner) external view returns (uint balance);\r\n    function transfer(address _to, uint _value) external returns (bool success);\r\n    function transferFrom(address _from, address _to, uint _value) external returns (bool success);\r\n    function approve(address _spender, uint _value) external returns (bool success);\r\n    function allowance(address _owner, address _spender) external view returns (uint remaining);\r\n    function decimals() external view returns(uint digits);\r\n}","ABI":"[{\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_tokenAddress\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_amount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_duration\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022deposit\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022success\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_tokenAddress\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022withdraw\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022success\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022}]","ContractName":"Savings","CompilerVersion":"v0.6.2\u002Bcommit.bacdbe57","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"ipfs://7e9bec656f19a9fd3f527be89bc3ca130f6e43d84509388756f23d33a3b09819"}]