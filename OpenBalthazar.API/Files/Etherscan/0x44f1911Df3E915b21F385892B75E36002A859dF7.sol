[{"SourceCode":"pragma solidity ^0.5.10;\r\n\r\n// Using formulas from https://hyperelliptic.org/EFD/g1p/auto-twisted-projective.html\r\n// and constants from https://tools.ietf.org/html/draft-josefsson-eddsa-ed25519-03\r\n\r\ncontract Ed25519 {\r\n    uint constant q = 2 ** 255 - 19;\r\n    uint constant d = 37095705934669439343138083508754565189542113879843219016388785533085940283555;\r\n                      // = -(121665/121666)\r\n    uint constant Bx = 15112221349535400772501151409588531511454012693041857206046113283949847762202;\r\n    uint constant By = 46316835694926478169428394003475163141307993866256225615783033603165251855960;\r\n\r\n    struct Point {\r\n        uint x;\r\n        uint y;\r\n        uint z;\r\n    }\r\n\r\n    struct Scratchpad {\r\n        uint a;\r\n        uint b;\r\n        uint c;\r\n        uint d;\r\n        uint e;\r\n        uint f;\r\n        uint g;\r\n        uint h;\r\n    }\r\n\r\n    function inv(uint a) internal view returns (uint invA) {\r\n        uint e = q - 2;\r\n        uint m = q;\r\n\r\n        // use bigModExp precompile\r\n        assembly {\r\n            let p := mload(0x40)\r\n            mstore(p, 0x20)\r\n            mstore(add(p, 0x20), 0x20)\r\n            mstore(add(p, 0x40), 0x20)\r\n            mstore(add(p, 0x60), a)\r\n            mstore(add(p, 0x80), e)\r\n            mstore(add(p, 0xa0), m)\r\n            if iszero(staticcall(not(0), 0x05, p, 0xc0, p, 0x20)) {\r\n                revert(0, 0)\r\n            }\r\n            invA := mload(p)\r\n        }\r\n    }\r\n\r\n    function ecAdd(Point memory p1,\r\n                   Point memory p2) internal pure returns (Point memory p3) {\r\n        Scratchpad memory tmp;\r\n\r\n        tmp.a = mulmod(p1.z, p2.z, q);\r\n        tmp.b = mulmod(tmp.a, tmp.a, q);\r\n        tmp.c = mulmod(p1.x, p2.x, q);\r\n        tmp.d = mulmod(p1.y, p2.y, q);\r\n        tmp.e = mulmod(d, mulmod(tmp.c, tmp.d, q), q);\r\n        tmp.f = addmod(tmp.b, q - tmp.e, q);\r\n        tmp.g = addmod(tmp.b, tmp.e, q);\r\n        p3.x = mulmod(mulmod(tmp.a, tmp.f, q),\r\n                      addmod(addmod(mulmod(addmod(p1.x, p1.y, q),\r\n                                           addmod(p2.x, p2.y, q), q),\r\n                                    q - tmp.c, q), q - tmp.d, q), q);\r\n        p3.y = mulmod(mulmod(tmp.a, tmp.g, q),\r\n                      addmod(tmp.d, tmp.c, q), q);\r\n        p3.z = mulmod(tmp.f, tmp.g, q);\r\n    }\r\n\r\n    function ecDouble(Point memory p1) internal pure returns (Point memory p2) {\r\n        Scratchpad memory tmp;\r\n\r\n        tmp.a = addmod(p1.x, p1.y, q);\r\n        tmp.b = mulmod(tmp.a, tmp.a, q);\r\n        tmp.c = mulmod(p1.x, p1.x, q);\r\n        tmp.d = mulmod(p1.y, p1.y, q);\r\n        tmp.e = q - tmp.c;\r\n        tmp.f = addmod(tmp.e, tmp.d, q);\r\n        tmp.h = mulmod(p1.z, p1.z, q);\r\n        tmp.g = addmod(tmp.f, q - mulmod(2, tmp.h, q), q);\r\n        p2.x = mulmod(addmod(addmod(tmp.b, q - tmp.c, q), q - tmp.d, q),\r\n                      tmp.g, q);\r\n        p2.y = mulmod(tmp.f, addmod(tmp.e, q - tmp.d, q), q);\r\n        p2.z = mulmod(tmp.f, tmp.g, q);\r\n    }\r\n\r\n    function scalarMultBase(uint s) public view returns (uint, uint) {\r\n        Point memory b;\r\n        Point memory result;\r\n        b.x = Bx;\r\n        b.y = By;\r\n        b.z = 1;\r\n        result.x = 0;\r\n        result.y = 1;\r\n        result.z = 1;\r\n\r\n        while (s \u003E 0) {\r\n            if (s \u0026 1 == 1) { result = ecAdd(result, b); }\r\n            s = s \u003E\u003E 1;\r\n            b = ecDouble(b);\r\n        }\r\n\r\n        uint invZ = inv(result.z);\r\n        result.x = mulmod(result.x, invZ, q);\r\n        result.y = mulmod(result.y, invZ, q);\r\n\r\n        return (result.x, result.y);\r\n    }\r\n}\r\n\r\ncontract Hub is Ed25519 {\r\n    address payable constant BLACK_HOLE = 0x0000000000000000000000000000000000000000;\r\n    uint constant DEPOSIT_DURATION = 2 hours;\r\n    uint constant DEPOSIT_DURATION_MARGIN = 30 minutes;\r\n\r\n    struct AntiSpamFee {\r\n        uint fee;\r\n        uint blockNumber;\r\n    }\r\n\r\n    struct Deposit {\r\n        address sender;\r\n        address recipient;\r\n        uint adaptorPubKey;\r\n        uint value;\r\n        uint blockNumber;\r\n        uint deadline;\r\n    }\r\n\r\n    struct Server {\r\n        string target;\r\n        bytes cert;\r\n        uint timestamp;\r\n    }\r\n\r\n    mapping(bytes32 =\u003E AntiSpamFee) public antiSpamFees;\r\n    mapping(bytes32 =\u003E Deposit) public deposits;\r\n    mapping(uint =\u003E uint) public adaptorPrivKeys;\r\n\r\n    mapping(uint =\u003E Server) public servers;\r\n    uint public nextServerID = 0;\r\n\r\n    string public version = \u00220.1.0\u0022;\r\n    bool public deprecated = false;\r\n    address public admin;\r\n\r\n    modifier onlyAdmin {\r\n        require(msg.sender == admin);\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n        admin = msg.sender;\r\n    }\r\n\r\n    function burnAntiSpamFee(bytes32 hashedID) external payable {\r\n        antiSpamFees[hashedID].fee \u002B= msg.value;\r\n        antiSpamFees[hashedID].blockNumber = block.number;\r\n        BLACK_HOLE.transfer(msg.value);\r\n    }\r\n\r\n    function checkAntiSpamConfirmations(uint id, uint fee) external view returns (uint) {\r\n        bytes32 hashedID = hash(id);\r\n\r\n        if (antiSpamFees[hashedID].fee \u003C fee) {\r\n            return 0;\r\n        } else {\r\n            return block.number - antiSpamFees[hashedID].blockNumber;\r\n        }\r\n    }\r\n\r\n    function depositEther(address recipient, uint adaptorPubKey, bytes32 hashedAntiSpamID) external payable {\r\n        require(deposits[hashedAntiSpamID].blockNumber == 0);\r\n\r\n        deposits[hashedAntiSpamID].sender = msg.sender;\r\n        deposits[hashedAntiSpamID].recipient = recipient;\r\n        deposits[hashedAntiSpamID].adaptorPubKey = adaptorPubKey;\r\n        deposits[hashedAntiSpamID].value = msg.value;\r\n        deposits[hashedAntiSpamID].blockNumber = block.number;\r\n        deposits[hashedAntiSpamID].deadline = now \u002B DEPOSIT_DURATION;\r\n    }\r\n\r\n    function checkDepositConfirmations(address recipient, uint adaptorPubKey,\r\n                                       uint value, bytes32 hashedAntiSpamID) external view returns (uint) {\r\n        if (deposits[hashedAntiSpamID].recipient != recipient ||\r\n            deposits[hashedAntiSpamID].adaptorPubKey != adaptorPubKey ||\r\n            deposits[hashedAntiSpamID].value \u003C value ||\r\n            deposits[hashedAntiSpamID].deadline - DEPOSIT_DURATION_MARGIN \u003C now) {\r\n            return 0;\r\n        } else {\r\n            return block.number - deposits[hashedAntiSpamID].blockNumber;\r\n        }\r\n    }\r\n\r\n    function claimDeposit(uint adaptorPrivKey, uint antiSpamID) external {\r\n        bytes32 hashedAntiSpamID = hash(antiSpamID);\r\n        require(deposits[hashedAntiSpamID].deadline \u003E= now);\r\n        require(deposits[hashedAntiSpamID].recipient == msg.sender);\r\n        require(adaptorPrivKey != 0);\r\n\r\n        (, uint adaptorPubKey) = scalarMultBase(adaptorPrivKey);    // check via Ed25519.sol\r\n        require(deposits[hashedAntiSpamID].adaptorPubKey == adaptorPubKey);\r\n        adaptorPrivKeys[adaptorPubKey] = adaptorPrivKey;\r\n\r\n        uint value = deposits[hashedAntiSpamID].value;\r\n        delete deposits[hashedAntiSpamID];\r\n        delete antiSpamFees[hashedAntiSpamID];\r\n        msg.sender.transfer(value);\r\n    }\r\n\r\n    function reclaimDeposit(bytes32 hashedAntiSpamID) external {\r\n        require(deposits[hashedAntiSpamID].deadline \u003C now);\r\n        require(deposits[hashedAntiSpamID].sender == msg.sender);\r\n\r\n        uint value = deposits[hashedAntiSpamID].value;\r\n        delete deposits[hashedAntiSpamID];\r\n        delete antiSpamFees[hashedAntiSpamID];\r\n        msg.sender.transfer(value);\r\n    }\r\n\r\n    function registerServer(string calldata target, bytes calldata cert) external {\r\n        servers[nextServerID].target = target;\r\n        servers[nextServerID].cert = cert;\r\n        servers[nextServerID].timestamp = now;\r\n        nextServerID \u002B= 1;\r\n    }\r\n\r\n    function fetchServer(uint maxAge,\r\n                         uint offset) external view\r\n                         returns (bool, string memory, bytes memory) {\r\n        if (offset \u003E= nextServerID) {\r\n            return (false, \u0022\u0022, \u0022\u0022);\r\n        }\r\n\r\n        uint id = nextServerID - offset - 1;\r\n        if (servers[id].timestamp \u002B maxAge \u003C now) {\r\n            return (false, \u0022\u0022, \u0022\u0022);\r\n        }\r\n\r\n        return (true, servers[id].target, servers[id].cert);\r\n    }\r\n\r\n    function hash(uint id) public pure returns (bytes32) {\r\n        return sha256(abi.encode(id));\r\n    }\r\n\r\n    function setVersion(string calldata _version) external onlyAdmin {\r\n        version = _version;\r\n    }\r\n\r\n    function setDeprecated(bool _deprecated) external onlyAdmin {\r\n        deprecated = _deprecated;\r\n    }\r\n}","ABI":"[{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022deprecated\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022deposits\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022sender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022recipient\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022adaptorPubKey\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022blockNumber\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022deadline\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022version\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022recipient\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022adaptorPubKey\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022hashedAntiSpamID\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022checkDepositConfirmations\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022antiSpamFees\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022fee\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022blockNumber\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022servers\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022target\u0022,\u0022type\u0022:\u0022string\u0022},{\u0022name\u0022:\u0022cert\u0022,\u0022type\u0022:\u0022bytes\u0022},{\u0022name\u0022:\u0022timestamp\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022id\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022fee\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022checkAntiSpamConfirmations\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_version\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022name\u0022:\u0022setVersion\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022nextServerID\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022target\u0022,\u0022type\u0022:\u0022string\u0022},{\u0022name\u0022:\u0022cert\u0022,\u0022type\u0022:\u0022bytes\u0022}],\u0022name\u0022:\u0022registerServer\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022hashedID\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022burnAntiSpamFee\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:true,\u0022stateMutability\u0022:\u0022payable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022id\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022hash\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022pure\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022recipient\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022adaptorPubKey\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022hashedAntiSpamID\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022depositEther\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:true,\u0022stateMutability\u0022:\u0022payable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022s\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022scalarMultBase\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_deprecated\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022name\u0022:\u0022setDeprecated\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022adaptorPrivKeys\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022maxAge\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022offset\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022fetchServer\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022string\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bytes\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022adaptorPrivKey\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022antiSpamID\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022claimDeposit\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022admin\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022hashedAntiSpamID\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022reclaimDeposit\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022constructor\u0022}]","ContractName":"Hub","CompilerVersion":"v0.5.10\u002Bcommit.5a6ea5b1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://4f33fc8e9418b12b01999f27372001917f3907dd3ce8141bbbbe0773260b588e"}]