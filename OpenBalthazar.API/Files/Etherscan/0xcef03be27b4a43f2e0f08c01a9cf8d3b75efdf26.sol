[{"SourceCode":"pragma solidity 0.5.11; // optimization runs: 200, evm version: petersburg\r\n\r\n\r\ninterface DharmaAccountRecoveryManagerInterface {\r\n  // Fires an event whenever a user signing key is recovered for an account.\r\n  event Recovery(\r\n    address indexed wallet, address oldUserSigningKey, address newUserSigningKey\r\n  );\r\n\r\n  // Fire an event whenever account recovery is disabled for an account.\r\n  event RecoveryDisabled(address wallet);\r\n\r\n  function initiateAccountRecovery(\r\n    address smartWallet, address userSigningKey, uint256 extraTime\r\n  ) external;\r\n\r\n  function initiateAccountRecoveryDisablement(\r\n    address smartWallet, uint256 extraTime\r\n  ) external;\r\n\r\n  function recover(address wallet, address newUserSigningKey) external;\r\n\r\n  function disableAccountRecovery(address wallet) external;\r\n\r\n  function accountRecoveryDisabled(\r\n    address wallet\r\n  ) external view returns (bool hasDisabledAccountRecovery);\r\n}\r\n\r\n\r\ninterface TimelockerModifiersInterface {\r\n  function initiateModifyTimelockInterval(\r\n    bytes4 functionSelector, uint256 newTimelockInterval, uint256 extraTime\r\n  ) external;\r\n\r\n  function modifyTimelockInterval(\r\n    bytes4 functionSelector, uint256 newTimelockInterval\r\n  ) external;\r\n\r\n  function initiateModifyTimelockExpiration(\r\n    bytes4 functionSelector, uint256 newTimelockExpiration, uint256 extraTime\r\n  ) external;\r\n\r\n  function modifyTimelockExpiration(\r\n    bytes4 functionSelector, uint256 newTimelockExpiration\r\n  ) external;\r\n}\r\n\r\n\r\ninterface DharmaSmartWalletRecovery {\r\n  function recover(address newUserSigningKey) external;\r\n  function getUserSigningKey() external view returns (address userSigningKey);\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a \u002B b;\r\n    require(c \u003E= a, \u0022SafeMath: addition overflow\u0022);\r\n\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b \u003C= a, \u0022SafeMath: subtraction overflow\u0022);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b, \u0022SafeMath: multiplication overflow\u0022);\r\n\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b \u003E 0, \u0022SafeMath: division by zero\u0022);\r\n    uint256 c = a / b;\r\n\r\n    return c;\r\n  }\r\n\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0, \u0022SafeMath: modulo by zero\u0022);\r\n    return a % b;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * \u0060onlyOwner\u0060, which can be aplied to your functions to restrict their use to\r\n * the owner.\r\n *\r\n * In order to transfer ownership, a recipient must be specified, at which point\r\n * the specified recipient can call \u0060acceptOwnership\u0060 and take ownership.\r\n */\r\ncontract TwoStepOwnable {\r\n  address private _owner;\r\n\r\n  address private _newPotentialOwner;\r\n\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n  /**\r\n   * @dev Initialize contract by setting transaction submitter as initial owner.\r\n   */\r\n  constructor() internal {\r\n    _owner = tx.origin;\r\n    emit OwnershipTransferred(address(0), _owner);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the address of the current owner.\r\n   */\r\n  function owner() public view returns (address) {\r\n    return _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(isOwner(), \u0022TwoStepOwnable: caller is not the owner.\u0022);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns true if the caller is the current owner.\r\n   */\r\n  function isOwner() public view returns (bool) {\r\n    return msg.sender == _owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows a new account (\u0060newOwner\u0060) to accept ownership.\r\n   * Can only be called by the current owner.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(\r\n      newOwner != address(0),\r\n      \u0022TwoStepOwnable: new potential owner is the zero address.\u0022\r\n    );\r\n\r\n    _newPotentialOwner = newOwner;\r\n  }\r\n\r\n  /**\r\n   * @dev Cancel a transfer of ownership to a new account.\r\n   * Can only be called by the current owner.\r\n   */\r\n  function cancelOwnershipTransfer() public onlyOwner {\r\n    delete _newPotentialOwner;\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers ownership of the contract to the caller.\r\n   * Can only be called by a new potential owner set by the current owner.\r\n   */\r\n  function acceptOwnership() public {\r\n    require(\r\n      msg.sender == _newPotentialOwner,\r\n      \u0022TwoStepOwnable: current owner must set caller as new potential owner.\u0022\r\n    );\r\n\r\n    delete _newPotentialOwner;\r\n\r\n    emit OwnershipTransferred(_owner, msg.sender);\r\n\r\n    _owner = msg.sender;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Timelocker\r\n * @author 0age\r\n * @notice This contract allows contracts that inherit it to implement timelocks\r\n * on functions, where the \u0060_setTimelock\u0060 internal function must first be called\r\n * and passed the target function selector and arguments. Then, a given time\r\n * interval must first fully transpire before the timelock functions can be\r\n * successfully called. Furthermore, once a timelock is complete, it will expire\r\n * after a period of time. In order to change timelock intervals or expirations,\r\n * the inheriting contract needs to implement \u0060modifyTimelockInterval\u0060 and\r\n * \u0060modifyTimelockExpiration\u0060 functions, respectively, as well as functions that\r\n * call \u0060_setTimelock\u0060 in order to initiate the timelocks for those functions.\r\n * To make a function timelocked, use the \u0060_enforceTimelock\u0060 internal function.\r\n * To set initial defult minimum timelock intervals and expirations, use the\r\n * \u0060_setInitialTimelockInterval\u0060 and \u0060_setInitialTimelockExpiration\u0060 internal\r\n * functions - they can only be used during contract creation. Finally, there\r\n * are three public getters: \u0060getTimelock\u0060, \u0060getDefaultTimelockInterval\u0060, and\r\n * \u0060getDefaultTimelockExpiration\u0060.\r\n */\r\ncontract Timelocker {\r\n  using SafeMath for uint256;\r\n\r\n  // Fire an event any time a timelock is initiated.\r\n  event TimelockInitiated(\r\n    bytes4 functionSelector, // selector of the function\r\n    uint256 timeComplete,    // timestamp at which the function can be called\r\n    bytes arguments,         // abi-encoded function arguments to call with\r\n    uint256 timeExpired      // timestamp where function can no longer be called\r\n  );\r\n\r\n  // Fire an event any time a minimum timelock interval is modified.\r\n  event TimelockIntervalModified(\r\n    bytes4 functionSelector, // selector of the function\r\n    uint256 oldInterval,     // old minimum timelock interval for the function\r\n    uint256 newInterval      // new minimum timelock interval for the function\r\n  );\r\n\r\n  // Fire an event any time a default timelock expiration is modified.\r\n  event TimelockExpirationModified(\r\n    bytes4 functionSelector, // selector of the function\r\n    uint256 oldExpiration,   // old default timelock expiration for the function\r\n    uint256 newExpiration    // new default timelock expiration for the function\r\n  );\r\n\r\n  // Each timelock has timestamps for when it is complete and when it expires.\r\n  struct Timelock {\r\n    uint128 complete;\r\n    uint128 expires;\r\n  }\r\n\r\n  // Functions have a timelock interval and time from completion to expiration.\r\n  struct TimelockDefaults {\r\n    uint128 interval;\r\n    uint128 expiration;\r\n  }\r\n\r\n  // Implement a timelock for each function and set of arguments.\r\n  mapping(bytes4 =\u003E mapping(bytes32 =\u003E Timelock)) private _timelocks;\r\n\r\n  // Implement default timelock intervals and expirations for each function.\r\n  mapping(bytes4 =\u003E TimelockDefaults) private _timelockDefaults;\r\n\r\n  // Only allow one new interval or expiration change at a time per function.\r\n  mapping(bytes4 =\u003E mapping(bytes4 =\u003E bytes32)) private _protectedTimelockIDs;\r\n\r\n  // Store modifyTimelockInterval function selector as a constant.\r\n  bytes4 private constant _MODIFY_TIMELOCK_INTERVAL_SELECTOR = bytes4(\r\n    0xe950c085\r\n  );\r\n\r\n  // Store modifyTimelockExpiration function selector as a constant.\r\n  bytes4 private constant _MODIFY_TIMELOCK_EXPIRATION_SELECTOR = bytes4(\r\n    0xd7ce3c6f\r\n  );\r\n\r\n  // Set a ridiculously high duration in order to protect against overflows.\r\n  uint256 private constant _A_TRILLION_YEARS = 365000000000000 days;\r\n\r\n  /**\r\n   * @notice In the constructor, confirm that selectors specified as constants\r\n   * are correct.\r\n   */\r\n  constructor() internal {\r\n    TimelockerModifiersInterface modifiers;\r\n\r\n    bytes4 targetModifyInterval = modifiers.modifyTimelockInterval.selector;\r\n    require(\r\n      _MODIFY_TIMELOCK_INTERVAL_SELECTOR == targetModifyInterval,\r\n      \u0022Incorrect modify timelock interval selector supplied.\u0022\r\n    );\r\n\r\n    bytes4 targetModifyExpiration = modifiers.modifyTimelockExpiration.selector;\r\n    require(\r\n      _MODIFY_TIMELOCK_EXPIRATION_SELECTOR == targetModifyExpiration,\r\n      \u0022Incorrect modify timelock expiration selector supplied.\u0022\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @notice View function to check if a timelock for the specified function and\r\n   * arguments has completed.\r\n   * @param functionSelector function to be called.\r\n   * @param arguments The abi-encoded arguments of the function to be called.\r\n   * @return A boolean indicating if the timelock exists or not and the time at\r\n   * which the timelock completes if it does exist.\r\n   */\r\n  function getTimelock(\r\n    bytes4 functionSelector, bytes memory arguments\r\n  ) public view returns (\r\n    bool exists,\r\n    bool completed,\r\n    bool expired,\r\n    uint256 completionTime,\r\n    uint256 expirationTime\r\n  ) {\r\n    // Get timelock ID using the supplied function arguments.\r\n    bytes32 timelockID = keccak256(abi.encodePacked(arguments));\r\n\r\n    // Get information on the current timelock, if one exists.\r\n    completionTime = uint256(_timelocks[functionSelector][timelockID].complete);\r\n    exists = completionTime != 0;\r\n    expirationTime = uint256(_timelocks[functionSelector][timelockID].expires);\r\n    completed = exists \u0026\u0026 now \u003E completionTime;\r\n    expired = exists \u0026\u0026 now \u003E expirationTime;\r\n  }\r\n\r\n  /**\r\n   * @notice View function to check the current minimum timelock interval on a\r\n   * given function.\r\n   * @param functionSelector function to retrieve the timelock interval for.\r\n   * @return The current minimum timelock interval for the given function.\r\n   */\r\n  function getDefaultTimelockInterval(\r\n    bytes4 functionSelector\r\n  ) public view returns (uint256 defaultTimelockInterval) {\r\n    defaultTimelockInterval = uint256(\r\n      _timelockDefaults[functionSelector].interval\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @notice View function to check the current default timelock expiration on a\r\n   * given function.\r\n   * @param functionSelector function to retrieve the timelock expiration for.\r\n   * @return The current default timelock expiration for the given function.\r\n   */\r\n  function getDefaultTimelockExpiration(\r\n    bytes4 functionSelector\r\n  ) public view returns (uint256 defaultTimelockExpiration) {\r\n    defaultTimelockExpiration = uint256(\r\n      _timelockDefaults[functionSelector].expiration\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @notice Internal function that sets a timelock so that the specified\r\n   * function can be called with the specified arguments. Note that existing\r\n   * timelocks may be extended, but not shortened - this can also be used as a\r\n   * method for \u0022cancelling\u0022 a function call by extending the timelock to an\r\n   * arbitrarily long duration. Keep in mind that new timelocks may be created\r\n   * with a shorter duration on functions that already have other timelocks on\r\n   * them, but only if they have different arguments.\r\n   * @param functionSelector selector of the function to be called.\r\n   * @param arguments The abi-encoded arguments of the function to be called.\r\n   * @param extraTime Additional time in seconds to add to the minimum timelock\r\n   * interval for the given function.\r\n   */\r\n  function _setTimelock(\r\n    bytes4 functionSelector, bytes memory arguments, uint256 extraTime\r\n  ) internal {\r\n    // Ensure that the specified extra time will not cause an overflow error.\r\n    require(extraTime \u003C _A_TRILLION_YEARS, \u0022Supplied extra time is too large.\u0022);\r\n\r\n    // Get timelock ID using the supplied function arguments.\r\n    bytes32 timelockID = keccak256(abi.encodePacked(arguments));\r\n\r\n    // For timelock interval or expiration changes, first drop any existing\r\n    // timelock for the function being modified if the argument has changed.\r\n    if (\r\n      functionSelector == _MODIFY_TIMELOCK_INTERVAL_SELECTOR ||\r\n      functionSelector == _MODIFY_TIMELOCK_EXPIRATION_SELECTOR\r\n    ) {\r\n      // Determine the function that will be modified by the timelock.\r\n      (bytes4 modifiedFunction, uint256 duration) = abi.decode(\r\n        arguments, (bytes4, uint256)\r\n      );\r\n\r\n      // Ensure that the new timelock duration will not cause an overflow error.\r\n      require(\r\n        duration \u003C _A_TRILLION_YEARS,\r\n        \u0022Supplied default timelock duration to modify is too large.\u0022\r\n      );\r\n\r\n      // Determine the current timelockID, if any, for the modified function.\r\n      bytes32 currentTimelockID = (\r\n        _protectedTimelockIDs[functionSelector][modifiedFunction]\r\n      );\r\n\r\n      // Determine if current timelockID differs from what is currently set.\r\n      if (currentTimelockID != timelockID) {\r\n        // Drop existing timelock if one exists and has a different timelockID.\r\n        if (currentTimelockID != bytes32(0)) {\r\n          delete _timelocks[functionSelector][currentTimelockID];\r\n        }\r\n\r\n        // Register the new timelockID as the current protected timelockID.\r\n        _protectedTimelockIDs[functionSelector][modifiedFunction] = timelockID;\r\n      }\r\n    }\r\n\r\n    // Get timelock using current time, inverval for timelock ID, \u0026 extra time.\r\n    uint256 timelock = uint256(\r\n      _timelockDefaults[functionSelector].interval\r\n    ).add(now).add(extraTime);\r\n\r\n    // Get expiration time using timelock duration plus default expiration time.\r\n    uint256 expiration = timelock.add(\r\n      uint256(_timelockDefaults[functionSelector].expiration)\r\n    );\r\n\r\n    // Get the current timelock, if one exists.\r\n    Timelock storage timelockStorage = _timelocks[functionSelector][timelockID];\r\n\r\n    // Determine the duration of the current timelock.\r\n    uint256 currentTimelock = uint256(timelockStorage.complete);\r\n\r\n    // Ensure that the timelock duration does not decrease. Note that a new,\r\n    // shorter timelock may still be set up on the same function in the event\r\n    // that it is provided with different arguments. Also note that this can be\r\n    // circumvented when modifying intervals or expirations by setting a new\r\n    // timelock (removing the old one), then resetting the original timelock but\r\n    // with a shorter duration.\r\n    require(\r\n      currentTimelock == 0 || timelock \u003E currentTimelock,\r\n      \u0022Existing timelocks may only be extended.\u0022\r\n    );\r\n\r\n    // Set timelock completion and expiration using timelock ID and extra time.\r\n    timelockStorage.complete = uint128(timelock);\r\n    timelockStorage.expires = uint128(expiration);\r\n\r\n    // Emit an event with all of the relevant information.\r\n    emit TimelockInitiated(functionSelector, timelock, arguments, expiration);\r\n  }\r\n\r\n  /**\r\n   * @notice Internal function for setting a new timelock interval for a given\r\n   * function selector. The default for this function may also be modified, but\r\n   * excessive values will cause the \u0060modifyTimelockInterval\u0060 function to become\r\n   * unusable.\r\n   * @param functionSelector the selector of the function to set the timelock\r\n   * interval for.\r\n   * @param newTimelockInterval the new minimum timelock interval to set for the\r\n   * given function.\r\n   */\r\n  function _modifyTimelockInterval(\r\n    bytes4 functionSelector, uint256 newTimelockInterval\r\n  ) internal {\r\n    // Ensure that the timelock has been set and is completed.\r\n    _enforceTimelockPrivate(\r\n      _MODIFY_TIMELOCK_INTERVAL_SELECTOR,\r\n      abi.encode(functionSelector, newTimelockInterval)\r\n    );\r\n\r\n    // Clear out the existing timelockID protection for the given function.\r\n    delete _protectedTimelockIDs[\r\n      _MODIFY_TIMELOCK_INTERVAL_SELECTOR\r\n    ][functionSelector];\r\n\r\n    // Set new timelock interval and emit a \u0060TimelockIntervalModified\u0060 event.\r\n    _setTimelockIntervalPrivate(functionSelector, newTimelockInterval);\r\n  }\r\n\r\n  /**\r\n   * @notice Internal function for setting a new timelock expiration for a given\r\n   * function selector. Once the minimum interval has elapsed, the timelock will\r\n   * expire once the specified expiration time has elapsed. Setting this value\r\n   * too low will result in timelocks that are very difficult to execute\r\n   * correctly. Be sure to override the public version of this function with\r\n   * appropriate access controls.\r\n   * @param functionSelector the selector of the function to set the timelock\r\n   * expiration for.\r\n   * @param newTimelockExpiration the new minimum timelock expiration to set for\r\n   * the given function.\r\n   */\r\n  function _modifyTimelockExpiration(\r\n    bytes4 functionSelector, uint256 newTimelockExpiration\r\n  ) internal {\r\n    // Ensure that the timelock has been set and is completed.\r\n    _enforceTimelockPrivate(\r\n      _MODIFY_TIMELOCK_EXPIRATION_SELECTOR,\r\n      abi.encode(functionSelector, newTimelockExpiration)\r\n    );\r\n\r\n    // Clear out the existing timelockID protection for the given function.\r\n    delete _protectedTimelockIDs[\r\n      _MODIFY_TIMELOCK_EXPIRATION_SELECTOR\r\n    ][functionSelector];\r\n\r\n    // Set new default expiration and emit a \u0060TimelockExpirationModified\u0060 event.\r\n    _setTimelockExpirationPrivate(functionSelector, newTimelockExpiration);\r\n  }\r\n\r\n  /**\r\n   * @notice Internal function to set an initial timelock interval for a given\r\n   * function selector. Only callable during contract creation.\r\n   * @param functionSelector the selector of the function to set the timelock\r\n   * interval for.\r\n   * @param newTimelockInterval the new minimum timelock interval to set for the\r\n   * given function.\r\n   */\r\n  function _setInitialTimelockInterval(\r\n    bytes4 functionSelector, uint256 newTimelockInterval\r\n  ) internal {\r\n    // Ensure that this function is only callable during contract construction.\r\n    assembly { if extcodesize(address) { revert(0, 0) } }\r\n\r\n    // Set the timelock interval and emit a \u0060TimelockIntervalModified\u0060 event.\r\n    _setTimelockIntervalPrivate(functionSelector, newTimelockInterval);\r\n  }\r\n\r\n  /**\r\n   * @notice Internal function to set an initial timelock expiration for a given\r\n   * function selector. Only callable during contract creation.\r\n   * @param functionSelector the selector of the function to set the timelock\r\n   * expiration for.\r\n   * @param newTimelockExpiration the new minimum timelock expiration to set for\r\n   * the given function.\r\n   */\r\n  function _setInitialTimelockExpiration(\r\n    bytes4 functionSelector, uint256 newTimelockExpiration\r\n  ) internal {\r\n    // Ensure that this function is only callable during contract construction.\r\n    assembly { if extcodesize(address) { revert(0, 0) } }\r\n\r\n    // Set the timelock interval and emit a \u0060TimelockExpirationModified\u0060 event.\r\n    _setTimelockExpirationPrivate(functionSelector, newTimelockExpiration);\r\n  }\r\n\r\n  /**\r\n   * @notice Internal function to ensure that a timelock is complete or expired\r\n   * and to clear the existing timelock if it is complete so it cannot later be\r\n   * reused. The function to enforce the timelock on is inferred from \u0060msg.sig\u0060.\r\n   * @param arguments The abi-encoded arguments of the function to be called.\r\n   */\r\n  function _enforceTimelock(bytes memory arguments) internal {\r\n    // Enforce the relevant timelock.\r\n    _enforceTimelockPrivate(msg.sig, arguments);\r\n  }\r\n\r\n  /**\r\n   * @notice Private function to ensure that a timelock is complete or expired\r\n   * and to clear the existing timelock if it is complete so it cannot later be\r\n   * reused.\r\n   * @param functionSelector function to be called.\r\n   * @param arguments The abi-encoded arguments of the function to be called.\r\n   */\r\n  function _enforceTimelockPrivate(\r\n    bytes4 functionSelector, bytes memory arguments\r\n  ) private {\r\n    // Get timelock ID using the supplied function arguments.\r\n    bytes32 timelockID = keccak256(abi.encodePacked(arguments));\r\n\r\n    // Get the current timelock, if one exists.\r\n    Timelock memory timelock = _timelocks[functionSelector][timelockID];\r\n\r\n    uint256 currentTimelock = uint256(timelock.complete);\r\n    uint256 expiration = uint256(timelock.expires);\r\n\r\n    // Ensure that the timelock is set and has completed.\r\n    require(\r\n      currentTimelock != 0 \u0026\u0026 currentTimelock \u003C= now, \u0022Timelock is incomplete.\u0022\r\n    );\r\n\r\n    // Ensure that the timelock has not expired.\r\n    require(expiration \u003E now, \u0022Timelock has expired.\u0022);\r\n\r\n    // Clear out the existing timelock so that it cannot be reused.\r\n    delete _timelocks[functionSelector][timelockID];\r\n  }\r\n\r\n  /**\r\n   * @notice Private function for setting a new timelock interval for a given\r\n   * function selector.\r\n   * @param functionSelector the selector of the function to set the timelock\r\n   * interval for.\r\n   * @param newTimelockInterval the new minimum timelock interval to set for the\r\n   * given function.\r\n   */\r\n  function _setTimelockIntervalPrivate(\r\n    bytes4 functionSelector, uint256 newTimelockInterval\r\n  ) private {\r\n    // Ensure that the new timelock interval will not cause an overflow error.\r\n    require(\r\n      newTimelockInterval \u003C _A_TRILLION_YEARS,\r\n      \u0022Supplied minimum timelock interval is too large.\u0022\r\n    );\r\n\r\n    // Get the existing timelock interval, if any.\r\n    uint256 oldTimelockInterval = uint256(\r\n      _timelockDefaults[functionSelector].interval\r\n    );\r\n\r\n    // Update the timelock interval on the provided function.\r\n    _timelockDefaults[functionSelector].interval = uint128(newTimelockInterval);\r\n\r\n    // Emit a \u0060TimelockIntervalModified\u0060 event with the appropriate arguments.\r\n    emit TimelockIntervalModified(\r\n      functionSelector, oldTimelockInterval, newTimelockInterval\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @notice Private function for setting a new timelock expiration for a given\r\n   * function selector.\r\n   * @param functionSelector the selector of the function to set the timelock\r\n   * interval for.\r\n   * @param newTimelockExpiration the new default timelock expiration to set for\r\n   * the given function.\r\n   */\r\n  function _setTimelockExpirationPrivate(\r\n    bytes4 functionSelector, uint256 newTimelockExpiration\r\n  ) private {\r\n    // Ensure that the new timelock expiration will not cause an overflow error.\r\n    require(\r\n      newTimelockExpiration \u003C _A_TRILLION_YEARS,\r\n      \u0022Supplied default timelock expiration is too large.\u0022\r\n    );\r\n\r\n    // Ensure that the new timelock expiration is not too short.\r\n    require(\r\n      newTimelockExpiration \u003E 1 minutes,\r\n      \u0022New timelock expiration is too short.\u0022\r\n    );\r\n\r\n    // Get the existing timelock expiration, if any.\r\n    uint256 oldTimelockExpiration = uint256(\r\n      _timelockDefaults[functionSelector].expiration\r\n    );\r\n\r\n    // Update the timelock expiration on the provided function.\r\n    _timelockDefaults[functionSelector].expiration = uint128(\r\n      newTimelockExpiration\r\n    );\r\n\r\n    // Emit a \u0060TimelockExpirationModified\u0060 event with the appropriate arguments.\r\n    emit TimelockExpirationModified(\r\n      functionSelector, oldTimelockExpiration, newTimelockExpiration\r\n    );\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title DharmaAccountRecoveryManager (staging version)\r\n * @author 0age\r\n * @notice This contract will be owned by DharmaAccountRecoveryMultisig and will\r\n * manage resets to the user\u0027s signing key. It implements a set of timelocked\r\n * functions, where the \u0060setTimelock\u0060 function must first be called, with the\r\n * same arguments that the function will be supplied with. Then, a given time\r\n * interval must first fully transpire before the timelock functions can be\r\n * successfully called.\r\n *\r\n * The timelocked functions currently implemented include:\r\n *  recover(address wallet, address newUserSigningKey)\r\n *  disableAccountRecovery(address wallet)\r\n *  modifyTimelockInterval(bytes4 functionSelector, uint256 newTimelockInterval)\r\n *  modifyTimelockExpiration(\r\n *    bytes4 functionSelector, uint256 newTimelockExpiration\r\n *  )\r\n *\r\n * Note that special care should be taken to differentiate between lost keys and\r\n * compromised keys, and that the danger of a user being impersonated is\r\n * extremely high. Account recovery should progress to a system where the user\r\n * builds their preferred account recovery procedure into a \u0022key ring\u0022 smart\r\n * contract at their signing address, reserving this \u0022hard reset\u0022 for extremely\r\n * unusual circumstances and eventually sunsetting it entirely.\r\n */\r\ncontract DharmaAccountRecoveryManager is\r\n  DharmaAccountRecoveryManagerInterface,\r\n  TimelockerModifiersInterface,\r\n  TwoStepOwnable,\r\n  Timelocker {\r\n  using SafeMath for uint256;\r\n\r\n  // Maintain mapping of smart wallets that have opted out of account recovery.\r\n  mapping(address =\u003E bool) private _accountRecoveryDisabled;\r\n\r\n  /**\r\n   * @notice In the constructor, set the initial owner to the transaction\r\n   * submitter and initial minimum timelock interval and default timelock\r\n   * expiration values.\r\n   */\r\n  constructor() public {\r\n    // Set initial minimum timelock interval values.\r\n    _setInitialTimelockInterval(this.modifyTimelockInterval.selector, 1);\r\n    _setInitialTimelockInterval(this.modifyTimelockExpiration.selector, 1);\r\n    _setInitialTimelockInterval(this.recover.selector, 5 minutes);\r\n    _setInitialTimelockInterval(this.disableAccountRecovery.selector, 5 minutes);\r\n\r\n    // Set initial default timelock expiration values.\r\n    _setInitialTimelockExpiration(this.modifyTimelockInterval.selector, 7 days);\r\n    _setInitialTimelockExpiration(\r\n      this.modifyTimelockExpiration.selector, 7 days\r\n    );\r\n    _setInitialTimelockExpiration(this.recover.selector, 7 days);\r\n    _setInitialTimelockExpiration(this.disableAccountRecovery.selector, 7 days);\r\n  }\r\n\r\n  /**\r\n   * @notice Initiates a timelocked account recovery process for a smart wallet\r\n   * user signing key. Only the owner may call this function. Once the timelock\r\n   * period is complete (and before it has expired) the owner may call \u0060recover\u0060\r\n   * to complete the process and reset the user\u0027s signing key.\r\n   * @param smartWallet the smart wallet address.\r\n   * @param userSigningKey the new user signing key.\r\n   * @param extraTime Additional time in seconds to add to the timelock.\r\n   */\r\n  function initiateAccountRecovery(\r\n    address smartWallet, address userSigningKey, uint256 extraTime\r\n  ) external onlyOwner {\r\n    require(smartWallet != address(0), \u0022No smart wallet address provided.\u0022);\r\n    require(userSigningKey != address(0), \u0022No new user signing key provided.\u0022);\r\n\r\n    // Set the timelock and emit a \u0060TimelockInitiated\u0060 event.\r\n    _setTimelock(\r\n      this.recover.selector, abi.encode(smartWallet, userSigningKey), extraTime\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @notice Timelocked function to set a new user signing key on a smart\r\n   * wallet. Only the owner may call this function.\r\n   * @param smartWallet Address of the smart wallet to recover a key on.\r\n   * @param newUserSigningKey Address of the new signing key for the user.\r\n   */\r\n  function recover(\r\n    address smartWallet, address newUserSigningKey\r\n  ) external onlyOwner {\r\n    require(smartWallet != address(0), \u0022No smart wallet address provided.\u0022);\r\n    require(\r\n      newUserSigningKey != address(0),\r\n      \u0022No new user signing key provided.\u0022\r\n    );\r\n\r\n    // Ensure that the wallet in question has not opted out of account recovery.\r\n    require(\r\n      !_accountRecoveryDisabled[smartWallet],\r\n      \u0022This wallet has elected to opt out of account recovery functionality.\u0022\r\n    );\r\n\r\n    // Ensure that the timelock has been set and is completed.\r\n    _enforceTimelock(abi.encode(smartWallet, newUserSigningKey));\r\n\r\n    // Declare the proper interface for the smart wallet in question.\r\n    DharmaSmartWalletRecovery walletToRecover = DharmaSmartWalletRecovery(\r\n      smartWallet\r\n    );\r\n\r\n    // Attempt to get current signing key - a failure should not block recovery.\r\n    address oldUserSigningKey;\r\n    (bool ok, bytes memory data) = smartWallet.call.gas(gasleft() / 2)(\r\n      abi.encodeWithSelector(walletToRecover.getUserSigningKey.selector)\r\n    );\r\n    if (ok \u0026\u0026 data.length == 32) {\r\n      oldUserSigningKey = abi.decode(data, (address));\r\n    }\r\n\r\n    // Call the specified smart wallet and supply the new user signing key.\r\n    DharmaSmartWalletRecovery(smartWallet).recover(newUserSigningKey);\r\n\r\n    // Emit an event to signify that the wallet in question was recovered.\r\n    emit Recovery(smartWallet, oldUserSigningKey, newUserSigningKey);\r\n  }\r\n\r\n  /**\r\n   * @notice Initiates a timelocked account recovery disablement process for a\r\n   * smart wallet. Only the owner may call this function. Once the timelock\r\n   * period is complete (and before it has expired) the owner may call\r\n   * \u0060disableAccountRecovery\u0060 to complete the process and opt a smart wallet out\r\n   * of account recovery. Once account recovery has been disabled, it cannot be\r\n   * reenabled - the process is irreversible.\r\n   * @param smartWallet the smart wallet address.\r\n   * @param extraTime Additional time in seconds to add to the timelock.\r\n   */\r\n  function initiateAccountRecoveryDisablement(\r\n    address smartWallet, uint256 extraTime\r\n  ) external onlyOwner {\r\n    require(smartWallet != address(0), \u0022No smart wallet address provided.\u0022);\r\n\r\n    // Set the timelock and emit a \u0060TimelockInitiated\u0060 event.\r\n    _setTimelock(\r\n      this.disableAccountRecovery.selector, abi.encode(smartWallet), extraTime\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @notice Timelocked function to opt a given wallet out of account recovery.\r\n   * This action cannot be undone - any future account recovery would require an\r\n   * upgrade to the smart wallet implementation itself and is not likely to be\r\n   * supported. Only the owner may call this function.\r\n   * @param smartWallet Address of the smart wallet to disable account recovery\r\n   * for.\r\n   */\r\n  function disableAccountRecovery(address smartWallet) external onlyOwner {\r\n    require(smartWallet != address(0), \u0022No smart wallet address provided.\u0022);\r\n\r\n    // Ensure that the timelock has been set and is completed.\r\n    _enforceTimelock(abi.encode(smartWallet));\r\n\r\n    // Register the specified wallet as having opted out of account recovery.\r\n    _accountRecoveryDisabled[smartWallet] = true;\r\n\r\n    // Emit an event to signify the wallet in question is no longer recoverable.\r\n    emit RecoveryDisabled(smartWallet);\r\n  }\r\n\r\n  /**\r\n   * @notice External function check whether a given smart wallet has disabled\r\n   * account recovery by opting out.\r\n   * @param smartWallet Address of the smart wallet to check.\r\n   * @return A boolean indicating if account recovery has been disabled for the\r\n   * wallet in question.\r\n   */\r\n  function accountRecoveryDisabled(\r\n    address smartWallet\r\n  ) external view returns (bool hasDisabledAccountRecovery) {\r\n    // Determine if the wallet in question has opted out of account recovery.\r\n    hasDisabledAccountRecovery = _accountRecoveryDisabled[smartWallet];\r\n  }\r\n\r\n  /**\r\n   * @notice Sets the timelock for a new timelock interval for a given function\r\n   * selector. Only the owner may call this function.\r\n   * @param functionSelector the selector of the function to set the timelock\r\n   * interval for.\r\n   * @param newTimelockInterval The new timelock interval to set for the given\r\n   * function selector.\r\n   * @param extraTime Additional time in seconds to add to the timelock.\r\n   */\r\n  function initiateModifyTimelockInterval(\r\n    bytes4 functionSelector, uint256 newTimelockInterval, uint256 extraTime\r\n  ) external onlyOwner {\r\n    // Ensure that a function selector is specified (no 0x00000000 selector).\r\n    require(\r\n      functionSelector != bytes4(0),\r\n      \u0022Function selector cannot be empty.\u0022\r\n    );\r\n\r\n    // Ensure a timelock interval over eight weeks is not set on this function.\r\n    if (functionSelector == this.modifyTimelockInterval.selector) {\r\n      require(\r\n        newTimelockInterval \u003C= 8 weeks,\r\n        \u0022Timelock interval of modifyTimelockInterval cannot exceed eight weeks.\u0022\r\n      );\r\n    }\r\n\r\n    // Set the timelock and emit a \u0060TimelockInitiated\u0060 event.\r\n    _setTimelock(\r\n      this.modifyTimelockInterval.selector,\r\n      abi.encode(functionSelector, newTimelockInterval),\r\n      extraTime\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @notice Sets a new timelock interval for a given function selector. The\r\n   * default for this function may also be modified, but has a maximum allowable\r\n   * value of eight weeks. Only the owner may call this function.\r\n   * @param functionSelector the selector of the function to set the timelock\r\n   * interval for.\r\n   * @param newTimelockInterval The new timelock interval to set for the given\r\n   * function selector.\r\n   */\r\n  function modifyTimelockInterval(\r\n    bytes4 functionSelector, uint256 newTimelockInterval\r\n  ) external onlyOwner {\r\n    // Ensure that a function selector is specified (no 0x00000000 selector).\r\n    require(\r\n      functionSelector != bytes4(0),\r\n      \u0022Function selector cannot be empty.\u0022\r\n    );\r\n\r\n    // Continue via logic in the inherited \u0060_modifyTimelockInterval\u0060 function.\r\n    _modifyTimelockInterval(functionSelector, newTimelockInterval);\r\n  }\r\n\r\n  /**\r\n   * @notice Sets a new timelock expiration for a given function selector. The\r\n   * default Only the owner may call this function. New expiration durations may\r\n   * not exceed one month.\r\n   * @param functionSelector the selector of the function to set the timelock\r\n   * expiration for.\r\n   * @param newTimelockExpiration The new timelock expiration to set for the\r\n   * given function selector.\r\n   * @param extraTime Additional time in seconds to add to the timelock.\r\n   */\r\n  function initiateModifyTimelockExpiration(\r\n    bytes4 functionSelector, uint256 newTimelockExpiration, uint256 extraTime\r\n  ) external onlyOwner {\r\n    // Ensure that a function selector is specified (no 0x00000000 selector).\r\n    require(\r\n      functionSelector != bytes4(0),\r\n      \u0022Function selector cannot be empty.\u0022\r\n    );\r\n\r\n    // Ensure that the supplied default expiration does not exceed 1 month.\r\n    require(\r\n      newTimelockExpiration \u003C= 30 days,\r\n      \u0022New timelock expiration cannot exceed one month.\u0022\r\n    );\r\n\r\n    // Ensure a timelock expiration under one hour is not set on this function.\r\n    if (functionSelector == this.modifyTimelockExpiration.selector) {\r\n      require(\r\n        newTimelockExpiration \u003E= 60 minutes,\r\n        \u0022Expiration of modifyTimelockExpiration must be at least an hour long.\u0022\r\n      );\r\n    }\r\n\r\n    // Set the timelock and emit a \u0060TimelockInitiated\u0060 event.\r\n    _setTimelock(\r\n      this.modifyTimelockExpiration.selector,\r\n      abi.encode(functionSelector, newTimelockExpiration),\r\n      extraTime\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @notice Sets a new timelock expiration for a given function selector. The\r\n   * default for this function may also be modified, but has a minimum allowable\r\n   * value of one hour. Only the owner may call this function.\r\n   * @param functionSelector the selector of the function to set the timelock\r\n   * expiration for.\r\n   * @param newTimelockExpiration The new timelock expiration to set for the\r\n   * given function selector.\r\n   */\r\n  function modifyTimelockExpiration(\r\n    bytes4 functionSelector, uint256 newTimelockExpiration\r\n  ) external onlyOwner {\r\n    // Ensure that a function selector is specified (no 0x00000000 selector).\r\n    require(\r\n      functionSelector != bytes4(0),\r\n      \u0022Function selector cannot be empty.\u0022\r\n    );\r\n\r\n    // Continue via logic in the inherited \u0060_modifyTimelockExpiration\u0060 function.\r\n    _modifyTimelockExpiration(\r\n      functionSelector, newTimelockExpiration\r\n    );\r\n  }\r\n}","ABI":"[{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022smartWallet\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022disableAccountRecovery\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022cancelOwnershipTransfer\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022smartWallet\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022extraTime\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022initiateAccountRecoveryDisablement\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022bytes4\u0022,\u0022name\u0022:\u0022functionSelector\u0022,\u0022type\u0022:\u0022bytes4\u0022}],\u0022name\u0022:\u0022getDefaultTimelockInterval\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022defaultTimelockInterval\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022bytes4\u0022,\u0022name\u0022:\u0022functionSelector\u0022,\u0022type\u0022:\u0022bytes4\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022newTimelockInterval\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022extraTime\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022initiateModifyTimelockInterval\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022smartWallet\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022accountRecoveryDisabled\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022hasDisabledAccountRecovery\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022smartWallet\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022newUserSigningKey\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022recover\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022smartWallet\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022userSigningKey\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022extraTime\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022initiateAccountRecovery\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022acceptOwnership\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022owner\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022isOwner\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022bytes4\u0022,\u0022name\u0022:\u0022functionSelector\u0022,\u0022type\u0022:\u0022bytes4\u0022}],\u0022name\u0022:\u0022getDefaultTimelockExpiration\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022defaultTimelockExpiration\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022bytes4\u0022,\u0022name\u0022:\u0022functionSelector\u0022,\u0022type\u0022:\u0022bytes4\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022newTimelockExpiration\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022modifyTimelockExpiration\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022bytes4\u0022,\u0022name\u0022:\u0022functionSelector\u0022,\u0022type\u0022:\u0022bytes4\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022newTimelockInterval\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022modifyTimelockInterval\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022bytes4\u0022,\u0022name\u0022:\u0022functionSelector\u0022,\u0022type\u0022:\u0022bytes4\u0022},{\u0022internalType\u0022:\u0022bytes\u0022,\u0022name\u0022:\u0022arguments\u0022,\u0022type\u0022:\u0022bytes\u0022}],\u0022name\u0022:\u0022getTimelock\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022exists\u0022,\u0022type\u0022:\u0022bool\u0022},{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022completed\u0022,\u0022type\u0022:\u0022bool\u0022},{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022expired\u0022,\u0022type\u0022:\u0022bool\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022completionTime\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022expirationTime\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022transferOwnership\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022bytes4\u0022,\u0022name\u0022:\u0022functionSelector\u0022,\u0022type\u0022:\u0022bytes4\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022newTimelockExpiration\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022extraTime\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022initiateModifyTimelockExpiration\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022constructor\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022bytes4\u0022,\u0022name\u0022:\u0022functionSelector\u0022,\u0022type\u0022:\u0022bytes4\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022timeComplete\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022bytes\u0022,\u0022name\u0022:\u0022arguments\u0022,\u0022type\u0022:\u0022bytes\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022timeExpired\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022TimelockInitiated\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022bytes4\u0022,\u0022name\u0022:\u0022functionSelector\u0022,\u0022type\u0022:\u0022bytes4\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022oldInterval\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022newInterval\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022TimelockIntervalModified\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022bytes4\u0022,\u0022name\u0022:\u0022functionSelector\u0022,\u0022type\u0022:\u0022bytes4\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022oldExpiration\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022newExpiration\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022TimelockExpirationModified\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022previousOwner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022OwnershipTransferred\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022wallet\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022oldUserSigningKey\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022newUserSigningKey\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022Recovery\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022wallet\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022RecoveryDisabled\u0022,\u0022type\u0022:\u0022event\u0022}]","ContractName":"DharmaAccountRecoveryManager","CompilerVersion":"v0.5.11\u002Bcommit.c082d0b4","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://dcaff06977ea414f7f661d9584378074ce4a5f5d0bfd1750c902eb8d78493743"}]