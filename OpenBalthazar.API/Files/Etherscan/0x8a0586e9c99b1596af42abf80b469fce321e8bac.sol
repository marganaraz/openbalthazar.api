[{"SourceCode":"pragma solidity ^0.4.26;\r\n\r\n// ERC20 contract interface\r\ncontract Token {\r\n  function balanceOf(address) public view returns (uint);\r\n  function decimals() public view returns (uint);\r\n}\r\n\r\ncontract ERC20Utilities {\r\n  /* Fallback function, don\u0027t accept any ETH */\r\n  function() public payable {\r\n    revert(\u0022ERC20Utilities does not accept payments\u0022);\r\n}\r\n\r\n  function tokenDecimals(address token) public view returns (uint) {\r\n    // check if token is actually a contract\r\n    uint256 tokenCode;\r\n    assembly { tokenCode := extcodesize(token) } // contract code size\r\n  \r\n    // is it a contract and does it implement balanceOf ?\r\n    if (tokenCode \u003E 0 \u0026\u0026 token.call(bytes4(0x70a08231), \u00220x0000000000000000000000000000000000000000\u0022)) {  \r\n      return Token(token).decimals();\r\n    } else {\r\n      return 0;\r\n    }\r\n}\r\n\r\n  function batchTokenDecimals(address[] tokens) external view returns (uint[]) {\r\n    uint[] memory tokenDecimalsRes = new uint[](tokens.length);\r\n    \r\n    for (uint j = 0; j \u003C tokens.length; j\u002B\u002B) {\r\n      uint addrIdx = j;\r\n      if (tokens[j] != address(0x0)) { \r\n        tokenDecimalsRes[addrIdx] = tokenDecimals(tokens[j]);\r\n      } else {\r\n        tokenDecimalsRes[addrIdx] = 18; // ETH decimals are hardcoded\r\n      }\r\n    }  \r\n\r\n    return tokenDecimalsRes;\r\n  }\r\n\r\n  function tokenBalance(address user, address token) public view returns (uint) {\r\n    // check if token is actually a contract\r\n    uint256 tokenCode;\r\n    assembly { tokenCode := extcodesize(token) } // contract code size\r\n  \r\n    // is it a contract and does it implement balanceOf \r\n    if (tokenCode \u003E 0 \u0026\u0026 token.call(bytes4(0x70a08231), user)) {  \r\n      return Token(token).balanceOf(user);\r\n    } else {\r\n      return 0;\r\n    }\r\n  }\r\n  \r\n  function batchTokenBalances(address[] users, address[] tokens) external view returns (uint[]) {\r\n    uint[] memory addrBalances = new uint[](tokens.length * users.length);\r\n    \r\n    for(uint i = 0; i \u003C users.length; i\u002B\u002B) {\r\n      for (uint j = 0; j \u003C tokens.length; j\u002B\u002B) {\r\n        uint addrIdx = j \u002B tokens.length * i;\r\n        if (tokens[j] != address(0x0)) { \r\n          addrBalances[addrIdx] = tokenBalance(users[i], tokens[j]);\r\n        } else {\r\n          addrBalances[addrIdx] = users[i].balance; // ETH balance    \r\n        }\r\n      }  \r\n    }\r\n  \r\n    return addrBalances;\r\n  }    \r\n\r\n}","ABI":"[{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022user\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022token\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022tokenBalance\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022tokens\u0022,\u0022type\u0022:\u0022address[]\u0022}],\u0022name\u0022:\u0022batchTokenDecimals\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256[]\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022users\u0022,\u0022type\u0022:\u0022address[]\u0022},{\u0022name\u0022:\u0022tokens\u0022,\u0022type\u0022:\u0022address[]\u0022}],\u0022name\u0022:\u0022batchTokenBalances\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256[]\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022token\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022tokenDecimals\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022payable\u0022:true,\u0022stateMutability\u0022:\u0022payable\u0022,\u0022type\u0022:\u0022fallback\u0022}]","ContractName":"ERC20Utilities","CompilerVersion":"v0.4.26\u002Bcommit.4563c3fc","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://fc82f8a65f11363f7c6679ec3a00a23fc65983177de15e7b0919f343f1dabc51"}]