[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\n// --------------------------------------------------------------------------\r\n// Forward declarations of the external functions called by this contract\r\n// --------------------------------------------------------------------------\r\n\r\ninterface ERC20 {\r\n  function transfer( address to, uint256 value ) external returns (bool);\r\n  function transferFrom( address from, address to, uint256 value )\r\n    external returns (bool);\r\n}\r\n\r\ninterface ERC721 {\r\n  function transferFrom( address _from, address _to, uint256 _tokenId )\r\n    external payable;\r\n}\r\n\r\ninterface ENS {\r\n  function setOwner( bytes32 _node, address _owner ) external;\r\n}\r\n\r\n// --------------------------------------------------------------------------\r\n// admin can assign a new admin, set the fee, release new UIs and change the\r\n// ENS mapping\r\n// * admin cannot interfere with any Order.\r\n// * admin cannot sweep funds paid to an Order\r\n// * ADMIN CANNOT RECOVER ERC20 TOKENS SENT DIRECTLY TO THIS CONTRACT ADDRESS\r\n// * ALWAYS use token.approve() then call buy() below\r\n// --------------------------------------------------------------------------\r\n\r\ncontract Admin {\r\n  modifier isAdmin {\r\n    require( msg.sender == admin, \u0022!admin\u0022 );\r\n    _;\r\n  }\r\n  address payable public admin;\r\n  constructor() public {\r\n    admin = msg.sender;\r\n  }\r\n  function setAdmin( address payable _newAdmin ) public isAdmin {\r\n    admin = _newAdmin;\r\n  }\r\n}\r\n\r\n// ==========================================================================\r\n// escrobot.eth is an automated escrow service. A buyer will pay with ETH or\r\n// any ERC20-compatible token, and a seller will ship and provide a tracking\r\n// reference.\r\n//\r\n// Normal Scenario:\r\n//\r\n// 1. Seller submits an Order\r\n// 2. Buyer pays escrobot the Seller\u0027s demand plus a bond, an amount set by\r\n//    the Seller to ensure the Buyer will confirm delivery and release payment\r\n// 3. Seller ships and updates the Order with the tracking reference\r\n// 4. Buyer tracks and confirms receipt of the Order\r\n// 5. escrobot pays Seller and returns Buyer\u0027s bond\r\n//\r\n// Exceptions/Extras:\r\n//\r\n// a. Seller may cancel an Order not yet paid (Buyer has disappeared)\r\n// b. Buyer may obtain a refund if Seller fails to ship within a\r\n//    Seller-specified timeout in blocks (Seller has disappeared)\r\n// c. Either party may add a plaintext note at any time to resolve issues\r\n// d. If shipment fails, payment will not be released and bond will not be\r\n//    returned unless/until the Buyer confirms. Must be resolved in meatspace.\r\n//\r\n// WARNING: never send ETH to this contract directly. Include value for\r\n//          payment within the transaction when calling the buy() function.\r\n//\r\n// WARNING: if arranging sale by ERC20 token, take special care of the token\r\n//          SCA passed to submit() - escrobot will confirm that a smart\r\n//          contract exists there, but takes no additional steps to confirm\r\n//          whatever is at that address is an ERC20 token contract.\r\n//\r\n// WARNING: never transfer() tokens to this smart contract. Use the token\r\n//          contract\u0027s approve() function, and then call the buy() function\r\n//          on this contract, which will transferFrom() the token contract.\r\n//\r\n// Admin may publish() a user interface by setting two public variables:\r\n//\r\n//   externalLink : an ipfs hash or url from which to download the bundle\r\n//   hexSignature : admin\u0027s digital signature of the bundle\r\n//\r\n// ==========================================================================\r\n\r\ncontract escrobot is Admin {\r\n\r\n  event UIReleased( string version, string link, string sig );\r\n\r\n  event Submitted( bytes32 indexed orderId, address indexed seller );\r\n\r\n  event Canceled( bytes32 indexed orderId, address indexed seller );\r\n\r\n  event Paid( bytes32 indexed orderId, address indexed buyer );\r\n\r\n  event TimedOut( bytes32 indexed orderId, address indexed buyer );\r\n\r\n  event Shipped( bytes32 indexed orderId,\r\n                 string shipRef,\r\n                 address indexed seller );\r\n\r\n  event Completed( bytes32 indexed orderId, address indexed buyer );\r\n\r\n  event Noted( bytes32 indexed orderId, string note, address indexed noter );\r\n\r\n  enum State { SUBMITTED, CANCELED, PAID, TIMEDOUT, SHIPPED, COMPLETED }\r\n\r\n  struct Order {\r\n    address payable seller;\r\n    address payable buyer;\r\n    string description;\r\n    uint256 price;        // in units of ...\r\n    address token;        // ERC20 token sca, or address(0x0) for ETH/wei\r\n    uint256 bond;         // same units\r\n    uint256 timeoutBlocks;\r\n    uint256 takenBlock;\r\n    string shipRef;\r\n    State status;\r\n  }\r\n\r\n  string public externalLink;\r\n  string public hexSignature;\r\n\r\n  mapping( bytes32 =\u003E Order ) public orders;\r\n  uint256 public fee;\r\n  uint256 public counter;\r\n  bytes4 public magic; // must be returned by onERC721Received() function\r\n\r\n  // ------------------------------------------------------------------------\r\n  // Supporting/internal functions\r\n  // ------------------------------------------------------------------------\r\n\r\n  modifier isSeller( bytes32 _orderId ) {\r\n    require( msg.sender == orders[_orderId].seller, \u0022only seller\u0022 );\r\n    _;\r\n  }\r\n  modifier isBuyer( bytes32 _orderId ) {\r\n    require( msg.sender == orders[_orderId].buyer, \u0022only buyer\u0022 );\r\n    _;\r\n  }\r\n\r\n  function isContract( address _addr ) private view returns (bool) {\r\n    uint32 size;\r\n    assembly {\r\n      size := extcodesize(_addr)\r\n    }\r\n    return (size \u003E 0);\r\n  }\r\n\r\n  function status( bytes32 _orderId ) public view returns (State) {\r\n    return orders[_orderId].status;\r\n  }\r\n\r\n  // -------------------------------------------------------------------------\r\n  // Core business functions\r\n  // -------------------------------------------------------------------------\r\n\r\n  // 1. Seller creates the Order and pays the escrobot fee\r\n\r\n  function submit( string memory _desc,\r\n                   uint256 _price,\r\n                   address _token,\r\n                   uint256 _bond,\r\n                   uint256 _timeoutBlocks ) payable public {\r\n\r\n    require( bytes(_desc).length \u003E 1, \u0022needs description\u0022 );\r\n    require( _price \u003E 0, \u0022needs price\u0022 );\r\n    require( _token == address(0x0) || isContract(_token), \u0022bad token\u0022 );\r\n    require( _price \u002B _bond \u003E= _price, \u0022safemath\u0022 );\r\n    require( _timeoutBlocks \u003E 0, \u0022needs timeout\u0022 );\r\n    require( msg.value \u003E= fee, \u0022needs fee\u0022 );\r\n\r\n    bytes32 orderId = keccak256( abi.encodePacked(\r\n      counter\u002B\u002B, _desc, _price, _token, _bond, _timeoutBlocks, now) );\r\n\r\n    orders[orderId].seller = msg.sender;\r\n    orders[orderId].description = _desc;\r\n    orders[orderId].price = _price;\r\n    orders[orderId].token = _token;\r\n    orders[orderId].bond = _bond;\r\n    orders[orderId].timeoutBlocks = _timeoutBlocks;\r\n    orders[orderId].status = State.SUBMITTED;\r\n\r\n    emit Submitted( orderId, msg.sender );\r\n    admin.transfer( msg.value );\r\n  }\r\n\r\n  // 1a. Seller may cancel the order before Buyer has paid\r\n\r\n  function cancel( bytes32 _orderId ) public isSeller(_orderId) {\r\n\r\n    require( orders[_orderId].status == State.SUBMITTED, \u0022not SUBMITTED\u0022 );\r\n    orders[_orderId].status = State.CANCELED;\r\n    emit Canceled( _orderId, msg.sender );\r\n  }\r\n\r\n  // 2. Buyer pays sellers demand plus the bond/deposit.\r\n  //    If paying by ERC20, the buyer must already have called approve()\r\n\r\n  function buy( bytes32 _orderId ) payable public {\r\n\r\n    require( orders[_orderId].status == State.SUBMITTED, \u0022not SUBMITTED\u0022 );\r\n\r\n    uint256 needed = orders[_orderId].price \u002B orders[_orderId].bond;\r\n\r\n    if (orders[_orderId].token == address(0x0)) {\r\n      require( msg.value \u003E= needed, \u0022insufficient ETH\u0022 );\r\n      if (msg.value \u003E needed)\r\n        admin.transfer( msg.value - needed );\r\n    }\r\n    else {\r\n      require( ERC20(orders[_orderId].token).transferFrom(msg.sender,\r\n        address(this), needed), \u0022transferFrom()\u0022 );\r\n    }\r\n\r\n    orders[_orderId].buyer = msg.sender;\r\n    orders[_orderId].takenBlock = block.number;\r\n    orders[_orderId].status = State.PAID;\r\n    emit Paid( _orderId, msg.sender );\r\n  }\r\n\r\n  // 2b. If the seller fails to ship within the promised number of blocks, the\r\n  // buyer may reclaim his payment and bond\r\n\r\n  function timeout( bytes32 _orderId ) public isBuyer(_orderId) {\r\n\r\n    require( orders[_orderId].status == State.PAID, \u0022not PAID\u0022 );\r\n    require( block.number \u003E orders[_orderId].takenBlock \u002B\r\n                            orders[_orderId].timeoutBlocks, \u0022too early\u0022 );\r\n    require( bytes(orders[_orderId].shipRef).length == 0, \u0022shipped already\u0022 );\r\n\r\n    uint256 total = orders[_orderId].price \u002B orders[_orderId].bond;\r\n\r\n    if ( orders[_orderId].token == address(0x0) ) {\r\n      orders[_orderId].buyer.transfer( total );\r\n    }\r\n    else {\r\n      ERC20(orders[_orderId].token).transfer( orders[_orderId].buyer, total );\r\n    }\r\n\r\n    orders[_orderId].buyer = address(0x0);\r\n    orders[_orderId].takenBlock = 0;\r\n    orders[_orderId].status = State.TIMEDOUT;\r\n    emit TimedOut( _orderId, msg.sender );\r\n  }\r\n\r\n  // 3. Seller provides the shipping/tracking reference information.\r\n\r\n  function ship( bytes32 _orderId, string memory _shipRef )\r\n  public isSeller(_orderId) {\r\n\r\n    require(   orders[_orderId].status == State.PAID\r\n            || orders[_orderId].status == State.SHIPPED, \u0022ship state invalid\u0022 );\r\n\r\n    require( bytes(_shipRef).length \u003E 1, \u0022Ref invalid\u0022 );\r\n\r\n    orders[_orderId].shipRef = _shipRef;\r\n    orders[_orderId].status = State.SHIPPED;\r\n    emit Shipped( _orderId, _shipRef, msg.sender );\r\n  }\r\n\r\n  // 4. Buyer confirms order has arrived and completes deal.\r\n\r\n  function confirm( bytes32 _orderId ) public isBuyer(_orderId) {\r\n\r\n    require( orders[_orderId].status == State.SHIPPED, \u0022not SHIPPED\u0022 );\r\n\r\n    // 5. escrobot pays Seller and refunds Buyer\r\n\r\n    if ( orders[_orderId].token == address(0x0) ) {\r\n      orders[_orderId].seller.transfer( orders[_orderId].price );\r\n      orders[_orderId].buyer.transfer( orders[_orderId].bond );\r\n    }\r\n    else {\r\n      ERC20( orders[_orderId].token )\r\n      .transfer( orders[_orderId].buyer, orders[_orderId].bond );\r\n\r\n      ERC20( orders[_orderId].token )\r\n      .transfer( orders[_orderId].seller, orders[_orderId].price );\r\n    }\r\n\r\n    orders[_orderId].status = State.COMPLETED;\r\n    emit Completed( _orderId, msg.sender );\r\n  }\r\n\r\n  // Buyer and Seller can attach unencrypted notes for dispute resolution etc\r\n\r\n  function note( bytes32 _orderId, string memory _noteplaintxt ) public {\r\n\r\n    require(    msg.sender == orders[_orderId].buyer\r\n             || msg.sender == orders[_orderId].seller, \u0022parties only\u0022 );\r\n\r\n    emit Noted( _orderId, _noteplaintxt, msg.sender );\r\n  }\r\n\r\n  // --------------------------------------------------------------------------\r\n  // Admin functions\r\n  // --------------------------------------------------------------------------\r\n\r\n  constructor () public {\r\n    fee = 2000 szabo;\r\n\r\n    magic = bytes4( keccak256(\r\n      abi.encodePacked(\u0022onERC721Received(address,address,uint256,bytes)\u0022)) );\r\n  }\r\n\r\n  function setFee( uint256 _newfee ) public isAdmin {\r\n    fee = _newfee;\r\n  }\r\n\r\n  function publish( string memory _version, string memory _link,\r\n    string memory _sig ) public isAdmin {\r\n\r\n    externalLink = _link;\r\n    hexSignature = _sig;\r\n    emit UIReleased( _version, _link, _sig );\r\n  }\r\n\r\n  function changeENSOwner( address _ens, bytes32 _node, address payable _to )\r\n  external isAdmin {\r\n    ENS(_ens).setOwner( _node, _to );\r\n  }\r\n\r\n  // ----------------------------------------------------------------------\r\n  // functions to catch errant payments and transfers\r\n  // ----------------------------------------------------------------------\r\n\r\n  function() external payable {\r\n    admin.transfer( msg.value );\r\n  }\r\n\r\n  function tokenFallback( address _from, uint _value, bytes calldata _data )\r\n  external {\r\n\r\n    if (_from == address(0x0) || _data.length \u003E 0) {\r\n      // suppress warnings unused param\r\n    }\r\n\r\n    ERC20(msg.sender).transfer( admin, _value );\r\n  }\r\n\r\n  function onERC721Received(address _operator, address _from, uint256 _tokenId,\r\n    bytes calldata _data) external returns(bytes4) {\r\n\r\n    if (   _operator == address(0x0)\r\n        || _from == address(0x0)\r\n        || _data.length \u003E 0 ) {\r\n      // suppress warnings unused param\r\n    }\r\n\r\n    ERC721(msg.sender).transferFrom( address(this), admin, _tokenId );\r\n    return magic;\r\n  }\r\n\r\n}","ABI":"[{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022magic\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bytes4\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bytes4\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_operator\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_from\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_tokenId\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022bytes\u0022,\u0022name\u0022:\u0022_data\u0022,\u0022type\u0022:\u0022bytes\u0022}],\u0022name\u0022:\u0022onERC721Received\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bytes4\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bytes4\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022_orderId\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022internalType\u0022:\u0022string\u0022,\u0022name\u0022:\u0022_noteplaintxt\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022name\u0022:\u0022note\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022_orderId\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022status\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022enum escrobot.State\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint8\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022externalLink\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022string\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022counter\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_newfee\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022setFee\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022string\u0022,\u0022name\u0022:\u0022_version\u0022,\u0022type\u0022:\u0022string\u0022},{\u0022internalType\u0022:\u0022string\u0022,\u0022name\u0022:\u0022_link\u0022,\u0022type\u0022:\u0022string\u0022},{\u0022internalType\u0022:\u0022string\u0022,\u0022name\u0022:\u0022_sig\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022name\u0022:\u0022publish\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address payable\u0022,\u0022name\u0022:\u0022_newAdmin\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022setAdmin\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022hexSignature\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022string\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022_orderId\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022timeout\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022_orderId\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022confirm\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_ens\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022_node\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022internalType\u0022:\u0022address payable\u0022,\u0022name\u0022:\u0022_to\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022changeENSOwner\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022_orderId\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022internalType\u0022:\u0022string\u0022,\u0022name\u0022:\u0022_shipRef\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022name\u0022:\u0022ship\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022orders\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022address payable\u0022,\u0022name\u0022:\u0022seller\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022address payable\u0022,\u0022name\u0022:\u0022buyer\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022string\u0022,\u0022name\u0022:\u0022description\u0022,\u0022type\u0022:\u0022string\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022price\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022token\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022bond\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022timeoutBlocks\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022takenBlock\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022string\u0022,\u0022name\u0022:\u0022shipRef\u0022,\u0022type\u0022:\u0022string\u0022},{\u0022internalType\u0022:\u0022enum escrobot.State\u0022,\u0022name\u0022:\u0022status\u0022,\u0022type\u0022:\u0022uint8\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022_orderId\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022buy\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:true,\u0022stateMutability\u0022:\u0022payable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_from\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_value\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022bytes\u0022,\u0022name\u0022:\u0022_data\u0022,\u0022type\u0022:\u0022bytes\u0022}],\u0022name\u0022:\u0022tokenFallback\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022_orderId\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022cancel\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022fee\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022string\u0022,\u0022name\u0022:\u0022_desc\u0022,\u0022type\u0022:\u0022string\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_price\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_token\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_bond\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_timeoutBlocks\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022submit\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:true,\u0022stateMutability\u0022:\u0022payable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022admin\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022address payable\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022constructor\u0022},{\u0022payable\u0022:true,\u0022stateMutability\u0022:\u0022payable\u0022,\u0022type\u0022:\u0022fallback\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022string\u0022,\u0022name\u0022:\u0022version\u0022,\u0022type\u0022:\u0022string\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022string\u0022,\u0022name\u0022:\u0022link\u0022,\u0022type\u0022:\u0022string\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022string\u0022,\u0022name\u0022:\u0022sig\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022name\u0022:\u0022UIReleased\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022orderId\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022seller\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022Submitted\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022orderId\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022seller\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022Canceled\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022orderId\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022buyer\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022Paid\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022orderId\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022buyer\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022TimedOut\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022orderId\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022string\u0022,\u0022name\u0022:\u0022shipRef\u0022,\u0022type\u0022:\u0022string\u0022},{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022seller\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022Shipped\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022orderId\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022buyer\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022Completed\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022orderId\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022string\u0022,\u0022name\u0022:\u0022note\u0022,\u0022type\u0022:\u0022string\u0022},{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022noter\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022Noted\u0022,\u0022type\u0022:\u0022event\u0022}]","ContractName":"escrobot","CompilerVersion":"v0.5.11\u002Bcommit.c082d0b4","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://f3e93aabf9d3621f310c8ed0c0897dd399c755be8b560f346ff85ba10b94d648"}]