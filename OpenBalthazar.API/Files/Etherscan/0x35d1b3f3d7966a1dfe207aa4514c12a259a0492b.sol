[{"SourceCode":"// hevm: flattened sources of /nix/store/8xb41r4qd0cjb63wcrxf1qmfg88p0961-dss-6fd7de0/src/vat.sol\r\npragma solidity =0.5.12;\r\n\r\n////// /nix/store/8xb41r4qd0cjb63wcrxf1qmfg88p0961-dss-6fd7de0/src/vat.sol\r\n/// vat.sol -- Dai CDP database\r\n\r\n// Copyright (C) 2018 Rain \u003Crainbreak@riseup.net\u003E\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see \u003Chttps://www.gnu.org/licenses/\u003E.\r\n\r\n/* pragma solidity 0.5.12; */\r\n\r\ncontract Vat {\r\n    // --- Auth ---\r\n    mapping (address =\u003E uint) public wards;\r\n    function rely(address usr) external note auth { require(live == 1, \u0022Vat/not-live\u0022); wards[usr] = 1; }\r\n    function deny(address usr) external note auth { require(live == 1, \u0022Vat/not-live\u0022); wards[usr] = 0; }\r\n    modifier auth {\r\n        require(wards[msg.sender] == 1, \u0022Vat/not-authorized\u0022);\r\n        _;\r\n    }\r\n\r\n    mapping(address =\u003E mapping (address =\u003E uint)) public can;\r\n    function hope(address usr) external note { can[msg.sender][usr] = 1; }\r\n    function nope(address usr) external note { can[msg.sender][usr] = 0; }\r\n    function wish(address bit, address usr) internal view returns (bool) {\r\n        return either(bit == usr, can[bit][usr] == 1);\r\n    }\r\n\r\n    // --- Data ---\r\n    struct Ilk {\r\n        uint256 Art;   // Total Normalised Debt     [wad]\r\n        uint256 rate;  // Accumulated Rates         [ray]\r\n        uint256 spot;  // Price with Safety Margin  [ray]\r\n        uint256 line;  // Debt Ceiling              [rad]\r\n        uint256 dust;  // Urn Debt Floor            [rad]\r\n    }\r\n    struct Urn {\r\n        uint256 ink;   // Locked Collateral  [wad]\r\n        uint256 art;   // Normalised Debt    [wad]\r\n    }\r\n\r\n    mapping (bytes32 =\u003E Ilk)                       public ilks;\r\n    mapping (bytes32 =\u003E mapping (address =\u003E Urn )) public urns;\r\n    mapping (bytes32 =\u003E mapping (address =\u003E uint)) public gem;  // [wad]\r\n    mapping (address =\u003E uint256)                   public dai;  // [rad]\r\n    mapping (address =\u003E uint256)                   public sin;  // [rad]\r\n\r\n    uint256 public debt;  // Total Dai Issued    [rad]\r\n    uint256 public vice;  // Total Unbacked Dai  [rad]\r\n    uint256 public Line;  // Total Debt Ceiling  [rad]\r\n    uint256 public live;  // Access Flag\r\n\r\n    // --- Logs ---\r\n    event LogNote(\r\n        bytes4   indexed  sig,\r\n        bytes32  indexed  arg1,\r\n        bytes32  indexed  arg2,\r\n        bytes32  indexed  arg3,\r\n        bytes             data\r\n    ) anonymous;\r\n\r\n    modifier note {\r\n        _;\r\n        assembly {\r\n            // log an \u0027anonymous\u0027 event with a constant 6 words of calldata\r\n            // and four indexed topics: the selector and the first three args\r\n            let mark := msize                         // end of memory ensures zero\r\n            mstore(0x40, add(mark, 288))              // update free memory pointer\r\n            mstore(mark, 0x20)                        // bytes type data offset\r\n            mstore(add(mark, 0x20), 224)              // bytes size (padded)\r\n            calldatacopy(add(mark, 0x40), 0, 224)     // bytes payload\r\n            log4(mark, 288,                           // calldata\r\n                 shl(224, shr(224, calldataload(0))), // msg.sig\r\n                 calldataload(4),                     // arg1\r\n                 calldataload(36),                    // arg2\r\n                 calldataload(68)                     // arg3\r\n                )\r\n        }\r\n    }\r\n\r\n    // --- Init ---\r\n    constructor() public {\r\n        wards[msg.sender] = 1;\r\n        live = 1;\r\n    }\r\n\r\n    // --- Math ---\r\n    function add(uint x, int y) internal pure returns (uint z) {\r\n        z = x \u002B uint(y);\r\n        require(y \u003E= 0 || z \u003C= x);\r\n        require(y \u003C= 0 || z \u003E= x);\r\n    }\r\n    function sub(uint x, int y) internal pure returns (uint z) {\r\n        z = x - uint(y);\r\n        require(y \u003C= 0 || z \u003C= x);\r\n        require(y \u003E= 0 || z \u003E= x);\r\n    }\r\n    function mul(uint x, int y) internal pure returns (int z) {\r\n        z = int(x) * y;\r\n        require(int(x) \u003E= 0);\r\n        require(y == 0 || z / y == int(x));\r\n    }\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x \u002B y) \u003E= x);\r\n    }\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) \u003C= x);\r\n    }\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x);\r\n    }\r\n\r\n    // --- Administration ---\r\n    function init(bytes32 ilk) external note auth {\r\n        require(ilks[ilk].rate == 0, \u0022Vat/ilk-already-init\u0022);\r\n        ilks[ilk].rate = 10 ** 27;\r\n    }\r\n    function file(bytes32 what, uint data) external note auth {\r\n        require(live == 1, \u0022Vat/not-live\u0022);\r\n        if (what == \u0022Line\u0022) Line = data;\r\n        else revert(\u0022Vat/file-unrecognized-param\u0022);\r\n    }\r\n    function file(bytes32 ilk, bytes32 what, uint data) external note auth {\r\n        require(live == 1, \u0022Vat/not-live\u0022);\r\n        if (what == \u0022spot\u0022) ilks[ilk].spot = data;\r\n        else if (what == \u0022line\u0022) ilks[ilk].line = data;\r\n        else if (what == \u0022dust\u0022) ilks[ilk].dust = data;\r\n        else revert(\u0022Vat/file-unrecognized-param\u0022);\r\n    }\r\n    function cage() external note auth {\r\n        live = 0;\r\n    }\r\n\r\n    // --- Fungibility ---\r\n    function slip(bytes32 ilk, address usr, int256 wad) external note auth {\r\n        gem[ilk][usr] = add(gem[ilk][usr], wad);\r\n    }\r\n    function flux(bytes32 ilk, address src, address dst, uint256 wad) external note {\r\n        require(wish(src, msg.sender), \u0022Vat/not-allowed\u0022);\r\n        gem[ilk][src] = sub(gem[ilk][src], wad);\r\n        gem[ilk][dst] = add(gem[ilk][dst], wad);\r\n    }\r\n    function move(address src, address dst, uint256 rad) external note {\r\n        require(wish(src, msg.sender), \u0022Vat/not-allowed\u0022);\r\n        dai[src] = sub(dai[src], rad);\r\n        dai[dst] = add(dai[dst], rad);\r\n    }\r\n\r\n    function either(bool x, bool y) internal pure returns (bool z) {\r\n        assembly{ z := or(x, y)}\r\n    }\r\n    function both(bool x, bool y) internal pure returns (bool z) {\r\n        assembly{ z := and(x, y)}\r\n    }\r\n\r\n    // --- CDP Manipulation ---\r\n    function frob(bytes32 i, address u, address v, address w, int dink, int dart) external note {\r\n        // system is live\r\n        require(live == 1, \u0022Vat/not-live\u0022);\r\n\r\n        Urn memory urn = urns[i][u];\r\n        Ilk memory ilk = ilks[i];\r\n        // ilk has been initialised\r\n        require(ilk.rate != 0, \u0022Vat/ilk-not-init\u0022);\r\n\r\n        urn.ink = add(urn.ink, dink);\r\n        urn.art = add(urn.art, dart);\r\n        ilk.Art = add(ilk.Art, dart);\r\n\r\n        int dtab = mul(ilk.rate, dart);\r\n        uint tab = mul(ilk.rate, urn.art);\r\n        debt     = add(debt, dtab);\r\n\r\n        // either debt has decreased, or debt ceilings are not exceeded\r\n        require(either(dart \u003C= 0, both(mul(ilk.Art, ilk.rate) \u003C= ilk.line, debt \u003C= Line)), \u0022Vat/ceiling-exceeded\u0022);\r\n        // urn is either less risky than before, or it is safe\r\n        require(either(both(dart \u003C= 0, dink \u003E= 0), tab \u003C= mul(urn.ink, ilk.spot)), \u0022Vat/not-safe\u0022);\r\n\r\n        // urn is either more safe, or the owner consents\r\n        require(either(both(dart \u003C= 0, dink \u003E= 0), wish(u, msg.sender)), \u0022Vat/not-allowed-u\u0022);\r\n        // collateral src consents\r\n        require(either(dink \u003C= 0, wish(v, msg.sender)), \u0022Vat/not-allowed-v\u0022);\r\n        // debt dst consents\r\n        require(either(dart \u003E= 0, wish(w, msg.sender)), \u0022Vat/not-allowed-w\u0022);\r\n\r\n        // urn has no debt, or a non-dusty amount\r\n        require(either(urn.art == 0, tab \u003E= ilk.dust), \u0022Vat/dust\u0022);\r\n\r\n        gem[i][v] = sub(gem[i][v], dink);\r\n        dai[w]    = add(dai[w],    dtab);\r\n\r\n        urns[i][u] = urn;\r\n        ilks[i]    = ilk;\r\n    }\r\n    // --- CDP Fungibility ---\r\n    function fork(bytes32 ilk, address src, address dst, int dink, int dart) external note {\r\n        Urn storage u = urns[ilk][src];\r\n        Urn storage v = urns[ilk][dst];\r\n        Ilk storage i = ilks[ilk];\r\n\r\n        u.ink = sub(u.ink, dink);\r\n        u.art = sub(u.art, dart);\r\n        v.ink = add(v.ink, dink);\r\n        v.art = add(v.art, dart);\r\n\r\n        uint utab = mul(u.art, i.rate);\r\n        uint vtab = mul(v.art, i.rate);\r\n\r\n        // both sides consent\r\n        require(both(wish(src, msg.sender), wish(dst, msg.sender)), \u0022Vat/not-allowed\u0022);\r\n\r\n        // both sides safe\r\n        require(utab \u003C= mul(u.ink, i.spot), \u0022Vat/not-safe-src\u0022);\r\n        require(vtab \u003C= mul(v.ink, i.spot), \u0022Vat/not-safe-dst\u0022);\r\n\r\n        // both sides non-dusty\r\n        require(either(utab \u003E= i.dust, u.art == 0), \u0022Vat/dust-src\u0022);\r\n        require(either(vtab \u003E= i.dust, v.art == 0), \u0022Vat/dust-dst\u0022);\r\n    }\r\n    // --- CDP Confiscation ---\r\n    function grab(bytes32 i, address u, address v, address w, int dink, int dart) external note auth {\r\n        Urn storage urn = urns[i][u];\r\n        Ilk storage ilk = ilks[i];\r\n\r\n        urn.ink = add(urn.ink, dink);\r\n        urn.art = add(urn.art, dart);\r\n        ilk.Art = add(ilk.Art, dart);\r\n\r\n        int dtab = mul(ilk.rate, dart);\r\n\r\n        gem[i][v] = sub(gem[i][v], dink);\r\n        sin[w]    = sub(sin[w],    dtab);\r\n        vice      = sub(vice,      dtab);\r\n    }\r\n\r\n    // --- Settlement ---\r\n    function heal(uint rad) external note {\r\n        address u = msg.sender;\r\n        sin[u] = sub(sin[u], rad);\r\n        dai[u] = sub(dai[u], rad);\r\n        vice   = sub(vice,   rad);\r\n        debt   = sub(debt,   rad);\r\n    }\r\n    function suck(address u, address v, uint rad) external note auth {\r\n        sin[u] = add(sin[u], rad);\r\n        dai[v] = add(dai[v], rad);\r\n        vice   = add(vice,   rad);\r\n        debt   = add(debt,   rad);\r\n    }\r\n\r\n    // --- Rates ---\r\n    function fold(bytes32 i, address u, int rate) external note auth {\r\n        require(live == 1, \u0022Vat/not-live\u0022);\r\n        Ilk storage ilk = ilks[i];\r\n        ilk.rate = add(ilk.rate, rate);\r\n        int rad  = mul(ilk.Art, rate);\r\n        dai[u]   = add(dai[u], rad);\r\n        debt     = add(debt,   rad);\r\n    }\r\n}","ABI":"[{\u0022inputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022constructor\u0022},{\u0022anonymous\u0022:true,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022bytes4\u0022,\u0022name\u0022:\u0022sig\u0022,\u0022type\u0022:\u0022bytes4\u0022},{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022arg1\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022arg2\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022arg3\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022bytes\u0022,\u0022name\u0022:\u0022data\u0022,\u0022type\u0022:\u0022bytes\u0022}],\u0022name\u0022:\u0022LogNote\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022Line\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022cage\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022can\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022dai\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022debt\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022usr\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022deny\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022ilk\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022what\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022data\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022file\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022what\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022data\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022file\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022ilk\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022src\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022dst\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022wad\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022flux\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022i\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022u\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022int256\u0022,\u0022name\u0022:\u0022rate\u0022,\u0022type\u0022:\u0022int256\u0022}],\u0022name\u0022:\u0022fold\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022ilk\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022src\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022dst\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022int256\u0022,\u0022name\u0022:\u0022dink\u0022,\u0022type\u0022:\u0022int256\u0022},{\u0022internalType\u0022:\u0022int256\u0022,\u0022name\u0022:\u0022dart\u0022,\u0022type\u0022:\u0022int256\u0022}],\u0022name\u0022:\u0022fork\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022i\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022u\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022v\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022w\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022int256\u0022,\u0022name\u0022:\u0022dink\u0022,\u0022type\u0022:\u0022int256\u0022},{\u0022internalType\u0022:\u0022int256\u0022,\u0022name\u0022:\u0022dart\u0022,\u0022type\u0022:\u0022int256\u0022}],\u0022name\u0022:\u0022frob\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022gem\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022i\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022u\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022v\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022w\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022int256\u0022,\u0022name\u0022:\u0022dink\u0022,\u0022type\u0022:\u0022int256\u0022},{\u0022internalType\u0022:\u0022int256\u0022,\u0022name\u0022:\u0022dart\u0022,\u0022type\u0022:\u0022int256\u0022}],\u0022name\u0022:\u0022grab\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022rad\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022heal\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022usr\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022hope\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022ilks\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022Art\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022rate\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022spot\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022line\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022dust\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022ilk\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022init\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022live\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022src\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022dst\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022rad\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022move\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022usr\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022nope\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022usr\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022rely\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022sin\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022ilk\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022usr\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022int256\u0022,\u0022name\u0022:\u0022wad\u0022,\u0022type\u0022:\u0022int256\u0022}],\u0022name\u0022:\u0022slip\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022u\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022v\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022rad\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022suck\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022urns\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022ink\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022art\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022vice\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022wards\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022}]","ContractName":"Vat","CompilerVersion":"v0.5.12\u002Bcommit.7709ece9","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://8a74d6db3d5b0eba259e13b86f201f0fda2be3ffedbc0b4f90a67d87593f4de7"}]