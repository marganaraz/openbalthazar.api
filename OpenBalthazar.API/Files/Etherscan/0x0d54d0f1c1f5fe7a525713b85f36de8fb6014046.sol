[{"SourceCode":"pragma solidity 0.5.12;\r\npragma experimental ABIEncoderV2;\r\n\r\n // @author Authereum, Inc.\r\n\r\n/**\r\n * @title Owned\r\n * @author Authereum, Inc.\r\n * @dev Basic contract to define an owner.\r\n */\r\n\r\ncontract Owned {\r\n\r\n    // The owner\r\n    address public owner;\r\n\r\n    event OwnerChanged(address indexed _newOwner);\r\n\r\n    /// @dev Throws if the sender is not the owner\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner, \u0022Must be owner\u0022);\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /// @dev Return the ownership status of an address\r\n    /// @param _potentialOwner Address being checked\r\n    /// @return True if the _potentialOwner is the owner\r\n    function isOwner(address _potentialOwner) external view returns (bool) {\r\n        return owner == _potentialOwner;\r\n    }\r\n\r\n    /// @dev Lets the owner transfer ownership of the contract to a new owner\r\n    /// @param _newOwner The new owner\r\n    function changeOwner(address _newOwner) external onlyOwner {\r\n        require(_newOwner != address(0), \u0022Address must not be null\u0022);\r\n        owner = _newOwner;\r\n        emit OwnerChanged(_newOwner);\r\n    }\r\n}\r\n/**\r\n * @title AuthereumProxy\r\n * @author Authereum, Inc.\r\n * @dev The Authereum Proxy.\r\n */\r\n\r\ncontract AuthereumProxy {\r\n    string constant public authereumProxyVersion = \u00222019102500\u0022;\r\n\r\n    /// @dev Storage slot with the address of the current implementation.\r\n    /// @notice This is the keccak-256 hash of \u0022eip1967.proxy.implementation\u0022 subtracted \r\n    /// @notice by 1, and is validated in the constructor.\r\n    bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\r\n\r\n    /// @dev Set the implementation in the constructor\r\n    /// @param _logic Address of the logic contract\r\n    constructor(address _logic) public payable {\r\n        bytes32 slot = IMPLEMENTATION_SLOT;\r\n        assembly {\r\n            sstore(slot, _logic)\r\n        }\r\n    }\r\n\r\n    /// @dev Fallback function\r\n    /// @notice A payable fallback needs to be implemented in the implementation contract\r\n    /// @notice This is a low level function that doesn\u0027t return to its internal call site.\r\n    /// @notice It will return to the external caller whatever the implementation returns.\r\n    function () external payable {\r\n        if (msg.data.length == 0) return;\r\n        address _implementation = implementation();\r\n\r\n        assembly {\r\n            // Copy msg.data. We take full control of memory in this inline assembly\r\n            // block because it will not return to Solidity code. We overwrite the\r\n            // Solidity scratch pad at memory position 0.\r\n            calldatacopy(0, 0, calldatasize)\r\n\r\n            // Call the implementation.\r\n            // out and outsize are 0 because we don\u0027t know the size yet.\r\n            let result := delegatecall(gas, _implementation, 0, calldatasize, 0, 0)\r\n\r\n            // Copy the returned data.\r\n            returndatacopy(0, 0, returndatasize)\r\n\r\n            switch result\r\n            // delegatecall returns 0 on error.\r\n            case 0 { revert(0, returndatasize) }\r\n            default { return(0, returndatasize) }\r\n        }\r\n    }\r\n\r\n    /// @dev Returns the current implementation.\r\n    /// @return Address of the current implementation\r\n    function implementation() public view returns (address impl) {\r\n        bytes32 slot = IMPLEMENTATION_SLOT;\r\n        assembly {\r\n            impl := sload(slot)\r\n        }\r\n    }\r\n}\r\ncontract AuthereumEnsManager {\r\n    function register(string calldata _label, address _owner) external {}\r\n}\r\n/**\r\n * @title AuthereumProxyFactory\r\n * @author Authereum, Inc.\r\n * @dev A factory that creates Authereum Proxies.\r\n */\r\n\r\ncontract AuthereumProxyFactory is Owned {\r\n    string constant public authereumProxyFactoryVersion = \u00222019102500\u0022;\r\n    bytes private initCode;\r\n    address private authereumEnsManagerAddress;\r\n    \r\n    AuthereumEnsManager authereumEnsManager;\r\n\r\n    /// @dev Constructor\r\n    /// @param _implementation Address of the Authereum implementation\r\n    /// @param _authereumEnsManagerAddress Address for the Authereum ENS Manager contract\r\n    constructor(address _implementation, address _authereumEnsManagerAddress) public {\r\n        initCode = abi.encodePacked(type(AuthereumProxy).creationCode, uint256(_implementation));\r\n        authereumEnsManagerAddress =  _authereumEnsManagerAddress;\r\n        authereumEnsManager = AuthereumEnsManager(authereumEnsManagerAddress);\r\n    }\r\n\r\n    /**\r\n     *  Getters\r\n     */\r\n\r\n    /// @dev Getter for the proxy initCode\r\n    /// @return Init code\r\n    function getInitCode() public view returns (bytes memory) {\r\n        return initCode;\r\n    }\r\n\r\n    /// @dev Getter for the private authereumEnsManager variable\r\n    /// @return Authereum Ens Manager\r\n    function getAuthereumEnsManagerAddress() public view returns (address) {\r\n        return authereumEnsManagerAddress;\r\n    }\r\n\r\n    /// @dev Create an Authereum Proxy and iterate through initialize data\r\n    /// @notice The bytes[] _initData is an array of initialize functions. \r\n    /// @notice This is used when a user creates an account e.g. on V5, but V1,2,3, \r\n    /// @notice etc. have state vars that need to be included.\r\n    /// @param _salt A uint256 value to add randomness to the account creation\r\n    /// @param _label Label for the user\u0027s Authereum ENS subdomain\r\n    /// @param _initData Array of initialize data\r\n    function createProxy(\r\n        uint256 _salt, \r\n        string memory _label,\r\n        bytes[] memory _initData\r\n    ) \r\n        public \r\n        onlyOwner\r\n        returns (AuthereumProxy)\r\n    {\r\n        address payable addr;\r\n        bytes memory _initCode = initCode;\r\n        bytes32 salt = _getSalt(_salt, msg.sender);\r\n\r\n        // Create proxy\r\n        assembly {\r\n            addr := create2(0, add(_initCode, 0x20), mload(_initCode), salt)\r\n            if iszero(extcodesize(addr)) {\r\n                revert(0, 0)\r\n            }\r\n        }\r\n\r\n        // Loop through initializations of each version of the logic contract\r\n        bool success;\r\n        for (uint256 i = 0; i \u003C _initData.length; i\u002B\u002B) {\r\n            if(_initData.length \u003E 0) {\r\n                (success,) = addr.call(_initData[i]);\r\n                require(success);\r\n            }\r\n        }\r\n\r\n        // Set ENS name\r\n        authereumEnsManager.register(_label, addr);\r\n\r\n        return AuthereumProxy(addr);\r\n    }\r\n\r\n    /// @dev Generate a salt out of a uint256 value and the sender\r\n    /// @param _salt A uint256 value to add randomness to the account creation\r\n    /// @param _sender Sender of the transaction\r\n    function _getSalt(uint256 _salt, address _sender) internal pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(_salt, _sender)); \r\n    }\r\n}","ABI":"[{\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_implementation\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_authereumEnsManagerAddress\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022constructor\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022OwnerChanged\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022authereumProxyFactoryVersion\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022string\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022changeOwner\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_salt\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022string\u0022,\u0022name\u0022:\u0022_label\u0022,\u0022type\u0022:\u0022string\u0022},{\u0022internalType\u0022:\u0022bytes[]\u0022,\u0022name\u0022:\u0022_initData\u0022,\u0022type\u0022:\u0022bytes[]\u0022}],\u0022name\u0022:\u0022createProxy\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022contract AuthereumProxy\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022getAuthereumEnsManagerAddress\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022getInitCode\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bytes\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bytes\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_potentialOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022isOwner\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022owner\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022}]","ContractName":"AuthereumProxyFactory","CompilerVersion":"v0.5.12\u002Bcommit.7709ece9","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000d8cab604bdd8cbb7c3eb0c26f7dc3abffb005a920000000000000000000000006dcc6577650bbf5b70e9eee7cfd1364410867206","Library":"","SwarmSource":"bzzr://df4401333fb8c26a38547c751ff4c528d95f9c5a191e6bc81f110b4125072004"}]