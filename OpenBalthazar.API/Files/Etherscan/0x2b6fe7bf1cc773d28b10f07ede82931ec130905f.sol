[{"SourceCode":"pragma solidity \u003E=0.4.21 \u003C0.6.0;\r\n\r\ncontract WeightMultiSig{\r\n\r\n  struct invoke_status{\r\n    uint propose_height;\r\n    bytes32 invoke_hash;\r\n    string func_name;\r\n    uint64 invoke_id;\r\n    bool called;\r\n    address[] invoke_signers;\r\n    bool processing;\r\n    bool exists;\r\n  }\r\n\r\n  uint public signer_number;\r\n  address[] public signers;\r\n  mapping (address =\u003E uint) public weights;\r\n  uint public total_weight;\r\n  address public owner;\r\n  mapping (bytes32 =\u003E invoke_status) public invokes;\r\n  mapping (bytes32 =\u003E uint64) public used_invoke_ids;\r\n  mapping(address =\u003E uint) public signer_join_height;\r\n\r\n  event signers_reformed(address[] old_signers, address[] new_signers, uint[] new_weights);\r\n  event valid_function_sign(string name, uint64 id, uint64 current_signed_number, uint propose_height);\r\n  event function_called(string name, uint64 id, uint propose_height);\r\n\r\n  modifier enough_signers(address[] memory s){\r\n    require(s.length \u003E=3, \u0022the number of signers must be \u003E=3\u0022);\r\n    _;\r\n  }\r\n  constructor(address[] memory s, uint[] memory w) public enough_signers(s){\r\n    require(s.length == w.length, \u0022signers and weights are not with the same length\u0022);\r\n    signer_number = s.length;\r\n    owner = msg.sender;\r\n    total_weight = 0;\r\n    for(uint i = 0; i \u003C s.length; i\u002B\u002B){\r\n      signers.push(s[i]);\r\n      weights[s[i]] = w[i];\r\n      signer_join_height[s[i]] = block.number;\r\n      total_weight \u002B= w[i];\r\n    }\r\n  }\r\n\r\n  modifier only_signer{\r\n    require(array_exist(signers, msg.sender), \u0022only a signer can call this\u0022);\r\n    _;\r\n  }\r\n\r\n  function is_signer(address _addr) public view returns(bool){\r\n    return array_exist(signers, _addr);\r\n  }\r\n\r\n  function get_total_weight() internal view returns (uint){\r\n    return total_weight;\r\n  }\r\n\r\n  function get_majority_weight() private view returns(uint){\r\n    return get_total_weight()/2 \u002B 1;\r\n  }\r\n\r\n  function array_exist (address[] memory accounts, address p) private pure returns (bool){\r\n    for (uint i = 0; i\u003C accounts.length;i\u002B\u002B){\r\n      if (accounts[i]==p){\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  function is_all_minus_sig(uint number, uint64 id, string memory name, bytes32 hash, address sender) internal returns (bool){\r\n    bytes32 b = keccak256(abi.encodePacked(name));\r\n    require(id \u003C= used_invoke_ids[b] \u002B 1, \u0022you\u0027re using a too big id.\u0022);\r\n\r\n    if(id \u003E used_invoke_ids[b]){\r\n      used_invoke_ids[b] = id;\r\n    }\r\n\r\n    if(!invokes[hash].exists){\r\n      invokes[hash].propose_height = block.number;\r\n      invokes[hash].invoke_hash = hash;\r\n      invokes[hash].func_name= name;\r\n      invokes[hash].invoke_id= id;\r\n      invokes[hash].called= false;\r\n      invokes[hash].invoke_signers.push(sender);\r\n      invokes[hash].processing= false;\r\n      invokes[hash].exists= true;\r\n      emit valid_function_sign(name, id, uint64(weights[sender]), block.number);\r\n      if(weights[sender] \u003E= get_total_weight() - number){\r\n        invokes[hash].processing = true;\r\n        return true;\r\n      }else{\r\n        return false;\r\n      }\r\n    }\r\n\r\n\r\n    invoke_status storage invoke = invokes[hash];\r\n    require(!array_exist(invoke.invoke_signers, sender), \u0022you already called this method\u0022);\r\n\r\n    //uint[] memory t;\r\n    //emit signers_reformed(signers, [sender], t);\r\n    uint valid_invoke_weight = 0;\r\n    uint join_height = signer_join_height[sender];\r\n    for(uint i = 0; i \u003C invoke.invoke_signers.length; i\u002B\u002B){\r\n      require(join_height \u003C invoke.propose_height, \u0022this proposal is already exist before you become a signer\u0022);\r\n      if(array_exist(signers, invoke.invoke_signers[i])){\r\n        valid_invoke_weight \u002B= weights[invoke.invoke_signers[i]];\r\n      }\r\n    }\r\n    invoke.invoke_signers.push(sender);\r\n    valid_invoke_weight \u002B= weights[sender];\r\n    emit valid_function_sign(name, id, uint64(valid_invoke_weight), invoke.propose_height);\r\n    if(invoke.called) return false;\r\n    if(valid_invoke_weight \u003C get_total_weight() -number) return false;\r\n    invoke.processing = true;\r\n    return true;\r\n  }\r\n\r\n  function update_and_check_reach_majority(uint64 id, string memory name, bytes32 hash, address sender) public returns (bool){\r\n    //bytes32 hash = keccak256(abi.encodePacked(msg.sig, msg.data));\r\n    if(!is_all_minus_sig(get_majority_weight()-1, id, name, hash, sender))\r\n      return false;\r\n    set_called(hash);\r\n    return true;\r\n  }\r\n\r\n  modifier is_majority_sig(uint64 id, string memory name) {\r\n    bytes32 hash = keccak256(abi.encodePacked(msg.sig, msg.data));\r\n    if(!is_all_minus_sig(get_majority_weight()-1, id, name, hash, msg.sender))\r\n      return ;\r\n    set_called(hash);\r\n    _;\r\n  }\r\n\r\n  modifier is_all_sig(uint64 id, string memory name) {\r\n    bytes32 hash = keccak256(abi.encodePacked(msg.sig, msg.data));\r\n    if(!is_all_minus_sig(0, id, name, hash, msg.sender)) return ;\r\n    set_called(hash);\r\n    _;\r\n  }\r\n\r\n  function set_called(bytes32 hash) internal {\r\n    invoke_status storage invoke = invokes[hash];\r\n    require(invoke.exists, \u0022no such function\u0022);\r\n    require(!invoke.called, \u0022already called\u0022);\r\n    require(invoke.processing, \u0022cannot call this separately\u0022);\r\n    invoke.called = true;\r\n    invoke.processing = false;\r\n    emit function_called(invoke.func_name, invoke.invoke_id, invoke.propose_height);\r\n  }\r\n\r\n  function reform_signers(uint64 id, address[] calldata s, uint[] calldata w)\r\n    external\r\n    only_signer\r\n    enough_signers(s)\r\n    is_majority_sig(id, \u0022reform_signers\u0022){\r\n    address[] memory old_signers = signers;\r\n    for(uint i = 0; i \u003C s.length; i\u002B\u002B){\r\n      if(array_exist(old_signers, s[i])){\r\n      }else{\r\n        signer_join_height[s[i]] = block.number;\r\n        weights[s[i]] = w[i];\r\n      }\r\n    }\r\n    for(uint i = 0; i \u003C old_signers.length; i\u002B\u002B){\r\n      if(array_exist(s, old_signers[i])){\r\n      }else{\r\n        signer_join_height[old_signers[i]] = 0;\r\n        weights[s[i]] = 0;\r\n      }\r\n    }\r\n    signer_number = s.length;\r\n    signers = s;\r\n    emit signers_reformed(old_signers, signers, w);\r\n    total_weight = 0; //enforce update.\r\n    for(uint i = 0; i \u003C signers.length; i\u002B\u002B){\r\n      weights[signers[i]] = w[i];\r\n      total_weight \u002B= weights[signers[i]];\r\n    }\r\n  }\r\n\r\n  function get_unused_invoke_id(string memory name) public view returns(uint64){\r\n    return used_invoke_ids[keccak256(abi.encodePacked(name))] \u002B 1;\r\n  }\r\n  function get_signers() public view returns(address[] memory){\r\n    return signers;\r\n  }\r\n  function get_signer_weight(address addr) public view returns(uint){\r\n    return weights[addr];\r\n  }\r\n}\r\n\r\ncontract WeightMultiSigFactory{\r\n  event NewWeightMultiSig(address addr, address[] signers, uint[] weights);\r\n\r\n  function createWeightMultiSig(address[] memory _signers, uint[] memory _weights) public returns(address){\r\n    WeightMultiSig ms = new WeightMultiSig(_signers, _weights);\r\n    emit NewWeightMultiSig(address(ms), _signers, _weights);\r\n    return address(ms);\r\n  }\r\n}","ABI":"[{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_signers\u0022,\u0022type\u0022:\u0022address[]\u0022},{\u0022name\u0022:\u0022_weights\u0022,\u0022type\u0022:\u0022uint256[]\u0022}],\u0022name\u0022:\u0022createWeightMultiSig\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022addr\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022signers\u0022,\u0022type\u0022:\u0022address[]\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022weights\u0022,\u0022type\u0022:\u0022uint256[]\u0022}],\u0022name\u0022:\u0022NewWeightMultiSig\u0022,\u0022type\u0022:\u0022event\u0022}]","ContractName":"WeightMultiSigFactory","CompilerVersion":"v0.5.10\u002Bcommit.5a6ea5b1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://59147aec6372fc80e45285184d7f67e298d56b050c3d4335d32fc311c4acb451"}]