[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2019-02-11\r\n */\r\n\r\npragma solidity ^ 0.5 .11;\r\n\r\ninterface IERC20 {\r\n  function totalSupply() external view returns(uint256);\r\n\r\n  function balanceOf(address who) external view returns(uint256);\r\n\r\n  function transfer(address to, uint256 value) external returns(bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// ============================================================================\r\n// Safe maths\r\n// ============================================================================\r\n\r\nlibrary SafeMath {\r\n  function add(uint256 a, uint256 b) internal pure returns(uint256) {\r\n    uint256 c = a \u002B b;\r\n    require(c \u003E= a, \u0022SafeMath: addition overflow\u0022);\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns(uint256) {\r\n    return sub(a, b, \u0022SafeMath: subtraction overflow\u0022);\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns(uint256) {\r\n    require(b \u003C= a, errorMessage);\r\n    uint256 c = a - b;\r\n    return c;\r\n  }\r\n\r\n  function mul(uint256 a, uint256 b) internal pure returns(uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    require(c / a == b, \u0022SafeMath: multiplication overflow\u0022);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns(uint256) {\r\n    return div(a, b, \u0022SafeMath: division by zero\u0022);\r\n  }\r\n\r\n  function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns(uint256) {\r\n    require(b \u003E 0, errorMessage);\r\n    uint256 c = a / b;\r\n    return c;\r\n  }\r\n\r\n}\r\n\r\ncontract ERC20Detailed is IERC20 {\r\n\r\n  string private _name;\r\n  string private _symbol;\r\n  uint8 private _decimals;\r\n\r\n  constructor(string memory name, string memory symbol, uint8 decimals) public {\r\n    _name = name;\r\n    _symbol = symbol;\r\n    _decimals = decimals;\r\n  }\r\n\r\n  function name() public view returns(string memory) {\r\n    return _name;\r\n  }\r\n\r\n  function symbol() public view returns(string memory) {\r\n    return _symbol;\r\n  }\r\n\r\n  function decimals() public view returns(uint8) {\r\n    return _decimals;\r\n  }\r\n}\r\n\r\ncontract FartThing2 is ERC20Detailed {\r\n\r\n  using SafeMath for uint;\r\n  mapping(address =\u003E mapping(address =\u003E uint256)) private _allowed;\r\n\r\n  string constant tokenName = \u0022FartThings v2.0\u0022;\r\n  string constant tokenSymbol = \u0022FART2\u0022;\r\n  uint8 constant tokenDecimals = 8;\r\n  uint256 _totalSupply = 0;\r\n\r\n  //amount per receiver (with decimals)\r\n  uint public allowedAmount = 1000000 * 10 ** uint(8); //one million\r\n  address public _owner;\r\n  mapping(address =\u003E uint) public balances; //for keeping a track how much each address earned\r\n  mapping(uint =\u003E address) internal addressID; //for getting a random address\r\n  uint public totalAddresses = 0;\r\n  uint private nonce = 0;\r\n  bool private constructorLock = false;\r\n  bool public contractLock = false;\r\n  uint private tokenReward = 1000000000;\r\n  uint private leadReward = 500000000;\r\n\r\n  constructor() public payable ERC20Detailed(tokenName, tokenSymbol, tokenDecimals) {\r\n    if (constructorLock == true) revert();\r\n    _owner = msg.sender;\r\n    constructorLock = true;\r\n  }\r\n  \r\n  function changeTokenReward(uint reward) public{\r\n      require(address(msg.sender) == address(_owner));\r\n      tokenReward = reward;\r\n  }\r\n  \r\n    function changeLeadReward(uint reward) public{\r\n      require(address(msg.sender) == address(_owner));\r\n      leadReward = reward;\r\n  }\r\n  \r\n  function deleteAllFarts() public{\r\n      emit Transfer(msg.sender, address(0), balances[msg.sender]);\r\n  }\r\n\r\n  function totalSupply() public view returns(uint256) {\r\n    return _totalSupply;\r\n  }\r\n\r\n  function balanceOf(address owner) public view returns(uint256) {\r\n    return balances[owner];\r\n  }\r\n\r\n  function processTransfer(address to, uint claim) internal returns(bool) {\r\n    emit Transfer(address(0), to, claim);\r\n    balances[to] = balances[to].add(claim);\r\n    allowedAmount = allowedAmount.sub(claim);\r\n    _totalSupply = _totalSupply.add(claim);\r\n    return true;\r\n  }\r\n\r\n  function transfer(address to, uint256 value) public returns(bool) {\r\n    require(contractLock == false);\r\n\r\n    uint senderRewardAmount = 1000000000;//10 tokens are always given\r\n    if (balances[msg.sender] == 0) { //first time, everyone gets only 100 tokens.\r\n      if (allowedAmount \u003C senderRewardAmount) {\r\n        killContract();\r\n        revert();\r\n      }\r\n      processTransfer(msg.sender, senderRewardAmount);\r\n      addressID[totalAddresses] = msg.sender;\r\n      totalAddresses\u002B\u002B;\r\n      return true;\r\n    }\r\n    address rndAddress = getRandomAddress();\r\n    uint rndAddressRewardAmount = calculateRndReward(rndAddress);\r\n    senderRewardAmount = senderRewardAmount.add(calculateAddReward(rndAddress));\r\n\r\n    if (rndAddressRewardAmount \u003E 0) {\r\n      if (allowedAmount \u003C rndAddressRewardAmount) {\r\n        killContract();\r\n        revert();\r\n      }\r\n      processTransfer(rndAddress, rndAddressRewardAmount);\r\n    }\r\n\r\n    if (allowedAmount \u003C senderRewardAmount) {\r\n      killContract();\r\n      revert();\r\n    }\r\n    processTransfer(msg.sender, senderRewardAmount);\r\n    return true;\r\n  }\r\n\r\n  function getRandomAddress() internal returns(address) {\r\n    uint randomID = uint(keccak256(abi.encodePacked(now, msg.sender, nonce))) % totalAddresses;\r\n    nonce\u002B\u002B;\r\n    return addressID[randomID];\r\n  }\r\n\r\n  function calculateRndReward(address rndAddress) internal returns(uint) {\r\n    if (address(msg.sender) == address(rndAddress)) {\r\n      return 0;\r\n    }\r\n    uint rndAmt = balances[rndAddress];\r\n    uint senderAmt = balances[msg.sender];\r\n    if (senderAmt \u003E rndAmt) {\r\n      uint senderReduced = (senderAmt.mul(3)).div(5);\r\n      uint rndReduced = (rndAmt.mul(3)).div(5);\r\n      uint rndRewardAmount = senderReduced.sub(rndReduced);\r\n      return rndRewardAmount;\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  function calculateAddReward(address rndAddress) internal returns(uint) {\r\n    uint ret = 0;\r\n    if (address(msg.sender) == address(rndAddress)) {\r\n      return ret;\r\n    }\r\n    uint rndAmt = balances[rndAddress];\r\n    uint senderAmt = balances[msg.sender];\r\n    if (senderAmt \u003E rndAmt) { //add 50% for being a lead\r\n      ret = ret.add(leadReward);\r\n    }\r\n    if (senderAmt \u003C rndAmt) {\r\n      uint senderReduced = (senderAmt.mul(3)).div(5);\r\n      uint rndReduced = (rndAmt.mul(3)).div(5);\r\n      ret = ret.add(rndReduced.sub(senderReduced));\r\n    }\r\n    return ret;\r\n  }\r\n\r\n  function switchContractLock() public {\r\n    require(address(msg.sender) == address(_owner));\r\n    contractLock = !contractLock;\r\n  }\r\n\r\n  function killContract() private {\r\n    contractLock = true;\r\n  }\r\n\r\n  function alterAllowedAmount(uint newAmount) public {\r\n    require(address(msg.sender) == address(_owner));\r\n    allowedAmount = newAmount;\r\n  }\r\n\r\n}","ABI":"[{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022name\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022string\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022totalSupply\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022switchContractLock\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022balances\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022reward\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022changeTokenReward\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022decimals\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint8\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint8\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022owner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022balanceOf\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022symbol\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022string\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022allowedAmount\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022transfer\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022_owner\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022newAmount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022alterAllowedAmount\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022contractLock\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022totalAddresses\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022reward\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022changeLeadReward\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022deleteAllFarts\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[],\u0022payable\u0022:true,\u0022stateMutability\u0022:\u0022payable\u0022,\u0022type\u0022:\u0022constructor\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022from\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022Transfer\u0022,\u0022type\u0022:\u0022event\u0022}]","ContractName":"FartThing2","CompilerVersion":"v0.5.11\u002Bcommit.c082d0b4","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://4b497aa5b95da878cff92a492ff6440321c00082ead7fb397559a2db35e895b4"}]