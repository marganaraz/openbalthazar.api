[{"SourceCode":"pragma solidity 0.4.26;\r\n\r\ncontract Math {\r\n\r\n    ////////////////////////\r\n    // Internal functions\r\n    ////////////////////////\r\n\r\n    // absolute difference: |v1 - v2|\r\n    function absDiff(uint256 v1, uint256 v2)\r\n        internal\r\n        pure\r\n        returns(uint256)\r\n    {\r\n        return v1 \u003E v2 ? v1 - v2 : v2 - v1;\r\n    }\r\n\r\n    // divide v by d, round up if remainder is 0.5 or more\r\n    function divRound(uint256 v, uint256 d)\r\n        internal\r\n        pure\r\n        returns(uint256)\r\n    {\r\n        return add(v, d/2) / d;\r\n    }\r\n\r\n    // computes decimal decimalFraction \u0027frac\u0027 of \u0027amount\u0027 with maximum precision (multiplication first)\r\n    // both amount and decimalFraction must have 18 decimals precision, frac 10**18 represents a whole (100% of) amount\r\n    // mind loss of precision as decimal fractions do not have finite binary expansion\r\n    // do not use instead of division\r\n    function decimalFraction(uint256 amount, uint256 frac)\r\n        internal\r\n        pure\r\n        returns(uint256)\r\n    {\r\n        // it\u0027s like 1 ether is 100% proportion\r\n        return proportion(amount, frac, 10**18);\r\n    }\r\n\r\n    // computes part/total of amount with maximum precision (multiplication first)\r\n    // part and total must have the same units\r\n    function proportion(uint256 amount, uint256 part, uint256 total)\r\n        internal\r\n        pure\r\n        returns(uint256)\r\n    {\r\n        return divRound(mul(amount, part), total);\r\n    }\r\n\r\n    //\r\n    // Open Zeppelin Math library below\r\n    //\r\n\r\n    function mul(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        assert(b \u003C= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        uint256 c = a \u002B b;\r\n        assert(c \u003E= a);\r\n        return c;\r\n    }\r\n\r\n    function min(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return a \u003C b ? a : b;\r\n    }\r\n\r\n    function max(uint256 a, uint256 b)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return a \u003E b ? a : b;\r\n    }\r\n}\r\n\r\n/// @title uniquely identifies deployable (non-abstract) platform contract\r\n/// @notice cheap way of assigning implementations to knownInterfaces which represent system services\r\n///         unfortunatelly ERC165 does not include full public interface (ABI) and does not provide way to list implemented interfaces\r\n///         EIP820 still in the making\r\n/// @dev ids are generated as follows keccak256(\u0022neufund-platform:\u003Ccontract name\u003E\u0022)\r\n///      ids roughly correspond to ABIs\r\ncontract IContractId {\r\n    /// @param id defined as above\r\n    /// @param version implementation version\r\n    function contractId() public pure returns (bytes32 id, uint256 version);\r\n}\r\n\r\n// version history as per contract id\r\n// 0 - initial version\r\n// 1 - added SHARE_NOMINAL_VALUE_ULPS, SHARE_NOMINAL_VALUE_EUR_ULPS, TOKEN_NAME, TOKEN_SYMBOL, SHARE_PRICE\r\n\r\n\r\n/// @title sets terms for tokens in ETO\r\ncontract ETOTokenTerms is Math, IContractId {\r\n\r\n    ////////////////////////\r\n    // Constants state\r\n    ////////////////////////\r\n\r\n    bytes32 private constant EMPTY_STRING_HASH = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n    // equity tokens decimals (precision)\r\n    uint8 public constant EQUITY_TOKENS_PRECISION = 0; // indivisible\r\n\r\n    ////////////////////////\r\n    // Immutable state\r\n    ////////////////////////\r\n\r\n    // equity token metadata\r\n    string public EQUITY_TOKEN_NAME;\r\n    string public EQUITY_TOKEN_SYMBOL;\r\n\r\n    // minimum number of tokens being offered. will set min cap\r\n    uint256 public MIN_NUMBER_OF_TOKENS;\r\n    // maximum number of tokens being offered. will set max cap\r\n    uint256 public MAX_NUMBER_OF_TOKENS;\r\n    // base token price in EUR-T, without any discount scheme\r\n    uint256 public TOKEN_PRICE_EUR_ULPS;\r\n    // maximum number of tokens in whitelist phase\r\n    uint256 public MAX_NUMBER_OF_TOKENS_IN_WHITELIST;\r\n    // sets nominal value of newly issued shares in currency of share capital as per ISHA\r\n    // will be embedded in the equity token (IEquityToken interface)\r\n    uint256 public SHARE_NOMINAL_VALUE_ULPS;\r\n    // sets nominal value of newly issued shares in euro, used to withdraw share capital to Nominee\r\n    uint256 public SHARE_NOMINAL_VALUE_EUR_ULPS;\r\n    // equity tokens per share\r\n    uint256 public EQUITY_TOKENS_PER_SHARE;\r\n\r\n\r\n    ////////////////////////\r\n    // Constructor\r\n    ////////////////////////\r\n\r\n    constructor(\r\n        string equityTokenName,\r\n        string equityTokenSymbol,\r\n        uint256 minNumberOfTokens,\r\n        uint256 maxNumberOfTokens,\r\n        uint256 tokenPriceEurUlps,\r\n        uint256 maxNumberOfTokensInWhitelist,\r\n        uint256 shareNominalValueUlps,\r\n        uint256 shareNominalValueEurUlps,\r\n        uint256 equityTokensPerShare\r\n    )\r\n        public\r\n    {\r\n        require(maxNumberOfTokens \u003E= maxNumberOfTokensInWhitelist, \u0022NF_WL_TOKENS_GT_MAX_TOKENS\u0022);\r\n        require(maxNumberOfTokens \u003E= minNumberOfTokens, \u0022NF_MIN_TOKENS_GT_MAX_TOKENS\u0022);\r\n        // min cap must be \u003E single share\r\n        require(minNumberOfTokens \u003E= equityTokensPerShare, \u0022NF_ETO_TERMS_ONE_SHARE\u0022);\r\n        // maximum number of tokens are full shares\r\n        require(maxNumberOfTokens % equityTokensPerShare == 0, \u0022NF_MAX_TOKENS_FULL_SHARES\u0022);\r\n        require(shareNominalValueUlps \u003E 0);\r\n        require(shareNominalValueEurUlps \u003E 0);\r\n        require(equityTokensPerShare \u003E 0);\r\n        require(keccak256(abi.encodePacked(equityTokenName)) != EMPTY_STRING_HASH);\r\n        require(keccak256(abi.encodePacked(equityTokenSymbol)) != EMPTY_STRING_HASH);\r\n        // overflows cannot be possible\r\n        require(maxNumberOfTokens \u003C 2**56, \u0022NF_TOO_MANY_TOKENS\u0022);\r\n        require(mul(tokenPriceEurUlps, maxNumberOfTokens) \u003C 2**112, \u0022NF_TOO_MUCH_FUNDS_COLLECTED\u0022);\r\n\r\n        MIN_NUMBER_OF_TOKENS = minNumberOfTokens;\r\n        MAX_NUMBER_OF_TOKENS = maxNumberOfTokens;\r\n        TOKEN_PRICE_EUR_ULPS = tokenPriceEurUlps;\r\n        MAX_NUMBER_OF_TOKENS_IN_WHITELIST = maxNumberOfTokensInWhitelist;\r\n        SHARE_NOMINAL_VALUE_EUR_ULPS = shareNominalValueEurUlps;\r\n        SHARE_NOMINAL_VALUE_ULPS = shareNominalValueUlps;\r\n        EQUITY_TOKEN_NAME = equityTokenName;\r\n        EQUITY_TOKEN_SYMBOL = equityTokenSymbol;\r\n        EQUITY_TOKENS_PER_SHARE = equityTokensPerShare;\r\n    }\r\n\r\n    ////////////////////////\r\n    // Public methods\r\n    ////////////////////////\r\n\r\n    function SHARE_PRICE_EUR_ULPS() public constant returns (uint256) {\r\n        return mul(TOKEN_PRICE_EUR_ULPS, EQUITY_TOKENS_PER_SHARE);\r\n    }\r\n\r\n    //\r\n    // Implements IContractId\r\n    //\r\n\r\n    function contractId() public pure returns (bytes32 id, uint256 version) {\r\n        return (0x591e791aab2b14c80194b729a2abcba3e8cce1918be4061be170e7223357ae5c, 1);\r\n    }\r\n}","ABI":"[{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022EQUITY_TOKEN_SYMBOL\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022MAX_NUMBER_OF_TOKENS\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022MIN_NUMBER_OF_TOKENS\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022EQUITY_TOKENS_PER_SHARE\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022EQUITY_TOKENS_PRECISION\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint8\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022contractId\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022id\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022name\u0022:\u0022version\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022pure\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022MAX_NUMBER_OF_TOKENS_IN_WHITELIST\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022TOKEN_PRICE_EUR_ULPS\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022SHARE_PRICE_EUR_ULPS\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022EQUITY_TOKEN_NAME\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022SHARE_NOMINAL_VALUE_ULPS\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022SHARE_NOMINAL_VALUE_EUR_ULPS\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[{\u0022name\u0022:\u0022equityTokenName\u0022,\u0022type\u0022:\u0022string\u0022},{\u0022name\u0022:\u0022equityTokenSymbol\u0022,\u0022type\u0022:\u0022string\u0022},{\u0022name\u0022:\u0022minNumberOfTokens\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022maxNumberOfTokens\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022tokenPriceEurUlps\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022maxNumberOfTokensInWhitelist\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022shareNominalValueUlps\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022shareNominalValueEurUlps\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022equityTokensPerShare\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022constructor\u0022}]","ContractName":"ETOTokenTerms","CompilerVersion":"v0.4.26\u002Bcommit.4563c3fc","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000005b8d800000000000000000000000000000000000000000000000000000000001c9c380000000000000000000000000000000000000000000000000023f145d8a8522fe0000000000000000000000000000000000000000000000000000000001c9c3800000000000000000000000000000000000000000000000056bc75e2d63100000000000000000000000000000000000000000000000000000bb59a27953c6000000000000000000000000000000000000000000000000000000000000000f42400000000000000000000000000000000000000000000000000000000000000005477265797000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034752500000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://10445bfd28adcc4b28c2473f9f2328db2373f411b776fb6e6674b0846088463e"}]