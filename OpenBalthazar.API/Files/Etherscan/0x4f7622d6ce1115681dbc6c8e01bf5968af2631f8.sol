[{"SourceCode":"// File: contracts/lib/ERC20.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title ERC20\r\n * @dev A standard interface for tokens.\r\n * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\r\n */\r\ncontract ERC20 {\r\n\r\n    /// @dev Returns the total token supply\r\n    function totalSupply() public view returns (uint256 supply);\r\n\r\n    /// @dev Returns the account balance of the account with address _owner\r\n    function balanceOf(address _owner) public view returns (uint256 balance);\r\n\r\n    /// @dev Transfers _value number of tokens to address _to\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n\r\n    /// @dev Transfers _value number of tokens from address _from to address _to\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n\r\n    /// @dev Allows _spender to withdraw from the msg.sender\u0027s account up to the _value amount\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n\r\n    /// @dev Returns the amount which _spender is still allowed to withdraw from _owner\r\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n\r\n}\r\n\r\n// File: contracts/FundsForwarder.sol\r\n\r\n\r\ninterface IGivethBridge {\r\n    function donate(uint64 giverId, uint64 receiverId) external payable;\r\n    function donate(uint64 giverId, uint64 receiverId, address token, uint _amount) external payable;\r\n}\r\n\r\ninterface IFundsForwarderFactory {\r\n    function bridge() external returns (address);\r\n    function escapeHatchCaller() external returns (address);\r\n    function escapeHatchDestination() external returns (address);\r\n}\r\n\r\ninterface IMolochDao {\r\n    function approvedToken() external returns (address);\r\n    function members(address member) external returns (address, uint256, bool, uint256);\r\n    function ragequit(uint sharesToBurn) external;\r\n}\r\n\r\ninterface IWEth {\r\n    function withdraw(uint wad) external;\r\n    function balanceOf(address guy) external returns (uint);\r\n}\r\n\r\n\r\ncontract FundsForwarder {\r\n    uint64 public receiverId;\r\n    uint64 public giverId;\r\n    IFundsForwarderFactory public fundsForwarderFactory;\r\n\r\n    string private constant ERROR_ERC20_APPROVE = \u0022ERROR_ERC20_APPROVE\u0022;\r\n    string private constant ERROR_BRIDGE_CALL = \u0022ERROR_BRIDGE_CALL\u0022;\r\n    string private constant ERROR_ZERO_BRIDGE = \u0022ERROR_ZERO_BRIDGE\u0022;\r\n    string private constant ERROR_DISALLOWED = \u0022RECOVER_DISALLOWED\u0022;\r\n    string private constant ERROR_TOKEN_TRANSFER = \u0022RECOVER_TOKEN_TRANSFER\u0022;\r\n    string private constant ERROR_ALREADY_INITIALIZED = \u0022INIT_ALREADY_INITIALIZED\u0022;\r\n    uint private constant MAX_UINT = uint(-1);\r\n\r\n    event Forwarded(address to, address token, uint balance);\r\n    event EscapeHatchCalled(address token, uint amount);\r\n\r\n    constructor() public {\r\n        /// @dev From AragonOS\u0027s Autopetrified contract\r\n        // Immediately petrify base (non-proxy) instances of inherited contracts on deploy.\r\n        // This renders them uninitializable (and unusable without a proxy).\r\n        fundsForwarderFactory = IFundsForwarderFactory(address(-1));\r\n    }\r\n\r\n    /**\r\n    * Fallback function to receive ETH donations\r\n    */\r\n    function() public payable {}\r\n\r\n    /**\r\n    * @dev Initialize can only be called once.\r\n    * @notice msg.sender MUST be the _fundsForwarderFactory Contract\r\n    *  Its address must be a contract with three public getters:\r\n    *  - bridge(): Returns the bridge address\r\n    *  - escapeHatchCaller(): Returns the escapeHatchCaller address\r\n    *  - escapeHatchDestination(): Returns the escashouldpeHatchDestination address\r\n    * @param _giverId The adminId of the liquidPledging pledge admin who is donating\r\n    * @param _receiverId The adminId of the liquidPledging pledge admin receiving the donation\r\n    */\r\n    function initialize(uint64 _giverId, uint64 _receiverId) public {\r\n        /// @dev onlyInit method from AragonOS\u0027s Initializable contract\r\n        require(fundsForwarderFactory == address(0), ERROR_ALREADY_INITIALIZED);\r\n        /// @dev Setting fundsForwarderFactory, serves as calling initialized()\r\n        fundsForwarderFactory = IFundsForwarderFactory(msg.sender);\r\n        /// @dev Make sure that the fundsForwarderFactory is a contract and has a bridge method\r\n        require(fundsForwarderFactory.bridge() != address(0), ERROR_ZERO_BRIDGE);\r\n\r\n        receiverId = _receiverId;\r\n        giverId = _giverId;\r\n    }\r\n\r\n    /**\r\n    * Transfer tokens/eth to the bridge. Transfer the entire balance of the contract\r\n    * @param _token the token to transfer. 0x0 for ETH\r\n    */\r\n    function forward(address _token) public {\r\n        IGivethBridge bridge = IGivethBridge(fundsForwarderFactory.bridge());\r\n        require(bridge != address(0), ERROR_ZERO_BRIDGE);\r\n\r\n        uint balance;\r\n        bool result;\r\n        /// @dev Logic for ether\r\n        if (_token == address(0)) {\r\n            balance = address(this).balance;\r\n            /// @dev Call donate() with two arguments, for tokens\r\n            /// Low level .call must be used due to function overloading\r\n            /// keccak250(\u0022donate(uint64,uint64)\u0022) = bde60ac9\r\n            /* solium-disable-next-line security/no-call-value */\r\n            result = address(bridge).call.value(balance)(\r\n                0xbde60ac9,\r\n                giverId,\r\n                receiverId\r\n            );\r\n        /// @dev Logic for tokens\r\n        } else {\r\n            ERC20 token = ERC20(_token);\r\n            balance = token.balanceOf(this);\r\n            /// @dev Since the bridge is a trusted contract, the max allowance\r\n            ///  will be set on the first token transfer. Then it\u0027s skipped\r\n            ///  Numbers for DAI        First tx | n\u002B1 txs\r\n            ///  approve(_, balance)      66356     51356\r\n            ///  approve(_, MAX_UINT)     78596     39103\r\n            ///                          \u002B12240    -12253\r\n            ///  Worth it if forward is called more than once for each token\r\n            if (token.allowance(address(this), bridge) \u003C balance) {\r\n                require(token.approve(bridge, MAX_UINT), ERROR_ERC20_APPROVE);\r\n            }\r\n\r\n            /// @dev Call donate() with four arguments, for tokens\r\n            /// Low level .call must be used due to function overloading\r\n            /// keccak256(\u0022donate(uint64,uint64,address,uint256)\u0022) = 4c4316c7\r\n            /* solium-disable-next-line security/no-low-level-calls */\r\n            result = address(bridge).call(\r\n                0x4c4316c7,\r\n                giverId,\r\n                receiverId,\r\n                token,\r\n                balance\r\n            );\r\n        }\r\n        require(result, ERROR_BRIDGE_CALL);\r\n        emit Forwarded(bridge, _token, balance);\r\n    }\r\n\r\n    /**\r\n    * Transfer multiple tokens/eth to the bridge. Simplies UI interactions\r\n    * @param _tokens the array of tokens to transfer. 0x0 for ETH\r\n    */\r\n    function forwardMultiple(address[] _tokens) public {\r\n        uint tokensLength = _tokens.length;\r\n        for (uint i = 0; i \u003C tokensLength; i\u002B\u002B) {\r\n            forward(_tokens[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Transfer tokens from a Moloch DAO by calling ragequit on all shares\r\n    * @param _molochDao Address of a Moloch DAO\r\n    * @param _convertWeth Flag to indicate that this DAO uses WETH\r\n    */\r\n    function forwardMoloch(address _molochDao, bool _convertWeth) public {\r\n        IMolochDao molochDao = IMolochDao(_molochDao);\r\n        (,uint shares,,) = molochDao.members(address(this));\r\n        molochDao.ragequit(shares);\r\n        address approvedToken = molochDao.approvedToken();\r\n        if (_convertWeth) {\r\n            IWEth weth = IWEth(approvedToken);\r\n            weth.withdraw(weth.balanceOf(address(this)));\r\n            forward(address(0));\r\n        } else {\r\n            forward(molochDao.approvedToken());\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @notice Send funds to recovery address (escapeHatchDestination).\r\n    * The \u0060escapeHatch()\u0060 should only be called as a last resort if a\r\n    * security issue is uncovered or something unexpected happened\r\n    * @param _token Token balance to be sent to recovery vault.\r\n    *\r\n    * @dev Only the escapeHatchCaller can trigger this function\r\n    * @dev The escapeHatchCaller address must not have control over escapeHatchDestination\r\n    * @dev Function extracted from the Escapable contract (by Jordi Baylina and Adri\u00E0 Massanet)\r\n    * Instead of storing the caller, destination and owner addresses,\r\n    * it fetches them from the parent contract.\r\n    */\r\n    function escapeHatch(address _token) public {\r\n        /// @dev Serves as the original contract\u0027s onlyEscapeHatchCaller\r\n        require(msg.sender == fundsForwarderFactory.escapeHatchCaller(), ERROR_DISALLOWED);\r\n\r\n        address escapeHatchDestination = fundsForwarderFactory.escapeHatchDestination();\r\n\r\n        uint256 balance;\r\n        if (_token == 0x0) {\r\n            balance = address(this).balance;\r\n            escapeHatchDestination.transfer(balance);\r\n        } else {\r\n            ERC20 token = ERC20(_token);\r\n            balance = token.balanceOf(this);\r\n            require(token.transfer(escapeHatchDestination, balance), ERROR_TOKEN_TRANSFER);\r\n        }\r\n\r\n        emit EscapeHatchCalled(_token, balance);\r\n    }\r\n}","ABI":"[{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_token\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022forward\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_giverId\u0022,\u0022type\u0022:\u0022uint64\u0022},{\u0022name\u0022:\u0022_receiverId\u0022,\u0022type\u0022:\u0022uint64\u0022}],\u0022name\u0022:\u0022initialize\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_tokens\u0022,\u0022type\u0022:\u0022address[]\u0022}],\u0022name\u0022:\u0022forwardMultiple\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_molochDao\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_convertWeth\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022name\u0022:\u0022forwardMoloch\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022giverId\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint64\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_token\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022escapeHatch\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022fundsForwarderFactory\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022receiverId\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint64\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022constructor\u0022},{\u0022payable\u0022:true,\u0022stateMutability\u0022:\u0022payable\u0022,\u0022type\u0022:\u0022fallback\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022token\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022balance\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022Forwarded\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022token\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022EscapeHatchCalled\u0022,\u0022type\u0022:\u0022event\u0022}]","ContractName":"FundsForwarder","CompilerVersion":"v0.4.24\u002Bcommit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://a7d0ad6fc0da52fe91f72fbfecfe019ed857684e58bf9e736e1871fa0b53c2f5"}]