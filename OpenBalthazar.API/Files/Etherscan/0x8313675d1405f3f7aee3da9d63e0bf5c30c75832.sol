[{"SourceCode":"/*\r\n* ETHEREUM SMARTCONTRACT - ALTES FINANCE GROUP PTY LTD\r\n*\r\n* - Plans with daily payments! Receive from 1.5% to 2% of the amount of your deposit within 24 hours (every 86400 seconds)\r\n* - Plans with capitalization, the body of the contribution and the profit returned at the end of the term. Receive from 1.5% to 2% of the amount of your deposit, for a period of 1 month to 3\r\n* - reliable and unique project\r\n* - minimum deposit 0.6 ETH\r\n* - minimum payout 0.01 ETH\r\n* - Currency and payment - ETH\r\n* - !!! You cannot transfer from exchanges, only from your personal ETH wallet !!!\r\n* - Distribution schemes for contributions:\r\n* - 90% on payments on deposits\r\n* - 10% for advertising and contract support \u002B Operating expenses\r\n*\r\n*\r\n* You can check payments on the etherscan.io website, on the \u201CInternal Txns\u201D tab of your wallet.\r\n*\r\n*\r\n* The contract has been reviewed and approved by professionals!\r\n*\r\n* Contracts reviewed and approved by pros!\r\n*/\r\n\r\npragma solidity ^0.4.25;\r\n\r\ncontract ALTESFINANCEGROUP {\r\n\r\n    struct Investor\r\n    {\r\n        uint amount; //amount of deposit\r\n        uint dateUpdate; //date of deposit\r\n        uint dateEnd;\r\n        address refer; //address of referrer\r\n        bool active; //he has deposit\r\n        bool typePlan;\r\n    }\r\n\r\n    uint256 constant private MINIMUM_INVEST = 0.6 ether; //minimal amount for deposit\r\n    uint256 constant private MINIMUM_PAYMENT = 0.01 ether; //minimal amount for withdrawal\r\n    uint constant private PERCENT_FOR_ADMIN = 10; //fee for admin\r\n    uint constant private PERCENT_FOR_REFER = 5; //fee for refer\r\n    uint constant private PROFIT_PERIOD = 86400; //time of create profit, every 1 dey\r\n    address constant private ADMIN_ADDRESS = 0x2803Ef1dFF52D6bEDE1B2714A8Dd4EA82B8aE733; //fee for refer\r\n\r\n    mapping(address =\u003E Investor) investors; //investors list\r\n\r\n    event Transfer (address indexed _to, uint256 indexed _amount);\r\n\r\n    constructor () public {\r\n    }\r\n\r\n    /**\r\n     * This function calculated percent\r\n     */\r\n    function getPercent(Investor investor) private pure returns (uint256) {\r\n        uint256 amount = investor.amount;\r\n\r\n        if (amount \u003E= 0.60 ether \u0026\u0026 amount \u003C= 5.99 ether) {\r\n            return 150;\r\n        } else if (amount \u003E= 29 ether \u0026\u0026 amount \u003C= 58.99 ether) {\r\n            return 175;\r\n        } else if (amount \u003E= 119 ether \u0026\u0026 amount \u003C= 298.99 ether) {\r\n            return 200;\r\n        } else if (amount \u003E= 6 ether \u0026\u0026 amount \u003C= 28.99 ether) {\r\n            return 38189;\r\n        } else if (amount \u003E= 59.99 ether \u0026\u0026 amount \u003C= 118.99 ether) {\r\n            return 28318;\r\n        } else if (amount \u003E=  299.99 ether \u0026\u0026 amount \u003C= 600 ether) {\r\n            return 18113;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function getDate(Investor investor) private view returns (uint256) {\r\n        uint256 amount = investor.amount;\r\n        if (amount \u003E= 0.60 ether \u0026\u0026 amount \u003C= 5.99 ether) {\r\n            return PROFIT_PERIOD * 120 \u002B now;\r\n        } else if (amount \u003E= 29 ether \u0026\u0026 amount \u003C= 58.99 ether) {\r\n            return PROFIT_PERIOD * 150 \u002B now;\r\n        } else if (amount \u003E= 119 ether \u0026\u0026 amount \u003C= 298.99 ether) {\r\n            return PROFIT_PERIOD * 180 \u002B now;\r\n        } else if (amount \u003E= 6 ether \u0026\u0026 amount \u003C= 28.99 ether) {\r\n            return PROFIT_PERIOD * 90 \u002B now;\r\n        } else if (amount \u003E= 59.99 ether \u0026\u0026 amount \u003C= 118.99 ether) {\r\n            return PROFIT_PERIOD * 60 \u002B now;\r\n        } else if (amount \u003E=  299.99 ether \u0026\u0026 amount \u003C= 600 ether) {\r\n            return PROFIT_PERIOD * 30 \u002B now;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function getTypePlan(Investor investor) private pure returns (bool) {\r\n        uint256 amount = investor.amount;\r\n        if (amount \u003E= 0.60 ether \u0026\u0026 amount \u003C= 5.99 ether) {\r\n            return false;\r\n        } else if (amount \u003E= 29 ether \u0026\u0026 amount \u003C= 58.99 ether) {\r\n            return false;\r\n        } else if (amount \u003E= 119 ether \u0026\u0026 amount \u003C= 298.99 ether) {\r\n            return false;\r\n        } else if (amount \u003E= 6 ether \u0026\u0026 amount \u003C= 28.99 ether) {\r\n            return true;\r\n        } else if (amount \u003E= 59.99 ether \u0026\u0026 amount \u003C= 118.99 ether) {\r\n            return true;\r\n        } else if (amount \u003E=  299.99 ether \u0026\u0026 amount \u003C= 600 ether) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * This function calculated the remuneration for the administrator\r\n     */\r\n    function getFeeForAdmin(uint256 amount) private pure returns (uint256) {\r\n        return amount * PERCENT_FOR_ADMIN / 100;\r\n    }\r\n\r\n    /**\r\n     * This function calculated the remuneration for the refer\r\n     */\r\n    function getFeeForRefer(uint256 amount) private pure returns (uint256) {\r\n        return amount * PERCENT_FOR_REFER / 100;\r\n    }\r\n\r\n    /**\r\n     * This function calculated the remuneration for the administrator\r\n     */\r\n    function getRefer(bytes bys) public pure returns (address addr) {\r\n        assembly {\r\n            addr := mload(add(bys, 20))\r\n        }\r\n    }\r\n\r\n    function getProfit(Investor investor) private view returns (uint256) {\r\n        uint256 amountProfit = 0;\r\n        if (!investor.typePlan) {\r\n            if (now \u003E= investor.dateEnd) {\r\n                amountProfit = investor.amount * getPercent(investor) * (investor.dateEnd - investor.dateUpdate) / (PROFIT_PERIOD * 10000);\r\n            } else {\r\n                amountProfit = investor.amount * getPercent(investor) * (now - investor.dateUpdate) / (PROFIT_PERIOD * 10000);\r\n            }\r\n        } else {\r\n            amountProfit = investor.amount / 10000 * getPercent(investor);\r\n        }\r\n        return amountProfit;\r\n    }\r\n\r\n\r\n    /**\r\n     * Main function\r\n     */\r\n    function() external payable {\r\n        uint256 amount = msg.value;\r\n        //amount to deposit\r\n        address userAddress = msg.sender;\r\n        //address of sender\r\n        address referAddress = getRefer(msg.data);\r\n        //refer or empty\r\n\r\n        require(amount == 0 || amount \u003E= MINIMUM_INVEST, \u0022Min Amount for investing is MINIMUM_INVEST.\u0022);\r\n\r\n        //check Profit\r\n        if (amount == 0 \u0026\u0026 investors[userAddress].active) {\r\n            //profit\r\n            require(!investors[userAddress].typePlan \u0026\u0026 now \u003C= investors[userAddress].dateEnd, \u0027the Deposit is not finished\u0027);\r\n\r\n            uint256 amountProfit = getProfit(investors[userAddress]);\r\n            require(amountProfit \u003E MINIMUM_PAYMENT, \u0027amountProfit must be \u003E MINIMUM_PAYMENT\u0027);\r\n\r\n            if (now \u003E= investors[userAddress].dateEnd) {\r\n                investors[userAddress].active = false;\r\n            }\r\n\r\n            investors[userAddress].dateUpdate = now;\r\n\r\n            userAddress.transfer(amountProfit);\r\n            emit Transfer(userAddress, amountProfit);\r\n\r\n        } else if (amount \u003E= MINIMUM_INVEST \u0026\u0026 !investors[userAddress].active) {//if this deposit request\r\n            //fee admin\r\n            ADMIN_ADDRESS.transfer(getFeeForAdmin(amount));\r\n            emit Transfer(ADMIN_ADDRESS, getFeeForAdmin(amount));\r\n\r\n            investors[userAddress].active = true;\r\n            investors[userAddress].dateUpdate = now;\r\n            investors[userAddress].amount = amount;\r\n            investors[userAddress].dateEnd = getDate(investors[userAddress]);\r\n            investors[userAddress].typePlan = getTypePlan(investors[userAddress]);\r\n\r\n\r\n            //if refer exist\r\n            if (investors[referAddress].active \u0026\u0026 referAddress != address(0)) {\r\n                investors[userAddress].refer = referAddress;\r\n            }\r\n\r\n            //send refer fee\r\n            if (investors[userAddress].refer != address(0)) {\r\n                investors[userAddress].refer.transfer(getFeeForRefer(amount));\r\n                emit Transfer(investors[userAddress].refer, getFeeForRefer(amount));\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * This function show deposit\r\n     */\r\n    function showDeposit(address _deposit) public view returns (uint256) {\r\n        return investors[_deposit].amount;\r\n    }\r\n\r\n    /**\r\n     * This function show block of last change\r\n     */\r\n    function showLastChange(address _deposit) public view returns (uint256) {\r\n        return investors[_deposit].dateUpdate;\r\n    }\r\n\r\n    /**\r\n     * This function show unpayed percent of deposit\r\n     */\r\n    function showUnpayedPercent(address _deposit) public view returns (uint256) {\r\n        uint256 amount = getProfit(investors[_deposit]);\r\n        return amount;\r\n    }\r\n\r\n\r\n}","ABI":"[{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022bys\u0022,\u0022type\u0022:\u0022bytes\u0022}],\u0022name\u0022:\u0022getRefer\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022addr\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022pure\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_deposit\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022showLastChange\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_deposit\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022showUnpayedPercent\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_deposit\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022showDeposit\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022constructor\u0022},{\u0022payable\u0022:true,\u0022stateMutability\u0022:\u0022payable\u0022,\u0022type\u0022:\u0022fallback\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022_to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022_amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022Transfer\u0022,\u0022type\u0022:\u0022event\u0022}]","ContractName":"ALTESFINANCEGROUP","CompilerVersion":"v0.4.25\u002Bcommit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://5f9c88181a197b185f20523db395cdac210410c88f5bab04ab0458e735bde8d5"}]