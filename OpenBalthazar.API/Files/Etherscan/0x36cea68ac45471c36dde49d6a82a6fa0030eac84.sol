[{"SourceCode":"// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by \u0060account\u0060.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves \u0060amount\u0060 tokens from the caller\u0027s account to \u0060recipient\u0060.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that \u0060spender\u0060 will be\r\n     * allowed to spend on behalf of \u0060owner\u0060 through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets \u0060amount\u0060 as the allowance of \u0060spender\u0060 over the caller\u0027s tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves \u0060amount\u0060 tokens from \u0060sender\u0060 to \u0060recipient\u0060 using the\r\n     * allowance mechanism. \u0060amount\u0060 is then deducted from the caller\u0027s\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when \u0060value\u0060 tokens are moved from one account (\u0060from\u0060) to\r\n     * another (\u0060to\u0060).\r\n     *\r\n     * Note that \u0060value\u0060 may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a \u0060spender\u0060 for an \u0060owner\u0060 is set by\r\n     * a call to {approve}. \u0060value\u0060 is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity\u0027s arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * \u0060SafeMath\u0060 restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it\u0027s recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060\u002B\u0060 operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a \u002B b;\r\n        require(c \u003E= a, \u0022SafeMath: addition overflow\u0022);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060-\u0060 operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \u0022SafeMath: subtraction overflow\u0022);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060-\u0060 operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b \u003C= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060*\u0060 operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\r\n        // benefit is lost if \u0027b\u0027 is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \u0022SafeMath: multiplication overflow\u0022);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060/\u0060 operator. Note: this function uses a\r\n     * \u0060revert\u0060 opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \u0022SafeMath: division by zero\u0022);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060/\u0060 operator. Note: this function uses a\r\n     * \u0060revert\u0060 opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b \u003E 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c \u002B a % b); // There is no case in which this doesn\u0027t hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060%\u0060 operator. This function uses a \u0060revert\u0060\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \u0022SafeMath: modulo by zero\u0022);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060%\u0060 operator. This function uses a \u0060revert\u0060\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/DAIProxyInterface.sol\r\n\r\npragma solidity 0.5.10;\r\n\r\ninterface DAIProxyInterface {\r\n    function fund(address loanAddress, uint256 fundingAmount) external;\r\n    function repay(address loanAddress, uint256 repaymentAmount) external;\r\n}\r\n\r\n// File: contracts/LoanContractInterface.sol\r\n\r\npragma solidity 0.5.10;\r\n\r\ninterface LoanContractInterface {\r\n    function onFundingReceived(address lender, uint256 amount) external returns (bool);\r\n    function withdrawRepayment() external;\r\n    function withdrawLoan() external;\r\n    function onRepaymentReceived(address from, uint256 amount) external returns (bool);\r\n    function getInterestRate() external view returns (uint256);\r\n    function calculateValueWithInterest(uint256 value) external view returns (uint256);\r\n    function getMaxAmount() external view returns (uint256);\r\n    function getAuctionBalance() external view returns (uint256);\r\n}\r\n\r\n// File: contracts/LoanContract.sol\r\n\r\npragma solidity 0.5.10;\r\n\r\n\r\n\r\n\r\n\r\ncontract LoanContract is LoanContractInterface {\r\n    using SafeMath for uint256;\r\n    IERC20 DAIToken;\r\n    DAIProxyInterface proxy;\r\n    address public originator;\r\n    address public administrator;\r\n\r\n    uint256 public minAmount;\r\n    uint256 public maxAmount;\r\n\r\n    uint256 public auctionEndTimestamp;\r\n    uint256 public auctionStartTimestamp;\r\n    uint256 public auctionLength;\r\n\r\n    uint256 public lastFundedTimestamp;\r\n\r\n    uint256 public termEndTimestamp;\r\n    uint256 public termLength;\r\n\r\n    uint256 public auctionBalance;\r\n    uint256 public loanWithdrawnAmount;\r\n    uint256 public borrowerDebt; // Amount borrower need to repay == principal \u002B interests\r\n    uint256 public minInterestRate;\r\n    uint256 public maxInterestRate;\r\n    uint256 public operatorFee;\r\n    uint256 public operatorBalance;\r\n\r\n    bool public loanWithdrawn;\r\n    bool public minimumReached;\r\n\r\n    uint256 constant MONTH_SECONDS = 2592000;\r\n    uint256 constant ONE_HUNDRED = 100000000000000000000;\r\n\r\n    struct Position {\r\n        uint256 bidAmount;\r\n        bool withdrawn;\r\n    }\r\n\r\n    mapping(address =\u003E Position) public lenderPosition;\r\n\r\n    enum LoanState {\r\n        CREATED, // accepts bids until timelimit initial state\r\n        FAILED_TO_FUND, // not fully funded in timelimit\r\n        ACTIVE, // fully funded, inside timelimit\r\n        DEFAULTED, // not repaid in time loanRepaymentLength\r\n        REPAID, // the borrower repaid in full, lenders have yet to reclaim funds\r\n        CLOSED, // from failed_to_fund =\u003E last lender to withdraw triggers change / from repaid =\u003E fully witdrawn by lenders\r\n        FROZEN // when admin unlocks withdrawals\r\n    }\r\n\r\n    LoanState public currentState;\r\n\r\n    event LoanCreated(\r\n        address indexed contractAddr,\r\n        address indexed originator,\r\n        uint256 minAmount,\r\n        uint256 maxAmount,\r\n        uint256 minInterestRate,\r\n        uint256 maxInterestRate,\r\n        uint256 auctionStartTimestamp,\r\n        uint256 auctionEndTimestamp,\r\n        address indexed administrator,\r\n        uint256 operatorFee\r\n    );\r\n\r\n    event MinimumFundingReached(address loanAddress, uint256 currentBalance, uint256 interest);\r\n    event FullyFunded(\r\n        address loanAddress,\r\n        uint256 balanceToRepay,\r\n        uint256 auctionBalance,\r\n        uint256 interest,\r\n        uint256 fundedTimestamp\r\n    );\r\n    event Funded(\r\n        address loanAddress,\r\n        address indexed lender,\r\n        uint256 amount,\r\n        uint256 interest,\r\n        uint256 fundedTimestamp\r\n    );\r\n    event LoanRepaid(address loanAddress, uint256 indexed timestampRepaid);\r\n    event RepaymentWithdrawn(address loanAddress, address indexed to, uint256 amount);\r\n    event RefundWithdrawn(address loanAddress, address indexed lender, uint256 amount);\r\n    event FullyRefunded(address loanAddress);\r\n    event FailedToFund(address loanAddress, address indexed lender, uint256 amount);\r\n    event LoanFundsWithdrawn(address loanAddress, address indexed borrower, uint256 amount);\r\n    event LoanDefaulted(address loanAddress);\r\n    event AuctionSuccessful(\r\n        address loanAddress,\r\n        uint256 balanceToRepay,\r\n        uint256 auctionBalance,\r\n        uint256 operatorBalance,\r\n        uint256 interest,\r\n        uint256 fundedTimestamp\r\n    );\r\n    event FundsUnlockedWithdrawn(address loanAddress, address indexed lender, uint256 amount);\r\n    event FullyFundsUnlockedWithdrawn(address loanAddress);\r\n    event LoanFundsUnlocked(uint256 auctionBalance);\r\n    event OperatorWithdrawn(uint256 amount, address administrator);\r\n\r\n    modifier onlyFrozen() {\r\n        require(currentState == LoanState.FROZEN, \u0022Loan status is not FROZEN\u0022);\r\n        _;\r\n    }\r\n\r\n    modifier onlyAdmin() {\r\n        require(msg.sender == administrator, \u0022Caller is not an administrator\u0022);\r\n        _;\r\n    }\r\n\r\n    modifier onlyCreated() {\r\n        require(currentState == LoanState.CREATED, \u0022Loan status is not CREATED\u0022);\r\n        _;\r\n    }\r\n\r\n    modifier onlyActive() {\r\n        updateStateMachine();\r\n        require(currentState == LoanState.ACTIVE, \u0022Loan status is not ACTIVE\u0022);\r\n        _;\r\n    }\r\n\r\n    modifier onlyRepaid() {\r\n        updateStateMachine();\r\n        require(currentState == LoanState.REPAID, \u0022Loan status is not REPAID\u0022);\r\n        _;\r\n    }\r\n\r\n    modifier onlyFailedToFund() {\r\n        updateStateMachine();\r\n        require(currentState == LoanState.FAILED_TO_FUND, \u0022Loan status is not FAILED_TO_FUND\u0022);\r\n        _;\r\n    }\r\n\r\n    modifier onlyProxy() {\r\n        require(msg.sender == address(proxy), \u0022Caller is not the proxy\u0022);\r\n        _;\r\n    }\r\n\r\n    modifier onlyOriginator() {\r\n        require(msg.sender == originator, \u0022Caller is not the originator\u0022);\r\n        _;\r\n    }\r\n\r\n    constructor(\r\n        uint256 _termLength,\r\n        uint256 _minAmount,\r\n        uint256 _maxAmount,\r\n        uint256 _minInterestRate,\r\n        uint256 _maxInterestRate,\r\n        address _originator,\r\n        address DAITokenAddress,\r\n        address proxyAddress,\r\n        address _administrator,\r\n        uint256 _operatorFee,\r\n        uint256 _auctionLength\r\n    ) public {\r\n        DAIToken = IERC20(DAITokenAddress);\r\n        proxy = DAIProxyInterface(proxyAddress);\r\n        originator = _originator;\r\n        administrator = _administrator;\r\n\r\n        minInterestRate = _minInterestRate;\r\n        maxInterestRate = _maxInterestRate;\r\n        minAmount = _minAmount;\r\n        maxAmount = _maxAmount;\r\n\r\n        auctionLength = _auctionLength;\r\n        auctionStartTimestamp = block.timestamp;\r\n        auctionEndTimestamp = auctionStartTimestamp \u002B auctionLength;\r\n\r\n        termLength = _termLength;\r\n\r\n        loanWithdrawnAmount = 0;\r\n\r\n        operatorFee = _operatorFee;\r\n\r\n        setState(LoanState.CREATED);\r\n        emit LoanCreated(\r\n            address(this),\r\n            originator,\r\n            minAmount,\r\n            maxAmount,\r\n            minInterestRate,\r\n            maxInterestRate,\r\n            auctionStartTimestamp,\r\n            auctionEndTimestamp,\r\n            administrator,\r\n            operatorFee\r\n        );\r\n    }\r\n\r\n    function getMaxAmount() external view returns (uint256) {\r\n        return maxAmount;\r\n    }\r\n\r\n    function getAuctionBalance() external view returns (uint256) {\r\n        return auctionBalance;\r\n    }\r\n\r\n    function getLenderBidAmount(address lender) external view returns (uint256) {\r\n        return lenderPosition[lender].bidAmount;\r\n    }\r\n\r\n    function getLenderWithdrawn(address lender) external view returns (bool) {\r\n        return lenderPosition[lender].withdrawn;\r\n    }\r\n\r\n    // Notes:\r\n    // - This function does not track if real IERC20 balance has changed. Needs to blindly \u0022trust\u0022 DaiProxy.\r\n    function onFundingReceived(address lender, uint256 amount)\r\n        external\r\n        onlyCreated\r\n        onlyProxy\r\n        returns (bool)\r\n    {\r\n        if (isAuctionExpired()) {\r\n            if (auctionBalance \u003C minAmount) {\r\n                setState(LoanState.FAILED_TO_FUND);\r\n                emit FailedToFund(address(this), lender, amount);\r\n                return false;\r\n            } else {\r\n                require(setSuccessfulAuction(), \u0022error while transitioning to successful auction\u0022);\r\n                emit FailedToFund(address(this), lender, amount);\r\n                return false;\r\n            }\r\n        }\r\n        uint256 interest = getInterestRate();\r\n        lenderPosition[lender].bidAmount = lenderPosition[lender].bidAmount.add(amount);\r\n        auctionBalance = auctionBalance.add(amount);\r\n\r\n        lastFundedTimestamp = block.timestamp;\r\n\r\n        if (auctionBalance \u003E= minAmount \u0026\u0026 !minimumReached) {\r\n            minimumReached = true;\r\n            emit Funded(address(this), lender, amount, interest, lastFundedTimestamp);\r\n            emit MinimumFundingReached(address(this), auctionBalance, interest);\r\n        } else {\r\n            emit Funded(address(this), lender, amount, interest, lastFundedTimestamp);\r\n        }\r\n\r\n        if (auctionBalance == maxAmount) {\r\n            require(setSuccessfulAuction(), \u0022error while transitioning to successful auction\u0022);\r\n            emit FullyFunded(\r\n                address(this),\r\n                borrowerDebt,\r\n                auctionBalance,\r\n                interest,\r\n                lastFundedTimestamp\r\n            );\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function unlockFundsWithdrawal() external onlyAdmin {\r\n        setState(LoanState.FROZEN);\r\n        emit LoanFundsUnlocked(auctionBalance);\r\n    }\r\n\r\n    function withdrawFees() external onlyAdmin returns (bool) {\r\n        require(loanWithdrawn == true, \u0022borrower didnt withdraw\u0022);\r\n        require(operatorBalance \u003E 0, \u0022no funds to withdraw\u0022);\r\n        uint256 allFees = operatorBalance;\r\n        operatorBalance = 0;\r\n        require(DAIToken.transfer(msg.sender, allFees), \u0022transfer failed\u0022);\r\n        emit OperatorWithdrawn(allFees, msg.sender);\r\n        return true;\r\n    }\r\n\r\n    function withdrawFundsUnlocked() external onlyFrozen {\r\n        require(!loanWithdrawn, \u0022Loan already withdrawn\u0022);\r\n        require(!lenderPosition[msg.sender].withdrawn, \u0022Lender already withdrawn\u0022);\r\n        require(lenderPosition[msg.sender].bidAmount \u003E 0, \u0022Account did not deposit\u0022);\r\n\r\n        lenderPosition[msg.sender].withdrawn = true;\r\n\r\n        loanWithdrawnAmount = loanWithdrawnAmount.add(lenderPosition[msg.sender].bidAmount);\r\n\r\n        require(\r\n            DAIToken.transfer(msg.sender, lenderPosition[msg.sender].bidAmount),\r\n            \u0022error while transfer\u0022\r\n        );\r\n\r\n        emit FundsUnlockedWithdrawn(\r\n            address(this),\r\n            msg.sender,\r\n            lenderPosition[msg.sender].bidAmount\r\n        );\r\n\r\n        if (loanWithdrawnAmount == auctionBalance.add(operatorBalance)) {\r\n            setState(LoanState.CLOSED);\r\n            emit FullyFundsUnlockedWithdrawn(address(this));\r\n        }\r\n    }\r\n\r\n    function withdrawRefund() external onlyFailedToFund {\r\n        require(!lenderPosition[msg.sender].withdrawn, \u0022Lender already withdrawn\u0022);\r\n        require(lenderPosition[msg.sender].bidAmount \u003E 0, \u0022Account did not deposited.\u0022);\r\n\r\n        lenderPosition[msg.sender].withdrawn = true;\r\n\r\n        loanWithdrawnAmount = loanWithdrawnAmount.add(lenderPosition[msg.sender].bidAmount);\r\n\r\n        emit RefundWithdrawn(address(this), msg.sender, lenderPosition[msg.sender].bidAmount);\r\n\r\n        require(\r\n            DAIToken.transfer(msg.sender, lenderPosition[msg.sender].bidAmount),\r\n            \u0022error while transfer\u0022\r\n        );\r\n\r\n        if (loanWithdrawnAmount == auctionBalance) {\r\n            setState(LoanState.CLOSED);\r\n            emit FullyRefunded(address(this));\r\n        }\r\n    }\r\n\r\n    function withdrawRepayment() external onlyRepaid {\r\n        require(!lenderPosition[msg.sender].withdrawn, \u0022Lender already withdrawn\u0022);\r\n        require(lenderPosition[msg.sender].bidAmount != 0, \u0022Account did not deposited\u0022);\r\n        uint256 amount = calculateValueWithInterest(lenderPosition[msg.sender].bidAmount);\r\n        lenderPosition[msg.sender].withdrawn = true;\r\n        emit RepaymentWithdrawn(address(this), msg.sender, amount);\r\n\r\n        loanWithdrawnAmount = loanWithdrawnAmount.add(amount);\r\n        require(DAIToken.transfer(msg.sender, amount), \u0022error while transfer\u0022);\r\n\r\n        if (loanWithdrawnAmount == borrowerDebt) {\r\n            setState(LoanState.CLOSED);\r\n            emit FullyRefunded(address(this));\r\n        }\r\n    }\r\n\r\n    function withdrawLoan() external onlyActive onlyOriginator {\r\n        require(!loanWithdrawn, \u0022Already withdrawn\u0022);\r\n        loanWithdrawn = true;\r\n        emit LoanFundsWithdrawn(address(this), msg.sender, auctionBalance);\r\n        require(DAIToken.transfer(msg.sender, auctionBalance), \u0022error while transfer\u0022);\r\n    }\r\n\r\n    function onRepaymentReceived(address from, uint256 amount)\r\n        external\r\n        onlyActive\r\n        onlyProxy\r\n        returns (bool)\r\n    {\r\n        require(from == originator, \u0022from address is not the originator\u0022);\r\n        require(borrowerDebt == amount, \u0022Repayment amount is not the same\u0022);\r\n\r\n        setState(LoanState.REPAID);\r\n        emit LoanRepaid(address(this), block.timestamp);\r\n        return true;\r\n    }\r\n\r\n    function isAuctionExpired() public view returns (bool) {\r\n        return block.timestamp \u003E auctionEndTimestamp;\r\n    }\r\n\r\n    function isDefaulted() public view returns (bool) {\r\n        if (block.timestamp \u003C= auctionEndTimestamp || block.timestamp \u003C= termEndTimestamp) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function updateStateMachine() public returns (LoanState) {\r\n        if (isAuctionExpired() \u0026\u0026 currentState == LoanState.CREATED) {\r\n            if (!minimumReached) {\r\n                setState(LoanState.FAILED_TO_FUND);\r\n            } else {\r\n                require(setSuccessfulAuction(), \u0022error while transitioning to successful auction\u0022);\r\n            }\r\n        }\r\n        if (isDefaulted() \u0026\u0026 currentState == LoanState.ACTIVE) {\r\n            setState(LoanState.DEFAULTED);\r\n            emit LoanDefaulted(address(this));\r\n        }\r\n\r\n        return currentState;\r\n    }\r\n\r\n    function calculateValueWithInterest(uint256 value) public view returns (uint256) {\r\n        return\r\n            value.add(\r\n                value.mul(getInterestRate().mul(termLength).div(MONTH_SECONDS)).div(ONE_HUNDRED)\r\n            );\r\n    }\r\n\r\n    function getInterestRate() public view returns (uint256) {\r\n        if (currentState == LoanState.CREATED) {\r\n            return\r\n                (maxInterestRate.sub(minInterestRate))\r\n                    .mul(block.timestamp.sub(auctionStartTimestamp))\r\n                    .div(auctionEndTimestamp.sub(auctionStartTimestamp))\r\n                    .add(minInterestRate);\r\n        } else if (currentState == LoanState.ACTIVE || currentState == LoanState.REPAID) {\r\n            return\r\n                (maxInterestRate.sub(minInterestRate))\r\n                    .mul(lastFundedTimestamp.sub(auctionStartTimestamp))\r\n                    .div(auctionEndTimestamp.sub(auctionStartTimestamp))\r\n                    .add(minInterestRate);\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    function setState(LoanState state) internal {\r\n        currentState = state;\r\n    }\r\n\r\n    function setSuccessfulAuction() internal onlyCreated returns (bool) {\r\n        setState(LoanState.ACTIVE);\r\n        borrowerDebt = calculateValueWithInterest(auctionBalance);\r\n        operatorBalance = auctionBalance.mul(operatorFee).div(ONE_HUNDRED);\r\n        auctionBalance = auctionBalance - operatorBalance;\r\n\r\n        if (block.timestamp \u003C auctionEndTimestamp) {\r\n            termEndTimestamp = block.timestamp.add(termLength);\r\n        } else {\r\n            termEndTimestamp = auctionEndTimestamp.add(termLength);\r\n        }\r\n\r\n        emit AuctionSuccessful(\r\n            address(this),\r\n            borrowerDebt,\r\n            auctionBalance,\r\n            operatorBalance,\r\n            getInterestRate(),\r\n            lastFundedTimestamp\r\n        );\r\n        return true;\r\n    }\r\n}","ABI":"[{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022calculateValueWithInterest\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022getMaxAmount\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022currentState\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint8\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022withdrawRefund\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022lastFundedTimestamp\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022getAuctionBalance\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022auctionLength\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022lender\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022getLenderBidAmount\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022updateStateMachine\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint8\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022auctionEndTimestamp\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022originator\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022lenderPosition\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022bidAmount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022withdrawn\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022withdrawFees\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022getInterestRate\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022maxAmount\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022lender\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022getLenderWithdrawn\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022from\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022onRepaymentReceived\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022unlockFundsWithdrawal\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022loanWithdrawn\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022withdrawRepayment\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022withdrawFundsUnlocked\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022termLength\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022isAuctionExpired\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022operatorFee\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022minAmount\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022loanWithdrawnAmount\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022isDefaulted\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022termEndTimestamp\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022maxInterestRate\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022auctionBalance\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022withdrawLoan\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022auctionStartTimestamp\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022lender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022onFundingReceived\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022minimumReached\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022borrowerDebt\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022minInterestRate\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022administrator\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022operatorBalance\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[{\u0022name\u0022:\u0022_termLength\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_minAmount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_maxAmount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_minInterestRate\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_maxInterestRate\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_originator\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022DAITokenAddress\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022proxyAddress\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_administrator\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_operatorFee\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_auctionLength\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022constructor\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022contractAddr\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022originator\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022minAmount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022maxAmount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022minInterestRate\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022maxInterestRate\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022auctionStartTimestamp\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022auctionEndTimestamp\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022administrator\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022operatorFee\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022LoanCreated\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022loanAddress\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022currentBalance\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022interest\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022MinimumFundingReached\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022loanAddress\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022balanceToRepay\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022auctionBalance\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022interest\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022fundedTimestamp\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022FullyFunded\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022loanAddress\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022lender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022interest\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022fundedTimestamp\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022Funded\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022loanAddress\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022timestampRepaid\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022LoanRepaid\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022loanAddress\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022RepaymentWithdrawn\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022loanAddress\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022lender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022RefundWithdrawn\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022loanAddress\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022FullyRefunded\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022loanAddress\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022lender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022FailedToFund\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022loanAddress\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022borrower\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022LoanFundsWithdrawn\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022loanAddress\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022LoanDefaulted\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022loanAddress\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022balanceToRepay\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022auctionBalance\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022operatorBalance\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022interest\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022fundedTimestamp\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022AuctionSuccessful\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022loanAddress\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022lender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022FundsUnlockedWithdrawn\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022loanAddress\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022FullyFundsUnlockedWithdrawn\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022auctionBalance\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022LoanFundsUnlocked\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022administrator\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022OperatorWithdrawn\u0022,\u0022type\u0022:\u0022event\u0022}]","ContractName":"LoanContract","CompilerVersion":"v0.5.10\u002Bcommit.5a6ea5b1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000076a70000000000000000000000000000000000000000000000002086ac35105260000000000000000000000000000000000000000000000000006c6b935b8bbd400000000000000000000000000000000000000000000000000000094079cd1a42aa6800000000000000000000000000000000000000000000000010c4dcc3bf98d534000000000000000000000000ed9b65514409014aa06ebf4199aaba71af8faea30000000000000000000000006b175474e89094c44da98b954eedeac495271d0f0000000000000000000000000ba69167179e6c8a465bea23d1525202fb24035b000000000000000000000000ed9b65514409014aa06ebf4199aaba71af8faea30000000000000000000000000000000000000000000000000de0b6b3a7640000000000000000000000000000000000000000000000000000000000000013c680","Library":"","SwarmSource":"bzzr://95a3f983af20acb6730d798e8519454d71778425951b4aaa1767335b7dc046f3"}]