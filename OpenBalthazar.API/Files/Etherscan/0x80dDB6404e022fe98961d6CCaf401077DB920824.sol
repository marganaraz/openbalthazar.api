[{"SourceCode":"pragma solidity 0.5.16;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see \u0060ERC20Detailed\u0060.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by \u0060account\u0060.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves \u0060amount\u0060 tokens from the caller\u0027s account to \u0060recipient\u0060.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a \u0060Transfer\u0060 event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that \u0060spender\u0060 will be\r\n     * allowed to spend on behalf of \u0060owner\u0060 through \u0060transferFrom\u0060. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when \u0060approve\u0060 or \u0060transferFrom\u0060 are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets \u0060amount\u0060 as the allowance of \u0060spender\u0060 over the caller\u0027s tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * \u003E Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an \u0060Approval\u0060 event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves \u0060amount\u0060 tokens from \u0060sender\u0060 to \u0060recipient\u0060 using the\r\n     * allowance mechanism. \u0060amount\u0060 is then deducted from the caller\u0027s\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a \u0060Transfer\u0060 event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when \u0060value\u0060 tokens are moved from one account (\u0060from\u0060) to\r\n     * another (\u0060to\u0060).\r\n     *\r\n     * Note that \u0060value\u0060 may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a \u0060spender\u0060 for an \u0060owner\u0060 is set by\r\n     * a call to \u0060approve\u0060. \u0060value\u0060 is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @dev Implementation of the \u0060IERC20\u0060 interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using \u0060_mint\u0060.\r\n * For a generic mechanism see \u0060ERC20Mintable\u0060.\r\n *\r\n * *For a detailed writeup see our guide [How to implement supply\r\n * mechanisms](https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226).*\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning \u0060false\u0060 on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an \u0060Approval\u0060 event is emitted on calls to \u0060transferFrom\u0060.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn\u0027t required by the specification.\r\n *\r\n * Finally, the non-standard \u0060decreaseAllowance\u0060 and \u0060increaseAllowance\u0060\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See \u0060IERC20.approve\u0060.\r\n */\r\ncontract ERC20 is IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address =\u003E uint256) private _balances;\r\n\r\n    mapping (address =\u003E mapping (address =\u003E uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    /**\r\n     * @dev See \u0060IERC20.totalSupply\u0060.\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See \u0060IERC20.balanceOf\u0060.\r\n     */\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See \u0060IERC20.transfer\u0060.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - \u0060recipient\u0060 cannot be the zero address.\r\n     * - the caller must have a balance of at least \u0060amount\u0060.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See \u0060IERC20.allowance\u0060.\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See \u0060IERC20.approve\u0060.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - \u0060spender\u0060 cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        _approve(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See \u0060IERC20.transferFrom\u0060.\r\n     *\r\n     * Emits an \u0060Approval\u0060 event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of \u0060ERC20\u0060;\r\n     *\r\n     * Requirements:\r\n     * - \u0060sender\u0060 and \u0060recipient\u0060 cannot be the zero address.\r\n     * - \u0060sender\u0060 must have a balance of at least \u0060value\u0060.\r\n     * - the caller must have allowance for \u0060sender\u0060\u0027s tokens of at least\r\n     * \u0060amount\u0060.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to \u0060spender\u0060 by the caller.\r\n     *\r\n     * This is an alternative to \u0060approve\u0060 that can be used as a mitigation for\r\n     * problems described in \u0060IERC20.approve\u0060.\r\n     *\r\n     * Emits an \u0060Approval\u0060 event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - \u0060spender\u0060 cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to \u0060spender\u0060 by the caller.\r\n     *\r\n     * This is an alternative to \u0060approve\u0060 that can be used as a mitigation for\r\n     * problems described in \u0060IERC20.approve\u0060.\r\n     *\r\n     * Emits an \u0060Approval\u0060 event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - \u0060spender\u0060 cannot be the zero address.\r\n     * - \u0060spender\u0060 must have allowance for the caller of at least\r\n     * \u0060subtractedValue\u0060.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens \u0060amount\u0060 from \u0060sender\u0060 to \u0060recipient\u0060.\r\n     *\r\n     * This is internal function is equivalent to \u0060transfer\u0060, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a \u0060Transfer\u0060 event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - \u0060sender\u0060 cannot be the zero address.\r\n     * - \u0060recipient\u0060 cannot be the zero address.\r\n     * - \u0060sender\u0060 must have a balance of at least \u0060amount\u0060.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \u0022ERC20: transfer from the zero address\u0022);\r\n        require(recipient != address(0), \u0022ERC20: transfer to the zero address\u0022);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount);\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates \u0060amount\u0060 tokens and assigns them to \u0060account\u0060, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a \u0060Transfer\u0060 event with \u0060from\u0060 set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - \u0060to\u0060 cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \u0022ERC20: mint to the zero address\u0022);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n     /**\r\n     * @dev Destoys \u0060amount\u0060 tokens from \u0060account\u0060, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a \u0060Transfer\u0060 event with \u0060to\u0060 set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - \u0060account\u0060 cannot be the zero address.\r\n     * - \u0060account\u0060 must have at least \u0060amount\u0060 tokens.\r\n     */\r\n    function _burn(address account, uint256 value) internal {\r\n        require(account != address(0), \u0022ERC20: burn from the zero address\u0022);\r\n\r\n        _totalSupply = _totalSupply.sub(value);\r\n        _balances[account] = _balances[account].sub(value);\r\n        emit Transfer(account, address(0), value);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets \u0060amount\u0060 as the allowance of \u0060spender\u0060 over the \u0060owner\u0060s tokens.\r\n     *\r\n     * This is internal function is equivalent to \u0060approve\u0060, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an \u0060Approval\u0060 event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - \u0060owner\u0060 cannot be the zero address.\r\n     * - \u0060spender\u0060 cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 value) internal {\r\n        require(owner != address(0), \u0022ERC20: approve from the zero address\u0022);\r\n        require(spender != address(0), \u0022ERC20: approve to the zero address\u0022);\r\n\r\n        _allowances[owner][spender] = value;\r\n        emit Approval(owner, spender, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Destoys \u0060amount\u0060 tokens from \u0060account\u0060.\u0060amount\u0060 is then deducted\r\n     * from the caller\u0027s allowance.\r\n     *\r\n     * See \u0060_burn\u0060 and \u0060_approve\u0060.\r\n     */\r\n    function _burnFrom(address account, uint256 amount) internal {\r\n        _burn(account, amount);\r\n        _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount));\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity\u0027s arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * \u0060SafeMath\u0060 restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it\u0027s recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060\u002B\u0060 operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a \u002B b;\r\n        require(c \u003E= a, \u0022SafeMath: addition overflow\u0022);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060-\u0060 operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b \u003C= a, \u0022SafeMath: subtraction overflow\u0022);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060*\u0060 operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\r\n        // benefit is lost if \u0027b\u0027 is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \u0022SafeMath: multiplication overflow\u0022);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060/\u0060 operator. Note: this function uses a\r\n     * \u0060revert\u0060 opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b \u003E 0, \u0022SafeMath: division by zero\u0022);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c \u002B a % b); // There is no case in which this doesn\u0027t hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060%\u0060 operator. This function uses a \u0060revert\u0060\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \u0022SafeMath: modulo by zero\u0022);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ninterface IBorrower {\r\n    function executeOnFlashMint(uint256 amount) external;\r\n}\r\n\r\n/// @title FlashToken\r\n/// @author Stephane Gosselin (@thegostep), Austin Williams (@Austin-Williams)\r\n/// @notice Anyone can be rich... for an instant.\r\ncontract FlashToken is ERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    ERC20 internal _baseToken;\r\n    address private _factory;\r\n\r\n    /////////////////////////////\r\n    // Template Initialization //\r\n    /////////////////////////////\r\n\r\n    /// @notice Modifier which only allows to be \u0060DELEGATECALL\u0060ed from within a constructor on initialization of the contract.\r\n    modifier initializeTemplate() {\r\n        // set factory\r\n        _factory = msg.sender;\r\n\r\n        // only allow function to be \u0060DELEGATECALL\u0060ed from within a constructor.\r\n        uint32 codeSize;\r\n        assembly {\r\n            codeSize := extcodesize(address)\r\n        }\r\n        require(codeSize == 0, \u0022must be called within contract constructor\u0022);\r\n        _;\r\n    }\r\n\r\n    /// @notice Initialize the instance with the base token\r\n    function initialize(address baseToken) public initializeTemplate() {\r\n        _baseToken = ERC20(baseToken);\r\n    }\r\n\r\n    /// @notice Get the address of the factory for this clone.\r\n    /// @return factory address of the factory.\r\n    function getFactory() public view returns (address factory) {\r\n        return _factory;\r\n    }\r\n\r\n    /// @notice Get the address of the base token for this clone.\r\n    /// @return factory address of the base token.\r\n    function getBaseToken() public view returns (address baseToken) {\r\n        return address(_baseToken);\r\n    }\r\n\r\n    //////////////\r\n    // flashing //\r\n    //////////////\r\n\r\n    /// @notice Modifier which allows anyone to mint flash tokens.\r\n    /// @notice An arbitrary number of flash tokens are minted for a single transaction.\r\n    /// @notice Reverts if insuficient tokens are returned.\r\n    modifier flashMint(uint256 amount) {\r\n        // mint tokens and give to borrower\r\n        _mint(msg.sender, amount); // reverts if \u0060amount\u0060 makes \u0060_totalSupply\u0060 overflow\r\n\r\n        // execute flash fuckening\r\n        _;\r\n\r\n        // burn tokens\r\n        _burn(msg.sender, amount); // reverts if \u0060msg.sender\u0060 does not have enough units of the FMT\r\n\r\n        // sanity check (not strictly needed)\r\n        require(\r\n            _baseToken.balanceOf(address(this)) \u003E= totalSupply(),\r\n            \u0022redeemability was broken\u0022\r\n        );\r\n    }\r\n\r\n    /// @notice Deposit baseToken\r\n    function deposit(uint256 amount) public {\r\n        require(\r\n            _baseToken.transferFrom(msg.sender, address(this), amount),\r\n            \u0022transfer in failed\u0022\r\n        );\r\n        _mint(msg.sender, amount);\r\n    }\r\n\r\n    /// @notice Withdraw baseToken\r\n    function withdraw(uint256 amount) public {\r\n        _burn(msg.sender, amount); // reverts if \u0060msg.sender\u0060 does not have enough CT-baseToken\r\n        require(_baseToken.transfer(msg.sender, amount), \u0022transfer out failed\u0022);\r\n    }\r\n\r\n    /// @notice Executes flash mint and calls strandard interface for transaction execution\r\n    function softFlashFuck(uint256 amount) public flashMint(amount) {\r\n        // hand control to borrower\r\n        IBorrower(msg.sender).executeOnFlashMint(amount);\r\n    }\r\n\r\n    /// @notice Executes flash mint and calls arbitrary interface for transaction execution\r\n    function hardFlashFuck(\r\n        address target,\r\n        bytes memory targetCalldata,\r\n        uint256 amount\r\n    ) public flashMint(amount) {\r\n        (bool success, ) = target.call(targetCalldata);\r\n        require(success, \u0022external call failed\u0022);\r\n    }\r\n}\r\n\r\n/// @title Spawn\r\n/// @author 0age (@0age) for Numerai Inc\r\n/// @dev Security contact: security@numer.ai\r\n/// @dev Version: 1.2.0\r\n/// @notice This contract provides creation code that is used by Spawner in order\r\n/// to initialize and deploy eip-1167 minimal proxies for a given logic contract.\r\ncontract Spawn {\r\n  constructor(\r\n    address logicContract,\r\n    bytes memory initializationCalldata\r\n  ) public payable {\r\n    // delegatecall into the logic contract to perform initialization.\r\n    (bool ok, ) = logicContract.delegatecall(initializationCalldata);\r\n    if (!ok) {\r\n      // pass along failure message from delegatecall and revert.\r\n      assembly {\r\n        returndatacopy(0, 0, returndatasize)\r\n        revert(0, returndatasize)\r\n      }\r\n    }\r\n\r\n    // place eip-1167 runtime code in memory.\r\n    bytes memory runtimeCode = abi.encodePacked(\r\n      bytes10(0x363d3d373d3d3d363d73),\r\n      logicContract,\r\n      bytes15(0x5af43d82803e903d91602b57fd5bf3)\r\n    );\r\n\r\n    // return eip-1167 code to write it to spawned contract runtime.\r\n    assembly {\r\n      return(add(0x20, runtimeCode), 45) // eip-1167 runtime code, length\r\n    }\r\n  }\r\n}\r\n\r\n/// @title Spawner\r\n/// @author 0age (@0age) and Stephane Gosselin (@thegostep) for Numerai Inc\r\n/// @dev Security contact: security@numer.ai\r\n/// @dev Version: 1.2.0\r\n/// @notice This contract spawns and initializes eip-1167 minimal proxies that\r\n/// point to existing logic contracts. The logic contracts need to have an\r\n/// initializer function that should only callable when no contract exists at\r\n/// their current address (i.e. it is being \u0060DELEGATECALL\u0060ed from a constructor).\r\ncontract Spawner {\r\n  \r\n  /// @notice Internal function for spawning an eip-1167 minimal proxy using \u0060CREATE2\u0060.\r\n  /// @param creator address The address of the account creating the proxy.\r\n  /// @param logicContract address The address of the logic contract.\r\n  /// @param initializationCalldata bytes The calldata that will be supplied to\r\n  /// the \u0060DELEGATECALL\u0060 from the spawned contract to the logic contract during\r\n  /// contract creation.\r\n  /// @return The address of the newly-spawned contract.\r\n  function _spawn(\r\n    address creator,\r\n    address logicContract,\r\n    bytes memory initializationCalldata\r\n  ) internal returns (address spawnedContract) {\r\n\r\n    // get instance code and hash\r\n\r\n    bytes memory initCode;\r\n    bytes32 initCodeHash;\r\n    (initCode, initCodeHash) = _getInitCodeAndHash(logicContract, initializationCalldata);\r\n\r\n    // get valid create2 target\r\n\r\n    (address target, bytes32 safeSalt) = _getNextNonceTargetWithInitCodeHash(creator, initCodeHash);\r\n\r\n    // spawn create2 instance and validate\r\n\r\n    return _executeSpawnCreate2(initCode, safeSalt, target);\r\n  }\r\n\r\n  /// @notice Internal function for spawning an eip-1167 minimal proxy using \u0060CREATE2\u0060.\r\n  /// @param creator address The address of the account creating the proxy.\r\n  /// @param logicContract address The address of the logic contract.\r\n  /// @param initializationCalldata bytes The calldata that will be supplied to\r\n  /// the \u0060DELEGATECALL\u0060 from the spawned contract to the logic contract during\r\n  /// contract creation.\r\n  /// @param salt bytes32 A user defined salt.\r\n  /// @return The address of the newly-spawned contract.\r\n  function _spawnSalty(\r\n    address creator,\r\n    address logicContract,\r\n    bytes memory initializationCalldata,\r\n    bytes32 salt\r\n  ) internal returns (address spawnedContract) {\r\n\r\n    // get instance code and hash\r\n\r\n    bytes memory initCode;\r\n    bytes32 initCodeHash;\r\n    (initCode, initCodeHash) = _getInitCodeAndHash(logicContract, initializationCalldata);\r\n\r\n    // get valid create2 target\r\n\r\n    (address target, bytes32 safeSalt, bool validity) = _getSaltyTargetWithInitCodeHash(creator, initCodeHash, salt);\r\n    require(validity, \u0022contract already deployed with supplied salt\u0022);\r\n\r\n    // spawn create2 instance and validate\r\n\r\n    return _executeSpawnCreate2(initCode, safeSalt, target);\r\n  }\r\n\r\n  /// @notice Private function for spawning an eip-1167 minimal proxy using \u0060CREATE2\u0060.\r\n  /// Reverts with appropriate error string if deployment is unsuccessful.\r\n  /// @param initCode bytes The spawner code and initialization calldata.\r\n  /// @param safeSalt bytes32 A valid salt hashed with creator address.\r\n  /// @param target address The expected address of the proxy.\r\n  /// @return The address of the newly-spawned contract.\r\n  function _executeSpawnCreate2(bytes memory initCode, bytes32 safeSalt, address target) private returns (address spawnedContract) {\r\n    assembly {\r\n      let encoded_data := add(0x20, initCode) // load initialization code.\r\n      let encoded_size := mload(initCode)     // load the init code\u0027s length.\r\n      spawnedContract := create2(             // call \u0060CREATE2\u0060 w/ 4 arguments.\r\n        callvalue,                            // forward any supplied endowment.\r\n        encoded_data,                         // pass in initialization code.\r\n        encoded_size,                         // pass in init code\u0027s length.\r\n        safeSalt                              // pass in the salt value.\r\n      )\r\n\r\n      // pass along failure message from failed contract deployment and revert.\r\n      if iszero(spawnedContract) {\r\n        returndatacopy(0, 0, returndatasize)\r\n        revert(0, returndatasize)\r\n      }\r\n    }\r\n\r\n    // validate spawned instance matches target\r\n    require(spawnedContract == target, \u0022attempted deployment to unexpected address\u0022);\r\n\r\n    // explicit return\r\n    return spawnedContract;\r\n  }\r\n\r\n  /// @notice Internal view function for finding the expected address of the standard\r\n  /// eip-1167 minimal proxy created using \u0060CREATE2\u0060 with a given logic contract,\r\n  /// salt, and initialization calldata payload.\r\n  /// @param creator address The address of the account creating the proxy.\r\n  /// @param logicContract address The address of the logic contract.\r\n  /// @param initializationCalldata bytes The calldata that will be supplied to\r\n  /// the \u0060DELEGATECALL\u0060 from the spawned contract to the logic contract during\r\n  /// contract creation.\r\n  /// @param salt bytes32 A user defined salt.\r\n  /// @return target address The address of the newly-spawned contract.\r\n  /// @return validity bool True if the \u0060target\u0060 is available.\r\n  function _getSaltyTarget(\r\n    address creator,\r\n    address logicContract,\r\n    bytes memory initializationCalldata,\r\n    bytes32 salt\r\n  ) internal view returns (address target, bool validity) {\r\n\r\n    // get initialization code\r\n\r\n    bytes32 initCodeHash;\r\n    ( , initCodeHash) = _getInitCodeAndHash(logicContract, initializationCalldata);\r\n\r\n    // get valid target\r\n\r\n    (target, , validity) = _getSaltyTargetWithInitCodeHash(creator, initCodeHash, salt);\r\n\r\n    // explicit return\r\n    return (target, validity);\r\n  }\r\n\r\n  /// @notice Internal view function for finding the expected address of the standard\r\n  /// eip-1167 minimal proxy created using \u0060CREATE2\u0060 with a given initCodeHash, and salt.\r\n  /// @param creator address The address of the account creating the proxy.\r\n  /// @param initCodeHash bytes32 The hash of initCode.\r\n  /// @param salt bytes32 A user defined salt.\r\n  /// @return target address The address of the newly-spawned contract.\r\n  /// @return safeSalt bytes32 A safe salt. Must include the msg.sender address for front-running protection.\r\n  /// @return validity bool True if the \u0060target\u0060 is available.\r\n  function _getSaltyTargetWithInitCodeHash(\r\n    address creator,\r\n    bytes32 initCodeHash,\r\n    bytes32 salt\r\n  ) private view returns (address target, bytes32 safeSalt, bool validity) {\r\n    // get safeSalt from input\r\n    safeSalt = keccak256(abi.encodePacked(creator, salt));\r\n\r\n    // get expected target\r\n    target = _computeTargetWithCodeHash(initCodeHash, safeSalt);\r\n\r\n    // get target validity\r\n    validity = _getTargetValidity(target);\r\n\r\n    // explicit return\r\n    return (target, safeSalt, validity);\r\n  }\r\n\r\n  /// @notice Internal view function for finding the expected address of the standard\r\n  /// eip-1167 minimal proxy created using \u0060CREATE2\u0060 with a given logic contract,\r\n  /// nonce, and initialization calldata payload.\r\n  /// @param creator address The address of the account creating the proxy.\r\n  /// @param logicContract address The address of the logic contract.\r\n  /// @param initializationCalldata bytes The calldata that will be supplied to\r\n  /// the \u0060DELEGATECALL\u0060 from the spawned contract to the logic contract during\r\n  /// contract creation.\r\n  /// @return target address The address of the newly-spawned contract.\r\n  function _getNextNonceTarget(\r\n    address creator,\r\n    address logicContract,\r\n    bytes memory initializationCalldata\r\n  ) internal view returns (address target) {\r\n\r\n    // get initialization code\r\n\r\n    bytes32 initCodeHash;\r\n    ( , initCodeHash) = _getInitCodeAndHash(logicContract, initializationCalldata);\r\n\r\n    // get valid target\r\n\r\n    (target, ) = _getNextNonceTargetWithInitCodeHash(creator, initCodeHash);\r\n\r\n    // explicit return\r\n    return target;\r\n  }\r\n\r\n  /// @notice Internal view function for finding the expected address of the standard\r\n  /// eip-1167 minimal proxy created using \u0060CREATE2\u0060 with a given initCodeHash, and nonce.\r\n  /// @param creator address The address of the account creating the proxy.\r\n  /// @param initCodeHash bytes32 The hash of initCode.\r\n  /// @return target address The address of the newly-spawned contract.\r\n  /// @return safeSalt bytes32 A safe salt. Must include the msg.sender address for front-running protection.\r\n  function _getNextNonceTargetWithInitCodeHash(\r\n    address creator,\r\n    bytes32 initCodeHash\r\n  ) private view returns (address target, bytes32 safeSalt) {\r\n    // set the initial nonce to be provided when constructing the salt.\r\n    uint256 nonce = 0;\r\n\r\n    while (true) {\r\n      // get safeSalt from nonce\r\n      safeSalt = keccak256(abi.encodePacked(creator, nonce));\r\n\r\n      // get expected target\r\n      target = _computeTargetWithCodeHash(initCodeHash, safeSalt);\r\n\r\n      // validate no contract already deployed to the target address.\r\n      // exit the loop if no contract is deployed to the target address.\r\n      // otherwise, increment the nonce and derive a new salt.\r\n      if (_getTargetValidity(target))\r\n        break;\r\n      else\r\n        nonce\u002B\u002B;\r\n    }\r\n    \r\n    // explicit return\r\n    return (target, safeSalt);\r\n  }\r\n\r\n  /// @notice Private pure function for obtaining the initCode and the initCodeHash of \u0060logicContract\u0060 and \u0060initializationCalldata\u0060.\r\n  /// @param logicContract address The address of the logic contract.\r\n  /// @param initializationCalldata bytes The calldata that will be supplied to\r\n  /// the \u0060DELEGATECALL\u0060 from the spawned contract to the logic contract during\r\n  /// contract creation.\r\n  /// @return initCode bytes The spawner code and initialization calldata.\r\n  /// @return initCodeHash bytes32 The hash of initCode.\r\n  function _getInitCodeAndHash(\r\n    address logicContract,\r\n    bytes memory initializationCalldata\r\n  ) private pure returns (bytes memory initCode, bytes32 initCodeHash) {\r\n    // place creation code and constructor args of contract to spawn in memory.\r\n    initCode = abi.encodePacked(\r\n      type(Spawn).creationCode,\r\n      abi.encode(logicContract, initializationCalldata)\r\n    );\r\n\r\n    // get the keccak256 hash of the init code for address derivation.\r\n    initCodeHash = keccak256(initCode);\r\n\r\n    // explicit return\r\n    return (initCode, initCodeHash);\r\n  }\r\n  \r\n  /// @notice Private view function for finding the expected address of the standard\r\n  /// eip-1167 minimal proxy created using \u0060CREATE2\u0060 with a given logic contract,\r\n  /// salt, and initialization calldata payload.\r\n  /// @param initCodeHash bytes32 The hash of initCode.\r\n  /// @param safeSalt bytes32 A safe salt. Must include the msg.sender address for front-running protection.\r\n  /// @return The address of the proxy contract with the given parameters.\r\n  function _computeTargetWithCodeHash(\r\n    bytes32 initCodeHash,\r\n    bytes32 safeSalt\r\n  ) private view returns (address target) {\r\n    return address(    // derive the target deployment address.\r\n      uint160(                   // downcast to match the address type.\r\n        uint256(                 // cast to uint to truncate upper digits.\r\n          keccak256(             // compute CREATE2 hash using 4 inputs.\r\n            abi.encodePacked(    // pack all inputs to the hash together.\r\n              bytes1(0xff),      // pass in the control character.\r\n              address(this),     // pass in the address of this contract.\r\n              safeSalt,          // pass in the safeSalt from above.\r\n              initCodeHash       // pass in hash of contract creation code.\r\n            )\r\n          )\r\n        )\r\n      )\r\n    );\r\n  }\r\n\r\n  /// @notice Private view function to validate if the \u0060target\u0060 address is an available deployment address.\r\n  /// @param target address The address to validate.\r\n  /// @return validity bool True if the \u0060target\u0060 is available.\r\n  function _getTargetValidity(address target) private view returns (bool validity) {\r\n    // validate no contract already deployed to the target address.\r\n    uint256 codeSize;\r\n    assembly { codeSize := extcodesize(target) }\r\n    return codeSize == 0;\r\n  }\r\n}\r\n\r\n/// @title FlashTokenFactory\r\n/// @author Stephane Gosselin (@thegostep)\r\n/// @notice An Erasure style factory for Wrapping FlashTokens\r\ncontract FlashTokenFactory is Spawner {\r\n    uint256 private _tokenCount;\r\n    address private _templateContract;\r\n    mapping(address =\u003E address) private _baseToFlash;\r\n    mapping(address =\u003E address) private _flashToBase;\r\n    mapping(uint256 =\u003E address) private _idToBase;\r\n\r\n    event TemplateSet(address indexed templateContract);\r\n    event FlashTokenCreated(\r\n        address indexed token,\r\n        address indexed flashToken,\r\n        uint256 tokenID\r\n    );\r\n\r\n    /// @notice Initialize factory with template contract.\r\n    constructor(address templateContract) public {\r\n        _templateContract = templateContract;\r\n        emit TemplateSet(templateContract);\r\n    }\r\n\r\n    /// @notice Create a FlashToken wrap for any ERC20 token\r\n    function createFlashToken(address token)\r\n        public\r\n        returns (address flashToken)\r\n    {\r\n        require(token != address(0), \u0022cannot wrap address 0\u0022);\r\n        if (_baseToFlash[token] != address(0)) {\r\n            return _baseToFlash[token];\r\n        } else {\r\n            require(_baseToFlash[token] == address(0), \u0022token already wrapped\u0022);\r\n\r\n            flashToken = _flashWrap(token);\r\n\r\n            _baseToFlash[token] = flashToken;\r\n            _flashToBase[flashToken] = token;\r\n            _tokenCount \u002B= 1;\r\n            _idToBase[_tokenCount] = token;\r\n\r\n            emit FlashTokenCreated(token, flashToken, _tokenCount);\r\n            return flashToken;\r\n        }\r\n    }\r\n\r\n    /// @notice Initialize instance\r\n    function _flashWrap(address token) private returns (address flashToken) {\r\n        FlashToken template;\r\n        bytes memory initCalldata = abi.encodeWithSelector(\r\n            template.initialize.selector,\r\n            token\r\n        );\r\n        return Spawner._spawn(address(this), _templateContract, initCalldata);\r\n    }\r\n\r\n    // Getters\r\n\r\n    /// @notice Get FlashToken contract associated with given ERC20 token\r\n    function getFlashToken(address token)\r\n        public\r\n        view\r\n        returns (address flashToken)\r\n    {\r\n        return _baseToFlash[token];\r\n    }\r\n\r\n    /// @notice Get ERC20 token contract associated with given FlashToken\r\n    function getBaseToken(address flashToken)\r\n        public\r\n        view\r\n        returns (address token)\r\n    {\r\n        return _flashToBase[flashToken];\r\n    }\r\n\r\n    /// @notice Get ERC20 token contract associated with given FlashToken ID\r\n    function getBaseFromID(uint256 tokenID)\r\n        public\r\n        view\r\n        returns (address token)\r\n    {\r\n        return _idToBase[tokenID];\r\n    }\r\n\r\n    /// @notice Get count of FlashToken contracts created from this factory\r\n    function getTokenCount() public view returns (uint256 tokenCount) {\r\n        return _tokenCount;\r\n    }\r\n\r\n}","ABI":"[{\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022templateContract\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022constructor\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022token\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022flashToken\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022tokenID\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022FlashTokenCreated\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022templateContract\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022TemplateSet\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022token\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022createFlashToken\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022flashToken\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022tokenID\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022getBaseFromID\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022token\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022flashToken\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022getBaseToken\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022token\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022token\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022getFlashToken\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022flashToken\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022getTokenCount\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022tokenCount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022}]","ContractName":"FlashTokenFactory","CompilerVersion":"v0.5.16\u002Bcommit.9c3226ce","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000009ebdd0f7ae32c92161237560b1cd2bc4b6741ec6","Library":"","SwarmSource":"bzzr://bca7a7b4b743eb3e3909e70b69bdd5e3e0f13aeb1392eb4924f2fbc7c7dc35ec"}]