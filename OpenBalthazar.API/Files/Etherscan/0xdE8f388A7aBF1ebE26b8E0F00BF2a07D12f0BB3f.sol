[{"SourceCode":"pragma solidity ^0.5.8;\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060\u002B\u0060 operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a \u002B b;\r\n        require(c \u003E= a, \u0022SafeMath: addition overflow\u0022);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060-\u0060 operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b \u003C= a, \u0022SafeMath: subtraction overflow\u0022);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060*\u0060 operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\r\n        // benefit is lost if \u0027b\u0027 is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \u0022SafeMath: multiplication overflow\u0022);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060/\u0060 operator. Note: this function uses a\r\n     * \u0060revert\u0060 opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b \u003E 0, \u0022SafeMath: division by zero\u0022);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c \u002B a % b); // There is no case in which this doesn\u0027t hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060%\u0060 operator. This function uses a \u0060revert\u0060\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \u0022SafeMath: modulo by zero\u0022);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \u0022Ownable: caller is not the owner\u0022);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * \u0060onlyOwner\u0060 functions anymore. Can only be called by the current owner.\r\n     *\r\n     * \u003E Note: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (\u0060newOwner\u0060).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (\u0060newOwner\u0060).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \u0022Ownable: new owner is the zero address\u0022);\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by \u0060account\u0060.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves \u0060amount\u0060 tokens from the caller\u0027s account to \u0060recipient\u0060.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a \u0060Transfer\u0060 event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that \u0060spender\u0060 will be\r\n     * allowed to spend on behalf of \u0060owner\u0060 through \u0060transferFrom\u0060. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when \u0060approve\u0060 or \u0060transferFrom\u0060 are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets \u0060amount\u0060 as the allowance of \u0060spender\u0060 over the caller\u0027s tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * \u003E Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an \u0060Approval\u0060 event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves \u0060amount\u0060 tokens from \u0060sender\u0060 to \u0060recipient\u0060 using the\r\n     * allowance mechanism. \u0060amount\u0060 is then deducted from the caller\u0027s\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a \u0060Transfer\u0060 event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when \u0060value\u0060 tokens are moved from one account (\u0060from\u0060) to\r\n     * another (\u0060to\u0060).\r\n     *\r\n     * Note that \u0060value\u0060 may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a \u0060spender\u0060 for an \u0060owner\u0060 is set by\r\n     * a call to \u0060approve\u0060. \u0060value\u0060 is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract CampaignFund is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    struct CampaignInfo {\r\n        // UUID identifying this campaign\r\n        string uuid;\r\n        // Descriptive name for this campaign\r\n        string name;\r\n        // Budget is the agreed funding for a merchant\r\n        uint256 budget;\r\n        // Address of who will finance this campaign\r\n        address funder;\r\n        // Current funding of this campaign (should not exceed budget)\r\n        uint256 funding;\r\n        // Indicates if this campaign was initialized by Olyseum owner\r\n        bool initialized;\r\n    }\r\n\r\n    mapping(string =\u003E CampaignInfo) private _campaignInfoMap;\r\n\r\n    struct SubcampaignInfo {\r\n        // UUID identifying this subcampaign\r\n        string uuid;\r\n        // Descriptive name for this subcampaign\r\n        string name;\r\n        // Hash of the properties of the subcampaign\r\n        bytes32 hash;\r\n        // Unix timestamp indicating when the subcampaign starts\r\n        uint256 startTimestamp;\r\n        // Unix timestamp indicating when the subcampaign ends\r\n        uint256 endTimestamp;\r\n        // Indicates if this subcampaign was initialized by Olyseum owner\r\n        bool initialized;\r\n    }\r\n\r\n    mapping(string =\u003E SubcampaignInfo) private _subcampaignInfoMap;\r\n\r\n    // Reference to the OLY Token\r\n    OlyToken public olyToken;\r\n\r\n    // Reference to the Jury\r\n    address public jury;\r\n\r\n    // Timestamp marking the withdrawing period day start\r\n    uint256 private _redeemDayBegin;\r\n\r\n    // Maximum allowed redeem amount per day\r\n    uint256 public perDayRedeemLimit;\r\n\r\n    // Once withdrawAll is called by the jury the contract becames locked\r\n    bool private _locked = false;\r\n\r\n    // Total balance in this contract for all campaigns\r\n    uint256 private _totalBalance;\r\n\r\n    // Fees accumulated from issued token redeems\r\n    uint256 private _feeBalance;\r\n\r\n    // Accumulated redeemed tokens on the day period\r\n    uint256 private _accumulatedRedeemDay = 0;\r\n\r\n    /**\r\n     * @dev Constructs a new instance of this contract.\r\n     *\r\n     * @param olyTokenAddress The address of the deployed OLY token.\r\n     * @param juryAddr The address of the jury who can make onlyJury calls\r\n     * @param redeemLimitPerDay The amount of tokens that can be redeemed in one day.\r\n     * This corresponds to the indivisible unit of the token.\r\n     */\r\n    constructor(address olyTokenAddress, address juryAddr, uint256 redeemLimitPerDay) public {\r\n        require(olyTokenAddress != address(0), \u0022OLY Token Address cannot be null\u0022);\r\n\r\n        olyToken = OlyToken(olyTokenAddress);\r\n        jury = juryAddr;\r\n        perDayRedeemLimit = redeemLimitPerDay;\r\n        _redeemDayBegin = now;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the total balance for all the campaigns (excluding already done redeems).\r\n     */\r\n    function totalBalance() public view returns (uint256) {\r\n        return _totalBalance;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the total fee balance accumulated from issued token redeems.\r\n     */\r\n    function feeBalance() public view returns (uint256) {\r\n        return _feeBalance;\r\n    }\r\n\r\n    /**\r\n     * @dev Requires the message sender to be the Jury.\r\n     */\r\n    modifier onlyJury() {\r\n        require(msg.sender == jury, \u0022Expected sender to be the jury.\u0022);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Requires that the contract is not locked.\r\n     */\r\n    modifier isNotLocked() {\r\n        require(!_locked, \u0022Contract has been locked after withdraw-all operation\u0022);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Registers a new campaign.\r\n     *\r\n     * @param uuid The  UUID identifying this campaign.\r\n     * @param name The name of  this campaign.\r\n     * @param budget The budget amount for this campaign, in OLY tokens.\r\n     * @param funder The address of the financer of this campaign.\r\n     */\r\n    function registerCampaign(\r\n        string memory uuid,\r\n        string memory name,\r\n        uint256 budget,\r\n        address funder\r\n    ) public onlyOwner isNotLocked {\r\n        require(funder != address(0), \u0022Funder address cannot be null\u0022);\r\n        require(budget != 0, \u0022Budget amount cannot be zero\u0022);\r\n        require(\r\n            !_campaignInfoMap[uuid].initialized,\r\n            \u0022A campaign with the specified identifier already exists\u0022\r\n        );\r\n\r\n        CampaignInfo storage ci = _campaignInfoMap[uuid];\r\n        ci.uuid = uuid;\r\n        ci.name = name;\r\n        ci.budget = budget;\r\n        ci.funder = funder;\r\n        ci.funding = 0;\r\n        ci.initialized = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Registers a subcampaign funding its parent campaign.\r\n     *\r\n     * @param uuid The unique UUID identifying this campaign.\r\n     * @param amount The amount in tokens for funding the subcampaign.\r\n     * Must be less than or equal the campaign\u0027s agreed budget.\r\n     * @param hash The hash of the subcampaign\r\n     * @param uuid The uuid of the subcampaign\r\n     * @param name The name of the subcampaign\r\n     * @param startTimestamp The unix timestamp indicating when the subcampaign starts\r\n     * @param endTimestamp The unix timestamp indicating when the subcampaign ends\r\n     */\r\n    function fundCampaign(\r\n        string memory uuid,\r\n        uint256 amount,\r\n        bytes32 hash,\r\n        string memory subcampaignUuid,\r\n        string memory name,\r\n        uint256 startTimestamp,\r\n        uint256 endTimestamp\r\n    ) public isNotLocked {\r\n        require(msg.sender != address(0), \u0022Funder address cannot be null\u0022);\r\n        require(\r\n            _campaignInfoMap[uuid].initialized,\r\n            \u0022A campaign with the specified identifier does not exist\u0022\r\n        );\r\n        require(\r\n            _campaignInfoMap[uuid].funder == msg.sender,\r\n            \u0022Only registered funder can call this function\u0022\r\n        );\r\n\r\n        uint256 newBalance = amount.add(_campaignInfoMap[uuid].funding);\r\n        require(\r\n            newBalance \u003C= _campaignInfoMap[uuid].budget,\r\n            \u0022Campaign funding cannot exceed the agreed budget amount\u0022\r\n        );\r\n\r\n        _registerSubcampaign(hash, subcampaignUuid, name, startTimestamp, endTimestamp);\r\n\r\n        _campaignInfoMap[uuid].funding = newBalance;\r\n        _totalBalance = amount.add(_totalBalance);\r\n        require(\r\n            olyToken.transferFrom(msg.sender, address(this), amount),\r\n            \u0022token.transferFrom call must succeed\u0022\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Registers a subcampaign.\r\n     *\r\n     * @param hash The hash of the subcampaign\r\n     * @param uuid The uuid of the subcampaign\r\n     * @param name The name of the subcampaign\r\n     * @param startTimestamp The unix timestamp indicating when the subcampaign starts\r\n     * @param endTimestamp The unix timestamp indicating when the subcampaign ends\r\n     */\r\n    function _registerSubcampaign(\r\n        bytes32 hash,\r\n        string memory uuid,\r\n        string memory name,\r\n        uint256 startTimestamp,\r\n        uint256 endTimestamp\r\n    ) private {\r\n        require(bytes(name).length \u003E 0, \u0022Name cannot be an empty string\u0022);\r\n        require(bytes(uuid).length \u003E 0, \u0022UUID cannot be an empty string\u0022);\r\n        require(startTimestamp != 0 \u0026\u0026 endTimestamp != 0, \u0022Start/End timestamps cannot be null\u0022);\r\n        require(startTimestamp \u003C endTimestamp, \u0022Start timestamp must be less than endTimestamp\u0022);\r\n        require(\r\n            !_subcampaignInfoMap[uuid].initialized,\r\n            \u0022A subcampaign with the specified identifier already exists\u0022\r\n        );\r\n\r\n        SubcampaignInfo storage sci = _subcampaignInfoMap[uuid];\r\n        sci.uuid = uuid;\r\n        sci.name = name;\r\n        sci.hash = hash;\r\n        sci.startTimestamp = startTimestamp;\r\n        sci.endTimestamp = endTimestamp;\r\n        sci.initialized = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the information of the campaign.\r\n     *\r\n     * @param uuid The unique UUID identifying this campaign.\r\n     * @return initialized state of the campaign\r\n     * @return actual funding of the campaign\r\n     * @return name of the campaign\r\n     * @return total budget of the campaign\r\n     * @return funder of the campaign\r\n     */\r\n    function getCampaignInfo(string memory uuid)\r\n        public\r\n        view\r\n        returns (\r\n            bool initialized,\r\n            uint256 funding,\r\n            string memory name,\r\n            uint256 budget,\r\n            address funder\r\n        )\r\n    {\r\n        initialized = _campaignInfoMap[uuid].initialized;\r\n        funding = _campaignInfoMap[uuid].funding;\r\n        name = _campaignInfoMap[uuid].name;\r\n        budget = _campaignInfoMap[uuid].budget;\r\n        funder = _campaignInfoMap[uuid].funder;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the information of the subcampaign.\r\n     *\r\n     * @param uuid The unique UUID identifying this subcampaign.\r\n     * @return initialized state of the subcampaign\r\n     * @return hash of the subcampaign\r\n     * @return name of the subcampaign\r\n     * @return the unix timestamp indicating when the subcampaign starts\r\n     * @return the unix timestamp indicating when the subcampaign ends\r\n     */\r\n    function getSubcampaignInfo(string memory uuid)\r\n        public\r\n        view\r\n        returns (\r\n            bool initialized,\r\n            bytes32 hash,\r\n            string memory name,\r\n            uint256 startTimestamp,\r\n            uint256 endTimestamp\r\n        )\r\n    {\r\n        initialized = _subcampaignInfoMap[uuid].initialized;\r\n        hash = _subcampaignInfoMap[uuid].hash;\r\n        name = _subcampaignInfoMap[uuid].name;\r\n        startTimestamp = _subcampaignInfoMap[uuid].startTimestamp;\r\n        endTimestamp = _subcampaignInfoMap[uuid].endTimestamp;\r\n    }\r\n\r\n    /**\r\n     * @dev Redeem user tokens form contract\u0027s balance\r\n     *\r\n     * @param amount  The amount in tokens to redeem.\r\n     * @param receiverAddress The address of the receiver.\r\n     * @param fee The fee calculated by the caller to be assigned to the fee pool in this contract.\r\n     */\r\n    function redeem(uint256 amount, address receiverAddress, uint256 fee)\r\n        public\r\n        onlyOwner\r\n        isNotLocked\r\n    {\r\n        require(receiverAddress != owner(), \u0022Receiver address cannot be owner\u0022);\r\n        require(receiverAddress != address(0), \u0022Receiver address cannot be zero\u0022);\r\n        require(amount != 0, \u0022Amount cannot be zero\u0022);\r\n\r\n        uint256 assignedTotal = amount.add(fee);\r\n        require(assignedTotal \u003C= _totalBalance, \u0022Amount to redeem cannot exceed total balance\u0022);\r\n\r\n        uint256 timedelta = now.sub(_redeemDayBegin);\r\n        if (timedelta \u003E= 1 days) {\r\n            uint256 daysdelta = timedelta.div(1 days);\r\n            _redeemDayBegin = _redeemDayBegin.add(daysdelta.mul(1 days));\r\n            _accumulatedRedeemDay = 0;\r\n        }\r\n        require(\r\n            _accumulatedRedeemDay.add(assignedTotal) \u003C= perDayRedeemLimit,\r\n            \u0022Required amount exceeds per-day withdraw limit\u0022\r\n        );\r\n\r\n        _totalBalance = _totalBalance.sub(assignedTotal);\r\n        _feeBalance = _feeBalance.add(fee);\r\n        _accumulatedRedeemDay = _accumulatedRedeemDay.add(assignedTotal);\r\n        require(olyToken.transfer(receiverAddress, amount), \u0022Transfer to redeemer failed\u0022);\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the balance of this contract in OLY.\r\n     *\r\n     * @return The OLY token balance of this contract\r\n     */\r\n    function contractBalance() public view returns (uint256) {\r\n        return olyToken.balanceOf(address(this));\r\n    }\r\n\r\n    /**\r\n    * @dev Withdraws all the funds of the contract, sending them to the Jury.\r\n    * Locks the contract\r\n    */\r\n    function withdrawAll() public onlyJury {\r\n        _locked = true;\r\n        require(olyToken.transfer(jury, contractBalance()), \u0022Token transfer failed.\u0022);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers an amount of collected fees to Olyseum (owner) wallet.\r\n     *\r\n     * @param amount The amount of collected fees to claim.\r\n     */\r\n    function claimFees(uint256 amount) public onlyOwner isNotLocked {\r\n        require(_feeBalance \u003E= amount, \u0022Amount to claim cannot exceed collected fee balance\u0022);\r\n\r\n        _feeBalance = _feeBalance.sub(amount);\r\n        require(olyToken.transfer(msg.sender, amount), \u0022Transfer to redeemer failed\u0022);\r\n    }\r\n\r\n    /**\r\n     * @dev Changes the redeem limit per day.\r\n     *\r\n     * @param newRedeemLimitPerDay The amount of tokens that can be redeemed in one day.\r\n     * This corresponds to the indivisible unit of the token.\r\n     *\r\n     * @return true if succeed\r\n     */\r\n    function changeRedeemLimitPerDay(uint256 newRedeemLimitPerDay) public onlyJury returns (bool) {\r\n        perDayRedeemLimit = newRedeemLimitPerDay;\r\n        return true;\r\n    }\r\n\r\n}\r\n\r\ncontract OlyToken is IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    string private _name;\r\n\r\n    string private _symbol;\r\n\r\n    uint8 private _decimals;\r\n\r\n    bool private _initialized = false;\r\n\r\n    mapping(address =\u003E uint256) private _balances;\r\n\r\n    mapping(address =\u003E mapping(address =\u003E uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    mapping(address =\u003E mapping(uint256 =\u003E bool)) private usedNonces;\r\n\r\n    event DeferredTransfer(\r\n        address paymentSigner,\r\n        uint256 nonce,\r\n        uint256 paymentAmount,\r\n        address paymentCollector,\r\n        uint256 paymentFee,\r\n        address feeCollector,\r\n        bool statusSuccessful\r\n    );\r\n\r\n    /**\r\n    * @dev Initializes the token contract\r\n    *\r\n    * Called by the proxy contract instead of the standard constructor\r\n    *\r\n    * @param name Name of the token\r\n    * @param symbol Symbol of the token\r\n    * @param decimals Decimals of the token\r\n    * @param totalSupply Total supply of tokens\r\n    * @param tokenHolder Who will receive the total supply\r\n    */\r\n    function initialize(\r\n        string memory name,\r\n        string memory symbol,\r\n        uint8 decimals,\r\n        uint256 totalSupply,\r\n        address tokenHolder\r\n    ) public {\r\n        require(!_initialized, \u0022This contract is already initialized\u0022);\r\n        require(totalSupply \u003E 0, \u0022Total supply must be greater than 0\u0022);\r\n\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = decimals;\r\n        _mint(tokenHolder, totalSupply);\r\n        _initialized = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if \u0060decimals\u0060 equals \u00602\u0060, a balance of \u0060505\u0060 tokens should\r\n     * be displayed to a user as \u00605,05\u0060 (\u0060505 / 10 ** 2\u0060).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei.\r\n     *\r\n     * \u003E Note that this information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * \u0060IERC20.balanceOf\u0060 and \u0060IERC20.transfer\u0060.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See \u0060IERC20.totalSupply\u0060.\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See \u0060IERC20.balanceOf\u0060.\r\n     */\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See \u0060IERC20.transfer\u0060.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - \u0060recipient\u0060 cannot be the zero address.\r\n     * - the caller must have a balance of at least \u0060amount\u0060.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See \u0060IERC20.allowance\u0060.\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See \u0060IERC20.approve\u0060.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - \u0060spender\u0060 cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        _approve(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See \u0060IERC20.transferFrom\u0060.\r\n     *\r\n     * Emits an \u0060Approval\u0060 event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of \u0060ERC20\u0060;\r\n     *\r\n     * Requirements:\r\n     * - \u0060sender\u0060 and \u0060recipient\u0060 cannot be the zero address.\r\n     * - \u0060sender\u0060 must have a balance of at least \u0060value\u0060.\r\n     * - the caller must have allowance for \u0060sender\u0060\u0027s tokens of at least\r\n     * \u0060amount\u0060.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to \u0060spender\u0060 by the caller.\r\n     *\r\n     * This is an alternative to \u0060approve\u0060 that can be used as a mitigation for\r\n     * problems described in \u0060IERC20.approve\u0060.\r\n     *\r\n     * Emits an \u0060Approval\u0060 event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - \u0060spender\u0060 cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to \u0060spender\u0060 by the caller.\r\n     *\r\n     * This is an alternative to \u0060approve\u0060 that can be used as a mitigation for\r\n     * problems described in \u0060IERC20.approve\u0060.\r\n     *\r\n     * Emits an \u0060Approval\u0060 event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - \u0060spender\u0060 cannot be the zero address.\r\n     * - \u0060spender\u0060 must have allowance for the caller of at least\r\n     * \u0060subtractedValue\u0060.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens \u0060amount\u0060 from \u0060sender\u0060 to \u0060recipient\u0060.\r\n     *\r\n     * This is internal function is equivalent to \u0060transfer\u0060, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a \u0060Transfer\u0060 event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - \u0060sender\u0060 cannot be the zero address.\r\n     * - \u0060recipient\u0060 cannot be the zero address.\r\n     * - \u0060sender\u0060 must have a balance of at least \u0060amount\u0060.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \u0022ERC20: transfer from the zero address\u0022);\r\n        require(recipient != address(0), \u0022ERC20: transfer to the zero address\u0022);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount);\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates \u0060amount\u0060 tokens and assigns them to \u0060account\u0060, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a \u0060Transfer\u0060 event with \u0060from\u0060 set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - \u0060to\u0060 cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \u0022ERC20: mint to the zero address\u0022);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destoys \u0060amount\u0060 tokens from \u0060account\u0060, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a \u0060Transfer\u0060 event with \u0060to\u0060 set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - \u0060account\u0060 cannot be the zero address.\r\n     * - \u0060account\u0060 must have at least \u0060amount\u0060 tokens.\r\n     */\r\n    function _burn(address account, uint256 value) internal {\r\n        require(account != address(0), \u0022ERC20: burn from the zero address\u0022);\r\n\r\n        _totalSupply = _totalSupply.sub(value);\r\n        _balances[account] = _balances[account].sub(value);\r\n        emit Transfer(account, address(0), value);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets \u0060amount\u0060 as the allowance of \u0060spender\u0060 over the \u0060owner\u0060s tokens.\r\n     *\r\n     * This is internal function is equivalent to \u0060approve\u0060, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an \u0060Approval\u0060 event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - \u0060owner\u0060 cannot be the zero address.\r\n     * - \u0060spender\u0060 cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 value) internal {\r\n        require(owner != address(0), \u0022ERC20: approve from the zero address\u0022);\r\n        require(spender != address(0), \u0022ERC20: approve to the zero address\u0022);\r\n\r\n        _allowances[owner][spender] = value;\r\n        emit Approval(owner, spender, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Destoys \u0060amount\u0060 tokens from \u0060account\u0060.\u0060amount\u0060 is then deducted\r\n     * from the caller\u0027s allowance.\r\n     *\r\n     * See \u0060_burn\u0060 and \u0060_approve\u0060.\r\n     */\r\n    function _burnFrom(address account, uint256 amount) internal {\r\n        _burn(account, amount);\r\n        _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount));\r\n    }\r\n\r\n    /**\r\n    * @dev Publishes messages signed off the chain by the user wallet.\r\n    *\r\n    * The transfer-message mechanism was designed to provide the wallet user a seamless\r\n    * experience when using tokens to pay or transfer, by letting the Olyseum platform\r\n    * to provide gas fees and executing token transactions on behalf of the user.\r\n    *\r\n    * Nonces are consumed always, even if the execution of a message is unsuccessful.\r\n    * This avoids unintended replays of the message.\r\n    *\r\n    * @param nonces The list of nonces uniquely identifying each message in sequence.\r\n    * @param paymentAmounts The list of payment amounts for each message.\r\n    * @param paymentCollectors The list of payment collectors (destinations) of each message.\r\n    * @param paymentFees The list of fees of each message.\r\n    * @param feeCollectors The list of fee collectors of each message.\r\n    * @param sigsR The list of r-components of the signature for each signed user message.\r\n    * @param sigsS The list of s-components of the signature for each signed user message.\r\n    * @param sigsV The list of v-components of the signature for each signed user message.\r\n    */\r\n    function publishMessages(\r\n        uint256[] memory nonces,\r\n        uint256[] memory paymentAmounts,\r\n        address[] memory paymentCollectors,\r\n        uint256[] memory paymentFees,\r\n        address[] memory feeCollectors,\r\n        bytes32[] memory sigsR,\r\n        bytes32[] memory sigsS,\r\n        uint8[] memory sigsV\r\n    ) public {\r\n        require(\r\n            nonces.length == paymentAmounts.length \u0026\u0026\r\n                paymentAmounts.length == paymentCollectors.length \u0026\u0026\r\n                paymentCollectors.length == paymentFees.length \u0026\u0026\r\n                paymentFees.length == feeCollectors.length \u0026\u0026\r\n                feeCollectors.length == sigsR.length \u0026\u0026\r\n                sigsR.length == sigsS.length \u0026\u0026\r\n                sigsS.length == sigsV.length,\r\n            \u0022Inconsistent message data received\u0022\r\n        );\r\n\r\n        for (uint256 i = 0; i \u003C nonces.length; i\u002B\u002B) {\r\n            executeMessage(\r\n                nonces[i],\r\n                paymentAmounts[i],\r\n                paymentCollectors[i],\r\n                paymentFees[i],\r\n                feeCollectors[i],\r\n                sigsR[i],\r\n                sigsS[i],\r\n                sigsV[i]\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Publishes a message signed off the chain by the user wallet.\r\n    *\r\n    * @param nonce The nonce\r\n    * @param paymentAmount The payment amount\r\n    * @param paymentCollector The payment collector\r\n    * @param paymentFee The payment fee\r\n    * @param feeCollector The fee collector\r\n    * @param sigR The the r-value of the signature\r\n    * @param sigS The the s-value of the signature\r\n    * @param sigV The the v-value of the signature\r\n    */\r\n    function executeMessage(\r\n        uint256 nonce,\r\n        uint256 paymentAmount,\r\n        address paymentCollector,\r\n        uint256 paymentFee,\r\n        address feeCollector,\r\n        bytes32 sigR,\r\n        bytes32 sigS,\r\n        uint8 sigV\r\n    ) private {\r\n        bytes32 hash = keccak256(\r\n            abi.encodePacked(\r\n                string(\u0022\\x19Ethereum Signed Message:\\n164Olyseum v1 Transfer Message:\u0022),\r\n                nonce,\r\n                paymentAmount,\r\n                paymentCollector,\r\n                paymentFee,\r\n                msg.sender\r\n            )\r\n        );\r\n\r\n        address user = ecrecover(hash, sigV, sigR, sigS);\r\n        uint256 balance = _balances[user];\r\n        bool success = false;\r\n        uint256 totalExpenditure = paymentAmount.add(paymentFee);\r\n\r\n        if (\r\n            balance \u003E= totalExpenditure \u0026\u0026\r\n            !usedNonces[user][nonce] \u0026\u0026\r\n            paymentCollector != address(0) \u0026\u0026\r\n            feeCollector != address(0)\r\n        ) {\r\n            success = true;\r\n            usedNonces[user][nonce] = true;\r\n\r\n            // Execute transfer\r\n            _balances[user] = balance.sub(totalExpenditure);\r\n            _balances[paymentCollector] = _balances[paymentCollector].add(paymentAmount);\r\n            _balances[feeCollector] = _balances[feeCollector].add(paymentFee);\r\n\r\n            emit Transfer(user, paymentCollector, paymentAmount);\r\n            emit Transfer(user, feeCollector, paymentFee);\r\n        }\r\n\r\n        emit DeferredTransfer(\r\n            user,\r\n            nonce,\r\n            paymentAmount,\r\n            paymentCollector,\r\n            paymentFee,\r\n            feeCollector,\r\n            success\r\n        );\r\n    }\r\n}","ABI":"[{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022uuid\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022name\u0022:\u0022getCampaignInfo\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022initialized\u0022,\u0022type\u0022:\u0022bool\u0022},{\u0022name\u0022:\u0022funding\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022name\u0022,\u0022type\u0022:\u0022string\u0022},{\u0022name\u0022:\u0022budget\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022funder\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022olyToken\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022jury\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022uuid\u0022,\u0022type\u0022:\u0022string\u0022},{\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022hash\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022name\u0022:\u0022subcampaignUuid\u0022,\u0022type\u0022:\u0022string\u0022},{\u0022name\u0022:\u0022name\u0022,\u0022type\u0022:\u0022string\u0022},{\u0022name\u0022:\u0022startTimestamp\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022endTimestamp\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022fundCampaign\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022newRedeemLimitPerDay\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022changeRedeemLimitPerDay\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022feeBalance\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022renounceOwnership\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022uuid\u0022,\u0022type\u0022:\u0022string\u0022},{\u0022name\u0022:\u0022name\u0022,\u0022type\u0022:\u0022string\u0022},{\u0022name\u0022:\u0022budget\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022funder\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022registerCampaign\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022withdrawAll\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022contractBalance\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022owner\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022isOwner\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022uuid\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022name\u0022:\u0022getSubcampaignInfo\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022initialized\u0022,\u0022type\u0022:\u0022bool\u0022},{\u0022name\u0022:\u0022hash\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022name\u0022:\u0022name\u0022,\u0022type\u0022:\u0022string\u0022},{\u0022name\u0022:\u0022startTimestamp\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022endTimestamp\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022claimFees\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022totalBalance\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022receiverAddress\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022fee\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022redeem\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022perDayRedeemLimit\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022transferOwnership\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[{\u0022name\u0022:\u0022olyTokenAddress\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022juryAddr\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022redeemLimitPerDay\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022constructor\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022previousOwner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022OwnershipTransferred\u0022,\u0022type\u0022:\u0022event\u0022}]","ContractName":"CampaignFund","CompilerVersion":"v0.5.8\u002Bcommit.23d335f2","OptimizationUsed":"1","Runs":"0","ConstructorArguments":"0000000000000000000000006595b8fd9c920c81500dca94e53cdc712513fb1f000000000000000000000000c93cad65ad63d47c1461dce326d3f507274c3e19000000000000000000000000000000000000000000000878678326eac9000000","Library":"","SwarmSource":"bzzr://7ad88f6a7122ec24753ff2b1d3671ba726e3fbcb494ca72f8f36649eda1139a8"}]