[{"SourceCode":"pragma solidity 0.4.24;\r\n\r\n// File: contracts/IBridgeValidators.sol\r\n\r\ninterface IBridgeValidators {\r\n    function isValidator(address _validator) public view returns(bool);\r\n    function requiredSignatures() public view returns(uint256);\r\n    function owner() public view returns(address);\r\n}\r\n\r\n// File: contracts/libraries/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b \u003E 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c \u002B a % b); // There is no case in which this doesn\u0027t hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b \u003C= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a \u002B b;\r\n    assert(c \u003E= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: contracts/upgradeability/EternalStorage.sol\r\n\r\n/**\r\n * @title EternalStorage\r\n * @dev This contract holds all the necessary state variables to carry out the storage of any contract.\r\n */\r\ncontract EternalStorage {\r\n\r\n    mapping(bytes32 =\u003E uint256) internal uintStorage;\r\n    mapping(bytes32 =\u003E string) internal stringStorage;\r\n    mapping(bytes32 =\u003E address) internal addressStorage;\r\n    mapping(bytes32 =\u003E bytes) internal bytesStorage;\r\n    mapping(bytes32 =\u003E bool) internal boolStorage;\r\n    mapping(bytes32 =\u003E int256) internal intStorage;\r\n\r\n}\r\n\r\n// File: contracts/upgradeable_contracts/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev This contract has an owner address providing basic authorization control\r\n */\r\ncontract Ownable is EternalStorage {\r\n    /**\r\n    * @dev Event to show ownership has been transferred\r\n    * @param previousOwner representing the address of the previous owner\r\n    * @param newOwner representing the address of the new owner\r\n    */\r\n    event OwnershipTransferred(address previousOwner, address newOwner);\r\n\r\n    /**\r\n    * @dev Throws if called by any account other than the owner.\r\n    */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner());\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Tells the address of the owner\r\n    * @return the address of the owner\r\n    */\r\n    function owner() public view returns (address) {\r\n        return addressStorage[keccak256(abi.encodePacked(\u0022owner\u0022))];\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n    * @param newOwner the address to transfer ownership to.\r\n    */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        setOwner(newOwner);\r\n    }\r\n\r\n    /**\r\n    * @dev Sets a new owner address\r\n    */\r\n    function setOwner(address newOwner) internal {\r\n        emit OwnershipTransferred(owner(), newOwner);\r\n        addressStorage[keccak256(abi.encodePacked(\u0022owner\u0022))] = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/upgradeable_contracts/BridgeValidators.sol\r\n\r\ncontract BridgeValidators is IBridgeValidators, EternalStorage, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    event ValidatorAdded (address indexed validator);\r\n    event ValidatorRemoved (address indexed validator);\r\n    event RequiredSignaturesChanged (uint256 requiredSignatures);\r\n\r\n    function initialize(uint256 _requiredSignatures, address[] _initialValidators, address _owner)\r\n      public returns(bool)\r\n    {\r\n        require(!isInitialized());\r\n        require(_owner != address(0));\r\n        setOwner(_owner);\r\n        require(_requiredSignatures != 0);\r\n        require(_initialValidators.length \u003E= _requiredSignatures);\r\n        for (uint256 i = 0; i \u003C _initialValidators.length; i\u002B\u002B) {\r\n            require(_initialValidators[i] != address(0));\r\n            assert(validators(_initialValidators[i]) != true);\r\n            setValidatorCount(validatorCount().add(1));\r\n            setValidator(_initialValidators[i], true);\r\n            emit ValidatorAdded(_initialValidators[i]);\r\n        }\r\n        uintStorage[keccak256(abi.encodePacked(\u0022requiredSignatures\u0022))] = _requiredSignatures;\r\n        uintStorage[keccak256(\u0022deployedAtBlock\u0022)] = block.number;\r\n        setInitialize(true);\r\n        emit RequiredSignaturesChanged(_requiredSignatures);\r\n        return isInitialized();\r\n    }\r\n\r\n    function addValidator(address _validator) external onlyOwner {\r\n        require(_validator != address(0));\r\n        require(!isValidator(_validator));\r\n        setValidatorCount(validatorCount().add(1));\r\n        setValidator(_validator, true);\r\n        emit ValidatorAdded(_validator);\r\n    }\r\n\r\n    function removeValidator(address _validator) external onlyOwner {\r\n        require(validatorCount() \u003E requiredSignatures());\r\n        require(isValidator(_validator));\r\n        setValidator(_validator, false);\r\n        setValidatorCount(validatorCount().sub(1));\r\n        emit ValidatorRemoved(_validator);\r\n    }\r\n\r\n    function setRequiredSignatures(uint256 _requiredSignatures) external onlyOwner {\r\n        require(validatorCount() \u003E= _requiredSignatures);\r\n        require(_requiredSignatures != 0);\r\n        uintStorage[keccak256(abi.encodePacked(\u0022requiredSignatures\u0022))] = _requiredSignatures;\r\n        emit RequiredSignaturesChanged(_requiredSignatures);\r\n    }\r\n\r\n    function getBridgeValidatorsInterfacesVersion() public pure returns(uint64 major, uint64 minor, uint64 patch) {\r\n        return (2, 0, 0);\r\n    }\r\n\r\n    function requiredSignatures() public view returns(uint256) {\r\n        return uintStorage[keccak256(abi.encodePacked(\u0022requiredSignatures\u0022))];\r\n    }\r\n\r\n    function validatorCount() public view returns(uint256) {\r\n        return uintStorage[keccak256(abi.encodePacked(\u0022validatorCount\u0022))];\r\n    }\r\n\r\n    function validators(address _validator) public view returns(bool) {\r\n        return boolStorage[keccak256(abi.encodePacked(\u0022validators\u0022, _validator))];\r\n    }\r\n\r\n    function isValidator(address _validator) public view returns(bool) {\r\n        return validators(_validator) == true;\r\n    }\r\n\r\n    function isInitialized() public view returns(bool) {\r\n        return boolStorage[keccak256(abi.encodePacked(\u0022isInitialized\u0022))];\r\n    }\r\n\r\n    function deployedAtBlock() public view returns(uint256) {\r\n        return uintStorage[keccak256(\u0022deployedAtBlock\u0022)];\r\n    }\r\n\r\n    function setValidatorCount(uint256 _validatorCount) private {\r\n        uintStorage[keccak256(abi.encodePacked(\u0022validatorCount\u0022))] = _validatorCount;\r\n    }\r\n\r\n    function setValidator(address _validator, bool _status) private {\r\n        boolStorage[keccak256(abi.encodePacked(\u0022validators\u0022, _validator))] = _status;\r\n    }\r\n\r\n    function setInitialize(bool _status) private {\r\n        boolStorage[keccak256(abi.encodePacked(\u0022isInitialized\u0022))] = _status;\r\n    }\r\n}","ABI":"[{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022validatorCount\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022getBridgeValidatorsInterfacesVersion\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022major\u0022,\u0022type\u0022:\u0022uint64\u0022},{\u0022name\u0022:\u0022minor\u0022,\u0022type\u0022:\u0022uint64\u0022},{\u0022name\u0022:\u0022patch\u0022,\u0022type\u0022:\u0022uint64\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022pure\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022isInitialized\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_validator\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022removeValidator\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_validator\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022addValidator\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_requiredSignatures\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_initialValidators\u0022,\u0022type\u0022:\u0022address[]\u0022},{\u0022name\u0022:\u0022_owner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022initialize\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_requiredSignatures\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022setRequiredSignatures\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022requiredSignatures\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022owner\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022deployedAtBlock\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022transferOwnership\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_validator\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022validators\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_validator\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022isValidator\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022validator\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022ValidatorAdded\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022validator\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022ValidatorRemoved\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022requiredSignatures\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022RequiredSignaturesChanged\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022previousOwner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022OwnershipTransferred\u0022,\u0022type\u0022:\u0022event\u0022}]","ContractName":"BridgeValidators","CompilerVersion":"v0.4.24\u002Bcommit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://1868f95c1caf0db8be4ff0169d3918863166ab5b346848848961761a5650a437"}]