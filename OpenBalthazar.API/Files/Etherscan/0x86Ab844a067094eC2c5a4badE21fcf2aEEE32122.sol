[{"SourceCode":"pragma solidity ^0.4.26;\r\n\r\n\r\ncontract UtilGameFair {\r\n    uint ethWei = 1 ether;\r\n\r\n    function getLevel(uint value) public view returns (uint) {\r\n        if (value \u003E= 1 * ethWei \u0026\u0026 value \u003C= 5 * ethWei) {\r\n            return 1;\r\n        }\r\n        if (value \u003E= 6 * ethWei \u0026\u0026 value \u003C= 10 * ethWei) {\r\n            return 2;\r\n        }\r\n        if (value \u003E= 11 * ethWei \u0026\u0026 value \u003C= 15 * ethWei) {\r\n            return 3;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function getLineLevel(uint value) public view returns (uint) {\r\n        if (value \u003E= 1 * ethWei \u0026\u0026 value \u003C= 5 * ethWei) {\r\n            return 1;\r\n        }\r\n        if (value \u003E= 6 * ethWei \u0026\u0026 value \u003C= 10 * ethWei) {\r\n            return 2;\r\n        }\r\n        if (value \u003E= 11 * ethWei) {\r\n            return 3;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function getScByLevel(uint level) public pure returns (uint) {\r\n        if (level == 1) {\r\n            return 5;\r\n        }\r\n        if (level == 2) {\r\n            return 7;\r\n        }\r\n        if (level == 3) {\r\n            return 10;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function getFireScByLevel(uint level) public pure returns (uint) {\r\n        if (level == 1) {\r\n            return 3;\r\n        }\r\n        if (level == 2) {\r\n            return 6;\r\n        }\r\n        if (level == 3) {\r\n            return 10;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function getRecommendScaleByLevelAndTim(uint level, uint times) public pure returns (uint){\r\n        if (level == 1 \u0026\u0026 times == 1) {\r\n            return 50;\r\n        }\r\n        if (level == 2 \u0026\u0026 times == 1) {\r\n            return 70;\r\n        }\r\n        if (level == 2 \u0026\u0026 times == 2) {\r\n            return 50;\r\n        }\r\n        if (level == 3) {\r\n            if (times == 1) {\r\n                return 100;\r\n            }\r\n            if (times == 2) {\r\n                return 70;\r\n            }\r\n            if (times == 3) {\r\n                return 50;\r\n            }\r\n            if (times \u003E= 4 \u0026\u0026 times \u003C= 10) {\r\n                return 10;\r\n            }\r\n            if (times \u003E= 11 \u0026\u0026 times \u003C= 20) {\r\n                return 5;\r\n            }\r\n            if (times \u003E= 21) {\r\n                return 1;\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function compareStr(string memory _str, string memory str) public pure returns (bool) {\r\n        if (keccak256(abi.encodePacked(_str)) == keccak256(abi.encodePacked(str))) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n}\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor() internal {}\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this;\r\n        // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * \u0060onlyOwner\u0060, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        _owner = _msgSender();\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \u0022Ownable: caller is not the owner\u0022);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * \u0060onlyOwner\u0060 functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (\u0060newOwner\u0060).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (\u0060newOwner\u0060).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \u0022Ownable: new owner is the zero address\u0022);\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping(address =\u003E bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev Give an account access to this role.\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(!has(role, account), \u0022Roles: account already has role\u0022);\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Remove an account\u0027s access to this role.\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(has(role, account), \u0022Roles: account does not have role\u0022);\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Check if an account has this role.\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0), \u0022Roles: account is the zero address\u0022);\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\n/**\r\n * @title WhitelistAdminRole\r\n * @dev WhitelistAdmins are responsible for assigning and removing Whitelisted accounts.\r\n */\r\ncontract WhitelistAdminRole is Context, Ownable {\r\n    using Roles for Roles.Role;\r\n\r\n    event WhitelistAdminAdded(address indexed account);\r\n    event WhitelistAdminRemoved(address indexed account);\r\n\r\n    Roles.Role private _whitelistAdmins;\r\n\r\n    constructor () internal {\r\n        _addWhitelistAdmin(_msgSender());\r\n    }\r\n\r\n    modifier onlyWhitelistAdmin() {\r\n        require(isWhitelistAdmin(_msgSender()) || isOwner(), \u0022WhitelistAdminRole: caller does not have the WhitelistAdmin role\u0022);\r\n        _;\r\n    }\r\n\r\n    function isWhitelistAdmin(address account) public view returns (bool) {\r\n        return _whitelistAdmins.has(account);\r\n    }\r\n\r\n    function addWhitelistAdmin(address account) public onlyWhitelistAdmin {\r\n        _addWhitelistAdmin(account);\r\n    }\r\n\r\n    function removeWhitelistAdmin(address account) public onlyOwner {\r\n        _whitelistAdmins.remove(account);\r\n        emit WhitelistAdminRemoved(account);\r\n    }\r\n\r\n    function renounceWhitelistAdmin() public {\r\n        _removeWhitelistAdmin(_msgSender());\r\n    }\r\n\r\n    function _addWhitelistAdmin(address account) internal {\r\n        _whitelistAdmins.add(account);\r\n        emit WhitelistAdminAdded(account);\r\n    }\r\n\r\n    function _removeWhitelistAdmin(address account) internal {\r\n        _whitelistAdmins.remove(account);\r\n        emit WhitelistAdminRemoved(account);\r\n    }\r\n}\r\n\r\ncontract GameFair is UtilGameFair, WhitelistAdminRole {\r\n\r\n    using SafeMath for *;\r\n\r\n    string constant private name = \u0022GameFair Official\u0022;\r\n\r\n    uint ethWei = 1 ether;\r\n\r\n    address  private devAddr = address(0x933a751586E7A0658513D1113521A92d9c41fe58);\r\n\r\n    struct User {\r\n        uint id;\r\n        address userAddress;\r\n        string inviteCode;\r\n        string referrer;\r\n        uint staticLevel;\r\n        uint dynamicLevel;\r\n        uint allInvest;\r\n        uint freezeAmount;\r\n        uint unlockAmount;\r\n        uint allStaticAmount;\r\n        uint allDynamicAmount;\r\n        uint hisStaticAmount;\r\n        uint hisDynamicAmount;\r\n        Invest[] invests;\r\n        SeizeInvest[] seizesInvests;\r\n        uint votes;\r\n        uint staticFlag;\r\n    }\r\n\r\n    struct UserGlobal {\r\n        uint id;\r\n        address userAddress;\r\n        string inviteCode;\r\n        string referrer;\r\n        uint inviteCount;\r\n    }\r\n\r\n    struct Invest {\r\n        address userAddress;\r\n        uint investAmount;\r\n        uint investTime;\r\n        uint times;\r\n    }\r\n\r\n    struct SeizeInvest {\r\n        uint rid;\r\n        address userAddress;\r\n        uint seizeAmount;\r\n        uint seizeTime;\r\n    }\r\n\r\n    string constant systemCode = \u002299999999\u0022;\r\n    uint startTime;\r\n    uint investCount = 0;\r\n    mapping(uint =\u003E uint) rInvestCount;\r\n    uint investMoney = 0;\r\n    mapping(uint =\u003E uint) rInvestMoney;\r\n    uint userAssets = 0;\r\n\r\n    uint uid = 0;\r\n    uint rid = 1;\r\n    uint period = 6 hours;\r\n\r\n    uint voteStartSc = 80;\r\n    uint gameStatus = 1;\r\n    uint voteEndTime = 0;\r\n    uint seizeEndTime = 0;\r\n\r\n    uint[] voteResult = [0, 0];\r\n    mapping(uint =\u003E SeizeInvest) lastSeizeInvest;\r\n\r\n    mapping(uint =\u003E mapping(address =\u003E User)) userRoundMapping;\r\n    mapping(address =\u003E UserGlobal) userMapping;\r\n    mapping(string =\u003E address) addressMapping;\r\n    mapping(uint =\u003E address) public indexMapping;\r\n\r\n    modifier isHuman() {\r\n        address addr = msg.sender;\r\n        uint codeLength;\r\n\r\n        assembly {codeLength := extcodesize(addr)}\r\n        require(codeLength == 0, \u0022sorry humans only\u0022);\r\n        require(tx.origin == msg.sender, \u0022sorry, human only\u0022);\r\n        _;\r\n    }\r\n\r\n    event LogInvestIn(address indexed who, uint indexed uid, uint amount, uint time, string inviteCode, string referrer);\r\n    event LogWithdrawProfit(address indexed who, uint indexed uid, uint amount, uint time);\r\n    event LogRedeem(address indexed who, uint indexed uid, uint amount, uint now);\r\n    event VoteStart(uint startTime, uint endTime);\r\n    event SeizeInvestNow(address indexed who, uint indexed uid, uint amount, uint now);\r\n\r\n    constructor () public {\r\n        startTime = now;\r\n    }\r\n\r\n    function() external payable {\r\n    }\r\n\r\n    function gameStart() public view returns (bool) {\r\n        return startTime != 0 \u0026\u0026 now \u003E startTime \u0026\u0026 gameStatus == 1;\r\n    }\r\n\r\n    function investIn(string memory inviteCode, string memory referrer) public isHuman() payable {\r\n        require(now \u003E startTime \u0026\u0026 gameStatus == 1, \u0022invest is not allowed now\u0022);\r\n        require(msg.value \u003E= 1 * ethWei \u0026\u0026 msg.value \u003C= 15 * ethWei, \u0022between 1 and 15\u0022);\r\n        require(msg.value == msg.value.div(ethWei).mul(ethWei), \u0022invalid msg value\u0022);\r\n\r\n        UserGlobal storage userGlobal = userMapping[msg.sender];\r\n        if (userGlobal.id == 0) {\r\n            require(!compareStr(inviteCode, \u0022\u0022), \u0022empty invite code\u0022);\r\n            address referrerAddr = getUserAddressByCode(referrer);\r\n            require(uint(referrerAddr) != 0, \u0022referer not exist\u0022);\r\n            require(referrerAddr != msg.sender, \u0022referrer can\u0027t be self\u0022);\r\n            require(!isUsed(inviteCode), \u0022invite code is used\u0022);\r\n            registerUser(msg.sender, inviteCode, referrer);\r\n        }\r\n\r\n        User storage user = userRoundMapping[rid][msg.sender];\r\n        if (uint(user.userAddress) != 0) {\r\n            require(user.freezeAmount.add(msg.value) \u003C= 15 * ethWei, \u0022can not beyond 15 eth\u0022);\r\n            user.allInvest = user.allInvest.add(msg.value);\r\n            user.freezeAmount = user.freezeAmount.add(msg.value);\r\n            user.staticLevel = getLevel(user.freezeAmount);\r\n            user.dynamicLevel = getLineLevel(user.freezeAmount.add(user.unlockAmount));\r\n        } else {\r\n            user.id = userGlobal.id;\r\n            user.userAddress = msg.sender;\r\n            user.freezeAmount = msg.value;\r\n            user.staticLevel = getLevel(msg.value);\r\n            user.allInvest = msg.value;\r\n            user.dynamicLevel = getLineLevel(msg.value);\r\n            user.inviteCode = userGlobal.inviteCode;\r\n            user.referrer = userGlobal.referrer;\r\n        }\r\n\r\n        Invest memory invest = Invest(msg.sender, msg.value, now, 0);\r\n        user.invests.push(invest);\r\n        user.votes \u002B= (msg.value.div(ethWei));\r\n\r\n        investCount = investCount.add(1);\r\n        investMoney = investMoney.add(msg.value);\r\n        rInvestCount[rid] = rInvestCount[rid].add(1);\r\n        rInvestMoney[rid] = rInvestMoney[rid].add(msg.value);\r\n        userAssets \u002B= msg.value;\r\n        sendFeetoAdmin(msg.value);\r\n        emit LogInvestIn(msg.sender, userGlobal.id, msg.value, now, userGlobal.inviteCode, userGlobal.referrer);\r\n    }\r\n\r\n    function seizeInvest(string memory inviteCode) public isHuman() payable {\r\n        require(seizeEndTime \u003E now, \u0022seize invest not start\u0022);\r\n        require(!compareStr(inviteCode, \u0022\u0022), \u0022empty invite code\u0022);\r\n        require(msg.value \u003E= 1 * ethWei \u0026\u0026 msg.value \u003C= 15 * ethWei, \u0022between 1 and 15\u0022);\r\n        require(msg.value == msg.value.div(ethWei).mul(ethWei), \u0022invalid msg value\u0022);\r\n\r\n        UserGlobal storage userGlobal = userMapping[msg.sender];\r\n        if (userGlobal.id == 0) {\r\n            require(!isUsed(inviteCode), \u0022invite code is used\u0022);\r\n            registerUser(msg.sender, inviteCode, \u0022\u0022);\r\n        }\r\n        User storage user = userRoundMapping[rid][msg.sender];\r\n        SeizeInvest memory si = SeizeInvest(rid, msg.sender, msg.value, now);\r\n        if (uint(user.userAddress) != 0) {\r\n            user.unlockAmount = user.unlockAmount.add(msg.value);\r\n            user.allInvest \u002B= msg.value;\r\n        } else {\r\n            user.id = userGlobal.id;\r\n            user.userAddress = msg.sender;\r\n            user.allInvest = msg.value;\r\n            user.inviteCode = userGlobal.inviteCode;\r\n            user.referrer = userGlobal.referrer;\r\n            user.unlockAmount = msg.value;\r\n        }\r\n        user.seizesInvests.push(si);\r\n        investMoney = investMoney.add(msg.value);\r\n        userAssets \u002B= msg.value;\r\n        lastSeizeInvest[rid] = si;\r\n        emit SeizeInvestNow(msg.sender, userGlobal.id, msg.value, now);\r\n    }\r\n\r\n    function voteComplete() external onlyWhitelistAdmin {\r\n        require(gameStatus == 2, \u0022game status error\u0022);\r\n        if (voteResult[0] \u003E voteResult[1]) {\r\n            startTime = now.add(period);\r\n            voteStartSc = 80;\r\n            uint sc = address(this).balance.mul(100).div(userAssets);\r\n            for (uint i = 1; i \u003C= uid; i\u002B\u002B) {\r\n                address userAddr = indexMapping[i];\r\n                User storage previousUser = userRoundMapping[rid][userAddr];\r\n                User storage curUser = userRoundMapping[rid \u002B 1][userAddr];\r\n                curUser.id = previousUser.id;\r\n                curUser.userAddress = previousUser.userAddress;\r\n                curUser.inviteCode = previousUser.inviteCode;\r\n                curUser.referrer = previousUser.referrer;\r\n                curUser.allInvest = previousUser.allInvest;\r\n                curUser.unlockAmount = previousUser.freezeAmount.add(previousUser.unlockAmount).mul(sc).div(100);\r\n                curUser.freezeAmount = 0;\r\n                curUser.allStaticAmount = previousUser.allStaticAmount.mul(sc).div(100);\r\n                curUser.allDynamicAmount = previousUser.allDynamicAmount.mul(sc).div(100);\r\n                curUser.votes = curUser.unlockAmount.div(ethWei);\r\n                curUser.hisStaticAmount = previousUser.hisStaticAmount;\r\n                curUser.hisDynamicAmount = previousUser.hisDynamicAmount;\r\n                curUser.staticLevel = 0;\r\n                curUser.dynamicLevel = getLineLevel(curUser.unlockAmount);\r\n            }\r\n            rid\u002B\u002B;\r\n        } else {\r\n            for (i = 1; i \u003C= uid; i\u002B\u002B) {\r\n                userAddr = indexMapping[i];\r\n                curUser = userRoundMapping[rid][userAddr];\r\n                curUser.votes = curUser.freezeAmount.add(curUser.unlockAmount).div(ethWei);\r\n            }\r\n            lastSeizeInvest[rid] = SeizeInvest(rid, 0x00, 0, 0);\r\n        }\r\n\r\n        gameStatus = 1;\r\n        voteResult = [0, 0];\r\n    }\r\n\r\n    function withdrawProfit()\r\n    public\r\n    isHuman() {\r\n        require(now \u003E startTime \u0026\u0026 gameStatus == 1, \u0022now not withdrawal\u0022);\r\n        User storage user = userRoundMapping[rid][msg.sender];\r\n        uint sendMoney = user.allStaticAmount.add(user.allDynamicAmount);\r\n\r\n        bool isEnough = false;\r\n        uint resultMoney = 0;\r\n        (isEnough, resultMoney) = isEnoughBalance(sendMoney);\r\n        if (!isEnough) {\r\n            endRound();\r\n        }\r\n\r\n        if (resultMoney \u003E 0) {\r\n            sendMoneyToUser(msg.sender, resultMoney);\r\n            user.allStaticAmount = 0;\r\n            user.allDynamicAmount = 0;\r\n            userAssets -= resultMoney;\r\n            checkVote();\r\n            emit LogWithdrawProfit(msg.sender, user.id, resultMoney, now);\r\n        }\r\n    }\r\n\r\n    function isEnoughBalance(uint sendMoney) private view returns (bool, uint) {\r\n        if (sendMoney \u003E= address(this).balance) {\r\n            return (false, address(this).balance);\r\n        } else {\r\n            return (true, sendMoney);\r\n        }\r\n    }\r\n\r\n    function sendMoneyToUser(address userAddress, uint money) private {\r\n        userAddress.transfer(money);\r\n    }\r\n\r\n    function calStaticProfit(address userAddr) external onlyWhitelistAdmin returns (uint) {\r\n        return calStaticProfitInner(userAddr);\r\n    }\r\n\r\n    function calStaticProfitInner(address userAddr) private returns (uint) {\r\n        User storage user = userRoundMapping[rid][userAddr];\r\n        if (user.id == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint scale = getScByLevel(user.staticLevel);\r\n        uint allStatic = 0;\r\n        for (uint i = user.staticFlag; i \u003C user.invests.length; i\u002B\u002B) {\r\n            Invest storage invest = user.invests[i];\r\n            uint startDay = invest.investTime.sub(8 hours).div(1 days).mul(1 days);\r\n            uint staticGaps = now.sub(8 hours).sub(startDay).div(1 days);\r\n            uint unlockDay = now.sub(invest.investTime).div(1 days);\r\n\r\n            if (staticGaps \u003E 5) {\r\n                staticGaps = 5;\r\n            }\r\n            if (staticGaps \u003E invest.times) {\r\n                allStatic \u002B= staticGaps.sub(invest.times).mul(scale).mul(invest.investAmount).div(1000);\r\n                invest.times = staticGaps;\r\n            }\r\n\r\n            if (unlockDay \u003E= 5) {\r\n                user.staticFlag\u002B\u002B;\r\n                user.freezeAmount = user.freezeAmount.sub(invest.investAmount);\r\n                user.unlockAmount = user.unlockAmount.add(invest.investAmount);\r\n                user.staticLevel = getLevel(user.freezeAmount);\r\n            }\r\n        }\r\n        allStatic = allStatic.mul(getCoefficientInner()).div(100);\r\n        user.allStaticAmount = user.allStaticAmount.add(allStatic);\r\n        user.hisStaticAmount = user.hisStaticAmount.add(allStatic);\r\n        userRoundMapping[rid][userAddr] = user;\r\n        userAssets \u002B= allStatic;\r\n        return user.allStaticAmount;\r\n    }\r\n\r\n    function calDynamicProfit(uint start, uint end) external onlyWhitelistAdmin {\r\n        for (uint i = start; i \u003C= end; i\u002B\u002B) {\r\n            address userAddr = indexMapping[i];\r\n            User memory user = userRoundMapping[rid][userAddr];\r\n            calStaticProfitInner(userAddr);\r\n            if (user.freezeAmount \u003E= 1 * ethWei) {\r\n                uint scale = getScByLevel(user.staticLevel);\r\n                calUserDynamicProfit(user.referrer, user.freezeAmount, scale);\r\n            }\r\n        }\r\n        checkVote();\r\n    }\r\n\r\n    function registerUserInfo(address user, string inviteCode, string referrer) external onlyOwner {\r\n        registerUser(user, inviteCode, referrer);\r\n    }\r\n\r\n    function calUserDynamicProfit(string memory referrer, uint money, uint shareSc) internal {\r\n        string memory tmpReferrer = referrer;\r\n        for (uint i = 1; i \u003C= 30; i\u002B\u002B) {\r\n            if (compareStr(tmpReferrer, \u0022\u0022)) {\r\n                break;\r\n            }\r\n            address tmpUserAddr = addressMapping[tmpReferrer];\r\n            User storage calUser = userRoundMapping[rid][tmpUserAddr];\r\n\r\n            uint fireSc = getFireScByLevel(calUser.staticLevel);\r\n            uint recommendSc = getRecommendScaleByLevelAndTim(calUser.dynamicLevel, i);\r\n            uint moneyResult = 0;\r\n            if (money \u003C= calUser.freezeAmount.add(calUser.unlockAmount)) {\r\n                moneyResult = money;\r\n            } else {\r\n                moneyResult = calUser.freezeAmount.add(calUser.unlockAmount);\r\n            }\r\n\r\n            if (recommendSc != 0) {\r\n                uint tmpDynamicAmount = moneyResult.mul(shareSc).mul(fireSc).mul(recommendSc);\r\n                tmpDynamicAmount = tmpDynamicAmount.div(1000).div(10).div(100);\r\n\r\n                tmpDynamicAmount = tmpDynamicAmount.mul(getCoefficientInner()).div(100);\r\n                calUser.allDynamicAmount = calUser.allDynamicAmount.add(tmpDynamicAmount);\r\n                calUser.hisDynamicAmount = calUser.hisDynamicAmount.add(tmpDynamicAmount);\r\n                userAssets \u002B= tmpDynamicAmount;\r\n            }\r\n\r\n            tmpReferrer = calUser.referrer;\r\n        }\r\n    }\r\n\r\n    function checkVote() internal {\r\n        uint thisBalance = address(this).balance;\r\n        uint sc = thisBalance.mul(100).div(userAssets);\r\n        if (sc \u003C 80 \u0026\u0026 sc \u003E 60 \u0026\u0026 voteStartSc == 80) {\r\n            voteStart(60);\r\n        } else if (sc \u003C 60 \u0026\u0026 sc \u003E 40 \u0026\u0026 voteStartSc == 60) {\r\n            voteStart(40);\r\n        } else if (sc \u003C 40 \u0026\u0026 sc \u003E 20 \u0026\u0026 voteStartSc == 40) {\r\n            voteStart(20);\r\n        } else if (sc \u003C 20 \u0026\u0026 sc \u003E 0 \u0026\u0026 voteStartSc == 20) {\r\n            voteStart(0);\r\n        }\r\n    }\r\n\r\n    function voteStart(uint nextSc) internal {\r\n        voteStartSc = nextSc;\r\n        gameStatus = 2;\r\n        voteEndTime = now.add(120 minutes);\r\n        seizeEndTime = now.add(30 minutes);\r\n        emit VoteStart(now, voteEndTime);\r\n    }\r\n\r\n    function redeem() public isHuman() {\r\n        require(now \u003E startTime \u0026\u0026 gameStatus == 1, \u0022now not withdrawal\u0022);\r\n        User storage user = userRoundMapping[rid][msg.sender];\r\n        require(user.id \u003E 0, \u0022user not exist\u0022);\r\n\r\n        calStaticProfitInner(msg.sender);\r\n\r\n        uint sendMoney = user.unlockAmount;\r\n        bool isEnough = false;\r\n        uint resultMoney = 0;\r\n\r\n        (isEnough, resultMoney) = isEnoughBalance(sendMoney);\r\n        if (!isEnough) {\r\n            endRound();\r\n        }\r\n\r\n        if (resultMoney \u003E 0) {\r\n            sendMoneyToUser(msg.sender, resultMoney);\r\n            user.unlockAmount = 0;\r\n            user.staticLevel = getLevel(user.freezeAmount);\r\n            user.dynamicLevel = getLineLevel(user.freezeAmount);\r\n            userAssets -= resultMoney;\r\n            user.votes -= (resultMoney.div(ethWei));\r\n            checkVote();\r\n            emit LogRedeem(msg.sender, user.id, resultMoney, now);\r\n        }\r\n    }\r\n\r\n    function vote(uint voteCount, uint voteIntent) public isHuman() {\r\n        require(voteCount \u003E 0, \u0022vote count error\u0022);\r\n        require(gameStatus == 2 \u0026\u0026 voteEndTime \u003E now, \u0022vote not start\u0022);\r\n        User storage user = userRoundMapping[rid][msg.sender];\r\n        require(user.votes \u003E= voteCount, \u0022vote count error\u0022);\r\n        if (voteIntent == 0) {\r\n            voteResult[0] \u002B= voteCount;\r\n        } else {\r\n            voteResult[1] \u002B= voteCount;\r\n        }\r\n        user.votes -= voteCount;\r\n    }\r\n\r\n    function reInvestIn(uint investAmount) public isHuman() {\r\n        require(now \u003E startTime \u0026\u0026 gameStatus == 1, \u0022invest is not allowed now\u0022);\r\n        require(investAmount == investAmount.div(ethWei).mul(ethWei), \u0022invalid msg value\u0022);\r\n        User storage user = userRoundMapping[rid][msg.sender];\r\n        require(user.unlockAmount \u003E= investAmount \u0026\u0026 investAmount \u003E 0, \u0022reinvest count error\u0022);\r\n        uint allFreezeAmount = user.freezeAmount.add(investAmount);\r\n        require(allFreezeAmount \u003C= 15 * ethWei, \u0022can not beyond 15 eth\u0022);\r\n        user.unlockAmount = user.unlockAmount.sub(investAmount);\r\n        user.freezeAmount = user.freezeAmount.add(investAmount);\r\n        user.staticLevel = getLevel(user.freezeAmount);\r\n        user.dynamicLevel = getLineLevel(user.freezeAmount.add(user.unlockAmount));\r\n\r\n        Invest memory invest = Invest(msg.sender, investAmount, now, 0);\r\n        user.invests.push(invest);\r\n        user.votes -= (investAmount.div(ethWei));\r\n    }\r\n\r\n    function getCoefficient() public view returns (uint) {\r\n        return getCoefficientInner();\r\n    }\r\n\r\n    function getCoefficientInner() internal view returns (uint) {\r\n        if (userAssets == 0) {\r\n            return 100;\r\n        }\r\n        uint thisBalance = address(this).balance;\r\n        uint coefficient = thisBalance.mul(100).div(userAssets);\r\n        if (coefficient \u003E= 80) {\r\n            return 100;\r\n        }\r\n        if (coefficient \u003E= 60) {\r\n            return 125;\r\n        }\r\n        if (coefficient \u003E= 40) {\r\n            return 167;\r\n        }\r\n        if (coefficient \u003E= 20) {\r\n            return 250;\r\n        }\r\n        if (coefficient \u003E 0) {\r\n            return 300;\r\n        }\r\n        return 100;\r\n    }\r\n\r\n    function endRound() private {\r\n        rid\u002B\u002B;\r\n        gameStatus = 1;\r\n        userAssets = 0;\r\n        startTime = now.add(period).div(1 hours).mul(1 hours);\r\n        voteStartSc = 80;\r\n        voteResult = [0, 0];\r\n        voteEndTime = 0;\r\n    }\r\n\r\n    function isUsed(string memory code) public view returns (bool) {\r\n        address user = getUserAddressByCode(code);\r\n        return uint(user) != 0;\r\n    }\r\n\r\n    function getUserAddressByCode(string memory code) public view returns (address) {\r\n        return addressMapping[code];\r\n    }\r\n\r\n    function sendFeetoAdmin(uint amount) private {\r\n        devAddr.transfer(amount.div(16));\r\n    }\r\n\r\n    function getGameInfo() public isHuman() view returns (uint, uint, uint, uint, uint, uint, uint, uint, uint, uint, uint, uint) {\r\n        uint coeff = getCoefficientInner();\r\n        uint balance = address(this).balance;\r\n        return (\r\n        rid,\r\n        uid,\r\n        startTime,\r\n        balance,\r\n        userAssets,\r\n        investCount,\r\n        investMoney,\r\n        rInvestCount[rid],\r\n        rInvestMoney[rid],\r\n        coeff,\r\n        gameStatus,\r\n        voteStartSc\r\n        );\r\n    }\r\n\r\n    function getSeizeInfo(uint r) public isHuman() view returns (address, uint, uint) {\r\n        uint thisBalance = address(this).balance;\r\n        uint coefficient = thisBalance.mul(100).div(userAssets);\r\n        uint mult = 0;\r\n        if (coefficient \u003E 60) {\r\n            mult = 3;\r\n        } else if (coefficient \u003E 40) {\r\n            mult = 4;\r\n        } else if (coefficient \u003E 20) {\r\n            mult = 6;\r\n        } else if (coefficient \u003E 0) {\r\n            mult = 8;\r\n        } else {\r\n            mult = 10;\r\n        }\r\n        return (\r\n        lastSeizeInvest[r].userAddress,\r\n        lastSeizeInvest[r].seizeAmount,\r\n        mult\r\n        );\r\n    }\r\n\r\n    function getVoteResult() public isHuman view returns (uint, uint, uint, uint){\r\n        return (\r\n        seizeEndTime,\r\n        voteEndTime,\r\n        voteResult[0],\r\n        voteResult[1]\r\n        );\r\n    }\r\n\r\n    function getUserInfo(address user, uint roundId) public isHuman() view returns (uint[11] memory ct, uint inviteCount, string memory inviteCode, string memory referrer) {\r\n        if (roundId == 0) {\r\n            roundId = rid;\r\n        }\r\n\r\n        User memory userInfo = userRoundMapping[roundId][user];\r\n        ct[0] = userInfo.id;\r\n        ct[1] = userInfo.staticLevel;\r\n        ct[2] = userInfo.dynamicLevel;\r\n        ct[3] = userInfo.allInvest;\r\n        ct[4] = userInfo.freezeAmount;\r\n        ct[5] = userInfo.unlockAmount;\r\n        ct[6] = userInfo.allStaticAmount;\r\n        ct[7] = userInfo.allDynamicAmount;\r\n        ct[8] = userInfo.hisStaticAmount;\r\n        ct[9] = userInfo.hisDynamicAmount;\r\n        ct[10] = userInfo.votes;\r\n        UserGlobal storage userGlobal = userMapping[user];\r\n        return (ct, userGlobal.id == 0 ? 0 : userGlobal.inviteCount, userGlobal.inviteCode, userGlobal.referrer);\r\n    }\r\n\r\n    function getLatestUnlockAmount(address userAddr) public view returns (uint)\r\n    {\r\n        User memory user = userRoundMapping[rid][userAddr];\r\n        uint allUnlock = user.unlockAmount;\r\n        for (uint i = user.staticFlag; i \u003C user.invests.length; i\u002B\u002B) {\r\n            Invest memory invest = user.invests[i];\r\n            uint unlockDay = now.sub(invest.investTime).div(1 days);\r\n\r\n            if (unlockDay \u003E= 5) {\r\n                allUnlock = allUnlock.add(invest.investAmount);\r\n            }\r\n        }\r\n        return allUnlock;\r\n    }\r\n\r\n    function registerUser(address user, string memory inviteCode, string memory referrer) private {\r\n        UserGlobal storage userGlobal = userMapping[user];\r\n        uid\u002B\u002B;\r\n        userGlobal.id = uid;\r\n        userGlobal.userAddress = user;\r\n        userGlobal.inviteCode = inviteCode;\r\n        userGlobal.referrer = referrer;\r\n        userGlobal.inviteCount = 0;\r\n\r\n        addressMapping[inviteCode] = user;\r\n        indexMapping[uid] = user;\r\n\r\n        address parentAddr = getUserAddressByCode(referrer);\r\n        UserGlobal storage parent = userMapping[parentAddr];\r\n        parent.inviteCount \u002B= 1;\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\r\n        // benefit is lost if \u0027b\u0027 is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \u0022mul overflow\u0022);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b \u003E 0, \u0022div zero\u0022);\r\n        // Solidity only automatically asserts when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c \u002B a % b); // There is no case in which this doesn\u0027t hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b \u003C= a, \u0022lower sub bigger\u0022);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a \u002B b;\r\n        require(c \u003E= a, \u0022overflow\u0022);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \u0022mod zero\u0022);\r\n        return a % b;\r\n    }\r\n}","ABI":"[{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022start\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022end\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022calDynamicProfit\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022getGameInfo\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022level\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022times\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022getRecommendScaleByLevelAndTim\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022pure\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022getLineLevel\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022gameStart\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022inviteCode\u0022,\u0022type\u0022:\u0022string\u0022},{\u0022name\u0022:\u0022referrer\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022name\u0022:\u0022investIn\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:true,\u0022stateMutability\u0022:\u0022payable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022renounceWhitelistAdmin\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022code\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022name\u0022:\u0022isUsed\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022investAmount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022reInvestIn\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022removeWhitelistAdmin\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022renounceOwnership\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022addWhitelistAdmin\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022user\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022roundId\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022getUserInfo\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022ct\u0022,\u0022type\u0022:\u0022uint256[11]\u0022},{\u0022name\u0022:\u0022inviteCount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022inviteCode\u0022,\u0022type\u0022:\u0022string\u0022},{\u0022name\u0022:\u0022referrer\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022getLevel\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022getVoteResult\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_str\u0022,\u0022type\u0022:\u0022string\u0022},{\u0022name\u0022:\u0022str\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022name\u0022:\u0022compareStr\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022pure\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022owner\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022isOwner\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022userAddr\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022calStaticProfit\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022withdrawProfit\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022inviteCode\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022name\u0022:\u0022seizeInvest\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:true,\u0022stateMutability\u0022:\u0022payable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022voteComplete\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022code\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022name\u0022:\u0022getUserAddressByCode\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022user\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022inviteCode\u0022,\u0022type\u0022:\u0022string\u0022},{\u0022name\u0022:\u0022referrer\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022name\u0022:\u0022registerUserInfo\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022indexMapping\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022getCoefficient\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022voteCount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022voteIntent\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022vote\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022isWhitelistAdmin\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022redeem\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022level\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022getFireScByLevel\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022pure\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022r\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022getSeizeInfo\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022userAddr\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022getLatestUnlockAmount\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022transferOwnership\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022level\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022getScByLevel\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022pure\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022constructor\u0022},{\u0022payable\u0022:true,\u0022stateMutability\u0022:\u0022payable\u0022,\u0022type\u0022:\u0022fallback\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022who\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022uid\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022time\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022inviteCode\u0022,\u0022type\u0022:\u0022string\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022referrer\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022name\u0022:\u0022LogInvestIn\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022who\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022uid\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022time\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022LogWithdrawProfit\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022who\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022uid\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022now\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022LogRedeem\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022startTime\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022endTime\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022VoteStart\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022who\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022uid\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022now\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022SeizeInvestNow\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022WhitelistAdminAdded\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022WhitelistAdminRemoved\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022previousOwner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022OwnershipTransferred\u0022,\u0022type\u0022:\u0022event\u0022}]","ContractName":"GameFair","CompilerVersion":"v0.4.26\u002Bcommit.4563c3fc","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://04745c879fd280f52dba8b66ae1add98ba2a7cf6d93dadf0f3a2fecfc9b27592"}]