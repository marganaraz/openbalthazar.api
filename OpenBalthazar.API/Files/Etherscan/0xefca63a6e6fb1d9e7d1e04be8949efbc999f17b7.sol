[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\nlibrary SafeCast {\r\n    /**\r\n     * Cast unsigned a to signed a.\r\n     */\r\n    function castToInt(uint a) internal pure returns(int) {\r\n        assert(a \u003C (1 \u003C\u003C 255));\r\n        return int(a);\r\n    }\r\n\r\n    /**\r\n     * Cast signed a to unsigned a.\r\n     */\r\n    function castToUint(int a) internal pure returns(uint) {\r\n        assert(a \u003E= 0);\r\n        return uint(a);\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two unsigned integers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        // Gas optimization: this is cheaper than asserting \u0027a\u0027 not being zero, but the\r\n        // benefit is lost if \u0027b\u0027 is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Multiplies two signed integers, throws on overflow.\r\n    */\r\n    function mul(int256 a, int256 b) internal pure returns (int256) {\r\n        // Gas optimization: this is cheaper than asserting \u0027a\u0027 not being zero, but the\r\n        // benefit is lost if \u0027b\u0027 is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        int256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two unsigned integers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b \u003E 0); // Solidity automatically throws when dividing by 0\r\n        // uint256 c = a / b;\r\n        // assert(a == b * c \u002B a % b); // There is no case in which this doesn\u0027t hold\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two signed integers, truncating the quotient.\r\n    */\r\n    function div(int256 a, int256 b) internal pure returns (int256) {\r\n        // assert(b \u003E 0); // Solidity automatically throws when dividing by 0\r\n        // Overflow only happens when the smallest negative int is multiplied by -1.\r\n        int256 INT256_MIN = int256((uint256(1) \u003C\u003C 255));\r\n        assert(a != INT256_MIN || b != - 1);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two unsigned integers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b \u003C= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two signed integers, throws on overflow.\r\n    */\r\n    function sub(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a - b;\r\n        assert((b \u003E= 0 \u0026\u0026 c \u003C= a) || (b \u003C 0 \u0026\u0026 c \u003E a));\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two unsigned integers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a \u002B b;\r\n        assert(c \u003E= a);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two signed integers, throws on overflow.\r\n    */\r\n    function add(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a \u002B b;\r\n        assert((b \u003E= 0 \u0026\u0026 c \u003E= a) || (b \u003C 0 \u0026\u0026 c \u003C a));\r\n        return c;\r\n    }\r\n}\r\n\r\ninterface GameInterface {\r\n    function maxBet(uint _num, uint _bankRoll) external view returns(uint);\r\n\r\n    function resultNumber(bytes32 _serverSeed, bytes32 _userSeed, uint _num) external view returns(uint);\r\n\r\n    function userProfit(uint _num, uint _betValue, uint _resultNum) external view returns(int);\r\n\r\n    function maxUserProfit(uint _num, uint _betValue) external view returns(int);\r\n}\r\n\r\ncontract Utilities {\r\n    using SafeCast for int;\r\n    using SafeCast for uint;\r\n    using SafeMath for int;\r\n    using SafeMath for uint;\r\n\r\n    uint constant public PROBABILITY_DIVISOR = 10000;\r\n    uint constant public HOUSE_EDGE = 150;\r\n    uint constant public HOUSE_EDGE_DIVISOR = 10000;\r\n\r\n    /**\r\n     * @dev Calc max bet we allow\r\n     * We definitely do not allow bets greater than kelly criterion would allow.\r\n     * =\u003E The max bet is limited to the max profit of houseEdge * bankroll.\r\n     * =\u003E maxBet = houseEdge / (1/p * (1 - houseEdge) - 1) * bankroll, with p is win probability.\r\n     * The max bet can be further restricted on backend.\r\n     * @param _winProbability winProbability.\r\n     * @return max allowed bet.\r\n     */\r\n    function maxBetFromProbability(uint _winProbability, uint _bankRoll) public pure returns(uint) {\r\n        assert(0 \u003C _winProbability \u0026\u0026 _winProbability \u003C PROBABILITY_DIVISOR);\r\n\r\n        uint tmp1 = PROBABILITY_DIVISOR.mul(HOUSE_EDGE_DIVISOR).div(_winProbability);\r\n        uint tmp2 = PROBABILITY_DIVISOR.mul(HOUSE_EDGE).div(_winProbability);\r\n\r\n        uint enumerator = HOUSE_EDGE.mul(_bankRoll);\r\n        uint denominator = tmp1.sub(tmp2).sub(HOUSE_EDGE_DIVISOR);\r\n        return enumerator.div(denominator);\r\n    }\r\n\r\n    /**\r\n     * Calculate user profit from total won.\r\n     * @param _totalWon user winnings.\r\n     * @param _betValue bet value.\r\n     * @return user profit.\r\n     */\r\n    function calcProfitFromTotalWon(uint _totalWon, uint _betValue) public pure returns(int) {\r\n        uint houseEdgeValue = _totalWon.mul(HOUSE_EDGE).div(HOUSE_EDGE_DIVISOR);\r\n\r\n        return _totalWon.castToInt().sub(houseEdgeValue.castToInt()).sub(_betValue.castToInt());\r\n    }\r\n\r\n    /**\r\n     * @dev Generates a 256 bit random number by combining server and user seed.\r\n     * @param _serverSeed server seed.\r\n     * @param _userSeed user seed.\r\n     * @return random number generated by combining server and user seed.\r\n     */\r\n    function generateRandomNumber(bytes32 _serverSeed, bytes32 _userSeed) public pure returns(uint) {\r\n        bytes32 combinedHash = keccak256(abi.encodePacked(_serverSeed, _userSeed));\r\n        return uint(combinedHash);\r\n    }\r\n}\r\n\r\ncontract Wheel is GameInterface, Utilities {\r\n    using SafeCast for uint;\r\n    using SafeMath for uint;\r\n\r\n    uint public constant MAX_BET_DIVIDER = 10000;\r\n\r\n    uint public constant PAYOUT_DIVIDER = 100;\r\n\r\n    uint public constant RESULT_RANGE = 600;\r\n\r\n    mapping (uint =\u003E mapping(uint =\u003E uint16)) public MAX_BET;\r\n\r\n    mapping (uint =\u003E mapping(uint =\u003E uint16[])) public PAYOUT;\r\n\r\n    constructor() public {\r\n        MAX_BET[1][10] = 632;\r\n        MAX_BET[1][20] = 386;\r\n        MAX_BET[2][10] = 134;\r\n        MAX_BET[2][20] = 134;\r\n        MAX_BET[3][10] = 17;\r\n        MAX_BET[3][20] = 8;\r\n\r\n        PAYOUT[1][10] = [0, 120, 120, 0, 120, 120, 145, 120, 120, 120];\r\n        PAYOUT[1][20] = [0, 120, 120, 0, 120, 120, 145, 120, 0, 120, 240, 120, 0, 120, 120, 145, 120, 0, 120, 120];\r\n        PAYOUT[2][10] = [0, 165, 0, 160, 0, 300, 0, 160, 0, 200];\r\n        PAYOUT[2][20] = [0, 165, 0, 160, 0, 300, 0, 160, 0, 200, 0, 165, 0, 160, 0, 300, 0, 160, 0, 200];\r\n        PAYOUT[3][10] = [0, 0, 0, 0, 0, 0, 0, 0, 0, 985];\r\n        PAYOUT[3][20] = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1970];\r\n    }\r\n\r\n    modifier onlyValidNum(uint _betNum) {\r\n        uint risk = getRisk(_betNum);\r\n        uint segments = getSegments(_betNum);\r\n\r\n        require(risk \u003E= 1 \u0026\u0026 risk \u003C= 3 \u0026\u0026 segments \u003E= 10 \u0026\u0026 segments \u003C= 20 \u0026\u0026 segments % 10 == 0, \u0022Invalid num\u0022);\r\n        _;\r\n    }\r\n\r\n    modifier onlyValidResultNum(uint _resultNum) {\r\n        require(_resultNum \u003E= 0 \u0026\u0026 _resultNum \u003C RESULT_RANGE);\r\n        _;\r\n    }\r\n\r\n    function maxBet(uint _betNum, uint _bankRoll) external onlyValidNum(_betNum) view returns(uint) {\r\n        uint risk = getRisk(_betNum);\r\n        uint segments = getSegments(_betNum);\r\n        uint maxBetValue = MAX_BET[risk][segments];\r\n\r\n        return _bankRoll.mul(maxBetValue).div(MAX_BET_DIVIDER);\r\n    }\r\n\r\n    function resultNumber(bytes32 _serverSeed, bytes32 _userSeed, uint _betNum) external onlyValidNum(_betNum) view returns(uint) {\r\n        uint randNum = Utilities.generateRandomNumber(_serverSeed, _userSeed);\r\n        return randNum % RESULT_RANGE;\r\n    }\r\n\r\n    function userProfit(uint _betNum, uint _betValue, uint _resultNum)\r\n        external\r\n        onlyValidNum(_betNum)\r\n        onlyValidResultNum(_resultNum)\r\n        view\r\n        returns(int)\r\n    {\r\n        uint risk = getRisk(_betNum);\r\n        uint segments = getSegments(_betNum);\r\n        uint16[] storage payout = PAYOUT[risk][segments];\r\n        uint16 payoutValue = payout[_resultNum.mul(payout.length).div(RESULT_RANGE)];\r\n\r\n        return calculateProfit(payoutValue, _betValue);\r\n    }\r\n\r\n\r\n    function maxUserProfit(uint _betNum, uint _betValue) external onlyValidNum(_betNum) view returns(int) {\r\n        uint risk = getRisk(_betNum);\r\n        uint segments = getSegments(_betNum);\r\n\r\n        uint16[] storage payout = PAYOUT[risk][segments];\r\n        uint maxPayout = 0;\r\n        for (uint i = 0; i \u003C payout.length; i\u002B\u002B) {\r\n            if (payout[i] \u003E maxPayout) {\r\n                maxPayout = payout[i];\r\n            }\r\n        }\r\n\r\n        return calculateProfit(maxPayout, _betValue);\r\n    }\r\n\r\n    function calculateProfit(uint _payout, uint _betValue) private pure returns(int) {\r\n        return _betValue.mul(_payout).div(PAYOUT_DIVIDER).castToInt().sub(_betValue.castToInt());\r\n    }\r\n\r\n    function getRisk(uint _num) private pure returns(uint) {\r\n        return (_num / 100) % 10;\r\n    }\r\n\r\n    function getSegments(uint _num) private pure returns(uint) {\r\n        return _num % 100;\r\n    }\r\n}","ABI":"[{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022PAYOUT_DIVIDER\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_serverSeed\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022name\u0022:\u0022_userSeed\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022generateRandomNumber\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022pure\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_totalWon\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_betValue\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022calcProfitFromTotalWon\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022int256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022pure\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022PAYOUT\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint16\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022MAX_BET_DIVIDER\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022MAX_BET\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint16\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_betNum\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_betValue\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022maxUserProfit\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022int256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_betNum\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_bankRoll\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022maxBet\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022HOUSE_EDGE\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022RESULT_RANGE\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_betNum\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_betValue\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_resultNum\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022userProfit\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022int256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_winProbability\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_bankRoll\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022maxBetFromProbability\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022pure\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_serverSeed\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022name\u0022:\u0022_userSeed\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022name\u0022:\u0022_betNum\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022resultNumber\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022HOUSE_EDGE_DIVISOR\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022PROBABILITY_DIVISOR\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022constructor\u0022}]","ContractName":"Wheel","CompilerVersion":"v0.5.0\u002Bcommit.1d4f565a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://56b4176957238101df1544e8d6a56c22088b6278d76bb95813cbabed8b27bf58"}]