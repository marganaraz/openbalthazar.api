[{"SourceCode":"pragma solidity \u003E=0.4.21 \u003C0.6.0;\r\n\r\ncontract Ownable {\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  address private _owner;\r\n\r\n  constructor () internal {\r\n    _owner = msg.sender;\r\n  }\r\n\r\n  function owner() public view returns (address) {\r\n    return _owner;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(isOwner(), \u0022UserWallet: caller is not the owner\u0022);\r\n    _;\r\n  }\r\n\r\n  function isOwner() public view returns (bool) {\r\n    return msg.sender == _owner;\r\n  }\r\n\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    _transferOwnership(newOwner);\r\n  }\r\n\r\n  function _transferOwnership(address newOwner) internal {\r\n    require(newOwner != address(0), \u0022UserWallet: new owner is the zero address\u0022);\r\n    emit OwnershipTransferred(_owner, newOwner);\r\n    _owner = newOwner;\r\n  }\r\n}\r\n\r\ncontract ERC20Basic {\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  function transferOwnership(address newOwner) public;\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract UserWallet is Ownable{\r\n\r\n  event TokenWithdraw(address from, address to, uint256 amount);\r\n  event TokenSweep(address to, uint256 amount);\r\n\r\n  ERC20Basic private _token;\r\n\r\n  constructor (ERC20Basic token) public {\r\n    require(address(token) != address(0), \u0027UserWallet: token is the zero address\u0027);\r\n    _token = token;\r\n  }\r\n\r\n  function balanceOfToken() public view returns (uint256) {\r\n    return _balanceOfToken();\r\n  }\r\n\r\n  function _balanceOfToken() private view returns (uint256) {\r\n    return _token.balanceOf(address(this));\r\n  }\r\n\r\n  function withdrawToken(address receiver, uint256 tokenAmount) public onlyOwner {\r\n    _withdrawToken(receiver, tokenAmount);\r\n  }\r\n\r\n  function _withdrawToken(address receiver, uint256 tokenAmount) private onlyOwner {\r\n    require(receiver != address(0), \u0027UserWallet: require set receiver address, receiver is the zero address.\u0027);\r\n    require(tokenAmount \u003E 0, \u0022UserWallet: tokenAmount is 0\u0022);\r\n    require(_balanceOfToken() \u003E= tokenAmount, \u0022UserWallet: not enough token amount\u0022);\r\n    require(_token.transfer(receiver, tokenAmount));\r\n    emit TokenWithdraw(address(this), receiver, tokenAmount);\r\n  }\r\n\r\n  function sweep(address receiver) public onlyOwner {\r\n    require(receiver != address(0), \u0027UserWallet: require set receiver address, receiver is the zero address.\u0027);\r\n    require(_token.transfer(receiver, _balanceOfToken()));\r\n    emit TokenSweep(receiver, _balanceOfToken());\r\n  }\r\n\r\n  function setNewOwner(address newOwner) public onlyOwner {\r\n    _transferOwnership(newOwner);\r\n    _token.transferOwnership(newOwner);\r\n  }\r\n}\r\n\r\ncontract GotchuWallet is Ownable{\r\n  string private _version = \u00270.1.0\u0027;\r\n\r\n  function generateUserWallet() public onlyOwner {\r\n    //\uC544\uB974\uACE0\uD1A0\uD070 \uCEE8\uD2B8\uB809\uD2B8 \uC8FC\uC18C\r\n    address token = 0xAE31b85Bfe62747d0836B82608B4830361a3d37a;\r\n\r\n    UserWallet userWallet = new UserWallet(ERC20Basic(token));\r\n\r\n    userWallet.setNewOwner(0xD4F78DA8bA2538164aa5F42e0c1B7409Ed5206ec);\r\n  }\r\n\r\n  function version() public view returns (string memory){\r\n    return _version;\r\n  }\r\n}","ABI":"[{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022version\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022owner\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022isOwner\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022generateUserWallet\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022transferOwnership\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022previousOwner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022OwnershipTransferred\u0022,\u0022type\u0022:\u0022event\u0022}]","ContractName":"GotchuWallet","CompilerVersion":"v0.5.10\u002Bcommit.5a6ea5b1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://b40ddd1190ecbb54ef67f625cc9a33db67e5a8ca5b22cb522ac12d909717dd46"}]