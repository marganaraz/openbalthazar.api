[{"SourceCode":"pragma solidity 0.5.10;\r\n\r\n/**\r\n * Copyright \u00A9 2017-2019 Ramp Network sp. z o.o. All rights reserved (MIT License).\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy of this software\r\n * and associated documentation files (the \u0022Software\u0022), to deal in the Software without restriction,\r\n * including without limitation the rights to use, copy, modify, merge, publish, distribute,\r\n * sublicense, and/or sell copies of the Software, and to permit persons to whom the Software\r\n * is furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in all copies\r\n * or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \u0022AS IS\u0022, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING\r\n * BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE\r\n * AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\r\n * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\n\r\n\r\n/**\r\n * A standard, simple transferrable contract ownership.\r\n */\r\ncontract Ownable {\r\n\r\n    address public owner;\r\n\r\n    event OwnerChanged(address oldOwner, address newOwner);\r\n\r\n    constructor() internal {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \u0022only the owner can call this\u0022);\r\n        _;\r\n    }\r\n\r\n    function changeOwner(address _newOwner) external onlyOwner {\r\n        owner = _newOwner;\r\n        emit OwnerChanged(msg.sender, _newOwner);\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n * A contract that can be stopped/restarted by its owner.\r\n */\r\ncontract Stoppable is Ownable {\r\n\r\n    bool public isActive = true;\r\n\r\n    event IsActiveChanged(bool _isActive);\r\n\r\n    modifier onlyActive() {\r\n        require(isActive, \u0022contract is stopped\u0022);\r\n        _;\r\n    }\r\n\r\n    function setIsActive(bool _isActive) external onlyOwner {\r\n        if (_isActive == isActive) return;\r\n        isActive = _isActive;\r\n        emit IsActiveChanged(_isActive);\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * A simple interface used by the escrows contract (precisely AssetAdapters) to interact\r\n * with the liquidity pools.\r\n */\r\ncontract RampInstantPoolInterface {\r\n\r\n    uint16 public ASSET_TYPE;\r\n\r\n    function sendFundsToSwap(uint256 _amount)\r\n        public /*onlyActive onlySwapsContract isWithinLimits*/ returns(bool success);\r\n\r\n}\r\n\r\ncontract RampInstantTokenPoolInterface is RampInstantPoolInterface {\r\n\r\n    address public token;\r\n\r\n}\r\n\r\n/**\r\n * An interface of the RampInstantEscrows functions that are used by the liquidity pool contracts.\r\n * See RampInstantEscrows.sol for more comments.\r\n */\r\ncontract RampInstantEscrowsPoolInterface {\r\n\r\n    uint16 public ASSET_TYPE;\r\n\r\n    function release(\r\n        address _pool,\r\n        address payable _receiver,\r\n        address _oracle,\r\n        bytes calldata _assetData,\r\n        bytes32 _paymentDetailsHash\r\n    )\r\n        external; /*statusAtLeast(Status.FINALIZE_ONLY) onlyOracleOrPool(_pool, _oracle)*/\r\n\r\n    function returnFunds(\r\n        address payable _pool,\r\n        address _receiver,\r\n        address _oracle,\r\n        bytes calldata _assetData,\r\n        bytes32 _paymentDetailsHash\r\n    )\r\n        external; /*statusAtLeast(Status.RETURN_ONLY) onlyOracleOrPool(_pool, _oracle)*/\r\n\r\n}\r\n\r\n/**\r\n * An abstract Ramp Instant Liquidity Pool. A liquidity provider deploys an instance of this\r\n * contract, and sends his funds to it. The escrows contract later withdraws portions of these\r\n * funds to be locked. The owner can withdraw any part of the funds at any time, or temporarily\r\n * block creating new escrows by stopping the contract.\r\n *\r\n * The pool owner can set and update min/max swap amounts, with an upper limit of 2^240 wei/units\r\n * (see \u0060AssetAdapterWithFees\u0060 for more info).\r\n *\r\n * The paymentDetailsHash parameters works the same as in the \u0060RampInstantEscrows\u0060 contract, only\r\n * with 0 value and empty transfer title. It describes the bank account where the pool owner expects\r\n * to be paid, and can be used to validate that a created swap indeed uses the same account.\r\n *\r\n * @author Ramp Network sp. z o.o.\r\n */\r\ncontract RampInstantPool is Ownable, Stoppable, RampInstantPoolInterface {\r\n\r\n    uint256 constant private MAX_SWAP_AMOUNT_LIMIT = 1 \u003C\u003C 240;\r\n    uint16 public ASSET_TYPE;\r\n\r\n    address payable public swapsContract;\r\n    uint256 public minSwapAmount;\r\n    uint256 public maxSwapAmount;\r\n    bytes32 public paymentDetailsHash;\r\n\r\n    /**\r\n     * Triggered when the pool receives new funds, either a topup, or a returned escrow from an old\r\n     * swaps contract if it was changed. Avilable for ETH, ERC-223 and ERC-777 token pools.\r\n     * Doesn\u0027t work for plain ERC-20 tokens, since they don\u0027t provide such an interface.\r\n     */\r\n    event ReceivedFunds(address _from, uint256 _amount);\r\n    event LimitsChanged(uint256 _minAmount, uint256 _maxAmount);\r\n    event SwapsContractChanged(address _oldAddress, address _newAddress);\r\n\r\n    constructor(\r\n        address payable _swapsContract,\r\n        uint256 _minSwapAmount,\r\n        uint256 _maxSwapAmount,\r\n        bytes32 _paymentDetailsHash,\r\n        uint16 _assetType\r\n    )\r\n        public\r\n        validateLimits(_minSwapAmount, _maxSwapAmount)\r\n        validateSwapsContract(_swapsContract, _assetType)\r\n    {\r\n        swapsContract = _swapsContract;\r\n        paymentDetailsHash = _paymentDetailsHash;\r\n        minSwapAmount = _minSwapAmount;\r\n        maxSwapAmount = _maxSwapAmount;\r\n        ASSET_TYPE = _assetType;\r\n    }\r\n\r\n    function availableFunds() public view returns (uint256);\r\n\r\n    function withdrawFunds(address payable _to, uint256 _amount)\r\n        public /*onlyOwner*/ returns (bool success);\r\n\r\n    function withdrawAllFunds(address payable _to) public onlyOwner returns (bool success) {\r\n        return withdrawFunds(_to, availableFunds());\r\n    }\r\n\r\n    function setLimits(\r\n        uint256 _minAmount,\r\n        uint256 _maxAmount\r\n    ) public onlyOwner validateLimits(_minAmount, _maxAmount) {\r\n        minSwapAmount = _minAmount;\r\n        maxSwapAmount = _maxAmount;\r\n        emit LimitsChanged(_minAmount, _maxAmount);\r\n    }\r\n\r\n    function setSwapsContract(\r\n        address payable _swapsContract\r\n    ) public onlyOwner validateSwapsContract(_swapsContract, ASSET_TYPE) {\r\n        address oldSwapsContract = swapsContract;\r\n        swapsContract = _swapsContract;\r\n        emit SwapsContractChanged(oldSwapsContract, _swapsContract);\r\n    }\r\n\r\n    function sendFundsToSwap(uint256 _amount)\r\n        public /*onlyActive onlySwapsContract isWithinLimits*/ returns(bool success);\r\n\r\n    function releaseSwap(\r\n        address payable _receiver,\r\n        address _oracle,\r\n        bytes calldata _assetData,\r\n        bytes32 _paymentDetailsHash\r\n    ) external onlyOwner {\r\n        RampInstantEscrowsPoolInterface(swapsContract).release(\r\n            address(this),\r\n            _receiver,\r\n            _oracle,\r\n            _assetData,\r\n            _paymentDetailsHash\r\n        );\r\n    }\r\n\r\n    function returnSwap(\r\n        address _receiver,\r\n        address _oracle,\r\n        bytes calldata _assetData,\r\n        bytes32 _paymentDetailsHash\r\n    ) external onlyOwner {\r\n        RampInstantEscrowsPoolInterface(swapsContract).returnFunds(\r\n            address(this),\r\n            _receiver,\r\n            _oracle,\r\n            _assetData,\r\n            _paymentDetailsHash\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Needed for address(this) to be payable in call to returnFunds.\r\n     * The Eth pool overrides this to not throw.\r\n     */\r\n    function () external payable {\r\n        revert(\u0022this pool cannot receive ether\u0022);\r\n    }\r\n\r\n    modifier onlySwapsContract() {\r\n        require(msg.sender == swapsContract, \u0022only the swaps contract can call this\u0022);\r\n        _;\r\n    }\r\n\r\n    modifier isWithinLimits(uint256 _amount) {\r\n        require(_amount \u003E= minSwapAmount \u0026\u0026 _amount \u003C= maxSwapAmount, \u0022amount outside swap limits\u0022);\r\n        _;\r\n    }\r\n\r\n    modifier validateLimits(uint256 _minAmount, uint256 _maxAmount) {\r\n        require(_minAmount \u003C= _maxAmount, \u0022min limit over max limit\u0022);\r\n        require(_maxAmount \u003C= MAX_SWAP_AMOUNT_LIMIT, \u0022maxAmount too high\u0022);\r\n        _;\r\n    }\r\n\r\n    modifier validateSwapsContract(address payable _swapsContract, uint16 _assetType) {\r\n        require(_swapsContract != address(0), \u0022null swaps contract address\u0022);\r\n        require(\r\n            RampInstantEscrowsPoolInterface(_swapsContract).ASSET_TYPE() == _assetType,\r\n            \u0022pool asset type doesn\u0027t match swap contract\u0022\r\n        );\r\n        _;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title partial ERC-20 Token interface according to official documentation:\r\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\r\n */\r\ninterface Erc20Token {\r\n\r\n    /**\r\n     * Send \u0060_value\u0060 of tokens from \u0060msg.sender\u0060 to \u0060_to\u0060\r\n     *\r\n     * @param _to The recipient address\r\n     * @param _value The amount of tokens to be transferred\r\n     * @return Indication if the transfer was successful\r\n     */\r\n    function transfer(address _to, uint256 _value) external returns (bool success);\r\n\r\n    /**\r\n     * Approve \u0060_spender\u0060 to withdraw from sender\u0027s account multiple times, up to \u0060_value\u0060\r\n     * amount. If this function is called again it overwrites the current allowance with _value.\r\n     *\r\n     * @param _spender The address allowed to operate on sender\u0027s tokens\r\n     * @param _value The amount of tokens allowed to be transferred\r\n     * @return Indication if the approval was successful\r\n     */\r\n    function approve(address _spender, uint256 _value) external returns (bool success);\r\n\r\n    /**\r\n     * Transfer tokens on behalf of \u0060_from\u0060, provided it was previously approved.\r\n     *\r\n     * @param _from The transfer source address (tokens owner)\r\n     * @param _to The transfer destination address\r\n     * @param _value The amount of tokens to be transferred\r\n     * @return Indication if the approval was successful\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\r\n\r\n    /**\r\n     * Returns the account balance of another account with address \u0060_owner\u0060.\r\n     */\r\n    function balanceOf(address _owner) external view returns (uint256);\r\n\r\n}\r\n\r\n/**\r\n * Partial ERC-1820 registry\r\n * https://github.com/0xjac/ERC1820/blob/master/contracts/ERC1820Client.sol\r\n */\r\ncontract ERC1820Registry {\r\n    function setInterfaceImplementer(address _addr, bytes32 _interfaceHash, address _implementer) external;\r\n}\r\n\r\n\r\n/**\r\n * https://github.com/0xjac/ERC777/blob/devel/contracts/examples/ExampleTokensRecipient.sol\r\n */\r\ncontract ERC777TokenRecipient {\r\n\r\n    ERC1820Registry internal constant ERC1820REGISTRY = ERC1820Registry(\r\n        0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24\r\n    );\r\n    bytes32 internal constant ERC777TokenRecipientERC1820Hash = keccak256(\r\n        abi.encodePacked(\u0022ERC777TokensRecipient\u0022)\r\n    );\r\n    bytes32 constant internal ERC1820_ACCEPT_MAGIC = keccak256(\r\n        abi.encodePacked(\u0022ERC1820_ACCEPT_MAGIC\u0022)\r\n    );\r\n\r\n    constructor(bool _doSetErc1820Registry) internal {\r\n        if (_doSetErc1820Registry) {\r\n            ERC1820REGISTRY.setInterfaceImplementer(\r\n                address(this),\r\n                ERC777TokenRecipientERC1820Hash,\r\n                address(this)\r\n            );\r\n        }\r\n    }\r\n\r\n    function canImplementInterfaceForAddress(\r\n        bytes32 _interfaceHash,\r\n        address _addr\r\n    ) external view returns(bytes32) {\r\n        if (_interfaceHash == ERC777TokenRecipientERC1820Hash \u0026\u0026 _addr == address(this)) {\r\n            return ERC1820_ACCEPT_MAGIC;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function tokensReceived(\r\n        address _operator,\r\n        address _from,\r\n        address _to,\r\n        uint256 _amount,\r\n        bytes calldata _data,\r\n        bytes calldata _operatorData) external;\r\n\r\n}\r\n\r\n/**\r\n * A pool that implements handling of ERC-20-compatible token assets. See \u0060RampInstantPool\u0060.\r\n *\r\n * For ERC-777 tokens, enable \u0060_doSetErc1820Registry\u0060 on deployment, if you want to receive the\r\n * \u0060ReceivedFunds\u0060 events. For ERC-223 tokens no actions are needed. For plain ERC-20 tokens, that\r\n * event is not available.\r\n *\r\n * @author Ramp Network sp. z o.o.\r\n */\r\ncontract RampInstantTokenPool is RampInstantPool, ERC777TokenRecipient {\r\n\r\n    uint16 internal constant TOKEN_TYPE_ID = 2;\r\n    Erc20Token public token;\r\n\r\n    constructor(\r\n        address payable _swapsContract,\r\n        uint256 _minSwapAmount,\r\n        uint256 _maxSwapAmount,\r\n        bytes32 _paymentDetailsHash,\r\n        address _tokenAddress,\r\n        bool _doSetErc1820Registry\r\n    )\r\n        public\r\n        RampInstantPool(\r\n            _swapsContract, _minSwapAmount, _maxSwapAmount, _paymentDetailsHash, TOKEN_TYPE_ID\r\n        )\r\n        ERC777TokenRecipient(_doSetErc1820Registry)\r\n    {\r\n        token = Erc20Token(_tokenAddress);\r\n    }\r\n\r\n    function availableFunds() public view returns(uint256) {\r\n        return token.balanceOf(address(this));\r\n    }\r\n\r\n    function withdrawFunds(\r\n        address payable _to,\r\n        uint256 _amount\r\n    ) public onlyOwner returns (bool success) {\r\n        return token.transfer(_to, _amount);\r\n    }\r\n\r\n    function sendFundsToSwap(\r\n        uint256 _amount\r\n    ) public onlyActive onlySwapsContract isWithinLimits(_amount) returns(bool success) {\r\n        return token.transfer(swapsContract, _amount);\r\n    }\r\n\r\n    /** ERC-223 token fallback function */\r\n    function tokenFallback(address _from, uint _value, bytes memory _data) public {\r\n        require(_data.length == 0, \u0022tokens with data not supported\u0022);\r\n        if (_from != swapsContract) {\r\n            emit ReceivedFunds(_from, _value);\r\n        }\r\n    }\r\n\r\n    /** ERC-777 token received hook */\r\n    function tokensReceived(\r\n        address /*_operator*/,\r\n        address _from,\r\n        address /*_to*/,\r\n        uint256 _amount,\r\n        bytes calldata _data,\r\n        bytes calldata /*_operatorData*/\r\n    ) external {\r\n        require(_data.length == 0, \u0022tokens with data not supported\u0022);\r\n        if (_from != swapsContract) {\r\n            emit ReceivedFunds(_from, _amount);\r\n        }\r\n    }\r\n\r\n}","ABI":"[{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_from\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_amount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_data\u0022,\u0022type\u0022:\u0022bytes\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bytes\u0022}],\u0022name\u0022:\u0022tokensReceived\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_receiver\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_oracle\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_assetData\u0022,\u0022type\u0022:\u0022bytes\u0022},{\u0022name\u0022:\u0022_paymentDetailsHash\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022returnSwap\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022isActive\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_interfaceHash\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022name\u0022:\u0022_addr\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022canImplementInterfaceForAddress\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_isActive\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022name\u0022:\u0022setIsActive\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_to\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022withdrawAllFunds\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022success\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022minSwapAmount\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022paymentDetailsHash\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022availableFunds\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022sendFundsToSwap\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022success\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022ASSET_TYPE\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint16\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022owner\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022changeOwner\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_from\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_value\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_data\u0022,\u0022type\u0022:\u0022bytes\u0022}],\u0022name\u0022:\u0022tokenFallback\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022withdrawFunds\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022success\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_minAmount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_maxAmount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022setLimits\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022maxSwapAmount\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_swapsContract\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022setSwapsContract\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022swapsContract\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022token\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_receiver\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_oracle\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_assetData\u0022,\u0022type\u0022:\u0022bytes\u0022},{\u0022name\u0022:\u0022_paymentDetailsHash\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022releaseSwap\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[{\u0022name\u0022:\u0022_swapsContract\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_minSwapAmount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_maxSwapAmount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_paymentDetailsHash\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022name\u0022:\u0022_tokenAddress\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_doSetErc1820Registry\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022constructor\u0022},{\u0022payable\u0022:true,\u0022stateMutability\u0022:\u0022payable\u0022,\u0022type\u0022:\u0022fallback\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022_from\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022_amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022ReceivedFunds\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022_minAmount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022_maxAmount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022LimitsChanged\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022_oldAddress\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022_newAddress\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022SwapsContractChanged\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022_isActive\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022name\u0022:\u0022IsActiveChanged\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022oldOwner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022OwnerChanged\u0022,\u0022type\u0022:\u0022event\u0022}]","ContractName":"RampInstantTokenPool","CompilerVersion":"v0.5.10\u002Bcommit.5a6ea5b1","OptimizationUsed":"1","Runs":"420","ConstructorArguments":"00000000000000000000000036bae77a5b292c1ca5dc38c6b40a2a6504bb83f50000000000000000000000000000000000000000000000004563918244f40000000000000000000000000000000000000000000000000002b5e3af16b188000066dee23d0cf858c89c10fc621d7d531243eb50bb131735076f1a16a64e6319c40000000000000000000000006b175474e89094c44da98b954eedeac495271d0f0000000000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://00903779a44e19cccb81f8f0b52f965784957cab1a786694226fb70866e812e8"}]