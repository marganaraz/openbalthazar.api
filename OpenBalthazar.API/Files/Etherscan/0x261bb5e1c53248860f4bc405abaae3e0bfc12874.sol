[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b \u003C= a);\r\n        return a - b;\r\n    }\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a \u002B b;\r\n        assert(c \u003E= a);\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    \r\n    function Ownable() public {\r\n        owner = msg.sender;\r\n    }\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\ncontract Pausable is Ownable {\r\n    event Pause();\r\n    event Unpause();\r\n\r\n    bool public paused = false;\r\n\r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    modifier whenPaused() {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n    function pause() onlyOwner whenNotPaused public {\r\n        paused = true;\r\n        Pause();\r\n    }\r\n\r\n    function unpause() onlyOwner whenPaused public {\r\n        paused = false;\r\n        Unpause();\r\n    }\r\n}\r\n\r\ncontract ERC20 {\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract Token is ERC20, Pausable {\r\n\r\n    struct sUserInfo {\r\n        uint256 balance;\r\n        bool lock;\r\n        mapping(address =\u003E uint256) allowed;\r\n    }\r\n    \r\n    using SafeMath for uint256;\r\n\r\n    string public name;\r\n    string public symbol;\r\n    uint256 public decimals;\r\n    uint256 public totalSupply;\r\n\r\n    bool public restoreFinished = false;\r\n\r\n    mapping(address =\u003E sUserInfo) user;\r\n\r\n    event Mint(uint256 value);\r\n    event Burn(uint256 value);\r\n    event RestoreFinished();\r\n    \r\n    modifier canRestore() {\r\n        require(!restoreFinished);\r\n        _;\r\n    }\r\n    \r\n    function () public payable {\r\n        revert();\r\n    }\r\n    \r\n    function validTransfer(address _from, address _to, uint256 _value, bool _lockCheck) internal {\r\n        require(_to != address(this));\r\n        require(_to != address(0));\r\n        require(user[_from].balance \u003E= _value);\r\n        if(_lockCheck) {\r\n            require(user[_from].lock == false);\r\n        }\r\n    }\r\n\r\n    function lock(address _owner) public onlyOwner returns (bool) {\r\n        require(user[_owner].lock == false);\r\n        user[_owner].lock = true;\r\n        return true;\r\n    }\r\n    function unlock(address _owner) public onlyOwner returns (bool) {\r\n        require(user[_owner].lock == true);\r\n        user[_owner].lock = false;\r\n       return true;\r\n    }\r\n \r\n    function burn(address _to, uint256 _value) public onlyOwner returns (bool) {\r\n        require(_value \u003C= user[_to].balance);\r\n        user[_to].balance = user[_to].balance.sub(_value);\r\n        totalSupply = totalSupply.sub(_value);\r\n        Burn(_value);\r\n        return true;\r\n    }\r\n   \r\n    function distribute(address _to, uint256 _value) public onlyOwner returns (bool) {\r\n        validTransfer(msg.sender, _to, _value, false);\r\n       \r\n        user[msg.sender].balance = user[msg.sender].balance.sub(_value);\r\n        user[_to].balance = user[_to].balance.add(_value);\r\n       \r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\r\n        require(_value \u003E 0);\r\n        user[msg.sender].allowed[_spender] = _value; \r\n        Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n    function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\r\n        validTransfer(_from, _to, _value, true);\r\n        require(_value \u003C=  user[_from].allowed[msg.sender]);\r\n\r\n        user[_from].balance = user[_from].balance.sub(_value);\r\n        user[_to].balance = user[_to].balance.add(_value);\r\n\r\n        user[_from].allowed[msg.sender] = user[_from].allowed[msg.sender].sub(_value);\r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n    \r\n    function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\r\n        validTransfer(msg.sender, _to, _value, true);\r\n\r\n        user[msg.sender].balance = user[msg.sender].balance.sub(_value);\r\n        user[_to].balance = user[_to].balance.add(_value);\r\n\r\n        Transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n    \r\n    function transferRestore(address _from, address _to, uint256 _value) public onlyOwner canRestore returns (bool) {\r\n        validTransfer(_from, _to, _value, false);\r\n       \r\n        user[_from].balance = user[_from].balance.sub(_value);\r\n        user[_to].balance = user[_to].balance.add(_value);\r\n       \r\n        Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n    \r\n    function finishRestore() public onlyOwner returns (bool) {\r\n        restoreFinished = true;\r\n        RestoreFinished();\r\n        return true;\r\n    }\r\n    \r\n    \r\n    function totalSupply() public view returns (uint256) {\r\n        return totalSupply;\r\n    }\r\n    function balanceOf(address _owner) public view returns (uint256) {\r\n        return user[_owner].balance;\r\n    }\r\n    function lockState(address _owner) public view returns (bool) {\r\n        return user[_owner].lock;\r\n    }\r\n    function allowance(address _owner, address _spender) public view returns (uint256) {\r\n        return user[_owner].allowed[_spender];\r\n    }\r\n    \r\n}\r\n\r\ncontract LockBalance is Ownable {\r\n    \r\n    enum eLockType {None, Individual, GroupA, GroupB, GroupC, GroupD}\r\n    struct sGroupLockDate {\r\n        uint256[] lockTime;\r\n        uint256[] lockPercent;\r\n    }\r\n    struct sLockInfo {\r\n        uint256[] lockType;\r\n        uint256[] lockBalanceStandard;\r\n        uint256[] startTime;\r\n        uint256[] endTime;\r\n    }\r\n    \r\n    using SafeMath for uint256;\r\n\r\n    mapping(uint =\u003E sGroupLockDate) groupLockDate;\r\n    \r\n    mapping(address =\u003E sLockInfo) lockUser;\r\n\r\n    event Lock(address indexed from, uint256 value, uint256 endTime);\r\n    \r\n    function setLockUser(address _to, eLockType _lockType, uint256 _value, uint256 _endTime) internal {\r\n        lockUser[_to].lockType.push(uint256(_lockType));\r\n        lockUser[_to].lockBalanceStandard.push(_value);\r\n        lockUser[_to].startTime.push(now);\r\n        lockUser[_to].endTime.push(_endTime);\r\n\r\n        Lock(_to, _value, _endTime);\r\n    }\r\n\r\n    function lockBalanceGroup(address _owner, uint _index) internal view returns (uint256) {\r\n        uint256 percent = 0;\r\n        uint256 key = uint256(lockUser[_owner].lockType[_index]);\r\n\r\n        uint256 time = 99999999999;\r\n        for(uint256 i = 0 ; i \u003C groupLockDate[key].lockTime.length; i\u002B\u002B) {\r\n            if(now \u003C groupLockDate[key].lockTime[i]) {\r\n                if(groupLockDate[key].lockTime[i] \u003C time) {\r\n                    time = groupLockDate[key].lockTime[i];\r\n                    percent = groupLockDate[key].lockPercent[i];    \r\n                }\r\n            }\r\n        }\r\n        \r\n        if(percent == 0){\r\n            return 0;\r\n        } else {\r\n            return lockUser[_owner].lockBalanceStandard[_index].div(100).mul(uint256(percent));\r\n        }\r\n    }\r\n\r\n    function lockBalanceIndividual(address _owner, uint _index) internal view returns (uint256) {\r\n        if(now \u003C lockUser[_owner].endTime[_index]) {\r\n            return lockUser[_owner].lockBalanceStandard[_index];\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n    \r\n    function clearLockUser(address _owner, uint _index) onlyOwner public {\r\n        require(lockUser[_owner].endTime.length \u003E_index);\r\n        lockUser[_owner].endTime[_index] = 0;\r\n    }\r\n        \r\n    function addLockDate(eLockType _lockType, uint256 _second, uint256 _percent) onlyOwner public {\r\n        sGroupLockDate storage lockInfo = groupLockDate[uint256(_lockType)];\r\n        bool isExists = false;\r\n        for(uint256 i = 0; i \u003C lockInfo.lockTime.length; i\u002B\u002B) {\r\n            if(lockInfo.lockTime[i] == _second) {\r\n                revert();\r\n                break;\r\n            }\r\n        }\r\n        \r\n        if(isExists) {\r\n           revert();\r\n        } else {\r\n            lockInfo.lockTime.push(_second);\r\n            lockInfo.lockPercent.push(_percent);\r\n        }\r\n    }\r\n    \r\n    function deleteLockDate(eLockType _lockType, uint256 _lockTime) onlyOwner public {\r\n        sGroupLockDate storage lockDate = groupLockDate[uint256(_lockType)];\r\n        \r\n        bool isExists = false;\r\n        uint256 index = 0;\r\n        for(uint256 i = 0; i \u003C lockDate.lockTime.length; i\u002B\u002B) {\r\n            if(lockDate.lockTime[i] == _lockTime) {\r\n                isExists = true;\r\n                index = i;\r\n                break;\r\n            }\r\n        }\r\n        \r\n        if(isExists) {\r\n            for(uint256 k = index; k \u003C lockDate.lockTime.length - 1; k\u002B\u002B){\r\n                lockDate.lockTime[k] = lockDate.lockTime[k \u002B 1];\r\n                lockDate.lockPercent[k] = lockDate.lockPercent[k \u002B 1];\r\n            }\r\n            delete lockDate.lockTime[lockDate.lockTime.length - 1];\r\n            lockDate.lockTime.length--;\r\n            delete lockDate.lockPercent[lockDate.lockPercent.length - 1];\r\n            lockDate.lockPercent.length--;\r\n        } else {\r\n            revert();\r\n        }\r\n        \r\n    }\r\n\r\n\r\n    function lockTypeInfoGroup(eLockType _type) public view returns (uint256[], uint256[]) {\r\n        uint256 key = uint256(_type);\r\n        return (groupLockDate[key].lockTime, groupLockDate[key].lockPercent);\r\n    }\r\n    function lockUserInfo(address _owner) public view returns (uint256[], uint256[], uint256[], uint256[], uint256[]) {\r\n        \r\n        uint256[] memory balance = new uint256[](lockUser[_owner].lockType.length);\r\n        for(uint256 i = 0; i \u003C lockUser[_owner].lockType.length; i\u002B\u002B){\r\n            if(lockUser[_owner].lockType[i] == uint256(eLockType.Individual)) {\r\n                balance[i] = balance[i].add(lockBalanceIndividual(_owner, i));\r\n            } else if(lockUser[_owner].lockType[i] != uint256(eLockType.None)) {\r\n                balance[i] = balance[i].add(lockBalanceGroup(_owner, i));\r\n            }\r\n        }\r\n        \r\n        return (lockUser[_owner].lockType,\r\n        lockUser[_owner].lockBalanceStandard,\r\n        balance,\r\n        lockUser[_owner].startTime,\r\n        lockUser[_owner].endTime);\r\n    }\r\n    function lockBalanceAll(address _owner) public view returns (uint256) {\r\n        uint256 lockBalance = 0;\r\n        for(uint256 i = 0; i \u003C lockUser[_owner].lockType.length; i\u002B\u002B){\r\n            if(lockUser[_owner].lockType[i] == uint256(eLockType.Individual)) {\r\n                lockBalance = lockBalance.add(lockBalanceIndividual(_owner, i));\r\n            } else if(lockUser[_owner].lockType[i] != uint256(eLockType.None)) {\r\n                lockBalance = lockBalance.add(lockBalanceGroup(_owner, i));\r\n            }\r\n        }\r\n        return lockBalance;\r\n    }\r\n    \r\n}\r\n\r\ncontract MycodeCoin is Token, LockBalance {\r\n\r\n    function MycodeCoin() public {\r\n        name = \u0022MYCODE\u0022;\r\n        symbol = \u0022CODE\u0022;\r\n        decimals = 18;\r\n        uint256 initialSupply = 10000000000;\r\n        totalSupply = initialSupply * 10 ** uint(decimals);\r\n        user[owner].balance = totalSupply;\r\n        Transfer(address(0), owner, totalSupply);\r\n\r\n        //addLockDate(eLockType.GroupA, 9999999999, 100);//2286-11-21\r\n\r\n    }\r\n\r\n    function validTransfer(address _from, address _to, uint256 _value, bool _lockCheck) internal {\r\n        super.validTransfer(_from, _to, _value, _lockCheck);\r\n        if(_lockCheck) {\r\n            require(_value \u003C= useBalanceOf(_from));\r\n        }\r\n    }\r\n\r\n    function setLockUsers(eLockType _type, address[] _to, uint256[] _value, uint256[] _endTime) onlyOwner public {  \r\n        require(_to.length \u003E 0);\r\n        require(_to.length == _value.length);\r\n        require(_to.length == _endTime.length);\r\n        require(_type != eLockType.None);\r\n        \r\n        for(uint256 i = 0; i \u003C _to.length; i\u002B\u002B){\r\n            require(_value[i] \u003C= useBalanceOf(_to[i]));\r\n            setLockUser(_to[i], _type, _value[i], _endTime[i]);\r\n        }\r\n    }\r\n    \r\n    function useBalanceOf(address _owner) public view returns (uint256) {\r\n        return balanceOf(_owner).sub(lockBalanceAll(_owner));\r\n    }\r\n    \r\n}","ABI":"[{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_owner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022lockBalanceAll\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022restoreFinished\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022name\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_lockType\u0022,\u0022type\u0022:\u0022uint8\u0022},{\u0022name\u0022:\u0022_lockTime\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022deleteLockDate\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_spender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022approve\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022totalSupply\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_from\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022transferFrom\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_owner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022unlock\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022decimals\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022unpause\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_from\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022transferRestore\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022paused\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_owner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022useBalanceOf\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_owner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022balanceOf\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022pause\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022owner\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_type\u0022,\u0022type\u0022:\u0022uint8\u0022}],\u0022name\u0022:\u0022lockTypeInfoGroup\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256[]\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256[]\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022finishRestore\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_owner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022lockState\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022symbol\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_type\u0022,\u0022type\u0022:\u0022uint8\u0022},{\u0022name\u0022:\u0022_to\u0022,\u0022type\u0022:\u0022address[]\u0022},{\u0022name\u0022:\u0022_value\u0022,\u0022type\u0022:\u0022uint256[]\u0022},{\u0022name\u0022:\u0022_endTime\u0022,\u0022type\u0022:\u0022uint256[]\u0022}],\u0022name\u0022:\u0022setLockUsers\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_lockType\u0022,\u0022type\u0022:\u0022uint8\u0022},{\u0022name\u0022:\u0022_second\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_percent\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022addLockDate\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022burn\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_owner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_index\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022clearLockUser\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022transfer\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_owner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022lockUserInfo\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256[]\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256[]\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256[]\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256[]\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256[]\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_owner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_spender\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022allowance\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022transferOwnership\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_owner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022lock\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022distribute\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022constructor\u0022},{\u0022payable\u0022:true,\u0022stateMutability\u0022:\u0022payable\u0022,\u0022type\u0022:\u0022fallback\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022from\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022endTime\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022Lock\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022Mint\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022Burn\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022RestoreFinished\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022Pause\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022Unpause\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022previousOwner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022OwnershipTransferred\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022owner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022spender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022Approval\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022from\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022Transfer\u0022,\u0022type\u0022:\u0022event\u0022}]","ContractName":"MycodeCoin","CompilerVersion":"v0.4.18\u002Bcommit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://263e672842c3279d753d17b071b65d1d4d48b1acc64efba6f435d3dd8b6cacfa"}]