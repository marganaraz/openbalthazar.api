[{"SourceCode":"// File: @airswap/types/contracts/Types.sol\r\n\r\n/*\r\n  Copyright 2019 Swap Holdings Ltd.\r\n\r\n  Licensed under the Apache License, Version 2.0 (the \u0022License\u0022);\r\n  you may not use this file except in compliance with the License.\r\n  You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n  Unless required by applicable law or agreed to in writing, software\r\n  distributed under the License is distributed on an \u0022AS IS\u0022 BASIS,\r\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n  See the License for the specific language governing permissions and\r\n  limitations under the License.\r\n*/\r\n\r\npragma solidity 0.5.10;\r\npragma experimental ABIEncoderV2;\r\n\r\n/**\r\n  * @title Types: Library of Swap Protocol Types and Hashes\r\n  */\r\nlibrary Types {\r\n\r\n  bytes constant internal EIP191_HEADER = \u0022\\x19\\x01\u0022;\r\n\r\n  struct Order {\r\n    uint256 nonce;        // Unique per order and should be sequential\r\n    uint256 expiry;       // Expiry in seconds since 1 January 1970\r\n    Party maker;          // Party to the trade that sets terms\r\n    Party taker;          // Party to the trade that accepts terms\r\n    Party affiliate;      // Party compensated for facilitating (optional)\r\n    Signature signature;  // Signature of the order\r\n  }\r\n\r\n  struct Party {\r\n    address wallet;       // Wallet address of the party\r\n    address token;        // Contract address of the token\r\n    uint256 param;        // Value (ERC-20) or ID (ERC-721)\r\n    bytes4 kind;          // Interface ID of the token\r\n  }\r\n\r\n  struct Signature {\r\n    address signer;       // Address of the wallet used to sign\r\n    uint8 v;              // \u0060v\u0060 value of an ECDSA signature\r\n    bytes32 r;            // \u0060r\u0060 value of an ECDSA signature\r\n    bytes32 s;            // \u0060s\u0060 value of an ECDSA signature\r\n    bytes1 version;       // EIP-191 signature version\r\n  }\r\n\r\n  bytes32 constant DOMAIN_TYPEHASH = keccak256(abi.encodePacked(\r\n    \u0022EIP712Domain(\u0022,\r\n    \u0022string name,\u0022,\r\n    \u0022string version,\u0022,\r\n    \u0022address verifyingContract\u0022,\r\n    \u0022)\u0022\r\n  ));\r\n\r\n  bytes32 constant ORDER_TYPEHASH = keccak256(abi.encodePacked(\r\n    \u0022Order(\u0022,\r\n    \u0022uint256 nonce,\u0022,\r\n    \u0022uint256 expiry,\u0022,\r\n    \u0022Party maker,\u0022,\r\n    \u0022Party taker,\u0022,\r\n    \u0022Party affiliate\u0022,\r\n    \u0022)\u0022,\r\n    \u0022Party(\u0022,\r\n    \u0022address wallet,\u0022,\r\n    \u0022address token,\u0022,\r\n    \u0022uint256 param,\u0022,\r\n    \u0022bytes4 kind\u0022,\r\n    \u0022)\u0022\r\n  ));\r\n\r\n  bytes32 constant PARTY_TYPEHASH = keccak256(abi.encodePacked(\r\n    \u0022Party(\u0022,\r\n    \u0022address wallet,\u0022,\r\n    \u0022address token,\u0022,\r\n    \u0022uint256 param,\u0022,\r\n    \u0022bytes4 kind\u0022,\r\n    \u0022)\u0022\r\n  ));\r\n\r\n  /**\r\n    * @notice Hash an order into bytes32\r\n    * @dev EIP-191 header and domain separator included\r\n    * @param _order Order\r\n    * @param _domainSeparator bytes32\r\n    * @return bytes32 returns a keccak256 abi.encodePacked value\r\n    */\r\n  function hashOrder(\r\n    Order calldata _order,\r\n    bytes32 _domainSeparator\r\n  ) external pure returns (bytes32) {\r\n    return keccak256(abi.encodePacked(\r\n      EIP191_HEADER,\r\n      _domainSeparator,\r\n      keccak256(abi.encode(\r\n        ORDER_TYPEHASH,\r\n        _order.nonce,\r\n        _order.expiry,\r\n        keccak256(abi.encode(\r\n          PARTY_TYPEHASH,\r\n          _order.maker.wallet,\r\n          _order.maker.token,\r\n          _order.maker.param,\r\n          _order.maker.kind\r\n        )),\r\n        keccak256(abi.encode(\r\n          PARTY_TYPEHASH,\r\n          _order.taker.wallet,\r\n          _order.taker.token,\r\n          _order.taker.param,\r\n          _order.taker.kind\r\n        )),\r\n        keccak256(abi.encode(\r\n          PARTY_TYPEHASH,\r\n          _order.affiliate.wallet,\r\n          _order.affiliate.token,\r\n          _order.affiliate.param,\r\n          _order.affiliate.kind\r\n        ))\r\n      ))\r\n    ));\r\n  }\r\n\r\n  /**\r\n    * @notice Hash domain parameters into bytes32\r\n    * @dev Used for signature validation (EIP-712)\r\n    * @param _name bytes\r\n    * @param _version bytes\r\n    * @param _verifyingContract address\r\n    * @return bytes32 returns a keccak256 abi.encodePacked value\r\n    */\r\n  function hashDomain(\r\n    bytes calldata _name,\r\n    bytes calldata _version,\r\n    address _verifyingContract\r\n  ) external pure returns (bytes32) {\r\n    return keccak256(abi.encode(\r\n      DOMAIN_TYPEHASH,\r\n      keccak256(_name),\r\n      keccak256(_version),\r\n      _verifyingContract\r\n    ));\r\n  }\r\n\r\n}\r\n\r\n// File: @airswap/swap/contracts/interfaces/ISwap.sol\r\n\r\ninterface ISwap {\r\n\r\n  event Swap(\r\n    uint256 indexed nonce,\r\n    uint256 timestamp,\r\n    address indexed makerWallet,\r\n    uint256 makerParam,\r\n    address makerToken,\r\n    address indexed takerWallet,\r\n    uint256 takerParam,\r\n    address takerToken,\r\n    address affiliateWallet,\r\n    uint256 affiliateParam,\r\n    address affiliateToken\r\n  );\r\n\r\n  event Cancel(\r\n    uint256 indexed nonce,\r\n    address indexed makerWallet\r\n  );\r\n\r\n  event Invalidate(\r\n    uint256 indexed nonce,\r\n    address indexed makerWallet\r\n  );\r\n\r\n  event Authorize(\r\n    address indexed approverAddress,\r\n    address indexed delegateAddress,\r\n    uint256 expiry\r\n  );\r\n\r\n  event Revoke(\r\n    address indexed approverAddress,\r\n    address indexed delegateAddress\r\n  );\r\n\r\n  function delegateApprovals(address, address) external returns (uint256);\r\n  function makerOrderStatus(address, uint256) external returns (byte);\r\n  function makerMinimumNonce(address) external returns (uint256);\r\n\r\n  /**\r\n    * @notice Atomic Token Swap\r\n    * @param order Types.Order\r\n    */\r\n  function swap(\r\n    Types.Order calldata order\r\n  ) external;\r\n\r\n  /**\r\n    * @notice Cancel one or more open orders by nonce\r\n    * @param _nonces uint256[]\r\n    */\r\n  function cancel(\r\n    uint256[] calldata _nonces\r\n  ) external;\r\n\r\n  /**\r\n    * @notice Invalidate all orders below a nonce value\r\n    * @param _minimumNonce uint256\r\n    */\r\n  function invalidate(\r\n    uint256 _minimumNonce\r\n  ) external;\r\n\r\n  /**\r\n    * @notice Authorize a delegate\r\n    * @param _delegate address\r\n    * @param _expiry uint256\r\n    */\r\n  function authorize(\r\n    address _delegate,\r\n    uint256 _expiry\r\n  ) external;\r\n\r\n  /**\r\n    * @notice Revoke an authorization\r\n    * @param _delegate address\r\n    */\r\n  function revoke(\r\n    address _delegate\r\n  ) external;\r\n\r\n}\r\n\r\n// File: @airswap/tokens/contracts/interfaces/IWETH.sol\r\n\r\ninterface IWETH {\r\n\r\n  function deposit() external payable;\r\n  function withdraw(uint256) external;\r\n  function totalSupply() external view returns (uint256);\r\n  function balanceOf(address account) external view returns (uint256);\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see \u0060ERC20Detailed\u0060.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by \u0060account\u0060.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves \u0060amount\u0060 tokens from the caller\u0027s account to \u0060recipient\u0060.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a \u0060Transfer\u0060 event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that \u0060spender\u0060 will be\r\n     * allowed to spend on behalf of \u0060owner\u0060 through \u0060transferFrom\u0060. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when \u0060approve\u0060 or \u0060transferFrom\u0060 are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets \u0060amount\u0060 as the allowance of \u0060spender\u0060 over the caller\u0027s tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * \u003E Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an \u0060Approval\u0060 event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves \u0060amount\u0060 tokens from \u0060sender\u0060 to \u0060recipient\u0060 using the\r\n     * allowance mechanism. \u0060amount\u0060 is then deducted from the caller\u0027s\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a \u0060Transfer\u0060 event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when \u0060value\u0060 tokens are moved from one account (\u0060from\u0060) to\r\n     * another (\u0060to\u0060).\r\n     *\r\n     * Note that \u0060value\u0060 may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a \u0060spender\u0060 for an \u0060owner\u0060 is set by\r\n     * a call to \u0060approve\u0060. \u0060value\u0060 is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/Wrapper.sol\r\n\r\n/**\r\n  * @title Wrapper: Send and receive ether for WETH trades\r\n  */\r\ncontract Wrapper {\r\n\r\n  // Swap contract to settle trades\r\n  ISwap public swapContract;\r\n\r\n  // WETH contract to wrap ether\r\n  IWETH public wethContract;\r\n\r\n  uint256 constant MAX_INT = 2**256 - 1;\r\n  /**\r\n    * @notice Contract Constructor\r\n    * @param _swapContract address\r\n    * @param _wethContract address\r\n    */\r\n  constructor(\r\n    address _swapContract,\r\n    address _wethContract\r\n  ) public {\r\n    swapContract = ISwap(_swapContract);\r\n    wethContract = IWETH(_wethContract);\r\n\r\n    // Sets unlimited allowance for the Wrapper contract.\r\n    wethContract.approve(_swapContract, MAX_INT);\r\n  }\r\n\r\n  /**\r\n    * @notice Required when withdrawing from WETH\r\n    * @dev During unwraps, WETH.withdraw transfers ether to msg.sender (this contract)\r\n    */\r\n  function() external payable {\r\n    // Ensure the message sender is the WETH contract.\r\n    if(msg.sender != address(wethContract)) {\r\n      revert(\u0022DO_NOT_SEND_ETHER\u0022);\r\n    }\r\n  }\r\n\r\n  /**\r\n    * @notice Send an Order\r\n    * @dev Taker must authorize this contract on the swapContract\r\n    * @dev Taker must approve this contract on the wethContract\r\n    * @param _order Types.Order\r\n    */\r\n  function swap(\r\n    Types.Order calldata _order\r\n  ) external payable {\r\n\r\n    // Ensure message sender is taker wallet.\r\n    require(_order.taker.wallet == msg.sender,\r\n      \u0022SENDER_MUST_BE_TAKER\u0022);\r\n\r\n    // The taker is sending ether that must be wrapped.\r\n    if (_order.taker.token == address(wethContract)) {\r\n\r\n      // Ensure  message value is taker param.\r\n      require(_order.taker.param == msg.value,\r\n        \u0022VALUE_MUST_BE_SENT\u0022);\r\n\r\n      // Wrap (deposit) the ether.\r\n      wethContract.deposit.value(msg.value)();\r\n\r\n      // Transfer from wrapper to taker.\r\n      wethContract.transfer(_order.taker.wallet, _order.taker.param);\r\n\r\n    } else {\r\n\r\n      // Ensure no unexpected ether is sent.\r\n      require(msg.value == 0,\r\n        \u0022VALUE_MUST_BE_ZERO\u0022);\r\n\r\n    }\r\n\r\n    // Perform the swap.\r\n    swapContract.swap(_order);\r\n\r\n    // The taker is receiving ether that must be unwrapped.\r\n    if (_order.maker.token == address(wethContract)) {\r\n\r\n      // Transfer from the taker to the wrapper.\r\n      wethContract.transferFrom(_order.taker.wallet, address(this), _order.maker.param);\r\n\r\n      // Unwrap (withdraw) the ether.\r\n      wethContract.withdraw(_order.maker.param);\r\n\r\n      // Transfer ether to the user.\r\n      msg.sender.transfer(_order.maker.param);\r\n\r\n    }\r\n  }\r\n}","ABI":"[{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022components\u0022:[{\u0022name\u0022:\u0022nonce\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022expiry\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022components\u0022:[{\u0022name\u0022:\u0022wallet\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022token\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022param\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022kind\u0022,\u0022type\u0022:\u0022bytes4\u0022}],\u0022name\u0022:\u0022maker\u0022,\u0022type\u0022:\u0022tuple\u0022},{\u0022components\u0022:[{\u0022name\u0022:\u0022wallet\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022token\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022param\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022kind\u0022,\u0022type\u0022:\u0022bytes4\u0022}],\u0022name\u0022:\u0022taker\u0022,\u0022type\u0022:\u0022tuple\u0022},{\u0022components\u0022:[{\u0022name\u0022:\u0022wallet\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022token\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022param\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022kind\u0022,\u0022type\u0022:\u0022bytes4\u0022}],\u0022name\u0022:\u0022affiliate\u0022,\u0022type\u0022:\u0022tuple\u0022},{\u0022components\u0022:[{\u0022name\u0022:\u0022signer\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022v\u0022,\u0022type\u0022:\u0022uint8\u0022},{\u0022name\u0022:\u0022r\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022name\u0022:\u0022s\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022name\u0022:\u0022version\u0022,\u0022type\u0022:\u0022bytes1\u0022}],\u0022name\u0022:\u0022signature\u0022,\u0022type\u0022:\u0022tuple\u0022}],\u0022name\u0022:\u0022_order\u0022,\u0022type\u0022:\u0022tuple\u0022}],\u0022name\u0022:\u0022swap\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:true,\u0022stateMutability\u0022:\u0022payable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022wethContract\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022swapContract\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[{\u0022name\u0022:\u0022_swapContract\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_wethContract\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022constructor\u0022},{\u0022payable\u0022:true,\u0022stateMutability\u0022:\u0022payable\u0022,\u0022type\u0022:\u0022fallback\u0022}]","ContractName":"Wrapper","CompilerVersion":"v0.5.10\u002Bcommit.5a6ea5b1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000251f752b85a9f7e1b3c42d802715b5d7a8da3165000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2","Library":"","SwarmSource":"bzzr://967b334dfece2ddd824748abaffb47fc49cb9afff39992b101c2001af83357fa"}]