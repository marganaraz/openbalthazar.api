[{"SourceCode":"pragma solidity 0.5.16;\r\n\r\ncontract DGDInterface {\r\n\r\n  string public constant name = \u0022DigixDAO\u0022;\r\n  string public constant symbol = \u0022DGD\u0022;\r\n  uint8 public constant decimals = 9;\r\n\r\n  event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n  event Transfer(address indexed from, address indexed to, uint tokens);\r\n\r\n  mapping(address =\u003E uint256) balances;\r\n\r\n  mapping(address =\u003E mapping (address =\u003E uint256)) allowed;\r\n\r\n  uint256 public totalSupply;\r\n\r\n  function balanceOf(address tokenOwner) public view returns (uint) {}\r\n\r\n  function transfer(address receiver, uint numTokens) public returns (bool) {}\r\n\r\n  function approve(address delegate, uint numTokens) public returns (bool) {}\r\n\r\n  function allowance(address owner, address delegate) public view returns (uint) {}\r\n\r\n  function transferFrom(address owner, address buyer, uint numTokens) public returns (bool _success) {}\r\n}\r\n\r\ncontract Acid {\r\n\r\n  event Refund(address indexed user, uint256 indexed dgds, uint256 refundAmount);\r\n\r\n  // wei refunded per 0.000000001 DGD burned\r\n  uint256 public weiPerNanoDGD;\r\n  bool public isInitialized;\r\n  address public dgdTokenContract;\r\n  address public owner;\r\n\r\n  modifier onlyOwner() {\r\n    require(owner == msg.sender);\r\n    _;\r\n  }\r\n\r\n  modifier unlessInitialized() {\r\n    require(!isInitialized, \u0022contract is already initialized\u0022);\r\n    _;\r\n  }\r\n\r\n  modifier requireInitialized() {\r\n    require(isInitialized, \u0022contract is not initialized\u0022);\r\n    _;\r\n  }\r\n\r\n  constructor() public {\r\n    owner = msg.sender;\r\n    isInitialized = false;\r\n  }\r\n\r\n  function () external payable {}\r\n\r\n  function init(uint256 _weiPerNanoDGD, address _dgdTokenContract) public onlyOwner() unlessInitialized() returns (bool _success) {\r\n    require(_weiPerNanoDGD \u003E 0, \u0022rate cannot be zero\u0022);\r\n    require(_dgdTokenContract != address(0), \u0022DGD token contract cannot be empty\u0022);\r\n    weiPerNanoDGD = _weiPerNanoDGD;\r\n    dgdTokenContract = _dgdTokenContract;\r\n    isInitialized = true;\r\n    _success = true;\r\n  }\r\n\r\n  function burn() public requireInitialized() returns (bool _success) {\r\n    // Rate will be calculated based on the nearest decimal\r\n    uint256 _amount = DGDInterface(dgdTokenContract).balanceOf(msg.sender);\r\n    uint256 _wei = mul(_amount, weiPerNanoDGD);\r\n    require(address(this).balance \u003E= _wei, \u0022Contract does not have enough funds\u0022);\r\n    require(DGDInterface(dgdTokenContract).transferFrom(msg.sender, 0x0000000000000000000000000000000000000000, _amount), \u0022No DGDs or DGD account not authorized\u0022);\r\n    address _user = msg.sender;\r\n    (_success,) = _user.call.value(_wei)(\u0027\u0027);\r\n    require(_success, \u0022Transfer of Ether failed\u0022);\r\n    emit Refund(_user, _amount, _wei);\r\n  }\r\n\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\r\n    // benefit is lost if \u0027b\u0027 is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    require(c / a == b, \u0022SafeMath: multiplication overflow\u0022);\r\n\r\n    return c;\r\n  }\r\n}","ABI":"[{\u0022inputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022constructor\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022user\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022dgds\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022refundAmount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022Refund\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022payable\u0022:true,\u0022stateMutability\u0022:\u0022payable\u0022,\u0022type\u0022:\u0022fallback\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022burn\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022_success\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022dgdTokenContract\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_weiPerNanoDGD\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_dgdTokenContract\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022init\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022_success\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022isInitialized\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022owner\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022weiPerNanoDGD\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022}]","ContractName":"Acid","CompilerVersion":"v0.5.16\u002Bcommit.9c3226ce","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://2885d2b0131e91bf0109fdf1877ed8084f13a91326eb7e39155748736c720f2c"}]