[{"SourceCode":"pragma solidity 0.4.18;\r\n\r\n// File: contracts/ERC20Interface.sol\r\n\r\n// https://github.com/ethereum/EIPs/issues/20\r\ninterface ERC20 {\r\n    function totalSupply() public view returns (uint supply);\r\n    function balanceOf(address _owner) public view returns (uint balance);\r\n    function transfer(address _to, uint _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint _value) public returns (bool success);\r\n    function approve(address _spender, uint _value) public returns (bool success);\r\n    function allowance(address _owner, address _spender) public view returns (uint remaining);\r\n    function decimals() public view returns(uint digits);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n}\r\n\r\n// File: contracts/KyberReserveInterface.sol\r\n\r\n/// @title Kyber Reserve contract\r\ninterface KyberReserveInterface {\r\n\r\n    function trade(\r\n        ERC20 srcToken,\r\n        uint srcAmount,\r\n        ERC20 destToken,\r\n        address destAddress,\r\n        uint conversionRate,\r\n        bool validate\r\n    )\r\n        public\r\n        payable\r\n        returns(bool);\r\n\r\n    function getConversionRate(ERC20 src, ERC20 dest, uint srcQty, uint blockNumber) public view returns(uint);\r\n}\r\n\r\n// File: contracts/Utils.sol\r\n\r\n/// @title Kyber constants contract\r\ncontract Utils {\r\n\r\n    ERC20 constant internal ETH_TOKEN_ADDRESS = ERC20(0x00eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee);\r\n    uint  constant internal PRECISION = (10**18);\r\n    uint  constant internal MAX_QTY   = (10**28); // 10B tokens\r\n    uint  constant internal MAX_RATE  = (PRECISION * 10**6); // up to 1M tokens per ETH\r\n    uint  constant internal MAX_DECIMALS = 18;\r\n    uint  constant internal ETH_DECIMALS = 18;\r\n    mapping(address=\u003Euint) internal decimals;\r\n\r\n    function setDecimals(ERC20 token) internal {\r\n        if (token == ETH_TOKEN_ADDRESS) decimals[token] = ETH_DECIMALS;\r\n        else decimals[token] = token.decimals();\r\n    }\r\n\r\n    function getDecimals(ERC20 token) internal view returns(uint) {\r\n        if (token == ETH_TOKEN_ADDRESS) return ETH_DECIMALS; // save storage access\r\n        uint tokenDecimals = decimals[token];\r\n        // technically, there might be token with decimals 0\r\n        // moreover, very possible that old tokens have decimals 0\r\n        // these tokens will just have higher gas fees.\r\n        if(tokenDecimals == 0) return token.decimals();\r\n\r\n        return tokenDecimals;\r\n    }\r\n\r\n    function calcDstQty(uint srcQty, uint srcDecimals, uint dstDecimals, uint rate) internal pure returns(uint) {\r\n        require(srcQty \u003C= MAX_QTY);\r\n        require(rate \u003C= MAX_RATE);\r\n\r\n        if (dstDecimals \u003E= srcDecimals) {\r\n            require((dstDecimals - srcDecimals) \u003C= MAX_DECIMALS);\r\n            return (srcQty * rate * (10**(dstDecimals - srcDecimals))) / PRECISION;\r\n        } else {\r\n            require((srcDecimals - dstDecimals) \u003C= MAX_DECIMALS);\r\n            return (srcQty * rate) / (PRECISION * (10**(srcDecimals - dstDecimals)));\r\n        }\r\n    }\r\n\r\n    function calcSrcQty(uint dstQty, uint srcDecimals, uint dstDecimals, uint rate) internal pure returns(uint) {\r\n        require(dstQty \u003C= MAX_QTY);\r\n        require(rate \u003C= MAX_RATE);\r\n        \r\n        //source quantity is rounded up. to avoid dest quantity being too low.\r\n        uint numerator;\r\n        uint denominator;\r\n        if (srcDecimals \u003E= dstDecimals) {\r\n            require((srcDecimals - dstDecimals) \u003C= MAX_DECIMALS);\r\n            numerator = (PRECISION * dstQty * (10**(srcDecimals - dstDecimals)));\r\n            denominator = rate;\r\n        } else {\r\n            require((dstDecimals - srcDecimals) \u003C= MAX_DECIMALS);\r\n            numerator = (PRECISION * dstQty);\r\n            denominator = (rate * (10**(dstDecimals - srcDecimals)));\r\n        }\r\n        return (numerator \u002B denominator - 1) / denominator; //avoid rounding down errors\r\n    }\r\n}\r\n\r\n// File: contracts/Utils2.sol\r\n\r\ncontract Utils2 is Utils {\r\n\r\n    /// @dev get the balance of a user.\r\n    /// @param token The token type\r\n    /// @return The balance\r\n    function getBalance(ERC20 token, address user) public view returns(uint) {\r\n        if (token == ETH_TOKEN_ADDRESS)\r\n            return user.balance;\r\n        else\r\n            return token.balanceOf(user);\r\n    }\r\n\r\n    function getDecimalsSafe(ERC20 token) internal returns(uint) {\r\n\r\n        if (decimals[token] == 0) {\r\n            setDecimals(token);\r\n        }\r\n\r\n        return decimals[token];\r\n    }\r\n\r\n    function calcDestAmount(ERC20 src, ERC20 dest, uint srcAmount, uint rate) internal view returns(uint) {\r\n        return calcDstQty(srcAmount, getDecimals(src), getDecimals(dest), rate);\r\n    }\r\n\r\n    function calcSrcAmount(ERC20 src, ERC20 dest, uint destAmount, uint rate) internal view returns(uint) {\r\n        return calcSrcQty(destAmount, getDecimals(src), getDecimals(dest), rate);\r\n    }\r\n\r\n    function calcRateFromQty(uint srcAmount, uint destAmount, uint srcDecimals, uint dstDecimals)\r\n        internal pure returns(uint)\r\n    {\r\n        require(srcAmount \u003C= MAX_QTY);\r\n        require(destAmount \u003C= MAX_QTY);\r\n\r\n        if (dstDecimals \u003E= srcDecimals) {\r\n            require((dstDecimals - srcDecimals) \u003C= MAX_DECIMALS);\r\n            return (destAmount * PRECISION / ((10 ** (dstDecimals - srcDecimals)) * srcAmount));\r\n        } else {\r\n            require((srcDecimals - dstDecimals) \u003C= MAX_DECIMALS);\r\n            return (destAmount * PRECISION * (10 ** (srcDecimals - dstDecimals)) / srcAmount);\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/PermissionGroups.sol\r\n\r\ncontract PermissionGroups {\r\n\r\n    address public admin;\r\n    address public pendingAdmin;\r\n    mapping(address=\u003Ebool) internal operators;\r\n    mapping(address=\u003Ebool) internal alerters;\r\n    address[] internal operatorsGroup;\r\n    address[] internal alertersGroup;\r\n    uint constant internal MAX_GROUP_SIZE = 50;\r\n\r\n    function PermissionGroups() public {\r\n        admin = msg.sender;\r\n    }\r\n\r\n    modifier onlyAdmin() {\r\n        require(msg.sender == admin);\r\n        _;\r\n    }\r\n\r\n    modifier onlyOperator() {\r\n        require(operators[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    modifier onlyAlerter() {\r\n        require(alerters[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    function getOperators () external view returns(address[]) {\r\n        return operatorsGroup;\r\n    }\r\n\r\n    function getAlerters () external view returns(address[]) {\r\n        return alertersGroup;\r\n    }\r\n\r\n    event TransferAdminPending(address pendingAdmin);\r\n\r\n    /**\r\n     * @dev Allows the current admin to set the pendingAdmin address.\r\n     * @param newAdmin The address to transfer ownership to.\r\n     */\r\n    function transferAdmin(address newAdmin) public onlyAdmin {\r\n        require(newAdmin != address(0));\r\n        TransferAdminPending(pendingAdmin);\r\n        pendingAdmin = newAdmin;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current admin to set the admin in one tx. Useful initial deployment.\r\n     * @param newAdmin The address to transfer ownership to.\r\n     */\r\n    function transferAdminQuickly(address newAdmin) public onlyAdmin {\r\n        require(newAdmin != address(0));\r\n        TransferAdminPending(newAdmin);\r\n        AdminClaimed(newAdmin, admin);\r\n        admin = newAdmin;\r\n    }\r\n\r\n    event AdminClaimed( address newAdmin, address previousAdmin);\r\n\r\n    /**\r\n     * @dev Allows the pendingAdmin address to finalize the change admin process.\r\n     */\r\n    function claimAdmin() public {\r\n        require(pendingAdmin == msg.sender);\r\n        AdminClaimed(pendingAdmin, admin);\r\n        admin = pendingAdmin;\r\n        pendingAdmin = address(0);\r\n    }\r\n\r\n    event AlerterAdded (address newAlerter, bool isAdd);\r\n\r\n    function addAlerter(address newAlerter) public onlyAdmin {\r\n        require(!alerters[newAlerter]); // prevent duplicates.\r\n        require(alertersGroup.length \u003C MAX_GROUP_SIZE);\r\n\r\n        AlerterAdded(newAlerter, true);\r\n        alerters[newAlerter] = true;\r\n        alertersGroup.push(newAlerter);\r\n    }\r\n\r\n    function removeAlerter (address alerter) public onlyAdmin {\r\n        require(alerters[alerter]);\r\n        alerters[alerter] = false;\r\n\r\n        for (uint i = 0; i \u003C alertersGroup.length; \u002B\u002Bi) {\r\n            if (alertersGroup[i] == alerter) {\r\n                alertersGroup[i] = alertersGroup[alertersGroup.length - 1];\r\n                alertersGroup.length--;\r\n                AlerterAdded(alerter, false);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    event OperatorAdded(address newOperator, bool isAdd);\r\n\r\n    function addOperator(address newOperator) public onlyAdmin {\r\n        require(!operators[newOperator]); // prevent duplicates.\r\n        require(operatorsGroup.length \u003C MAX_GROUP_SIZE);\r\n\r\n        OperatorAdded(newOperator, true);\r\n        operators[newOperator] = true;\r\n        operatorsGroup.push(newOperator);\r\n    }\r\n\r\n    function removeOperator (address operator) public onlyAdmin {\r\n        require(operators[operator]);\r\n        operators[operator] = false;\r\n\r\n        for (uint i = 0; i \u003C operatorsGroup.length; \u002B\u002Bi) {\r\n            if (operatorsGroup[i] == operator) {\r\n                operatorsGroup[i] = operatorsGroup[operatorsGroup.length - 1];\r\n                operatorsGroup.length -= 1;\r\n                OperatorAdded(operator, false);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/Withdrawable.sol\r\n\r\n/**\r\n * @title Contracts that should be able to recover tokens or ethers\r\n * @author Ilan Doron\r\n * @dev This allows to recover any tokens or Ethers received in a contract.\r\n * This will prevent any accidental loss of tokens.\r\n */\r\ncontract Withdrawable is PermissionGroups {\r\n\r\n    event TokenWithdraw(ERC20 token, uint amount, address sendTo);\r\n\r\n    /**\r\n     * @dev Withdraw all ERC20 compatible tokens\r\n     * @param token ERC20 The address of the token contract\r\n     */\r\n    function withdrawToken(ERC20 token, uint amount, address sendTo) external onlyAdmin {\r\n        require(token.transfer(sendTo, amount));\r\n        TokenWithdraw(token, amount, sendTo);\r\n    }\r\n\r\n    event EtherWithdraw(uint amount, address sendTo);\r\n\r\n    /**\r\n     * @dev Withdraw Ethers\r\n     */\r\n    function withdrawEther(uint amount, address sendTo) external onlyAdmin {\r\n        sendTo.transfer(amount);\r\n        EtherWithdraw(amount, sendTo);\r\n    }\r\n}\r\n\r\n// File: contracts/reserves/bridgeReserves/uniswap/KyberUniswapReserve.sol\r\n\r\ninterface UniswapExchange {\r\n        function ethToTokenSwapInput(\r\n            uint256 min_tokens,\r\n            uint256 deadline\r\n        )\r\n            external\r\n            payable\r\n            returns (uint256  tokens_bought);\r\n\r\n        function tokenToEthSwapInput(\r\n            uint256 tokens_sold,\r\n            uint256 min_eth,\r\n            uint256 deadline\r\n        )\r\n            external\r\n            returns (uint256  eth_bought);\r\n\r\n        function getEthToTokenInputPrice(\r\n            uint256 eth_sold\r\n        )\r\n            external\r\n            view\r\n            returns (uint256 tokens_bought);\r\n\r\n        function getTokenToEthInputPrice(\r\n            uint256 tokens_sold\r\n        )\r\n            external\r\n            view\r\n            returns (uint256 eth_bought);\r\n    }\r\n\r\n\r\n    interface UniswapFactory {\r\n        function getExchange(address token) external view returns (address exchange);\r\n    }\r\n\r\n\r\n    /*\r\n     * A reserve that connects to Uniswap.\r\n     *\r\n     * This reserve makes use of an internal inventory for locally filling orders\r\n     * using the reserve\u0027s inventory when certain conditions are met.\r\n     * Conditions are:\r\n     * - After trading the inventory will remain within defined limits.\r\n     * - Uniswap prices do not display internal arbitrage.\r\n     * - Uniswap ask and bid prices meet minimum spread requirements.\r\n     *\r\n     * An additional premium may be added to the converted price for optional\r\n     * promotions.\r\n     */\r\n    contract KyberUniswapReserve is KyberReserveInterface, Withdrawable, Utils2 {\r\n        // Parts per 10000\r\n        uint public constant DEFAULT_FEE_BPS = 25;\r\n\r\n        UniswapFactory public uniswapFactory;\r\n        address public kyberNetwork;\r\n\r\n        uint public feeBps = DEFAULT_FEE_BPS;\r\n\r\n        // Uniswap exchange contract for every listed token\r\n        // token -\u003E exchange\r\n        mapping (address =\u003E address) public tokenExchange;\r\n\r\n        // Internal inventory balance limits\r\n        // token -\u003E limit\r\n        mapping (address =\u003E uint) public internalInventoryMin;\r\n        mapping (address =\u003E uint) public internalInventoryMax;\r\n\r\n        // Minimum spread in BPS required for using internal inventory\r\n        // token -\u003E limit\r\n        mapping (address =\u003E uint) public internalActivationMinSpreadBps;\r\n\r\n        // Premium BPS added to internal price (making it better).\r\n        // token -\u003E limit\r\n        mapping (address =\u003E uint) public internalPricePremiumBps;\r\n\r\n        bool public tradeEnabled = true;\r\n\r\n        /**\r\n            Constructor\r\n        */\r\n        function KyberUniswapReserve(\r\n            UniswapFactory _uniswapFactory,\r\n            address _admin,\r\n            address _kyberNetwork\r\n        )\r\n            public\r\n        {\r\n            require(address(_uniswapFactory) != 0);\r\n            require(_admin != 0);\r\n            require(_kyberNetwork != 0);\r\n\r\n            uniswapFactory = _uniswapFactory;\r\n            admin = _admin;\r\n            kyberNetwork = _kyberNetwork;\r\n        }\r\n\r\n        function() public payable {\r\n            // anyone can deposit ether\r\n        }\r\n\r\n        /**\r\n            Returns dest quantity / source quantity.\r\n            Last bit of the rate indicates whether to use internal inventory:\r\n              0 - use uniswap\r\n              1 - use internal inventory\r\n        */\r\n        function getConversionRate(\r\n            ERC20 src,\r\n            ERC20 dest,\r\n            uint srcQty,\r\n            uint blockNumber\r\n        )\r\n            public\r\n            view\r\n            returns(uint)\r\n        {\r\n            // This makes the UNUSED warning go away.\r\n            blockNumber;\r\n            if (!isValidTokens(src, dest)) return 0;\r\n            if (!tradeEnabled) return 0;\r\n            if (srcQty == 0) return 0;\r\n\r\n            ERC20 token;\r\n            if (src == ETH_TOKEN_ADDRESS) {\r\n                token = dest;\r\n            } else if (dest == ETH_TOKEN_ADDRESS) {\r\n                token = src;\r\n            } else {\r\n                // Should never arrive here - isValidTokens requires one side to be ETH\r\n                revert();\r\n            }\r\n\r\n            uint convertedQuantity;\r\n            uint rateSrcDest;\r\n            uint rateDestSrc;\r\n            (convertedQuantity, rateSrcDest) = calcUniswapConversion(src, dest, srcQty);\r\n            if (convertedQuantity == 0) return 0;\r\n            (, rateDestSrc) = calcUniswapConversion(dest, src, convertedQuantity);\r\n\r\n            uint quantityWithPremium = addPremium(token, convertedQuantity);\r\n\r\n            bool useInternalInventory = shouldUseInternalInventory(\r\n                src, /* srcToken */\r\n                srcQty, /* srcAmount */\r\n                dest, /* destToken */\r\n                quantityWithPremium, /* destAmount */\r\n                rateSrcDest, /* rateSrcDest */\r\n                rateDestSrc /* rateDestSrc */\r\n            );\r\n\r\n            uint rate;\r\n            if (useInternalInventory) {\r\n                // If using internal inventory add premium to converted quantity\r\n                rate = calcRateFromQty(\r\n                    srcQty, /* srcAmount */\r\n                    quantityWithPremium, /* destAmount */\r\n                    getDecimals(src), /* srcDecimals */\r\n                    getDecimals(dest) /* dstDecimals */\r\n                );\r\n            } else {\r\n                // Use rate calculated from uniswap quantities after fees\r\n                rate = rateSrcDest;\r\n            }\r\n            return applyInternalInventoryHintToRate(rate, useInternalInventory);\r\n        }\r\n\r\n        function applyInternalInventoryHintToRate(\r\n            uint rate,\r\n            bool useInternalInventory\r\n        )\r\n            internal\r\n            pure\r\n            returns(uint)\r\n        {\r\n            return rate % 2 == (useInternalInventory ? 1 : 0)\r\n                ? rate\r\n                : rate - 1;\r\n        }\r\n\r\n\r\n        event TradeExecute(\r\n            address indexed sender,\r\n            address src,\r\n            uint srcAmount,\r\n            address destToken,\r\n            uint destAmount,\r\n            address destAddress,\r\n            bool useInternalInventory\r\n        );\r\n\r\n        /**\r\n          conversionRate: expected conversion rate should be \u003E= this value.\r\n         */\r\n        function trade(\r\n            ERC20 srcToken,\r\n            uint srcAmount,\r\n            ERC20 destToken,\r\n            address destAddress,\r\n            uint conversionRate,\r\n            bool validate\r\n        )\r\n            public\r\n            payable\r\n            returns(bool)\r\n        {\r\n            require(tradeEnabled);\r\n            require(msg.sender == kyberNetwork);\r\n            require(isValidTokens(srcToken, destToken));\r\n\r\n            if (validate) {\r\n                require(conversionRate \u003E 0);\r\n                if (srcToken == ETH_TOKEN_ADDRESS)\r\n                    require(msg.value == srcAmount);\r\n                else\r\n                    require(msg.value == 0);\r\n            }\r\n\r\n            // Making sure srcAmount has been transfered to the reserve.\r\n            // If srcToken is ETH the value has already been transfered by calling\r\n            // the function.\r\n            if (srcToken != ETH_TOKEN_ADDRESS)\r\n                require(srcToken.transferFrom(msg.sender, address(this), srcAmount));\r\n\r\n            uint expectedDestAmount = calcDestAmount(\r\n                srcToken, /* src */\r\n                destToken, /* dest */\r\n                srcAmount, /* srcAmount */\r\n                conversionRate /* rate */\r\n            );\r\n\r\n            bool useInternalInventory = conversionRate % 2 == 1;\r\n\r\n            uint destAmount;\r\n            UniswapExchange exchange;\r\n            if (srcToken == ETH_TOKEN_ADDRESS) {\r\n                if (!useInternalInventory) {\r\n                    // Deduct fees (in ETH) before converting\r\n                    uint quantity = deductFee(srcAmount);\r\n                    exchange = UniswapExchange(tokenExchange[address(destToken)]);\r\n                    destAmount = exchange.ethToTokenSwapInput.value(quantity)(\r\n                        1, /* min_tokens: uniswap requires it to be \u003E 0 */\r\n                        2 ** 255 /* deadline */\r\n                    );\r\n                    require(destAmount \u003E= expectedDestAmount);\r\n                }\r\n\r\n                // Transfer user-expected dest amount\r\n                require(destToken.transfer(destAddress, expectedDestAmount));\r\n            } else {\r\n                if (!useInternalInventory) {\r\n                    exchange = UniswapExchange(tokenExchange[address(srcToken)]);\r\n                    destAmount = exchange.tokenToEthSwapInput(\r\n                        srcAmount,\r\n                        1, /* min_eth: uniswap requires it to be \u003E 0 */\r\n                        2 ** 255 /* deadline */\r\n                    );\r\n                    // Deduct fees (in ETH) after converting\r\n                    destAmount = deductFee(destAmount);\r\n                    require(destAmount \u003E= expectedDestAmount);\r\n                }\r\n\r\n                // Transfer user-expected dest amount\r\n                destAddress.transfer(expectedDestAmount);\r\n            }\r\n\r\n            TradeExecute(\r\n                msg.sender, /* sender */\r\n                srcToken, /* src */\r\n                srcAmount, /* srcAmount */\r\n                destToken, /* destToken */\r\n                expectedDestAmount, /* destAmount */\r\n                destAddress, /* destAddress */\r\n                useInternalInventory /* useInternalInventory */\r\n            );\r\n            return true;\r\n        }\r\n\r\n        event FeeUpdated(\r\n            uint bps\r\n        );\r\n\r\n        function setFee(\r\n            uint bps\r\n        )\r\n            public\r\n            onlyAdmin\r\n        {\r\n            require(bps \u003C= 10000);\r\n\r\n            feeBps = bps;\r\n\r\n            FeeUpdated(bps);\r\n        }\r\n\r\n        event InternalActivationConfigUpdated(\r\n            ERC20 token,\r\n            uint minSpreadBps,\r\n            uint premiumBps\r\n        );\r\n\r\n        function setInternalActivationConfig(\r\n            ERC20 token,\r\n            uint minSpreadBps,\r\n            uint premiumBps\r\n        )\r\n            public\r\n            onlyAdmin\r\n        {\r\n            require(tokenExchange[address(token)] != address(0));\r\n            require(minSpreadBps \u003C= 1000); // min spread \u003C= 10%\r\n            require(premiumBps \u003C= 500); // premium \u003C= 5%\r\n\r\n            internalActivationMinSpreadBps[address(token)] = minSpreadBps;\r\n            internalPricePremiumBps[address(token)] = premiumBps;\r\n\r\n            InternalActivationConfigUpdated(token, minSpreadBps, premiumBps);\r\n        }\r\n\r\n        event InternalInventoryLimitsUpdated(\r\n            ERC20 token,\r\n            uint minBalance,\r\n            uint maxBalance\r\n        );\r\n\r\n        function setInternalInventoryLimits(\r\n            ERC20 token,\r\n            uint minBalance,\r\n            uint maxBalance\r\n        )\r\n            public\r\n            onlyOperator\r\n        {\r\n            require(tokenExchange[address(token)] != address(0));\r\n\r\n            internalInventoryMin[address(token)] = minBalance;\r\n            internalInventoryMax[address(token)] = maxBalance;\r\n\r\n            InternalInventoryLimitsUpdated(token, minBalance, maxBalance);\r\n        }\r\n\r\n        event TokenListed(\r\n            ERC20 token,\r\n            UniswapExchange exchange\r\n        );\r\n\r\n        function listToken(ERC20 token)\r\n            public\r\n            onlyAdmin\r\n        {\r\n            require(address(token) != 0);\r\n\r\n            UniswapExchange uniswapExchange = UniswapExchange(\r\n                uniswapFactory.getExchange(token)\r\n            );\r\n            tokenExchange[address(token)] = address(uniswapExchange);\r\n            setDecimals(token);\r\n\r\n            require(token.approve(uniswapExchange, 2 ** 255));\r\n\r\n            // internal inventory disabled by default\r\n            internalInventoryMin[address(token)] = 2 ** 255;\r\n            internalInventoryMax[address(token)] = 0;\r\n            internalActivationMinSpreadBps[address(token)] = 0;\r\n            internalPricePremiumBps[address(token)] = 0;\r\n\r\n            TokenListed(token, uniswapExchange);\r\n        }\r\n\r\n        event TokenDelisted(ERC20 token);\r\n\r\n        function delistToken(ERC20 token)\r\n            public\r\n            onlyAdmin\r\n        {\r\n            require(tokenExchange[address(token)] != address(0));\r\n\r\n            delete tokenExchange[address(token)];\r\n            delete internalInventoryMin[address(token)];\r\n            delete internalInventoryMax[address(token)];\r\n            delete internalActivationMinSpreadBps[address(token)];\r\n            delete internalPricePremiumBps[address(token)];\r\n\r\n            TokenDelisted(token);\r\n        }\r\n\r\n        function isValidTokens(\r\n            ERC20 src,\r\n            ERC20 dest\r\n        )\r\n            public\r\n            view\r\n            returns(bool)\r\n        {\r\n            return (\r\n                (\r\n                    src == ETH_TOKEN_ADDRESS \u0026\u0026\r\n                    tokenExchange[address(dest)] != address(0)\r\n                ) ||\r\n                (\r\n                    tokenExchange[address(src)] != address(0) \u0026\u0026\r\n                    dest == ETH_TOKEN_ADDRESS\r\n                )\r\n            );\r\n        }\r\n\r\n        event TradeEnabled(\r\n            bool enable\r\n        );\r\n\r\n        function enableTrade()\r\n            public\r\n            onlyAdmin\r\n            returns(bool)\r\n        {\r\n            tradeEnabled = true;\r\n            TradeEnabled(true);\r\n            return true;\r\n        }\r\n\r\n        function disableTrade()\r\n            public\r\n            onlyAlerter\r\n            returns(bool)\r\n        {\r\n            tradeEnabled = false;\r\n            TradeEnabled(false);\r\n            return true;\r\n        }\r\n\r\n        event KyberNetworkSet(\r\n            address kyberNetwork\r\n        );\r\n\r\n        function setKyberNetwork(\r\n            address _kyberNetwork\r\n        )\r\n            public\r\n            onlyAdmin\r\n        {\r\n            require(_kyberNetwork != 0);\r\n            kyberNetwork = _kyberNetwork;\r\n            KyberNetworkSet(kyberNetwork);\r\n        }\r\n\r\n        /*\r\n         * Uses amounts and rates to check if the reserve\u0027s internal inventory can\r\n         * be used directly.\r\n         *\r\n         * rateEthToToken and rateTokenToEth are in kyber rate format meaning\r\n         * rate as numerator and 1e18 as denominator.\r\n         */\r\n        function shouldUseInternalInventory(\r\n            ERC20 srcToken,\r\n            uint srcAmount,\r\n            ERC20 destToken,\r\n            uint destAmount,\r\n            uint rateSrcDest,\r\n            uint rateDestSrc\r\n        )\r\n            public\r\n            view\r\n            returns(bool)\r\n        {\r\n            require(srcAmount \u003C MAX_QTY);\r\n            require(destAmount \u003C MAX_QTY);\r\n\r\n            // Check for internal inventory balance limitations\r\n            ERC20 token;\r\n            if (srcToken == ETH_TOKEN_ADDRESS) {\r\n                token = destToken;\r\n                uint tokenBalance = token.balanceOf(this);\r\n                if (\r\n                    tokenBalance \u003C destAmount ||\r\n                    tokenBalance - destAmount \u003C internalInventoryMin[token]\r\n                ) {\r\n                    return false;\r\n                }\r\n            } else {\r\n                token = srcToken;\r\n                if (this.balance \u003C destAmount) return false;\r\n                if (token.balanceOf(this) \u002B srcAmount \u003E internalInventoryMax[token]) {\r\n                    return false;\r\n                }\r\n            }\r\n\r\n            uint normalizedDestSrc = 10 ** 36 / rateDestSrc;\r\n\r\n            // Check for arbitrage\r\n            if (rateSrcDest \u003E normalizedDestSrc) return false;\r\n\r\n            uint activationSpread = internalActivationMinSpreadBps[token];\r\n            uint spread = uint(calculateSpreadBps(normalizedDestSrc, rateSrcDest));\r\n            return spread \u003E= activationSpread;\r\n        }\r\n\r\n        /*\r\n         * Spread calculation is (ask - bid) / ((ask \u002B bid) / 2).\r\n         * We multiply by 10000 to get result in BPS.\r\n         *\r\n         * Note: if askRate \u003E bidRate result will be negative indicating\r\n         * internal arbitrage.\r\n         */\r\n        function calculateSpreadBps(\r\n            uint _askRate,\r\n            uint _bidRate\r\n        )\r\n            public\r\n            pure\r\n            returns(int)\r\n        {\r\n            int askRate = int(_askRate);\r\n            int bidRate = int(_bidRate);\r\n            return 10000 * 2 * (askRate - bidRate) / (askRate \u002B bidRate);\r\n        }\r\n\r\n        function deductFee(\r\n            uint amount\r\n        )\r\n            public\r\n            view\r\n            returns(uint)\r\n        {\r\n            return amount * (10000 - feeBps) / 10000;\r\n        }\r\n\r\n        function addPremium(\r\n            ERC20 token,\r\n            uint amount\r\n        )\r\n            public\r\n            view\r\n            returns(uint)\r\n        {\r\n            require(amount \u003C= MAX_QTY);\r\n            return amount * (10000 \u002B internalPricePremiumBps[token]) / 10000;\r\n        }\r\n\r\n        function calcUniswapConversion(\r\n            ERC20 src,\r\n            ERC20 dest,\r\n            uint srcQty\r\n        )\r\n            internal\r\n            view\r\n            returns(uint destQty, uint rate)\r\n        {\r\n            UniswapExchange exchange;\r\n            if (src == ETH_TOKEN_ADDRESS) {\r\n                exchange = UniswapExchange(tokenExchange[address(dest)]);\r\n                destQty = exchange.getEthToTokenInputPrice(\r\n                    deductFee(srcQty)\r\n                );\r\n            } else {\r\n                exchange = UniswapExchange(tokenExchange[address(src)]);\r\n                destQty = deductFee(\r\n                    exchange.getTokenToEthInputPrice(srcQty)\r\n                );\r\n            }\r\n\r\n            rate = calcRateFromQty(\r\n                srcQty, /* srcAmount */\r\n                destQty, /* destAmount */\r\n                getDecimals(src), /* srcDecimals */\r\n                getDecimals(dest) /* dstDecimals */\r\n            );\r\n        }\r\n    }","ABI":"[{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022enableTrade\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022alerter\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022removeAlerter\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022tokenExchange\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022internalPricePremiumBps\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022token\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022listToken\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022feeBps\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022pendingAdmin\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022getOperators\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address[]\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022DEFAULT_FEE_BPS\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022token\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022addPremium\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022token\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022sendTo\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022withdrawToken\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022newAlerter\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022addAlerter\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022internalInventoryMin\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_kyberNetwork\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022setKyberNetwork\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022srcToken\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022srcAmount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022destToken\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022destAmount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022rateSrcDest\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022rateDestSrc\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022shouldUseInternalInventory\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022disableTrade\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022bps\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022setFee\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022srcToken\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022srcAmount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022destToken\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022destAddress\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022conversionRate\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022validate\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022name\u0022:\u0022trade\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:true,\u0022stateMutability\u0022:\u0022payable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022newAdmin\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022transferAdmin\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022claimAdmin\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022newAdmin\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022transferAdminQuickly\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022src\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022dest\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022isValidTokens\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022token\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022minSpreadBps\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022premiumBps\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022setInternalActivationConfig\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022getAlerters\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address[]\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022src\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022dest\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022srcQty\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022blockNumber\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022getConversionRate\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022uniswapFactory\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022newOperator\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022addOperator\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022internalInventoryMax\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022token\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022minBalance\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022maxBalance\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022setInternalInventoryLimits\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022deductFee\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022token\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022delistToken\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022operator\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022removeOperator\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022kyberNetwork\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_askRate\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_bidRate\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022calculateSpreadBps\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022int256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022pure\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022internalActivationMinSpreadBps\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022sendTo\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022withdrawEther\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022token\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022user\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022getBalance\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022tradeEnabled\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022admin\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[{\u0022name\u0022:\u0022_uniswapFactory\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_admin\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_kyberNetwork\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022constructor\u0022},{\u0022payable\u0022:true,\u0022stateMutability\u0022:\u0022payable\u0022,\u0022type\u0022:\u0022fallback\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022sender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022src\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022srcAmount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022destToken\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022destAmount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022destAddress\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022useInternalInventory\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022name\u0022:\u0022TradeExecute\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022bps\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022FeeUpdated\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022token\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022minSpreadBps\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022premiumBps\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022InternalActivationConfigUpdated\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022token\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022minBalance\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022maxBalance\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022InternalInventoryLimitsUpdated\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022token\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022exchange\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022TokenListed\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022token\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022TokenDelisted\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022enable\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022name\u0022:\u0022TradeEnabled\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022kyberNetwork\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022KyberNetworkSet\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022token\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022sendTo\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022TokenWithdraw\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022sendTo\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022EtherWithdraw\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022pendingAdmin\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022TransferAdminPending\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022newAdmin\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022previousAdmin\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022AdminClaimed\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022newAlerter\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022isAdd\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022name\u0022:\u0022AlerterAdded\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022newOperator\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022isAdd\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022name\u0022:\u0022OperatorAdded\u0022,\u0022type\u0022:\u0022event\u0022}]","ContractName":"KyberUniswapReserve","CompilerVersion":"v0.4.18\u002Bcommit.9cf6e910","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000c0a47dfe034b400b47bdad5fecda2621de6c4d95000000000000000000000000d3cc03c1d1e9d46f28aebc4ba26c5990c7ffbc3e00000000000000000000000065bf64ff5f51272f729bdcd7acfb00677ced86cd","Library":"","SwarmSource":"bzzr://7c43cdf667f96d448ed97ce3ad0e9ef3353ecdc10dbe1ee7702827524f796b35"}]