[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2019-08-03\r\n*/\r\n\r\npragma solidity \u003E=0.4.25 \u003C0.6.0;\r\n\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original \u0060owner\u0060 of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner, \u0022Only contract owner can call this method\u0022);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0), \u0022Owner can\u0027t be set to zero address\u0022);\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Multiplies two unsigned integers, reverts on overflow.\r\n     */\r\n    function mul(uint a, uint b) internal pure returns (uint) {\r\n        // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\r\n        // benefit is lost if \u0027b\u0027 is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint c = a * b;\r\n        require(c / a == b, \u0022SafeMath: multiplication overflow\u0022);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n     */\r\n    function div(uint a, uint b) internal pure returns (uint) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b \u003E 0, \u0022SafeMath: division by zero\u0022);\r\n        uint c = a / b;\r\n        // assert(a == b * c \u002B a % b); // There is no case in which this doesn\u0027t hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint a, uint b) internal pure returns (uint) {\r\n        require(b \u003C= a, \u0022SafeMath: subtraction overflow\u0022);\r\n        uint c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two unsigned integers, reverts on overflow.\r\n     */\r\n    function add(uint a, uint b) internal pure returns (uint) {\r\n        uint c = a \u002B b;\r\n        require(c \u003E= a, \u0022SafeMath: addition overflow\u0022);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n     * reverts when dividing by zero.\r\n     */\r\n    function mod(uint a, uint b) internal pure returns (uint) {\r\n        require(b != 0, \u0022SafeMath: modulo by zero\u0022);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address =\u003E uint256) balances;\r\n\r\n  /**\r\n  * @dev transfer token for a specified address\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0), \u0022Address to can\u0027t be zero address\u0022);\r\n    require(_value \u003C= balances[msg.sender], \u0022Balance less than transfer value\u0022);\r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n/* \u5408\u7EA6\u6682\u505C\u529F\u80FD */\r\ncontract Pausable is Ownable {\r\n  event PausePublic(bool newState);\r\n  event PauseOwnerAdmin(bool newState);\r\n\r\n  bool public pausedPublic = false;\r\n  bool public pausedOwnerAdmin = false;\r\n\r\n  address public admin;\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable based on pause states.\r\n   */\r\n  modifier whenNotPaused() {\r\n    if(pausedPublic) {\r\n      if(!pausedOwnerAdmin) {\r\n        require(msg.sender == admin || msg.sender == owner, \u0022Only admin or owner can call with pausedPublic\u0022);\r\n      } else {\r\n        revert(\u0022all paused\u0022);\r\n      }\r\n    }\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to set new pause flags\r\n   * pausedPublic can\u0027t be false while pausedOwnerAdmin is true\r\n   * \u5F53\u7BA1\u7406\u5458\u88AB\u6682\u505C \u666E\u901A\u7528\u6237\u4E00\u5B9A\u662F\u88AB\u6682\u505C\u7684\r\n   */\r\n  function pause(bool newPausedPublic, bool newPausedOwnerAdmin) public onlyOwner {\r\n    require(!(newPausedPublic == false \u0026\u0026 newPausedOwnerAdmin == true), \u0022PausedPublic can\u0027t be false while pausedOwnerAdmin is true\u0022);\r\n\r\n    pausedPublic = newPausedPublic;\r\n    pausedOwnerAdmin = newPausedOwnerAdmin;\r\n\r\n    emit PausePublic(newPausedPublic);\r\n    emit PauseOwnerAdmin(newPausedOwnerAdmin);\r\n  }\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address =\u003E mapping (address =\u003E uint256)) internal allowed;\r\n\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0), \u0022Address to can\u0027t be zero address\u0022);\r\n    require(_value \u003C= balances[_from], \u0022Balance less than transfer value\u0022);\r\n    require(_value \u003C= allowed[_from][msg.sender], \u0022Allowed balance less than transfer value\u0022);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender\u0027s allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue \u003E oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\ncontract PausableToken is StandardToken, Pausable {\r\n\r\n  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\r\n    return super.transfer(_to, _value);\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\r\n    return super.transferFrom(_from, _to, _value);\r\n  }\r\n\r\n  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\r\n    return super.approve(_spender, _value);\r\n  }\r\n\r\n  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\r\n    return super.increaseApproval(_spender, _addedValue);\r\n  }\r\n\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\r\n    return super.decreaseApproval(_spender, _subtractedValue);\r\n  }\r\n}\r\n\r\ncontract PollToken is PausableToken {\r\n    uint8  private constant _decimals = 8;\r\n    uint constant fourYears = 4 * 365 days;\r\n\r\n    struct Poll {\r\n        // \u521D\u59CB\u6BCF\u5206\u949F\u4EA7\u91CF\r\n        uint amountPerMinute;\r\n        // \u4E0A\u4E00\u6B21\u9886\u53D6\u65F6\u95F4\r\n        uint lastMineTime;\r\n        // \u5F53\u524D\u8870\u51CF\u9636\u6BB5 \u521D\u59CB\u4E3A 0\r\n        uint currentDecayPeriod;\r\n        // \u5DF2\u6316\u51FA\u603B\u91CF\r\n        uint totalMine;\r\n        // \u77FF\u6C60\u8D26\u6237\r\n        address account;\r\n        // \u5F00\u59CB\u91CA\u653E\u65F6\u95F4\r\n        uint startTime;\r\n        // \u5DF2\u7ECF\u6316\u51FA\u5269\u4F59\u53EF\u63D0\u91CF\r\n        uint leftMine;\r\n    }\r\n\r\n    Poll private businessPoll = Poll({\r\n        amountPerMinute: 23852740 * (10 ** uint(_decimals)) / (24 * 60),\r\n        lastMineTime: 0,\r\n        currentDecayPeriod: 0,\r\n        totalMine: 0,\r\n        account: address(0),\r\n        startTime: 0,\r\n        leftMine: 0\r\n    });\r\n\r\n    Poll private communityPoll = Poll({\r\n        amountPerMinute: 6815068 * (10 ** uint(_decimals)) / (24 * 60),\r\n        lastMineTime: 0,\r\n        currentDecayPeriod: 0,\r\n        totalMine: 0,\r\n        account: address(0),\r\n        startTime: 0,\r\n        leftMine: 0\r\n    });\r\n\r\n    Poll private techPoll = Poll({\r\n        amountPerMinute: 3407534 * (10 ** uint(_decimals)) / (24 * 60),\r\n        lastMineTime: 0,\r\n        currentDecayPeriod: 0,\r\n        totalMine: 0,\r\n        account: address(0),\r\n        startTime: 0,\r\n        leftMine: 0\r\n    });\r\n\r\n    /* \u8BBE\u7F6E\u77FF\u6C60\u8D26\u6237\u63A5\u53E3 */\r\n    function _setPollAccount(address account, Poll storage poll) private {\r\n        require(account != address(0), \u0022Poll account can\u0027t be zero address\u0022);\r\n        poll.account = account;\r\n    }\r\n    function setBusinessAccount(address account) public onlyOwner {\r\n        _setPollAccount(account, businessPoll);\r\n    }\r\n    function setCommunityAccount(address account) public onlyOwner {\r\n        _setPollAccount(account, communityPoll);\r\n    }\r\n    function setTechAccount(address account) public onlyOwner {\r\n        _setPollAccount(account, techPoll);\r\n    }\r\n    function setAllAccount(address businessAcc, address communityAcc, address techAcc) public onlyOwner {\r\n        _setPollAccount(businessAcc, businessPoll);\r\n        _setPollAccount(communityAcc, communityPoll);\r\n        _setPollAccount(techAcc, techPoll);\r\n    }\r\n\r\n    /* \u6FC0\u6D3B\u77FF\u6C60\u63A5\u53E3 */\r\n    function _activePoll(Poll storage poll) private {\r\n        require(poll.startTime == 0, \u0022Poll has actived\u0022);\r\n        poll.startTime = now;\r\n    }\r\n    function activeBusinessPoll() public onlyOwner {\r\n        _activePoll(businessPoll);\r\n    }\r\n    function activeCommunityPoll() public onlyOwner {\r\n        _activePoll(communityPoll);\r\n    }\r\n    function activeTechPoll() public onlyOwner {\r\n        _activePoll(techPoll);\r\n    }\r\n\r\n    /* \u83B7\u53D6\u53EF\u63D0\u989D\u5EA6\u63A5\u53E3 */\r\n    function _getAvailablePoll(Poll memory poll) private view returns (uint, uint, uint) {\r\n        if (poll.startTime == 0) {\r\n            return (0, 0, 0);\r\n        }\r\n        uint duration = 0;\r\n        uint amount = 0;\r\n        uint curTime = now;\r\n        // \u5F53\u524D\u5904\u4E8E\u7B2C\u51E0\u4E2A\u8870\u51CF\u9636\u6BB5\r\n        uint currentDecayPeriod = (curTime - poll.startTime) / fourYears;\r\n        // \u4E0A\u4E00\u6B21\u5904\u4E8E\u7B2C\u51E0\u4E2A\u8870\u51CF\u9636\u6BB5\r\n        uint lastDecayPeriod = 0;\r\n        if (poll.lastMineTime \u003E 0) {\r\n            duration = curTime - poll.lastMineTime;\r\n            lastDecayPeriod = (poll.lastMineTime - poll.startTime) / fourYears;\r\n        } else {\r\n            duration = curTime - poll.startTime;\r\n        }\r\n\r\n        if (currentDecayPeriod == lastDecayPeriod) {\r\n            // \u6CA1\u6709\u8DE8\u9636\u6BB5\r\n            amount = poll.amountPerMinute * duration / (60 * 2 ** currentDecayPeriod);\r\n        }\r\n        else {\r\n            /**\r\n            * \u8DE8\u9636\u6BB5 \u5148\u8BA1\u7B97\u4E24\u5934\u7684\u91CF\r\n            * \u518D\u8BA1\u7B97\u4E2D\u95F4\u6574\u9636\u6BB5\u7684\u91CF\r\n            * \u8003\u8651\u4E86\u5305\u62EC\u5728\u7AEF\u70B9\u7684\u6781\u7AEF\u60C5\u51B5\r\n            * |____|____|____|____|\r\n            *   ^    ^    ^    ^\r\n            *   0    1    2   3\r\n            */\r\n            uint right_duration = (curTime - poll.startTime) % fourYears;\r\n\r\n            if (poll.lastMineTime \u003E 0 \u0026\u0026 ((poll.lastMineTime - poll.startTime) % fourYears == 0)) {\r\n                uint left_duration = fourYears - (poll.lastMineTime - poll.startTime) % fourYears;\r\n                amount = amount \u002B poll.amountPerMinute * left_duration / (60 * 2 ** lastDecayPeriod);\r\n            }\r\n            amount = amount \u002B poll.amountPerMinute * right_duration / (60 * 2 ** currentDecayPeriod);\r\n\r\n            // \u9996\u6B21\u8DE8\u9636\u6BB5\u63D0\u5E01\r\n            if (poll.lastMineTime == 0) {\r\n                for (uint i = lastDecayPeriod; i \u003C currentDecayPeriod; i\u002B\u002B) {\r\n                    amount = amount \u002B poll.amountPerMinute * fourYears / (60 * 2 ** i);\r\n                }\r\n            }\r\n            // \u4E0A\u4E00\u6B21\u63D0\u5E01\u5728\u7AEF\u70B9\u7684\u60C5\u51B5\r\n            else if (poll.lastMineTime \u003E 0 \u0026\u0026 ((poll.lastMineTime - poll.startTime) % fourYears == 0)) {\r\n                for (uint i = lastDecayPeriod; i \u003C currentDecayPeriod; i\u002B\u002B) {\r\n                    amount = amount \u002B poll.amountPerMinute * fourYears / (60 * 2 ** i);\r\n                }\r\n            }\r\n            else {\r\n                for (uint i = lastDecayPeriod \u002B 1; i \u003C currentDecayPeriod; i\u002B\u002B) {\r\n                    amount = amount \u002B poll.amountPerMinute * fourYears / (60 * 2 ** i);\r\n                }\r\n            }\r\n        }\r\n        uint availableAmount = amount \u002B poll.leftMine;\r\n        uint totalMine = amount \u002B poll.totalMine;\r\n        return (currentDecayPeriod, totalMine, availableAmount);\r\n    }\r\n    function getAvailableBPoll() public view returns (uint, uint, uint) {\r\n        return _getAvailablePoll(businessPoll);\r\n    }\r\n    function getAvailableCpoll() public view returns (uint, uint, uint) {\r\n        return _getAvailablePoll(communityPoll);\r\n    }\r\n    function getAvailableTpoll() public view returns (uint, uint, uint) {\r\n        return _getAvailablePoll(techPoll);\r\n    }\r\n\r\n    /* \u83B7\u53D6\u77FF\u6C60\u4FE1\u606F\u63A5\u53E3 */\r\n    function _getPollInfo(Poll memory poll) private view\r\n    returns (uint,uint, uint, uint, address, uint, uint) {\r\n        uint currentDecayPeriod;\r\n        uint totalMine;\r\n        uint leftMine;\r\n        (currentDecayPeriod, totalMine, leftMine) = _getAvailablePoll(poll);\r\n        return (poll.amountPerMinute, poll.lastMineTime, currentDecayPeriod, totalMine, poll.account, poll.startTime, leftMine);\r\n    }\r\n    function getBPollInfo() public view\r\n    returns (uint,uint, uint, uint, address, uint, uint) {\r\n        return _getPollInfo(businessPoll);\r\n    }\r\n    function getTPollInfo() public view\r\n    returns (uint,uint, uint, uint, address, uint, uint) {\r\n        return _getPollInfo(techPoll);\r\n    }\r\n    function getCPollInfo() public view\r\n    returns (uint,uint, uint, uint, address, uint, uint) {\r\n        return _getPollInfo(communityPoll);\r\n    }\r\n\r\n    /* \u83B7\u53D6\u4EE3\u5E01\u6D41\u901A\u603B\u91CF\u63A5\u53E3 */\r\n    function getLiquidity() public view returns (uint) {\r\n        return 500000000 * 10 ** uint(_decimals) \u002B businessPoll.totalMine \u002B communityPoll.totalMine \u002B techPoll.totalMine;\r\n    }\r\n\r\n\r\n    /* \u63D0\u53D6\u77FF\u4EE3\u5E01\u6C60\u63A5\u53E3 */\r\n    function _minePoll(Poll storage poll, uint value) private {\r\n        require(value \u003E 0, \u0022Take value must more than zero\u0022);\r\n        require(poll.startTime \u003E 0, \u0022Poll not start\u0022);\r\n        require(poll.account != address(0), \u0022businessAccount can\u0027t be zero address\u0022);\r\n\r\n        uint duration = 0;\r\n        uint amount = 0;\r\n        uint curTime = now;\r\n        uint _value = value * 10 ** uint(_decimals);\r\n        // \u5F53\u524D\u5904\u4E8E\u7B2C\u51E0\u4E2A\u8870\u51CF\u9636\u6BB5\r\n        uint currentDecayPeriod = (curTime - poll.startTime) / fourYears;\r\n        // \u4E0A\u4E00\u6B21\u5904\u4E8E\u7B2C\u51E0\u4E2A\u8870\u51CF\u9636\u6BB5\r\n        uint lastDecayPeriod = 0;\r\n        if (poll.lastMineTime \u003E 0) {\r\n            duration = curTime - poll.lastMineTime;\r\n            lastDecayPeriod = (poll.lastMineTime - poll.startTime) / fourYears;\r\n        } else {\r\n            duration = curTime - poll.startTime;\r\n        }\r\n\r\n        if (currentDecayPeriod == lastDecayPeriod) {\r\n            // \u6CA1\u6709\u8DE8\u9636\u6BB5\r\n            amount = poll.amountPerMinute * duration / (60 * 2 ** currentDecayPeriod);\r\n        }\r\n        else {\r\n            uint right_duration = (curTime - poll.startTime) % fourYears;\r\n\r\n            if (poll.lastMineTime \u003E 0 \u0026\u0026 ((poll.lastMineTime - poll.startTime) % fourYears == 0)) {\r\n                uint left_duration = fourYears - (poll.lastMineTime - poll.startTime) % fourYears;\r\n                amount = amount \u002B poll.amountPerMinute * left_duration / (60 * 2 ** lastDecayPeriod);\r\n            }\r\n\r\n            amount = amount \u002B poll.amountPerMinute * right_duration / (60 * 2 ** currentDecayPeriod);\r\n\r\n            // \u9996\u6B21\u8DE8\u9636\u6BB5\u63D0\u5E01\r\n            if (poll.lastMineTime == 0) {\r\n                for (uint i = lastDecayPeriod; i \u003C currentDecayPeriod; i\u002B\u002B) {\r\n                    amount = amount \u002B poll.amountPerMinute * fourYears / (60 * 2 ** i);\r\n                }\r\n            }\r\n            // \u4E0A\u4E00\u6B21\u63D0\u5E01\u5728\u7AEF\u70B9\u7684\u60C5\u51B5\r\n            else if (poll.lastMineTime \u003E 0 \u0026\u0026 ((poll.lastMineTime - poll.startTime) % fourYears == 0)) {\r\n                for (uint i = lastDecayPeriod; i \u003C currentDecayPeriod; i\u002B\u002B) {\r\n                    amount = amount \u002B poll.amountPerMinute * fourYears / (60 * 2 ** i);\r\n                }\r\n            }\r\n            else {\r\n                for (uint i = lastDecayPeriod \u002B 1; i \u003C currentDecayPeriod; i\u002B\u002B) {\r\n                    amount = amount \u002B poll.amountPerMinute * fourYears / (60 * 2 ** i);\r\n                }\r\n            }\r\n        }\r\n        require(_value \u003C= (poll.leftMine \u002B amount), \u0022Take value too large\u0022);\r\n        uint left = poll.leftMine \u002B amount - _value;\r\n        poll.leftMine = left;\r\n        balances[poll.account] = balances[poll.account] \u002B _value;\r\n        poll.totalMine = poll.totalMine \u002B amount;\r\n        poll.lastMineTime = curTime;\r\n        poll.currentDecayPeriod = currentDecayPeriod;\r\n        emit Transfer(address(0x0), poll.account, _value);\r\n    }\r\n    function mineBusinessPoll(uint value) public onlyOwner {\r\n        _minePoll(businessPoll, value);\r\n    }\r\n    function mineCommunityPoll(uint value) public onlyOwner {\r\n        _minePoll(communityPoll, value);\r\n    }\r\n    function mineTechPoll(uint value) public onlyOwner {\r\n        _minePoll(techPoll, value);\r\n    }\r\n}\r\n\r\ncontract SuperPointsToken is PollToken {\r\n    string  public  constant name = \u0022SuperPoints Token\u0022;\r\n    string  public  constant symbol = \u0022SPT\u0022;\r\n    uint8   public  constant decimals = 8;\r\n    uint    public  constant initLiquidity = 500000000 * 10 ** uint(decimals);\r\n    bool    private  changed;\r\n\r\n    modifier validDestination( address to )\r\n    {\r\n        require(to != address(0x0), \u0022Address to can\u0027t be zero address\u0022);\r\n        require(to != address(this), \u0022Address to can\u0027t be contract address\u0022);\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n        // assign the admin account\r\n        admin = msg.sender;\r\n        changed = false;\r\n\r\n        totalSupply = 100000000000 * 10**uint256(decimals);\r\n        balances[msg.sender] = initLiquidity;\r\n        emit Transfer(address(0x0), msg.sender, initLiquidity);\r\n    }\r\n\r\n    function transfer(address _to, uint _value) public validDestination(_to) returns (bool) {\r\n        return super.transfer(_to, _value);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint _value) public validDestination(_to) returns (bool) {\r\n        return super.transferFrom(_from, _to, _value);\r\n    }\r\n\r\n    event Burn(address indexed _burner, uint _value);\r\n\r\n    /* \u9500\u6BC1\u4EE3\u5E01 */\r\n    function burn(uint _value) public returns (bool) {\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        totalSupply = totalSupply.sub(_value);\r\n        emit Burn(msg.sender, _value);\r\n        emit Transfer(msg.sender, address(0x0), _value);\r\n        return true;\r\n    }\r\n\r\n    // save some gas by making only one contract call\r\n    function burnFrom(address _from, uint256 _value) public returns (bool) {\r\n        assert(transferFrom(_from, msg.sender, _value));\r\n        return burn(_value);\r\n    }\r\n\r\n    function emergencyERC20Drain( ERC20 token, uint amount ) public onlyOwner {\r\n        // owner can drain tokens that are sent here by mistake\r\n        token.transfer(owner, amount);\r\n    }\r\n\r\n    event AdminTransferred(address indexed previousAdmin, address indexed newAdmin);\r\n\r\n    function changeAdmin(address newAdmin) public onlyOwner {\r\n        // owner can re-assign the admin\r\n        emit AdminTransferred(admin, newAdmin);\r\n        admin = newAdmin;\r\n    }\r\n\r\n    function changeAll(address newOwner) public onlyOwner{\r\n        if (!changed){\r\n            // transfer(newOwner,totalSupply);\r\n            // transfer(newOwner, balanceOf(msg.sender))\r\n            changeAdmin(newOwner);\r\n            transferOwnership(newOwner);\r\n            changed = true;\r\n        }\r\n    }\r\n}","ABI":"[{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022name\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022getLiquidity\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_spender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022approve\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022changeAll\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022activeCommunityPoll\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022getBPollInfo\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022totalSupply\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_from\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022transferFrom\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022pausedPublic\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022decimals\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint8\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022getTPollInfo\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022mineBusinessPoll\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022burn\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022setBusinessAccount\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022pausedOwnerAdmin\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_spender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_subtractedValue\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022decreaseApproval\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022success\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_owner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022balanceOf\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022balance\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022businessAcc\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022communityAcc\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022techAcc\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022setAllAccount\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022mineCommunityPoll\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_from\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022burnFrom\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022getCPollInfo\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022activeBusinessPoll\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022mineTechPoll\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022owner\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022newAdmin\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022changeAdmin\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022symbol\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022transfer\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022initLiquidity\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022setCommunityAccount\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022setTechAccount\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_spender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_addedValue\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022increaseApproval\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022success\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022token\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022emergencyERC20Drain\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_owner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_spender\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022allowance\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022newPausedPublic\u0022,\u0022type\u0022:\u0022bool\u0022},{\u0022name\u0022:\u0022newPausedOwnerAdmin\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022name\u0022:\u0022pause\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022activeTechPoll\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022getAvailableCpoll\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022getAvailableBPoll\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022transferOwnership\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022getAvailableTpoll\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022admin\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022constructor\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022_burner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022_value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022Burn\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022previousAdmin\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022newAdmin\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022AdminTransferred\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022newState\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022name\u0022:\u0022PausePublic\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022newState\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022name\u0022:\u0022PauseOwnerAdmin\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022previousOwner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022OwnershipTransferred\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022owner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022spender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022Approval\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022from\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022Transfer\u0022,\u0022type\u0022:\u0022event\u0022}]","ContractName":"SuperPointsToken","CompilerVersion":"v0.5.10\u002Bcommit.5a6ea5b1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://303f21cc1f964346fd841afa1bc1ad1145dd1e6b8df08f3df407b0ff389558c6"}]