[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by \u0060account\u0060.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves \u0060amount\u0060 tokens from the caller\u0027s account to \u0060recipient\u0060.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that \u0060spender\u0060 will be\r\n     * allowed to spend on behalf of \u0060owner\u0060 through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets \u0060amount\u0060 as the allowance of \u0060spender\u0060 over the caller\u0027s tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves \u0060amount\u0060 tokens from \u0060sender\u0060 to \u0060recipient\u0060 using the\r\n     * allowance mechanism. \u0060amount\u0060 is then deducted from the caller\u0027s\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when \u0060value\u0060 tokens are moved from one account (\u0060from\u0060) to\r\n     * another (\u0060to\u0060).\r\n     *\r\n     * Note that \u0060value\u0060 may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a \u0060spender\u0060 for an \u0060owner\u0060 is set by\r\n     * a call to {approve}. \u0060value\u0060 is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @dev APIX \uD1A0\uD070\uC744 1\uB144 \uB3D9\uC548 \uC7A0\uADF8\uB294 \uAE30\uB2A5\uC744 \uC218\uD589\uD55C\uB2E4.\r\n * \uB9E4 \uBD84\uAE30\uB9C8\uB2E4(1\uB144\uC5D0 4\uBC88 - 3, 6, 9, 12\uAC1C\uC6D4 \uCC28) \uC7A0\uAE34 \uD1A0\uD070\uC758 1/4 \uB9CC\uD07C \uC529 \uC7A0\uAE08 \uD574\uC81C\uD55C\uB2E4.\r\n * \r\n * \uCEE8\uD2B8\uB809\uD2B8 \uC0AC\uC6A9 \uC808\uCC28 : \r\n * 1. \uCEE8\uD2B8\uB809\uD2B8\uB97C \uC0DD\uC131\uD55C\uB2E4.\r\n * 2. \uC0DD\uC131\uB41C \uCEE8\uD2B8\uB809\uD2B8 \uC8FC\uC18C\uC5D0 APIX \uD1A0\uD070\uC744 \uC804\uC1A1\uD55C\uB2E4.\r\n * 3. initLockedBalance() \uBA54\uC11C\uB4DC\uB97C \uD638\uCD9C\uD55C\uB2E4.\r\n * 4. getNextRound() \uBC0F getNextRoundTime() \uAC12\uC744 \uD655\uC778\uD558\uC5EC \uB2E4\uC74C \uC7A0\uAE08\uD574\uC81C \uC815\uBCF4\uB97C \uD655\uC778\uD55C\uB2E4.\r\n * 5. \uD574\uC81C \uAC00\uB2A5 \uC2DC\uC810\uC5D0 \uB3C4\uB2EC\uD558\uBA74 unlock() \uBA54\uC11C\uB4DC\uB97C \uC2E4\uD589\uD55C\uB2E4.\r\n */\r\ncontract Locker {\r\n    IERC20  APIX;\r\n    address receiver;\r\n    uint16 unlockStartYear;\r\n    uint256 unlockStartTime;\r\n    uint256 unlockOffsetTime = 7884000; /* (365*24*60*60)/4 */\r\n    uint256 totalLockedBalance = 0;\r\n    uint256 unlockBalancePerRound = 0;\r\n    uint8 lastRound = 0;\r\n    \r\n    /**\r\n     * @dev Emitted when the locked \u0027value\u0027 tokens is set\r\n     *\r\n     * Note that \u0060value\u0060 may be zero.\r\n     */\r\n    event Lock(uint256 value);\r\n    \r\n    /**\r\n     * @dev Emitted when the unlocked and moved \u0027value\u0027 tokens to (\u0060receiver\u0060)\r\n     *\r\n     * Note that \u0060value\u0060 may be zero.\r\n     */\r\n    event Unlock(uint256 value, address receiver);\r\n    \r\n    /**\r\n     * @dev \uCEE8\uD2B8\uB809\uD2B8\uB97C \uC0DD\uC131\uD55C\uB2E4.\r\n     * \r\n     * @param _APIX \uD1A0\uD070 \uCEE8\uD2B8\uB809\uD2B8 \uC8FC\uC18C\r\n     * @param _receiver \uC7A0\uAE08 \uD574\uC81C\uB41C \uD1A0\uD070\uC744 \uC218\uB839\uD560 \uC8FC\uC18C\r\n     * @param _unlockStartTime \uC7A0\uAE08 \uD574\uC81C\uAC00 \uC2DC\uC791\uB418\uB294 \uB144\uB3C4\uC758 1\uC6D4 1\uC77C 0\uC2DC 0\uBD84 0\uCD08 \uC2DC\uAC04(Unix Timestamp)\r\n     */\r\n    constructor (address _APIX, address _receiver, uint256 _unlockStartTime, uint16 _unlockStartYear) public {\r\n        APIX = IERC20(_APIX);\r\n        receiver = _receiver;\r\n        unlockStartTime = _unlockStartTime;\r\n        unlockStartYear = _unlockStartYear;\r\n    }\r\n    \r\n    /**\r\n     * @dev \uC7A0\uAE08 \uCEE8\uD2B8\uB809\uD2B8\uC758 \uC794\uACE0\uB97C \uD655\uC778\uD55C\uB2E4.\r\n     */\r\n    function getLockedBalance() external view returns (uint256) {\r\n        return APIX.balanceOf(address(this));\r\n    }\r\n    \r\n    /**\r\n     * @dev \uCEE8\uD2B8\uB809\uD2B8\uC5D0 \uC7A0\uACA8\uC9C4 \uD1A0\uD070\uC758 \uC218\uB7C9\uC744 \uD655\uC778\uD55C\uB2E4.\r\n     */\r\n    function getTotalLockedBalance() external view returns (uint256) {\r\n        return totalLockedBalance;\r\n    }\r\n    \r\n    /**\r\n     * @dev \uB2E4\uC74C \uC7A0\uAE08\uC774 \uD574\uC81C\uB418\uB294 \uD68C\uCC28\uB97C \uD655\uC778\uD55C\uB2E4.\r\n     */\r\n    function getNextRound() external view returns (uint8) {\r\n        return lastRound \u002B 1;\r\n    }\r\n    \r\n    /**\r\n     * @dev \uB2E4\uC74C \uC7A0\uAE08\uC774 \uD574\uC81C\uB418\uB294 \uC2DC\uAC04\uC744 \uD655\uC778\uD55C\uB2E4.\r\n     */\r\n    function _getNextRoundTime() internal view returns (uint256) {\r\n        return unlockStartTime \u002B unlockOffsetTime * (lastRound \u002B 1);\r\n    }\r\n    function getNextRoundTime() external view returns (uint256) {\r\n        return _getNextRoundTime();\r\n    }\r\n    \r\n    /**\r\n     * @dev \uB2E4\uC74C \uB77C\uC6B4\uB4DC\uC5D0\uC11C \uD574\uC81C\uB418\uB294 \uC218\uB7C9\uC744 \uC870\uD68C\uD55C\uB2E4\r\n     */\r\n    function _getNextUnlockToken() internal view returns (uint256) {\r\n        uint8 round = lastRound \u002B 1;\r\n        uint256 unlockAmount;\r\n        \r\n        if(round \u003C 4) {\r\n            unlockAmount = unlockBalancePerRound;\r\n        }\r\n        else {\r\n            unlockAmount = APIX.balanceOf(address(this));\r\n        }\r\n        \r\n        return unlockAmount;\r\n    }\r\n    function getNextUnlockToken() external view returns (uint256) {\r\n        return _getNextUnlockToken();\r\n    }\r\n    \r\n    /**\r\n     * @dev \uD604\uC7AC \uCEE8\uD2B8\uB809\uD2B8\uC5D0 \uB300\uD55C \uC815\uBCF4\uB97C \uBC18\uD658\uD55C\uB2E4.\r\n     * @return  initLockedToken \uCEE8\uD2B8\uB809\uD2B8\uC5D0 \uC7A0\uACA8\uC9C4 \uC218\uB7C9\r\n     *          balance \uD604\uC7AC \uCEE8\uD2B8\uB809\uD2B8\uAC00 \uBCF4\uAD00\uD558\uACE0 \uC788\uB294 \uD1A0\uD070\uC758 \uC218\uB7C9\r\n     *          nextRound \uB2E4\uC74C \uD68C\uCC28 \uBC88\uD638\r\n     *          nextRoundUnlockAt \uB2E4\uC74C \uD68C\uCC28 \uC2DC\uC791 \uC2DC\uAC04 (Unix timestamp)\r\n     *          nextRoundUnlockToken \uB2E4\uC74C \uD68C\uCC28\uC5D0 \uD480\uB9AC\uB294 \uD1A0\uD070\uC758 \uC218\uB7C9\r\n     */\r\n    function getLockInfo() external view returns (uint256 initLockedToken, uint256 balance, uint16 unlockYear, uint8 nextRound, uint256 nextRoundUnlockAt, uint256 nextRoundUnlockToken) {\r\n        initLockedToken = totalLockedBalance;\r\n        balance = APIX.balanceOf(address(this));\r\n        nextRound = lastRound \u002B 1;\r\n        nextRoundUnlockAt = _getNextRoundTime();\r\n        nextRoundUnlockToken = _getNextUnlockToken();\r\n        unlockYear = unlockStartYear;\r\n    }\r\n    \r\n    \r\n    /**\r\n     * \uB77D\uCEE8\uD2B8\uB809\uD2B8\uC5D0\uC11C \uBCF4\uAD00\uD558\uACE0 \uC788\uB294 \uC7A0\uAE34 \uC218\uB7C9\uC744 \uC124\uC815\uD55C\uB2E4.\r\n     * \uC774 \uD568\uC218\uB97C \uC2E4\uD589\uD558\uAE30 \uC804\uC5D0 \uD1A0\uD070\uC744 \uBA3C\uC800 \uBCF4\uB0B4\uC57C \uD55C\uB2E4.\r\n     * \r\n     * !! \uC7A0\uAE34 \uC218\uB7C9\uC740 \uD55C \uBC88 \uC124\uC815\uB418\uBA74 \uB2E4\uC2DC \uBCC0\uACBD\uD560 \uC218 \uC5C6\uB2E4 !!\r\n     */\r\n    function initLockedBalance() public returns (uint256) {\r\n        require(totalLockedBalance == 0, \u0022Locker: There is no token stored\u0022);\r\n        \r\n        totalLockedBalance = APIX.balanceOf(address(this));\r\n        unlockBalancePerRound = totalLockedBalance / 4;\r\n        \r\n        emit Lock (totalLockedBalance);\r\n        \r\n        return totalLockedBalance;\r\n    }\r\n    \r\n    \r\n    function unlock(uint8 round) public returns (bool) {\r\n        // \uC7A0\uAE34 \uD1A0\uD070\uC774 \uC874\uC7AC\uD574\uC57C \uD55C\uB2E4.\r\n        require(totalLockedBalance \u003E 0, \u0022Locker: There is no locked token\u0022);\r\n        \r\n        \r\n        // \uC9C1\uC804\uC5D0 \uCD9C\uAE08\uB41C \uB77C\uC6B4\uB4DC\uBCF4\uB2E4 \uD55C \uBC88 \uC99D\uAC00\uB41C \uB77C\uC6B4\uB4DC\uC5EC\uC57C \uD55C\uB2E4.\r\n        require(round == lastRound \u002B 1, \u0022Locker: The round value is incorrect\u0022);\r\n        \r\n        \r\n        // \uC774 \uC8FC\uC11D\uC744 \uD574\uC81C\uD558\uBA74 4\uB77C\uC6B4\uB4DC\uAE4C\uC9C0\uB9CC \uC2E4\uD589\uD560 \uC218 \uC788\uB2E4.\r\n        // \uADF8\uB300\uB85C \uB450\uBA74, 4\uD68C\uCC28 \uC774\uC0C1\uC5D0\uC11C\uB294 \uC624\uC785\uAE08 \uB41C \uD1A0\uD070\uC774 \uC788\uB354\uB77C\uB3C4 \uAEBC\uB0BC \uC218 \uC788\uB2E4\r\n        // require(round \u003C= 4, \u0022Locker: The round value has exceeded the executable range\u0022);\r\n        \r\n        \r\n        // \uD574\uB2F9 \uB77C\uC6B4\uB4DC\uC758 \uC2DC\uAC04\uC774 \uC544\uC9C1 \uB418\uC9C0 \uC54A\uC558\uC744 \uACBD\uC6B0 \uC2E4\uD589\uD558\uC9C0 \uBABB\uD558\uB3C4\uB85D \uD55C\uB2E4.\r\n        require(block.timestamp \u003E= _getNextRoundTime(), \u0022Locker: It\u0027s not time to unlock yet\u0022);\r\n        \r\n        \r\n        // \uCD9C\uAE08 \uC2E4\uD589\r\n        uint256 amount = _getNextUnlockToken();\r\n        require(amount \u003E 0, \u0027Locker: There is no unlockable token\u0027);\r\n        require(APIX.transfer(receiver, amount));\r\n        \r\n        emit Unlock(amount, receiver);\r\n        \r\n        // \uC2E4\uD589\uB41C \uD68C\uCC28\uB97C \uAE30\uB85D\uD55C\uB2E4.\r\n        lastRound = round;\r\n        return true;\r\n    }\r\n}","ABI":"[{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022round\u0022,\u0022type\u0022:\u0022uint8\u0022}],\u0022name\u0022:\u0022unlock\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022getLockedBalance\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022initLockedBalance\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022getNextRound\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint8\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022getNextRoundTime\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022getLockInfo\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022initLockedToken\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022balance\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022unlockYear\u0022,\u0022type\u0022:\u0022uint16\u0022},{\u0022name\u0022:\u0022nextRound\u0022,\u0022type\u0022:\u0022uint8\u0022},{\u0022name\u0022:\u0022nextRoundUnlockAt\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022nextRoundUnlockToken\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022getNextUnlockToken\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022getTotalLockedBalance\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[{\u0022name\u0022:\u0022_APIX\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_receiver\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_unlockStartTime\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_unlockStartYear\u0022,\u0022type\u0022:\u0022uint16\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022constructor\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022Lock\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022receiver\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022Unlock\u0022,\u0022type\u0022:\u0022event\u0022}]","ContractName":"Locker","CompilerVersion":"v0.5.0\u002Bcommit.1d4f565a","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000f51ebf9a26dbc02b13f8b3a9110dac47a4d62d7800000000000000000000000057952ba9e8d09b53d49b323cd549f6e9925f6901000000000000000000000000000000000000000000000000000000005c2aad8000000000000000000000000000000000000000000000000000000000000007e3","Library":"","SwarmSource":"bzzr://87ed36e0dc57f21b7b52c53a20cb584a09de3be475f60149e85cbce2ab867cca"}]