[{"SourceCode":"pragma solidity ^0.6.0;\r\n\r\n/**\r\n * @title InstaConnectors\r\n * @dev Registry for Connectors.\r\n */\r\n\r\n\r\ninterface IndexInterface {\r\n    function master() external view returns (address);\r\n}\r\n\r\n\r\ncontract DSMath {\r\n\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x \u002B y) \u003E= x, \u0022ds-math-add-overflow\u0022);\r\n    }\r\n\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) \u003C= x, \u0022ds-math-sub-underflow\u0022);\r\n    }\r\n\r\n}\r\n\r\ncontract Controllers is DSMath {\r\n\r\n    event LogAddController(address addr);\r\n    event LogRemoveController(address addr);\r\n\r\n     // The InstaIndex Address.\r\n    address public constant instaIndex = 0x1c503F1544500C05da80cd326D97342f2B13a732;\r\n\r\n    // Enabled Cheif(Address of Cheif =\u003E bool).\r\n    mapping(address =\u003E bool) public chief;\r\n    // Enabled Connectors(Connector Address =\u003E bool).\r\n    mapping(address =\u003E bool) public connectors;\r\n    // Enbled Static Connectors(Connector Address =\u003E bool).\r\n    mapping(address =\u003E bool) public staticConnectors;\r\n\r\n    /**\r\n    * @dev Throws if the sender not is Master Address from InstaIndex\r\n    * or Enabled Cheif.\r\n    */\r\n    modifier isChief {\r\n        require(chief[msg.sender] || msg.sender == IndexInterface(instaIndex).master(), \u0022not-an-chief\u0022);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Enable a Cheif.\r\n     * @param _userAddress Cheif Address.\r\n    */\r\n    function enableChief(address _userAddress) external isChief {\r\n        chief[_userAddress] = true;\r\n        emit LogAddController(_userAddress);\r\n    }\r\n\r\n    /**\r\n     * @dev Disables a Cheif.\r\n     * @param _userAddress Cheif Address.\r\n    */\r\n    function disableChief(address _userAddress) external isChief {\r\n        delete chief[_userAddress];\r\n        emit LogRemoveController(_userAddress);\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract LinkedList is Controllers {\r\n\r\n    event LogEnable(address indexed connector);\r\n    event LogDisable(address indexed connector);\r\n    event LogEnableStatic(address indexed connector);\r\n\r\n    // Connectors Count.\r\n    uint public count;\r\n    // First enabled Connector Address.\r\n    address public first;\r\n    // Last enabled Connector Address.\r\n    address public last;\r\n    // Connectors List(Address of Connector =\u003E List(Previous and Next Enabled Connector)).\r\n    mapping (address =\u003E List) public list;\r\n\r\n    struct List {\r\n        address prev;\r\n        address next;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Add Connector to Connector\u0027s Linked List.\r\n     * @param _connector Connector Address.\r\n    */\r\n    function addToList(address _connector) internal {\r\n        if (last != address(0)) {\r\n            list[_connector].prev = last;\r\n            list[last].next = _connector;\r\n        }\r\n        if (first == address(0)) {\r\n            first = _connector;\r\n        }\r\n        last = _connector;\r\n        count = add(count, 1);\r\n\r\n        emit LogEnable(_connector);\r\n    }\r\n\r\n    /**\r\n     * @dev Remove Connector to Connector\u0027s Linked List.\r\n     * @param _connector Connector Address.\r\n    */\r\n    function removeFromList(address _connector) internal {\r\n        if (list[_connector].prev != address(0)) {\r\n            list[list[_connector].prev].next = list[_connector].next;\r\n        } else {\r\n            first = list[_connector].next;\r\n        }\r\n        if (list[_connector].next != address(0)) {\r\n            list[list[_connector].next].prev = list[_connector].prev;\r\n        } else {\r\n            last = list[_connector].prev;\r\n        }\r\n        count = sub(count, 1);\r\n        delete list[_connector];\r\n\r\n        emit LogDisable(_connector);\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract InstaConnectors is LinkedList {\r\n    // Static Connectors Count.\r\n    uint public staticCount;\r\n    // Static Connectors (ID =\u003E Static Connector).\r\n    mapping (uint =\u003E address) public staticList;\r\n\r\n    /**\r\n     * @dev Enable Connector.\r\n     * @param _connector Connector Address.\r\n    */\r\n    function enable(address _connector) external isChief {\r\n        require(!connectors[_connector], \u0022already-enabled\u0022);\r\n        connectors[_connector] = true;\r\n        addToList(_connector);\r\n    }\r\n    /**\r\n     * @dev Disable Connector.\r\n     * @param _connector Connector Address.\r\n    */\r\n    function disable(address _connector) external isChief {\r\n        require(connectors[_connector], \u0022not-connector\u0022);\r\n        delete connectors[_connector];\r\n        removeFromList(_connector);\r\n    }\r\n\r\n    /**\r\n     * @dev Enable Static Connector.\r\n     * @param _connector Static Connector Address.\r\n    */\r\n    function enableStatic(address _connector) external isChief {\r\n        require(!staticConnectors[_connector], \u0022already-enabled\u0022);\r\n        staticCount\u002B\u002B;\r\n        staticList[staticCount] = _connector;\r\n        staticConnectors[_connector] = true;\r\n        emit LogEnableStatic(_connector);\r\n    }\r\n\r\n     /**\r\n     * @dev Check if Connector addresses are enabled.\r\n     * @param _connectors Array of Connector Addresses.\r\n    */\r\n    function isConnector(address[] calldata _connectors) external view returns (bool isOk) {\r\n        isOk = true;\r\n        for (uint i = 0; i \u003C _connectors.length; i\u002B\u002B) {\r\n            if (!connectors[_connectors[i]]) {\r\n                isOk = false;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Check if Connector addresses are static enabled.\r\n     * @param _connectors Array of Connector Addresses.\r\n    */\r\n    function isStaticConnector(address[] calldata _connectors) external view returns (bool isOk) {\r\n        isOk = true;\r\n        for (uint i = 0; i \u003C _connectors.length; i\u002B\u002B) {\r\n            if (!staticConnectors[_connectors[i]]) {\r\n                isOk = false;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n}","ABI":"[{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022addr\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022LogAddController\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022connector\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022LogDisable\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022connector\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022LogEnable\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022connector\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022LogEnableStatic\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022addr\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022LogRemoveController\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022chief\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022connectors\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[],\u0022name\u0022:\u0022count\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_connector\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022disable\u0022,\u0022outputs\u0022:[],\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_userAddress\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022disableChief\u0022,\u0022outputs\u0022:[],\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_connector\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022enable\u0022,\u0022outputs\u0022:[],\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_userAddress\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022enableChief\u0022,\u0022outputs\u0022:[],\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_connector\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022enableStatic\u0022,\u0022outputs\u0022:[],\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[],\u0022name\u0022:\u0022first\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[],\u0022name\u0022:\u0022instaIndex\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address[]\u0022,\u0022name\u0022:\u0022_connectors\u0022,\u0022type\u0022:\u0022address[]\u0022}],\u0022name\u0022:\u0022isConnector\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022isOk\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address[]\u0022,\u0022name\u0022:\u0022_connectors\u0022,\u0022type\u0022:\u0022address[]\u0022}],\u0022name\u0022:\u0022isStaticConnector\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022isOk\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[],\u0022name\u0022:\u0022last\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022list\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022prev\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022next\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022staticConnectors\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[],\u0022name\u0022:\u0022staticCount\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022staticList\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022}]","ContractName":"InstaConnectors","CompilerVersion":"v0.6.1\u002Bcommit.e6f7d5a4","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"ipfs://9d51432ede6495fb45c5185151f36b634bc86bf52d54c6c57633fad54a3a910d"}]