[{"SourceCode":"pragma solidity \u003E=0.4.21 \u003C0.6.0;\r\n\r\nlibrary AddressArray{\r\n  function exists(address[] storage self, address addr) public view returns(bool){\r\n    for (uint i = 0; i\u003C self.length;i\u002B\u002B){\r\n      if (self[i]==addr){\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  function index_of(address[] storage self, address addr) public view returns(uint){\r\n    for (uint i = 0; i\u003C self.length;i\u002B\u002B){\r\n      if (self[i]==addr){\r\n        return i;\r\n      }\r\n    }\r\n    require(false, \u0022AddressArray:index_of, not exist\u0022);\r\n  }\r\n\r\n  function remove(address[] storage self, address addr) public returns(bool){\r\n    uint index = index_of(self, addr);\r\n    self[index] = self[self.length - 1];\r\n\r\n    delete self[self.length-1];\r\n    self.length--;\r\n  }\r\n\r\n  function replace(address[] storage self, address old_addr, address new_addr) public returns(bool){\r\n    uint index = index_of(self, old_addr);\r\n    self[index] = new_addr;\r\n  }\r\n}\r\n\r\n\r\npragma solidity \u003E=0.4.21 \u003C0.6.0;\r\n\r\ncontract MultiSigInterface{\r\n  function update_and_check_reach_majority(uint64 id, string memory name, bytes32 hash, address sender) public returns (bool);\r\n  function is_signer(address addr) public view returns(bool);\r\n}\r\n\r\ncontract MultiSigTools{\r\n  MultiSigInterface public multisig_contract;\r\n  constructor(address _contract) public{\r\n    require(_contract!= address(0x0));\r\n    multisig_contract = MultiSigInterface(_contract);\r\n  }\r\n\r\n  modifier only_signer{\r\n    require(multisig_contract.is_signer(msg.sender), \u0022only a signer can call in MultiSigTools\u0022);\r\n    _;\r\n  }\r\n\r\n  modifier is_majority_sig(uint64 id, string memory name) {\r\n    bytes32 hash = keccak256(abi.encodePacked(msg.sig, msg.data));\r\n    if(multisig_contract.update_and_check_reach_majority(id, name, hash, msg.sender)){\r\n      _;\r\n    }\r\n  }\r\n\r\n  event TransferMultiSig(address _old, address _new);\r\n\r\n  function transfer_multisig(uint64 id, address _contract) public only_signer\r\n  is_majority_sig(id, \u0022transfer_multisig\u0022){\r\n    require(_contract != address(0x0));\r\n    address old = address(multisig_contract);\r\n    multisig_contract = MultiSigInterface(_contract);\r\n    emit TransferMultiSig(old, _contract);\r\n  }\r\n}\r\n\r\n\r\npragma solidity \u003E=0.4.21 \u003C0.6.0;\r\n\r\n\r\n\r\ncontract AddressList{\r\n  using AddressArray for address[];\r\n  mapping(address =\u003E bool) private address_status;\r\n  address[] public addresses;\r\n\r\n  constructor() public{}\r\n\r\n  function get_all_addresses() public view returns(address[] memory){\r\n    return addresses;\r\n  }\r\n\r\n  function get_address(uint i) public view returns(address){\r\n    require(i \u003C addresses.length, \u0022AddressList:get_address, out of range\u0022);\r\n    return addresses[i];\r\n  }\r\n\r\n  function get_address_num() public view returns(uint){\r\n    return addresses.length;\r\n  }\r\n\r\n  function is_address_exist(address addr) public view returns(bool){\r\n    return address_status[addr];\r\n  }\r\n\r\n  function _add_address(address addr) internal{\r\n    if(address_status[addr]) return;\r\n    address_status[addr] = true;\r\n    addresses.push(addr);\r\n  }\r\n\r\n  function _remove_address(address addr) internal{\r\n    if(!address_status[addr]) return;\r\n    address_status[addr] = false;\r\n    addresses.remove(addr);\r\n  }\r\n\r\n  function _reset() internal{\r\n    for(uint i = 0; i \u003C addresses.length; i\u002B\u002B){\r\n      address_status[addresses[i]] = false;\r\n    }\r\n    delete addresses;\r\n  }\r\n}\r\n\r\ncontract TrustList is AddressList, MultiSigTools{\r\n\r\n  event AddTrust(address addr);\r\n  event RemoveTrust(address addr);\r\n\r\n  constructor(address[] memory _list, address _multisig) public MultiSigTools(_multisig){\r\n    for(uint i = 0; i \u003C _list.length; i\u002B\u002B){\r\n      _add_address(_list[i]);\r\n    }\r\n  }\r\n\r\n  function is_trusted(address addr) public view returns(bool){\r\n    return is_address_exist(addr);\r\n  }\r\n\r\n  function get_trusted(uint i) public view returns(address){\r\n    return get_address(i);\r\n  }\r\n\r\n  function get_trusted_num() public view returns(uint){\r\n    return get_address_num();\r\n  }\r\n\r\n  function add_trusted(uint64 id, address addr) public\r\n    only_signer is_majority_sig(id, \u0022add_trusted\u0022){\r\n    _add_address(addr);\r\n    emit AddTrust(addr);\r\n  }\r\n  function add_multi_trusted(uint64 id, address[] memory _list) public\r\n    only_signer is_majority_sig(id, \u0022add_multi_trusted\u0022){\r\n    for(uint i = 0; i \u003C _list.length; i\u002B\u002B){\r\n      _add_address(_list[i]);\r\n      emit AddTrust(_list[i]);\r\n    }\r\n  }\r\n\r\n  function remove_trusted(uint64 id, address addr) public\r\n    only_signer is_majority_sig(id, \u0022remove_trusted\u0022){\r\n    _remove_address(addr);\r\n    emit RemoveTrust(addr);\r\n  }\r\n\r\n  function remove_multi_trusted(uint64 id, address[] memory _list) public\r\n  only_signer is_majority_sig(id, \u0022remove_multi_trusted\u0022){\r\n    for(uint i = 0; i \u003C _list.length; i\u002B\u002B){\r\n      _remove_address(_list[i]);\r\n      emit RemoveTrust(_list[i]);\r\n    }\r\n  }\r\n}\r\n\r\ncontract TrustListFactory{\r\n  event NewTrustList(address addr, address[] list, address multisig);\r\n\r\n  function createTrustList(address[] memory _list, address _multisig) public returns(address){\r\n    TrustList tl = new TrustList(_list, _multisig);\r\n    emit NewTrustList(address(tl), _list, _multisig);\r\n    return address(tl);\r\n  }\r\n}","ABI":"[{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_list\u0022,\u0022type\u0022:\u0022address[]\u0022},{\u0022name\u0022:\u0022_multisig\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022createTrustList\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022addr\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022list\u0022,\u0022type\u0022:\u0022address[]\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022multisig\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022NewTrustList\u0022,\u0022type\u0022:\u0022event\u0022}]","ContractName":"TrustListFactory","CompilerVersion":"v0.5.10\u002Bcommit.5a6ea5b1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"AddressArray:0493163ff05664a1add5f87374ef78940ae33bc4","SwarmSource":"bzzr://acbdf6e0482872590a9ef2bea1628dc8cd3a86396b4f192f20bb0dc4b81251b7"}]