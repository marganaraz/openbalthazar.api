[{"SourceCode":"// File: contracts/interfaces/ITransferRules.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title ITransferRules interface\r\n * @dev Represents interface for any on-chain SRC20 transfer rules\r\n * implementation. Transfer Rules are expected to follow\r\n * same interface, managing multiply transfer rule implementations with\r\n * capabilities of managing what happens with tokens.\r\n *\r\n * This interface is working with ERC20 transfer() function\r\n */\r\ninterface ITransferRules {\r\n    function setSRC(address src20) external returns (bool);\r\n    function doTransfer(address from, address to, uint256 value) external returns (bool);\r\n}\r\n\r\n// File: contracts/interfaces/ISRC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title SRC20 public interface\r\n */\r\ninterface ISRC20 {\r\n\r\n    event RestrictionsAndRulesUpdated(address restrictions, address rules);\r\n\r\n    function transferToken(address to, uint256 value, uint256 nonce, uint256 expirationTime,\r\n        bytes32 msgHash, bytes calldata signature) external returns (bool);\r\n    function transferTokenFrom(address from, address to, uint256 value, uint256 nonce,\r\n        uint256 expirationTime, bytes32 hash, bytes calldata signature) external returns (bool);\r\n    function getTransferNonce() external view returns (uint256);\r\n    function getTransferNonce(address account) external view returns (uint256);\r\n    function executeTransfer(address from, address to, uint256 value) external returns (bool);\r\n    function updateRestrictionsAndRules(address restrictions, address rules) external returns (bool);\r\n\r\n    // ERC20 part-like interface\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address who) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    function increaseAllowance(address spender, uint256 value) external returns (bool);\r\n    function decreaseAllowance(address spender, uint256 value) external returns (bool);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * \u0060onlyOwner\u0060, which can be aplied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \u0022Ownable: caller is not the owner\u0022);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * \u0060onlyOwner\u0060 functions anymore. Can only be called by the current owner.\r\n     *\r\n     * \u003E Note: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (\u0060newOwner\u0060).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (\u0060newOwner\u0060).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \u0022Ownable: new owner is the zero address\u0022);\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/rules/ManualApproval.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n/*\r\n * @title ManualApproval contract\r\n * @dev On-chain transfer rule that is handling transfer request/execution for\r\n * grey-listed account\r\n */\r\ncontract ManualApproval is Ownable {\r\n    struct TransferReq {\r\n        address from;\r\n        address to;\r\n        uint256 value;\r\n    }\r\n\r\n    uint256 public _reqNumber;\r\n    ISRC20 public _src20;\r\n\r\n    mapping(uint256 =\u003E TransferReq) public _transferReq;\r\n    mapping(address =\u003E bool) public _greyList;\r\n\r\n    event TransferRequest(\r\n        uint256 indexed requestNumber,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    );\r\n\r\n    event TransferApproval(\r\n        uint256 indexed requestNumber,\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 value\r\n    );\r\n\r\n    event TransferRequestCanceled(\r\n        uint256 indexed requestNumber,\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 value\r\n    );\r\n\r\n    constructor () public {\r\n    }\r\n\r\n    /**\r\n     * @dev Owner of this contract have authority to approve tx which are valid.\r\n     *\r\n     * @param reqNumber - transfer request number.\r\n     */\r\n    function transferApproval(uint256 reqNumber) external onlyOwner returns (bool) {\r\n        TransferReq memory req = _transferReq[reqNumber];\r\n\r\n        require(_src20.executeTransfer(address(this), req.to, req.value), \u0022SRC20 transfer failed\u0022);\r\n\r\n        delete _transferReq[reqNumber];\r\n        emit TransferApproval(reqNumber, req.from, req.to, req.value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Canceling transfer request and returning funds to from.\r\n     *\r\n     * @param reqNumber - transfer request number.\r\n     */\r\n    function cancelTransferRequest(uint256 reqNumber) external returns (bool) {\r\n        TransferReq memory req = _transferReq[reqNumber];\r\n        require(req.from == msg.sender, \u0022Not owner of the transfer request\u0022);\r\n\r\n        require(_src20.executeTransfer(address(this), req.from, req.value), \u0022SRC20: External transfer failed\u0022);\r\n\r\n        delete _transferReq[reqNumber];\r\n        emit TransferRequestCanceled(reqNumber, req.from, req.to, req.value);\r\n\r\n        return true;\r\n    }\r\n\r\n    // Handling grey listing\r\n    function isGreyListed(address account) public view returns (bool){\r\n        return _greyList[account];\r\n    }\r\n\r\n    function greyListAccount(address account) external onlyOwner returns (bool) {\r\n        _greyList[account] = true;\r\n        return true;\r\n    }\r\n\r\n    function bulkGreyListAccount(address[] calldata accounts) external onlyOwner returns (bool) {\r\n        for (uint256 i = 0; i \u003C accounts.length ; i\u002B\u002B) {\r\n            address account = accounts[i];\r\n            _greyList[account] = true;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function unGreyListAccount(address account) external onlyOwner returns (bool) {\r\n        delete _greyList[account];\r\n        return true;\r\n    }\r\n\r\n    function bulkUnGreyListAccount(address[] calldata accounts) external onlyOwner returns (bool) {\r\n        for (uint256 i = 0; i \u003C accounts.length ; i\u002B\u002B) {\r\n            address account = accounts[i];\r\n            delete _greyList[account];\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function _transferRequest(address from, address to, uint256 value) internal returns (bool) {\r\n        require(_src20.executeTransfer(from, address(this), value), \u0022SRC20 transfer failed\u0022);\r\n\r\n        _transferReq[_reqNumber] = TransferReq(from, to, value);\r\n\r\n        emit TransferRequest(_reqNumber, from, to, value);\r\n        _reqNumber = _reqNumber \u002B 1;\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\n// File: contracts/rules/Whitelisted.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n/**\r\n * @title Whitelisted transfer restriction example\r\n * @dev Example of simple transfer rule, having a list\r\n * of whitelisted addresses manged by owner, and checking\r\n * that from and to address in src20 transfer are whitelisted.\r\n */\r\ncontract Whitelisted is Ownable {\r\n    mapping (address =\u003E bool) public _whitelisted;\r\n\r\n    function whitelistAccount(address account) external onlyOwner {\r\n        _whitelisted[account] = true;\r\n    }\r\n\r\n    function bulkWhitelistAccount(address[] calldata accounts) external onlyOwner {\r\n        for (uint256 i = 0; i \u003C accounts.length ; i\u002B\u002B) {\r\n            address account = accounts[i];\r\n            _whitelisted[account] = true;\r\n        }\r\n    }\r\n\r\n    function unWhitelistAccount(address account) external onlyOwner {\r\n         delete _whitelisted[account];\r\n    }\r\n\r\n    function bulkUnWhitelistAccount(address[] calldata accounts) external onlyOwner {\r\n        for (uint256 i = 0; i \u003C accounts.length ; i\u002B\u002B) {\r\n            address account = accounts[i];\r\n            delete _whitelisted[account];\r\n        }\r\n    }\r\n\r\n    function isWhitelisted(address account) public view returns (bool) {\r\n        return _whitelisted[account];\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/ITransferRestrictions.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title ITransferRestrictions interface\r\n * @dev Represents interface for any on-chain SRC20 transfer restriction\r\n * implementation. Transfer Restriction registries are expected to follow\r\n * same interface, managing multiply transfer restriction implementations.\r\n *\r\n * It is intended to implementation of this interface be used for transferToken()\r\n */\r\ninterface ITransferRestrictions {\r\n    function authorize(address from, address to, uint256 value) external returns (bool);\r\n}\r\n\r\n// File: contracts/rules/TransferRules.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*\r\n * @title TransferRules contract\r\n * @dev Contract that is checking if on-chain rules for token transfers are concluded.\r\n * It implements whitelist and grey list.\r\n */\r\ncontract TransferRules is ITransferRules, ManualApproval, Whitelisted {\r\n\r\n    modifier onlySRC20 {\r\n        require(msg.sender == address(_src20));\r\n        _;\r\n    }\r\n\r\n    constructor(address owner) public {\r\n        _transferOwnership(owner);\r\n        _whitelisted[owner] = true;\r\n    }\r\n\r\n    /**\r\n    * @dev Set for what contract this rules are.\r\n    *\r\n    * @param src20 - Address of SRC20 contract.\r\n    */\r\n    function setSRC(address src20) external returns (bool) {\r\n        require(address(_src20) == address(0), \u0022SRC20 already set\u0022);\r\n        _src20 = ISRC20(src20);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Checks if transfer passes transfer rules.\r\n    *\r\n    * @param from The address to transfer from.\r\n    * @param to The address to send tokens to.\r\n    * @param value The amount of tokens to send.\r\n    */\r\n    function authorize(address from, address to, uint256 value) public returns (bool) {\r\n        return (isWhitelisted(from) || isGreyListed(from)) \u0026\u0026\r\n        (isWhitelisted(to) || isGreyListed(to));\r\n    }\r\n\r\n    /**\r\n    * @dev Do transfer and checks where funds should go. If both from and to are\r\n    * on the whitelist funds should be transferred but if one of them are on the\r\n    * grey list token-issuer/owner need to approve transfer.\r\n    *\r\n    * @param from The address to transfer from.\r\n    * @param to The address to send tokens to.\r\n    * @param value The amount of tokens to send.\r\n    */\r\n    function doTransfer(address from, address to, uint256 value) external onlySRC20 returns (bool) {\r\n        require(authorize(from, to, value), \u0022Transfer not authorized\u0022);\r\n\r\n        if (isGreyListed(from) || isGreyListed(to)) {\r\n            _transferRequest(from, to, value);\r\n            return true;\r\n        }\r\n\r\n        require(ISRC20(_src20).executeTransfer(from, to, value), \u0022SRC20 transfer failed\u0022);\r\n\r\n        return true;\r\n    }\r\n}","ABI":"[{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022_whitelisted\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022accounts\u0022,\u0022type\u0022:\u0022address[]\u0022}],\u0022name\u0022:\u0022bulkUnGreyListAccount\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022_reqNumber\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022_transferReq\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022from\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022_greyList\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022_src20\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022from\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022doTransfer\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022isWhitelisted\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022from\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022authorize\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022reqNumber\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022cancelTransferRequest\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022accounts\u0022,\u0022type\u0022:\u0022address[]\u0022}],\u0022name\u0022:\u0022bulkUnWhitelistAccount\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022whitelistAccount\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022renounceOwnership\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022accounts\u0022,\u0022type\u0022:\u0022address[]\u0022}],\u0022name\u0022:\u0022bulkWhitelistAccount\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022unGreyListAccount\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022owner\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022isOwner\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022reqNumber\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022transferApproval\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022accounts\u0022,\u0022type\u0022:\u0022address[]\u0022}],\u0022name\u0022:\u0022bulkGreyListAccount\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022isGreyListed\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022greyListAccount\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022unWhitelistAccount\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022transferOwnership\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022src20\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022setSRC\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[{\u0022name\u0022:\u0022owner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022constructor\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022requestNumber\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022from\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022TransferRequest\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022requestNumber\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022from\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022TransferApproval\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022requestNumber\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022from\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022TransferRequestCanceled\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022previousOwner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022OwnershipTransferred\u0022,\u0022type\u0022:\u0022event\u0022}]","ContractName":"TransferRules","CompilerVersion":"v0.5.10\u002Bcommit.5a6ea5b1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000003ec1440b81c55cb7646491a7187710512a7f4b19","Library":"","SwarmSource":"bzzr://0b616977d47dab3e9315a3be5aec132cb54e9d0d4315dede9bfb88a7658cb649"}]