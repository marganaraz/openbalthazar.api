[{"SourceCode":"pragma solidity ^0.5.3;\r\n\r\n    // ----------------------------------------------------------------------------\r\n    // Owned contract  by VT\r\n    // ----------------------------------------------------------------------------\r\n    contract Owned {\r\n        address public owner;\r\n        address public newOwner;\r\n\r\n        event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n        modifier onlyOwner {\r\n            require(msg.sender == owner);\r\n            _;\r\n        }\r\n\r\n        function transferOwnership(address _newOwner) public onlyOwner {\r\n            newOwner = _newOwner;\r\n        }\r\n        function acceptOwnership() public {\r\n            require(msg.sender == newOwner);\r\n            emit OwnershipTransferred(owner, newOwner);\r\n            owner = newOwner;\r\n            newOwner = address(0);\r\n        }\r\n    }\r\n\r\n    // ----------------------------------------------------------------------------\r\n    // Safe maths\r\n    // ----------------------------------------------------------------------------\r\n    library SafeMath {\r\n        function add(uint a, uint b) internal pure returns (uint c) {\r\n            c = a \u002B b;\r\n            require(c \u003E= a);\r\n        }\r\n        function sub(uint a, uint b) internal pure returns (uint c) {\r\n            require(b \u003C= a);\r\n            c = a - b;\r\n        }\r\n        function mul(uint a, uint b) internal pure returns (uint c) {\r\n            c = a * b;\r\n            require(a == 0 || c / a == b);\r\n        }\r\n        function div(uint a, uint b) internal pure returns (uint c) {\r\n            require(b \u003E 0);\r\n            c = a / b;\r\n        }\r\n    }\r\n\r\n    // ----------------------------------------------------------------------------\r\n    // ERC Token Standard VT interface\r\n    // ----------------------------------------------------------------------------\r\n    contract ERC20Interface {\r\n        function totalSupply() public view returns (uint);\r\n        function balanceOf(address tokenOwner) public view returns (uint balance);\r\n        function allowance(address tokenOwner, address spender) public view returns (uint remaining);\r\n        function transfer(address to, uint tokens) public returns (bool success);\r\n        function approve(address spender, uint tokens) public returns (bool success);\r\n        function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n\r\n        event Transfer(address indexed from, address indexed to, uint tokens);\r\n        event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n    }\r\n\r\n    // ----------------------------------------------------------------------------\r\n    // VT Token \r\n    // ----------------------------------------------------------------------------\r\n    contract VT is ERC20Interface, Owned{\r\n        using SafeMath for uint;\r\n        \r\n        string public symbol;\r\n        string public name;\r\n        uint8 public decimals;\r\n        uint _totalSupply;\r\n        mapping(address =\u003E uint) balances;\r\n        mapping(address =\u003E mapping(address =\u003E uint)) allowed;\r\n        mapping(address =\u003E uint) unLockedCoins; // this will keep number of unLockedCoins per address\r\n        struct PC {\r\n        uint256 lockingPeriod;\r\n        uint256 coins;\r\n        bool added;\r\n        }\r\n        mapping(address =\u003E PC[]) record; // this will keep record of Locking periods and coins per address\r\n\r\n        // ------------------------------------------------------------------------\r\n        // Constructer\r\n        // ------------------------------------------------------------------------\r\n        constructor(address _owner) public{\r\n            symbol = \u0022VT\u0022;\r\n            name = \u0022VT\u0022;\r\n            decimals = 18;\r\n            owner = _owner;\r\n            _totalSupply = 1e9; //1,000,000,000\r\n            balances[owner] = totalSupply();\r\n            emit Transfer(address(0),owner,totalSupply());\r\n        }\r\n\r\n        function totalSupply() public view returns (uint){\r\n        return _totalSupply * 10**uint(decimals);\r\n        }\r\n\r\n        // ------------------------------------------------------------------------\r\n        // Get the token balance for account of \u0060tokenOwner\u0060\r\n        // ------------------------------------------------------------------------\r\n        function balanceOf(address tokenOwner) public view returns (uint balance) {\r\n            return balances[tokenOwner];\r\n        }\r\n\r\n        // ------------------------------------------------------------------------\r\n        // Transfer the balance from token owner\u0027s account to account\r\n        // - Owner\u0027s account must have sufficient balance to transfer\r\n        // - Zero value transfers are allowed\r\n        // ------------------------------------------------------------------------\r\n        function transfer(address to, uint tokens) public returns (bool success) {\r\n            // will update unLockedCoins based on time\r\n            if(msg.sender != owner){\r\n                _updateUnLockedCoins(msg.sender, tokens);\r\n                unLockedCoins[msg.sender] = unLockedCoins[msg.sender].sub(tokens);\r\n                unLockedCoins[to] = unLockedCoins[to].add(tokens);\r\n            }\r\n            // prevent transfer to 0x0, use burn instead\r\n            require(to != address(0));\r\n            require(balances[msg.sender] \u003E= tokens );\r\n            require(balances[to] \u002B tokens \u003E= balances[to]);\r\n            balances[msg.sender] = balances[msg.sender].sub(tokens);\r\n            balances[to] = balances[to].add(tokens);\r\n            emit Transfer(msg.sender,to,tokens);\r\n            return true;\r\n        }\r\n        \r\n        // ------------------------------------------------------------------------\r\n        // Token owner can approve for \u0060spender\u0060 to transferFrom(...) \u0060tokens\u0060\r\n        // from the token owner\u0027s account\r\n        // ------------------------------------------------------------------------\r\n        function approve(address spender, uint tokens) public returns (bool success){\r\n            allowed[msg.sender][spender] = tokens;\r\n            emit Approval(msg.sender,spender,tokens);\r\n            return true;\r\n        }\r\n\r\n        // ------------------------------------------------------------------------\r\n        // Transfer \u0060tokens\u0060 from the  account to the  account\r\n        // \r\n        // The calling account must already have sufficient tokens approve(...)\r\n        // for spending from the \u0060from\u0060 account and\r\n        // - From account must have sufficient balance to transfer\r\n        // - Spender must have sufficient allowance to transfer\r\n        // - Zero value transfers are allowed\r\n        // ------------------------------------------------------------------------\r\n        function transferFrom(address from, address to, uint tokens) public returns (bool success){\r\n            // will update unLockedCoins based on time\r\n            if(msg.sender != owner){\r\n                _updateUnLockedCoins(from, tokens);\r\n                unLockedCoins[from] = unLockedCoins[from].sub(tokens);\r\n                unLockedCoins[to] = unLockedCoins[to].add(tokens);\r\n            }\r\n            require(tokens \u003C= allowed[from][msg.sender]); //check allowance\r\n            require(balances[from] \u003E= tokens);\r\n            balances[from] = balances[from].sub(tokens);\r\n            balances[to] = balances[to].add(tokens);\r\n            allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\r\n            emit Transfer(from,to,tokens);\r\n            return true;\r\n        }\r\n        // ------------------------------------------------------------------------\r\n        // Returns the amount of tokens approved by the owner that can be\r\n        // transferred to the spender\u0027s account\r\n        // ------------------------------------------------------------------------\r\n        function allowance(address tokenOwner, address spender) public view returns (uint remaining) {\r\n            return allowed[tokenOwner][spender];\r\n        }\r\n        \r\n        // ------------------------------------------------------------------------\r\n        // Transfer the balance from token owner\u0027s account to \u0060to\u0060 account\r\n        // - Owner\u0027s account must have sufficient balance to transfer\r\n        // - Zero value transfers are allowed\r\n        // - takes in locking Period to lock the tokens to be used\r\n        // - if want to transfer without locking enter zero in lockingPeriod argument \r\n        // ------------------------------------------------------------------------\r\n        function distributeTokens(address to, uint tokens, uint256 lockingPeriod) onlyOwner public returns (bool success) {\r\n            // transfer tokens to the \u0022to\u0022 address\r\n            transfer(to, tokens);\r\n            // if there is no lockingPeriod, add coins to unLockedCoins per address\r\n            if(lockingPeriod == 0)\r\n                unLockedCoins[to] = unLockedCoins[to].add(tokens);\r\n            // if there is a lockingPeriod, add coins to record mapping\r\n            else\r\n                _addRecord(to, tokens, lockingPeriod);\r\n            return true;\r\n        }\r\n        \r\n        // ------------------------------------------------------------------------\r\n        // Adds record of addresses with locking period and coins to lock\r\n        // ------------------------------------------------------------------------\r\n        function _addRecord(address to, uint tokens, uint256 lockingPeriod) private {\r\n                record[to].push(PC(lockingPeriod,tokens, false));\r\n        }\r\n        \r\n        // ------------------------------------------------------------------------\r\n        // Checks if there is any uunLockedCoins available\r\n        // ------------------------------------------------------------------------\r\n        function _updateUnLockedCoins(address _from, uint tokens) private returns (bool success) {\r\n            // if unLockedCoins are greater than \u0022tokens\u0022 of \u0022to\u0022, initiate transfer\r\n            if(unLockedCoins[_from] \u003E= tokens){\r\n                return true;\r\n            }\r\n            // if unLockedCoins are less than \u0022tokens\u0022 of \u0022to\u0022, update unLockedCoins by checking record with \u0022now\u0022 time\r\n            else{\r\n                _updateRecord(_from);\r\n                // check if unLockedCoins are greater than \u0022token\u0022 of \u0022to\u0022, initiate transfer\r\n                if(unLockedCoins[_from] \u003E= tokens){\r\n                    return true;\r\n                }\r\n                // otherwise revert\r\n                else{\r\n                    revert();\r\n                }\r\n            }\r\n        }\r\n        \r\n        // ------------------------------------------------------------------------\r\n        // Unlock the coins if lockingPeriod is expired\r\n        // ------------------------------------------------------------------------\r\n        function _updateRecord(address _address) private returns (bool success){\r\n            PC[] memory tempArray = record[_address];\r\n            uint tempCount = 0;\r\n            for(uint i=0; i \u003C tempArray.length; i\u002B\u002B){\r\n                if(tempArray[i].lockingPeriod \u003C now \u0026\u0026 tempArray[i].added == false){\r\n                    tempCount = tempCount.add(tempArray[i].coins);\r\n                    tempArray[i].added = true;\r\n                    record[_address][i] = PC(tempArray[i].lockingPeriod, tempArray[i].coins, tempArray[i].added);\r\n                }\r\n            }\r\n            unLockedCoins[_address] = unLockedCoins[_address].add(tempCount);\r\n            return true;\r\n        }\r\n        \r\n    }","ABI":"[{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022name\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022spender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022tokens\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022approve\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022success\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022totalSupply\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022from\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022tokens\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022transferFrom\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022success\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022decimals\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint8\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022tokenOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022balanceOf\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022balance\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022acceptOwnership\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022owner\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022symbol\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022tokens\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022transfer\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022success\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022tokens\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022lockingPeriod\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022distributeTokens\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022success\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022newOwner\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022tokenOwner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022spender\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022allowance\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022remaining\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022transferOwnership\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[{\u0022name\u0022:\u0022_owner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022constructor\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022_from\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022_to\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022OwnershipTransferred\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022from\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022tokens\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022Transfer\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022tokenOwner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022spender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022tokens\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022Approval\u0022,\u0022type\u0022:\u0022event\u0022}]","ContractName":"VT","CompilerVersion":"v0.5.4\u002Bcommit.9549d8ff","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000b5ce1a8d5aad35e1398abc2211521ee84203d2b7","Library":"","SwarmSource":"bzzr://1e2af372819291f7b9bb10a11e9b6f62724cafcdf507b33986cb48e9a6e121ef"}]