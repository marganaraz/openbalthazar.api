[{"SourceCode":"pragma solidity 0.5.11; // optimization runs: 200, evm version: petersburg\r\n\r\n\r\ninterface DTokenInterface {\r\n  event Mint(address minter, uint256 mintAmount, uint256 mintTokens);\r\n  event Redeem(address redeemer, uint256 redeemAmount, uint256 redeemTokens);\r\n\r\n  function mint(uint256 underlyingToSupply) external returns (uint256 dTokensMinted);\r\n\r\n  function redeem(uint256 dTokenToBurn) external returns (uint256 underlyingReceived);\r\n\r\n  function redeemUnderlying(uint256 underelyingToReceive) external returns (uint256 dTokensBurned);\r\n\r\n  function pullSurplus() external returns (uint256 cTokenSurplus);\r\n\r\n  function accrueInterest() external;\r\n\r\n  function balanceOfUnderlying(address account) external returns (uint256 underlyingBalance);\r\n\r\n  function getSurplus() external returns (uint256 cDaiSurplus);\r\n\r\n  function exchangeRateCurrent() external returns (uint256 dTokenExchangeRate);\r\n\r\n  function supplyRatePerBlock() external view returns (uint256 dTokenInterestRate);\r\n\r\n  function getSpreadPerBlock() external view returns (uint256 rateSpread);\r\n\r\n  function getVersion() external pure returns (uint256 version);\r\n}\r\n\r\n\r\ninterface CTokenInterface {\r\n  function mint(uint256 mintAmount) external returns (uint256 err);\r\n\r\n  function redeem(uint256 redeemAmount) external returns (uint256 err);\r\n\r\n  function redeemUnderlying(uint256 redeemAmount) external returns (uint256 err);\r\n\r\n  function balanceOf(address account) external returns (uint256 balance);\r\n\r\n  function balanceOfUnderlying(address account) external returns (uint256 balance);\r\n\r\n  function exchangeRateCurrent() external returns (uint256 exchangeRate);\r\n\r\n  function transfer(address recipient, uint256 value) external returns (bool);\r\n\r\n  function supplyRatePerBlock() external view returns (uint256 rate);\r\n}\r\n\r\n\r\ninterface ERC20Interface {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a \u002B b;\r\n    require(c \u003E= a, \u0022SafeMath: addition overflow\u0022);\r\n\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b \u003C= a, \u0022SafeMath: subtraction overflow\u0022);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b, \u0022SafeMath: multiplication overflow\u0022);\r\n\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b \u003E 0, \u0022SafeMath: division by zero\u0022);\r\n    uint256 c = a / b;\r\n\r\n    return c;\r\n  }\r\n\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0, \u0022SafeMath: modulo by zero\u0022);\r\n    return a % b;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title DharmaDaiPrototype0\r\n * @author 0age (dToken mechanics derived from Compound cTokens, ERC20 methods\r\n * derived from Open Zeppelin\u0027s ERC20 contract)\r\n * @notice Initial prototype for a cDai wrapper token. This version is not\r\n * upgradeable, and serves as an initial test of the eventual dDai mechanics.\r\n * The dDai exchange rate will grow at an approximate APR of 5% or at the cDai\r\n * exchange rate, whichever is greater.\r\n */\r\ncontract DharmaDaiPrototype0 is ERC20Interface, DTokenInterface {\r\n  using SafeMath for uint256;\r\n\r\n  uint256 internal constant _DHARMA_DAI_VERSION = 0;\r\n\r\n  // Note: this is a constant for the proof-of-concept but will be configurable.\r\n  // 5% APR interest assuming 15 second block time \u0026 2,102,400 blocks per year\r\n  uint256 internal constant _RATE_PER_BLOCK = 1000000023782344094;\r\n\r\n  string internal constant _NAME = \u0022Dharma Dai (Prototype 0)\u0022;\r\n  string internal constant _SYMBOL = \u0022dDai-p0\u0022;\r\n  uint8 internal constant _DECIMALS = 8; // to match cDai\r\n\r\n  uint256 internal constant _SCALING_FACTOR = 1e18;\r\n  uint256 internal constant _SCALING_FACTOR_SQUARED = 1e36;\r\n  uint256 internal constant _HALF_OF_SCALING_FACTOR = 5e17;\r\n  uint256 internal constant _COMPOUND_SUCCESS = 0;\r\n\r\n  CTokenInterface internal constant _CDAI = CTokenInterface(\r\n    0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643 // mainnet\r\n  );\r\n\r\n  ERC20Interface internal constant _DAI = ERC20Interface(\r\n    0x6B175474E89094C44Da98b954EedeAC495271d0F // mainnet\r\n  );\r\n\r\n  // Note: this is just an EOA for the initial prototype.\r\n  address internal constant _VAULT = 0x7e4A8391C728fEd9069B2962699AB416628B19Fa;\r\n\r\n  mapping (address =\u003E uint256) private _balances;\r\n\r\n  mapping (address =\u003E mapping (address =\u003E uint256)) private _allowances;\r\n\r\n  uint256 private _totalSupply;\r\n\r\n  // TODO: pack these more tightly in storage\r\n  uint256 private _blockLastUpdated;\r\n  uint256 private _dDaiExchangeRate;\r\n  uint256 private _cDaiExchangeRate;\r\n\r\n  constructor() public {\r\n    // Approve cDai to transfer Dai on behalf of this contract in order to mint.\r\n    require(_DAI.approve(address(_CDAI), uint256(-1)));\r\n\r\n    _blockLastUpdated = block.number;\r\n    _dDaiExchangeRate = _SCALING_FACTOR;\r\n    _cDaiExchangeRate = _CDAI.exchangeRateCurrent();\r\n  }\r\n\r\n  /**\r\n   * @notice Transfer \u0060amount\u0060 Dai from \u0060msg.sender\u0060 to this contract, use them\r\n   * to mint cDAI, and mint dTokens with \u0060msg.sender\u0060 as the beneficiary. Ensure\r\n   * that this contract has been approved to transfer the Dai on behalf of the\r\n   * caller.\r\n   * @param daiToSupply uint256 The amount of dai to provide as part of minting.\r\n   * @return The amount of dDai received in return for the supplied Dai.\r\n   */\r\n  function mint(\r\n    uint256 daiToSupply\r\n  ) external accrues returns (uint256 dDaiMinted) {\r\n    // Determine the dDai to mint using the exchange rate\r\n    dDaiMinted = daiToSupply.mul(_SCALING_FACTOR_SQUARED).div(_dDaiExchangeRate);\r\n\r\n    // Pull in Dai (requires that this contract has sufficient allowance)\r\n    require(\r\n      _DAI.transferFrom(msg.sender, address(this), daiToSupply),\r\n      \u0022Dai transfer failed.\u0022\r\n    );\r\n\r\n    // Use the Dai to mint cDai (TODO: include error code in revert reason)\r\n    require(_CDAI.mint(daiToSupply) == _COMPOUND_SUCCESS, \u0022cDai mint failed.\u0022);\r\n\r\n    // Mint dDai to the caller\r\n    _mint(msg.sender, daiToSupply, dDaiMinted);\r\n  }\r\n\r\n  /**\r\n   * @notice Redeem \u0060dDaiToBurn\u0060 dDai from \u0060msg.sender\u0060, use the corresponding\r\n   * cDai to redeem Dai, and transfer the Dai to \u0060msg.sender\u0060.\r\n   * @param dDaiToBurn uint256 The amount of dDai to provide for Dai.\r\n   * @return The amount of dai received in return for the provided cDai.\r\n   */\r\n  function redeem(\r\n    uint256 dDaiToBurn\r\n  ) external accrues returns (uint256 daiReceived) {\r\n    // Determine the underlying Dai value of the dDai to be burned\r\n    daiReceived = dDaiToBurn.mul(_dDaiExchangeRate) / _SCALING_FACTOR;\r\n\r\n    // Burn the dDai\r\n    _burn(msg.sender, daiReceived, dDaiToBurn);\r\n\r\n    // Use the cDai to redeem Dai  (TODO: include error code in revert reason)\r\n    require(\r\n      _CDAI.redeemUnderlying(daiReceived) == _COMPOUND_SUCCESS,\r\n      \u0022cDai redeem failed.\u0022\r\n    );\r\n\r\n    // Send the Dai to the redeemer\r\n    require(_DAI.transfer(msg.sender, daiReceived), \u0022Dai transfer failed.\u0022);\r\n  }\r\n\r\n  /**\r\n   * @notice Redeem the dDai equivalent value of Dai amount \u0060daiToReceive\u0060 from\r\n   * \u0060msg.sender\u0060, use the corresponding cDai to redeem Dai, and transfer the\r\n   * Dai to \u0060msg.sender\u0060.\r\n   * @param daiToReceive uint256 The amount, denominated in Dai, of the cDai to\r\n   * provide for Dai.\r\n   * @return The amount of Dai received in return for the provided cDai.\r\n   */\r\n  function redeemUnderlying(\r\n    uint256 daiToReceive\r\n  ) external accrues returns (uint256 dDaiBurned) {\r\n    // Determine the dDai to redeem using the exchange rate\r\n    dDaiBurned = daiToReceive.mul(_SCALING_FACTOR_SQUARED).div(_dDaiExchangeRate);\r\n\r\n    // Burn the dDai\r\n    _burn(msg.sender, daiToReceive, dDaiBurned);\r\n\r\n    // Use the cDai to redeem Dai  (TODO: include error code in revert reason)\r\n    require(\r\n      _CDAI.redeemUnderlying(daiToReceive) == _COMPOUND_SUCCESS,\r\n      \u0022cDai redeem failed.\u0022\r\n    );\r\n\r\n    // Send the Dai to the redeemer\r\n    require(_DAI.transfer(msg.sender, daiToReceive), \u0022Dai transfer failed.\u0022);\r\n  }\r\n\r\n  /**\r\n   * @notice Transfer cDai in excess of the total dDai balance to a dedicated\r\n   * \u0022vault\u0022 account.\r\n   * @return The amount of cDai transferred to the vault account.\r\n   */\r\n  function pullSurplus() external accrues returns (uint256 cDaiSurplus) {\r\n    // Determine the cDai surplus (difference between total dDai and total cDai)\r\n    cDaiSurplus = _getSurplus();\r\n\r\n    // Send the cDai surplus to the vault\r\n    require(_CDAI.transfer(_VAULT, cDaiSurplus), \u0022cDai transfer failed.\u0022);\r\n  }\r\n\r\n  /**\r\n   * @notice Manually advance the dDai exchange rate and update the cDai\r\n   * exchange rate to that of the current block.\r\n   */\r\n  function accrueInterest() external accrues {\r\n    // The \u0060accrues()\u0060 modifier contains all function logic.\r\n  }\r\n\r\n  /**\r\n   * @notice Transfer \u0060amount\u0060 tokens from \u0060msg.sender\u0060 to \u0060recipient\u0060.\r\n   * @param recipient address The account to transfer tokens to.\r\n   * @param amount uint256 The amount of tokens to transfer.\r\n   * @return A boolean indicating whether the transfer was successful.\r\n   */\r\n  function transfer(address recipient, uint256 amount) external returns (bool) {\r\n    _transfer(msg.sender, recipient, amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @notice Approve \u0060spender\u0060 to transfer up to \u0060value\u0060 tokens on behalf of\r\n   * \u0060msg.sender\u0060.\r\n   * @param spender address The account to grant the allowance.\r\n   * @param value uint256 The size of the allowance to grant.\r\n   * @return A boolean indicating whether the approval was successful.\r\n   */\r\n  function approve(address spender, uint256 value) external returns (bool) {\r\n    _approve(msg.sender, spender, value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @notice Transfer \u0060amount\u0060 tokens from \u0060sender\u0060 to \u0060recipient\u0060 as long as\r\n   * \u0060msg.sender\u0060 has sufficient allowance.\r\n   * @param sender address The account to transfer tokens from.\r\n   * @param recipient address The account to transfer tokens to.\r\n   * @param amount uint256 The amount of tokens to transfer.\r\n   * @return A boolean indicating whether the transfer was successful.\r\n   */\r\n  function transferFrom(\r\n    address sender, address recipient, uint256 amount\r\n  ) external returns (bool) {\r\n    _transfer(sender, recipient, amount);\r\n    uint256 allowance = _allowances[sender][msg.sender];\r\n    if (allowance != uint256(-1)) {\r\n      _approve(sender, msg.sender, allowance.sub(amount));\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @notice Increase the current allowance of \u0060spender\u0060 by \u0060value\u0060 tokens.\r\n   * @param spender address The account to grant the additional allowance.\r\n   * @param addedValue uint256 The amount to increase the allowance by.\r\n   * @return A boolean indicating whether the modification was successful.\r\n   */\r\n  function increaseAllowance(\r\n    address spender, uint256 addedValue\r\n  ) external returns (bool) {\r\n    _approve(\r\n      msg.sender, spender, _allowances[msg.sender][spender].add(addedValue)\r\n    );\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @notice Decrease the current allowance of \u0060spender\u0060 by \u0060value\u0060 tokens.\r\n   * @param spender address The account to decrease the allowance for.\r\n   * @param subtractedValue uint256 The amount to subtract from the allowance.\r\n   * @return A boolean indicating whether the modification was successful.\r\n   */\r\n  function decreaseAllowance(\r\n    address spender, uint256 subtractedValue\r\n  ) external returns (bool) {\r\n    _approve(\r\n      msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue)\r\n    );\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @notice View function to get the dDai balance of an account, denominated in\r\n   * its Dai equivalent value.\r\n   * @param account address The account to check the balance for.\r\n   * @return The total Dai-equivalent cDai balance.\r\n   */\r\n  function balanceOfUnderlying(\r\n    address account\r\n  ) external returns (uint256 daiBalance) {\r\n    // Get most recent dDai exchange rate by determining accrued interest\r\n    (uint256 dDaiExchangeRate,,) = _getAccruedInterest();\r\n\r\n    // Convert account balance to Dai equivalent using the exchange rate\r\n    daiBalance = _balances[account].mul(dDaiExchangeRate) / _SCALING_FACTOR;\r\n  }\r\n\r\n  /**\r\n   * @notice View function to get the total surplus, or cDai balance that\r\n   * exceeds the total dDai balance.\r\n   * @return The total surplus.\r\n   */\r\n  function getSurplus() external accrues returns (uint256 cDaiSurplus) {\r\n    // Determine the cDai surplus (difference between total dDai and total cDai)\r\n    cDaiSurplus = _getSurplus();\r\n  }\r\n\r\n  /**\r\n   * @notice View function to get the current dDai exchange rate (multiplied by\r\n   * 10^18).\r\n   * @return The current exchange rate.\r\n   */\r\n  function exchangeRateCurrent() external returns (uint256 dDaiExchangeRate) {\r\n    // Get most recent dDai exchange rate by determining accrued interest\r\n    (dDaiExchangeRate,,) = _getAccruedInterest();\r\n  }\r\n\r\n  /**\r\n   * @notice View function to get the current dDai interest earned per block\r\n   * (multiplied by 10^18).\r\n   * @return The current interest rate.\r\n   */\r\n  function supplyRatePerBlock() external view returns (uint256 dDaiInterestRate) {\r\n    (dDaiInterestRate,) = _getRatePerBlock();\r\n  }\r\n\r\n  /**\r\n   * @notice View function to get the current cDai interest spread over dDai per\r\n   * block (multiplied by 10^18).\r\n   * @return The current interest rate spread.\r\n   */\r\n  function getSpreadPerBlock() external view returns (uint256 rateSpread) {\r\n    (uint256 dDaiInterestRate, uint256 cDaiInterestRate) = _getRatePerBlock();\r\n    rateSpread = cDaiInterestRate - dDaiInterestRate;\r\n  }\r\n\r\n  /**\r\n   * @notice View function to get the total dDai supply.\r\n   * @return The total supply.\r\n   */\r\n  function totalSupply() external view returns (uint256) {\r\n    return _totalSupply;\r\n  }\r\n\r\n  /**\r\n   * @notice View function to get the total dDai balance of an account.\r\n   * @param account address The account to check the dDai balance for.\r\n   * @return The balance of the given account.\r\n   */\r\n  function balanceOf(address account) external view returns (uint256 dDai) {\r\n    dDai = _balances[account];\r\n  }\r\n\r\n  /**\r\n   * @notice View function to get the total allowance that \u0060spender\u0060 has to\r\n   * transfer funds from the \u0060owner\u0060 account using \u0060transferFrom\u0060.\r\n   * @param owner address The account that is granting the allowance.\r\n   * @param spender address The account that has been granted the allowance.\r\n   * @return The allowance of the given spender for the given owner.\r\n   */\r\n  function allowance(address owner, address spender) external view returns (uint256) {\r\n    return _allowances[owner][spender];\r\n  }\r\n\r\n  /**\r\n   * @notice Pure function to get the name of the token.\r\n   * @return The name of the token.\r\n   */\r\n  function name() external pure returns (string memory) {\r\n    return _NAME;\r\n  }\r\n\r\n  /**\r\n   * @notice Pure function to get the symbol of the token.\r\n   * @return The symbol of the token.\r\n   */\r\n  function symbol() external pure returns (string memory) {\r\n    return _SYMBOL;\r\n  }\r\n\r\n  /**\r\n   * @notice Pure function to get the number of decimals of the token.\r\n   * @return The number of decimals of the token.\r\n   */\r\n  function decimals() external pure returns (uint8) {\r\n    return _DECIMALS;\r\n  }\r\n\r\n  /**\r\n   * @notice Pure function for getting the current Dharma Dai version.\r\n   * @return The current Dharma Dai version.\r\n   */\r\n  function getVersion() external pure returns (uint256 version) {\r\n    version = _DHARMA_DAI_VERSION;\r\n  }\r\n\r\n  /**\r\n   * @notice Internal function to mint \u0060amount\u0060 tokens by exchanging \u0060exchanged\u0060\r\n   * tokens to \u0060account\u0060 and emit corresponding \u0060Mint\u0060 \u0026 \u0060Transfer\u0060 events.\r\n   * @param account address The account to mint tokens to.\r\n   * @param exchanged uint256 The amount of underlying tokens used to mint.\r\n   * @param amount uint256 The amount of tokens to mint.\r\n   */\r\n  function _mint(address account, uint256 exchanged, uint256 amount) internal {\r\n    _totalSupply = _totalSupply.add(amount);\r\n    _balances[account] = _balances[account].add(amount);\r\n\r\n    emit Mint(account, exchanged, amount);\r\n    emit Transfer(address(0), account, amount);\r\n  }\r\n\r\n  /**\r\n   * @notice Internal function to burn \u0060amount\u0060 tokens by exchanging \u0060exchanged\u0060\r\n   * tokens from \u0060account\u0060 and emit corresponding \u0060Redeeem\u0060 \u0026 \u0060Transfer\u0060 events.\r\n   * @param account address The account to burn tokens from.\r\n   * @param exchanged uint256 The amount of underlying tokens given for burning.\r\n   * @param amount uint256 The amount of tokens to burn.\r\n   */\r\n  function _burn(address account, uint256 exchanged, uint256 amount) internal {\r\n    uint256 balancePriorToBurn = _balances[account];\r\n    require(\r\n      balancePriorToBurn \u003E= amount, \u0022Supplied amount exceeds account balance.\u0022\r\n    );\r\n\r\n    _totalSupply = _totalSupply.sub(amount);\r\n    _balances[account] = balancePriorToBurn - amount; // overflow checked above\r\n\r\n    emit Transfer(account, address(0), amount);\r\n    emit Redeem(account, exchanged, amount);\r\n  }\r\n\r\n  /**\r\n   * @notice Internal function to move \u0060amount\u0060 tokens from \u0060sender\u0060 to\r\n   * \u0060recipient\u0060 and emit a corresponding \u0060Transfer\u0060 event.\r\n   * @param sender address The account to transfer tokens from.\r\n   * @param recipient address The account to transfer tokens to.\r\n   * @param amount uint256 The amount of tokens to transfer.\r\n   */\r\n  function _transfer(address sender, address recipient, uint256 amount) internal {\r\n    require(sender != address(0), \u0022ERC20: transfer from the zero address\u0022);\r\n    require(recipient != address(0), \u0022ERC20: transfer to the zero address\u0022);\r\n\r\n    _balances[sender] = _balances[sender].sub(amount);\r\n    _balances[recipient] = _balances[recipient].add(amount);\r\n    emit Transfer(sender, recipient, amount);\r\n  }\r\n\r\n  /**\r\n   * @notice Internal function to set the allowance for \u0060spender\u0060 to transfer up\r\n   * to \u0060value\u0060 tokens on behalf of \u0060owner\u0060.\r\n   * @param owner address The account that has granted the allowance.\r\n   * @param spender address The account to grant the allowance.\r\n   * @param value uint256 The size of the allowance to grant.\r\n   */\r\n  function _approve(address owner, address spender, uint256 value) internal {\r\n    require(owner != address(0), \u0022ERC20: approve from the zero address\u0022);\r\n    require(spender != address(0), \u0022ERC20: approve to the zero address\u0022);\r\n\r\n    _allowances[owner][spender] = value;\r\n    emit Approval(owner, spender, value);\r\n  }\r\n\r\n  /**\r\n   * @notice Internal, view-esque function to get the latest dDai and cDai\r\n   * exchange rates for Dai and update the record of each in the event that they\r\n   * have not already been updated in the given block.\r\n   * @return The dDai and cDai exchange rate, as well as a boolean indicating if\r\n   * interest accrual has been processed already or needs to be calculated and\r\n   * placed in storage.\r\n   */\r\n  function _getAccruedInterest() internal /* view */ returns (\r\n    uint256 dDaiExchangeRate, uint256 cDaiExchangeRate, bool fullyAccrued\r\n  ) {\r\n    // Get the number of blocks since the last time interest was accrued\r\n    uint256 blocksToAccrueInterest = block.number - _blockLastUpdated;\r\n    fullyAccrued = (blocksToAccrueInterest == 0);\r\n\r\n    // Skip calculation and read from storage if interest was accrued this block\r\n    if (fullyAccrued) {\r\n      dDaiExchangeRate = _dDaiExchangeRate;\r\n      cDaiExchangeRate = _cDaiExchangeRate;\r\n    } else {\r\n      // Calculate the accrued interest over the period\r\n      uint256 defaultInterest = _pow(_RATE_PER_BLOCK, blocksToAccrueInterest);\r\n\r\n      // Retrieve the latest exchange rate for cDai\r\n      cDaiExchangeRate = _CDAI.exchangeRateCurrent();\r\n\r\n      // Calculate the accrued interest for Compound over the period\r\n      uint256 cDaiInterest = (\r\n        cDaiExchangeRate.mul(_SCALING_FACTOR).div(_cDaiExchangeRate)\r\n      );\r\n\r\n      // Take the lesser of the two and use it to adjust the dDai exchange rate\r\n      dDaiExchangeRate = _dDaiExchangeRate.mul(\r\n        defaultInterest \u003E cDaiInterest ? cDaiInterest : defaultInterest\r\n      ) / _SCALING_FACTOR;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Internal, view-esque function to get the total surplus, or cDai\r\n   * balance that exceeds the total dDai balance.\r\n   * @return The total surplus.\r\n   */\r\n  function _getSurplus() internal /* view */ returns (uint256 cDaiSurplus) {\r\n    // Determine the total value of all issued dDai in Dai, rounded up\r\n    uint256 dDaiUnderlying = (\r\n      _totalSupply.mul(_dDaiExchangeRate) / _SCALING_FACTOR\r\n    ).add(1);\r\n\r\n    // Compare to total underlying Dai value of all cDai held by this contract\r\n    uint256 daiSurplus = (\r\n      _CDAI.balanceOfUnderlying(address(this)).sub(dDaiUnderlying)\r\n    );\r\n\r\n    // Determine the cDai equivalent of this surplus amount\r\n    cDaiSurplus = daiSurplus.mul(_SCALING_FACTOR_SQUARED).div(_cDaiExchangeRate);\r\n  }\r\n\r\n  /**\r\n   * @notice View function to get the current dDai and cDai interest supply rate\r\n   * per block (multiplied by 10^18).\r\n   * @return The current dDai and cDai interest rates.\r\n   */\r\n  function _getRatePerBlock() internal view returns (\r\n    uint256 dDaiSupplyRate, uint256 cDaiSupplyRate\r\n  ) {\r\n    cDaiSupplyRate = _CDAI.supplyRatePerBlock(); // NOTE: accrue on Compound first?\r\n    dDaiSupplyRate = (\r\n      _RATE_PER_BLOCK \u003C cDaiSupplyRate ? _RATE_PER_BLOCK : cDaiSupplyRate\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @notice Internal function to take \u0060floatIn\u0060 (i.e. the value * 10^18) and\r\n   * raise it to the power of \u0060power\u0060 using \u0022exponentiation by squaring\u0022 (see\r\n   * Maker\u0027s DSMath implementation).\r\n   * @param floatIn uint256 The value.\r\n   * @param power address The power to raise the value by.\r\n   * @return The specified value raised to the specified power.\r\n   */\r\n  function _pow(uint256 floatIn, uint256 power) internal pure returns (uint256 floatOut) {\r\n    floatOut = power % 2 != 0 ? floatIn : _SCALING_FACTOR;\r\n\r\n    for (power /= 2; power != 0; power /= 2) {\r\n      floatIn = (floatIn.mul(floatIn)).add(_HALF_OF_SCALING_FACTOR) / _SCALING_FACTOR;\r\n\r\n      if (power % 2 != 0) {\r\n        floatOut = (floatIn.mul(floatOut)).add(_HALF_OF_SCALING_FACTOR) / _SCALING_FACTOR;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Modifier to determine the latest dDai and cDai exchange rates, and\r\n   * to update the respective storage values if they have not already been\r\n   * updated at some point in the current block, before proceeding to execution\r\n   * of the rest of the decorated function.\r\n   */\r\n  modifier accrues() {\r\n    (\r\n      uint256 dDaiExchangeRate, uint256 cDaiExchangeRate, bool fullyAccrued\r\n    ) = _getAccruedInterest();\r\n\r\n    if (!fullyAccrued) {\r\n      // Update storage with dDai \u002B cDai exchange rates as of the current block\r\n      _blockLastUpdated = block.number;\r\n      _dDaiExchangeRate = dDaiExchangeRate;\r\n      _cDaiExchangeRate = cDaiExchangeRate;\r\n    }\r\n\r\n    _;\r\n  }\r\n}","ABI":"[{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022name\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022string\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022pure\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022spender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022approve\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022getVersion\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022version\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022pure\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022totalSupply\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022pullSurplus\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022cDaiSurplus\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022getSurplus\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022cDaiSurplus\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022sender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022recipient\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022transferFrom\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022decimals\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint8\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint8\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022pure\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022spender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022addedValue\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022increaseAllowance\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022balanceOfUnderlying\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022daiBalance\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022getSpreadPerBlock\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022rateSpread\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022balanceOf\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022dDai\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022daiToReceive\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022redeemUnderlying\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022dDaiBurned\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022symbol\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022string\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022pure\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022daiToSupply\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022mint\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022dDaiMinted\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022spender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022subtractedValue\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022decreaseAllowance\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022accrueInterest\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022recipient\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022transfer\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022supplyRatePerBlock\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022dDaiInterestRate\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022exchangeRateCurrent\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022dDaiExchangeRate\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022dDaiToBurn\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022redeem\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022daiReceived\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022owner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022spender\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022allowance\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022constructor\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022minter\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022mintAmount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022mintTokens\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022Mint\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022redeemer\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022redeemAmount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022redeemTokens\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022Redeem\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022from\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022Transfer\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022owner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022spender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022Approval\u0022,\u0022type\u0022:\u0022event\u0022}]","ContractName":"DharmaDaiPrototype0","CompilerVersion":"v0.5.11\u002Bcommit.c082d0b4","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://c7f6bc4406752ee0663fe406b49ca2f6e7230664fd3a5d6ff10cd265f9253850"}]