[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2019-02-21\r\n*/\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title Legacy ERC20 interface\r\n */\r\ninterface ILegacyERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function transfer(address to, uint256 value) external;\r\n\r\n    function approve(address spender, uint256 value) external;\r\n\r\n    function transferFrom(address from, address to, uint256 value) external;\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract EtomicSwap {\r\n    enum PaymentState {\r\n        Uninitialized,\r\n        PaymentSent,\r\n        ReceivedSpent,\r\n        SenderRefunded\r\n    }\r\n\r\n    struct Payment {\r\n        bytes20 paymentHash;\r\n        uint64 lockTime;\r\n        PaymentState state;\r\n    }\r\n\r\n    mapping (bytes32 =\u003E Payment) public payments;\r\n\r\n    event PaymentSent(bytes32 id);\r\n    event ReceiverSpent(bytes32 id, bytes32 secret);\r\n    event SenderRefunded(bytes32 id);\r\n\r\n    constructor() public { }\r\n\r\n    function ethPayment(\r\n        bytes32 _id,\r\n        address _receiver,\r\n        bytes20 _secretHash,\r\n        uint64 _lockTime\r\n    ) external payable {\r\n        require(_receiver != address(0) \u0026\u0026 msg.value \u003E 0 \u0026\u0026 payments[_id].state == PaymentState.Uninitialized);\r\n\r\n        bytes20 paymentHash = ripemd160(abi.encodePacked(\r\n                _receiver,\r\n                msg.sender,\r\n                _secretHash,\r\n                address(0),\r\n                msg.value\r\n            ));\r\n\r\n        payments[_id] = Payment(\r\n            paymentHash,\r\n            _lockTime,\r\n            PaymentState.PaymentSent\r\n        );\r\n\r\n        emit PaymentSent(_id);\r\n    }\r\n\r\n    function erc20Payment(\r\n        bytes32 _id,\r\n        uint256 _amount,\r\n        address _tokenAddress,\r\n        bool _isLegacyToken,\r\n        address _receiver,\r\n        bytes20 _secretHash,\r\n        uint64 _lockTime\r\n    ) external payable {\r\n        require(_receiver != address(0) \u0026\u0026 _amount \u003E 0 \u0026\u0026 payments[_id].state == PaymentState.Uninitialized);\r\n\r\n        bytes20 paymentHash = ripemd160(abi.encodePacked(\r\n                _receiver,\r\n                msg.sender,\r\n                _secretHash,\r\n                _tokenAddress,\r\n                _amount\r\n            ));\r\n\r\n        payments[_id] = Payment(\r\n            paymentHash,\r\n            _lockTime,\r\n            PaymentState.PaymentSent\r\n        );\r\n\r\n        if (_isLegacyToken) {\r\n            ILegacyERC20 token = ILegacyERC20(_tokenAddress);\r\n            token.transferFrom(msg.sender, address(this), _amount);\r\n        } else {\r\n            IERC20 token = IERC20(_tokenAddress);\r\n            require(token.transferFrom(msg.sender, address(this), _amount));\r\n        }\r\n        emit PaymentSent(_id);\r\n    }\r\n\r\n    function receiverSpend(\r\n        bytes32 _id,\r\n        uint256 _amount,\r\n        bytes32 _secret,\r\n        address _tokenAddress,\r\n        bool _isLegacyToken,\r\n        address _sender\r\n    ) external {\r\n        require(payments[_id].state == PaymentState.PaymentSent);\r\n\r\n        bytes20 paymentHash = ripemd160(abi.encodePacked(\r\n                msg.sender,\r\n                _sender,\r\n                ripemd160(abi.encodePacked(sha256(abi.encodePacked(_secret)))),\r\n                _tokenAddress,\r\n                _amount\r\n            ));\r\n\r\n        require(paymentHash == payments[_id].paymentHash \u0026\u0026 now \u003C payments[_id].lockTime);\r\n        payments[_id].state = PaymentState.ReceivedSpent;\r\n        if (_tokenAddress == address(0)) {\r\n            msg.sender.transfer(_amount);\r\n        } else {\r\n            if (_isLegacyToken) {\r\n                ILegacyERC20 token = ILegacyERC20(_tokenAddress);\r\n                token.transfer(msg.sender, _amount);\r\n            } else {\r\n                IERC20 token = IERC20(_tokenAddress);\r\n                require(token.transfer(msg.sender, _amount));\r\n            }\r\n        }\r\n\r\n        emit ReceiverSpent(_id, _secret);\r\n    }\r\n\r\n    function senderRefund(\r\n        bytes32 _id,\r\n        uint256 _amount,\r\n        bytes20 _paymentHash,\r\n        address _tokenAddress,\r\n        bool _isLegacyToken,\r\n        address _receiver\r\n    ) external {\r\n        require(payments[_id].state == PaymentState.PaymentSent);\r\n\r\n        bytes20 paymentHash = ripemd160(abi.encodePacked(\r\n                _receiver,\r\n                msg.sender,\r\n                _paymentHash,\r\n                _tokenAddress,\r\n                _amount\r\n            ));\r\n\r\n        require(paymentHash == payments[_id].paymentHash \u0026\u0026 now \u003E= payments[_id].lockTime);\r\n\r\n        payments[_id].state = PaymentState.SenderRefunded;\r\n\r\n        if (_tokenAddress == address(0)) {\r\n            msg.sender.transfer(_amount);\r\n        } else {\r\n            if (_isLegacyToken) {\r\n                ILegacyERC20 token = ILegacyERC20(_tokenAddress);\r\n                token.transfer(msg.sender, _amount);\r\n            } else {\r\n                IERC20 token = IERC20(_tokenAddress);\r\n                require(token.transfer(msg.sender, _amount));\r\n            }\r\n        }\r\n\r\n        emit SenderRefunded(_id);\r\n    }\r\n}","ABI":"[{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022payments\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022paymentHash\u0022,\u0022type\u0022:\u0022bytes20\u0022},{\u0022name\u0022:\u0022lockTime\u0022,\u0022type\u0022:\u0022uint64\u0022},{\u0022name\u0022:\u0022state\u0022,\u0022type\u0022:\u0022uint8\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_id\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022name\u0022:\u0022_receiver\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_secretHash\u0022,\u0022type\u0022:\u0022bytes20\u0022},{\u0022name\u0022:\u0022_lockTime\u0022,\u0022type\u0022:\u0022uint64\u0022}],\u0022name\u0022:\u0022ethPayment\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:true,\u0022stateMutability\u0022:\u0022payable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_id\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022name\u0022:\u0022_amount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_secret\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022name\u0022:\u0022_tokenAddress\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_isLegacyToken\u0022,\u0022type\u0022:\u0022bool\u0022},{\u0022name\u0022:\u0022_sender\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022receiverSpend\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_id\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022name\u0022:\u0022_amount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_paymentHash\u0022,\u0022type\u0022:\u0022bytes20\u0022},{\u0022name\u0022:\u0022_tokenAddress\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_isLegacyToken\u0022,\u0022type\u0022:\u0022bool\u0022},{\u0022name\u0022:\u0022_receiver\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022senderRefund\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_id\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022name\u0022:\u0022_amount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_tokenAddress\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_isLegacyToken\u0022,\u0022type\u0022:\u0022bool\u0022},{\u0022name\u0022:\u0022_receiver\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_secretHash\u0022,\u0022type\u0022:\u0022bytes20\u0022},{\u0022name\u0022:\u0022_lockTime\u0022,\u0022type\u0022:\u0022uint64\u0022}],\u0022name\u0022:\u0022erc20Payment\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:true,\u0022stateMutability\u0022:\u0022payable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022constructor\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022id\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022PaymentSent\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022id\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022secret\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022ReceiverSpent\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022id\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022SenderRefunded\u0022,\u0022type\u0022:\u0022event\u0022}]","ContractName":"EtomicSwap","CompilerVersion":"v0.5.1\u002Bcommit.c8a2cb62","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://160f744d7fe521063c0392cb3811bfcf73eb0f926a05987fd84db3ff6f5a9338"}]