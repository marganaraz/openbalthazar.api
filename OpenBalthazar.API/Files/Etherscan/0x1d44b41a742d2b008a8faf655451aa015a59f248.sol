[{"SourceCode":"pragma solidity ^0.5.9;\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see \u0060ERC20Detailed\u0060.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by \u0060account\u0060.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves \u0060amount\u0060 tokens from the caller\u0027s account to \u0060recipient\u0060.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a \u0060Transfer\u0060 event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that \u0060spender\u0060 will be\r\n     * allowed to spend on behalf of \u0060owner\u0060 through \u0060transferFrom\u0060. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when \u0060approve\u0060 or \u0060transferFrom\u0060 are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets \u0060amount\u0060 as the allowance of \u0060spender\u0060 over the caller\u0027s tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * \u003E Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an \u0060Approval\u0060 event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves \u0060amount\u0060 tokens from \u0060sender\u0060 to \u0060recipient\u0060 using the\r\n     * allowance mechanism. \u0060amount\u0060 is then deducted from the caller\u0027s\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a \u0060Transfer\u0060 event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when \u0060value\u0060 tokens are moved from one account (\u0060from\u0060) to\r\n     * another (\u0060to\u0060).\r\n     *\r\n     * Note that \u0060value\u0060 may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a \u0060spender\u0060 for an \u0060owner\u0060 is set by\r\n     * a call to \u0060approve\u0060. \u0060value\u0060 is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity\u0027s arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * \u0060SafeMath\u0060 restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it\u0027s recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060\u002B\u0060 operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a \u002B b;\r\n        require(c \u003E= a, \u0022SafeMath: addition overflow\u0022);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060-\u0060 operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b \u003C= a, \u0022SafeMath: subtraction overflow\u0022);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060*\u0060 operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\r\n        // benefit is lost if \u0027b\u0027 is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \u0022SafeMath: multiplication overflow\u0022);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060/\u0060 operator. Note: this function uses a\r\n     * \u0060revert\u0060 opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b \u003E 0, \u0022SafeMath: division by zero\u0022);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c \u002B a % b); // There is no case in which this doesn\u0027t hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060%\u0060 operator. This function uses a \u0060revert\u0060\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \u0022SafeMath: modulo by zero\u0022);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/utils/Address.sol\r\n\r\n/**\r\n * @dev Collection of functions related to the address type,\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if \u0060account\u0060 is a contract.\r\n     *\r\n     * This test is non-exhaustive, and there may be false-negatives: during the\r\n     * execution of a contract\u0027s constructor, its address will be reported as\r\n     * not containing a contract.\r\n     *\r\n     * \u003E It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size \u003E 0;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a \u0060using SafeERC20 for ERC20;\u0060 statement to your contract,\r\n * which allows you to call the safe operations as \u0060token.safeTransfer(...)\u0060, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // \u0027safeIncreaseAllowance\u0027 and \u0027safeDecreaseAllowance\u0027\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \u0022SafeERC20: approve from non-zero to non-zero allowance\u0022\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity\u0027s return data size checking mechanism, since\r\n        // we\u0027re implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \u0022SafeERC20: call to non-contract\u0022);\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \u0022SafeERC20: low-level call failed\u0022);\r\n\r\n        if (returndata.length \u003E 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \u0022SafeERC20: ERC20 operation did not succeed\u0022);\r\n        }\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * \u0060onlyOwner\u0060, which can be aplied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \u0022Ownable: caller is not the owner\u0022);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * \u0060onlyOwner\u0060 functions anymore. Can only be called by the current owner.\r\n     *\r\n     * \u003E Note: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (\u0060newOwner\u0060).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (\u0060newOwner\u0060).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \u0022Ownable: new owner is the zero address\u0022);\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/openzeppelin/TokenVesting.sol\r\n\r\n\r\n/**\r\n * @title TokenVesting\r\n * @dev A token holder contract that can release its token balance gradually like a\r\n * typical vesting scheme, with a cliff and vesting period. Optionally revocable by the\r\n * owner.\r\n */\r\ncontract TokenVesting is Ownable {\r\n    // The vesting schedule is time-based (i.e. using block timestamps as opposed to e.g. block numbers), and is\r\n    // therefore sensitive to timestamp manipulation (which is something miners can do, to a certain degree). Therefore,\r\n    // it is recommended to avoid using short time durations (less than a minute). Typical vesting schemes, with a\r\n    // cliff period of a year and a duration of four years, are safe to use.\r\n    // solhint-disable not-rely-on-time\r\n\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    event TokensReleased(address token, uint256 amount);\r\n    event TokenVestingRevoked(address token);\r\n\r\n    // beneficiary of tokens after they are released\r\n    address private _beneficiary;\r\n\r\n    // Durations and timestamps are expressed in UNIX time, the same units as block.timestamp.\r\n    uint256 private _cliff;\r\n    uint256 private _start;\r\n    uint256 private _duration;\r\n\r\n    bool private _revocable;\r\n\r\n    mapping (address =\u003E uint256) private _released;\r\n    mapping (address =\u003E bool) private _revoked;\r\n\r\n    /**\r\n     * @dev Creates a vesting contract that vests its balance of any ERC20 token to the\r\n     * beneficiary, gradually in a linear fashion until start \u002B duration. By then all\r\n     * of the balance will have vested.\r\n     * @param beneficiary address of the beneficiary to whom vested tokens are transferred\r\n     * @param cliffDuration duration in seconds of the cliff in which tokens will begin to vest\r\n     * @param start the time (as Unix time) at which point vesting starts\r\n     * @param duration duration in seconds of the period in which the tokens will vest\r\n     * @param revocable whether the vesting is revocable or not\r\n     */\r\n    constructor (address beneficiary, uint256 start, uint256 cliffDuration, uint256 duration, bool revocable) public {\r\n        require(beneficiary != address(0), \u0022TokenVesting: beneficiary is the zero address\u0022);\r\n        // solhint-disable-next-line max-line-length\r\n        require(cliffDuration \u003C= duration, \u0022TokenVesting: cliff is longer than duration\u0022);\r\n        require(duration \u003E 0, \u0022TokenVesting: duration is 0\u0022);\r\n        // solhint-disable-next-line max-line-length\r\n        require(start.add(duration) \u003E block.timestamp, \u0022TokenVesting: final time is before current time\u0022);\r\n\r\n        _beneficiary = beneficiary;\r\n        _revocable = revocable;\r\n        _duration = duration;\r\n        _cliff = start.add(cliffDuration);\r\n        _start = start;\r\n    }\r\n\r\n    /**\r\n     * @return the beneficiary of the tokens.\r\n     */\r\n    function beneficiary() public view returns (address) {\r\n        return _beneficiary;\r\n    }\r\n\r\n    /**\r\n     * @return the cliff time of the token vesting.\r\n     */\r\n    function cliff() public view returns (uint256) {\r\n        return _cliff;\r\n    }\r\n\r\n    /**\r\n     * @return the start time of the token vesting.\r\n     */\r\n    function start() public view returns (uint256) {\r\n        return _start;\r\n    }\r\n\r\n    /**\r\n     * @return the duration of the token vesting.\r\n     */\r\n    function duration() public view returns (uint256) {\r\n        return _duration;\r\n    }\r\n\r\n    /**\r\n     * @return true if the vesting is revocable.\r\n     */\r\n    function revocable() public view returns (bool) {\r\n        return _revocable;\r\n    }\r\n\r\n    /**\r\n     * @return the amount of the token released.\r\n     */\r\n    function released(address token) public view returns (uint256) {\r\n        return _released[token];\r\n    }\r\n\r\n    /**\r\n     * @return true if the token is revoked.\r\n     */\r\n    function revoked(address token) public view returns (bool) {\r\n        return _revoked[token];\r\n    }\r\n\r\n    /**\r\n     * @notice Transfers vested tokens to beneficiary.\r\n     * @param token ERC20 token which is being vested\r\n     */\r\n    function release(IERC20 token) public {\r\n        uint256 unreleased = _releasableAmount(token);\r\n\r\n        require(unreleased \u003E 0, \u0022TokenVesting: no tokens are due\u0022);\r\n\r\n        _released[address(token)] = _released[address(token)].add(unreleased);\r\n\r\n        token.safeTransfer(_beneficiary, unreleased);\r\n\r\n        emit TokensReleased(address(token), unreleased);\r\n    }\r\n\r\n    /**\r\n     * @notice Allows the owner to revoke the vesting. Tokens already vested\r\n     * remain in the contract, the rest are returned to the owner.\r\n     * @param token ERC20 token which is being vested\r\n     */\r\n    function revoke(IERC20 token) public onlyOwner {\r\n        require(_revocable, \u0022TokenVesting: cannot revoke\u0022);\r\n        require(!_revoked[address(token)], \u0022TokenVesting: token already revoked\u0022);\r\n\r\n        uint256 balance = token.balanceOf(address(this));\r\n\r\n        uint256 unreleased = _releasableAmount(token);\r\n        uint256 refund = balance.sub(unreleased);\r\n\r\n        _revoked[address(token)] = true;\r\n\r\n        token.safeTransfer(owner(), refund);\r\n\r\n        emit TokenVestingRevoked(address(token));\r\n    }\r\n\r\n    /**\r\n     * @dev Calculates the amount that has already vested but hasn\u0027t been released yet.\r\n     * @param token ERC20 token which is being vested\r\n     */\r\n    function _releasableAmount(IERC20 token) private view returns (uint256) {\r\n        return _vestedAmount(token).sub(_released[address(token)]);\r\n    }\r\n\r\n    /**\r\n     * @dev Calculates the amount that has already vested.\r\n     * @param token ERC20 token which is being vested\r\n     */\r\n    function _vestedAmount(IERC20 token) private view returns (uint256) {\r\n        uint256 currentBalance = token.balanceOf(address(this));\r\n        uint256 totalBalance = currentBalance.add(_released[address(token)]);\r\n\r\n        if (block.timestamp \u003C _cliff) {\r\n            return 0;\r\n        } else if (block.timestamp \u003E= _start.add(_duration) || _revoked[address(token)]) {\r\n            return totalBalance;\r\n        } else {\r\n            return totalBalance.mul(block.timestamp.sub(_start)).div(_duration);\r\n        }\r\n    }\r\n\r\n     /**\r\n     * @return change the beneficiary of tokens\r\n     */\r\n\r\n    function _changeBeneficiary(address _newBeneficiary) internal {\r\n        _beneficiary = _newBeneficiary;\r\n    }\r\n}\r\n\r\n// File: contracts/helpers/BeneficiaryOperations.sol\r\n\r\n/*\r\n  License: MIT\r\n  Copyright Bitclave, 2018\r\n  It\u0027s modified contract BeneficiaryOperations from https://github.com/bitclave/BeneficiaryOperations\r\n*/\r\n\r\n\r\ncontract BeneficiaryOperations {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    using SafeMath for uint8;\r\n    // VARIABLES\r\n\r\n    uint256 public beneficiariesGeneration;\r\n    uint256 public howManyBeneficiariesDecide;\r\n    address[] public beneficiaries;\r\n    bytes32[] public allOperations;\r\n    address internal insideCallSender;\r\n    uint256 internal insideCallCount;\r\n    \r\n\r\n    // Reverse lookup tables for beneficiaries and allOperations\r\n    mapping(address =\u003E uint8) public beneficiariesIndices; // Starts from 1, size 255\r\n    mapping(bytes32 =\u003E uint) public allOperationsIndicies;\r\n    \r\n\r\n    // beneficiaries voting mask per operations\r\n    mapping(bytes32 =\u003E uint256) public votesMaskByOperation;\r\n    mapping(bytes32 =\u003E uint256) public votesCountByOperation;\r\n\r\n    //operation -\u003E beneficiaryIndex\r\n    mapping(bytes32 =\u003E uint8) internal  operationsByBeneficiaryIndex;\r\n    mapping(uint8 =\u003E uint8) internal operationsCountByBeneficiaryIndex;\r\n    // EVENTS\r\n\r\n    event BeneficiaryshipTransferred(address[] previousbeneficiaries, uint howManyBeneficiariesDecide, address[] newBeneficiaries, uint newHowManybeneficiarysDecide);\r\n    event OperationCreated(bytes32 operation, uint howMany, uint beneficiariesCount, address proposer);\r\n    event OperationUpvoted(bytes32 operation, uint votes, uint howMany, uint beneficiariesCount, address upvoter);\r\n    event OperationPerformed(bytes32 operation, uint howMany, uint beneficiariesCount, address performer);\r\n    event OperationDownvoted(bytes32 operation, uint votes, uint beneficiariesCount,  address downvoter);\r\n    event OperationCancelled(bytes32 operation, address lastCanceller);\r\n    \r\n    // ACCESSORS\r\n\r\n    function isExistBeneficiary(address wallet) public view returns(bool) {\r\n        return beneficiariesIndices[wallet] \u003E 0;\r\n    }\r\n\r\n\r\n    function beneficiariesCount() public view returns(uint) {\r\n        return beneficiaries.length;\r\n    }\r\n\r\n    function allOperationsCount() public view returns(uint) {\r\n        return allOperations.length;\r\n    }\r\n\r\n    /*\r\n      Internal functions\r\n    */\r\n\r\n    function _operationLimitByBeneficiaryIndex(uint8 beneficiaryIndex) internal view returns(bool) {\r\n        return (operationsCountByBeneficiaryIndex[beneficiaryIndex] \u003C= 3);\r\n    }\r\n    \r\n    function _cancelAllPending() internal {\r\n        for (uint i = 0; i \u003C allOperations.length; i\u002B\u002B) {\r\n            delete(allOperationsIndicies[allOperations[i]]);\r\n            delete(votesMaskByOperation[allOperations[i]]);\r\n            delete(votesCountByOperation[allOperations[i]]);\r\n            //delete operation-\u003EbeneficiaryIndex\r\n            delete(operationsByBeneficiaryIndex[allOperations[i]]);\r\n        }\r\n\r\n        allOperations.length = 0;\r\n        //delete operations count for beneficiary\r\n        for (uint8 j = 0; j \u003C beneficiaries.length; j\u002B\u002B) {\r\n            operationsCountByBeneficiaryIndex[j] = 0;\r\n        }\r\n    }\r\n\r\n\r\n    // MODIFIERS\r\n\r\n    /**\r\n    * @dev Allows to perform method by any of the beneficiaries\r\n    */\r\n    modifier onlyAnyBeneficiary {\r\n        if (checkHowManyBeneficiaries(1)) {\r\n            bool update = (insideCallSender == address(0));\r\n            if (update) {\r\n                insideCallSender = msg.sender;\r\n                insideCallCount = 1;\r\n            }\r\n            _;\r\n            if (update) {\r\n                insideCallSender = address(0);\r\n                insideCallCount = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Allows to perform method only after many beneficiaries call it with the same arguments\r\n    */\r\n    modifier onlyManyBeneficiaries {\r\n        if (checkHowManyBeneficiaries(howManyBeneficiariesDecide)) {\r\n            bool update = (insideCallSender == address(0));\r\n            if (update) {\r\n                insideCallSender = msg.sender;\r\n                insideCallCount = howManyBeneficiariesDecide;\r\n            }\r\n            _;\r\n            if (update) {\r\n                insideCallSender = address(0);\r\n                insideCallCount = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Allows to perform method only after all beneficiaries call it with the same arguments\r\n    */\r\n    modifier onlyAllBeneficiaries {\r\n        if (checkHowManyBeneficiaries(beneficiaries.length)) {\r\n            bool update = (insideCallSender == address(0));\r\n            if (update) {\r\n                insideCallSender = msg.sender;\r\n                insideCallCount = beneficiaries.length;\r\n            }\r\n            _;\r\n            if (update) {\r\n                insideCallSender = address(0);\r\n                insideCallCount = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Allows to perform method only after some beneficiaries call it with the same arguments\r\n    */\r\n    modifier onlySomeBeneficiaries(uint howMany) {\r\n        require(howMany \u003E 0, \u0022onlySomeBeneficiaries: howMany argument is zero\u0022);\r\n        require(howMany \u003C= beneficiaries.length, \u0022onlySomeBeneficiaries: howMany argument exceeds the number of Beneficiaries\u0022);\r\n        \r\n        if (checkHowManyBeneficiaries(howMany)) {\r\n            bool update = (insideCallSender == address(0));\r\n            if (update) {\r\n                insideCallSender = msg.sender;\r\n                insideCallCount = howMany;\r\n            }\r\n            _;\r\n            if (update) {\r\n                insideCallSender = address(0);\r\n                insideCallCount = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    // CONSTRUCTOR\r\n\r\n    constructor() public {\r\n        beneficiaries.push(msg.sender);\r\n        beneficiariesIndices[msg.sender] = 1;\r\n        howManyBeneficiariesDecide = 1;\r\n    }\r\n\r\n    // INTERNAL METHODS\r\n\r\n    /**\r\n     * @dev onlyManybeneficiaries modifier helper\r\n     */\r\n    function checkHowManyBeneficiaries(uint howMany) internal returns(bool) {\r\n        if (insideCallSender == msg.sender) {\r\n            require(howMany \u003C= insideCallCount, \u0022checkHowManyBeneficiaries: nested beneficiaries modifier check require more beneficiarys\u0022);\r\n            return true;\r\n        }\r\n        \r\n        \r\n        require((isExistBeneficiary(msg.sender) \u0026\u0026 (beneficiariesIndices[msg.sender] \u003C= beneficiaries.length)), \u0022checkHowManyBeneficiaries: msg.sender is not an beneficiary\u0022);\r\n\r\n        uint beneficiaryIndex = beneficiariesIndices[msg.sender].sub(1);\r\n        \r\n        bytes32 operation = keccak256(abi.encodePacked(msg.data, beneficiariesGeneration));\r\n\r\n        require((votesMaskByOperation[operation] \u0026 (2 ** beneficiaryIndex)) == 0, \u0022checkHowManyBeneficiaries: beneficiary already voted for the operation\u0022);\r\n        //check limit for operation\r\n        require(_operationLimitByBeneficiaryIndex(uint8(beneficiaryIndex)), \u0022checkHowManyBeneficiaries: operation limit is reached for this beneficiary\u0022);\r\n\r\n        votesMaskByOperation[operation] |= (2 ** beneficiaryIndex);\r\n        uint operationVotesCount = votesCountByOperation[operation].add(1);\r\n        votesCountByOperation[operation] = operationVotesCount;\r\n\r\n        if (operationVotesCount == 1) {\r\n            allOperationsIndicies[operation] = allOperations.length;\r\n            \r\n            operationsByBeneficiaryIndex[operation] = uint8(beneficiaryIndex);\r\n            \r\n            operationsCountByBeneficiaryIndex[uint8(beneficiaryIndex)] = uint8(operationsCountByBeneficiaryIndex[uint8(beneficiaryIndex)].add(1));\r\n            \r\n            allOperations.push(operation);\r\n            \r\n            \r\n            emit OperationCreated(operation, howMany, beneficiaries.length, msg.sender);\r\n        }\r\n        emit OperationUpvoted(operation, operationVotesCount, howMany, beneficiaries.length, msg.sender);\r\n\r\n        // If enough beneficiaries confirmed the same operation\r\n        if (votesCountByOperation[operation] == howMany) {\r\n            deleteOperation(operation);\r\n            emit OperationPerformed(operation, howMany, beneficiaries.length, msg.sender);\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n    * @dev Used to delete cancelled or performed operation\r\n    * @param operation defines which operation to delete\r\n    */\r\n    function deleteOperation(bytes32 operation) internal {\r\n        uint index = allOperationsIndicies[operation];\r\n        if (index \u003C allOperations.length - 1) { // Not last\r\n            allOperations[index] = allOperations[allOperations.length.sub(1)];\r\n            allOperationsIndicies[allOperations[index]] = index;\r\n        }\r\n        allOperations.length = allOperations.length.sub(1);\r\n\r\n        uint8 beneficiaryIndex = uint8(operationsByBeneficiaryIndex[operation]);\r\n        operationsCountByBeneficiaryIndex[beneficiaryIndex] = uint8(operationsCountByBeneficiaryIndex[beneficiaryIndex].sub(1));\r\n\r\n        delete votesMaskByOperation[operation];\r\n        delete votesCountByOperation[operation];\r\n        delete allOperationsIndicies[operation];\r\n        delete operationsByBeneficiaryIndex[operation];\r\n    }\r\n\r\n    // PUBLIC METHODS\r\n\r\n    /**\r\n    * @dev Allows beneficiaries to change their mind by cancelling votesMaskByOperation operations\r\n    * @param operation defines which operation to delete\r\n    */\r\n    function cancelPending(bytes32 operation) public onlyAnyBeneficiary {\r\n\r\n        require((isExistBeneficiary(msg.sender) \u0026\u0026 (beneficiariesIndices[msg.sender] \u003C= beneficiaries.length)), \u0022checkHowManyBeneficiaries: msg.sender is not an beneficiary\u0022);\r\n\r\n        uint beneficiaryIndex = beneficiariesIndices[msg.sender].sub(1);\r\n        require((votesMaskByOperation[operation] \u0026 (2 ** beneficiaryIndex)) != 0, \u0022cancelPending: operation not found for this user\u0022);\r\n        votesMaskByOperation[operation] \u0026= ~(2 ** beneficiaryIndex);\r\n        uint operationVotesCount = votesCountByOperation[operation].sub(1);\r\n        votesCountByOperation[operation] = operationVotesCount;\r\n        emit OperationDownvoted(operation, operationVotesCount, beneficiaries.length, msg.sender);\r\n        if (operationVotesCount == 0) {\r\n            deleteOperation(operation);\r\n            emit OperationCancelled(operation, msg.sender);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Allows beneficiaries to change their mind by cancelling all operations\r\n    */\r\n\r\n    function cancelAllPending() public onlyManyBeneficiaries {\r\n       _cancelAllPending();\r\n    }\r\n\r\n\r\n\r\n    /**\u041F\u0435\u0440\u0435\u043F\u0438\u0441\u0430\u0442\u044C*/\r\n\r\n    /**\r\n    * @dev Allows beneficiaries to change beneficiariesship\r\n    * @param newBeneficiaries defines array of addresses of new beneficiaries\r\n    */\r\n    function transferBeneficiaryShip(address[] memory newBeneficiaries) public {\r\n        transferBeneficiaryShipWithHowMany(newBeneficiaries, newBeneficiaries.length);\r\n    }\r\n\r\n    /**\r\n    * @dev Allows beneficiaries to change beneficiaryShip\r\n    * @param newBeneficiaries defines array of addresses of new beneficiaries\r\n    * @param newHowManyBeneficiariesDecide defines how many beneficiaries can decide\r\n    */\r\n    function transferBeneficiaryShipWithHowMany(address[] memory newBeneficiaries, uint256 newHowManyBeneficiariesDecide) public onlyManyBeneficiaries {\r\n        require(newBeneficiaries.length \u003E 0, \u0022transferBeneficiaryShipWithHowMany: beneficiaries array is empty\u0022);\r\n        require(newBeneficiaries.length \u003C 256, \u0022transferBeneficiaryshipWithHowMany: beneficiaries count is greater then 255\u0022);\r\n        require(newHowManyBeneficiariesDecide \u003E 0, \u0022transferBeneficiaryshipWithHowMany: newHowManybeneficiarysDecide equal to 0\u0022);\r\n        require(newHowManyBeneficiariesDecide \u003C= newBeneficiaries.length, \u0022transferBeneficiaryShipWithHowMany: newHowManybeneficiarysDecide exceeds the number of beneficiarys\u0022);\r\n\r\n        // Reset beneficiaries reverse lookup table\r\n        for (uint j = 0; j \u003C beneficiaries.length; j\u002B\u002B) {\r\n            delete beneficiariesIndices[beneficiaries[j]];\r\n        }\r\n        for (uint i = 0; i \u003C newBeneficiaries.length; i\u002B\u002B) {\r\n            require(newBeneficiaries[i] != address(0), \u0022transferBeneficiaryShipWithHowMany: beneficiaries array contains zero\u0022);\r\n            require(beneficiariesIndices[newBeneficiaries[i]] == 0, \u0022transferBeneficiaryShipWithHowMany: beneficiaries array contains duplicates\u0022);\r\n            beneficiariesIndices[newBeneficiaries[i]] = uint8(i.add(1));\r\n        }\r\n        \r\n        emit BeneficiaryshipTransferred(beneficiaries, howManyBeneficiariesDecide, newBeneficiaries, newHowManyBeneficiariesDecide);\r\n        beneficiaries = newBeneficiaries;\r\n        howManyBeneficiariesDecide = newHowManyBeneficiariesDecide;\r\n\r\n        _cancelAllPending();\r\n       \r\n        beneficiariesGeneration\u002B\u002B;\r\n    }\r\n}\r\n\r\n// File: contracts/logics/AkropolisTokenVesting.sol\r\n\r\n//Beneficieries template\r\n\r\n\r\ncontract AkropolisTokenVesting is TokenVesting, BeneficiaryOperations {\r\n\r\n    IERC20 private token;\r\n\r\n    address private _pendingBeneficiary;\r\n\r\n    event LogBeneficiaryTransferProposed(address _beneficiary);\r\n    event LogBeneficiaryTransfered(address _beneficiary);\r\n\r\n    constructor (IERC20 _token, uint256 _start, uint256 _cliffDuration, uint256 _duration) public \r\n        TokenVesting(msg.sender, _start, _cliffDuration, _duration, false) {\r\n            token = _token;\r\n        }\r\n\r\n     /**\r\n     * @notice Transfers vested tokens to beneficiary.\r\n     */\r\n\r\n    function release() public {\r\n        super.release(token);\r\n    }\r\n\r\n\r\n     /**\r\n     * @return the token being held.\r\n     */\r\n    function tokenAddress() public view returns (IERC20) {\r\n        return token;\r\n    }\r\n\r\n    // MODIFIERS\r\n    /**\r\n    * @dev Allows to perform method by existing beneficiary\r\n    */\r\n    modifier onlyExistingBeneficiary(address _beneficiary) {\r\n        require(isExistBeneficiary(_beneficiary), \u0022address is not in beneficiary array\u0022);\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Allows to perform method by pending beneficiary\r\n    */\r\n\r\n    modifier onlyPendingBeneficiary {\r\n        require(msg.sender  == _pendingBeneficiary, \u0022Unpermitted operation.\u0022);\r\n        _;\r\n    }\r\n\r\n    function pendingBeneficiary() public view returns (address) {\r\n        return _pendingBeneficiary;\r\n    }\r\n\r\n     /**\r\n        * @dev Allows beneficiaries to change beneficiaryShip and set first beneficiary as default\r\n        * @param _newBeneficiaries defines array of addresses of new beneficiaries\r\n    */\r\n    function transferBeneficiaryShip(address[] memory _newBeneficiaries) public {\r\n        super.transferBeneficiaryShip(_newBeneficiaries);\r\n        _setPendingBeneficiary(beneficiaries[0]);\r\n    }\r\n\r\n     /**\r\n        * @dev Allows beneficiaries to change beneficiaryShip and set first beneficiary as default\r\n        * @param _newBeneficiaries defines array of addresses of new beneficiaries\r\n        * @param _newHowManyBeneficiariesDecide defines how many beneficiaries can decide\r\n    */\r\n    \r\n    function transferBeneficiaryShipWithHowMany(address[] memory _newBeneficiaries, uint256 _newHowManyBeneficiariesDecide) public  {\r\n        super.transferBeneficiaryShipWithHowMany(_newBeneficiaries, _newHowManyBeneficiariesDecide);\r\n        _setPendingBeneficiary(beneficiaries[0]);\r\n    }\r\n\r\n    /**\r\n        * @dev Allows beneficiaries to change beneficiary as default\r\n         * @param _newBeneficiary defines address of new beneficiary\r\n    */\r\n    function changeBeneficiary(address _newBeneficiary) public onlyManyBeneficiaries {\r\n        _setPendingBeneficiary(_newBeneficiary);\r\n    }\r\n\r\n    /**\r\n        * @dev Claim Beneficiary\r\n    */\r\n    function claimBeneficiary() public onlyPendingBeneficiary {\r\n        _changeBeneficiary(_pendingBeneficiary);\r\n        emit LogBeneficiaryTransfered(_pendingBeneficiary);\r\n        _pendingBeneficiary = address(0);\r\n    }\r\n\r\n    /*\r\n     * Internal Functions\r\n     *\r\n     */\r\n    /**\r\n        * @dev Set pending Beneficiary address\r\n        * @param _newBeneficiary defines address of new beneficiary\r\n    */\r\n    function _setPendingBeneficiary(address _newBeneficiary) internal onlyExistingBeneficiary(_newBeneficiary) {\r\n        _pendingBeneficiary = _newBeneficiary;\r\n        emit LogBeneficiaryTransferProposed(_newBeneficiary);\r\n    }\r\n}","ABI":"[{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022duration\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022cliff\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022token\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022release\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_newBeneficiaries\u0022,\u0022type\u0022:\u0022address[]\u0022}],\u0022name\u0022:\u0022transferBeneficiaryShip\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022allOperationsCount\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022cancelAllPending\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022beneficiary\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022beneficiariesGeneration\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022pendingBeneficiary\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022allOperations\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022claimBeneficiary\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022votesMaskByOperation\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022beneficiariesCount\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022renounceOwnership\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022token\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022revoke\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_newBeneficiaries\u0022,\u0022type\u0022:\u0022address[]\u0022},{\u0022name\u0022:\u0022_newHowManyBeneficiariesDecide\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022transferBeneficiaryShipWithHowMany\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022release\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022revocable\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022operation\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022cancelPending\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022beneficiariesIndices\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint8\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022howManyBeneficiariesDecide\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022owner\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022isOwner\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022votesCountByOperation\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022token\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022released\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022tokenAddress\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022wallet\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022isExistBeneficiary\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022start\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_newBeneficiary\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022changeBeneficiary\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022allOperationsIndicies\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022beneficiaries\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022transferOwnership\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022token\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022revoked\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[{\u0022name\u0022:\u0022_token\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_start\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_cliffDuration\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_duration\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022constructor\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022_beneficiary\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022LogBeneficiaryTransferProposed\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022_beneficiary\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022LogBeneficiaryTransfered\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022previousbeneficiaries\u0022,\u0022type\u0022:\u0022address[]\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022howManyBeneficiariesDecide\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022newBeneficiaries\u0022,\u0022type\u0022:\u0022address[]\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022newHowManybeneficiarysDecide\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022BeneficiaryshipTransferred\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022operation\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022howMany\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022beneficiariesCount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022proposer\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022OperationCreated\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022operation\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022votes\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022howMany\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022beneficiariesCount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022upvoter\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022OperationUpvoted\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022operation\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022howMany\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022beneficiariesCount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022performer\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022OperationPerformed\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022operation\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022votes\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022beneficiariesCount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022downvoter\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022OperationDownvoted\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022operation\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022lastCanceller\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022OperationCancelled\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022token\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022TokensReleased\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022token\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022TokenVestingRevoked\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022previousOwner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022OwnershipTransferred\u0022,\u0022type\u0022:\u0022event\u0022}]","ContractName":"AkropolisTokenVesting","CompilerVersion":"v0.5.9\u002Bcommit.e560f70d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000008ab7404063ec4dbcfd4598215992dc3f8ec853d7000000000000000000000000000000000000000000000000000000005ee80bbc0000000000000000000000000000000000000000000000000000000000278d0000000000000000000000000000000000000000000000000000000000039ada00","Library":"","SwarmSource":"bzzr://7855dc08874462894df508d1419cf3e595a9f76cb55b7e0b6dbc2bc87fecb204"}]