[{"SourceCode":"pragma solidity 0.5.11;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error.\r\n */\r\nlibrary SafeMath {\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \u0022SafeMath: multiplication overflow\u0022);\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b \u003E 0, \u0022SafeMath: division by zero\u0022);\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b \u003C= a, \u0022SafeMath: subtraction overflow\u0022);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a \u002B b;\r\n        require(c \u003E= a, \u0022SafeMath: addition overflow\u0022);\r\n\r\n        return c;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title token interface\r\n */\r\ninterface IBTALToken {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function balanceOf(address who) external view returns (uint256);\r\n    function totalSupply() external view returns (uint256);\r\n    function mint(address account, uint256 amount) external returns (bool);\r\n    function lock(address account, uint256 amount, uint256 time) external;\r\n    function release() external;\r\n    function hardcap() external view returns(uint256);\r\n    function isAdmin(address account) external view returns (bool);\r\n    function isOwner(address account) external view returns (bool);\r\n}\r\n\r\n/**\r\n * @title Exchange interface\r\n */\r\n interface IExchange {\r\n     function acceptETH() external payable;\r\n     function finish() external;\r\n     function reserveAddress() external view returns(address payable);\r\n }\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n */\r\ncontract ReentrancyGuard {\r\n    uint256 private _guardCounter;\r\n\r\n    constructor () internal {\r\n        _guardCounter = 1;\r\n    }\r\n\r\n    modifier nonReentrant() {\r\n        _guardCounter \u002B= 1;\r\n        uint256 localCounter = _guardCounter;\r\n        _;\r\n        require(localCounter == _guardCounter, \u0022ReentrancyGuard: reentrant call\u0022);\r\n    }\r\n}\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address =\u003E bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev Give an account access to this role.\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(!has(role, account), \u0022Roles: account already has role\u0022);\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Remove an account\u0027s access to this role.\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(has(role, account), \u0022Roles: account does not have role\u0022);\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Check if an account has this role.\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0), \u0022Roles: account is the zero address\u0022);\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\n/**\r\n * @title WhitelistedRole\r\n * @dev Whitelisted accounts have been approved by to perform certain actions (e.g. participate in a\r\n * crowdsale).\r\n */\r\ncontract WhitelistedRole {\r\n    using Roles for Roles.Role;\r\n\r\n    event WhitelistedAdded(address indexed account);\r\n    event WhitelistedRemoved(address indexed account);\r\n\r\n    Roles.Role private _whitelisteds;\r\n\r\n    IBTALToken private _token;\r\n\r\n    modifier onlyAdmin() {\r\n        require(_token.isAdmin(msg.sender), \u0022Caller has no permission\u0022);\r\n        _;\r\n    }\r\n\r\n    modifier onlyWhitelisted() {\r\n        require(isWhitelisted(msg.sender), \u0022Sender is not whitelisted\u0022);\r\n        _;\r\n    }\r\n\r\n    function isWhitelisted(address account) public view returns (bool) {\r\n        return _whitelisteds.has(account);\r\n    }\r\n\r\n    function addWhitelisted(address account) public onlyAdmin {\r\n        _whitelisteds.add(account);\r\n        emit WhitelistedAdded(account);\r\n    }\r\n\r\n    function addListToWhitelisted(address[] memory accounts) public {\r\n        for (uint256 i = 0; i \u003C accounts.length; i\u002B\u002B) {\r\n            addWhitelisted(accounts[i]);\r\n        }\r\n    }\r\n\r\n    function removeWhitelisted(address account) public onlyAdmin {\r\n        _whitelisteds.remove(account);\r\n        emit WhitelistedRemoved(account);\r\n    }\r\n\r\n    function removeListWhitelisted(address[] memory accounts) public {\r\n        for (uint256 i = 0; i \u003C accounts.length; i\u002B\u002B) {\r\n            removeWhitelisted(accounts[i]);\r\n        }\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title EnlistedRole\r\n * @dev enlisted accounts have been approved to perform certain actions (e.g. participate in a\r\n * crowdsale).\r\n */\r\ncontract EnlistedRole {\r\n    using Roles for Roles.Role;\r\n\r\n    event EnlistedAdded(address indexed account);\r\n    event EnlistedRemoved(address indexed account);\r\n\r\n    Roles.Role private _enlisted;\r\n\r\n    IBTALToken private _token;\r\n\r\n    modifier onlyAdmin() {\r\n        require(_token.isAdmin(msg.sender));\r\n        _;\r\n    }\r\n\r\n    modifier onlyEnlisted() {\r\n        require(isEnlisted(msg.sender), \u0022Sender is not Enlisted\u0022);\r\n        _;\r\n    }\r\n\r\n    function isEnlisted(address account) public view returns (bool) {\r\n        return _enlisted.has(account);\r\n    }\r\n\r\n    function addEnlisted(address account) public onlyAdmin {\r\n        _enlisted.add(account);\r\n        emit EnlistedAdded(account);\r\n    }\r\n\r\n    function addListToEnlisted(address[] memory accounts) public {\r\n        for (uint256 i = 0; i \u003C accounts.length; i\u002B\u002B) {\r\n            addEnlisted(accounts[i]);\r\n        }\r\n    }\r\n\r\n    function removeEnlisted(address account) public onlyAdmin {\r\n        _enlisted.remove(account);\r\n        emit EnlistedRemoved(account);\r\n    }\r\n    \r\n    function removeListEnlisted(address[] memory accounts) public {\r\n        for (uint256 i = 0; i \u003C accounts.length; i\u002B\u002B) {\r\n            removeEnlisted(accounts[i]);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @title Crowdsale contract\r\n */\r\ncontract Crowdsale is ReentrancyGuard, WhitelistedRole, EnlistedRole {\r\n    using SafeMath for uint256;\r\n\r\n    // deployer\r\n    address internal _initAddress;\r\n\r\n    // The token being sold\r\n    IBTALToken private _token;\r\n\r\n    // Address where funds are collected\r\n    address payable private _wallet;\r\n    address payable private _exchangeAddr;\r\n    address private _bonusAddr;\r\n    address private _teamAddr;\r\n    address private _priceProvider;\r\n\r\n    // stats\r\n    uint256 private _weiRaised; // (ETH)\r\n    uint256 private _tokensPurchased; // (Tokens)\r\n    uint256 private _reserved; // (USD)\r\n\r\n    // reserve variables\r\n    uint256 private _reserveTrigger = 210000000 * (10**18); // (Tokens)\r\n    uint256 private _reserveLimit = 150000; // (USD)\r\n\r\n    // Price of 1 ether in USD Cents\r\n    uint256 private _currentETHPrice;\r\n    uint256 private _decimals;\r\n\r\n    // How many token units a buyer gets per 1 USD\r\n    uint256 private _rate;\r\n\r\n    // Bonus percent (5% = 500)\r\n    uint256 private _bonusPercent = 500;\r\n\r\n    // Minimum amount of wei to invest\r\n    uint256 private _minimum = 26 ether; // (ETH)\r\n\r\n    // Limit of emission of crowdsale\r\n    uint256 private _hardcap; // (Tokens)\r\n\r\n    // ending time\r\n    uint256 private _endTime; // (UNIX)\r\n\r\n    // states\r\n    enum Reserving {OFF, ON}\r\n    Reserving private _reserve = Reserving.OFF;\r\n\r\n    enum State {Usual, Whitelist, PrivateSale, Closed}\r\n    State public state = State.Usual;\r\n\r\n    // events\r\n    event TokensPurchased(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n    event TokensSent(address indexed sender, address indexed beneficiary, uint256 amount);\r\n    event NewETHPrice(uint256 oldValue, uint256 newValue, uint256 decimals);\r\n    event Payout(address indexed recipient, uint256 weiAmount, uint256 usdAmount);\r\n    event BonusPayed(address indexed beneficiary, uint256 amount);\r\n    event ReserveState(bool isActive);\r\n    event StateChanged(string currentState);\r\n\r\n    // time controller\r\n    modifier active() {\r\n        require(\r\n            block.timestamp \u003C= _endTime\r\n            \u0026\u0026 _tokensPurchased \u003C _hardcap\r\n            \u0026\u0026 state != State.Closed\r\n            );\r\n        _;\r\n    }\r\n\r\n    // token admin checker\r\n    modifier onlyAdmin() {\r\n        require(isAdmin(msg.sender));\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev constructor function, sets address of deployer.\r\n     */\r\n    constructor() public {\r\n        _initAddress = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev iniialize start variables.\r\n     * Can be called once only by address who comitted deploy.\r\n     */\r\n    function init(\r\n        uint256 rate,\r\n        uint256 initialETHPrice,\r\n        uint256 decimals,\r\n        address payable wallet,\r\n        address bonusAddr,\r\n        address teamAddr,\r\n        address payable exchange,\r\n        IBTALToken token,\r\n        uint256 endTime,\r\n        uint256 hardcap\r\n        ) public {\r\n\r\n        require(msg.sender == _initAddress);\r\n        require(address(_token) == address(0));\r\n\r\n        require(rate != 0, \u0022Rate is 0\u0022);\r\n        require(initialETHPrice != 0, \u0022Initial ETH price is 0\u0022);\r\n        require(wallet != address(0), \u0022Wallet is the zero address\u0022);\r\n        require(bonusAddr != address(0), \u0022BonusAddr is the zero address\u0022);\r\n        require(teamAddr != address(0), \u0022TeamAddr is the zero address\u0022);\r\n        require(isContract(address(token)), \u0022Token is not a contract\u0022);\r\n        require(isContract(exchange), \u0022Exchange is not a contract\u0022);\r\n        require(endTime != 0, \u0022EndTime is 0\u0022);\r\n        require(hardcap != 0, \u0022HardCap is 0\u0022);\r\n\r\n\r\n        _rate = rate;\r\n        _currentETHPrice = initialETHPrice;\r\n        _decimals = decimals;\r\n        _wallet = wallet;\r\n        _bonusAddr = bonusAddr;\r\n        _teamAddr = teamAddr;\r\n        _exchangeAddr = exchange;\r\n        _token = token;\r\n        _endTime = endTime;\r\n        _hardcap = hardcap;\r\n    }\r\n\r\n    /**\r\n     * @dev fallback function\r\n     */\r\n    function() external payable {\r\n        buyTokens(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev token purchase\r\n     * This function has a non-reentrancy guard\r\n     * Can be called only before end time\r\n     * @param beneficiary Recipient of the token purchase\r\n     */\r\n    function buyTokens(address beneficiary) public payable nonReentrant active {\r\n        require(beneficiary != address(0), \u0022New parameter value is the zero address\u0022);\r\n        require(msg.value \u003E= _minimum, \u0022Wei amount is less than minimum\u0022);\r\n\r\n        if (state == State.Whitelist) {\r\n            require(isWhitelisted(beneficiary), \u0022Beneficiary is not whitelisted\u0022);\r\n        }\r\n\r\n        if (state == State.PrivateSale) {\r\n            require(isEnlisted(beneficiary), \u0022Beneficiary is not enlisted\u0022);\r\n        }\r\n\r\n        uint256 weiAmount = msg.value;\r\n\r\n        uint256 tokens = weiToTokens(weiAmount);\r\n\r\n        uint256 bonusAmount = tokens.mul(_bonusPercent).div(10000);\r\n\r\n        if (_tokensPurchased.add(tokens).add(bonusAmount) \u003E _hardcap) {\r\n            tokens = (_hardcap.sub(_tokensPurchased)).mul(10000).div(_bonusPercent.add(10000));\r\n            bonusAmount = _hardcap.sub(_tokensPurchased).sub(tokens);\r\n            weiAmount = tokensToWei(tokens);\r\n            _sendETH(msg.sender, msg.value.sub(weiAmount));\r\n        }\r\n\r\n        if (bonusAmount \u003E 0) {\r\n            _token.mint(_bonusAddr, bonusAmount);\r\n            emit BonusPayed(beneficiary, bonusAmount);\r\n        }\r\n\r\n        if (\r\n            _tokensPurchased \u003C= _reserveTrigger\r\n            \u0026\u0026 _tokensPurchased.add(tokens) \u003E _reserveTrigger\r\n            \u0026\u0026 reserved() \u003C _reserveLimit\r\n            ) {\r\n            _reserve = Reserving.ON;\r\n            emit ReserveState(true);\r\n            uint256 unreservedWei = tokensToWei(_reserveTrigger.sub(_tokensPurchased));\r\n            _sendETH(_wallet, unreservedWei);\r\n            refund(weiAmount.sub(unreservedWei));\r\n        } else {\r\n            refund(weiAmount);\r\n        }\r\n\r\n        _token.mint(beneficiary, tokens);\r\n\r\n        _tokensPurchased = _tokensPurchased.add(tokens);\r\n        _weiRaised = _weiRaised.add(weiAmount);\r\n\r\n        emit TokensPurchased(msg.sender, beneficiary, weiAmount, tokens);\r\n\r\n    }\r\n\r\n    /**\r\n     * @dev internal Send tokens function.\r\n     * @param recipient address to send tokens to.\r\n     * @param amount amount of tokens.\r\n     */\r\n    function _sendTokens(address recipient, uint256 amount) internal {\r\n        require(recipient != address(0), \u0022Recipient is the zero address\u0022);\r\n        _token.mint(recipient, amount);\r\n        emit TokensSent(msg.sender, recipient, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Send tokens to recipient.\r\n     * Available only to the admin.\r\n     * @param recipient address to send tokens to.\r\n     * @param amount amount of tokens.\r\n     */\r\n    function sendTokens(address recipient, uint256 amount) public onlyAdmin {\r\n        _sendTokens(recipient, amount);\r\n        _tokensPurchased = _tokensPurchased.add(amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Send fixed amount of tokens to list of recipients.\r\n     * Available only to the admin.\r\n     * @param recipients addresses to send tokens to.\r\n     * @param amount amount of tokens.\r\n     */\r\n    function sendTokensToList(address[] memory recipients, uint256 amount) public onlyAdmin {\r\n        require(recipients.length \u003E 0);\r\n        for (uint256 i = 0; i \u003C recipients.length; i\u002B\u002B) {\r\n            _sendTokens(recipients[i], amount);\r\n        }\r\n        _tokensPurchased = _tokensPurchased.add(amount.mul(recipients.length));\r\n    }\r\n\r\n    /**\r\n     * @dev Send tokens to recipient per specified wei amount.\r\n     * Available only to the admin.\r\n     * @param recipient address to send tokens to.\r\n     * @param weiAmount amount of wei.\r\n     */\r\n     function sendTokensPerWei(address recipient, uint256 weiAmount) public onlyAdmin {\r\n         _sendTokens(recipient, weiToTokens(weiAmount));\r\n         _tokensPurchased = _tokensPurchased.add(weiToTokens(weiAmount));\r\n     }\r\n\r\n     /**\r\n      * @dev Send fixed amount of tokens per wei to list of recipients.\r\n      * Available only to the admin.\r\n      * @param recipients addresses to send tokens to.\r\n      * @param weiAmount amount of wei.\r\n      */\r\n     function sendTokensPerWeiToList(address[] memory recipients, uint256 weiAmount) public onlyAdmin {\r\n         require(recipients.length \u003E 0);\r\n         for (uint256 i = 0; i \u003C recipients.length; i\u002B\u002B) {\r\n             _sendTokens(recipients[i], weiToTokens(weiAmount));\r\n         }\r\n         _tokensPurchased = _tokensPurchased.add(weiToTokens(weiAmount).mul(recipients.length));\r\n     }\r\n\r\n    /**\r\n     * @dev internal function to allocate funds.\r\n     */\r\n     function refund(uint256 weiAmount) internal {\r\n         if (_reserve == Reserving.OFF) {\r\n             _sendETH(_wallet, weiAmount);\r\n         } else {\r\n             if (USDToWei(_reserveLimit) \u003E= _reserved) {\r\n                 if (weiToUSD(_reserved.add(weiAmount)) \u003E= _reserveLimit) {\r\n\r\n                     uint256 reservedWei = USDToWei(_reserveLimit).sub(_reserved);\r\n                     _sendETH(_exchangeAddr, reservedWei);\r\n                     uint256 unreservedWei = weiAmount.sub(reservedWei);\r\n                     _sendETH(_wallet, unreservedWei);\r\n\r\n                     _reserved = USDToWei(_reserveLimit);\r\n                     _reserve = Reserving.OFF;\r\n                     emit ReserveState(false);\r\n                } else {\r\n                     _reserved = _reserved.add(weiAmount);\r\n                     _sendETH(_exchangeAddr, weiAmount);\r\n                }\r\n             } else {\r\n                 _sendETH(_wallet, weiAmount);\r\n                 _reserve = Reserving.OFF;\r\n                 emit ReserveState(false);\r\n             }\r\n         }\r\n     }\r\n\r\n     function _sendETH(address payable recipient, uint256 weiAmount) internal {\r\n         require(recipient != address(0));\r\n\r\n         if (recipient == _exchangeAddr) {\r\n             IExchange(_exchangeAddr).acceptETH.value(weiAmount)();\r\n         } else {\r\n             recipient.transfer(weiAmount);\r\n         }\r\n\r\n         emit Payout(recipient, weiAmount, weiToUSD(weiAmount));\r\n     }\r\n\r\n    /**\r\n     * @dev finish crowdsale.\r\n     * Available only to the admin.\r\n     * Can be called only if hardcap is reached or ending time has passed.\r\n     */\r\n    function finishSale() public onlyAdmin {\r\n        require(isEnded());\r\n\r\n        _token.mint(IExchange(_exchangeAddr).reserveAddress(), _token.hardcap().sub(_token.totalSupply()));\r\n        _token.lock(_teamAddr, _token.balanceOf(_teamAddr), 31536000);\r\n        _token.release();\r\n        IExchange(_exchangeAddr).finish();\r\n\r\n        emit StateChanged(\u0022Usual\u0022);\r\n        state = State.Usual;\r\n    }\r\n\r\n    /**\r\n     * @dev Calculate amount of tokens to recieve for a given amount of wei\r\n     * @param weiAmount Value in wei to be converted into tokens\r\n     * @return Number of tokens that can be purchased with the specified weiAmount\r\n     */\r\n    function weiToTokens(uint256 weiAmount) internal view returns(uint256) {\r\n        return weiAmount.mul(_currentETHPrice).mul(_rate).div(10**_decimals).div(1 ether);\r\n    }\r\n\r\n    /**\r\n     * @dev Calculate amount of wei needed to buy given amount of tokens\r\n     * @param tokenAmount amount of tokens\r\n     * @return wei amount that one need to send to buy the specified tokenAmount\r\n     */\r\n    function tokensToWei(uint256 tokenAmount) internal view returns(uint256) {\r\n        return tokenAmount.mul(1 ether).mul(10**_decimals).div(_rate).div(_currentETHPrice);\r\n    }\r\n\r\n    /**\r\n     * @dev Calculate amount of USD for a given amount of wei\r\n     * @param weiAmount amount of tokens\r\n     * @return USD amount\r\n     */\r\n    function weiToUSD(uint256 weiAmount) internal view returns(uint256) {\r\n        return weiAmount.mul(_currentETHPrice).div(10**_decimals).div(1 ether);\r\n    }\r\n\r\n    /**\r\n     * @dev Calculate amount of wei for given amount of USD\r\n     * @param USDAmount amount of USD\r\n     * @return wei amount\r\n     */\r\n    function USDToWei(uint256 USDAmount) internal view returns(uint256) {\r\n        return USDAmount.mul(1 ether).mul(10**_decimals).div(_currentETHPrice);\r\n    }\r\n\r\n    /**\r\n     * @dev Calculate amount of USD needed to buy given amount of tokens\r\n     * @param tokenAmount amount of tokens\r\n     * @return USD amount that one need to send to buy the specified tokenAmount\r\n     */\r\n    function tokensToUSD(uint256 tokenAmount) internal view returns(uint256) {\r\n        return weiToUSD(tokensToWei(tokenAmount));\r\n    }\r\n\r\n    /**\r\n     * @dev Function to change the rate.\r\n     * Available only to the admin.\r\n     * @param newRate new value.\r\n     */\r\n    function setRate(uint256 newRate) external onlyAdmin {\r\n        require(newRate != 0, \u0022New parameter value is 0\u0022);\r\n\r\n        _rate = newRate;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to change the PriceProvider address.\r\n     * Available only to the admin.\r\n     * @param provider new address.\r\n     */\r\n    function setEthPriceProvider(address provider) external onlyAdmin {\r\n        require(provider != address(0), \u0022New parameter value is the zero address\u0022);\r\n        require(isContract(provider));\r\n\r\n        _priceProvider = provider;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to change the address to receive ether.\r\n     * Available only to the admin.\r\n     * @param newWallet new address.\r\n     */\r\n    function setWallet(address payable newWallet) external onlyAdmin {\r\n        require(newWallet != address(0), \u0022New parameter value is the zero address\u0022);\r\n\r\n        _wallet = newWallet;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to change the BonusAddr address.\r\n     * Available only to the admin.\r\n     * @param newBonusAddr new address.\r\n     */\r\n    function setBonusAddr(address newBonusAddr) external onlyAdmin {\r\n        require(newBonusAddr != address(0), \u0022New parameter value is the zero address\u0022);\r\n\r\n        _bonusAddr = newBonusAddr;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Function to change the address of team.\r\n     * Available only to the admin.\r\n     * @param newTeamAddr new address.\r\n     */\r\n    function setTeamAddr(address payable newTeamAddr) external onlyAdmin {\r\n        require(newTeamAddr != address(0), \u0022New parameter value is the zero address\u0022);\r\n\r\n        _teamAddr = newTeamAddr;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to change the Exchange address.\r\n     * Available only to the admin.\r\n     * @param newExchange new address.\r\n     */\r\n    function setExchangeAddr(address payable newExchange) external onlyAdmin {\r\n        require(newExchange != address(0), \u0022New parameter value is the zero address\u0022);\r\n        require(isContract(newExchange), \u0022Exchange is not a contract\u0022);\r\n\r\n        _exchangeAddr = newExchange;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to change the ETH Price.\r\n     * Available only to the admin and to the PriceProvider.\r\n     * @param newPrice amount of USD Cents for 1 ether.\r\n     */\r\n    function setETHPrice(uint256 newPrice) external {\r\n        require(newPrice != 0, \u0022New parameter value is 0\u0022);\r\n        require(msg.sender == _priceProvider || isAdmin(msg.sender), \u0022Sender has no permission\u0022);\r\n\r\n        emit NewETHPrice(_currentETHPrice, newPrice, _decimals);\r\n        _currentETHPrice = newPrice;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to change the USD decimals.\r\n     * Available only to the admin and to the PriceProvider.\r\n     * @param newDecimals amount of numbers after decimal point.\r\n     */\r\n    function setDecimals(uint256 newDecimals) external {\r\n        require(msg.sender == _priceProvider || isAdmin(msg.sender), \u0022Sender has no permission\u0022);\r\n\r\n        _decimals = newDecimals;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to change the end time.\r\n     * Available only to the admin.\r\n     * @param newTime UNIX time of ending of crowdsale.\r\n     */\r\n    function setEndTime(uint256 newTime) external onlyAdmin {\r\n        require(newTime != 0, \u0022New parameter value is 0\u0022);\r\n\r\n        _endTime = newTime;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to change the bonus percent.\r\n     * Available only to the admin.\r\n     * @param newPercent new bonus percent.\r\n     */\r\n    function setBonusPercent(uint256 newPercent) external onlyAdmin {\r\n\r\n        _bonusPercent = newPercent;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to change the hardcap.\r\n     * Available only to the admin.\r\n     * @param newCap new hardcap value.\r\n     */\r\n    function setHardCap(uint256 newCap) external onlyAdmin {\r\n        require(newCap != 0, \u0022New parameter value is 0\u0022);\r\n\r\n        _hardcap = newCap;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to change the minimum amount (wei).\r\n     * Available only to the admin.\r\n     * @param newMinimum new minimum value (wei).\r\n     */\r\n    function setMinimum(uint256 newMinimum) external onlyAdmin {\r\n        require(newMinimum != 0, \u0022New parameter value is 0\u0022);\r\n\r\n        _minimum = newMinimum;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to change the reserve Limit (USD).\r\n     * Available only to the admin.\r\n     * @param newResLimitUSD new value (USD).\r\n     */\r\n    function setReserveLimit(uint256 newResLimitUSD) external onlyAdmin {\r\n        require(newResLimitUSD != 0, \u0022New parameter value is 0\u0022);\r\n\r\n        _reserveLimit = newResLimitUSD;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to change the reserve trigger value (tokens).\r\n     * Available only to the admin.\r\n     * @param newReserveTrigger new value (tokens).\r\n     */\r\n    function setReserveTrigger(uint256 newReserveTrigger) external onlyAdmin {\r\n        require(newReserveTrigger != 0, \u0022New parameter value is 0\u0022);\r\n\r\n        _reserveTrigger = newReserveTrigger;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to change activate whitelist state.\r\n     * Available only to the admin.\r\n     */\r\n    function switchWhitelist() external onlyAdmin {\r\n        require(state != State.Whitelist);\r\n        emit StateChanged(\u0022Whitelist\u0022);\r\n        state = State.Whitelist;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to change activate private sale state.\r\n     * Available only to the admin.\r\n     */\r\n    function switchPrivateSale() external onlyAdmin {\r\n        require(state != State.PrivateSale);\r\n        emit StateChanged(\u0022PrivateSale\u0022);\r\n        state = State.PrivateSale;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to change activate closed state.\r\n     * Available only to the admin.\r\n     */\r\n    function switchClosed() external onlyAdmin {\r\n        require(state != State.Closed);\r\n        emit StateChanged(\u0022Closed\u0022);\r\n        state = State.Closed;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to change activate usual state.\r\n     * Available only to the admin.\r\n     */\r\n    function switchUsual() external onlyAdmin {\r\n        require(state != State.Usual);\r\n        emit StateChanged(\u0022Usual\u0022);\r\n        state = State.Usual;\r\n    }\r\n\r\n    /**\r\n    * @dev Allows to any owner of the contract withdraw needed ERC20 token from this contract (promo or bounties for example).\r\n    * @param ERC20Token Address of ERC20 token.\r\n    * @param recipient Account to receive tokens.\r\n    */\r\n    function withdrawERC20(address ERC20Token, address recipient) external onlyAdmin {\r\n\r\n        uint256 amount = IBTALToken(ERC20Token).balanceOf(address(this));\r\n        require(amount \u003E 0);\r\n        IBTALToken(ERC20Token).transfer(recipient, amount);\r\n\r\n    }\r\n\r\n    /**\r\n     * @return the token being sold.\r\n     */\r\n    function token() public view returns (IBTALToken) {\r\n        return _token;\r\n    }\r\n\r\n    /**\r\n     * @return the address where funds are collected.\r\n     */\r\n    function wallet() public view returns (address payable) {\r\n        return _wallet;\r\n    }\r\n\r\n    /**\r\n     * @return the bonus address where bonuses are collected.\r\n     */\r\n    function bonusAddr() public view returns (address) {\r\n        return _bonusAddr;\r\n    }\r\n\r\n    /**\r\n     * @return the address where funds are collected.\r\n     */\r\n    function teamAddr() public view returns (address) {\r\n        return _teamAddr;\r\n    }\r\n\r\n    /**\r\n     * @return the address of exchange contract.\r\n     */\r\n    function exchange() public view returns (address payable) {\r\n        return _exchangeAddr;\r\n    }\r\n\r\n    /**\r\n     * @return the priceProvider address.\r\n     */\r\n    function priceProvider() public view returns (address) {\r\n        return _priceProvider;\r\n    }\r\n\r\n    /**\r\n     * @return the number of token units a buyer gets per wei.\r\n     */\r\n    function rate() public view returns (uint256) {\r\n        return _rate;\r\n    }\r\n\r\n    /**\r\n     * @return the price of 1 ether in USD Cents.\r\n     */\r\n    function currentETHPrice() public view returns (uint256 price) {\r\n        return(_currentETHPrice);\r\n    }\r\n\r\n    /**\r\n     * @return the the number of decimals of ETH Price.\r\n     */\r\n    function currentETHPriceDecimals() public view returns (uint256 decimals) {\r\n        return(_decimals);\r\n    }\r\n\r\n    /**\r\n     * @return bonusPercent.\r\n     */\r\n    function bonusPercent() public view returns (uint256) {\r\n        return _bonusPercent;\r\n    }\r\n\r\n    /**\r\n     * @return minimum amount of wei to invest.\r\n     */\r\n    function minimum() public view returns (uint256) {\r\n        return _minimum;\r\n    }\r\n\r\n    /**\r\n     * @return the amount of wei raised.\r\n     */\r\n    function weiRaised() public view returns (uint256) {\r\n        return _weiRaised;\r\n    }\r\n\r\n    /**\r\n     * @return the reserved amount of ETH in USD.\r\n     */\r\n    function reserved() public view returns (uint256) {\r\n        return weiToUSD(_reserved);\r\n    }\r\n\r\n    /**\r\n     * @return the reserved limit in USD.\r\n     */\r\n    function reserveLimit() public view returns (uint256) {\r\n        return _reserveLimit;\r\n    }\r\n\r\n    /**\r\n     * @return the reserved limit in USD.\r\n     */\r\n    function reserveTrigger() public view returns (uint256) {\r\n        return _reserveTrigger;\r\n    }\r\n\r\n    /**\r\n     * @return the hardcap.\r\n     */\r\n    function hardcap() public view returns (uint256) {\r\n        return _hardcap;\r\n    }\r\n\r\n    /**\r\n     * @return the ending UNIX time.\r\n     */\r\n    function endTime() public view returns (uint256) {\r\n        return _endTime;\r\n    }\r\n\r\n    /**\r\n     * @return the amount of purchased tokens.\r\n     */\r\n    function tokensPurchased() public view returns (uint256) {\r\n        return _tokensPurchased;\r\n    }\r\n\r\n    /**\r\n     * @return true if caller is owner.\r\n     */\r\n    function isOwner(address account) internal view returns (bool) {\r\n        return _token.isOwner(account);\r\n    }\r\n\r\n    /**\r\n     * @return true if caller is admin.\r\n     */\r\n    function isAdmin(address account) internal view returns (bool) {\r\n        return _token.isAdmin(account);\r\n    }\r\n\r\n    /**\r\n     * @return true if the address is a \u0441ontract.\r\n     */\r\n    function isContract(address addr) internal view returns (bool) {\r\n        uint size;\r\n        assembly { size := extcodesize(addr) }\r\n        return size \u003E 0;\r\n    }\r\n\r\n    /**\r\n     * @return true if hardcap is reached or endtime has passed.\r\n     */\r\n    function isEnded() public view returns (bool) {\r\n        return (_tokensPurchased \u003E= _hardcap || block.timestamp \u003E= _endTime);\r\n    }\r\n\r\n}","ABI":"[{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022rate\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022initialETHPrice\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022decimals\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022address payable\u0022,\u0022name\u0022:\u0022wallet\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022bonusAddr\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022teamAddr\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022address payable\u0022,\u0022name\u0022:\u0022exchange\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022contract IBTALToken\u0022,\u0022name\u0022:\u0022token\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022endTime\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022hardcap\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022init\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022recipient\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022sendTokens\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022addWhitelisted\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address[]\u0022,\u0022name\u0022:\u0022recipients\u0022,\u0022type\u0022:\u0022address[]\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022weiAmount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022sendTokensPerWeiToList\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022bonusAddr\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022removeEnlisted\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022reserveLimit\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022removeWhitelisted\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022rate\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address[]\u0022,\u0022name\u0022:\u0022accounts\u0022,\u0022type\u0022:\u0022address[]\u0022}],\u0022name\u0022:\u0022addListToWhitelisted\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022endTime\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022newMinimum\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022setMinimum\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022newRate\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022setRate\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022reserveTrigger\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022isWhitelisted\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022weiRaised\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address[]\u0022,\u0022name\u0022:\u0022accounts\u0022,\u0022type\u0022:\u0022address[]\u0022}],\u0022name\u0022:\u0022removeListEnlisted\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022teamAddr\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022wallet\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022address payable\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022minimum\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address[]\u0022,\u0022name\u0022:\u0022accounts\u0022,\u0022type\u0022:\u0022address[]\u0022}],\u0022name\u0022:\u0022removeListWhitelisted\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022newPercent\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022setBonusPercent\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022newBonusAddr\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022setBonusAddr\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022newResLimitUSD\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022setReserveLimit\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022recipient\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022weiAmount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022sendTokensPerWei\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022switchWhitelist\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address payable\u0022,\u0022name\u0022:\u0022newExchange\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022setExchangeAddr\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022newDecimals\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022setDecimals\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022finishSale\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022ERC20Token\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022recipient\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022withdrawERC20\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022addEnlisted\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022switchUsual\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022isEnded\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address[]\u0022,\u0022name\u0022:\u0022accounts\u0022,\u0022type\u0022:\u0022address[]\u0022}],\u0022name\u0022:\u0022addListToEnlisted\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022hardcap\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022priceProvider\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022newPrice\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022setETHPrice\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022switchPrivateSale\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022bonusPercent\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022state\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022enum Crowdsale.State\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint8\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address payable\u0022,\u0022name\u0022:\u0022newTeamAddr\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022setTeamAddr\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022tokensPurchased\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022newTime\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022setEndTime\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022newCap\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022setHardCap\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022switchClosed\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022exchange\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022address payable\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address[]\u0022,\u0022name\u0022:\u0022recipients\u0022,\u0022type\u0022:\u0022address[]\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022sendTokensToList\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022isEnlisted\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022currentETHPriceDecimals\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022decimals\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address payable\u0022,\u0022name\u0022:\u0022newWallet\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022setWallet\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022provider\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022setEthPriceProvider\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022newReserveTrigger\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022setReserveTrigger\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022currentETHPrice\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022price\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022beneficiary\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022buyTokens\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:true,\u0022stateMutability\u0022:\u0022payable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022token\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022contract IBTALToken\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022reserved\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022constructor\u0022},{\u0022payable\u0022:true,\u0022stateMutability\u0022:\u0022payable\u0022,\u0022type\u0022:\u0022fallback\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022purchaser\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022beneficiary\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022TokensPurchased\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022sender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022beneficiary\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022TokensSent\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022oldValue\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022newValue\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022decimals\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022NewETHPrice\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022recipient\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022weiAmount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022usdAmount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022Payout\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022beneficiary\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022BonusPayed\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022isActive\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022name\u0022:\u0022ReserveState\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022string\u0022,\u0022name\u0022:\u0022currentState\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022name\u0022:\u0022StateChanged\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022EnlistedAdded\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022EnlistedRemoved\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022WhitelistedAdded\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022WhitelistedRemoved\u0022,\u0022type\u0022:\u0022event\u0022}]","ContractName":"Crowdsale","CompilerVersion":"v0.5.11\u002Bcommit.c082d0b4","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://e444302cd36b9e9b3cbd2c0c59d6631413a2c2558904ef315e6f0e7b2f780a88"}]