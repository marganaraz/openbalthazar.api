[{"SourceCode":"pragma solidity 0.5.2;\r\n\r\n/***************\r\n**            **\r\n** INTERFACES **\r\n**            **\r\n***************/\r\n\r\n/**\r\n * @dev Interface of OpenZeppelin\u0027s ERC20; For definitions / documentation, see below.\r\n */\r\ninterface IERC20 {\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function totalSupply() external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity\u0027s arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * \u0060SafeMath\u0060 restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it\u0027s recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060\u002B\u0060 operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a \u002B b;\r\n        require(c \u003E= a, \u0022SafeMath: addition overflow\u0022);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060-\u0060 operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \u0022SafeMath: subtraction overflow\u0022);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060-\u0060 operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b \u003C= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060*\u0060 operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\r\n        // benefit is lost if \u0027b\u0027 is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \u0022SafeMath: multiplication overflow\u0022);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060/\u0060 operator. Note: this function uses a\r\n     * \u0060revert\u0060 opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \u0022SafeMath: division by zero\u0022);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060/\u0060 operator. Note: this function uses a\r\n     * \u0060revert\u0060 opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b \u003E 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c \u002B a % b); // There is no case in which this doesn\u0027t hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060%\u0060 operator. This function uses a \u0060revert\u0060\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \u0022SafeMath: modulo by zero\u0022);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060%\u0060 operator. This function uses a \u0060revert\u0060\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @title   Lock Drop Contract\r\n *\r\n * @dev     This contract implements a Kong Lock Drop.\r\n *\r\n *          Notes (check online sources for further details):\r\n *\r\n *          - \u0060stakeETH()\u0060 can be called to participate in the lock drop by staking ETH. Individual\r\n *          stakes are immediately sent to separate instances of \u0060LockETH\u0060 contracts that only the\r\n *          staker has access to.\r\n *\r\n *          - \u0060claimKong()\u0060 can be called to claim Kong once the staking period is over.\r\n *\r\n *          - The contract is open for contributions for 30 days after its deployment.\r\n */\r\ncontract LockDrop {\r\n    using SafeMath for uint256;\r\n\r\n    // Timestamp for the end of staking.\r\n    uint256 public _stakingEnd;\r\n\r\n    // Sum of all contribution weights.\r\n    uint256 public _weightsSum;\r\n\r\n    // Address of the KONG ERC20 contract.\r\n    address public _kongERC20Address;\r\n\r\n    // Mapping from contributors to contribution weights.\r\n    mapping(address =\u003E uint256) public _weights;\r\n\r\n    // Mapping from contributors to locking period ends.\r\n    mapping(address =\u003E uint256) public _lockingEnds;\r\n\r\n    // Events for staking and claiming.\r\n    event Staked(\r\n        address indexed contributor,\r\n        address lockETHAddress,\r\n        uint256 ethStaked,\r\n        uint256 endDate\r\n    );\r\n    event Claimed(\r\n        address indexed claimant,\r\n        uint256 ethStaked,\r\n        uint256 kongClaim\r\n    );\r\n\r\n    constructor (address kongERC20Address) public {\r\n\r\n        // Set the address of the ERC20 token.\r\n        _kongERC20Address = kongERC20Address;\r\n\r\n        // Set the end of the staking period to 30 days after deployment.\r\n        _stakingEnd = block.timestamp \u002B 30 days;\r\n\r\n    }\r\n\r\n    /**\r\n     * @dev Function to stake ETH in this lock drop.\r\n     *\r\n     *      When called with positive \u0060msg.value\u0060 and valid \u0060stakingPeriod\u0060, deploys instance of\r\n     *      \u0060LockETH\u0060 contract and transfers \u0060msg.value\u0060 to it. Each \u0060LockETH\u0060 contract is only\r\n     *      accessible to the address that called \u0060stakeETH()\u0060 to deploy the respective instance.\r\n     *\r\n     *      For valid stakes, calculates the variable \u0060weight\u0060 as the product of total lockup time\r\n     *      and \u0060msg.value\u0060. Stores \u0060weight\u0060 in \u0060_weights[msg.sender]\u0060 and adds it to \u0060_weightsSum\u0060.\r\n     *\r\n     *      Expects \u0060block.timestamp\u0060 to be smaller than \u0060_stakingEnd\u0060. Does not allow for topping\r\n     *      up of existing stakes. Restricts staking period to be between 90 and 365.\r\n     *\r\n     *      Emits \u0060Staked\u0060 event.\r\n     */\r\n    function stakeETH(uint256 stakingPeriod) public payable {\r\n\r\n        // Require positive msg.value.\r\n        require(msg.value \u003E 0, \u0027Msg value = 0.\u0027);\r\n\r\n        // No topping up.\r\n        require(_weights[msg.sender] == 0, \u0027No topping up.\u0027);\r\n\r\n        // No contributions after _stakingEnd.\r\n        require(block.timestamp \u003C= _stakingEnd, \u0027Closed for contributions.\u0027);\r\n\r\n        // Ensure the staking period is valid.\r\n        require(stakingPeriod \u003E= 30 \u0026\u0026 stakingPeriod \u003C= 365, \u0027Staking period outside of allowed range.\u0027);\r\n\r\n        // Calculate contribution weight as product of msg.value and total time the ETH is locked.\r\n        uint256 totalTime = _stakingEnd \u002B stakingPeriod * 1 days - block.timestamp;\r\n        uint256 weight = totalTime.mul(msg.value);\r\n\r\n        // Adjust contribution weights.\r\n        _weightsSum = _weightsSum.add(weight);\r\n        _weights[msg.sender] = weight;\r\n\r\n        // Set end date for lock.\r\n        _lockingEnds[msg.sender] = _stakingEnd \u002B stakingPeriod * 1 days;\r\n\r\n        // Deploy new lock contract.\r\n        LockETH lockETH = (new LockETH).value(msg.value)(_lockingEnds[msg.sender], msg.sender);\r\n\r\n        // Abort if the new contract\u0027s balance is lower than expected.\r\n        require(address(lockETH).balance \u003E= msg.value);\r\n\r\n        // Emit event.\r\n        emit Staked(msg.sender, address(lockETH), msg.value, _lockingEnds[msg.sender]);\r\n\r\n    }\r\n\r\n    /**\r\n     * @dev Function to claim Kong.\r\n     *\r\n     *      Determines the ratio of the contribution by \u0060msg.sender\u0060 to all contributions. Sends\r\n     *      the product of this ratio and the contract\u0027s Kong balance to \u0060msg.sender\u0060. Sets the\r\n     *      contribution of \u0060msg.sender\u0060 to zero afterwards and subtracts it from the sum of all\r\n     *      contributions.\r\n     *\r\n     *      Expects \u0060block.timestamp\u0060 to be larger than \u0060_lockingEnds[msg.sender]\u0060. Throws if\r\n     *      \u0060_weights[msg.sender]\u0060 is zero. Emits \u0060Claimed\u0060 event.\r\n     *\r\n     *      NOTE: Overflow protection in calculation of \u0060kongClaim\u0060 prevents anyone staking massive\r\n     *      amounts from ever claiming. Fine as long as product of weight and the contract\u0027s Kong\r\n     *      balance is at most (2^256)-1.\r\n     */\r\n    function claimKong() external {\r\n\r\n        // Verify that this \u0060msg.sender\u0060 has contributed.\r\n        require(_weights[msg.sender] \u003E 0, \u0027Zero contribution.\u0027);\r\n\r\n        // Verify that this \u0060msg.sender\u0060 can claim.\r\n        require(block.timestamp \u003E _lockingEnds[msg.sender], \u0027Cannot claim yet.\u0027);\r\n\r\n        // Calculate amount to return.\r\n        uint256 weight = _weights[msg.sender];\r\n        uint256 kongClaim = IERC20(_kongERC20Address).balanceOf(address(this)).mul(weight).div(_weightsSum);\r\n\r\n        // Adjust stake and sum of stakes.\r\n        _weights[msg.sender] = 0;\r\n        _weightsSum = _weightsSum.sub(weight);\r\n\r\n        // Send kong to \u0060msg.sender\u0060.\r\n        IERC20(_kongERC20Address).transfer(msg.sender, kongClaim);\r\n\r\n        // Emit event.\r\n        emit Claimed(msg.sender, weight, kongClaim);\r\n\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title   LockETH contract.\r\n *\r\n * @dev     Escrows ETH until \u0060_endOfLockUp\u0060. Calling \u0060unlockETH()\u0060 after \u0060_endOfLockUp\u0060 sends ETH\r\n *          to \u0060_contractOwner\u0060.\r\n */\r\ncontract LockETH {\r\n\r\n    uint256 public _endOfLockUp;\r\n    address payable public _contractOwner;\r\n\r\n    constructor (uint256 endOfLockUp, address payable contractOwner) public payable {\r\n\r\n        _endOfLockUp = endOfLockUp;\r\n        _contractOwner = contractOwner;\r\n\r\n    }\r\n\r\n    /**\r\n     * @dev Send ETH owned by this contract to \u0060_contractOwner\u0060. Can be called by anyone but\r\n     *      requires \u0060block.timestamp\u0060 \u003E \u0060endOfLockUp\u0060.\r\n     */\r\n    function unlockETH() external {\r\n\r\n        // Verify end of lock-up period.\r\n        require(block.timestamp \u003E _endOfLockUp, \u0027Cannot claim yet.\u0027);\r\n\r\n        // Send ETH balance to \u0060_contractOwner\u0060.\r\n        _contractOwner.transfer(address(this).balance);\r\n\r\n    }\r\n\r\n}","ABI":"[{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022_kongERC20Address\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022_lockingEnds\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022_weights\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022stakingPeriod\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022stakeETH\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:true,\u0022stateMutability\u0022:\u0022payable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022claimKong\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022_weightsSum\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022_stakingEnd\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[{\u0022name\u0022:\u0022kongERC20Address\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022constructor\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022contributor\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022lockETHAddress\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022ethStaked\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022endDate\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022Staked\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022claimant\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022ethStaked\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022kongClaim\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022Claimed\u0022,\u0022type\u0022:\u0022event\u0022}]","ContractName":"LockDrop","CompilerVersion":"v0.5.2\u002Bcommit.1df8f40c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000177f2ace25f81fc50f9f6e9193adf5ac758e8098","Library":"","SwarmSource":"bzzr://065c0e37c8ebcbc3978169570a35fd9ba94dd863f36a5b0c68261870c12022bc"}]