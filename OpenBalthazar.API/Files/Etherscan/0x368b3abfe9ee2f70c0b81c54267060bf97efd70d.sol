[{"SourceCode":"{\u0022EGToken.sol\u0022:{\u0022content\u0022:\u0022pragma solidity ^0.5.0;\\n\\nimport \\\u0022./ERC20.sol\\\u0022;\\nimport \\\u0022../SafeMath.sol\\\u0022;\\nimport \\\u0022./ERC223ReceivingContract.sol\\\u0022;\\n\\n\\ncontract EGToken is ERC20 {\\n    string public constant _name = \\\u0022EGT\\\u0022;\\n\\n    string public constant _symbol = \\\u0022g\\\u0022;\\n\\n    uint8 public constant _decimal = 12;\\n\\n    address private _superAdmin;\\n\\n    address private _egNetwork;\\n\\n    address private _blacklistController;\\n\\n    mapping(address =\\u003e bool) private _blacklist;\\n\\n    bool public _initialized = false;\\n\\n\\n\\n    function initialize(address superAdmin, address blacklist) public {\\n        require(!_initialized);\\n        _superAdmin = superAdmin;\\n        _blacklistController = blacklist;\\n        _initialized = true;\\n    }\\n\\n\\n\\n    /**\\n    *@event\\n    */\\n    event NewSuperAdmin(address indexed account);\\n\\n    event NewEGNetwork(address indexed EGNetwork);\\n\\n    event NewBlackListController(address indexed BlackListController);\\n\\n    event BlacklistAddress(address indexed blacklistAccount);\\n\\n    event DeBlacklistAddress(address indexed unblacklistAccount);\\n\\n    event BurnBlacklistToken(address indexed blacklistAddress, uint256 burnAmount);\\n\\n\\n\\n    /**\\n    *@modifier\\n    */\\n\\n    modifier onlySuperAdmin() {\\n        require(msg.sender == _superAdmin, \\\u0022Sender is not a super secrete admin\\\u0022);\\n        _;\\n    }\\n\\n    modifier onlyBlackListController(){\\n        require(msg.sender == _blacklistController, \\\u0022Sender is not a blacklist controller\\\u0022);\\n        _;\\n    }\\n\\n    modifier onlyEGNetwork() {\\n        require(msg.sender == _egNetwork, \\\u0022Sender is not a EG network\\\u0022);\\n        _;\\n    }\\n\\n    modifier onlyNotBlacklist(address account) {\\n        require(! isBlacklist(account), \\\u0022Account is in the blacklist\\\u0022);\\n        _;\\n    }\\n\\n\\n    /**\\n    *@dev check whether it\\u0027s a blacklist account\\n    *@params address - account\\n    */\\n    function isBlacklist(address account) public view returns(bool) {\\n        return _blacklist[account];\\n    }\\n\\n\\n    function superAdmin() public view returns (address) {\\n        return _superAdmin;\\n    }\\n\\n\\n    function updateSuperAdmin(address newSuperAdmin) public onlySuperAdmin {\\n        _superAdmin = newSuperAdmin;\\n        emit NewSuperAdmin(_superAdmin);\\n    }\\n\\n\\n    function getEGNetwork() public view returns (address) {\\n        return _egNetwork;\\n    }\\n\\n    function updateEGNetwork(address newEGNetwork) public onlySuperAdmin {\\n        _egNetwork = newEGNetwork;\\n        emit NewEGNetwork(newEGNetwork);\\n    }\\n\\n\\n    function blacklistController() public view returns (address) {\\n        return address(_blacklistController);\\n    }\\n\\n    /**\\n    *@dev to update the blackListController and only BlacklistController can update it\\n    *@param blackListController address\\n    */\\n    function updateBlacklist(address blackListController) public onlyBlackListController {\\n        _blacklistController = blackListController;\\n        emit NewBlackListController(blackListController);\\n    }\\n\\n\\n\\n    /**\\n    *@dev add an account into the blacklist and only EG network can add it\\n    *       in the EG network contract, only operation admin can add it\\n    *@params address - account\\n    */\\n    function blacklistAddress(address account) public onlyEGNetwork {\\n        require(! isBlacklist(account),\\\u0022Account is already in a blacklist\\\u0022);\\n        _blacklist[account] = true;\\n        emit BlacklistAddress(account);\\n    }\\n\\n    /**\\n    *@dev only BlacklistController is able to deblacklist account\\n    *@param address - unblacklist account\\n    */\\n    function deBlacklistAddress(address account) public onlyBlackListController {\\n        require(isBlacklist(account),\\\u0022Account is not in a blacklist\\\u0022);\\n        _blacklist[account] = false;\\n        emit DeBlacklistAddress(account);\\n    }\\n\\n    /**\\n    *@dev    ERC223 features https://github.com/Dexaran/ERC223-token-standard\\n    *       only unblacklist account and recipient can transfer or receive token\\n    *        Invokes the \\\u0022tokenFallback\\u0027 function if the recipient is a contract.\\n    *           The token transfer fails if the recipient is a contract but does not implement the \\\u0022tokenFallback\\\u0022 function\\n    *           or the fallback function to receive fund.\\n    *@params    address of recipient and amount\\n    */\\n    function transfer(address recipient, uint256 amount)\\n    public\\n    onlyNotBlacklist(msg.sender)\\n    onlyNotBlacklist(recipient)\\n    returns (bool) {\\n        uint codeLength;\\n        bytes memory empty;\\n\\n        assembly {\\n            // Retrieve the size of the code on target address, this needs assembly\\n            codeLength := extcodesize(recipient)\\n        }\\n\\n        super.transfer(recipient, amount);\\n\\n        if(codeLength \\u003e 0) {\\n            ERC223ReceivingContract receiver = ERC223ReceivingContract(recipient);\\n            receiver.tokenFallback(msg.sender, amount, empty);\\n        }\\n\\n        return true;\\n    }\\n\\n\\n    /**\\n    *@dev   only unblacklist account and recipient can transfer and  receive token\\n    *@params    address of sender, recipient, amount\\n    */\\n    function transferFrom(address sender, address recipient, uint256 amount)\\n    public\\n    onlyNotBlacklist(sender)\\n    onlyNotBlacklist(recipient)\\n    returns (bool) {\\n        return super.transferFrom(sender, recipient,amount);\\n    }\\n\\n    /**\\n    *@dev onlyNotBlacklist can approve for other doing transfer\\n    *@params address spender, amount\\n    */\\n    function approve(address spender, uint256 value) public onlyNotBlacklist(spender) returns (bool) {\\n        return super.approve(spender, value);\\n    }\\n\\n\\n    /**\\n    *@dev onlyNotBlacklist can increase allowances\\n    *@params address spender, addedValue\\n    */\\n    function increaseAllowance(address spender, uint256 addedValue) public onlyNotBlacklist(spender) returns (bool) {\\n        return super.increaseAllowance(spender, addedValue);\\n    }\\n\\n    /**\\n    *@dev onlyNotBlacklist can decrease allowances\\n    *@params address spender, subtractedValue\\n    */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public onlyNotBlacklist(spender) returns (bool) {\\n        return super.decreaseAllowance(spender, subtractedValue);\\n    }\\n\\n\\n    /**\\n    * @dev any can destroy token, even the blacklist guys.\\n    *\\n    * See \u0060ERC20._burn\u0060.\\n    */\\n    function burn(uint256 amount) public {\\n        _burn(msg.sender, amount);\\n    }\\n\\n    /**\\n     * @dev See \u0060ERC20._burnFrom\u0060.\\n     */\\n    function burnFrom(address account, uint256 amount) public {\\n        _burnFrom(account, amount);\\n    }\\n\\n\\n    /**\\n    *@dev only blacklist controller is able to burn the blacklist token\\n    *@param blacklist address\\n    *@param amount of EG token will be burnt from the blacklist\\n    */\\n    function burnBlacklistToken(address blacklistAccount, uint256 burnAmount) public onlyBlackListController {\\n        require(isBlacklist(blacklistAccount),\\\u0022Account is not in blacklist\\\u0022);\\n        require(burnAmount \\u003c= balanceOf(blacklistAccount),\\\u0022Burn amount is over the black balance\\\u0022);\\n        _burn(blacklistAccount, burnAmount);\\n        emit BurnBlacklistToken(blacklistAccount, burnAmount);\\n    }\\n\\n\\n\\n    /**\\n    *@dev only EGT generator listed on EGT network is able to minted token\\n    *     implete ERC223 features for minted wallet who has the features ERC223\\n    *@params targeted account received token - usually a multi-sign wallet\\n    *@param amount of EG token is minted\\n    */\\n    function mint(address account, uint256 amount) public onlyEGNetwork returns (bool) {\\n        uint codeLength;\\n        // add empty data to backwards compatibility with ERC20\\n        bytes memory empty;\\n\\n        assembly {\\n            // Retrieve the size of the code on target address, this needs assembly\\n            codeLength := extcodesize(account)\\n        }\\n\\n        _mint(account, amount);\\n\\n        if(codeLength \\u003e 0) {\\n            ERC223ReceivingContract receiver = ERC223ReceivingContract(account);\\n            receiver.tokenFallback(msg.sender, amount, empty);\\n        }\\n\\n        return true;\\n    }\\n\\n\\n}\\n\u0022},\u0022ERC20.sol\u0022:{\u0022content\u0022:\u0022pragma solidity ^0.5.0;\\n\\nimport \\\u0022./IERC20.sol\\\u0022;\\nimport \\\u0022../SafeMath.sol\\\u0022;\\n\\n/**\\n * @dev Implementation of the \u0060IERC20\u0060 interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using \u0060_mint\u0060.\\n * For a generic mechanism see \u0060ERC20Mintable\u0060.\\n *\\n * *For a detailed writeup see our guide [How to implement supply\\n * mechanisms](https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226).*\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning \u0060false\u0060 on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an \u0060Approval\u0060 event is emitted on calls to \u0060transferFrom\u0060.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn\\u0027t required by the specification.\\n *\\n * Finally, the non-standard \u0060decreaseAllowance\u0060 and \u0060increaseAllowance\u0060\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See \u0060IERC20.approve\u0060.\\n */\\ncontract ERC20 is IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address =\\u003e uint256) private _balances;\\n\\n    mapping (address =\\u003e mapping (address =\\u003e uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    /**\\n     * @dev See \u0060IERC20.totalSupply\u0060.\\n     */\\n    function totalSupply() public view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See \u0060IERC20.balanceOf\u0060.\\n     */\\n    function balanceOf(address account) public view returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See \u0060IERC20.transfer\u0060.\\n     *\\n     * Requirements:\\n     *\\n     * - \u0060recipient\u0060 cannot be the zero address.\\n     * - the caller must have a balance of at least \u0060amount\u0060.\\n     */\\n    function transfer(address recipient, uint256 amount) public returns (bool) {\\n        _transfer(msg.sender, recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See \u0060IERC20.allowance\u0060.\\n     */\\n    function allowance(address owner, address spender) public view returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See \u0060IERC20.approve\u0060.\\n     *\\n     * Requirements:\\n     *\\n     * - \u0060spender\u0060 cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public returns (bool) {\\n        _approve(msg.sender, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See \u0060IERC20.transferFrom\u0060.\\n     *\\n     * Emits an \u0060Approval\u0060 event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of \u0060ERC20\u0060;\\n     *\\n     * Requirements:\\n     * - \u0060sender\u0060 and \u0060recipient\u0060 cannot be the zero address.\\n     * - \u0060sender\u0060 must have a balance of at least \u0060value\u0060.\\n     * - the caller must have allowance for \u0060sender\u0060\\u0027s tokens of at least\\n     * \u0060amount\u0060.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to \u0060spender\u0060 by the caller.\\n     *\\n     * This is an alternative to \u0060approve\u0060 that can be used as a mitigation for\\n     * problems described in \u0060IERC20.approve\u0060.\\n     *\\n     * Emits an \u0060Approval\u0060 event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - \u0060spender\u0060 cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to \u0060spender\u0060 by the caller.\\n     *\\n     * This is an alternative to \u0060approve\u0060 that can be used as a mitigation for\\n     * problems described in \u0060IERC20.approve\u0060.\\n     *\\n     * Emits an \u0060Approval\u0060 event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - \u0060spender\u0060 cannot be the zero address.\\n     * - \u0060spender\u0060 must have allowance for the caller of at least\\n     * \u0060subtractedValue\u0060.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens \u0060amount\u0060 from \u0060sender\u0060 to \u0060recipient\u0060.\\n     *\\n     * This is internal function is equivalent to \u0060transfer\u0060, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a \u0060Transfer\u0060 event.\\n     *\\n     * Requirements:\\n     *\\n     * - \u0060sender\u0060 cannot be the zero address.\\n     * - \u0060recipient\u0060 cannot be the zero address.\\n     * - \u0060sender\u0060 must have a balance of at least \u0060amount\u0060.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal {\\n        require(sender != address(0), \\\u0022ERC20: transfer from the zero address\\\u0022);\\n        require(recipient != address(0), \\\u0022ERC20: transfer to the zero address\\\u0022);\\n\\n        _balances[sender] = _balances[sender].sub(amount);\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates \u0060amount\u0060 tokens and assigns them to \u0060account\u0060, increasing\\n     * the total supply.\\n     *\\n     * Emits a \u0060Transfer\u0060 event with \u0060from\u0060 set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - \u0060to\u0060 cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal {\\n        require(account != address(0), \\\u0022ERC20: mint to the zero address\\\u0022);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n     /**\\n     * @dev Destoys \u0060amount\u0060 tokens from \u0060account\u0060, reducing the\\n     * total supply.\\n     *\\n     * Emits a \u0060Transfer\u0060 event with \u0060to\u0060 set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - \u0060account\u0060 cannot be the zero address.\\n     * - \u0060account\u0060 must have at least \u0060amount\u0060 tokens.\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        require(account != address(0), \\\u0022ERC20: burn from the zero address\\\u0022);\\n\\n        _totalSupply = _totalSupply.sub(value);\\n        _balances[account] = _balances[account].sub(value);\\n        emit Transfer(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets \u0060amount\u0060 as the allowance of \u0060spender\u0060 over the \u0060owner\u0060s tokens.\\n     *\\n     * This is internal function is equivalent to \u0060approve\u0060, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an \u0060Approval\u0060 event.\\n     *\\n     * Requirements:\\n     *\\n     * - \u0060owner\u0060 cannot be the zero address.\\n     * - \u0060spender\u0060 cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        require(owner != address(0), \\\u0022ERC20: approve from the zero address\\\u0022);\\n        require(spender != address(0), \\\u0022ERC20: approve to the zero address\\\u0022);\\n\\n        _allowances[owner][spender] = value;\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    /**\\n     * @dev Destoys \u0060amount\u0060 tokens from \u0060account\u0060.\u0060amount\u0060 is then deducted\\n     * from the caller\\u0027s allowance.\\n     *\\n     * See \u0060_burn\u0060 and \u0060_approve\u0060.\\n     */\\n    function _burnFrom(address account, uint256 amount) internal {\\n        _burn(account, amount);\\n        _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount));\\n    }\\n}\\n\u0022},\u0022ERC223FullReceivingContract.sol\u0022:{\u0022content\u0022:\u0022pragma solidity ^0.5.0;\\n\\n/**\\n*@dev Contract that is working with ERC223 tokens\\n*/\\ncontract ERC223FullReceivingContract {\\n    struct TKN {\\n        address sender;\\n        uint value;\\n        bytes data;\\n        bytes4 sig;\\n    }\\n\\n\\n    function tokenFallback(address _from, uint _value, bytes memory _data) public pure {\\n        TKN memory tkn;\\n        tkn.sender = _from;\\n        tkn.value = _value;\\n        tkn.data = _data;\\n       // uint32 u = uint32(_data[3]) \u002B (uint32(_data[2]) \\u003c\\u003c 8) \u002B (uint32(_data[1]) \\u003c\\u003c 16) \u002B (uint32(_data[0]) \\u003c\\u003c 24);\\n       // tkn.sig = bytes4(u);\\n\\n        /* tkn variable is analogue of msg variable of Ether transaction\\n        *  tkn.sender is person who initiated this token transaction   (analogue of msg.sender)\\n        *  tkn.value the number of tokens that were sent   (analogue of msg.value)\\n        *  tkn.data is data of token transaction   (analogue of msg.data)\\n        *  tkn.sig is 4 bytes signature of function\\n        *  if data of token transaction is a function execution\\n        */\\n    }\\n}\\n\u0022},\u0022ERC223ReceivingContract.sol\u0022:{\u0022content\u0022:\u0022pragma solidity ^0.5.0;\\n\\n/**\\n*@title Contract that will work with ERC223 tokens\\n*/\\ncontract ERC223ReceivingContract {\\n\\n    /**\\n    *@dev Standard ERC223 function that will handle incoming token transfers\\n    *\\n    *@param from Token sender address\\n    *@param value Amount of tokens\\n    *@param data    Transaction metadata.\\n    */\\n    function tokenFallback(address from, uint value, bytes memory data) public;\\n}\\n\u0022},\u0022IEGToken.sol\u0022:{\u0022content\u0022:\u0022pragma solidity ^0.5.0;\\n\\ninterface IEGToken {\\n\\n    function mint(address account, uint256 amount) external returns (bool);\\n\\n    function deBlacklistAddress(address account) external;\\n\\n    function burnBlacklistToken(address blacklistAddress, uint256 burnAmount) external;\\n\\n    function updateSuperAdmin(address newSuperAdmin) external;\\n\\n    function burn(uint256 amount) external;\\n\\n    function balanceOf(address account) external returns(uint256);\\n\\n\\n}\\n\u0022},\u0022IERC20.sol\u0022:{\u0022content\u0022:\u0022pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see \u0060ERC20Detailed\u0060.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by \u0060account\u0060.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves \u0060amount\u0060 tokens from the caller\\u0027s account to \u0060recipient\u0060.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a \u0060Transfer\u0060 event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that \u0060spender\u0060 will be\\n     * allowed to spend on behalf of \u0060owner\u0060 through \u0060transferFrom\u0060. This is\\n     * zero by default.\\n     *\\n     * This value changes when \u0060approve\u0060 or \u0060transferFrom\u0060 are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets \u0060amount\u0060 as the allowance of \u0060spender\u0060 over the caller\\u0027s tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * \\u003e Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an \u0060Approval\u0060 event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves \u0060amount\u0060 tokens from \u0060sender\u0060 to \u0060recipient\u0060 using the\\n     * allowance mechanism. \u0060amount\u0060 is then deducted from the caller\\u0027s\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a \u0060Transfer\u0060 event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when \u0060value\u0060 tokens are moved from one account (\u0060from\u0060) to\\n     * another (\u0060to\u0060).\\n     *\\n     * Note that \u0060value\u0060 may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a \u0060spender\u0060 for an \u0060owner\u0060 is set by\\n     * a call to \u0060approve\u0060. \u0060value\u0060 is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\u0022},\u0022Math.sol\u0022:{\u0022content\u0022:\u0022pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a \\u003e= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a \\u003c b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a \u002B b) / 2 can overflow, so we distribute\\n        return (a / 2) \u002B (b / 2) \u002B ((a % 2 \u002B b % 2) / 2);\\n    }\\n}\\n\u0022},\u0022SafeMath.sol\u0022:{\u0022content\u0022:\u0022pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * \u0060SafeMath\u0060 restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it\\u0027s recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s \u0060\u002B\u0060 operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a \u002B b;\\n        require(c \\u003e= a, \\\u0022SafeMath: addition overflow\\\u0022);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s \u0060-\u0060 operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b \\u003c= a, \\\u0022SafeMath: subtraction overflow\\\u0022);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s \u0060*\u0060 operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\u0022SafeMath: multiplication overflow\\\u0022);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s \u0060/\u0060 operator. Note: this function uses a\\n     * \u0060revert\u0060 opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b \\u003e 0, \\\u0022SafeMath: division by zero\\\u0022);\\n        uint256 c = a / b;\\n        // assert(a == b * c \u002B a % b); // There is no case in which this doesn\\u0027t hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s \u0060%\u0060 operator. This function uses a \u0060revert\u0060\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, \\\u0022SafeMath: modulo by zero\\\u0022);\\n        return a % b;\\n    }\\n}\\n\u0022}}","ABI":"[{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022owner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022spender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022Approval\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022blacklistAccount\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022BlacklistAddress\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022blacklistAddress\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022burnAmount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022BurnBlacklistToken\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022unblacklistAccount\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022DeBlacklistAddress\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022BlackListController\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022NewBlackListController\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022EGNetwork\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022NewEGNetwork\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022NewSuperAdmin\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022from\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022Transfer\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022_decimal\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint8\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint8\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022_initialized\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022_name\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022string\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022_symbol\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022string\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022owner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022spender\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022allowance\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022spender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022approve\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022balanceOf\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022blacklistAddress\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022blacklistController\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022burn\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022blacklistAccount\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022burnAmount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022burnBlacklistToken\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022burnFrom\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022deBlacklistAddress\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022spender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022subtractedValue\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022decreaseAllowance\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022getEGNetwork\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022spender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022addedValue\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022increaseAllowance\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022superAdmin\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022blacklist\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022initialize\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022isBlacklist\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022mint\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022superAdmin\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022totalSupply\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022recipient\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022transfer\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022sender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022recipient\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022transferFrom\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022blackListController\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022updateBlacklist\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022newEGNetwork\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022updateEGNetwork\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022newSuperAdmin\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022updateSuperAdmin\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022}]","ContractName":"EGToken","CompilerVersion":"v0.5.16\u002Bcommit.9c3226ce","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://031c6f93ffb2ebd18a95218e08ede4813416225f68ccc2da720c9e4c8b03d607"}]