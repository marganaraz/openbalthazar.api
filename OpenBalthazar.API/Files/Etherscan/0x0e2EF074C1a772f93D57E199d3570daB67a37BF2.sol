[{"SourceCode":"pragma solidity ^0.4.23;\r\n/*\r\n *             \u2554\u2550\u2557\u250C\u2500\u2510\u250C\u2500\u2510\u252C\u250C\u2500\u2510\u252C\u250C\u2500\u2510\u252C   \u250C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2566 \u2566\u250C\u2500\u2510\u250C\u2510 \u2554\u2550\u2557\u252C\u250C\u252C\u2510\u250C\u2500\u2510\r\n *             \u2551 \u2551\u251C\u2524 \u251C\u2524 \u2502\u2502  \u2502\u251C\u2500\u2524\u2502   \u2502 KOL Community Alliance  \u2502 \u2551\u2551\u2551\u251C\u2524 \u251C\u2534\u2510\u255A\u2550\u2557\u2502 \u2502 \u251C\u2524\r\n *             \u255A\u2550\u255D\u2514  \u2514  \u2534\u2514\u2500\u2518\u2534\u2534 \u2534\u2534\u2500\u2518 \u2514\u2500\u252C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252C\u2500\u2518 \u255A\u2569\u255D\u2514\u2500\u2518\u2514\u2500\u2518\u255A\u2550\u255D\u2534 \u2534 \u2514\u2500\u2518\r\n *   \u250C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n *   \u2502    \u250C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502\r\n *   \u2514\u2500\u2500\u2500\u2500\u2524 Dev:Jack Koe \u251C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 Special for: KOL  \u251C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 20200106   \u251C\u2500\u2500\u2518\r\n *        \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n */\r\n\r\nlibrary SafeMath {\r\n\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n    c = _a * _b;\r\n    assert(c / _a == _b);\r\n    return c;\r\n  }\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    return _a / _b;\r\n  }\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    assert(_b \u003C= _a);\r\n    return _a - _b;\r\n  }\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    c = _a \u002B _b;\r\n    assert(c \u003E= _a);\r\n    return c;\r\n  }\r\n}\r\n\r\ncontract Ownable {\r\n\r\n  address public owner;\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\ncontract ERC20Basic {\r\n  function balanceOf(address _who) public view returns (uint256);\r\n  function transfer(address _to, uint256 _value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address _owner, address _spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value)\r\n    public returns (bool);\r\n\r\n  function approve(address _spender, uint256 _value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\ncontract BasicToken is Ownable,ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address =\u003E uint256) internal balances;\r\n\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n    require(msg.sender != owner);\r\n    require(_value \u003C= balances[msg.sender]);\r\n    require(_to != address(0));\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    emit Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    return balances[_owner];\r\n  }\r\n}\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address =\u003E mapping (address =\u003E uint256)) internal allowed;\r\n\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(_from != owner);\r\n    require(_value \u003C= balances[_from]);\r\n    require(_value \u003C= allowed[_from][msg.sender]);\r\n    require(_to != address(0));\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n  function allowance(\r\n    address _owner,\r\n    address _spender\r\n   )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  function increaseApproval(\r\n    address _spender,\r\n    uint256 _addedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    allowed[msg.sender][_spender] = (\r\n      allowed[msg.sender][_spender].add(_addedValue));\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  function decreaseApproval(\r\n    address _spender,\r\n    uint256 _subtractedValue\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    uint256 oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue \u003E= oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\ncontract KOL is StandardToken{\r\n    using SafeMath for uint256;\r\n\r\n    uint256 public constant TOKEN_DECIMALS = 18;\r\n\r\n    string public name = \u0022KOL Community Alliance\u0022;\r\n    string public symbol = \u0022KOL\u0022;\r\n    uint256 public decimals = TOKEN_DECIMALS;\r\n    uint256 public totalSupply = 21000000 *(10**uint256(TOKEN_DECIMALS));\r\n\r\n    uint256 public totalSupplyed = 0;\r\n    address public ethFundDeposit;\r\n\r\n    uint16 public constant totalSuperNodes = 3;\r\n    uint16 public constant totalNodes = 3;\r\n    uint16 public constant halfSuperNodes = 1;\r\n    uint16 public constant mostNodes = 1;\r\n    uint16 public constant halfNodes = 1;\r\n    uint16 public constant minSuperNodes = 1;\r\n    uint16 public constant minNodes = 1;\r\n\r\n\r\n    uint16 public constant most = 67;\r\n    uint16 public constant half = 51;\r\n    uint16 public constant less = 33;\r\n\r\n    function construct() public {\r\n        ethFundDeposit = msg.sender;\r\n    }\r\n    function setEthFundDeposit(address _ethFundDeposit) onlyOwner public {\r\n        require(_ethFundDeposit != address(0));\r\n        ethFundDeposit = _ethFundDeposit;\r\n    }\r\n\r\n    function transferETH() onlyOwner public {\r\n        require(ethFundDeposit != address(0));\r\n        require(address(this).balance != 0);\r\n        require(ethFundDeposit.send(address(this).balance));\r\n    }\r\n    function isOwner() internal view returns(bool success) {\r\n        if (msg.sender == owner) return true;\r\n        return false;\r\n    }\r\n}\r\n\r\ncontract KOLVote is KOL {\r\n\r\n    uint256 public constant totalNodeSupply = 5000000 *(10**uint256(TOKEN_DECIMALS));\r\n    uint256 public constant totalUserSupply = 16000000 *(10**uint256(TOKEN_DECIMALS));\r\n    uint256 public nodeSupplyed = 0;\r\n    uint256 public userSupplyed = 0;\r\n\r\n    uint256 public superNodesNum = 0;\r\n    uint256 public nodesNum = 0;\r\n    uint256 public dealTime =  3 days;\r\n    uint256 public missionId = 0;\r\n\r\n    mapping(address =\u003E bool) private isSuperNode;\r\n    mapping(address =\u003E bool) private isNode;\r\n    mapping(address =\u003E mapping(uint256 =\u003E bool)) private Voter;\r\n\r\n\r\n    event MissionPassed(uint256 _missionId,bytes32 _name);\r\n    event OfferingFinished(uint256 _missionId,uint256 _totalAmount,uint256 _length);\r\n    event RecycleTokens(uint256 _missionId,uint256 _totalAmount);\r\n    event NodeChanged(uint16 _type,address _oldNode,address _newNode);\r\n    event MissionLaunched(bytes32 _name,uint256 _missionId,address _whoLaunch);\r\n    event Burn(address indexed burner, uint256 value);\r\n\r\n    function burn(uint256 _value) internal {\r\n      require(_value \u003C= balances[owner]);\r\n      require(_value \u003C= totalSupply);\r\n      balances[owner] = balances[owner].sub(_value);\r\n      totalSupply = totalSupply.sub(_value);\r\n      emit Burn(owner, _value);\r\n      emit Transfer(owner, address(0), _value);\r\n    }\r\n\r\n    modifier onlySuperNode() {\r\n      require(isSuperNode[msg.sender]);\r\n        _;\r\n    }\r\n    modifier onlyNode() {\r\n        require(isNode[msg.sender]);\r\n        _;\r\n    }\r\n    modifier onlyNodes() {\r\n        require(isSuperNode[msg.sender]||isNode[msg.sender]);\r\n        _;\r\n    }\r\n\r\n    function setSuperNode(address superNodeAddress) onlyOwner public{\r\n      require(!isSuperNode[superNodeAddress]);\r\n      require(superNodesNum \u003C totalSuperNodes);\r\n      isSuperNode[superNodeAddress] = true;\r\n      superNodesNum\u002B\u002B;\r\n    }\r\n\r\n    function setNode(address nodeAddress) onlyOwner public{\r\n      require(!isNode[nodeAddress]);\r\n      require(nodesNum \u003C totalNodes);\r\n      isNode[nodeAddress] = true;\r\n      nodesNum\u002B\u002B;\r\n\r\n    }\r\n\r\n    function querySuperNode(address _addr) public view returns(bool){\r\n      return(isSuperNode[_addr]);\r\n    }\r\n    function queryNode(address _addr) public view returns(bool){\r\n      return(isNode[_addr]);\r\n    }\r\n    /***************************************************/\r\n    /*       KOL Vote Code Begin here                  */\r\n    /***************************************************/\r\n\r\n    struct KolMission{\r\n      address oldNode;\r\n      address newNode;\r\n      uint256 startTime;\r\n      uint256 endTime;\r\n      uint256 totalAmount;\r\n      uint256 offeringAmount;\r\n      bytes32 name;\r\n      uint16 agreeNodes;\r\n      uint16 refuseNodes;\r\n      uint16 agreeSuperNodes;\r\n      uint16 refuseSuperNodes;\r\n      bool superPassed;\r\n      bool nodePassed;\r\n      bool done;\r\n    }\r\n    mapping (uint256 =\u003E KolMission) private missionList;\r\n\r\n    struct KolOffering{\r\n      address target;\r\n      uint256 targetAmount;\r\n    }\r\n    KolOffering[] private kolOfferings;\r\n\r\n    mapping(uint256 =\u003E KolOffering[]) private offeringList;\r\n\r\n    //_type:1,change supernode;2,change node;3,changeowner;4,mission launched;6,creation issuing;7,recycle token from owner\r\n    function createKolMission(uint16 _type,bytes32 _name,uint256 _totalAmount,address _oldNode,address _newNode) onlyNodes public {\r\n        bytes32 iName = _name;\r\n        if (_type == 2){\r\n          require(isSuperNode[msg.sender]);\r\n          iName = \u0022CHANGE NODE\u0022;\r\n        }else if (_type == 3){\r\n          iName = \u0022CHANGE OWNER\u0022;\r\n        }else if (_type == 1){\r\n          require(isNode[msg.sender]);\r\n          iName = \u0022CHANGE SUPER NODE\u0022;\r\n        }else if ((_type ==4)){\r\n          require((_totalAmount \u002B userSupplyed) \u003C= totalUserSupply);\r\n        }else if (_type ==6){\r\n          require((_totalAmount \u002B nodeSupplyed) \u003C= totalNodeSupply);\r\n          iName = \u0022CREATION ISSUING\u0022;\r\n        }else if (_type ==7){\r\n          iName = \u0022RECYCLE TOKEN FROM OWNER\u0022;\r\n        }\r\n        missionList[missionId] = KolMission(_oldNode,\r\n                                            _newNode,\r\n                                            uint256(now),\r\n                                            uint256(now \u002B dealTime),\r\n                                            _totalAmount,\r\n                                            0,\r\n                                            iName,\r\n                                            0,\r\n                                            0,\r\n                                            0,\r\n                                            0,\r\n                                            false,\r\n                                            false,\r\n                                            false);\r\n\r\n        missionId\u002B\u002B;\r\n        emit MissionLaunched(iName,missionId-1,msg.sender);\r\n    }\r\n    function addKolOffering(uint256 _missionId,address _target,uint256 _targetAmount) onlyNodes public{\r\n      require(missionList[_missionId].superPassed);\r\n      require(!missionList[_missionId].done);\r\n      if (missionList[_missionId].name == \u0022CREATION ISSUING\u0022){\r\n        require(isNode[_target]||isSuperNode[_target]);\r\n      }\r\n      require(missionList[_missionId].offeringAmount.add(_targetAmount) \u003C= missionList[_missionId].totalAmount);\r\n      offeringList[_missionId].push(KolOffering(_target,_targetAmount));\r\n      missionList[_missionId].offeringAmount = missionList[_missionId].offeringAmount.add(_targetAmount);\r\n\r\n    }\r\n    function missionPassed(uint256 _missionId) private {\r\n      if ((missionList[_missionId].name != \u0022CHANGE SUPER NODE\u0022) \u0026\u0026\r\n              (missionList[_missionId].name != \u0022CHANGE NODE\u0022) \u0026\u0026\r\n              (missionList[_missionId].name != \u0022CHANGE OWNER\u0022) \u0026\u0026\r\n              (missionList[_missionId].name != \u0022RECYCLE TOKEN FROM OWNER\u0022)){\r\n          emit MissionPassed(_missionId,missionList[_missionId].name);\r\n        }\r\n\r\n    }\r\n    //once voting passed,excute auto;\r\n    function excuteAuto(uint256 _missionId) private {\r\n      if ((missionList[_missionId].name == \u0022CHANGE NODE\u0022) \u0026\u0026 missionList[_missionId].superPassed){\r\n        require(isNode[missionList[_missionId].oldNode]);\r\n        require(!isSuperNode[missionList[_missionId].newNode]);\r\n        isNode[missionList[_missionId].oldNode] = false;\r\n        isNode[missionList[_missionId].newNode] = true;\r\n        missionList[_missionId].done = true;\r\n        emit NodeChanged(2,missionList[_missionId].oldNode,missionList[_missionId].newNode);\r\n      }else if ((missionList[_missionId].name == \u0022CHANGE SUPER NODE\u0022) \u0026\u0026 missionList[_missionId].nodePassed){\r\n        require(isSuperNode[missionList[_missionId].oldNode]);\r\n        require(!isSuperNode[missionList[_missionId].newNode]);\r\n        isSuperNode[missionList[_missionId].oldNode] = false;\r\n        isSuperNode[missionList[_missionId].newNode] = true;\r\n        missionList[_missionId].done = true;\r\n        emit NodeChanged(1,missionList[_missionId].oldNode,missionList[_missionId].newNode);\r\n      }else if ((missionList[_missionId].name == \u0022CHANGE OWNER\u0022) \u0026\u0026 missionList[_missionId].nodePassed){\r\n        emit NodeChanged(3,owner,missionList[_missionId].newNode);\r\n        _transferOwnership(missionList[_missionId].newNode);\r\n        missionList[_missionId].done = true;\r\n      }else if ((missionList[_missionId].name == \u0022RECYCLE TOKEN FROM OWNER\u0022) \u0026\u0026 missionList[_missionId].nodePassed){\r\n        burn(missionList[_missionId].totalAmount);\r\n        emit RecycleTokens(_missionId,missionList[_missionId].totalAmount);\r\n        missionList[_missionId].done = true;\r\n      }\r\n    }\r\n    //_type,1,supernode;2,node\r\n    function voteMission(uint16 _type,uint256 _missionId,bool _agree) onlyNodes public{\r\n      require(!Voter[msg.sender][_missionId]);\r\n      require(!missionList[_missionId].done);\r\n      uint16 minNodesNum = minNodes;\r\n      uint16 minSuperNodesNum = minSuperNodes;\r\n      uint16 passNodes = halfNodes;\r\n      uint16 passSuperNodes = halfSuperNodes;\r\n      uint16 rate = half;\r\n      if (missionList[_missionId].name == \u0022CHANGE OWNER\u0022) {\r\n        rate = most;\r\n        minNodesNum = totalNodes;\r\n        passNodes = mostNodes;\r\n      }else if (missionList[_missionId].name == \u0022CHANGE NODE\u0022){\r\n        rate = less;\r\n        minSuperNodesNum = minSuperNodes;\r\n        passSuperNodes = halfSuperNodes;\r\n      }else if (missionList[_missionId].name == \u0022CHANGE SUPER NODE\u0022){\r\n        rate = less;\r\n        minNodesNum = minNodes;\r\n        passNodes = halfNodes;\r\n      }else if (missionList[_missionId].name == \u0022CREATION ISSUING\u0022){\r\n        minNodesNum = minNodes;\r\n        passNodes = halfNodes;\r\n        minSuperNodesNum = minSuperNodes;\r\n        passSuperNodes = halfSuperNodes;\r\n      }else if (missionList[_missionId].name == \u0022RECYCLE TOKEN FROM OWNER\u0022){\r\n        minNodesNum = minNodes;\r\n        passNodes = halfNodes;\r\n      }\r\n\r\n      if (_type == 1){\r\n        require(isSuperNode[msg.sender]);\r\n      }else if (_type ==2){\r\n        require(isNode[msg.sender]);\r\n      }\r\n\r\n      if(now \u003E missionList[_missionId].endTime){\r\n        if ( _type == 1 ){\r\n          if (\r\n            (missionList[_missionId].agreeSuperNodes \u002B missionList[_missionId].refuseSuperNodes)\u003E=minSuperNodesNum\r\n            \u0026\u0026\r\n            missionList[_missionId].agreeSuperNodes \u003E= (missionList[_missionId].agreeSuperNodes \u002B missionList[_missionId].refuseSuperNodes) * rate/100\r\n            ){\r\n              missionList[_missionId].superPassed = true;\r\n              missionPassed(_missionId);\r\n          }\r\n        }else if (_type ==2 ){\r\n          //\u8282\u70B9\u6295\u7968\r\n          if (\r\n            (missionList[_missionId].agreeNodes \u002B missionList[_missionId].refuseNodes)\u003E=minNodesNum\r\n            \u0026\u0026\r\n            missionList[_missionId].agreeNodes \u003E= (missionList[_missionId].refuseNodes \u002B missionList[_missionId].refuseNodes) * rate/100\r\n            ){\r\n              missionList[_missionId].nodePassed = true;\r\n          }\r\n        }\r\n      }else{\r\n        if(_agree == true){\r\n          if (_type == 1){\r\n            missionList[_missionId].agreeSuperNodes\u002B\u002B;\r\n          }else if(_type == 2){\r\n            missionList[_missionId].agreeNodes\u002B\u002B;\r\n          }\r\n        }\r\n        else{\r\n          if (_type == 1){\r\n            missionList[_missionId].refuseSuperNodes\u002B\u002B;\r\n          }else if(_type == 2){\r\n            missionList[_missionId].refuseNodes\u002B\u002B;\r\n          }\r\n        }\r\n        if (_type == 1){\r\n          if (missionList[_missionId].agreeSuperNodes \u003E= passSuperNodes) {\r\n              missionList[_missionId].superPassed = true;\r\n              missionPassed(_missionId);\r\n          }else if (missionList[_missionId].refuseSuperNodes \u003E= passSuperNodes) {\r\n              missionList[_missionId].done = true;\r\n          }\r\n        }else if (_type ==2){\r\n          if (missionList[_missionId].agreeNodes \u003E= passNodes) {\r\n              missionList[_missionId].nodePassed = true;\r\n          }else if (missionList[_missionId].refuseNodes \u003E= passNodes) {\r\n              missionList[_missionId].done = true;\r\n          }\r\n        }\r\n      }\r\n      Voter[msg.sender][_missionId] = true;\r\n      excuteAuto(_missionId);\r\n    }\r\n\r\n    function excuteVote(uint256 _missionId) onlyOwner public {\r\n      require(!missionList[_missionId].done);\r\n      require(uint256(now) \u003C (missionList[_missionId].endTime \u002B uint256(dealTime)));\r\n\r\n      require(missionList[_missionId].superPassed);\r\n      require(missionList[_missionId].nodePassed);\r\n      require(missionList[_missionId].totalAmount == missionList[_missionId].offeringAmount);\r\n      require((missionList[_missionId].totalAmount.add(totalSupplyed))\u003C=totalNodeSupply.add(totalUserSupply));\r\n\r\n      if (missionList[_missionId].name == \u0022CREATION ISSUING\u0022){\r\n        require((nodeSupplyed.add(missionList[_missionId].totalAmount))\u003C=totalNodeSupply);\r\n      }else{\r\n        require((userSupplyed.add(missionList[_missionId].totalAmount))\u003C=totalUserSupply);\r\n      }\r\n      for (uint m = 0; m \u003C offeringList[_missionId].length; m\u002B\u002B){\r\n        balances[offeringList[_missionId][m].target] = balances[offeringList[_missionId][m].target].add(offeringList[_missionId][m].targetAmount);\r\n        emit Transfer(msg.sender,offeringList[_missionId][m].target,offeringList[_missionId][m].targetAmount);\r\n      }\r\n      totalSupplyed = totalSupplyed.add(missionList[_missionId].totalAmount);\r\n\r\n      if (missionList[_missionId].name == \u0022CREATION ISSUING\u0022){\r\n        nodeSupplyed = nodeSupplyed.add(missionList[_missionId].totalAmount);\r\n      }else{\r\n        userSupplyed = userSupplyed.add(missionList[_missionId].totalAmount);\r\n      }\r\n      missionList[_missionId].done = true;\r\n      emit OfferingFinished(_missionId,missionList[_missionId].offeringAmount,offeringList[_missionId].length);\r\n\r\n    }\r\n    function getMission1(uint256 _missionId) public view returns(address,\r\n                                                              address,\r\n                                                              uint256,\r\n                                                              uint256,\r\n                                                              uint256,\r\n                                                              uint256,\r\n                                                              bytes32){\r\n      return(missionList[_missionId].oldNode,\r\n              missionList[_missionId].newNode,\r\n              missionList[_missionId].startTime,\r\n              missionList[_missionId].endTime,\r\n              missionList[_missionId].totalAmount,\r\n              missionList[_missionId].offeringAmount,\r\n              missionList[_missionId].name);\r\n    }\r\n    function getMission2(uint256 _missionId) public view returns(uint16,\r\n                                                                uint16,\r\n                                                                uint16,\r\n                                                                uint16,\r\n                                                                bool,\r\n                                                                bool,\r\n                                                                bool){\r\n      return(\r\n            missionList[_missionId].agreeNodes,\r\n            missionList[_missionId].refuseNodes,\r\n            missionList[_missionId].agreeSuperNodes,\r\n            missionList[_missionId].refuseSuperNodes,\r\n            missionList[_missionId].superPassed,\r\n            missionList[_missionId].nodePassed,\r\n            missionList[_missionId].done);\r\n    }\r\n    function getOfferings(uint256 _missionId,uint256 _id) public view returns(address,uint256,uint256){\r\n      return(offeringList[_missionId][_id].target,offeringList[_missionId][_id].targetAmount,offeringList[_missionId].length);\r\n    }\r\n    function voted(address _node,uint256 _missionId) public view returns(bool){\r\n      return Voter[_node][_missionId];\r\n    }\r\n}\r\ncontract KOLFund is Ownable{\r\n  using SafeMath for uint256;\r\n  KOLVote public token;\r\n\r\n  uint256 public dealTime =  3 days;\r\n  uint256 public missionId = 0;\r\n\r\n  /* \u6B63\u5F0F\u73AF\u5883 */\r\n\r\n  uint16 public constant totalSuperNodes = 21;\r\n  uint16 public constant totalNodes = 500;\r\n  uint16 public constant halfSuperNodes = 11;\r\n  uint16 public constant mostNodes = 335;\r\n  uint16 public constant halfNodes = 251;\r\n  uint16 public constant minSuperNodes = 15;\r\n  uint16 public constant minNodes = 101;\r\n\r\n  /* \u6D4B\u8BD5\u73AF\u5883 */\r\n\r\n  /* uint16 public constant totalSuperNodes = 3;\r\n  uint16 public constant totalNodes = 3;\r\n  uint16 public constant halfSuperNodes = 1;\r\n  uint16 public constant mostNodes = 1;\r\n  uint16 public constant halfNodes = 1;\r\n  uint16 public constant minSuperNodes = 1;\r\n  uint16 public constant minNodes = 1; */\r\n\r\n\r\n  uint16 public constant most = 67;\r\n  uint16 public constant half = 51;\r\n  uint16 public constant less = 33;\r\n\r\n  mapping(address =\u003E mapping(uint256 =\u003E bool)) private Voter;\r\n\r\n  constructor(address _tokenAddress) public {\r\n    token = KOLVote(_tokenAddress);\r\n  }\r\n\r\n  event MissionPassed(uint256 _missionId,bytes32 _name);\r\n  event OfferingFinished(uint256 _missionId,uint256 _totalAmount,uint256 _length);\r\n  event MissionLaunched(bytes32 _name,uint256 _missionId,address _whoLaunch);\r\n\r\n  modifier onlySuperNode() {\r\n    require(token.querySuperNode(msg.sender));\r\n      _;\r\n  }\r\n  modifier onlyNode() {\r\n      require(token.queryNode(msg.sender));\r\n      _;\r\n  }\r\n  modifier onlyNodes() {\r\n      require(token.querySuperNode(msg.sender)||token.queryNode(msg.sender));\r\n      _;\r\n  }\r\n\r\n  struct KolMission{\r\n    uint256 startTime;\r\n    uint256 endTime;\r\n    uint256 totalAmount;\r\n    uint256 offeringAmount;\r\n    bytes32 name;\r\n    uint16 agreeNodes;\r\n    uint16 refuseNodes;\r\n    uint16 agreeSuperNodes;\r\n    uint16 refuseSuperNodes;\r\n    bool superPassed;\r\n    bool nodePassed;\r\n    bool done;\r\n  }\r\n  mapping (uint256 =\u003E KolMission) private missionList;\r\n\r\n  struct KolOffering{\r\n    address target;\r\n    uint256 targetAmount;\r\n  }\r\n  KolOffering[] private kolOfferings;\r\n  mapping(uint256 =\u003E KolOffering[]) private offeringList;\r\n\r\n  function missionPassed(uint256 _missionId) private {\r\n    emit MissionPassed(_missionId,missionList[_missionId].name);\r\n  }\r\n  function createKolMission(bytes32 _name,uint256 _totalAmount) onlyNodes public {\r\n      bytes32 iName = _name;\r\n      missionList[missionId] = KolMission(uint256(now),\r\n                                          uint256(now \u002B dealTime),\r\n                                          _totalAmount,\r\n                                          0,\r\n                                          iName,\r\n                                          0,\r\n                                          0,\r\n                                          0,\r\n                                          0,\r\n                                          false,\r\n                                          false,\r\n                                          false);\r\n\r\n      missionId\u002B\u002B;\r\n      emit MissionLaunched(iName,missionId-1,msg.sender);\r\n  }\r\n  function voteMission(uint16 _type,uint256 _missionId,bool _agree) onlyNodes public{\r\n    require(!Voter[msg.sender][_missionId]);\r\n    require(!missionList[_missionId].done);\r\n    uint16 minNodesNum = minNodes;\r\n    uint16 minSuperNodesNum = minSuperNodes;\r\n    uint16 passNodes = halfNodes;\r\n    uint16 passSuperNodes = halfSuperNodes;\r\n    uint16 rate = half;\r\n\r\n    if (_type == 1){\r\n      require(token.querySuperNode(msg.sender));\r\n    }else if (_type ==2){\r\n      require(token.queryNode(msg.sender));\r\n    }\r\n\r\n    if(now \u003E missionList[_missionId].endTime){\r\n      if ( _type == 1 ){\r\n        if (\r\n          (missionList[_missionId].agreeSuperNodes \u002B missionList[_missionId].refuseSuperNodes)\u003E=minSuperNodesNum\r\n          \u0026\u0026\r\n          missionList[_missionId].agreeSuperNodes \u003E= (missionList[_missionId].agreeSuperNodes \u002B missionList[_missionId].refuseSuperNodes) * rate/100\r\n          ){\r\n            missionList[_missionId].superPassed = true;\r\n            missionPassed(_missionId);\r\n        }\r\n      }else if (_type ==2 ){\r\n        //\u8282\u70B9\u6295\u7968\r\n        if (\r\n          (missionList[_missionId].agreeNodes \u002B missionList[_missionId].refuseNodes)\u003E=minNodesNum\r\n          \u0026\u0026\r\n          missionList[_missionId].agreeNodes \u003E= (missionList[_missionId].refuseNodes \u002B missionList[_missionId].refuseNodes) * rate/100\r\n          ){\r\n            missionList[_missionId].nodePassed = true;\r\n        }\r\n      }\r\n    }else{\r\n      if(_agree == true){\r\n        if (_type == 1){\r\n          missionList[_missionId].agreeSuperNodes\u002B\u002B;\r\n        }else if(_type == 2){\r\n          missionList[_missionId].agreeNodes\u002B\u002B;\r\n        }\r\n      }\r\n      else{\r\n        if (_type == 1){\r\n          missionList[_missionId].refuseSuperNodes\u002B\u002B;\r\n        }else if(_type == 2){\r\n          missionList[_missionId].refuseNodes\u002B\u002B;\r\n        }\r\n      }\r\n      if (_type == 1){\r\n        if (missionList[_missionId].agreeSuperNodes \u003E= passSuperNodes) {\r\n            missionList[_missionId].superPassed = true;\r\n            missionPassed(_missionId);\r\n        }else if (missionList[_missionId].refuseSuperNodes \u003E= passSuperNodes) {\r\n            missionList[_missionId].done = true;\r\n        }\r\n      }else if (_type ==2){\r\n        if (missionList[_missionId].agreeNodes \u003E= passNodes) {\r\n            missionList[_missionId].nodePassed = true;\r\n        }else if (missionList[_missionId].refuseNodes \u003E= passNodes) {\r\n            missionList[_missionId].done = true;\r\n        }\r\n      }\r\n    }\r\n    Voter[msg.sender][_missionId] = true;\r\n  }\r\n  function addKolOffering(uint256 _missionId,address _target,uint256 _targetAmount) onlyNodes public{\r\n    require(missionList[_missionId].superPassed);\r\n    require(!missionList[_missionId].done);\r\n    require(token.queryNode(_target)||token.querySuperNode(_target));\r\n    require(missionList[_missionId].offeringAmount.add(_targetAmount) \u003C= missionList[_missionId].totalAmount);\r\n    offeringList[_missionId].push(KolOffering(_target,_targetAmount));\r\n    missionList[_missionId].offeringAmount = missionList[_missionId].offeringAmount.add(_targetAmount);\r\n\r\n  }\r\n  function excuteVote(uint256 _missionId) onlyOwner public {\r\n    require(!missionList[_missionId].done);\r\n    require(uint256(now) \u003C (missionList[_missionId].endTime \u002B uint256(dealTime)));\r\n    require(missionList[_missionId].superPassed);\r\n    require(missionList[_missionId].nodePassed);\r\n    require(missionList[_missionId].totalAmount == missionList[_missionId].offeringAmount);\r\n\r\n\r\n    for (uint m = 0; m \u003C offeringList[_missionId].length; m\u002B\u002B){\r\n      token.transfer(offeringList[_missionId][m].target, offeringList[_missionId][m].targetAmount);\r\n    }\r\n    missionList[_missionId].done = true;\r\n    emit OfferingFinished(_missionId,missionList[_missionId].offeringAmount,offeringList[_missionId].length);\r\n\r\n  }\r\n  function getMission1(uint256 _missionId) public view returns(uint256,\r\n                                                            uint256,\r\n                                                            uint256,\r\n                                                            uint256,\r\n                                                            bytes32){\r\n    return(missionList[_missionId].startTime,\r\n            missionList[_missionId].endTime,\r\n            missionList[_missionId].totalAmount,\r\n            missionList[_missionId].offeringAmount,\r\n            missionList[_missionId].name);\r\n  }\r\n  function getMission2(uint256 _missionId) public view returns(uint16,\r\n                                                              uint16,\r\n                                                              uint16,\r\n                                                              uint16,\r\n                                                              bool,\r\n                                                              bool,\r\n                                                              bool){\r\n    return(\r\n          missionList[_missionId].agreeNodes,\r\n          missionList[_missionId].refuseNodes,\r\n          missionList[_missionId].agreeSuperNodes,\r\n          missionList[_missionId].refuseSuperNodes,\r\n          missionList[_missionId].superPassed,\r\n          missionList[_missionId].nodePassed,\r\n          missionList[_missionId].done);\r\n  }\r\n  function getOfferings(uint256 _missionId,uint256 _id) public view returns(address,uint256,uint256){\r\n    return(offeringList[_missionId][_id].target,offeringList[_missionId][_id].targetAmount,offeringList[_missionId].length);\r\n  }\r\n  function voted(address _node,uint256 _missionId) public view returns(bool){\r\n    return Voter[_node][_missionId];\r\n  }\r\n\r\n}","ABI":"[{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_missionId\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022excuteVote\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_name\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022name\u0022:\u0022_totalAmount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022createKolMission\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022minNodes\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint16\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022minSuperNodes\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint16\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_missionId\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_id\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022getOfferings\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022most\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint16\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022halfSuperNodes\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint16\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_missionId\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_target\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_targetAmount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022addKolOffering\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_type\u0022,\u0022type\u0022:\u0022uint16\u0022},{\u0022name\u0022:\u0022_missionId\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_agree\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022name\u0022:\u0022voteMission\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022owner\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022totalNodes\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint16\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022mostNodes\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint16\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022totalSuperNodes\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint16\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022missionId\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_missionId\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022getMission2\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint16\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint16\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint16\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint16\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022dealTime\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_node\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_missionId\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022voted\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022less\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint16\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_missionId\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022getMission1\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022halfNodes\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint16\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022half\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint16\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022token\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[{\u0022name\u0022:\u0022_tokenAddress\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022constructor\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022_missionId\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022_name\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022MissionPassed\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022_missionId\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022_totalAmount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022_length\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022OfferingFinished\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022_name\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022_missionId\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022_whoLaunch\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022MissionLaunched\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022previousOwner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022OwnershipTransferred\u0022,\u0022type\u0022:\u0022event\u0022}]","ContractName":"KOLFund","CompilerVersion":"v0.4.23\u002Bcommit.124ca40d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000000946e36c2887025c389ef85ea5f9150e0bed4d69","Library":"","SwarmSource":"bzzr://00df899557b0ffcfd8ba87a89652e5282a354a61132741426f05fee9c04e058b"}]