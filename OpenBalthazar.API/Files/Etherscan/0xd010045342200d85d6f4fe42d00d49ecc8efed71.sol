[{"SourceCode":"pragma solidity 0.5.11;\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://eips.ethereum.org/EIPS/eip-20\r\n */\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Multiplies two unsigned integers, reverts on overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\r\n        // benefit is lost if \u0027b\u0027 is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b \u003E 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c \u002B a % b); // There is no case in which this doesn\u0027t hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b \u003C= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two unsigned integers, reverts on overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a \u002B b;\r\n        require(c \u003E= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n     * reverts when dividing by zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @title PayableOwnable\r\n * @dev The PayableOwnable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \u0022user permissions\u0022.\r\n * PayableOwnable is extended from open-zeppelin Ownable smart contract, with the difference of making the owner\r\n * a payable address.\r\n */\r\ncontract PayableOwnable {\r\n    address payable internal _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original \u0060owner\u0060 of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor() internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @return the address of the owner.\r\n     */\r\n    function owner() public view returns (address payable) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return true if \u0060msg.sender\u0060 is the owner of the contract.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to relinquish control of the contract.\r\n     * @notice Renouncing to ownership will leave the contract without an owner.\r\n     * It will not be possible to call the functions with the \u0060onlyOwner\u0060\r\n     * modifier anymore.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address payable newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address payable newOwner) internal {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n/// @title PumaPay Single Pull Payment - Contract that facilitates our pull payment protocol\r\n/// The single pull payment smart contract allows for the amount to be defined in PMA rather than in FIAT.\r\n/// This optimization reduces the gas costs that we had in place for the calculation of PMA amount from FIAT\r\n/// compared to the previous versions of our smart contracts (v1 and v2). Also, we don\u0027t need to worry about PMA/FIAT rates\r\n/// on the blockchain anymore since we are taking care of that on the wallet side by having the user signing the amount of PMA directly.\r\n/// @author PumaPay Dev Team - \u003Cdevelopers@pumapay.io\u003E\r\ncontract SinglePullPayment is PayableOwnable {\r\n\r\n    using SafeMath for uint256;\r\n    /// ===============================================================================================================\r\n    ///                                      Events\r\n    /// ===============================================================================================================\r\n\r\n    event LogExecutorAdded(address executor);\r\n    event LogExecutorRemoved(address executor);\r\n\r\n    event LogPullPaymentExecuted(\r\n        address customerAddress,\r\n        address receiverAddress,\r\n        uint256 amountInPMA,\r\n        bytes32 paymentID,\r\n        bytes32 businessID,\r\n        string uniqueReferenceID\r\n    );\r\n\r\n    /// ===============================================================================================================\r\n    ///                                      Constants\r\n    /// ===============================================================================================================\r\n    bytes32 constant private EMPTY_BYTES32 = \u0022\u0022;\r\n\r\n    /// ===============================================================================================================\r\n    ///                                      Members\r\n    /// ===============================================================================================================\r\n    IERC20 public token;\r\n    mapping(address =\u003E bool) public executors;\r\n    mapping(bytes32 =\u003E PullPayment) public pullPayments;\r\n\r\n    struct PullPayment {\r\n        bytes32[2] paymentDetails;              /// [0] paymentID / [1] businessID\r\n        uint256 paymentAmount;                  /// payment amount in fiat in cents\r\n        address customerAddress;                /// wallet address of customer\r\n        address receiverAddress;                /// address which pma tokens will be transfer to on execution\r\n        string uniqueReferenceID;\r\n    }\r\n    /// ===============================================================================================================\r\n    ///                                      Modifiers\r\n    /// ===============================================================================================================\r\n    modifier isExecutor() {\r\n        require(executors[msg.sender], \u0022msg.sender not an executor\u0022);\r\n        _;\r\n    }\r\n    modifier executorExists(address _executor) {\r\n        require(executors[_executor], \u0022Executor does not exists.\u0022);\r\n        _;\r\n    }\r\n    modifier executorDoesNotExists(address _executor) {\r\n        require(!executors[_executor], \u0022Executor already exists.\u0022);\r\n        _;\r\n    }\r\n    modifier isValidAddress(address _address) {\r\n        require(_address != address(0), \u0022Invalid address - ZERO_ADDRESS provided\u0022);\r\n        _;\r\n    }\r\n    modifier isValidNumber(uint256 _amount) {\r\n        require(_amount \u003E 0, \u0022Invalid amount - Must be higher than zero\u0022);\r\n        _;\r\n    }\r\n    modifier isValidByte32(bytes32 _text) {\r\n        require(_text != EMPTY_BYTES32, \u0022Invalid byte32 value.\u0022);\r\n        _;\r\n    }\r\n    modifier pullPaymentDoesNotExists(address _customerAddress, bytes32 _paymentID) {\r\n        require(pullPayments[_paymentID].paymentDetails[0] == EMPTY_BYTES32, \u0022Pull payment already exists - Payment ID\u0022);\r\n        require(pullPayments[_paymentID].paymentDetails[1] == EMPTY_BYTES32, \u0022Pull payment already exists - Business ID\u0022);\r\n        require(pullPayments[_paymentID].paymentAmount == 0, \u0022Pull payment already exists - Payment Amount\u0022);\r\n        require(pullPayments[_paymentID].receiverAddress == address(0), \u0022Pull payment already exists - Receiver Address\u0022);\r\n        _;\r\n    }\r\n\r\n    /// ===============================================================================================================\r\n    ///                                      Constructor\r\n    /// ===============================================================================================================\r\n    /// @dev Contract constructor - sets the token address that the contract facilitates.\r\n    /// @param _token Token Address.\r\n    constructor(address _token)\r\n    public {\r\n        require(_token != address(0), \u0022Invalid address for token - ZERO_ADDRESS provided\u0022);\r\n        token = IERC20(_token);\r\n    }\r\n\r\n    // @notice Will receive any eth sent to the contract\r\n    function() external payable {\r\n    }\r\n    /// ===============================================================================================================\r\n    ///                                      Public Functions - Owner Only\r\n    /// ===============================================================================================================\r\n\r\n    /// @dev Adds a new executor. - can be executed only by the owner.\r\n    /// @param _executor - address of the executor which cannot be zero address.\r\n    function addExecutor(address payable _executor)\r\n    public\r\n    onlyOwner\r\n    isValidAddress(_executor)\r\n    executorDoesNotExists(_executor)\r\n    {\r\n        executors[_executor] = true;\r\n\r\n        emit LogExecutorAdded(_executor);\r\n    }\r\n\r\n    /// @dev Removes a new executor. - can be executed only by the owner.\r\n    /// @param _executor - address of the executor which cannot be zero address.\r\n    function removeExecutor(address payable _executor)\r\n    public\r\n    onlyOwner\r\n    isValidAddress(_executor)\r\n    executorExists(_executor)\r\n    {\r\n        executors[_executor] = false;\r\n\r\n        emit LogExecutorRemoved(_executor);\r\n    }\r\n\r\n    /// ===============================================================================================================\r\n    ///                                      Public Functions - Executors Only\r\n    /// ===============================================================================================================\r\n\r\n    /// @dev Registers a new pull payment to the PumaPay Pull Payment Contract - The method can be executed only\r\n    /// by one of the executors of the PumaPay Pull Payment Contract.\r\n    /// It creates a new pull payment in the \u0027pullPayments\u0027 mapping and it transfers the amount\r\n    /// It also transfer the PMA amount from the customer address to the receiver address.\r\n    /// Emits \u0027LogPullPaymentExecuted\u0027 with customer address, receiver address, PMA amount, the paymentID, businessID and uniqueReferenceID\r\n    /// @param v - recovery ID of the ETH signature. - https://github.com/ethereum/EIPs/issues/155\r\n    /// @param r - R output of ECDSA signature.\r\n    /// @param s - S output of ECDSA signature.\r\n    /// @param _paymentDetails - all the relevant id-related details for the payment.\r\n    /// @param _addresses - all the relevant addresses for the payment.\r\n    /// @param _paymentAmount - amount in PMA to be transferred to the receiver.\r\n    /// @param _uniqueReferenceID - unique reference ID of the pull payment.\r\n    function registerPullPayment(\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s,\r\n        bytes32[2] memory _paymentDetails, /// [0] paymentID, [1] businessID\r\n        address[2] memory _addresses, /// [0] customerAddress, [1] receiverAddress\r\n        uint256 _paymentAmount,\r\n        string memory _uniqueReferenceID\r\n    )\r\n    public\r\n    isExecutor()\r\n    isValidByte32(_paymentDetails[0])\r\n    isValidByte32(_paymentDetails[1])\r\n    isValidNumber(_paymentAmount)\r\n    isValidAddress(_addresses[0])\r\n    isValidAddress(_addresses[1])\r\n    pullPaymentDoesNotExists(_addresses[0], _paymentDetails[0])\r\n    {\r\n        bytes32[2] memory paymentDetails = _paymentDetails;\r\n\r\n        pullPayments[paymentDetails[0]].paymentDetails = _paymentDetails;\r\n        pullPayments[paymentDetails[0]].paymentAmount = _paymentAmount;\r\n        pullPayments[paymentDetails[0]].customerAddress = _addresses[0];\r\n        pullPayments[paymentDetails[0]].receiverAddress = _addresses[1];\r\n        pullPayments[paymentDetails[0]].uniqueReferenceID = _uniqueReferenceID;\r\n\r\n        require(isValidRegistration(\r\n                v,\r\n                r,\r\n                s,\r\n                pullPayments[paymentDetails[0]]),\r\n            \u0022Invalid pull payment registration - ECRECOVER_FAILED\u0022\r\n        );\r\n\r\n        token.transferFrom(\r\n            _addresses[0],\r\n            _addresses[1],\r\n            _paymentAmount\r\n        );\r\n\r\n        emit LogPullPaymentExecuted(\r\n            _addresses[0],\r\n            _addresses[1],\r\n            _paymentAmount,\r\n            paymentDetails[0],\r\n            paymentDetails[1],\r\n            _uniqueReferenceID\r\n        );\r\n    }\r\n\r\n    /// ===============================================================================================================\r\n    ///                                      Internal Functions\r\n    /// ===============================================================================================================\r\n\r\n    /// @dev Checks if a registration request is valid by comparing the v, r, s params\r\n    /// and the hashed params with the customer address.\r\n    /// @param v - recovery ID of the ETH signature. - https://github.com/ethereum/EIPs/issues/155\r\n    /// @param r - R output of ECDSA signature.\r\n    /// @param s - S output of ECDSA signature.\r\n    /// @param _pullPayment - pull payment to be validated.\r\n    /// @return bool - if the v, r, s params with the hashed params match the customer address\r\n    function isValidRegistration(\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s,\r\n        PullPayment memory _pullPayment\r\n    )\r\n    internal\r\n    pure\r\n    returns (bool)\r\n    {\r\n        return ecrecover(\r\n            keccak256(\r\n                abi.encodePacked(\r\n                    _pullPayment.paymentDetails[0],\r\n                    _pullPayment.paymentDetails[1],\r\n                    _pullPayment.paymentAmount,\r\n                    _pullPayment.customerAddress,\r\n                    _pullPayment.receiverAddress,\r\n                    _pullPayment.uniqueReferenceID\r\n                )\r\n            ),\r\n            v, r, s) == _pullPayment.customerAddress;\r\n    }\r\n}","ABI":"[{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022pullPayments\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022paymentAmount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022customerAddress\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022receiverAddress\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022string\u0022,\u0022name\u0022:\u0022uniqueReferenceID\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address payable\u0022,\u0022name\u0022:\u0022_executor\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022addExecutor\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address payable\u0022,\u0022name\u0022:\u0022_executor\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022removeExecutor\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022renounceOwnership\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022owner\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022address payable\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022isOwner\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022executors\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint8\u0022,\u0022name\u0022:\u0022v\u0022,\u0022type\u0022:\u0022uint8\u0022},{\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022r\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022s\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022internalType\u0022:\u0022bytes32[2]\u0022,\u0022name\u0022:\u0022_paymentDetails\u0022,\u0022type\u0022:\u0022bytes32[2]\u0022},{\u0022internalType\u0022:\u0022address[2]\u0022,\u0022name\u0022:\u0022_addresses\u0022,\u0022type\u0022:\u0022address[2]\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_paymentAmount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022string\u0022,\u0022name\u0022:\u0022_uniqueReferenceID\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022name\u0022:\u0022registerPullPayment\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address payable\u0022,\u0022name\u0022:\u0022newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022transferOwnership\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022token\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022contract IERC20\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_token\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022constructor\u0022},{\u0022payable\u0022:true,\u0022stateMutability\u0022:\u0022payable\u0022,\u0022type\u0022:\u0022fallback\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022executor\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022LogExecutorAdded\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022executor\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022LogExecutorRemoved\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022customerAddress\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022receiverAddress\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022amountInPMA\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022paymentID\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022businessID\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022string\u0022,\u0022name\u0022:\u0022uniqueReferenceID\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022name\u0022:\u0022LogPullPaymentExecuted\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022previousOwner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022OwnershipTransferred\u0022,\u0022type\u0022:\u0022event\u0022}]","ContractName":"SinglePullPayment","CompilerVersion":"v0.5.11\u002Bcommit.c082d0b4","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000846c66cf71c43f80403b51fe3906b3599d63336f","Library":"","SwarmSource":"bzzr://9dafb8c346af8c29b5700410630e23cb048c8286dfd61de4588209478795e019"}]