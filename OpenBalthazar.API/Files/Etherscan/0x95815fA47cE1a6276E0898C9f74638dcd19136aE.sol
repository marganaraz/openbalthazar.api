[{"SourceCode":"{\u0022DeliverFunds.sol\u0022:{\u0022content\u0022:\u0022pragma solidity 0.5.10;\\r\\n\\r\\ncontract DeliverFunds {\\r\\n    constructor(address payable target) public payable {\\r\\n        selfdestruct(target);\\r\\n    }\\r\\n}\u0022},\u0022EthexSuperprize.sol\u0022:{\u0022content\u0022:\u0022pragma solidity 0.5.10;\\r\\n\\r\\n/**\\r\\n * (E)t)h)e)x) Superprize Contract \\r\\n *  This smart-contract is the part of Ethex Lottery fair game.\\r\\n *  See latest version at https://github.com/ethex-bet/ethex-lottery \\r\\n *  http://ethex.bet\\r\\n */\\r\\n \\r\\n import \\\u0022./DeliverFunds.sol\\\u0022;\\r\\n import \\\u0022./Ownable.sol\\\u0022;\\r\\n \\r\\n contract EthexSuperprize is Ownable {\\r\\n    struct Payout {\\r\\n        uint256 index;\\r\\n        uint256 amount;\\r\\n        uint256 block;\\r\\n        address payable winnerAddress;\\r\\n        bytes16 betId;\\r\\n    }\\r\\n     \\r\\n    Payout[] public payouts;\\r\\n    \\r\\n    address public lotoAddress;\\r\\n    address payable public newVersionAddress;\\r\\n    EthexSuperprize public previousContract;\\r\\n    uint256 public hold;\\r\\n    \\r\\n    event Superprize (\\r\\n        uint256 index,\\r\\n        uint256 amount,\\r\\n        address winner,\\r\\n        bytes16 betId,\\r\\n        byte state\\r\\n    );\\r\\n    \\r\\n    uint8 internal constant PARTS = 6;\\r\\n    uint256 internal constant PRECISION = 1 ether;\\r\\n    uint256 internal constant MONTHLY = 150000;\\r\\n\\r\\n    function() external payable { }\\r\\n    \\r\\n    function initSuperprize(address payable winner, bytes16 betId) external {\\r\\n        require(msg.sender == lotoAddress, \\\u0022Loto only\\\u0022);\\r\\n        uint256 amount = address(this).balance - hold;\\r\\n        hold = address(this).balance;\\r\\n        uint256 sum;\\r\\n        uint256 temp;\\r\\n        for (uint256 i = 1; i \\u003c PARTS; i\u002B\u002B) {\\r\\n            temp = amount * PRECISION * (i - 1 \u002B 10) / 75 / PRECISION;\\r\\n            sum \u002B= temp;\\r\\n            payouts.push(Payout(i, temp, block.number \u002B i * MONTHLY, winner, betId));\\r\\n        }\\r\\n        payouts.push(Payout(PARTS, amount - sum, block.number \u002B PARTS * MONTHLY, winner, betId));\\r\\n        emit Superprize(0, amount, winner, betId, 0);\\r\\n    }\\r\\n    \\r\\n    function paySuperprize() external onlyOwner {\\r\\n        if (payouts.length == 0)\\r\\n            return;\\r\\n        Payout[] memory payoutArray = new Payout[](payouts.length);\\r\\n        uint i = payouts.length;\\r\\n        while (i \\u003e 0) {\\r\\n            i--;\\r\\n            if (payouts[i].block \\u003c= block.number) {\\r\\n                emit Superprize(payouts[i].index, payouts[i].amount, payouts[i].winnerAddress, payouts[i].betId, 0x01);\\r\\n                hold -= payouts[i].amount;\\r\\n            }\\r\\n            payoutArray[i] = payouts[i];\\r\\n            payouts.pop();\\r\\n        }\\r\\n        for (i = 0; i \\u003c payoutArray.length; i\u002B\u002B)\\r\\n            if (payoutArray[i].block \\u003e block.number)\\r\\n                payouts.push(payoutArray[i]);\\r\\n        for (i = 0; i \\u003c payoutArray.length; i\u002B\u002B)\\r\\n            if (payoutArray[i].block \\u003c= block.number \\u0026\\u0026 !payoutArray[i].winnerAddress.send(payoutArray[i].amount))\\r\\n                (new DeliverFunds).value(payoutArray[i].amount)(payoutArray[i].winnerAddress);\\r\\n    }\\r\\n     \\r\\n    function setOldVersion(address payable oldAddress) external onlyOwner {\\r\\n        previousContract = EthexSuperprize(oldAddress);\\r\\n        lotoAddress = previousContract.lotoAddress();\\r\\n        hold = previousContract.hold();\\r\\n        uint256 index;\\r\\n        uint256 amount;\\r\\n        uint256 betBlock;\\r\\n        address payable winner;\\r\\n        bytes16 betId;\\r\\n        uint256 payoutsCount = previousContract.getPayoutsCount();\\r\\n        for (uint i = 0; i \\u003c payoutsCount; i\u002B\u002B) {\\r\\n            (index, amount, betBlock, winner, betId) = previousContract.payouts(i);\\r\\n            payouts.push(Payout(index, amount, betBlock, winner, betId));\\r\\n        }\\r\\n        previousContract.migrate();\\r\\n    }\\r\\n    \\r\\n    function setNewVersion(address payable newVersion) external onlyOwner {\\r\\n        newVersionAddress = newVersion;\\r\\n    }\\r\\n    \\r\\n    function setLoto(address loto) external onlyOwner {\\r\\n        lotoAddress = loto;\\r\\n    }\\r\\n    \\r\\n    function migrate() external {\\r\\n        require(msg.sender == owner || msg.sender == newVersionAddress);\\r\\n        require(newVersionAddress != address(0));\\r\\n        newVersionAddress.transfer(address(this).balance);\\r\\n    }   \\r\\n\\r\\n    function getPayoutsCount() public view returns (uint256) { return payouts.length; }\\r\\n}\u0022},\u0022Ownable.sol\u0022:{\u0022content\u0022:\u0022pragma solidity 0.5.10;\\r\\n\\r\\ncontract Ownable {\\r\\n    address payable public owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n    \\r\\n    constructor () internal {\\r\\n        owner = msg.sender;\\r\\n        emit OwnershipTransferred(address(0), owner);\\r\\n    }\\r\\n    \\r\\n    modifier onlyOwner() {\\r\\n        require(msg.sender == owner, \\\u0022Ownable: caller is not the owner\\\u0022);\\r\\n        _;\\r\\n    }\\r\\n    \\r\\n    function transferOwnership(address payable newOwner) public onlyOwner {\\r\\n        require(newOwner != address(0), \\\u0022Ownable: new owner is the zero address\\\u0022);\\r\\n        emit OwnershipTransferred(owner, newOwner);\\r\\n        owner = newOwner;\\r\\n    }\\r\\n}\u0022}}","ABI":"[{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022hold\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022getPayoutsCount\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022payouts\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022index\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022block\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022winnerAddress\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022betId\u0022,\u0022type\u0022:\u0022bytes16\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022winner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022betId\u0022,\u0022type\u0022:\u0022bytes16\u0022}],\u0022name\u0022:\u0022initSuperprize\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022newVersion\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022setNewVersion\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022paySuperprize\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022lotoAddress\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022previousContract\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022owner\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022migrate\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022oldAddress\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022setOldVersion\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022loto\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022setLoto\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022newVersionAddress\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022transferOwnership\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022payable\u0022:true,\u0022stateMutability\u0022:\u0022payable\u0022,\u0022type\u0022:\u0022fallback\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022index\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022winner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022betId\u0022,\u0022type\u0022:\u0022bytes16\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022state\u0022,\u0022type\u0022:\u0022bytes1\u0022}],\u0022name\u0022:\u0022Superprize\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022previousOwner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022OwnershipTransferred\u0022,\u0022type\u0022:\u0022event\u0022}]","ContractName":"EthexSuperprize","CompilerVersion":"v0.5.10\u002Bcommit.5a6ea5b1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://3cebf2964393cb5f6c8bcc9eebbe5a9227576449b592ce44d0db9cf0143b6cdd"}]