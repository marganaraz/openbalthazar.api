[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\ncontract UtilETHMaglc {\r\n    uint ethWei = 1 ether;\r\n\r\n    function getLevel(uint value) internal view returns(uint) {\r\n        if (value \u003E= 1*ethWei \u0026\u0026 value \u003C= 5*ethWei) {\r\n            return 1;\r\n        }\r\n        if (value \u003E= 6*ethWei \u0026\u0026 value \u003C= 10*ethWei) {\r\n            return 2;\r\n        }\r\n        if (value \u003E= 11*ethWei \u0026\u0026 value \u003C= 15*ethWei) {\r\n            return 3;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function getLineLevel(uint value) internal view returns(uint) {\r\n        if (value \u003E= 1*ethWei \u0026\u0026 value \u003C= 5*ethWei) {\r\n            return 1;\r\n        }\r\n        if (value \u003E= 6*ethWei \u0026\u0026 value \u003C= 10*ethWei) {\r\n            return 2;\r\n        }\r\n        if (value \u003E= 11*ethWei) {\r\n            return 3;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function getScByLevel(uint level) internal pure returns(uint) {\r\n        if (level == 1) {\r\n            return 5;\r\n        }\r\n        if (level == 2) {\r\n            return 7;\r\n        }\r\n        if (level == 3) {\r\n            return 10;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function getFireScByLevel(uint level) internal pure returns(uint) {\r\n        if (level == 1) {\r\n            return 3;\r\n        }\r\n        if (level == 2) {\r\n            return 6;\r\n        }\r\n        if (level == 3) {\r\n            return 10;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function getRecommendScaleByLevelAndTim(uint level,uint times) internal pure returns(uint){\r\n        if (level == 1 \u0026\u0026 times == 1) {\r\n            return 50;\r\n        }\r\n        if (level == 2 \u0026\u0026 times == 1) {\r\n            return 70;\r\n        }\r\n        if (level == 2 \u0026\u0026 times == 2) {\r\n            return 50;\r\n        }\r\n        if (level == 3) {\r\n            if(times == 1){\r\n                return 100;\r\n            }\r\n            if (times == 2) {\r\n                return 70;\r\n            }\r\n            if (times == 3) {\r\n                return 50;\r\n            }\r\n            if (times \u003E= 4 \u0026\u0026 times \u003C= 10) {\r\n                return 10;\r\n            }\r\n            if (times \u003E= 11 \u0026\u0026 times \u003C= 20) {\r\n                return 5;\r\n            }\r\n            if (times \u003E= 21) {\r\n                return 1;\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function compareStr(string memory _str, string memory str) internal pure returns(bool) {\r\n        if (keccak256(abi.encodePacked(_str)) == keccak256(abi.encodePacked(str))) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n}\r\n\r\n\r\ncontract Context {\r\n    constructor() internal {}\r\n\r\n    function _msgSender() internal view returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this;\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () internal {\r\n        _owner = _msgSender();\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \u0022Ownable: caller is not the owner\u0022);\r\n        _;\r\n    }\r\n\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \u0022Ownable: new owner is the zero address\u0022);\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address =\u003E bool) bearer;\r\n    }\r\n    function add(Role storage role, address account) internal {\r\n        require(!has(role, account), \u0022Roles: account already has role\u0022);\r\n        role.bearer[account] = true;\r\n    }\r\n    function remove(Role storage role, address account) internal {\r\n        require(has(role, account), \u0022Roles: account does not have role\u0022);\r\n        role.bearer[account] = false;\r\n    }\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0), \u0022Roles: account is the zero address\u0022);\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\ncontract WhitelistAdminRole is Context, Ownable {\r\n    using Roles for Roles.Role;\r\n\r\n    event WhitelistAdminAdded(address indexed account);\r\n    event WhitelistAdminRemoved(address indexed account);\r\n\r\n    Roles.Role private _whitelistAdmins;\r\n\r\n    constructor () internal {\r\n        _addWhitelistAdmin(_msgSender());\r\n    }\r\n\r\n    modifier onlyWhitelistAdmin() {\r\n        require(isWhitelistAdmin(_msgSender()) || isOwner(), \u0022WhitelistAdminRole: caller does not have the WhitelistAdmin role\u0022);\r\n        _;\r\n    }\r\n\r\n    function isWhitelistAdmin(address account) public view returns (bool) {\r\n        return _whitelistAdmins.has(account);\r\n    }\r\n\r\n    function addWhitelistAdmin(address account) public onlyWhitelistAdmin {\r\n        _addWhitelistAdmin(account);\r\n    }\r\n\r\n    function removeWhitelistAdmin(address account) public onlyOwner {\r\n        _whitelistAdmins.remove(account);\r\n        emit WhitelistAdminRemoved(account);\r\n    }\r\n\r\n    function renounceWhitelistAdmin() public {\r\n        _removeWhitelistAdmin(_msgSender());\r\n    }\r\n\r\n    function _addWhitelistAdmin(address account) internal {\r\n        _whitelistAdmins.add(account);\r\n        emit WhitelistAdminAdded(account);\r\n    }\r\n\r\n    function _removeWhitelistAdmin(address account) internal {\r\n        _whitelistAdmins.remove(account);\r\n        emit WhitelistAdminRemoved(account);\r\n    }\r\n}\r\n\r\ncontract ETHMaglc is UtilETHMaglc, WhitelistAdminRole {\r\n\r\n    using SafeMath for *;\r\n\r\n   \r\n\r\n    uint ethWei = 1 ether;\r\n\r\n    address payable private devAddr = address(0x90Ad8Fcb4D41Ec267f726Ee2E9e524A71641DbaD);\r\n    address payable private savingAddr = address(0xB01dA2dd68313e7Ea0ebF8B5A96c42d16617a8B3);\r\n    address payable private follow = address(0x9077755b36979Ef1359E6DB41882dFd475ba3a6A);\r\n\r\n    struct User{\r\n        uint id;\r\n        address userAddress;\r\n        string inviteCode;\r\n        string referrer;\r\n        uint staticLevel;\r\n        uint dynamicLevel;\r\n        uint allInvest;\r\n        uint freezeAmount;\r\n        uint unlockAmount;\r\n        uint allStaticAmount;\r\n        uint allDynamicAmount;\r\n        uint hisStaticAmount;\r\n        uint hisDynamicAmount;\r\n        uint inviteAmount;\r\n        uint reInvestCount;\r\n        uint lastReInvestTime;\r\n        Invest[] invests;\r\n        uint staticFlag;\r\n    }\r\n\r\n    struct GameInfo {\r\n        uint luckPort;\r\n        address[] specialUsers;\r\n    }\r\n\r\n    struct UserGlobal {\r\n        uint id;\r\n        address userAddress;\r\n        string inviteCode;\r\n        string referrer;\r\n    }\r\n\r\n    struct Invest{\r\n        address userAddress;\r\n        uint investAmount;\r\n        uint investTime;\r\n        uint times;\r\n    }\r\n\r\n    uint coefficient = 10;\r\n    uint startTime;\r\n    uint investCount = 0;\r\n    mapping(uint =\u003E uint) rInvestCount;\r\n    uint investMoney = 0;\r\n    mapping(uint =\u003E uint) rInvestMoney;\r\n    mapping(uint =\u003E GameInfo) rInfo;\r\n    uint uid = 0;\r\n    uint rid = 1;\r\n    uint period = 3 days;\r\n    mapping (uint =\u003E mapping(address =\u003E User)) userRoundMapping;\r\n    mapping(address =\u003E UserGlobal) userMapping;\r\n    mapping (string =\u003E address) addressMapping;\r\n    mapping (uint =\u003E address) public indexMapping;\r\n\r\n    modifier isHuman() {\r\n        address addr = msg.sender;\r\n        uint codeLength;\r\n\r\n        assembly {codeLength := extcodesize(addr)}\r\n        require(codeLength == 0, \u0022sorry humans only\u0022);\r\n        require(tx.origin == msg.sender, \u0022sorry, human only\u0022);\r\n        _;\r\n    }\r\n\r\n    event LogInvestIn(address indexed who, uint indexed uid, uint amount, uint time, string inviteCode, string referrer, uint typeFlag);\r\n    event LogWithdrawProfit(address indexed who, uint indexed uid, uint amount, uint time);\r\n    event LogRedeem(address indexed who, uint indexed uid, uint amount, uint now);\r\n\r\n    constructor () public {\r\n    }\r\n\r\n    function () external payable {\r\n    }\r\n\r\n    function activeGame(uint time) external onlyWhitelistAdmin\r\n    {\r\n        require(time \u003E now, \u0022invalid game start time\u0022);\r\n        startTime = time;\r\n    }\r\n\r\n    function setCoefficient(uint coeff) external onlyWhitelistAdmin\r\n    {\r\n        require(coeff \u003E 0, \u0022invalid coeff\u0022);\r\n        coefficient = coeff;\r\n    }\r\n\r\n    function gameStart() private view returns(bool) {\r\n        return startTime != 0 \u0026\u0026 now \u003E startTime;\r\n    }\r\n\r\n    function investIn(string memory inviteCode, string memory referrer)\r\n        public\r\n        isHuman()\r\n        payable\r\n    {\r\n        require(gameStart(), \u0022game not start\u0022);\r\n        require(msg.value \u003E= 1*ethWei \u0026\u0026 msg.value \u003C= 15*ethWei, \u0022between 1 and 15\u0022);\r\n        require(msg.value == msg.value.div(ethWei).mul(ethWei), \u0022invalid msg value\u0022);\r\n\r\n        UserGlobal storage userGlobal = userMapping[msg.sender];\r\n        if (userGlobal.id == 0) {\r\n            require(!compareStr(inviteCode, \u0022\u0022), \u0022empty invite code\u0022);\r\n            address referrerAddr = getUserAddressByCode(referrer);\r\n            require(uint(referrerAddr) != 0, \u0022referer not exist\u0022);\r\n            require(referrerAddr != msg.sender, \u0022referrer can\u0027t be self\u0022);\r\n            require(!isUsed(inviteCode), \u0022invite code is used\u0022);\r\n\r\n            registerUser(msg.sender, inviteCode, referrer);\r\n        }\r\n\r\n        User storage user = userRoundMapping[rid][msg.sender];\r\n        if (uint(user.userAddress) != 0) {\r\n            require(user.freezeAmount.add(msg.value) \u003C= 15*ethWei, \u0022can not beyond 15 eth\u0022);\r\n            user.allInvest = user.allInvest.add(msg.value);\r\n            user.freezeAmount = user.freezeAmount.add(msg.value);\r\n            user.staticLevel = getLevel(user.freezeAmount);\r\n            user.dynamicLevel = getLineLevel(user.freezeAmount.add(user.unlockAmount));\r\n        } else {\r\n            user.id = userGlobal.id;\r\n            user.userAddress = msg.sender;\r\n            user.freezeAmount = msg.value;\r\n            user.staticLevel = getLevel(msg.value);\r\n            user.allInvest = msg.value;\r\n            user.dynamicLevel = getLineLevel(msg.value);\r\n            user.inviteCode = userGlobal.inviteCode;\r\n            user.referrer = userGlobal.referrer;\r\n\r\n            if (!compareStr(userGlobal.referrer, \u0022\u0022)) {\r\n                address referrerAddr = getUserAddressByCode(userGlobal.referrer);\r\n                userRoundMapping[rid][referrerAddr].inviteAmount\u002B\u002B;\r\n            }\r\n        }\r\n\r\n        Invest memory invest = Invest(msg.sender, msg.value, now, 0);\r\n        user.invests.push(invest);\r\n\r\n        if (rInvestMoney[rid] != 0 \u0026\u0026 (rInvestMoney[rid].div(10000).div(ethWei) != rInvestMoney[rid].add(msg.value).div(10000).div(ethWei))) {\r\n            bool isEnough;\r\n            uint sendMoney;\r\n            (isEnough, sendMoney) = isEnoughBalance(rInfo[rid].luckPort);\r\n            if (sendMoney \u003E 0) {\r\n                sendMoneyToUser(msg.sender, sendMoney);\r\n            }\r\n            rInfo[rid].luckPort = 0;\r\n            if (!isEnough) {\r\n                endRound();\r\n                return;\r\n            }\r\n        }\r\n\r\n        investCount = investCount.add(1);\r\n        investMoney = investMoney.add(msg.value);\r\n        rInvestCount[rid] = rInvestCount[rid].add(1);\r\n        rInvestMoney[rid] = rInvestMoney[rid].add(msg.value);\r\n        rInfo[rid].luckPort = rInfo[rid].luckPort.add(msg.value.mul(2).div(1000));\r\n\r\n        sendFeetoAdmin(msg.value);\r\n        emit LogInvestIn(msg.sender, userGlobal.id, msg.value, now, userGlobal.inviteCode, userGlobal.referrer, 0);\r\n    }\r\n\r\n\r\n    function reInvestIn() public {\r\n        require(gameStart(), \u0022game not start\u0022);\r\n        User storage user = userRoundMapping[rid][msg.sender];\r\n        require(user.id \u003E 0, \u0022user haven\u0027t invest in round before\u0022);\r\n        calStaticProfitInner(msg.sender);\r\n\r\n        uint reInvestAmount = user.unlockAmount;\r\n        if (user.freezeAmount \u003E 15*ethWei) {\r\n            user.freezeAmount = 15*ethWei;\r\n        }\r\n        if (user.freezeAmount.add(reInvestAmount) \u003E 15*ethWei) {\r\n            reInvestAmount = (15*ethWei).sub(user.freezeAmount);\r\n        }\r\n\r\n        if (reInvestAmount == 0) {\r\n            return;\r\n        }\r\n\r\n        uint leastAmount = reInvestAmount.mul(47).div(1000);\r\n        bool isEnough;\r\n        uint sendMoney;\r\n        (isEnough, sendMoney) = isEnoughBalance(leastAmount);\r\n        if (!isEnough) {\r\n            if (sendMoney \u003E 0) {\r\n                sendMoneyToUser(msg.sender, sendMoney);\r\n            }\r\n            endRound();\r\n            return;\r\n        }\r\n\r\n        user.unlockAmount = user.unlockAmount.sub(reInvestAmount);\r\n        user.allInvest = user.allInvest.add(reInvestAmount);\r\n        user.freezeAmount = user.freezeAmount.add(reInvestAmount);\r\n        user.staticLevel = getLevel(user.freezeAmount);\r\n        user.dynamicLevel = getLineLevel(user.freezeAmount.add(user.unlockAmount));\r\n        if ((now - user.lastReInvestTime) \u003E 5 days) {\r\n            user.reInvestCount = user.reInvestCount.add(1);\r\n            user.lastReInvestTime = now;\r\n        }\r\n\r\n        if (user.reInvestCount == 12) {\r\n            rInfo[rid].specialUsers.push(msg.sender);\r\n        }\r\n\r\n        Invest memory invest = Invest(msg.sender, reInvestAmount, now, 0);\r\n        user.invests.push(invest);\r\n\r\n        if (rInvestMoney[rid] != 0 \u0026\u0026 (rInvestMoney[rid].div(10000).div(ethWei) != rInvestMoney[rid].add(reInvestAmount).div(10000).div(ethWei))) {\r\n            (isEnough, sendMoney) = isEnoughBalance(rInfo[rid].luckPort);\r\n            if (sendMoney \u003E 0) {\r\n                sendMoneyToUser(msg.sender, sendMoney);\r\n            }\r\n            rInfo[rid].luckPort = 0;\r\n            if (!isEnough) {\r\n                endRound();\r\n                return;\r\n            }\r\n        }\r\n\r\n        investCount = investCount.add(1);\r\n        investMoney = investMoney.add(reInvestAmount);\r\n        rInvestCount[rid] = rInvestCount[rid].add(1);\r\n        rInvestMoney[rid] = rInvestMoney[rid].add(reInvestAmount);\r\n        rInfo[rid].luckPort = rInfo[rid].luckPort.add(reInvestAmount.mul(2).div(1000));\r\n\r\n        sendFeetoAdmin(reInvestAmount);\r\n        emit LogInvestIn(msg.sender, user.id, reInvestAmount, now, user.inviteCode, user.referrer, 1);\r\n    }\r\n\r\n    function withdrawProfit()\r\n        public\r\n        isHuman()\r\n    {\r\n        require(gameStart(), \u0022game not start\u0022);\r\n        User storage user = userRoundMapping[rid][msg.sender];\r\n        uint sendMoney = user.allStaticAmount.add(user.allDynamicAmount);\r\n\r\n        bool isEnough = false;\r\n        uint resultMoney = 0;\r\n        (isEnough, resultMoney) = isEnoughBalance(sendMoney);\r\n        if (resultMoney \u003E 0) {\r\n            sendMoneyToUser(msg.sender, resultMoney.mul(98).div(100));\r\n            savingAddr.transfer(resultMoney.mul(2).div(100));\r\n            user.allStaticAmount = 0;\r\n            user.allDynamicAmount = 0;\r\n            emit LogWithdrawProfit(msg.sender, user.id, resultMoney, now);\r\n        }\r\n\r\n        if (!isEnough) {\r\n            endRound();\r\n        }\r\n    }\r\n\r\n    function isEnoughBalance(uint sendMoney) private view returns (bool, uint){\r\n        if (sendMoney \u003E= address(this).balance) {\r\n            return (false, address(this).balance);\r\n        } else {\r\n            return (true, sendMoney);\r\n        }\r\n    }\r\n\r\n    function sendMoneyToUser(address payable userAddress, uint money) private {\r\n        userAddress.transfer(money);\r\n    }\r\n\r\n    function calStaticProfit(address userAddr) external onlyWhitelistAdmin returns(uint)\r\n    {\r\n        return calStaticProfitInner(userAddr);\r\n    }\r\n\r\n    function calStaticProfitInner(address userAddr) private returns(uint)\r\n    {\r\n        User storage user = userRoundMapping[rid][userAddr];\r\n        if (user.id == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint scale = getScByLevel(user.staticLevel);\r\n        uint allStatic = 0;\r\n        for (uint i = user.staticFlag; i \u003C user.invests.length; i\u002B\u002B) {\r\n            Invest storage invest = user.invests[i];\r\n            uint startDay = invest.investTime.sub(4 hours).div(1 days).mul(1 days);\r\n            uint staticGaps = now.sub(4 hours).sub(startDay).div(1 days);\r\n\r\n            uint unlockDay = now.sub(invest.investTime).div(1 days);\r\n\r\n            if(staticGaps \u003E 5){\r\n                staticGaps = 5;\r\n            }\r\n            if (staticGaps \u003E invest.times) {\r\n                allStatic \u002B= staticGaps.sub(invest.times).mul(scale).mul(invest.investAmount).div(1000);\r\n                invest.times = staticGaps;\r\n            }\r\n\r\n            if (unlockDay \u003E= 5) {\r\n                user.staticFlag = user.staticFlag.add(1);\r\n                user.freezeAmount = user.freezeAmount.sub(invest.investAmount);\r\n                user.unlockAmount = user.unlockAmount.add(invest.investAmount);\r\n                user.staticLevel = getLevel(user.freezeAmount);\r\n            }\r\n\r\n        }\r\n        allStatic = allStatic.mul(coefficient).div(10);\r\n        user.allStaticAmount = user.allStaticAmount.add(allStatic);\r\n        user.hisStaticAmount = user.hisStaticAmount.add(allStatic);\r\n        return user.allStaticAmount;\r\n    }\r\n\r\n    function calDynamicProfit(uint start, uint end) external onlyWhitelistAdmin {\r\n        for (uint i = start; i \u003C= end; i\u002B\u002B) {\r\n            address userAddr = indexMapping[i];\r\n            User memory user = userRoundMapping[rid][userAddr];\r\n            if (user.freezeAmount \u003E= 1*ethWei) {\r\n                uint scale = getScByLevel(user.staticLevel);\r\n                calUserDynamicProfit(user.referrer, user.freezeAmount, scale);\r\n            }\r\n            calStaticProfitInner(userAddr);\r\n        }\r\n    }\r\n\r\n    function registerUserInfo(address user, string calldata inviteCode, string calldata referrer) external onlyOwner {\r\n        registerUser(user, inviteCode, referrer);\r\n    }\r\n\r\n    function calUserDynamicProfit(string memory referrer, uint money, uint shareSc) private {\r\n        string memory tmpReferrer = referrer;\r\n        \r\n        for (uint i = 1; i \u003C= 30; i\u002B\u002B) {\r\n            if (compareStr(tmpReferrer, \u0022\u0022)) {\r\n                break;\r\n            }\r\n            address tmpUserAddr = addressMapping[tmpReferrer];\r\n            User storage calUser = userRoundMapping[rid][tmpUserAddr];\r\n            \r\n            uint fireSc = getFireScByLevel(calUser.dynamicLevel);\r\n            uint recommendSc = getRecommendScaleByLevelAndTim(calUser.dynamicLevel, i);\r\n            uint moneyResult = 0;\r\n            if (money \u003C= calUser.freezeAmount.add(calUser.unlockAmount)) {\r\n                moneyResult = money;\r\n            } else {\r\n                moneyResult = calUser.freezeAmount.add(calUser.unlockAmount);\r\n            }\r\n            \r\n            if (recommendSc != 0) {\r\n                uint tmpDynamicAmount = moneyResult.mul(shareSc).mul(fireSc).mul(recommendSc);\r\n                tmpDynamicAmount = tmpDynamicAmount.div(1000).div(10).div(100);\r\n\r\n                tmpDynamicAmount = tmpDynamicAmount.mul(coefficient).div(10);\r\n                calUser.allDynamicAmount = calUser.allDynamicAmount.add(tmpDynamicAmount);\r\n                calUser.hisDynamicAmount = calUser.hisDynamicAmount.add(tmpDynamicAmount);\r\n            }\r\n\r\n            tmpReferrer = calUser.referrer;\r\n        }\r\n    }\r\n\r\n    function redeem()\r\n        public\r\n        isHuman()\r\n    {\r\n        require(gameStart(), \u0022game not start\u0022);\r\n        User storage user = userRoundMapping[rid][msg.sender];\r\n        require(user.id \u003E 0, \u0022user not exist\u0022);\r\n\r\n        calStaticProfitInner(msg.sender);\r\n\r\n        uint sendMoney = user.unlockAmount;\r\n\r\n        bool isEnough = false;\r\n        uint resultMoney = 0;\r\n\r\n        (isEnough, resultMoney) = isEnoughBalance(sendMoney);\r\n        if (resultMoney \u003E 0) {\r\n            sendMoneyToUser(msg.sender, resultMoney);\r\n            user.unlockAmount = 0;\r\n            user.staticLevel = getLevel(user.freezeAmount);\r\n            user.dynamicLevel = getLineLevel(user.freezeAmount);\r\n\r\n            emit LogRedeem(msg.sender, user.id, resultMoney, now);\r\n        }\r\n\r\n        if (user.reInvestCount \u003C 12) {\r\n            user.reInvestCount = 0;\r\n        }\r\n\r\n        if (!isEnough) {\r\n            endRound();\r\n        }\r\n    }\r\n\r\n    function endRound() private {\r\n        rid\u002B\u002B;\r\n        startTime = now.add(period).div(1 days).mul(1 days);\r\n        coefficient = 10;\r\n    }\r\n\r\n    function isUsed(string memory code) public view returns(bool) {\r\n        address user = getUserAddressByCode(code);\r\n        return uint(user) != 0;\r\n    }\r\n\r\n    function getUserAddressByCode(string memory code) public view returns(address) {\r\n        return addressMapping[code];\r\n    }\r\n\r\n    function sendFeetoAdmin(uint amount) private {\r\n        devAddr.transfer(amount.mul(4).div(100));\r\n        follow.transfer(amount.mul(5).div(1000));\r\n    }\r\n\r\n    function getGameInfo() public isHuman() view returns(uint, uint, uint, uint, uint, uint, uint, uint, uint, uint) {\r\n        return (\r\n            rid,\r\n            uid,\r\n            startTime,\r\n            investCount,\r\n            investMoney,\r\n            rInvestCount[rid],\r\n            rInvestMoney[rid],\r\n            coefficient,\r\n            rInfo[rid].luckPort,\r\n            rInfo[rid].specialUsers.length\r\n        );\r\n    }\r\n\r\n    function getUserInfo(address user, uint roundId, uint i) public isHuman() view returns(\r\n        uint[17] memory ct, string memory inviteCode, string memory referrer\r\n    ) {\r\n\r\n        if(roundId == 0){\r\n            roundId = rid;\r\n        }\r\n\r\n        User memory userInfo = userRoundMapping[roundId][user];\r\n\r\n        ct[0] = userInfo.id;\r\n        ct[1] = userInfo.staticLevel;\r\n        ct[2] = userInfo.dynamicLevel;\r\n        ct[3] = userInfo.allInvest;\r\n        ct[4] = userInfo.freezeAmount;\r\n        ct[5] = userInfo.unlockAmount;\r\n        ct[6] = userInfo.allStaticAmount;\r\n        ct[7] = userInfo.allDynamicAmount;\r\n        ct[8] = userInfo.hisStaticAmount;\r\n        ct[9] = userInfo.hisDynamicAmount;\r\n        ct[10] = userInfo.inviteAmount;\r\n        ct[11] = userInfo.reInvestCount;\r\n        ct[12] = userInfo.staticFlag;\r\n        ct[13] = userInfo.invests.length;\r\n        if (ct[13] != 0) {\r\n            ct[14] = userInfo.invests[i].investAmount;\r\n            ct[15] = userInfo.invests[i].investTime;\r\n            ct[16] = userInfo.invests[i].times;\r\n        } else {\r\n            ct[14] = 0;\r\n            ct[15] = 0;\r\n            ct[16] = 0;\r\n        }\r\n        \r\n\r\n        inviteCode = userMapping[user].inviteCode;\r\n        referrer = userMapping[user].referrer;\r\n\r\n        return (\r\n            ct,\r\n            inviteCode,\r\n            referrer\r\n        );\r\n    }\r\n\r\n    function getSpecialUser(uint _rid, uint i) public view returns(address) {\r\n        return rInfo[_rid].specialUsers[i];\r\n    }\r\n\r\n    function getLatestUnlockAmount(address userAddr) public view returns(uint)\r\n    {\r\n        User memory user = userRoundMapping[rid][userAddr];\r\n        uint allUnlock = user.unlockAmount;\r\n        for (uint i = user.staticFlag; i \u003C user.invests.length; i\u002B\u002B) {\r\n            Invest memory invest = user.invests[i];\r\n            uint unlockDay = now.sub(invest.investTime).div(1 days);\r\n\r\n            if (unlockDay \u003E= 5) {\r\n                allUnlock = allUnlock.add(invest.investAmount);\r\n            }\r\n        }\r\n        return allUnlock;\r\n    }\r\n\r\n    function registerUser(address user, string memory inviteCode, string memory referrer) private {\r\n        UserGlobal storage userGlobal = userMapping[user];\r\n        uid\u002B\u002B;\r\n        userGlobal.id = uid;\r\n        userGlobal.userAddress = user;\r\n        userGlobal.inviteCode = inviteCode;\r\n        userGlobal.referrer = referrer;\r\n\r\n        addressMapping[inviteCode] = user;\r\n        indexMapping[uid] = user;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \u0022mul overflow\u0022);\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b \u003E 0, \u0022div zero\u0022);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b \u003C= a, \u0022lower sub bigger\u0022);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a \u002B b;\r\n        require(c \u003E= a, \u0022overflow\u0022);\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \u0022mod zero\u0022);\r\n        return a % b;\r\n    }\r\n}","ABI":"[{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022coeff\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022setCoefficient\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022reInvestIn\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022start\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022end\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022calDynamicProfit\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022getGameInfo\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022inviteCode\u0022,\u0022type\u0022:\u0022string\u0022},{\u0022name\u0022:\u0022referrer\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022name\u0022:\u0022investIn\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:true,\u0022stateMutability\u0022:\u0022payable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022renounceWhitelistAdmin\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022code\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022name\u0022:\u0022isUsed\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022removeWhitelistAdmin\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022renounceOwnership\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022addWhitelistAdmin\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_rid\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022i\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022getSpecialUser\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022owner\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022isOwner\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022userAddr\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022calStaticProfit\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022withdrawProfit\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022code\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022name\u0022:\u0022getUserAddressByCode\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022user\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022inviteCode\u0022,\u0022type\u0022:\u0022string\u0022},{\u0022name\u0022:\u0022referrer\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022name\u0022:\u0022registerUserInfo\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022indexMapping\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022isWhitelistAdmin\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022redeem\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022time\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022activeGame\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022userAddr\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022getLatestUnlockAmount\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022transferOwnership\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022user\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022roundId\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022i\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022getUserInfo\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022ct\u0022,\u0022type\u0022:\u0022uint256[17]\u0022},{\u0022name\u0022:\u0022inviteCode\u0022,\u0022type\u0022:\u0022string\u0022},{\u0022name\u0022:\u0022referrer\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022constructor\u0022},{\u0022payable\u0022:true,\u0022stateMutability\u0022:\u0022payable\u0022,\u0022type\u0022:\u0022fallback\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022who\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022uid\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022time\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022inviteCode\u0022,\u0022type\u0022:\u0022string\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022referrer\u0022,\u0022type\u0022:\u0022string\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022typeFlag\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022LogInvestIn\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022who\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022uid\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022time\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022LogWithdrawProfit\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022who\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022uid\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022now\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022LogRedeem\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022WhitelistAdminAdded\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022WhitelistAdminRemoved\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022previousOwner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022OwnershipTransferred\u0022,\u0022type\u0022:\u0022event\u0022}]","ContractName":"ETHMaglc","CompilerVersion":"v0.5.0\u002Bcommit.1d4f565a","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://96ebbe381a6c2baf5e465a1066d13f0f91aa0694cdd9f3f0d9a75c2ae907b4fc"}]