[{"SourceCode":"pragma solidity ^0.5.8;\r\n\r\n\r\ninterface IERC20 {\r\n    \r\n    function totalSupply() external view returns (uint256);\r\n\r\n    \r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    \r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    \r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    \r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    \r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    \r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    \r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract ERC20Detailed is IERC20 {\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    \r\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = decimals;\r\n    }\r\n\r\n    \r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    \r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    \r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    \r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a \u002B b;\r\n        require(c \u003E= a, \u0022SafeMath: addition overflow\u0022);\r\n\r\n        return c;\r\n    }\r\n\r\n    \r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b \u003C= a, \u0022SafeMath: subtraction overflow\u0022);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    \r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        \r\n        \r\n        \r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \u0022SafeMath: multiplication overflow\u0022);\r\n\r\n        return c;\r\n    }\r\n\r\n    \r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        \r\n        require(b \u003E 0, \u0022SafeMath: division by zero\u0022);\r\n        uint256 c = a / b;\r\n        \r\n\r\n        return c;\r\n    }\r\n\r\n    \r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \u0022SafeMath: modulo by zero\u0022);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract ERC20 is IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address =\u003E uint256) private _balances;\r\n\r\n    mapping (address =\u003E mapping (address =\u003E uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    \r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    \r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    \r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    \r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    \r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        _approve(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    \r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\r\n        return true;\r\n    }\r\n\r\n    \r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    \r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\r\n        return true;\r\n    }\r\n\r\n    \r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \u0022ERC20: transfer from the zero address\u0022);\r\n        require(recipient != address(0), \u0022ERC20: transfer to the zero address\u0022);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount);\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    \r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \u0022ERC20: mint to the zero address\u0022);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n     \r\n    function _burn(address account, uint256 value) internal {\r\n        require(account != address(0), \u0022ERC20: burn from the zero address\u0022);\r\n\r\n        _totalSupply = _totalSupply.sub(value);\r\n        _balances[account] = _balances[account].sub(value);\r\n        emit Transfer(account, address(0), value);\r\n    }\r\n\r\n    \r\n    function _approve(address owner, address spender, uint256 value) internal {\r\n        require(owner != address(0), \u0022ERC20: approve from the zero address\u0022);\r\n        require(spender != address(0), \u0022ERC20: approve to the zero address\u0022);\r\n\r\n        _allowances[owner][spender] = value;\r\n        emit Approval(owner, spender, value);\r\n    }\r\n\r\n    \r\n    function _burnFrom(address account, uint256 amount) internal {\r\n        _burn(account, amount);\r\n        _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount));\r\n    }\r\n}\r\n\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address =\u003E bool) bearer;\r\n    }\r\n\r\n    \r\n    function add(Role storage role, address account) internal {\r\n        require(!has(role, account), \u0022Roles: account already has role\u0022);\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    \r\n    function remove(Role storage role, address account) internal {\r\n        require(has(role, account), \u0022Roles: account does not have role\u0022);\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    \r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0), \u0022Roles: account is the zero address\u0022);\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\ncontract MinterRole {\r\n    using Roles for Roles.Role;\r\n\r\n    event MinterAdded(address indexed account);\r\n    event MinterRemoved(address indexed account);\r\n\r\n    Roles.Role private _minters;\r\n\r\n    constructor () internal {\r\n        _addMinter(msg.sender);\r\n    }\r\n\r\n    modifier onlyMinter() {\r\n        require(isMinter(msg.sender), \u0022MinterRole: caller does not have the Minter role\u0022);\r\n        _;\r\n    }\r\n\r\n    function isMinter(address account) public view returns (bool) {\r\n        return _minters.has(account);\r\n    }\r\n\r\n    function addMinter(address account) public onlyMinter {\r\n        _addMinter(account);\r\n    }\r\n\r\n    function renounceMinter() public {\r\n        _removeMinter(msg.sender);\r\n    }\r\n\r\n    function _addMinter(address account) internal {\r\n        _minters.add(account);\r\n        emit MinterAdded(account);\r\n    }\r\n\r\n    function _removeMinter(address account) internal {\r\n        _minters.remove(account);\r\n        emit MinterRemoved(account);\r\n    }\r\n}\r\n\r\ncontract ERC20Mintable is ERC20, MinterRole {\r\n    \r\n    function mint(address account, uint256 amount) public onlyMinter returns (bool) {\r\n        _mint(account, amount);\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract ERC20Capped is ERC20Mintable {\r\n    uint256 private _cap;\r\n\r\n    \r\n    constructor (uint256 cap) public {\r\n        require(cap \u003E 0, \u0022ERC20Capped: cap is 0\u0022);\r\n        _cap = cap;\r\n    }\r\n\r\n    \r\n    function cap() public view returns (uint256) {\r\n        return _cap;\r\n    }\r\n\r\n    \r\n    function _mint(address account, uint256 value) internal {\r\n        require(totalSupply().add(value) \u003C= _cap, \u0022ERC20Capped: cap exceeded\u0022);\r\n        super._mint(account, value);\r\n    }\r\n}\r\n\r\ncontract ERC20Burnable is ERC20 {\r\n    \r\n    function burn(uint256 amount) public {\r\n        _burn(msg.sender, amount);\r\n    }\r\n\r\n    \r\n    function burnFrom(address account, uint256 amount) public {\r\n        _burnFrom(account, amount);\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    \r\n    function isContract(address account) internal view returns (bool) {\r\n        \r\n        \r\n        \r\n\r\n        uint256 size;\r\n        \r\n        assembly { size := extcodesize(account) }\r\n        return size \u003E 0;\r\n    }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        \r\n        \r\n        \r\n        \r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \u0022SafeERC20: approve from non-zero to non-zero allowance\u0022\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    \r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        \r\n        \r\n\r\n        \r\n        \r\n        \r\n        \r\n        \r\n        require(address(token).isContract(), \u0022SafeERC20: call to non-contract\u0022);\r\n\r\n        \r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \u0022SafeERC20: low-level call failed\u0022);\r\n\r\n        if (returndata.length \u003E 0) { \r\n            \r\n            require(abi.decode(returndata, (bool)), \u0022SafeERC20: ERC20 operation did not succeed\u0022);\r\n        }\r\n    }\r\n}\r\n\r\ncontract ReentrancyGuard {\r\n    \r\n    uint256 private _guardCounter;\r\n\r\n    constructor () internal {\r\n        \r\n        \r\n        _guardCounter = 1;\r\n    }\r\n\r\n    \r\n    modifier nonReentrant() {\r\n        _guardCounter \u002B= 1;\r\n        uint256 localCounter = _guardCounter;\r\n        _;\r\n        require(localCounter == _guardCounter, \u0022ReentrancyGuard: reentrant call\u0022);\r\n    }\r\n}\r\n\r\ncontract Crowdsale is ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    \r\n    IERC20 private _token;\r\n\r\n    \r\n    address payable private _wallet;\r\n\r\n    \r\n    \r\n    \r\n    \r\n    uint256 private _rate;\r\n\r\n    \r\n    uint256 private _weiRaised;\r\n\r\n    \r\n    event TokensPurchased(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\r\n\r\n    event RateAdjusted(uint256 adjustedRate);\r\n\r\n    \r\n    constructor (uint256 rate, address payable wallet, IERC20 token) public {\r\n        require(rate \u003E 0, \u0022Crowdsale: rate is 0\u0022);\r\n        require(wallet != address(0), \u0022Crowdsale: wallet is the zero address\u0022);\r\n        require(address(token) != address(0), \u0022Crowdsale: token is the zero address\u0022);\r\n\r\n        _rate = rate;\r\n        _wallet = wallet;\r\n        _token = token;\r\n    }\r\n\r\n    \r\n    function () external payable {\r\n        buyTokens(msg.sender);\r\n    }\r\n\r\n    \r\n    function token() public view returns (IERC20) {\r\n        return _token;\r\n    }\r\n\r\n    \r\n    function wallet() public view returns (address payable) {\r\n        return _wallet;\r\n    }\r\n\r\n    \r\n    function rate() public view returns (uint256) {\r\n        return _rate;\r\n    }\r\n\r\n    \r\n    function weiRaised() public view returns (uint256) {\r\n        return _weiRaised;\r\n    }\r\n\r\n    \r\n    function buyTokens(address beneficiary) public nonReentrant payable {\r\n        uint256 weiAmount = msg.value;\r\n        _preValidatePurchase(beneficiary, weiAmount);\r\n\r\n        \r\n        uint256 tokens = _getTokenAmount(weiAmount);\r\n\r\n        \r\n        _weiRaised = _weiRaised.add(weiAmount);\r\n\r\n        _processPurchase(beneficiary, tokens);\r\n        emit TokensPurchased(msg.sender, beneficiary, weiAmount, tokens);\r\n\r\n        _updatePurchasingState(beneficiary, weiAmount);\r\n\r\n        _forwardFunds();\r\n        _postValidatePurchase(beneficiary, weiAmount);\r\n    }\r\n\r\n    \r\n    function _preValidatePurchase(address beneficiary, uint256 weiAmount) internal view {\r\n        require(beneficiary != address(0), \u0022Crowdsale: beneficiary is the zero address\u0022);\r\n        require(weiAmount != 0, \u0022Crowdsale: weiAmount is 0\u0022);\r\n    }\r\n\r\n    \r\n    function _postValidatePurchase(address beneficiary, uint256 weiAmount) internal view {\r\n        \r\n    }\r\n\r\n    \r\n    function _deliverTokens(address beneficiary, uint256 tokenAmount) internal {\r\n        _token.safeTransfer(beneficiary, tokenAmount);\r\n    }\r\n\r\n    \r\n    function _processPurchase(address beneficiary, uint256 tokenAmount) internal {\r\n        _deliverTokens(beneficiary, tokenAmount);\r\n    }\r\n\r\n    \r\n    function _updatePurchasingState(address beneficiary, uint256 weiAmount) internal {\r\n        \r\n    }\r\n\r\n    \r\n    function _getTokenAmount(uint256 weiAmount) internal view returns (uint256) {\r\n        return weiAmount.mul(_rate);\r\n    }\r\n\r\n    \r\n    function adjustRate(uint256 newRate) public {\r\n        require(newRate \u003E 0, \u0022Crowdsale-adjustRate: Rate has to be non-zero\u0022);\r\n        _rate = newRate;\r\n        emit RateAdjusted(newRate);\r\n    }\r\n\r\n    \r\n    function _forwardFunds() internal {\r\n        _wallet.transfer(msg.value);\r\n    }\r\n}\r\n\r\ncontract TimedCrowdsale is Crowdsale {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 private _openingTime;\r\n    uint256 private _closingTime;\r\n\r\n    \r\n    event TimedCrowdsaleExtended(uint256 prevClosingTime, uint256 newClosingTime);\r\n\r\n    \r\n    modifier onlyWhileOpen {\r\n        require(isOpen(), \u0022TimedCrowdsale: not open\u0022);\r\n        _;\r\n    }\r\n\r\n    \r\n    constructor (uint256 openingTime, uint256 closingTime) public {\r\n        \r\n        require(openingTime \u003E= block.timestamp, \u0022TimedCrowdsale: opening time is before current time\u0022);\r\n        \r\n        require(closingTime \u003E openingTime, \u0022TimedCrowdsale: opening time is not before closing time\u0022);\r\n\r\n        _openingTime = openingTime;\r\n        _closingTime = closingTime;\r\n    }\r\n\r\n    \r\n    function openingTime() public view returns (uint256) {\r\n        return _openingTime;\r\n    }\r\n\r\n    \r\n    function closingTime() public view returns (uint256) {\r\n        return _closingTime;\r\n    }\r\n\r\n    \r\n    function isOpen() public view returns (bool) {\r\n        \r\n        return block.timestamp \u003E= _openingTime \u0026\u0026 block.timestamp \u003C= _closingTime;\r\n    }\r\n\r\n    \r\n    function hasClosed() public view returns (bool) {\r\n        \r\n        return block.timestamp \u003E _closingTime;\r\n    }\r\n\r\n    \r\n    function _preValidatePurchase(address beneficiary, uint256 weiAmount) internal onlyWhileOpen view {\r\n        super._preValidatePurchase(beneficiary, weiAmount);\r\n    }\r\n\r\n    \r\n    function _extendTime(uint256 newClosingTime) internal {\r\n        require(!hasClosed(), \u0022TimedCrowdsale: already closed\u0022);\r\n        \r\n        require(newClosingTime \u003E _closingTime, \u0022TimedCrowdsale: new closing time is before current closing time\u0022);\r\n\r\n        emit TimedCrowdsaleExtended(_closingTime, newClosingTime);\r\n        _closingTime = newClosingTime;\r\n    }\r\n}\r\n\r\ncontract Secondary {\r\n    address private _primary;\r\n\r\n    \r\n    event PrimaryTransferred(\r\n        address recipient\r\n    );\r\n\r\n    \r\n    constructor () internal {\r\n        _primary = msg.sender;\r\n        emit PrimaryTransferred(_primary);\r\n    }\r\n\r\n    \r\n    modifier onlyPrimary() {\r\n        require(msg.sender == _primary, \u0022Secondary: caller is not the primary account\u0022);\r\n        _;\r\n    }\r\n\r\n    \r\n    function primary() public view returns (address) {\r\n        return _primary;\r\n    }\r\n\r\n    \r\n    function transferPrimary(address recipient) public onlyPrimary {\r\n        require(recipient != address(0), \u0022Secondary: new primary is the zero address\u0022);\r\n        _primary = recipient;\r\n        emit PrimaryTransferred(_primary);\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    \r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    \r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    \r\n    modifier onlyOwner() {\r\n        require(isOwner(), \u0022Ownable: caller is not the owner\u0022);\r\n        _;\r\n    }\r\n\r\n    \r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    \r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    \r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    \r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \u0022Ownable: new owner is the zero address\u0022);\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract ManagerRole is Ownable {\r\n    using Roles for Roles.Role;\r\n    using SafeMath for uint256;\r\n\r\n    event ManagerAdded(address indexed account);\r\n    event ManagerRemoved(address indexed account);\r\n\r\n    Roles.Role private managers;\r\n    uint256 private _numManager;\r\n\r\n    constructor() internal {\r\n        _addManager(msg.sender);\r\n        _numManager = 1;\r\n    }\r\n\r\n    \r\n    modifier onlyManager() {\r\n        require(isManager(msg.sender), \u0022ManagerRole-onlyManager: The account is not a manager\u0022);\r\n        _;\r\n    }\r\n\r\n    \r\n    \r\n    function addManagers(address[] calldata accounts) external onlyOwner {\r\n        uint256 length = accounts.length;\r\n        require(length \u003C= 256, \u0022ManagerRole-addManagers:too many accounts\u0022);\r\n        for (uint256 i = 0; i \u003C length; i\u002B\u002B) {\r\n            _addManager(accounts[i]);\r\n        }\r\n    }\r\n    \r\n    \r\n    function removeManager(address account) external onlyOwner {\r\n        _removeManager(account);\r\n    }\r\n\r\n    \r\n    function isManager(address account) public view returns (bool) {\r\n        return managers.has(account);\r\n    }\r\n\r\n    \r\n    function numManager() public view returns (uint256) {\r\n        return _numManager;\r\n    }\r\n\r\n    \r\n    function addManager(address account) public onlyOwner {\r\n        require(account != address(0), \u0022ManagerRole-addManager: account is zero\u0022);\r\n        _addManager(account);\r\n    }\r\n\r\n    \r\n    function renounceManager() public {\r\n        require(_numManager \u003E= 2, \u0022ManagerRole-renounceManager: Managers are fewer than 2\u0022);\r\n        _removeManager(msg.sender);\r\n    }\r\n\r\n    \r\n    function renounceOwnership() public onlyOwner {\r\n        revert(\u0022ManagerRole-renounceOwnership: Cannot renounce ownership\u0022);\r\n    }\r\n\r\n    \r\n    function _addManager(address account) internal {\r\n        _numManager = _numManager.add(1);\r\n        managers.add(account);\r\n        emit ManagerAdded(account);\r\n    }\r\n\r\n    \r\n    function _removeManager(address account) internal {\r\n        _numManager = _numManager.sub(1);\r\n        managers.remove(account);\r\n        emit ManagerRemoved(account);\r\n    }\r\n}\r\n\r\ncontract PausableManager is ManagerRole {\r\n\r\n    event BePaused(address manager);\r\n    event BeUnpaused(address manager);\r\n\r\n    bool private _paused;   \r\n\r\n    constructor() internal {\r\n        _paused = false;\r\n    }\r\n\r\n   \r\n    modifier whenNotPaused() {\r\n        require(!_paused, \u0022PausableManager-whenNotPaused: paused\u0022);\r\n        _;\r\n    }\r\n\r\n    \r\n    modifier whenPaused() {\r\n        require(_paused, \u0022PausableManager-whenPaused: not paused\u0022);\r\n        _;\r\n    }\r\n\r\n    \r\n    function paused() public view returns(bool) {\r\n        return _paused;\r\n    }\r\n\r\n    \r\n    function pause() public onlyManager whenNotPaused {\r\n        _paused = true;\r\n        emit BePaused(msg.sender);\r\n    }\r\n\r\n    \r\n    function unpause() public onlyManager whenPaused {\r\n        _paused = false;\r\n        emit BeUnpaused(msg.sender);\r\n    }\r\n}\r\n\r\ncontract ValidAddress {\r\n    \r\n    modifier onlyValidAddress(address _address) {\r\n        require(_address != address(0), \u0022ValidAddress-onlyValidAddress:Not a valid address\u0022);\r\n        _;\r\n    }\r\n\r\n    \r\n    modifier isSenderNot(address _address) {\r\n        require(_address != msg.sender, \u0022ValidAddress-isSenderNot:Address is the same as the sender\u0022);\r\n        _;\r\n    }\r\n\r\n    \r\n    modifier isSender(address _address) {\r\n        require(_address == msg.sender, \u0022ValidAddress-isSender: Address is different from the sender\u0022);\r\n        _;\r\n    }\r\n}\r\n\r\ncontract Whitelist is ValidAddress, PausableManager {\r\n\r\n    mapping (address =\u003E bool) private _isWhitelisted;       \r\n    mapping(address =\u003E uint) public _contributionAmounts;   \r\n    uint public totalWhiteListed;                           \r\n    address[] public holdersIndex;                          \r\n\r\n    event AdddWhitelisted(address indexed user);\r\n    event RemovedWhitelisted(address indexed user);\r\n\r\n\r\n    \r\n    function addWhitelisted(address user, uint256 maxAllowed) external onlyManager {\r\n        _addWhitelisted(user, maxAllowed);\r\n    }\r\n\r\n    \r\n    \r\n    function addWhitelistedMultiple(address[] calldata users, uint256[] calldata maxAllowed) external onlyManager {\r\n        uint256 length = users.length;\r\n        require(length \u003C= 256, \u0022Whitelist-addWhitelistedMultiple: List too long\u0022);\r\n        for (uint256 i = 0; i \u003C length; i\u002B\u002B) {\r\n            _addWhitelisted(users[i], maxAllowed[i]);\r\n        }\r\n    }\r\n\r\n    \r\n    function removeWhitelisted(address user)\r\n        external\r\n        onlyManager\r\n    {\r\n        _removeWhitelisted(user);\r\n    }\r\n\r\n    \r\n    \r\n    function removeWhitelistedMultiple(address[] calldata users)\r\n        external\r\n        onlyManager\r\n    {\r\n        uint256 length = users.length;\r\n        require(length \u003C= 256, \u0022Whitelist-removeWhitelistedMultiple: List too long\u0022);\r\n        for (uint256 i = 0; i \u003C length; i\u002B\u002B) {\r\n            _removeWhitelisted(users[i]);\r\n        }\r\n    }\r\n\r\n    \r\n    function isWhitelisted(address user) public view returns (bool) {\r\n        return _isWhitelisted[user];\r\n    }\r\n\r\n    \r\n    function returnMaxAmountForUser(address user) public view returns (uint256) {\r\n        return  _contributionAmounts[user];\r\n    }\r\n\r\n    \r\n    function _addWhitelisted(address user, uint maxToContribute)\r\n        internal\r\n        onlyValidAddress(user)\r\n    {\r\n        require(_isWhitelisted[user] == false, \u0022Whitelist-_addWhitelisted: account already whitelisted\u0022);\r\n        _isWhitelisted[user] = true;\r\n        _contributionAmounts[user] = maxToContribute;\r\n        totalWhiteListed\u002B\u002B;\r\n        holdersIndex.push(user);\r\n        emit AdddWhitelisted(user);\r\n    }\r\n\r\n    \r\n    function _removeWhitelisted(address user)\r\n        internal\r\n        onlyValidAddress(user)\r\n    {\r\n        require(_isWhitelisted[user] == true, \u0022Whitelist-_removeWhitelisted: account was not whitelisted\u0022);\r\n        _isWhitelisted[user] = false;\r\n        _contributionAmounts[user] = 0;\r\n        totalWhiteListed--;\r\n        emit RemovedWhitelisted(user);\r\n    }\r\n}\r\n\r\ncontract WhitelistCrowdsale is Whitelist, Crowdsale {\r\n    \r\n    function _preValidatePurchase(address beneficiary, uint256 weiAmount)\r\n        internal\r\n        view\r\n    {\r\n        require(isWhitelisted(beneficiary), \u0022WhitelistCrowdsale-_preValidatePurchase: beneficiary is not whitelisted\u0022);\r\n        super._preValidatePurchase(beneficiary, weiAmount);\r\n    }\r\n}\r\n\r\ncontract PostDeliveryCrowdsale is TimedCrowdsale, WhitelistCrowdsale {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address =\u003E uint256) private _balances;\r\n    __unstable__TokenVault private _vault;\r\n\r\n    constructor() public {\r\n        _vault = new __unstable__TokenVault();\r\n         \r\n        _addWhitelisted(address(_vault), 0);\r\n    }\r\n\r\n    \r\n    function withdrawTokens(address beneficiary) public {\r\n        require(hasClosed(), \u0022PostDeliveryCrowdsale: not closed\u0022);\r\n        uint256 amount = _balances[beneficiary];\r\n        require(amount \u003E 0, \u0022PostDeliveryCrowdsale: beneficiary is not due any tokens\u0022);\r\n\r\n        _balances[beneficiary] = 0;\r\n        _vault.transfer(token(), beneficiary, amount);\r\n    }\r\n\r\n    \r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    \r\n    function _processPurchase(address beneficiary, uint256 tokenAmount) internal {\r\n        _balances[beneficiary] = _balances[beneficiary].add(tokenAmount);\r\n        _deliverTokens(address(_vault), tokenAmount);\r\n    }\r\n}\r\n\r\ncontract __unstable__TokenVault is Secondary {\r\n    function transfer(IERC20 token, address to, uint256 amount) public onlyPrimary {\r\n        token.transfer(to, amount);\r\n    }\r\n}\r\n\r\ncontract FinalizableCrowdsale is TimedCrowdsale {\r\n    using SafeMath for uint256;\r\n\r\n    bool private _finalized;\r\n\r\n    event CrowdsaleFinalized();\r\n\r\n    constructor () internal {\r\n        _finalized = false;\r\n    }\r\n\r\n    \r\n    function finalized() public view returns (bool) {\r\n        return _finalized;\r\n    }\r\n\r\n    \r\n    function finalize() public {\r\n        require(!_finalized, \u0022FinalizableCrowdsale: already finalized\u0022);\r\n        require(hasClosed(), \u0022FinalizableCrowdsale: not closed\u0022);\r\n\r\n        _finalized = true;\r\n\r\n        _finalization();\r\n        emit CrowdsaleFinalized();\r\n    }\r\n\r\n    \r\n    function _finalization() internal {\r\n        \r\n    }\r\n}\r\n\r\ncontract CounterGuard {\r\n    \r\n    modifier onlyOnce(bool criterion) {\r\n        require(criterion == false, \u0022CounterGuard-onlyOnce: Already been set\u0022);\r\n        _;\r\n    }\r\n}\r\n\r\ncontract PausableCrowdsale is PausableManager, Crowdsale {\r\n\r\n    \r\n    function _preValidatePurchase(\r\n        address _beneficiary,\r\n        uint256 _weiAmount\r\n    )\r\n        internal\r\n        view\r\n        whenNotPaused\r\n    {\r\n        return super._preValidatePurchase(_beneficiary, _weiAmount);\r\n    }\r\n\r\n}\r\n\r\ncontract ECrowdsale is CounterGuard, WhitelistCrowdsale,\r\n                          PostDeliveryCrowdsale, FinalizableCrowdsale,\r\n                          PausableCrowdsale {\r\n   \r\n    bool private _setRole;              \r\n    uint256 private _maxCryptoSale;     \r\n    uint256 private _cryptoSaleAmount;  \r\n    bool private _noCryptoLimits;       \r\n    address payable private _wallet;    \r\n    uint256 private _weiRaised;\r\n\r\n    event WithdrawTokens(address beneficiary, uint256 value);\r\n    event RefundExtra(address beneficiary, uint256 value);\r\n    event NonEthTokenPurchased(address indexed beneficiary, uint256 tokenAmount);\r\n\r\n    \r\n\r\n    constructor(\r\n        uint256 startingTime,\r\n        uint256 endingTime,\r\n        uint256 rate,\r\n        address payable wallet,\r\n        IERC20 token,\r\n        uint maxCryptoSale\r\n    )\r\n        public\r\n        Crowdsale(rate, wallet, token)\r\n        TimedCrowdsale(startingTime, endingTime)\r\n         {\r\n            _wallet = wallet;\r\n            _maxCryptoSale = maxCryptoSale;\r\n            _noCryptoLimits = false;\r\n        }\r\n\r\n    \r\n    function nonEthPurchase(address beneficiary, uint256 tokenAmount)\r\n        public onlyManager\r\n    {\r\n        require(beneficiary != address(0), \u0022ECrowdsale-nonEthPurchase: beneficiary is the zero address\u0022);\r\n        _processPurchase(beneficiary, tokenAmount);\r\n        emit NonEthTokenPurchased(beneficiary, tokenAmount);\r\n    }\r\n\r\n    \r\n    function _preValidatePurchaseCrypto(address beneficiary, uint256 weiAmount) private view {\r\n         require(returnMaxAmountForUser(beneficiary).sub(balanceOf(beneficiary)) \u003E= weiAmount,\r\n                \u0022ECrowdsale-_preValidatePurchaseCrypto: contribution exceeds allowed amount\u0022);\r\n          super._preValidatePurchase(beneficiary, weiAmount);\r\n    }\r\n\r\n\r\n     \r\n    function nonEthPurchaseMulti(\r\n        address[] calldata beneficiaries,\r\n        uint256[] calldata amounts\r\n    )\r\n        external\r\n    {\r\n        uint256 length = amounts.length;\r\n        require(beneficiaries.length == length, \u0022length !=\u0022);\r\n        require(length \u003C= 256, \u0022ECrowdsale-nonEthPurchaseMulti: List too long, please shorten the array\u0022);\r\n        for (uint256 i = 0; i \u003C length; i\u002B\u002B) {\r\n            nonEthPurchase(beneficiaries[i], amounts[i]);\r\n        }\r\n    }\r\n\r\n    \r\n    function roleSetup(\r\n        address newOwner\r\n    )\r\n        public\r\n        onlyOwner\r\n        onlyOnce(_setRole)\r\n    {\r\n         if (address(newOwner) != address(msg.sender) ) {\r\n            addManager(newOwner);\r\n            _removeManager(msg.sender);\r\n            transferOwnership(newOwner);\r\n         }\r\n        _setRole = true;\r\n    }\r\n\r\n    \r\n    function withdrawTokens(address beneficiary) public {\r\n\r\n        require(finalized(), \u0022ECrowdsale:withdrawTokens - Crowdsale is not finalized\u0022);\r\n\r\n        uint256 balanceOf = balanceOf(beneficiary);\r\n        super.withdrawTokens(beneficiary);\r\n        emit WithdrawTokens(beneficiary, balanceOf);\r\n    }\r\n\r\n     \r\n    function claimTokens() public {\r\n\r\n        address payable beneficiary = msg.sender;\r\n        withdrawTokens(beneficiary);\r\n    }\r\n\r\n    \r\n    function cryptoSaleAmount() public view returns(uint256) {\r\n\r\n        return _cryptoSaleAmount;\r\n    }\r\n\r\n    \r\n    function allowRemainingTokensForCrypto() public onlyManager {\r\n\r\n        _noCryptoLimits = true;\r\n\r\n    }\r\n\r\n    \r\n    function extendTime(uint256 newClosingTime) public onlyManager {\r\n       super._extendTime(newClosingTime);\r\n    }\r\n\r\n    \r\n    function weiRaised() public view returns (uint256) {\r\n        return _weiRaised;\r\n    }\r\n\r\n    \r\n    function finalize() public  onlyManager {\r\n        super.finalize();\r\n    }\r\n\r\n    \r\n    function buyTokens(address beneficiary) public payable   {\r\n\r\n        uint256 extra = msg.value % rate();\r\n        uint256 amountPaid;\r\n\r\n        amountPaid = msg.value - extra;\r\n\r\n        _preValidatePurchaseCrypto(beneficiary, amountPaid);\r\n        uint256 tokens = amountPaid / rate();\r\n        _cryptoSaleAmount \u002B= tokens;  \r\n\r\n        require(_cryptoSaleAmount \u003C= _maxCryptoSale || _noCryptoLimits,\r\n        \u0022ECrowdsale-buyTokens: Max available for crypto sale has been reached\u0022);\r\n\r\n        _weiRaised \u002B= amountPaid;\r\n        _processPurchase(beneficiary, tokens);\r\n        _wallet.transfer(amountPaid);\r\n        emit TokensPurchased(msg.sender, beneficiary, amountPaid, tokens);\r\n\r\n        if (extra \u003E 0) {\r\n            msg.sender.transfer(extra);\r\n            emit RefundExtra(msg.sender, extra);\r\n        }\r\n    }\r\n\r\n    \r\n    function adjustRate(uint256 newRate) public onlyManager {\r\n        super.adjustRate(newRate);\r\n    }\r\n}\r\n\r\ncontract Token is CounterGuard, ERC20Detailed,\r\n    ERC20Capped, ERC20Burnable, PausableManager {\r\n\r\n    uint256 private constant ALLOCATION = 200000; \r\n    bool private _setRole;\r\n    address  payable public crowdsaleContractAddress;\r\n\r\n    event logPayment(address indexed paymentAddress, uint amount, uint date);\r\n\r\n    \r\n    struct Payment {\r\n\r\n        uint date;\r\n        uint amount;\r\n        address paymentContractAddress;\r\n    }\r\n\r\n    Payment[] public payments;  \r\n\r\n\r\n    \r\n    constructor(\r\n        string memory name,\r\n        string memory symbol,\r\n        uint8 decimals,\r\n        uint256 cap\r\n    )\r\n        public\r\n        ERC20Detailed(name, symbol, decimals)\r\n        ERC20Capped(cap) {\r\n            pause();\r\n        }\r\n\r\n\r\n    \r\n    modifier onlyWhitelisted(address user) {\r\n\r\n        require(ECrowdsale(crowdsaleContractAddress).isWhitelisted(user), \u0022Token-onlyWhitelisted: user is not whitelisted\u0022);\r\n        _;\r\n    }\r\n\r\n\r\n    \r\n    function registerPayment(address paymentAddress, uint amount) public  {\r\n\r\n        require(msg.sender == owner() || msg.sender == paymentAddress, \u0022Token-registerPayment: You are not authorized to make this call\u0022);\r\n\r\n        require(paymentAddress != address(0), \u0022Token-registerPayment: Payment address can\u0027t be 0x0\u0022);\r\n        require(amount \u003E 0, \u0022Token-registerPayment: Payment amount can\u0027t be 0\u0022);\r\n\r\n        uint index = payments.length;\r\n        payments.length \u002B\u002B;\r\n\r\n        payments[index].date = now;\r\n        payments[index].amount = amount;\r\n        payments[index].paymentContractAddress = paymentAddress;\r\n        emit logPayment(paymentAddress, amount, now);\r\n    }\r\n\r\n\r\n    \r\n    function returnPaymentNum() public view returns ( uint) {\r\n\r\n        return payments.length;\r\n    }\r\n\r\n\r\n    \r\n    function isWhitelisted(address user) public view returns (bool) {\r\n\r\n        return ECrowdsale(crowdsaleContractAddress).isWhitelisted(user);\r\n    }\r\n\r\n\r\n    \r\n    function transfer(address to, uint256 value)\r\n        public\r\n        whenNotPaused\r\n        onlyWhitelisted(to)\r\n        returns (bool)\r\n    {\r\n        \r\n        return super.transfer(to, value);\r\n    }\r\n\r\n    \r\n    function transferFrom(address from, address to, uint256 value)\r\n        public\r\n        whenNotPaused\r\n        onlyWhitelisted(to)\r\n        returns (bool)\r\n    {\r\n        return super.transferFrom(from, to, value);\r\n    }\r\n\r\n    \r\n    function approve(address spender, uint256 value) public whenNotPaused returns (bool) {\r\n        return super.approve(spender, value);\r\n    }\r\n\r\n    \r\n    function increaseAllowance(address spender, uint addedValue) public whenNotPaused returns (bool success) {\r\n        return super.increaseAllowance(spender, addedValue);\r\n    }\r\n\r\n    \r\n    function decreaseAllowance(address spender, uint subtractedValue) public whenNotPaused returns (bool success) {\r\n        return super.decreaseAllowance(spender, subtractedValue);\r\n    }\r\n\r\n    \r\n    function roleSetup(\r\n        address _newOwner,\r\n        address payable _crowdsaleContractAddress\r\n    )\r\n        public\r\n        onlyOwner\r\n        onlyOnce(_setRole)\r\n    {\r\n        _setRole = true;\r\n        crowdsaleContractAddress = _crowdsaleContractAddress;\r\n        mint(crowdsaleContractAddress, ALLOCATION);\r\n\r\n        if (address(_newOwner) != address(msg.sender) ) {\r\n            addManager(_newOwner);\r\n            addMinter(_newOwner);\r\n            _removeManager(msg.sender);\r\n            _removeMinter(msg.sender);\r\n            transferOwnership(_newOwner);\r\n        }\r\n    }\r\n}","ABI":"[{\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022string\u0022,\u0022name\u0022:\u0022name\u0022,\u0022type\u0022:\u0022string\u0022},{\u0022internalType\u0022:\u0022string\u0022,\u0022name\u0022:\u0022symbol\u0022,\u0022type\u0022:\u0022string\u0022},{\u0022internalType\u0022:\u0022uint8\u0022,\u0022name\u0022:\u0022decimals\u0022,\u0022type\u0022:\u0022uint8\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022cap\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022constructor\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022owner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022spender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022Approval\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022manager\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022BePaused\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022manager\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022BeUnpaused\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022ManagerAdded\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022ManagerRemoved\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022MinterAdded\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022MinterRemoved\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022previousOwner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022OwnershipTransferred\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022from\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022Transfer\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022paymentAddress\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022date\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022logPayment\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022addManager\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address[]\u0022,\u0022name\u0022:\u0022accounts\u0022,\u0022type\u0022:\u0022address[]\u0022}],\u0022name\u0022:\u0022addManagers\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022addMinter\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022owner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022spender\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022allowance\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022spender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022approve\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022balanceOf\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022burn\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022burnFrom\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022cap\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022crowdsaleContractAddress\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022address payable\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022decimals\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint8\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint8\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022spender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022subtractedValue\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022decreaseAllowance\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022success\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022spender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022addedValue\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022increaseAllowance\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022success\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022isManager\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022isMinter\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022isOwner\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022user\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022isWhitelisted\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022mint\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022name\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022string\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022numManager\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022owner\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022pause\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022paused\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022payments\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022date\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022paymentContractAddress\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022paymentAddress\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022registerPayment\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022removeManager\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022renounceManager\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022renounceMinter\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022renounceOwnership\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022returnPaymentNum\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_newOwner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022address payable\u0022,\u0022name\u0022:\u0022_crowdsaleContractAddress\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022roleSetup\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022symbol\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022string\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022totalSupply\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022transfer\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022from\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022transferFrom\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022transferOwnership\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022unpause\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022}]","ContractName":"Token","CompilerVersion":"v0.5.13\u002Bcommit.5b0b510c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000030d40000000000000000000000000000000000000000000000000000000000000000d454e4552434f4d20546f6b656e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003454e430000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://6964aebe0c7a9b899ae9fab8ea467a22ab6aab885010e4366f7616b09bf83460"}]