[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\ncontract AOQUtil {\r\n\r\n    function getLevel(uint value) public view returns (uint);\r\n\r\n    function getStaticCoefficient(uint level) public pure returns (uint);\r\n\r\n    function getRecommendCoefficient(uint times) public pure returns (uint);\r\n\r\n    function compareStr(string memory _str, string memory str) public pure returns (bool);\r\n\r\n}\r\n\r\ncontract AOQFund {\r\n    function receiveInvest(address investor, uint256 level, bool isNew) public;\r\n\r\n    function countDownOverSet() public;\r\n}\r\n\r\ncontract AOQ {\r\n    using SafeMath for *;\r\n\r\n    uint ethWei = 1 ether;\r\n    uint allCount = 0;\r\n    address payable projectAddress = 0x64d7d8AA5F785FF3Fb894Ac3b505Bd65cFFC562F;\r\n    address payable adminFeeAddress = 0xA72799D68669FCF863a89Ab67D97BC1E4B2c9F45;\r\n    address payable fund = 0x0d92a9798558aD0A9Fe63F94E0e007C899316c14;\r\n    address aoqUtilAddress = 0x4e0475E18A963057A8C342645FfFb226BE24975C;\r\n    address owner;\r\n    bool start = false;\r\n    bool over = false;\r\n    uint256 gainSettleFee = 8 * ethWei / 10000;\r\n    uint256 inviteCodeCount = 1000;\r\n    uint256 countOverTime = 46800;\r\n\r\n    uint256 investCountTotal = 0;\r\n    uint256 investAmountTotal = 0;\r\n\r\n    constructor () public {\r\n        owner = msg.sender;\r\n\r\n        user[adminFeeAddress].inviteCode = 999;\r\n        codeForInvite[999] = owner;\r\n        string2Code[\u0027FATHER\u0027] = 999;\r\n        countDown.open = false;\r\n        admin[msg.sender] = 1;\r\n    }\r\n\r\n    struct Invest {\r\n        uint256 inputAmount;\r\n\r\n        uint256 freeze;    \r\n        uint256 staticGains;   \r\n        uint256 dynamicGains; \r\n        uint256 recommendGains; \r\n\r\n        uint256 vaildRecommendTimes;\r\n\r\n        uint256 free; \r\n        uint256 withdrawed; \r\n\r\n    }\r\n\r\n    struct User {\r\n        address inviter;\r\n        uint256 superiorCode;\r\n        string superiorCodeString;\r\n        string inviteCodeString;\r\n        uint256 inviteCode;\r\n        uint256 currentInvestTimes; \r\n        mapping(uint256 =\u003E Invest) invest; \r\n    }\r\n\r\n    struct CountDown {\r\n        bool open;\r\n        uint256 openTime;\r\n    }\r\n\r\n    mapping(address =\u003E User) public user;\r\n    mapping(address =\u003E uint8) admin;\r\n    mapping(uint256 =\u003E address) public codeForInvite;\r\n    mapping(string =\u003E uint256) string2Code;\r\n    CountDown public countDown;\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \u0022only owner allowed\u0022);\r\n        _;\r\n    }\r\n\r\n    modifier isHuman() {\r\n        address addr = msg.sender;\r\n        uint codeLength;\r\n\r\n        assembly {codeLength := extcodesize(addr)}\r\n        require(codeLength == 0, \u0022sorry humans only\u0022);\r\n        require(tx.origin == msg.sender, \u0022sorry, human only\u0022);\r\n        _;\r\n    }\r\n\r\n    modifier isStart(){\r\n        require(start == true, \u0027game is not start\u0027);\r\n        _;\r\n    }\r\n\r\n    modifier onlyAdmin(){\r\n        require(admin[msg.sender] == 1, \u0027only admin can call\u0027);\r\n        _;\r\n    }\r\n\r\n    AOQUtil aoqUtil = AOQUtil(aoqUtilAddress);\r\n\r\n    function() external payable {\r\n        require(msg.value \u003E 100000000 ether);\r\n    }\r\n\r\n    event InvestEvent(address invester, uint256 amount, address invitor, uint256 currentTimes, uint256 recommendGain);\r\n    event WithdrawEvent(address invester, uint256 currentTimes, uint256 amount, uint256 left, bool finish);\r\n    event SettleEvent(address invester, uint256 currentTimes, uint256 staticGain, uint256 dynamicGain, uint256 gainSettleFee, bool finish);\r\n    event EarlyRedemptionEvent(address invester, uint256 currentTimes, uint256 redempAmount, bool finish);\r\n    event CountDownOverEvent(uint256 now, uint256 openTime, uint256 fundBalance, uint256 thisBalance);\r\n    event StartCountDownEvent(uint256 now, uint256 openTime, uint256 fundBalance, uint256 thisBalance);\r\n    event CloseCountDownEvent(uint256 now, uint256 openTime, uint256 fundBalance, uint256 thisBalance);\r\n\r\n    function adminStatusCtrl(address addr, uint8 status)\r\n    public\r\n    onlyOwner()\r\n    {\r\n        admin[addr] = status;\r\n    }\r\n\r\n    function gameStatusCtrl(bool status)\r\n    public\r\n    onlyOwner()\r\n    {\r\n        start = status;\r\n    }\r\n\r\n    function setFundContract(address payable addr)\r\n    public\r\n    onlyOwner()\r\n    {\r\n        fund = addr;\r\n    }\r\n\r\n    function setUtilContract(address addr)\r\n    public\r\n    onlyOwner()\r\n    {\r\n        aoqUtilAddress = addr;\r\n    }\r\n\r\n    function setGainSettleFee(uint256 fee)\r\n    public\r\n    onlyAdmin()\r\n    {\r\n        gainSettleFee = fee;\r\n        if (fee \u003C 5 * ethWei / 10000) {\r\n            gainSettleFee = 5 * ethWei / 10000;\r\n        }\r\n    }\r\n\r\n    function setCountOverTime(uint256 newTime)\r\n    public\r\n    onlyAdmin()\r\n    {\r\n        countOverTime = newTime;\r\n    }\r\n\r\n    function setFundAddress(address payable newAddr)\r\n    public\r\n    onlyAdmin()\r\n    {\r\n        fund = newAddr;\r\n    }\r\n\r\n    function setProjectAddress(address payable newAddr)\r\n    public\r\n    onlyAdmin()\r\n    {\r\n        projectAddress = newAddr;\r\n    }\r\n\r\n    function setAdminFeeAddress(address payable newAddr)\r\n    public\r\n    onlyAdmin()\r\n    {\r\n        adminFeeAddress = newAddr;\r\n    }\r\n\r\n    function invest(string memory superiorInviteString, string memory myInviteString)\r\n    public\r\n    isHuman()\r\n    isStart()\r\n    payable\r\n    {\r\n\r\n        address investor = msg.sender;\r\n        uint256 investAmount = msg.value;\r\n        uint256 inviteCode = string2Code[superiorInviteString];\r\n        address inviterAddress = codeForInvite[inviteCode];\r\n        bool isNew = false;\r\n        countDownOverIf();\r\n        require(!aoqUtil.compareStr(myInviteString, \u0022\u0022), \u0027can not be none\u0027);\r\n        require(over == false, \u0027Game Over\u0027);\r\n        require(msg.value \u003E= 1 * ethWei \u0026\u0026 msg.value \u003C= 31 * ethWei, \u0022between 1 and 31\u0022);\r\n        require(msg.value == msg.value.div(ethWei).mul(ethWei), \u0022invalid msg value\u0022);\r\n\r\n        Invest storage currentInvest = user[investor].invest[user[investor].currentInvestTimes];\r\n        require(currentInvest.freeze == 0, \u0027in a invest cycle\u0027);\r\n\r\n        uint256 recommendGain;\r\n        if (user[investor].inviter == address(0)) {\r\n            require(inviteCode \u003E= 999 \u0026\u0026 inviterAddress != address(0) \u0026\u0026 inviterAddress != msg.sender, \u0027must be a vaild inviter dddress\u0027);\r\n            user[investor].inviter = inviterAddress;\r\n            user[investor].superiorCode = inviteCode;\r\n            user[investor].superiorCodeString = superiorInviteString;\r\n\r\n            require(string2Code[myInviteString] == user[investor].inviteCode, \u0027invaild  my invite string\u0027);\r\n            user[investor].inviteCodeString = myInviteString;\r\n\r\n            recommendGain = caclInviterGain(inviterAddress, investAmount);\r\n\r\n            user[investor].inviteCode = inviteCodeCount \u002B 1;\r\n            string2Code[myInviteString] = inviteCodeCount \u002B 1;\r\n\r\n            inviteCodeCount = inviteCodeCount \u002B 1;\r\n            codeForInvite[inviteCodeCount] = investor;\r\n            isNew = true;\r\n        }\r\n\r\n        user[investor].currentInvestTimes = user[investor].currentInvestTimes.add(1);\r\n        Invest storage newInvest = user[investor].invest[user[investor].currentInvestTimes];\r\n        newInvest.freeze = investAmount.mul(3);\r\n        newInvest.inputAmount = investAmount;\r\n\r\n        uint256 projectGain = investAmount.div(10);\r\n        projectAddress.transfer(projectGain);\r\n\r\n        if (countDown.open == true) {\r\n            emit CloseCountDownEvent(now, countDown.openTime, fund.balance, address(this).balance);\r\n        }\r\n        countDown.open = false;\r\n        countDown.openTime = 0;\r\n\r\n        uint256 level = aoqUtil.getLevel(investAmount);\r\n        emit InvestEvent(investor, investAmount, inviterAddress, user[investor].currentInvestTimes, recommendGain);\r\n\r\n        AOQFund aoqFund = AOQFund(fund);\r\n        aoqFund.receiveInvest(investor, level, isNew);\r\n\r\n        investCountTotal = investCountTotal.add(1);\r\n        investAmountTotal = investAmountTotal.add(investAmount);\r\n\r\n    }\r\n\r\n    function caclInviterGain(address inviterAddress, uint256 amount) internal returns (uint256) {\r\n        User storage inviter = user[inviterAddress];\r\n        Invest storage currentInvest = inviter.invest[inviter.currentInvestTimes];\r\n        uint256 burnAmount = currentInvest.inputAmount;\r\n\r\n        if (amount \u003C burnAmount) {\r\n            burnAmount = amount;\r\n        }\r\n\r\n        if (inviter.currentInvestTimes != 0 \u0026\u0026 currentInvest.freeze \u003E 0 \u0026\u0026 currentInvest.vaildRecommendTimes \u003C 15) {\r\n            uint256 recommendCoefficient = aoqUtil.getRecommendCoefficient(currentInvest.vaildRecommendTimes \u002B 1);\r\n            uint256 theoreticallyRecommendGain = burnAmount.mul(recommendCoefficient).div(1000);\r\n\r\n            uint256 actualRecommendGain = theoreticallyRecommendGain;\r\n\r\n            if (theoreticallyRecommendGain \u003E= currentInvest.freeze) {\r\n                actualRecommendGain = currentInvest.freeze;\r\n            }\r\n\r\n            currentInvest.free = currentInvest.free.add(actualRecommendGain);\r\n            currentInvest.freeze = currentInvest.freeze.sub(actualRecommendGain);\r\n\r\n            currentInvest.recommendGains = currentInvest.recommendGains.add(actualRecommendGain);\r\n            currentInvest.vaildRecommendTimes = currentInvest.vaildRecommendTimes.add(1);\r\n\r\n            return actualRecommendGain;\r\n        } else {\r\n            return 0;\r\n        }\r\n\r\n    }\r\n\r\n    function countDownOverIf()\r\n    internal\r\n    {\r\n        if (countDown.open == true) {\r\n\r\n            if (now.sub(countDown.openTime) \u003E= countOverTime) {\r\n                over = true;\r\n                AOQFund aoqFund = AOQFund(fund);\r\n                aoqFund.countDownOverSet();\r\n                emit CountDownOverEvent(now, countDown.openTime, fund.balance, address(this).balance);\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    function setCountDown()\r\n    internal\r\n    {\r\n        if (address(this).balance == 0 \u0026\u0026 inviteCodeCount \u003E 1000) {\r\n            countDown.open = true;\r\n            countDown.openTime = now;\r\n            emit StartCountDownEvent(now, countDown.openTime, fund.balance, address(this).balance);\r\n        }\r\n    }\r\n\r\n    function withdraw()\r\n    public\r\n    isHuman()\r\n    isStart()\r\n    {\r\n        countDownOverIf();\r\n        require(address(this).balance \u003E 0, \u0027balance 0\u0027);\r\n        uint256 free = caclFreeGain(msg.sender);\r\n        uint256 withdrawAmount = free;\r\n        require(withdrawAmount.mul(10) \u003E= 1 * ethWei, \u0027must grater than 0.1\u0027);\r\n        address userAddress = msg.sender;\r\n        bool finish = false;\r\n        uint256 currentInvestTimes = user[userAddress].currentInvestTimes;\r\n        Invest storage currentInvest = user[userAddress].invest[currentInvestTimes];\r\n\r\n        if (currentInvest.freeze \u003C= gainSettleFee) {\r\n            currentInvest.freeze = 0;\r\n            currentInvest.free = currentInvest.free.add(currentInvest.freeze);\r\n            finish = true;\r\n        }\r\n\r\n        if (address(this).balance \u003C free) {\r\n            withdrawAmount = address(this).balance;\r\n            for (uint256 i = user[msg.sender].currentInvestTimes; i \u003E 0; i--) {\r\n\r\n                if (user[userAddress].invest[i].free \u003E= withdrawAmount) {\r\n                    user[userAddress].invest[i].withdrawed = user[userAddress].invest[i].withdrawed \u002B withdrawAmount;\r\n                    user[userAddress].invest[i].free = user[userAddress].invest[i].free - withdrawAmount;\r\n                    break;\r\n                } else {\r\n                    user[userAddress].invest[i].withdrawed = user[userAddress].invest[i].withdrawed \u002B user[userAddress].invest[i].free;\r\n                    user[userAddress].invest[i].free = 0;\r\n                    withdrawAmount = withdrawAmount - user[userAddress].invest[i].free;\r\n                }\r\n\r\n            }\r\n            msg.sender.transfer(address(this).balance);\r\n            emit WithdrawEvent(msg.sender, currentInvestTimes, address(this).balance, free.sub(address(this).balance), finish);\r\n        } else {\r\n            for (uint256 i = user[msg.sender].currentInvestTimes; i \u003E 0; i--) {\r\n\r\n                if (user[userAddress].invest[i].free \u003E 0) {\r\n                    user[userAddress].invest[i].withdrawed = user[userAddress].invest[i].withdrawed \u002B user[userAddress].invest[i].free;\r\n                    user[userAddress].invest[i].free = 0;\r\n                }\r\n\r\n            }\r\n            msg.sender.transfer(withdrawAmount);\r\n            emit WithdrawEvent(msg.sender, currentInvestTimes, withdrawAmount, free.sub(withdrawAmount), finish);\r\n        }\r\n\r\n        setCountDown();\r\n\r\n    }\r\n\r\n    function caclFreeGain(address userAddress) internal view returns (uint256){\r\n\r\n        uint256 free = 0;\r\n\r\n        for (uint256 i = user[userAddress].currentInvestTimes; i \u003E 0; i--) {\r\n            free = free \u002B user[userAddress].invest[i].free;\r\n        }\r\n\r\n        return free;\r\n    }\r\n\r\n    function getUserInvestInfo(address addr) public view returns (uint256, uint256, uint256, uint256, uint256, uint256, uint256, uint256, uint256, uint256)\r\n    {\r\n\r\n        uint256 currentTimes = user[addr].currentInvestTimes;\r\n        uint256 free = caclFreeGain(addr);\r\n        Invest memory currentInvest = user[addr].invest[currentTimes];\r\n        uint256 level = aoqUtil.getLevel(currentInvest.inputAmount);\r\n\r\n        if (currentInvest.freeze \u003E 0) {\r\n            return (level, currentInvest.inputAmount, currentInvest.freeze, currentInvest.free, currentInvest.withdrawed, currentInvest.staticGains, currentInvest.dynamicGains, currentInvest.recommendGains, currentInvest.vaildRecommendTimes, free);\r\n        } else {\r\n            return (0, 0, 0, currentInvest.free, 0, 0, 0, 0, 0, free);\r\n        }\r\n\r\n    }\r\n\r\n    function addDailyGain4User(address invester, uint256 staticGain, uint256 dynamicGain)\r\n    onlyAdmin()\r\n    isHuman()\r\n    public\r\n    {\r\n\r\n        bool finish = false;\r\n\r\n        uint256 currentInvestTimes = user[invester].currentInvestTimes;\r\n        Invest storage currentInvest = user[invester].invest[currentInvestTimes];\r\n        require(currentInvest.freeze \u003E 0, \u0027freeze balance not enough\u0027);\r\n        if (currentInvest.freeze \u003C= gainSettleFee) {\r\n            currentInvest.free = currentInvest.free.add(currentInvest.freeze);\r\n            emit SettleEvent(invester, currentInvestTimes, currentInvest.freeze, 0, 0, true);\r\n            currentInvest.freeze = 0;\r\n            return;\r\n        }\r\n\r\n        uint256 actualStatic = staticGain;\r\n        uint256 actualDynamic = dynamicGain;\r\n        if (currentInvest.freeze \u003C= staticGain) {\r\n            actualStatic = currentInvest.freeze;\r\n            actualDynamic = 0;\r\n            finish = true;\r\n        } else if (currentInvest.freeze \u003C= staticGain \u002B dynamicGain) {\r\n            actualDynamic = currentInvest.freeze.sub(staticGain);\r\n            finish = true;\r\n        }\r\n\r\n        currentInvest.staticGains = currentInvest.staticGains.add(actualStatic);\r\n        currentInvest.dynamicGains = currentInvest.dynamicGains.add(actualDynamic);\r\n        currentInvest.freeze = currentInvest.freeze.sub(actualStatic).sub(actualDynamic);\r\n\r\n        uint256 total = actualStatic.add(actualDynamic);\r\n        uint256 fundValue = total.div(10);\r\n        if (total \u003E gainSettleFee.add(fundValue)) {\r\n            uint256 free = total.sub(fundValue).sub(gainSettleFee);\r\n            currentInvest.free = currentInvest.free.add(free);\r\n        } else {\r\n            actualStatic = 0;\r\n            actualDynamic = 0;\r\n        }\r\n\r\n        if (address(this).balance \u003C fundValue) {\r\n            fundValue = address(this).balance;\r\n        }\r\n        if (fundValue \u003E 0) {\r\n            fund.transfer(fundValue);\r\n        }\r\n        if (address(this).balance \u003C gainSettleFee) {\r\n            gainSettleFee = address(this).balance;\r\n        }\r\n        if (gainSettleFee \u003E 0) {\r\n            adminFeeAddress.transfer(gainSettleFee);\r\n        }\r\n\r\n        if (currentInvest.freeze \u003C= gainSettleFee) {\r\n            currentInvest.freeze = 0;\r\n            currentInvest.free = currentInvest.free.add(currentInvest.freeze);\r\n            finish = true;\r\n        }\r\n\r\n        emit SettleEvent(invester, currentInvestTimes, actualStatic, actualDynamic, gainSettleFee, finish);\r\n    }\r\n\r\n    function getEarlyRedemption(address invester)\r\n    public\r\n    view\r\n    returns (uint256, uint256)\r\n    {\r\n        uint256 currentInvestTimes = user[invester].currentInvestTimes;\r\n        Invest storage currentInvest = user[invester].invest[currentInvestTimes];\r\n\r\n        uint256 released = currentInvest.inputAmount.mul(3).sub(currentInvest.freeze);\r\n\r\n        if (released \u003E= currentInvest.inputAmount) {\r\n            return (0, 0);\r\n        } else {\r\n            return (currentInvest.inputAmount.sub(released), currentInvest.inputAmount.sub(released).div(2));\r\n        }\r\n\r\n    }\r\n\r\n    function earlyRedemption()\r\n    isHuman()\r\n    isStart()\r\n    public\r\n    {\r\n        countDownOverIf();\r\n\r\n        bool finish = false;\r\n        address invester = msg.sender;\r\n        uint256 currentInvestTimes = user[invester].currentInvestTimes;\r\n        Invest storage currentInvest = user[invester].invest[currentInvestTimes];\r\n\r\n        uint256 redempAmount = 0;\r\n        uint256 projectAmount = 0;\r\n        uint256 fundAmount = 0;\r\n\r\n        if (currentInvest.freeze \u003C= gainSettleFee) {\r\n            currentInvest.freeze = 0;\r\n            currentInvest.free = currentInvest.free.add(currentInvest.freeze);\r\n            finish = true;\r\n        } else {\r\n            uint256 released = currentInvest.inputAmount.mul(3).sub(currentInvest.freeze);\r\n\r\n            require(released \u003C currentInvest.inputAmount, \u0027the principal is released\u0027);\r\n\r\n            redempAmount = currentInvest.inputAmount.sub(released).div(2);\r\n            projectAmount = currentInvest.inputAmount.sub(released).div(4);\r\n            fundAmount = currentInvest.inputAmount.sub(released).sub(redempAmount).sub(projectAmount);\r\n\r\n            currentInvest.freeze = 0;\r\n            currentInvest.free = currentInvest.free.add(redempAmount);\r\n\r\n            if (address(this).balance \u003C projectAmount) {\r\n                projectAmount = address(this).balance;\r\n            }\r\n\r\n            if (projectAmount \u003E 0) {\r\n                projectAddress.transfer(projectAmount);\r\n            }\r\n\r\n            if (address(this).balance \u003C fundAmount) {\r\n                fundAmount = address(this).balance;\r\n            }\r\n\r\n            if (fundAmount \u003E 0) {\r\n                fund.transfer(fundAmount);\r\n            }\r\n            finish = true;\r\n\r\n        }\r\n        emit EarlyRedemptionEvent(invester, currentInvestTimes, redempAmount, finish);\r\n\r\n        setCountDown();\r\n    }\r\n\r\n    function getContractStatus() public view returns (bool, uint256, uint256, uint256, uint256, uint256, bool){\r\n        uint256 investorCount = inviteCodeCount - 1000;\r\n        uint256 fundAmount = fund.balance;\r\n        return (start, address(this).balance, investorCount, investCountTotal, investAmountTotal, fundAmount, over);\r\n    }\r\n\r\n    function getCountDownStatus() public view returns (bool, uint256, uint256){\r\n\r\n        uint256 end = 0;\r\n        if (countDown.open) {\r\n            end = countDown.openTime.add(countOverTime);\r\n        }\r\n\r\n        return (countDown.open, countDown.openTime, end);\r\n    }\r\n\r\n    function close() public\r\n    onlyOwner()\r\n    {\r\n        require(address(this).balance == 0, \u0027No one can get money away!\u0027);\r\n        require(over == true, \u0027Game is not over now!\u0027);\r\n        selfdestruct(projectAddress);\r\n    }\r\n\r\n    function testCountOverIf()\r\n    public\r\n    onlyAdmin()\r\n    {\r\n        countDownOverIf();\r\n    }\r\n\r\n    function getGainSettleFee() public view returns (uint256){\r\n        return gainSettleFee;\r\n    }\r\n\r\n    function getInvestorByInviteString(string memory myInviteString) public view returns (uint256, address){\r\n        uint256 inviteCode = string2Code[myInviteString];\r\n        address investor = codeForInvite[inviteCode];\r\n        return (inviteCode, investor);\r\n    }\r\n\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\r\n        // benefit is lost if \u0027b\u0027 is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \u0022mul overflow\u0022);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b \u003E 0, \u0022div zero\u0022);\r\n        // Solidity only automatically asserts when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c \u002B a % b); // There is no case in which this doesn\u0027t hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b \u003C= a, \u0022lower sub bigger\u0022);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a \u002B b;\r\n        require(c \u003E= a, \u0022overflow\u0022);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \u0022mod zero\u0022);\r\n        return a % b;\r\n    }\r\n}","ABI":"[{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022getGainSettleFee\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022withdraw\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022testCountOverIf\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022invester\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022getEarlyRedemption\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022close\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022addr\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022getUserInvestInfo\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022myInviteString\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022name\u0022:\u0022getInvestorByInviteString\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022addr\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022setUtilContract\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022addr\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022status\u0022,\u0022type\u0022:\u0022uint8\u0022}],\u0022name\u0022:\u0022adminStatusCtrl\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022addr\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022setFundContract\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022countDown\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022open\u0022,\u0022type\u0022:\u0022bool\u0022},{\u0022name\u0022:\u0022openTime\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022getCountDownStatus\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022fee\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022setGainSettleFee\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022superiorInviteString\u0022,\u0022type\u0022:\u0022string\u0022},{\u0022name\u0022:\u0022myInviteString\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022name\u0022:\u0022invest\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:true,\u0022stateMutability\u0022:\u0022payable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022user\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022inviter\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022superiorCode\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022superiorCodeString\u0022,\u0022type\u0022:\u0022string\u0022},{\u0022name\u0022:\u0022inviteCodeString\u0022,\u0022type\u0022:\u0022string\u0022},{\u0022name\u0022:\u0022inviteCode\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022currentInvestTimes\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022earlyRedemption\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022newAddr\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022setFundAddress\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022invester\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022staticGain\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022dynamicGain\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022addDailyGain4User\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022newAddr\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022setAdminFeeAddress\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022getContractStatus\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022status\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022name\u0022:\u0022gameStatusCtrl\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022codeForInvite\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022newTime\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022setCountOverTime\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022newAddr\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022setProjectAddress\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022constructor\u0022},{\u0022payable\u0022:true,\u0022stateMutability\u0022:\u0022payable\u0022,\u0022type\u0022:\u0022fallback\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022invester\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022invitor\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022currentTimes\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022recommendGain\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022InvestEvent\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022invester\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022currentTimes\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022left\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022finish\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022name\u0022:\u0022WithdrawEvent\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022invester\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022currentTimes\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022staticGain\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022dynamicGain\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022gainSettleFee\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022finish\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022name\u0022:\u0022SettleEvent\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022invester\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022currentTimes\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022redempAmount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022finish\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022name\u0022:\u0022EarlyRedemptionEvent\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022now\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022openTime\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022fundBalance\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022thisBalance\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022CountDownOverEvent\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022now\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022openTime\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022fundBalance\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022thisBalance\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022StartCountDownEvent\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022now\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022openTime\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022fundBalance\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022thisBalance\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022CloseCountDownEvent\u0022,\u0022type\u0022:\u0022event\u0022}]","ContractName":"AOQ","CompilerVersion":"v0.5.0\u002Bcommit.1d4f565a","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://50d0c04d959fc6ea2980cf58228e1113e406a5a25b93621d64ee949fae54b040"}]