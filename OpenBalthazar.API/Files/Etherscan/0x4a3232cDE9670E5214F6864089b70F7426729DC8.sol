[{"SourceCode":"pragma solidity 0.4.25;\r\n\r\ncontract Auth {\r\n\r\n  address internal mainAdmin;\r\n  address internal backupAdmin;\r\n\r\n  event OwnershipTransferred(address indexed _previousOwner, address indexed _newOwner);\r\n\r\n  constructor(\r\n    address _mainAdmin,\r\n    address _backupAdmin\r\n  ) internal {\r\n    mainAdmin = _mainAdmin;\r\n    backupAdmin = _backupAdmin;\r\n  }\r\n\r\n  modifier onlyMainAdmin() {\r\n    require(isMainAdmin(), \u0022onlyMainAdmin\u0022);\r\n    _;\r\n  }\r\n\r\n  modifier onlyBackupAdmin() {\r\n    require(isBackupAdmin(), \u0022onlyBackupAdmin\u0022);\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address _newOwner) onlyBackupAdmin internal {\r\n    require(_newOwner != address(0x0));\r\n    mainAdmin = _newOwner;\r\n    emit OwnershipTransferred(msg.sender, _newOwner);\r\n  }\r\n\r\n  function isMainAdmin() public view returns (bool) {\r\n    return msg.sender == mainAdmin;\r\n  }\r\n\r\n  function isBackupAdmin() public view returns (bool) {\r\n    return msg.sender == backupAdmin;\r\n  }\r\n}\r\n\r\ncontract Fomo5k is Auth {\r\n\r\n  struct User {\r\n    bool isExist;\r\n    uint id;\r\n    uint referrerID;\r\n    address[] referral;\r\n    mapping(uint =\u003E uint) levelExpired;\r\n    uint level;\r\n  }\r\n\r\n  uint REFERRER_1_LEVEL_LIMIT = 2;\r\n  uint PERIOD_LENGTH = 100 days;\r\n  uint public totalUser = 1;\r\n\r\n  mapping(uint =\u003E uint) public LEVEL_PRICE;\r\n\r\n  mapping (address =\u003E User) public users;\r\n  mapping (uint =\u003E address) public userLists;\r\n  uint public userIdCounter = 0;\r\n  address cAccount;\r\n\r\n  event Registered(address indexed user, address indexed inviter, uint id, uint time);\r\n  event LevelBought(address indexed user, uint indexed id, uint level, uint time);\r\n  event MoneyReceived(address indexed user, uint indexed id, address indexed from, uint level, uint amount, uint time);\r\n  event MoneyMissed(address indexed user, uint indexed id, address indexed from, uint level, uint amount, uint time);\r\n\r\n  constructor(\r\n    address _rootAccount,\r\n    address _cAccount,\r\n    address _backupAdmin\r\n  )\r\n  public\r\n  Auth(msg.sender, _backupAdmin)\r\n  {\r\n    LEVEL_PRICE[1] = 0.1 ether;\r\n    LEVEL_PRICE[2] = 0.16 ether;\r\n    LEVEL_PRICE[3] = 0.3 ether;\r\n    LEVEL_PRICE[4] = 1 ether;\r\n    LEVEL_PRICE[5] = 3 ether;\r\n    LEVEL_PRICE[6] = 8 ether;\r\n    LEVEL_PRICE[7] = 16 ether;\r\n    LEVEL_PRICE[8] = 31 ether;\r\n    LEVEL_PRICE[9] = 60 ether;\r\n    LEVEL_PRICE[10] = 120 ether;\r\n\r\n    User memory user;\r\n\r\n    user = User({\r\n      isExist: true,\r\n      id: userIdCounter,\r\n      referrerID: 0,\r\n      referral: new address[](0),\r\n      level: 1\r\n    });\r\n    users[_rootAccount] = user;\r\n    userLists[userIdCounter] = _rootAccount;\r\n    cAccount = _cAccount;\r\n  }\r\n\r\n  function updateMainAdmin(address _admin) public {\r\n    transferOwnership(_admin);\r\n  }\r\n\r\n  function updateCAccount(address _cAccount) onlyMainAdmin public {\r\n    cAccount = _cAccount;\r\n  }\r\n\r\n  function () external payable {\r\n    uint level;\r\n\r\n    if(msg.value == LEVEL_PRICE[1]) level = 1;\r\n    else if(msg.value == LEVEL_PRICE[2]) level = 2;\r\n    else if(msg.value == LEVEL_PRICE[3]) level = 3;\r\n    else if(msg.value == LEVEL_PRICE[4]) level = 4;\r\n    else if(msg.value == LEVEL_PRICE[5]) level = 5;\r\n    else if(msg.value == LEVEL_PRICE[6]) level = 6;\r\n    else if(msg.value == LEVEL_PRICE[7]) level = 7;\r\n    else if(msg.value == LEVEL_PRICE[8]) level = 8;\r\n    else if(msg.value == LEVEL_PRICE[9]) level = 9;\r\n    else if(msg.value == LEVEL_PRICE[10]) level = 10;\r\n    else revert(\u0027Incorrect Value send\u0027);\r\n\r\n    if(users[msg.sender].isExist) buyLevel(level);\r\n    else if(level == 1) {\r\n      uint refId = 0;\r\n      address referrer = bytesToAddress(msg.data);\r\n\r\n      if(users[referrer].isExist) refId = users[referrer].id;\r\n      else revert(\u0027Incorrect referrer\u0027);\r\n\r\n      regUser(refId);\r\n    }\r\n    else revert(\u0027Please buy first level for 0.1 ETH\u0027);\r\n  }\r\n\r\n  function regUser(uint _referrerID) public payable {\r\n    require(!users[msg.sender].isExist, \u0027User exist\u0027);\r\n    require(_referrerID \u003E= 0 \u0026\u0026 _referrerID \u003C= userIdCounter, \u0027Incorrect referrer Id\u0027);\r\n    require(msg.value == LEVEL_PRICE[1], \u0027Incorrect Value\u0027);\r\n\r\n    if(users[userLists[_referrerID]].referral.length \u003E= REFERRER_1_LEVEL_LIMIT) _referrerID = users[findFreeReferrer(userLists[_referrerID])].id;\r\n\r\n    User memory user;\r\n    userIdCounter\u002B\u002B;\r\n\r\n    user = User({\r\n      isExist: true,\r\n      id: userIdCounter,\r\n      referrerID: _referrerID,\r\n      referral: new address[](0),\r\n      level: 1\r\n    });\r\n\r\n    users[msg.sender] = user;\r\n    userLists[userIdCounter] = msg.sender;\r\n\r\n    users[msg.sender].levelExpired[1] = now \u002B PERIOD_LENGTH;\r\n\r\n    users[userLists[_referrerID]].referral.push(msg.sender);\r\n    totalUser \u002B= 1;\r\n    emit Registered(msg.sender, userLists[_referrerID], userIdCounter, now);\r\n\r\n    payForLevel(1, msg.sender);\r\n  }\r\n\r\n  function buyLevel(uint _level) public payable {\r\n    require(users[msg.sender].isExist, \u0027User not exist\u0027);\r\n    require(_level \u003E 0 \u0026\u0026 _level \u003C= 10, \u0027Incorrect level\u0027);\r\n\r\n    if(_level == 1) {\r\n      require(msg.value == LEVEL_PRICE[1], \u0027Incorrect Value\u0027);\r\n      users[msg.sender].levelExpired[1] \u002B= PERIOD_LENGTH;\r\n    }\r\n    else {\r\n      require(msg.value == LEVEL_PRICE[_level], \u0027Incorrect Value\u0027);\r\n\r\n      for(uint l =_level - 1; l \u003E 0; l--) require(users[msg.sender].levelExpired[l] \u003E= now, \u0027Buy the previous level\u0027);\r\n\r\n      if(users[msg.sender].levelExpired[_level] == 0 || users[msg.sender].levelExpired[_level] \u003C now) {\r\n        users[msg.sender].levelExpired[_level] = now \u002B PERIOD_LENGTH;\r\n      } else {\r\n        users[msg.sender].levelExpired[_level] \u002B= PERIOD_LENGTH;\r\n      }\r\n    }\r\n    users[msg.sender].level = _level;\r\n    emit LevelBought(msg.sender, users[msg.sender].id, _level, now);\r\n\r\n    payForLevel(_level, msg.sender);\r\n  }\r\n\r\n  function payForLevel(uint _level, address _user) internal {\r\n    address referer;\r\n    address referer1;\r\n    address referer2;\r\n    address referer3;\r\n    address referer4;\r\n\r\n    if(_level == 1 || _level == 6) {\r\n      referer = userLists[users[_user].referrerID];\r\n    }\r\n    else if(_level == 2 || _level == 7) {\r\n      referer1 = userLists[users[_user].referrerID];\r\n      referer = userLists[users[referer1].referrerID];\r\n    }\r\n    else if(_level == 3 || _level == 8) {\r\n      referer1 = userLists[users[_user].referrerID];\r\n      referer2 = userLists[users[referer1].referrerID];\r\n      referer = userLists[users[referer2].referrerID];\r\n    }\r\n    else if(_level == 4 || _level == 9) {\r\n      referer1 = userLists[users[_user].referrerID];\r\n      referer2 = userLists[users[referer1].referrerID];\r\n      referer3 = userLists[users[referer2].referrerID];\r\n      referer = userLists[users[referer3].referrerID];\r\n    }\r\n    else if(_level == 5 || _level == 10) {\r\n      referer1 = userLists[users[_user].referrerID];\r\n      referer2 = userLists[users[referer1].referrerID];\r\n      referer3 = userLists[users[referer2].referrerID];\r\n      referer4 = userLists[users[referer3].referrerID];\r\n      referer = userLists[users[referer4].referrerID];\r\n    }\r\n\r\n    if(users[referer].isExist \u0026\u0026 users[referer].id \u003E 0) {\r\n      bool sent = false;\r\n      if(users[referer].levelExpired[_level] \u003E= now \u0026\u0026 users[referer].level == _level) {\r\n        sent = address(uint160(referer)).send(LEVEL_PRICE[_level]);\r\n\r\n        if (sent) {\r\n          emit MoneyReceived(referer, users[referer].id, msg.sender, _level, LEVEL_PRICE[_level], now);\r\n        }\r\n      }\r\n      if(!sent) {\r\n        emit MoneyMissed(referer, users[referer].id, msg.sender, _level, LEVEL_PRICE[_level], now);\r\n\r\n        payForLevel(_level, referer);\r\n      }\r\n    } else {\r\n      cAccount.transfer(LEVEL_PRICE[_level]);\r\n    }\r\n  }\r\n\r\n  function findFreeReferrer(address _user) public view returns(address) {\r\n    if(users[_user].referral.length \u003C REFERRER_1_LEVEL_LIMIT) return _user;\r\n\r\n    address[] memory referrals = new address[](126);\r\n    referrals[0] = users[_user].referral[0];\r\n    referrals[1] = users[_user].referral[1];\r\n\r\n    address freeReferrer;\r\n    bool noFreeReferrer = true;\r\n\r\n    for(uint i = 0; i \u003C 126; i\u002B\u002B) {\r\n      if(users[referrals[i]].referral.length == REFERRER_1_LEVEL_LIMIT) {\r\n        if(i \u003C 62) {\r\n          referrals[(i\u002B1)*2] = users[referrals[i]].referral[0];\r\n          referrals[(i\u002B1)*2\u002B1] = users[referrals[i]].referral[1];\r\n        }\r\n      }\r\n      else {\r\n        noFreeReferrer = false;\r\n        freeReferrer = referrals[i];\r\n        break;\r\n      }\r\n    }\r\n\r\n    require(!noFreeReferrer, \u0027No Free Referrer\u0027);\r\n\r\n    return freeReferrer;\r\n  }\r\n\r\n  function viewUserReferral(address _user) public view returns(address[] memory) {\r\n    return users[_user].referral;\r\n  }\r\n\r\n  function viewUserLevelExpired(address _user, uint _level) public view returns(uint) {\r\n    return users[_user].levelExpired[_level];\r\n  }\r\n\r\n  function showMe() public view returns (bool, uint, uint) {\r\n    User storage user = users[msg.sender];\r\n    return (user.isExist, user.id, user.level);\r\n  }\r\n\r\n  function levelData() public view returns (uint, uint, uint, uint, uint, uint, uint, uint, uint, uint) {\r\n    return (\r\n      users[msg.sender].levelExpired[1],\r\n      users[msg.sender].levelExpired[2],\r\n      users[msg.sender].levelExpired[3],\r\n      users[msg.sender].levelExpired[4],\r\n      users[msg.sender].levelExpired[5],\r\n      users[msg.sender].levelExpired[6],\r\n      users[msg.sender].levelExpired[7],\r\n      users[msg.sender].levelExpired[8],\r\n      users[msg.sender].levelExpired[9],\r\n      users[msg.sender].levelExpired[10]\r\n    );\r\n  }\r\n\r\n  function bytesToAddress(bytes memory bys) private pure returns (address addr) {\r\n    assembly {\r\n      addr := mload(add(bys, 20))\r\n    }\r\n  }\r\n}","ABI":"[{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_cAccount\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022updateCAccount\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022isMainAdmin\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_user\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022findFreeReferrer\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022userIdCounter\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022userLists\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_user\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022viewUserReferral\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address[]\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022LEVEL_PRICE\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_referrerID\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022regUser\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:true,\u0022stateMutability\u0022:\u0022payable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022isBackupAdmin\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022showMe\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022users\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022isExist\u0022,\u0022type\u0022:\u0022bool\u0022},{\u0022name\u0022:\u0022id\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022referrerID\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022level\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_user\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_level\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022viewUserLevelExpired\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_admin\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022updateMainAdmin\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022totalUser\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022levelData\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_level\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022buyLevel\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:true,\u0022stateMutability\u0022:\u0022payable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[{\u0022name\u0022:\u0022_rootAccount\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_cAccount\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_backupAdmin\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022constructor\u0022},{\u0022payable\u0022:true,\u0022stateMutability\u0022:\u0022payable\u0022,\u0022type\u0022:\u0022fallback\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022user\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022inviter\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022id\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022time\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022Registered\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022user\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022id\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022level\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022time\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022LevelBought\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022user\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022id\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022from\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022level\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022time\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022MoneyReceived\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022user\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022id\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022from\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022level\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022time\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022MoneyMissed\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022_previousOwner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022_newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022OwnershipTransferred\u0022,\u0022type\u0022:\u0022event\u0022}]","ContractName":"Fomo5k","CompilerVersion":"v0.4.25\u002Bcommit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000118c11862150f130121d5fe1d4c9f02263fa079c00000000000000000000000054f55427c9af43a11644ffdb0d151fe9f40d0bca000000000000000000000000118c11862150f130121d5fe1d4c9f02263fa079c","Library":"","SwarmSource":"bzzr://0828e6c0275fbb801f27d38cc8079bf8546d1e4076521357503f3fd50b51cce2"}]