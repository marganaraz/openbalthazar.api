[{"SourceCode":"// File: contracts/UniswapExchangeInterface.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\ncontract UniswapExchangeInterface {\r\n    // Address of ERC20 token sold on this exchange\r\n    function tokenAddress() external view returns (address token);\r\n    // Address of Uniswap Factory\r\n    function factoryAddress() external view returns (address factory);\r\n    // Provide Liquidity\r\n    function addLiquidity(uint256 min_liquidity, uint256 max_tokens, uint256 deadline) external payable returns (uint256);\r\n    function removeLiquidity(uint256 amount, uint256 min_eth, uint256 min_tokens, uint256 deadline) external returns (uint256, uint256);\r\n    // Get Prices\r\n    function getEthToTokenInputPrice(uint256 eth_sold) external view returns (uint256 tokens_bought);\r\n    function getEthToTokenOutputPrice(uint256 tokens_bought) external view returns (uint256 eth_sold);\r\n    function getTokenToEthInputPrice(uint256 tokens_sold) external view returns (uint256 eth_bought);\r\n    function getTokenToEthOutputPrice(uint256 eth_bought) external view returns (uint256 tokens_sold);\r\n    // Trade ETH to ERC20\r\n    function ethToTokenSwapInput(uint256 min_tokens, uint256 deadline) external payable returns (uint256  tokens_bought);\r\n    function ethToTokenTransferInput(uint256 min_tokens, uint256 deadline, address recipient) external payable returns (uint256  tokens_bought);\r\n    function ethToTokenSwapOutput(uint256 tokens_bought, uint256 deadline) external payable returns (uint256  eth_sold);\r\n    function ethToTokenTransferOutput(uint256 tokens_bought, uint256 deadline, address recipient) external payable returns (uint256  eth_sold);\r\n    // Trade ERC20 to ETH\r\n    function tokenToEthSwapInput(uint256 tokens_sold, uint256 min_eth, uint256 deadline) external returns (uint256  eth_bought);\r\n    function tokenToEthTransferInput(uint256 tokens_sold, uint256 min_eth, uint256 deadline, address recipient) external returns (uint256  eth_bought);\r\n    function tokenToEthSwapOutput(uint256 eth_bought, uint256 max_tokens, uint256 deadline) external returns (uint256  tokens_sold);\r\n    function tokenToEthTransferOutput(uint256 eth_bought, uint256 max_tokens, uint256 deadline, address recipient) external returns (uint256  tokens_sold);\r\n    // Trade ERC20 to ERC20\r\n    function tokenToTokenSwapInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address token_addr) external returns (uint256  tokens_bought);\r\n    function tokenToTokenTransferInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address recipient, address token_addr) external returns (uint256  tokens_bought);\r\n    function tokenToTokenSwapOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address token_addr) external returns (uint256  tokens_sold);\r\n    function tokenToTokenTransferOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address recipient, address token_addr) external returns (uint256  tokens_sold);\r\n    // Trade ERC20 to Custom Pool\r\n    function tokenToExchangeSwapInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address exchange_addr) external returns (uint256  tokens_bought);\r\n    function tokenToExchangeTransferInput(uint256 tokens_sold, uint256 min_tokens_bought, uint256 min_eth_bought, uint256 deadline, address recipient, address exchange_addr) external returns (uint256  tokens_bought);\r\n    function tokenToExchangeSwapOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address exchange_addr) external returns (uint256  tokens_sold);\r\n    function tokenToExchangeTransferOutput(uint256 tokens_bought, uint256 max_tokens_sold, uint256 max_eth_sold, uint256 deadline, address recipient, address exchange_addr) external returns (uint256  tokens_sold);\r\n    // ERC20 comaptibility for liquidity tokens\r\n    bytes32 public name;\r\n    bytes32 public symbol;\r\n    uint256 public decimals;\r\n    function transfer(address _to, uint256 _value) external returns (bool);\r\n    function transferFrom(address _from, address _to, uint256 value) external returns (bool);\r\n    function approve(address _spender, uint256 _value) external returns (bool);\r\n    function allowance(address _owner, address _spender) external view returns (uint256);\r\n    function balanceOf(address _owner) external view returns (uint256);\r\n    function totalSupply() external view returns (uint256);\r\n    // Never use\r\n    function setup(address token_addr) external;\r\n}\r\n\r\n// File: contracts/WETH9Interface.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\ncontract WETH9Interface {\r\n    function balanceOf(address who) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function deposit() public payable;\r\n    function withdraw(uint wad) public;\r\n\r\n    function totalSupply() public view returns (uint);\r\n    function approve(address guy, uint wad) public returns (bool);\r\n    function transfer(address dst, uint wad) public returns (bool);\r\n    function transferFrom(address src, address dst, uint wad) public returns (bool);\r\n}\r\n\r\n// File: contracts/UniswapWethLiquidityAdder.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n/**\r\n * @title Uniswap V1 ETH-WETH Exchange Liquidity Adder\r\n * @dev Help adding ETH to Uniswap ETH-WETH exchange in one tx.\r\n * @notice Do not send WETH or UNI token to this contract.\r\n */\r\ncontract UniswapWethLiquidityAdder {\r\n    // Uniswap V1 ETH-WETH Exchange Address\r\n    address public uniswapWethExchangeAddress = 0xA2881A90Bf33F03E7a3f803765Cd2ED5c8928dFb;\r\n    address public wethAddress = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n\r\n    WETH9Interface weth = WETH9Interface(wethAddress);\r\n    UniswapExchangeInterface uniswapWethExchange = UniswapExchangeInterface(uniswapWethExchangeAddress);\r\n\r\n    constructor() public {\r\n        // approve Uniswap ETH-WETH Exchange to transfer WETH from this contract\r\n        weth.approve(uniswapWethExchangeAddress, 2**256 - 1);\r\n    }\r\n\r\n    function () external payable {\r\n        addLiquidity();\r\n    }\r\n\r\n    // TODO: should this function return anything?\r\n    /// @dev Receive ETH, add to Uniswap ETH-WETH exchange, and return UNI token.\r\n    /// Will try to add all ETH in this contract to the liquidity pool.\r\n    /// There may be WETH token stuck in this contract?, but we don\u0027t care\r\n    function addLiquidity() public payable {\r\n        // If no ETH is received, revert.\r\n        // require(msg.value \u003E 0);\r\n\r\n        // Get the amount of ETH now in this contract as the total amount of ETH we are going to add.\r\n        uint256 totalEth = address(this).balance;\r\n\r\n        // Get the amount of ETH and WETH in the liquidity pool.\r\n        uint256 ethInPool = uniswapWethExchangeAddress.balance;\r\n        uint256 wethInPool = weth.balanceOf(uniswapWethExchangeAddress);\r\n\r\n        // Calculate the amount of WETH we need to wrap.\r\n        // We are solving this:\r\n        //     Find maximum integer \u0060ethToAdd\u0060 s.t.\r\n        //     ethToAdd \u002B wethToAdd \u003C= totalEth\r\n        //     wethToAdd = floor(ethToAdd * wethInPool / ethInPool) \u002B 1\r\n        // Solution:\r\n        //     Let x = ethToAdd\r\n        //         A = wethInPool\r\n        //         B = ethInPool\r\n        //         C = totalEth\r\n        //     Then\r\n        //         x \u002B floor(x * A / B) \u002B 1 \u003C= C\r\n        //         \u003C=\u003E x \u002B x * A / B \u002B 1 \u003C C \u002B 1\r\n        //         \u003C=\u003E x \u002B x * A / B \u003C C\r\n        //         \u003C=\u003E x \u003C C * B / (A \u002B B)\r\n        //         \u003C=\u003E max int x = ceil(C * B / (A \u002B B)) - 1\r\n        //     So max \u0060ethToAdd\u0060 is ceil(totalEth * ethInPool / (wethInPool \u002B ethInPool)) - 1\r\n        // Notes:\r\n        //     1. In the following code, we set \u0060ethToAdd = floor(C * B / (A \u002B B)) - 1\u0060\r\n        //         instead of \u0060ethToAdd = ceil(C * B / (A \u002B B)) - 1\u0060\r\n        //         because it\u0027s cheaper to compute \u0060floor\u0060 (just an integer division),\r\n        //         and the difference is at most 1 wei.\r\n        //     2. We don\u0027t use SafeMath here because it\u0027s almost impossible to overflow\r\n        //         when computing \u0060ethBalance * ethBalance\u0060 or \u0060ethBalance * wethBalance\u0060\r\n        uint256 ethToAdd = totalEth * ethInPool / (wethInPool \u002B ethInPool) - 1;\r\n        uint256 wethToAdd = ethToAdd * wethInPool / ethInPool \u002B 1;\r\n\r\n        // Wrap ETH.\r\n        weth.deposit.value(wethToAdd)();\r\n        // require(weth.balanceOf(address(this)) == wethToAdd);\r\n\r\n        // Add liquidity.\r\n        uint256 liquidityMinted = uniswapWethExchange.addLiquidity.value(ethToAdd)(1, 2**256-1, 2**256-1);\r\n        // require(liquidityMinted \u003E 0);\r\n\r\n        // Transfer liquidity token to msg.sender.\r\n        // uint256 liquidityTokenBalance = uniswapWethExchange.balanceOf(msg.sender);\r\n        uniswapWethExchange.transfer(msg.sender, liquidityMinted);\r\n        // require(uniswapWethExchange.transfer(msg.sender, liquidityMinted));\r\n    }\r\n}","ABI":"[{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022wethAddress\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022uniswapWethExchangeAddress\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022addLiquidity\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:true,\u0022stateMutability\u0022:\u0022payable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022constructor\u0022},{\u0022payable\u0022:true,\u0022stateMutability\u0022:\u0022payable\u0022,\u0022type\u0022:\u0022fallback\u0022}]","ContractName":"UniswapWethLiquidityAdder","CompilerVersion":"v0.5.10\u002Bcommit.5a6ea5b1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://54127e126e9383c74aebb204a288c3fac4f176950603e478fd820047d5829084"}]