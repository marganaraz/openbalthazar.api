[{"SourceCode":"// File: contracts/Ownable.sol\r\n\r\npragma solidity \u003E0.4.0 \u003C0.6.0;\r\n\r\ncontract Ownable {\r\n\r\n  address payable public owner;\r\n\r\n  constructor () public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n  \r\n  \r\n  function transferOwnership(address payable newOwner) external onlyOwner {\r\n    require(newOwner != address(0));      \r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/ReentrancyGuard.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\ncontract ReentrancyGuard {\r\n    // counter to allow mutex lock with only one SSTORE operation\r\n    uint256 private _guardCounter;\r\n\r\n    constructor () internal {\r\n        // The counter starts at one to prevent changing it from zero to a non-zero\r\n        // value, which is a more expensive operation.\r\n        _guardCounter = 1;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a \u0060nonReentrant\u0060 function from another \u0060nonReentrant\u0060\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the \u0060nonReentrant\u0060 function external, and make it call a\r\n     * \u0060private\u0060 function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _guardCounter \u002B= 1;\r\n        uint256 localCounter = _guardCounter;\r\n        _;\r\n        require(localCounter == _guardCounter, \u0022ReentrancyGuard: reentrant call\u0022);\r\n    }\r\n}\r\n\r\n// File: contracts/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\nlibrary SafeMath {\r\n    \r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a \u002B b;\r\n        require(c \u003E= a, \u0022SafeMath: addition overflow\u0022);\r\n\r\n        return c;\r\n    }\r\n\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b \u003C= a, \u0022SafeMath: subtraction overflow\u0022);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    \r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \u0022SafeMath: multiplication overflow\u0022);\r\n\r\n        return c;\r\n    }\r\n\r\n    \r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b \u003E 0, \u0022SafeMath: division by zero\u0022);\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n\r\n   \r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \u0022SafeMath: modulo by zero\u0022);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/Invest2Fulcrum_iDAI.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\ninterface fulcrumInterface {\r\n    function mintWithEther(address receiver, uint256 maxPriceAllowed) external payable returns (uint256 mintAmount);\r\n    function mint(address receiver, uint256 amount) external returns (uint256 mintAmount);\r\n    function burnToEther(address receiver, uint256 burnAmount, uint256 minPriceAllowed) external returns (uint256 loanAmountPaid);\r\n}\r\n\r\ninterface IKyberNetworkProxy {\r\n    function swapEtherToToken(ERC20 token, uint minRate) external payable returns (uint);\r\n    function getExpectedRate(ERC20 src, ERC20 dest, uint srcQty) external view returns (uint expectedRate, uint slippageRate);\r\n}\r\n\r\ninterface ERC20 {\r\n    function balanceOf(address _owner) external view returns (uint balance);\r\n    function transfer(address _to, uint _value) external returns (bool success);\r\n    function approve(address _spender, uint _value) external returns (bool success);\r\n    \r\n}\r\n\r\n\r\n\r\n\r\ncontract Invest2Fulcrum_iDAI is Ownable, ReentrancyGuard {\r\n    using SafeMath for uint;\r\n \r\n    \r\n    // state variables\r\n    uint public balance;\r\n    IKyberNetworkProxy public kyberNetworkProxyContract = IKyberNetworkProxy(0x818E6FECD516Ecc3849DAf6845e3EC868087B755);\r\n    ERC20 constant public ETH_TOKEN_ADDRESS = ERC20(0x00eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee);\r\n    ERC20 public DAI_TOKEN_ADDRESS = ERC20(0x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359);\r\n    \r\n\r\n    \r\n    fulcrumInterface public fulcrumInterfaceContract = fulcrumInterface(0x14094949152EDDBFcd073717200DA82fEd8dC960);\r\n    \r\n    // events\r\n    event AmountInvested(string successmessage, uint numberOfTokensIssued);\r\n    \r\n    // fx in relation to invest with ETH in fulcrum\r\n    \r\n     // - should we ever want to change the interface contract\r\n    function set_fulcrumInterface(fulcrumInterface _fulcrumInterfaceContract) onlyOwner public {\r\n        fulcrumInterfaceContract = _fulcrumInterfaceContract;\r\n    }\r\n    \r\n    function set_kyberNetworkProxyContract(IKyberNetworkProxy _kyberNetworkProxyContract) onlyOwner public {\r\n        kyberNetworkProxyContract = _kyberNetworkProxyContract;\r\n    }\r\n    \r\n    // this function should be called should we ever want to change the DAI_TOKEN_ADDRESS\r\n    function set_DAI_TOKEN_ADDRESS(ERC20 _DAI_TOKEN_ADDRESS) onlyOwner public {\r\n        DAI_TOKEN_ADDRESS = _DAI_TOKEN_ADDRESS;\r\n    }\r\n    \r\n    // the investment fx\r\n    function LetsInvest2FulcrumiDAI(address _towhomtoissue) public payable {\r\n        require(_towhomtoissue != address(0));\r\n        require(msg.value \u003E 0);\r\n        uint minConversionRate;\r\n        (minConversionRate,) = kyberNetworkProxyContract.getExpectedRate(ETH_TOKEN_ADDRESS, DAI_TOKEN_ADDRESS, msg.value);\r\n        uint destAmount = kyberNetworkProxyContract.swapEtherToToken.value(msg.value)(DAI_TOKEN_ADDRESS, minConversionRate);\r\n        uint qty2approve = SafeMath.mul(destAmount, 3);\r\n        require(DAI_TOKEN_ADDRESS.approve(address(fulcrumInterfaceContract), qty2approve));\r\n        fulcrumInterfaceContract.mint(_towhomtoissue, destAmount); \r\n    }\r\n    \r\n    // fx, in case something goes wrong {hint! learnt from experience}\r\n    function inCaseDAIgetsStuck() onlyOwner public {\r\n        uint qty = DAI_TOKEN_ADDRESS.balanceOf(address(this));\r\n        DAI_TOKEN_ADDRESS.transfer(owner, qty);\r\n    }\r\n    \r\n\r\n    // fx in relation to ETH held by the contract sent by the owner\r\n    \r\n    // - this function lets you deposit ETH into this wallet\r\n    function depositETH() payable public onlyOwner returns (uint) {\r\n        balance \u002B= msg.value;\r\n    }\r\n    \r\n    // - fallback function let you / anyone send ETH to this wallet without the need to call any function\r\n    function() external payable {\r\n        if (msg.sender == owner) {\r\n            depositETH();\r\n        } else {\r\n            LetsInvest2FulcrumiDAI(msg.sender);\r\n        }\r\n    }\r\n    \r\n    // - to withdraw any ETH balance sitting in the contract\r\n    function withdraw() onlyOwner public{\r\n        owner.transfer(address(this).balance);\r\n    }\r\n    \r\n    \r\n}","ABI":"[{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022inCaseDAIgetsStuck\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_towhomtoissue\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022LetsInvest2FulcrumiDAI\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:true,\u0022stateMutability\u0022:\u0022payable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022ETH_TOKEN_ADDRESS\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022withdraw\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022kyberNetworkProxyContract\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022fulcrumInterfaceContract\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022DAI_TOKEN_ADDRESS\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_kyberNetworkProxyContract\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022set_kyberNetworkProxyContract\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022owner\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022balance\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_DAI_TOKEN_ADDRESS\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022set_DAI_TOKEN_ADDRESS\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_fulcrumInterfaceContract\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022set_fulcrumInterface\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022transferOwnership\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022depositETH\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:true,\u0022stateMutability\u0022:\u0022payable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022payable\u0022:true,\u0022stateMutability\u0022:\u0022payable\u0022,\u0022type\u0022:\u0022fallback\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022successmessage\u0022,\u0022type\u0022:\u0022string\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022numberOfTokensIssued\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022AmountInvested\u0022,\u0022type\u0022:\u0022event\u0022}]","ContractName":"Invest2Fulcrum_iDAI","CompilerVersion":"v0.5.10\u002Bcommit.5a6ea5b1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://840f363a05421f3afe43727196da0190521a5344144722ab8e463d90e2b6cb91"}]