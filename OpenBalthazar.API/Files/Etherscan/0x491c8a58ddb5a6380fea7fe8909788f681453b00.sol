[{"SourceCode":"// GoToken is an open community aims to explore a decentralized collaboration network incentived and well-governed through blockchain. Learn more about gotoken @ forum.gotoken.io\r\n\r\n\r\npragma solidity \u003E=0.4.21 \u003C0.6.0;\r\n\r\ncontract TransferableToken{\r\n    function balanceOf(address _owner) public returns (uint256 balance) ;\r\n    function transfer(address _to, uint256 _amount) public returns (bool success) ;\r\n    function transferFrom(address _from, address _to, uint256 _amount) public returns (bool success) ;\r\n}\r\n\r\n\r\ncontract TokenClaimer{\r\n\r\n    event ClaimedTokens(address indexed _token, address indexed _to, uint _amount);\r\n    /// @notice This method can be used by the controller to extract mistakenly\r\n    ///  sent tokens to this contract.\r\n    /// @param _token The address of the token contract that you want to recover\r\n    ///  set to 0 in case you want to extract ether.\r\n  function _claimStdTokens(address _token, address payable to) internal {\r\n        if (_token == address(0x0)) {\r\n            to.transfer(address(this).balance);\r\n            return;\r\n        }\r\n        TransferableToken token = TransferableToken(_token);\r\n        uint balance = token.balanceOf(address(this));\r\n\r\n        (bool status,) = _token.call(abi.encodeWithSignature(\u0022transfer(address,uint256)\u0022, to, balance));\r\n        require(status, \u0022call failed\u0022);\r\n        emit ClaimedTokens(_token, to, balance);\r\n  }\r\n}\r\n\r\n\r\npragma solidity \u003E=0.4.21 \u003C0.6.0;\r\n\r\ncontract MultiSigInterface{\r\n  function update_and_check_reach_majority(uint64 id, string memory name, bytes32 hash, address sender) public returns (bool);\r\n  function is_signer(address addr) public view returns(bool);\r\n}\r\n\r\ncontract MultiSigTools{\r\n  MultiSigInterface public multisig_contract;\r\n  constructor(address _contract) public{\r\n    require(_contract!= address(0x0));\r\n    multisig_contract = MultiSigInterface(_contract);\r\n  }\r\n\r\n  modifier only_signer{\r\n    require(multisig_contract.is_signer(msg.sender), \u0022only a signer can call in MultiSigTools\u0022);\r\n    _;\r\n  }\r\n\r\n  modifier is_majority_sig(uint64 id, string memory name) {\r\n    bytes32 hash = keccak256(abi.encodePacked(msg.sig, msg.data));\r\n    if(multisig_contract.update_and_check_reach_majority(id, name, hash, msg.sender)){\r\n      _;\r\n    }\r\n  }\r\n\r\n  event TransferMultiSig(address _old, address _new);\r\n\r\n  function transfer_multisig(uint64 id, address _contract) public only_signer\r\n  is_majority_sig(id, \u0022transfer_multisig\u0022){\r\n    require(_contract != address(0x0));\r\n    address old = address(multisig_contract);\r\n    multisig_contract = MultiSigInterface(_contract);\r\n    emit TransferMultiSig(old, _contract);\r\n  }\r\n}\r\n\r\n\r\npragma solidity \u003E=0.4.21 \u003C0.6.0;\r\n\r\nlibrary AddressArray{\r\n  function exists(address[] storage self, address addr) public view returns(bool){\r\n    for (uint i = 0; i\u003C self.length;i\u002B\u002B){\r\n      if (self[i]==addr){\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  function index_of(address[] storage self, address addr) public view returns(uint){\r\n    for (uint i = 0; i\u003C self.length;i\u002B\u002B){\r\n      if (self[i]==addr){\r\n        return i;\r\n      }\r\n    }\r\n    require(false, \u0022AddressArray:index_of, not exist\u0022);\r\n  }\r\n\r\n  function remove(address[] storage self, address addr) public returns(bool){\r\n    uint index = index_of(self, addr);\r\n    self[index] = self[self.length - 1];\r\n\r\n    delete self[self.length-1];\r\n    self.length--;\r\n  }\r\n\r\n  function replace(address[] storage self, address old_addr, address new_addr) public returns(bool){\r\n    uint index = index_of(self, old_addr);\r\n    self[index] = new_addr;\r\n  }\r\n}\r\n\r\n\r\npragma solidity \u003E=0.4.21 \u003C0.6.0;\r\n\r\n\r\n\r\n\r\ncontract GTTokenInterface is TransferableToken{\r\n    function destroyTokens(address _owner, uint _amount) public returns (bool);\r\n    function generateTokens(address _owner, uint _amount) public returns (bool);\r\n}\r\n\r\ncontract InitIssueAndLock is MultiSigTools{\r\n  using AddressArray for address[];\r\n\r\n  uint public unlock_block_number;\r\n  uint[] public amounts;\r\n  address[] public addrs;\r\n  bool public issued;\r\n  address public gt_contract;\r\n\r\n  event Issue(uint total, address[] addrs, uint[] amounts);\r\n\r\n  constructor(address _gt_contract, uint _unlock_block_number, address[] memory _addrs, uint[] memory _amounts, address _multisig) MultiSigTools(_multisig) public {\r\n    require(_amounts.length == _addrs.length);\r\n    require(_unlock_block_number \u003E block.number);\r\n    for(uint i = 0; i \u003C _addrs.length; i\u002B\u002B){\r\n      addrs.push(_addrs[i]);\r\n      amounts.push(_amounts[i]);\r\n    }\r\n    issued = false;\r\n    unlock_block_number = _unlock_block_number;\r\n    gt_contract = _gt_contract;\r\n  }\r\n\r\n  function issue() public{\r\n    require(issued == false, \u0022issued already\u0022);\r\n    require(unlock_block_number \u003C= block.number, \u0022not ready to unlock\u0022);\r\n\r\n    GTTokenInterface token = GTTokenInterface(gt_contract);\r\n\r\n    uint total = 0;\r\n    for(uint i = 0; i \u003C addrs.length; i\u002B\u002B){\r\n      token.generateTokens(addrs[i], amounts[i]);\r\n      total = total \u002B amounts[i];\r\n    }\r\n    issued = true;\r\n    emit Issue(total, addrs, amounts);\r\n  }\r\n\r\n  function replace(uint64 id, address old_addr, address new_addr) public only_signer is_majority_sig(id, \u0022replace\u0022){\r\n    require(issued == false, \u0022issued already\u0022);\r\n    addrs.replace(old_addr, new_addr);\r\n  }\r\n\r\n  function get_number_of_addrs() public view returns(uint){\r\n    return addrs.length;\r\n  }\r\n\r\n  function get_addr_amount(uint i) public view returns(address addr, uint amount){\r\n    addr = addrs[i];\r\n    amount = amounts[i];\r\n  }\r\n\r\n  function get_init_and_lock_status() public view returns(address[] memory , uint[] memory ){\r\n    return (addrs, amounts);\r\n  }\r\n}","ABI":"[{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022id\u0022,\u0022type\u0022:\u0022uint64\u0022},{\u0022name\u0022:\u0022_contract\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022transfer_multisig\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022addrs\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022id\u0022,\u0022type\u0022:\u0022uint64\u0022},{\u0022name\u0022:\u0022old_addr\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022new_addr\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022replace\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022amounts\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022get_init_and_lock_status\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address[]\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256[]\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022issued\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022get_number_of_addrs\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022multisig_contract\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022i\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022get_addr_amount\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022addr\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022unlock_block_number\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022issue\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022gt_contract\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[{\u0022name\u0022:\u0022_gt_contract\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_unlock_block_number\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_addrs\u0022,\u0022type\u0022:\u0022address[]\u0022},{\u0022name\u0022:\u0022_amounts\u0022,\u0022type\u0022:\u0022uint256[]\u0022},{\u0022name\u0022:\u0022_multisig\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022constructor\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022total\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022addrs\u0022,\u0022type\u0022:\u0022address[]\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022amounts\u0022,\u0022type\u0022:\u0022uint256[]\u0022}],\u0022name\u0022:\u0022Issue\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022_old\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022_new\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022TransferMultiSig\u0022,\u0022type\u0022:\u0022event\u0022}]","ContractName":"InitIssueAndLock","CompilerVersion":"v0.5.10\u002Bcommit.5a6ea5b1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000353214343ee192ad8a58c62961b972f4d5a6877e0000000000000000000000000000000000000000000000000000000000978feb00000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000001200000000000000000000000009fdb24df185b4e6c42846c2f1355ca0a2bb7e0430000000000000000000000000000000000000000000000000000000000000003000000000000000000000000e855b4cb17ea22cae1be5feb7fcdc0ef67dca84d0000000000000000000000003e6f107fd4a95af86108c1f44e502a6136ad386e00000000000000000000000057955d7aa271dbdde92d67e0ef52d90c6e4089ca000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000006fc23ac0000000000000000000000000000000000000000000000000000000002540be40000000000000000000000000000000000000000000000000000000002540be400","Library":"AddressArray:0493163ff05664a1add5f87374ef78940ae33bc4","SwarmSource":"bzzr://f0da1026949b14b2fd7829cbf24e07e65a58df2f9ba6a9ec5c0a126a0294e774"}]