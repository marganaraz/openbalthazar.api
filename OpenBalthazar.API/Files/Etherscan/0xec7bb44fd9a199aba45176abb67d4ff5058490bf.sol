[{"SourceCode":"pragma solidity 0.5.10;\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://eips.ethereum.org/EIPS/eip-20\r\n */\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Multiplies two unsigned integers, reverts on overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\r\n        // benefit is lost if \u0027b\u0027 is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b \u003E 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c \u002B a % b); // There is no case in which this doesn\u0027t hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b \u003C= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two unsigned integers, reverts on overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a \u002B b;\r\n        require(c \u003E= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n     * reverts when dividing by zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @title PayableOwnable\r\n * @dev The PayableOwnable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \u0022user permissions\u0022.\r\n * PayableOwnable is extended from open-zeppelin Ownable smart contract, with the difference of making the owner\r\n * a payable address.\r\n */\r\ncontract PayableOwnable {\r\n    address payable internal _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original \u0060owner\u0060 of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor() internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @return the address of the owner.\r\n     */\r\n    function owner() public view returns (address payable) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return true if \u0060msg.sender\u0060 is the owner of the contract.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to relinquish control of the contract.\r\n     * @notice Renouncing to ownership will leave the contract without an owner.\r\n     * It will not be possible to call the functions with the \u0060onlyOwner\u0060\r\n     * modifier anymore.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address payable newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address payable newOwner) internal {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n/// @title PumaPay Pull Payment V2.1 - Contract that facilitates our pull payment protocol\r\n/// V2.1 of the protocol removes the notion of the \u0060pull payment executors\u0060 i.e. the addresses\r\n/// that can execute a pull payment \u0060executePullPayment()\u0060. That function is now publicly available.\r\n/// We are also changing the \u0060pullPayments\u0060 mapping. Instead of having address -\u003E address -\u003E PullPayment,\r\n/// ot will be address -\u003E bytes32 -\u003E PullPayment, with bytes32 being the pull payment ID.\r\n/// @author PumaPay Dev Team - \u003Cdevelopers@pumapay.io\u003E\r\ncontract PumaPayPullPaymentV2_2 is PayableOwnable {\r\n    using SafeMath for uint256;\r\n    /// ===============================================================================================================\r\n    ///                                      Events\r\n    /// ===============================================================================================================\r\n    event LogExecutorAdded(address executor);\r\n    event LogExecutorRemoved(address executor);\r\n    event LogSmartContractActorFunded(string actorRole, address actor, uint256 timestamp);\r\n    event LogPaymentRegistered(\r\n        address customerAddress,\r\n        bytes32 paymentID,\r\n        bytes32 businessID,\r\n        bytes32 uniqueReferenceID\r\n    );\r\n    event LogPaymentCancelled(\r\n        address customerAddress,\r\n        bytes32 paymentID,\r\n        bytes32 businessID,\r\n        bytes32 uniqueReferenceID\r\n    );\r\n    event LogPullPaymentExecuted(\r\n        address customerAddress,\r\n        bytes32 paymentID,\r\n        bytes32 businessID,\r\n        bytes32 uniqueReferenceID,\r\n        uint256 amountInPMA,\r\n        uint256 conversionRate\r\n    );\r\n    /// ===============================================================================================================\r\n    ///                                      Constants\r\n    /// ===============================================================================================================\r\n\r\n    uint256 constant private RATE_CALCULATION_NUMBER = 10 ** 26;    /// Check \u0060calculatePMAFromFiat()\u0060 for more details\r\n    uint256 constant private OVERFLOW_LIMITER_NUMBER = 10 ** 20;    /// 1e^20 - Prevent numeric overflows\r\n    /// @dev The following variables are not needed any more, but are kept hre for clarity on the calculation that\r\n    /// is being done for the PMA to Fiat from rate.\r\n    /// uint256 constant private DECIMAL_FIXER = 10 ** 10; /// 1e^10 - This transforms the Rate from decimals to uint256\r\n    /// uint256 constant private FIAT_TO_CENT_FIXER = 100; /// Fiat currencies have 100 cents in 1 basic monetary unit.\r\n    uint256 constant private ONE_ETHER = 1 ether;                                  /// PumaPay token has 18 decimals - same as one ETHER\r\n    uint256 constant private FUNDING_AMOUNT = 0.5 ether;                           /// Amount to transfer to owner/executor\r\n    uint256 constant private MINIMUM_AMOUNT_OF_ETH_FOR_OPERATORS = 0.15 ether;     /// min amount of ETH for owner/executor\r\n    bytes32 constant private TYPE_SINGLE_PULL_PAYMENT = \u00222\u0022;\r\n    bytes32 constant private TYPE_RECURRING_PULL_PAYMENT = \u00223\u0022;\r\n    bytes32 constant private TYPE_RECURRING_PULL_PAYMENT_WITH_INITIAL = \u00224\u0022;\r\n    bytes32 constant private TYPE_PULL_PAYMENT_WITH_FREE_TRIAL = \u00225\u0022;\r\n    bytes32 constant private TYPE_PULL_PAYMENT_WITH_PAID_TRIAL = \u00226\u0022;\r\n    bytes32 constant private TYPE_SINGLE_DYNAMIC_PULL_PAYMENT = \u00227\u0022;\r\n    bytes32 constant private EMPTY_BYTES32 = \u0022\u0022;\r\n    /// ===============================================================================================================\r\n    ///                                      Members\r\n    /// ===============================================================================================================\r\n    IERC20 public token;\r\n    mapping(address =\u003E bool) public executors;\r\n    mapping(bytes32 =\u003E PullPayment) public pullPayments;\r\n\r\n    struct PullPayment {\r\n        bytes32[3] paymentIds;                  /// [0] paymentID / [1] businessID / [2] uniqueReferenceID\r\n        bytes32 paymentType;                    /// Type of Pull Payment - must be one of the defined pull payment types\r\n        string currency;                        /// 3-letter abbr i.e. \u0027EUR\u0027 / \u0027USD\u0027 etc.\r\n        uint256 initialConversionRate;          /// conversion rate for first payment execution\r\n        uint256 initialPaymentAmountInCents;    /// initial payment amount in fiat in cents\r\n        uint256 fiatAmountInCents;              /// payment amount in fiat in cents\r\n        uint256 frequency;                      /// how often merchant can pull - in seconds\r\n        uint256 numberOfPayments;               /// amount of pull payments merchant can make\r\n        uint256 startTimestamp;                 /// when subscription starts - in seconds\r\n        uint256 trialPeriod;                    /// trial period of the pull payment - in seconds\r\n        uint256 nextPaymentTimestamp;           /// timestamp of next payment\r\n        uint256 lastPaymentTimestamp;           /// timestamp of last payment\r\n        uint256 cancelTimestamp;                /// timestamp the payment was cancelled\r\n        address treasuryAddress;                /// address which pma tokens will be transfer to on execution\r\n        address executorAddress;                /// address that can execute the pull payment\r\n    }\r\n    /// ===============================================================================================================\r\n    ///                                      Modifiers\r\n    /// ===============================================================================================================\r\n    modifier isExecutor() {\r\n        require(executors[msg.sender], \u0022msg.sender not an executor\u0022);\r\n        _;\r\n    }\r\n    modifier executorExists(address _executor) {\r\n        require(executors[_executor], \u0022Executor does not exists.\u0022);\r\n        _;\r\n    }\r\n    modifier executorDoesNotExists(address _executor) {\r\n        require(!executors[_executor], \u0022Executor already exists.\u0022);\r\n        _;\r\n    }\r\n    modifier paymentExists(bytes32 _paymentID) {\r\n        require(pullPayments[_paymentID].paymentIds[0] != \u0022\u0022, \u0022Pull Payment does not exists.\u0022);\r\n        _;\r\n    }\r\n    modifier paymentNotCancelled(bytes32 _paymentID) {\r\n        require(pullPayments[_paymentID].cancelTimestamp == 0, \u0022Pull Payment is cancelled\u0022);\r\n        _;\r\n    }\r\n    modifier isValidPullPaymentExecutionRequest(\r\n        bytes32 _paymentID,\r\n        uint256 _paymentNumber) {\r\n        require(pullPayments[_paymentID].numberOfPayments == _paymentNumber,\r\n            \u0022Invalid pull payment execution request - Pull payment number of payment is invalid\u0022);\r\n        require((pullPayments[_paymentID].initialPaymentAmountInCents \u003E 0 ||\r\n        (now \u003E= pullPayments[_paymentID].startTimestamp \u0026\u0026\r\n        now \u003E= pullPayments[_paymentID].nextPaymentTimestamp)\r\n            ), \u0022Invalid pull payment execution request - Time of execution is invalid.\u0022\r\n        );\r\n        require(pullPayments[_paymentID].numberOfPayments \u003E 0,\r\n            \u0022Invalid pull payment execution request - Number of payments is zero.\u0022);\r\n        require(\r\n            (pullPayments[_paymentID].cancelTimestamp == 0 ||\r\n        pullPayments[_paymentID].cancelTimestamp \u003E\r\n        pullPayments[_paymentID].nextPaymentTimestamp),\r\n            \u0022Invalid pull payment execution request - Pull payment is cancelled\u0022);\r\n        require(keccak256(\r\n            abi.encodePacked(pullPayments[_paymentID].paymentIds[0])\r\n        ) == keccak256(abi.encodePacked(_paymentID)),\r\n            \u0022Invalid pull payment execution request - Payment ID not matching.\u0022);\r\n        _;\r\n    }\r\n    modifier isValidDeletionRequest(bytes32 _paymentID, address _customerAddress) {\r\n        require(_paymentID != EMPTY_BYTES32, \u0022Invalid deletion request - Payment ID is empty.\u0022);\r\n        require(_customerAddress != address(0), \u0022Invalid deletion request - Client address is ZERO_ADDRESS.\u0022);\r\n        _;\r\n    }\r\n    modifier isValidAddress(address _address) {\r\n        require(_address != address(0), \u0022Invalid address - ZERO_ADDRESS provided\u0022);\r\n        _;\r\n    }\r\n    modifier validAmount(uint256 _amount) {\r\n        require(_amount \u003E 0, \u0022Invalid amount - Must be higher than zero\u0022);\r\n        require(_amount \u003C= OVERFLOW_LIMITER_NUMBER, \u0022Invalid amount - Must be lower than the overflow limit.\u0022);\r\n        _;\r\n    }\r\n    /// ===============================================================================================================\r\n    ///                                      Constructor\r\n    /// ===============================================================================================================\r\n    /// @dev Contract constructor - sets the token address that the contract facilitates.\r\n    /// @param _token Token Address.\r\n    constructor(address _token)\r\n    public {\r\n        require(_token != address(0), \u0022Invalid address for token - ZERO_ADDRESS provided\u0022);\r\n        token = IERC20(_token);\r\n    }\r\n    // @notice Will receive any eth sent to the contract\r\n    function() external payable {\r\n    }\r\n    /// ===============================================================================================================\r\n    ///                                      Public Functions - Owner Only\r\n    /// ===============================================================================================================\r\n    /// @dev Adds a new executor. - can be executed only by the onwer.\r\n    /// When adding a new executor 0.5 ETH is transferred to allow the executor to pay for gas.\r\n    /// The balance of the owner is also checked and if funding is needed 0.5 ETH is transferred.\r\n    /// @param _executor - address of the executor which cannot be zero address.\r\n    function addExecutor(address payable _executor)\r\n    public\r\n    onlyOwner\r\n    isValidAddress(_executor)\r\n    executorDoesNotExists(_executor)\r\n    {\r\n        executors[_executor] = true;\r\n        if (isFundingNeeded(_executor)) {\r\n            _executor.transfer(FUNDING_AMOUNT);\r\n            emit LogSmartContractActorFunded(\u0022executor\u0022, _executor, now);\r\n        }\r\n\r\n        if (isFundingNeeded(owner())) {\r\n            owner().transfer(FUNDING_AMOUNT);\r\n            emit LogSmartContractActorFunded(\u0022owner\u0022, owner(), now);\r\n        }\r\n        emit LogExecutorAdded(_executor);\r\n    }\r\n    /// @dev Removes a new executor. - can be executed only by the owner.\r\n    /// The balance of the owner is checked and if funding is needed 0.5 ETH is transferred.\r\n    /// @param _executor - address of the executor which cannot be zero address.\r\n    function removeExecutor(address payable _executor)\r\n    public\r\n    onlyOwner\r\n    isValidAddress(_executor)\r\n    executorExists(_executor)\r\n    {\r\n        executors[_executor] = false;\r\n        if (isFundingNeeded(owner())) {\r\n            owner().transfer(FUNDING_AMOUNT);\r\n            emit LogSmartContractActorFunded(\u0022owner\u0022, owner(), now);\r\n        }\r\n        emit LogExecutorRemoved(_executor);\r\n    }\r\n    /// ===============================================================================================================\r\n    ///                                      Public Functions - Executors Only\r\n    /// ===============================================================================================================\r\n    /// @dev Registers a new pull payment to the PumaPay Pull Payment Contract - The registration can be executed only\r\n    /// by one of the executors of the PumaPay Pull Payment Contract\r\n    /// and the PumaPay Pull Payment Contract checks that the pull payment has been singed by the customer of the account.\r\n    /// If the pull payment doesn\u0027t have a trial period, the first execution will take place.\u0027\r\n    /// The pull payment is updated accordingly in terms of how many payments can happen, and when is the next payment date.\r\n    /// (For more details on the above check the \u0027executePullPayment\u0027 method.\r\n    /// The balance of the executor (msg.sender) is checked and if funding is needed 0.5 ETH is transferred.\r\n    /// Emits \u0027LogPaymentRegistered\u0027 with customer address, pull payment executor address and paymentID.\r\n    /// @param v - recovery ID of the ETH signature. - https://github.com/ethereum/EIPs/issues/155\r\n    /// @param r - R output of ECDSA signature.\r\n    /// @param s - S output of ECDSA signature.\r\n    /// @param _paymentDetails - all the relevant id-related details for the payment.\r\n    /// @param _addresses - all the relevant addresses for the payment.\r\n    /// @param _paymentAmounts - all the relevant amounts for the payment.\r\n    /// @param _paymentTimestamps - all the relevant timestamps for the payment.\r\n    /// @param _currency - currency of the payment / 3-letter abbr i.e. \u0027EUR\u0027.\r\n    function registerPullPayment(\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s,\r\n        bytes32[4] memory _paymentDetails, // 0 paymentID, 1 businessID, 2 uniqueReferenceID, 3 paymentType\r\n        address[3] memory _addresses, // 0 customer, 1 executor, 2 treasury\r\n        uint256[3] memory _paymentAmounts, // 0 _initialConversionRate, 1 _fiatAmountInCents, 2 _initialPaymentAmountInCents\r\n        uint256[4] memory _paymentTimestamps, // 0 _frequency, 1 _numberOfPayments, 2 _startTimestamp, 3 _trialPeriod\r\n        string memory _currency\r\n    )\r\n    public\r\n    isExecutor()\r\n    {\r\n        require(pullPayments[_paymentDetails[0]].paymentIds[0] == \u0022\u0022, \u0022Pull Payment already exists.\u0022);\r\n        require(_paymentDetails[0] != EMPTY_BYTES32, \u0022Payment ID is empty.\u0022);\r\n        require(_paymentDetails[1] != EMPTY_BYTES32, \u0022Business ID is empty.\u0022);\r\n        require(_paymentDetails[2] != EMPTY_BYTES32, \u0022Unique Reference ID is empty.\u0022);\r\n        require(_paymentDetails[3] != EMPTY_BYTES32, \u0022Payment Type is empty.\u0022);\r\n        require(_addresses[0] != address(0), \u0022Customer Address is ZERO_ADDRESS.\u0022);\r\n        require(_addresses[1] != address(0), \u0022Treasury Address is ZERO_ADDRESS.\u0022);\r\n        require(_paymentAmounts[0] \u003E 0, \u0022Initial conversion rate is zero.\u0022);\r\n        require(_paymentAmounts[1] \u003E 0, \u0022Payment amount in fiat is zero.\u0022);\r\n        require(_paymentAmounts[2] \u003E= 0, \u0022Initial payment amount in fiat is less than zero.\u0022);\r\n        require(_paymentTimestamps[0] \u003E 0, \u0022Payment frequency is zero.\u0022);\r\n        require(_paymentTimestamps[1] \u003E 0, \u0022Payment number of payments is zero.\u0022);\r\n        require(_paymentTimestamps[2] \u003E 0, \u0022Payment start time is zero.\u0022);\r\n        require(_paymentTimestamps[3] \u003E= 0, \u0022Payment trial period is less than zero.\u0022);\r\n        require(_paymentAmounts[0] \u003C= OVERFLOW_LIMITER_NUMBER, \u0022Initial conversion rate is higher thant the overflow limit.\u0022);\r\n        require(_paymentAmounts[1] \u003C= OVERFLOW_LIMITER_NUMBER, \u0022Payment amount in fiat is higher thant the overflow limit.\u0022);\r\n        require(_paymentAmounts[2] \u003C= OVERFLOW_LIMITER_NUMBER, \u0022Payment initial amount in fiat is higher thant the overflow limit.\u0022);\r\n        require(_paymentTimestamps[0] \u003C= OVERFLOW_LIMITER_NUMBER, \u0022Payment frequency is higher thant the overflow limit.\u0022);\r\n        require(_paymentTimestamps[1] \u003C= OVERFLOW_LIMITER_NUMBER, \u0022Payment number of payments is higher thant the overflow limit.\u0022);\r\n        require(_paymentTimestamps[2] \u003C= OVERFLOW_LIMITER_NUMBER, \u0022Payment start time is higher thant the overflow limit.\u0022);\r\n        require(_paymentTimestamps[3] \u003C= OVERFLOW_LIMITER_NUMBER, \u0022Payment trial period is higher thant the overflow limit.\u0022);\r\n        require(bytes(_currency).length \u003E 0, \u0022Currency is empty\u0022);\r\n        pullPayments[_paymentDetails[0]].paymentIds[0] = _paymentDetails[0];\r\n        pullPayments[_paymentDetails[0]].paymentType = _paymentDetails[3];\r\n        pullPayments[_paymentDetails[0]].executorAddress = _addresses[1];\r\n        pullPayments[_paymentDetails[0]].treasuryAddress = _addresses[2];\r\n        pullPayments[_paymentDetails[0]].initialConversionRate = _paymentAmounts[0];\r\n        pullPayments[_paymentDetails[0]].fiatAmountInCents = _paymentAmounts[1];\r\n        pullPayments[_paymentDetails[0]].initialPaymentAmountInCents = _paymentAmounts[2];\r\n        pullPayments[_paymentDetails[0]].frequency = _paymentTimestamps[0];\r\n        pullPayments[_paymentDetails[0]].numberOfPayments = _paymentTimestamps[1];\r\n        pullPayments[_paymentDetails[0]].startTimestamp = _paymentTimestamps[2];\r\n        pullPayments[_paymentDetails[0]].trialPeriod = _paymentTimestamps[3];\r\n        pullPayments[_paymentDetails[0]].currency = _currency;\r\n        require(isValidRegistration(\r\n                v,\r\n                r,\r\n                s,\r\n                _addresses[0],\r\n                pullPayments[_paymentDetails[0]]),\r\n            \u0022Invalid pull payment registration - ECRECOVER_FAILED\u0022\r\n        );\r\n        pullPayments[_paymentDetails[0]].paymentIds[1] = _paymentDetails[1];\r\n        pullPayments[_paymentDetails[0]].paymentIds[2] = _paymentDetails[2];\r\n        pullPayments[_paymentDetails[0]].cancelTimestamp = 0;\r\n        /// @dev In case of a free trial period the start timestamp of the payment\r\n        /// is the start timestamp that was signed by the customer \u002B the trial period.\r\n        /// A payment is not needed during registration.\r\n        if (_paymentDetails[3] == TYPE_PULL_PAYMENT_WITH_FREE_TRIAL) {\r\n            pullPayments[_paymentDetails[0]].nextPaymentTimestamp = _paymentTimestamps[2] \u002B _paymentTimestamps[3];\r\n            pullPayments[_paymentDetails[0]].lastPaymentTimestamp = 0;\r\n            /// @dev In case of a recurring payment with initial amount\r\n            /// the first payment of the \u0027initialPaymentAmountInCents\u0027 and \u0027initialConversionRate\u0027\r\n            /// will happen on registration.\r\n            /// Once it happens, we set the next payment timestamp as\r\n            /// the start timestamp signed by the customer \u002B trial period\r\n        } else if (_paymentDetails[3] == TYPE_RECURRING_PULL_PAYMENT_WITH_INITIAL) {\r\n            require(executePullPaymentOnRegistration(\r\n                    [_paymentDetails[0], _paymentDetails[1], _paymentDetails[2]], // 0 paymentID, 1 businessID, 2 uniqueReferenceID\r\n                    [_addresses[0], _addresses[1], _addresses[2]], // 0 Customer Address, 1 executor Address, 2 Treasury Address\r\n                    [_paymentAmounts[2], _paymentAmounts[0]] // 0 initialPaymentAmountInCents, 1 initialConversionRate\r\n                ));\r\n            pullPayments[_paymentDetails[0]].lastPaymentTimestamp = now;\r\n            pullPayments[_paymentDetails[0]].nextPaymentTimestamp = _paymentTimestamps[2] \u002B _paymentTimestamps[0];\r\n            /// @dev In the case od a paid trial, the first payment happens\r\n            /// on registration using the \u0027initialPaymentAmountInCents\u0027 and \u0027initialConversionRate\u0027.\r\n            /// When the first payment takes place we set the next payment timestamp\r\n            /// as the start timestamp that was signed by the customer \u002B the trial period\r\n        } else if (_paymentDetails[3] == TYPE_PULL_PAYMENT_WITH_PAID_TRIAL) {\r\n            require(executePullPaymentOnRegistration(\r\n                    [_paymentDetails[0], _paymentDetails[1], _paymentDetails[2]], /// paymentID , businessID , uniqueReferenceID\r\n                    [_addresses[0], _addresses[1], _addresses[2]], // 0 Customer Address, 1 executor Address, 2 Treasury Address\r\n                    [_paymentAmounts[2], _paymentAmounts[0]] /// 0 initialPaymentAmountInCents, 1 initialConversionRate\r\n                ));\r\n            pullPayments[_paymentDetails[0]].lastPaymentTimestamp = now;\r\n            pullPayments[_paymentDetails[0]].nextPaymentTimestamp = _paymentTimestamps[2] \u002B _paymentTimestamps[3];\r\n            /// @dev For the rest of the cases the first payment happens on registration\r\n            /// using the \u0027fiatAmountInCents\u0027 and \u0027initialConversionRate\u0027.\r\n            /// When the first payment takes place, the number of payment is decreased by 1,\r\n            /// and the next payment timestamp is set to the start timestamp signed by the\r\n            /// customer \u002B the frequency of the payment.\r\n        } else {\r\n            require(executePullPaymentOnRegistration(\r\n                    [_paymentDetails[0], _paymentDetails[1], _paymentDetails[2]], /// paymentID , businessID , uniqueReferenceID\r\n                    [_addresses[0], _addresses[1], _addresses[2]], // 0 Customer Address, 1 executor Address, 2 Treasury Address\r\n                    [_paymentAmounts[1], _paymentAmounts[0]] /// fiatAmountInCents, initialConversionRate\r\n                ));\r\n            pullPayments[_paymentDetails[0]].lastPaymentTimestamp = now;\r\n            pullPayments[_paymentDetails[0]].nextPaymentTimestamp = _paymentTimestamps[2] \u002B _paymentTimestamps[0];\r\n            pullPayments[_paymentDetails[0]].numberOfPayments = _paymentTimestamps[1] - 1;\r\n        }\r\n        if (isFundingNeeded(msg.sender)) {\r\n            msg.sender.transfer(FUNDING_AMOUNT);\r\n            emit LogSmartContractActorFunded(\u0022executor\u0022, msg.sender, now);\r\n        }\r\n        emit LogPaymentRegistered(_addresses[0], _paymentDetails[0], _paymentDetails[1], _paymentDetails[2]);\r\n    }\r\n    /// @dev Deletes a pull payment for a pull payment executor - The deletion needs can be executed only by one of the\r\n    /// executors of the PumaPay Pull Payment Contract\r\n    /// and the PumaPay Pull Payment Contract checks that the pull payment executor and the paymentID have\r\n    /// been singed by the customer of the account.\r\n    /// This method sets the cancellation of the pull payment in the pull payments array for this pull payment executor specified.\r\n    /// The balance of the executor (msg.sender) is checked and if funding is needed 0.5 ETH is transferred.\r\n    /// Emits \u0027LogPaymentCancelled\u0027 with pull payment executor address and paymentID.\r\n    /// @param v - recovery ID of the ETH signature. - https://github.com/ethereum/EIPs/issues/155\r\n    /// @param r - R output of ECDSA signature.\r\n    /// @param s - S output of ECDSA signature.\r\n    /// @param _paymentID - ID of the payment.\r\n    /// @param _customerAddress - customer address that is linked to this pull payment.\r\n    /// @param _pullPaymentExecutor - address that is allowed to execute this pull payment.\r\n    function deletePullPayment(\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s,\r\n        bytes32 _paymentID,\r\n        address _customerAddress,\r\n        address _pullPaymentExecutor\r\n    )\r\n    public\r\n    isExecutor()\r\n    paymentExists(_paymentID)\r\n    paymentNotCancelled(_paymentID)\r\n    isValidDeletionRequest(_paymentID, _customerAddress)\r\n    {\r\n        require(isValidDeletion(v, r, s, _paymentID, _customerAddress, _pullPaymentExecutor), \u0022Invalid deletion - ECRECOVER_FAILED.\u0022);\r\n        pullPayments[_paymentID].cancelTimestamp = now;\r\n        if (isFundingNeeded(msg.sender)) {\r\n            msg.sender.transfer(FUNDING_AMOUNT);\r\n            emit LogSmartContractActorFunded(\u0022executor\u0022, msg.sender, now);\r\n        }\r\n        emit LogPaymentCancelled(\r\n            _customerAddress,\r\n            _paymentID,\r\n            pullPayments[_paymentID].paymentIds[1],\r\n            pullPayments[_paymentID].paymentIds[2]\r\n        );\r\n    }\r\n    /// ===============================================================================================================\r\n    ///                                      Public Functions\r\n    /// ===============================================================================================================\r\n    /// @dev Executes a pull payment for the msg.sender - The pull payment should exist and the payment request\r\n    /// should be valid in terms of when it can be executed.\r\n    /// Emits \u0027LogPullPaymentExecuted\u0027 with customer address, msg.sender as the pull payment executor address and the paymentID.\r\n    /// Use Case: Single/Recurring Fixed Pull Payment\r\n    /// ------------------------------------------------\r\n    /// We calculate the amount in PMA using the conversion rate specified when calling the method.\r\n    /// From the \u0027conversionRate\u0027 and the \u0027fiatAmountInCents\u0027 we calculate the amount of PMA that\r\n    /// the business need to receive in their treasuryAddress.\r\n    /// The smart contract transfers from the customer account to the treasury wallet the amount in PMA.\r\n    /// After execution we set the last payment timestamp to NOW, the next payment timestamp is incremented by\r\n    /// the frequency and the number of payments is decreased by 1.\r\n    /// @param _customerAddress - address of the customer from which the msg.sender requires to pull funds.\r\n    /// @param _paymentID - ID of the payment.\r\n    /// @param _paymentDetails - Payment details - [0] conversion rate // [1] payment Number\r\n    function executePullPayment(address _customerAddress, bytes32 _paymentID, uint256[2] memory _paymentDetails)\r\n    public\r\n    paymentExists(_paymentID)\r\n    isValidPullPaymentExecutionRequest(_paymentID, _paymentDetails[1])\r\n    validAmount(_paymentDetails[0])\r\n    returns (bool)\r\n    {\r\n        uint256 conversionRate = _paymentDetails[0];\r\n        address customerAddress = _customerAddress;\r\n        bytes32[3] memory paymentIds = pullPayments[_paymentID].paymentIds;\r\n        address treasury = pullPayments[_paymentID].treasuryAddress;\r\n        uint256 amountInPMA = calculatePMAFromFiat(pullPayments[paymentIds[0]].fiatAmountInCents, conversionRate);\r\n\r\n        pullPayments[paymentIds[0]].nextPaymentTimestamp =\r\n        pullPayments[paymentIds[0]].nextPaymentTimestamp \u002B pullPayments[paymentIds[0]].frequency;\r\n        pullPayments[paymentIds[0]].numberOfPayments = pullPayments[paymentIds[0]].numberOfPayments - 1;\r\n        pullPayments[paymentIds[0]].lastPaymentTimestamp = now;\r\n        require(token.transferFrom(\r\n                customerAddress,\r\n                treasury,\r\n                amountInPMA\r\n            ));\r\n        emit LogPullPaymentExecuted(\r\n            customerAddress,\r\n            paymentIds[0],\r\n            paymentIds[1],\r\n            paymentIds[2],\r\n            amountInPMA,\r\n            conversionRate\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /// ===============================================================================================================\r\n    ///                                      Internal Functions\r\n    /// ===============================================================================================================\r\n    /// @dev The new version of the smart contract allows for the first execution to happen on registration,\r\n    /// unless the pull payment has free trial. Check the comments on \u0027registerPullPayment\u0027 method for more details.\r\n    function executePullPaymentOnRegistration(\r\n        bytes32[3] memory _paymentDetails, // 0 paymentID, 1 businessID, 2 uniqueReferenceID\r\n        address[3] memory _addresses, // 0 customer Address, 1, executor Address, 2 treasury Address\r\n        uint256[2] memory _paymentAmounts // 0 _fiatAmountInCents, 1 _conversionRate\r\n    )\r\n    internal\r\n    returns (bool) {\r\n        uint256 amountInPMA = calculatePMAFromFiat(_paymentAmounts[0], _paymentAmounts[1]);\r\n        require(token.transferFrom(_addresses[0], _addresses[2], amountInPMA));\r\n        emit LogPullPaymentExecuted(\r\n            _addresses[0],\r\n            _paymentDetails[0],\r\n            _paymentDetails[1],\r\n            _paymentDetails[2],\r\n            amountInPMA,\r\n            _paymentAmounts[1]\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /// @dev Calculates the PMA Rate for the fiat currency specified - The rate is set every 10 minutes by our PMA server\r\n    /// for the currencies specified in the smart contract.\r\n    /// @param _fiatAmountInCents - payment amount in fiat CENTS so that is always integer\r\n    /// @param _conversionRate - conversion rate with which the payment needs to take place\r\n    /// RATE CALCULATION EXAMPLE\r\n    /// ------------------------\r\n    /// RATE ==\u003E 1 PMA = 0.01 USD$\r\n    /// 1 USD$ = 1/0.01 PMA = 100 PMA\r\n    /// Start the calculation from one ether - PMA Token has 18 decimals\r\n    /// Multiply by the DECIMAL_FIXER (1e\u002B10) to fix the multiplication of the rate\r\n    /// Multiply with the fiat amount in cents\r\n    /// Divide by the Rate of PMA to Fiat in cents\r\n    /// Divide by the FIAT_TO_CENT_FIXER to fix the _fiatAmountInCents\r\n    /// ---------------------------------------------------------------------------------------------------------------\r\n    /// To save on gas, we have \u0027pre-calculated\u0027 the equation below and have set a constant in its place.\r\n    /// ONE_ETHER.mul(DECIMAL_FIXER).div(FIAT_TO_CENT_FIXER) = RATE_CALCULATION_NUMBER\r\n    /// ONE_ETHER = 10^18           |\r\n    /// DECIMAL_FIXER = 10^10       |   =\u003E 10^18 * 10^10 / 100 ==\u003E 10^26  =\u003E RATE_CALCULATION_NUMBER = 10^26\r\n    /// FIAT_TO_CENT_FIXER = 100    |\r\n    /// NOTE: The aforementioned value is linked to the OVERFLOW_LIMITER_NUMBER which is set to 10^20.\r\n    /// ---------------------------------------------------------------------------------------------------------------\r\n    function calculatePMAFromFiat(uint256 _fiatAmountInCents, uint256 _conversionRate)\r\n    internal\r\n    pure\r\n    validAmount(_fiatAmountInCents)\r\n    validAmount(_conversionRate)\r\n    returns (uint256) {\r\n        return RATE_CALCULATION_NUMBER.mul(_fiatAmountInCents).div(_conversionRate);\r\n    }\r\n    /// @dev Checks if a registration request is valid by comparing the v, r, s params\r\n    /// and the hashed params with the customer address.\r\n    /// @param v - recovery ID of the ETH signature. - https://github.com/ethereum/EIPs/issues/155\r\n    /// @param r - R output of ECDSA signature.\r\n    /// @param s - S output of ECDSA signature.\r\n    /// @param _customerAddress - customer address that is linked to this pull payment.\r\n    /// @param _pullPayment - pull payment to be validated.\r\n    /// @return bool - if the v, r, s params with the hashed params match the customer address\r\n    function isValidRegistration(\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s,\r\n        address _customerAddress,\r\n        PullPayment memory _pullPayment\r\n    )\r\n    internal\r\n    pure\r\n    returns (bool)\r\n    {\r\n        return ecrecover(\r\n            keccak256(\r\n                abi.encodePacked(\r\n                    _pullPayment.executorAddress,\r\n                    _pullPayment.paymentIds[0],\r\n                    _pullPayment.paymentType,\r\n                    _pullPayment.treasuryAddress,\r\n                    _pullPayment.currency,\r\n                    _pullPayment.initialPaymentAmountInCents,\r\n                    _pullPayment.fiatAmountInCents,\r\n                    _pullPayment.frequency,\r\n                    _pullPayment.numberOfPayments,\r\n                    _pullPayment.startTimestamp,\r\n                    _pullPayment.trialPeriod\r\n                )\r\n            ),\r\n            v, r, s) == _customerAddress;\r\n    }\r\n    /// @dev Checks if a deletion request is valid by comparing the v, r, s params\r\n    /// and the hashed params with the customer address.\r\n    /// @param v - recovery ID of the ETH signature. - https://github.com/ethereum/EIPs/issues/155\r\n    /// @param r - R output of ECDSA signature.\r\n    /// @param s - S output of ECDSA signature.\r\n    /// @param _paymentID - ID of the payment.\r\n    /// @param _customerAddress - customer address that is linked to this pull payment.\r\n    /// @param _pullPaymentExecutor - address that is allowed to execute this pull payment.\r\n    /// @return bool - if the v, r, s params with the hashed params match the customer address\r\n    function isValidDeletion(\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s,\r\n        bytes32 _paymentID,\r\n        address _customerAddress,\r\n        address _pullPaymentExecutor\r\n    )\r\n    internal\r\n    view\r\n    returns (bool)\r\n    {\r\n        return ecrecover(\r\n            keccak256(\r\n                abi.encodePacked(\r\n                    _paymentID,\r\n                    _pullPaymentExecutor\r\n                )\r\n            ), v, r, s) == _customerAddress\r\n        \u0026\u0026 keccak256(\r\n            abi.encodePacked(pullPayments[_paymentID].paymentIds[0])\r\n        ) == keccak256(abi.encodePacked(_paymentID)\r\n        );\r\n    }\r\n    /// @dev Checks if the address of an owner/executor needs to be funded.\r\n    /// The minimum amount the owner/executors should always have is 0.15 ETH\r\n    /// @param _address - address of owner/executors that the balance is checked against.\r\n    /// @return bool - whether the address needs more ETH.\r\n    function isFundingNeeded(address _address)\r\n    private\r\n    view\r\n    returns (bool) {\r\n        return address(_address).balance \u003C= MINIMUM_AMOUNT_OF_ETH_FOR_OPERATORS;\r\n    }\r\n}","ABI":"[{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022pullPayments\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022paymentType\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022name\u0022:\u0022currency\u0022,\u0022type\u0022:\u0022string\u0022},{\u0022name\u0022:\u0022initialConversionRate\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022initialPaymentAmountInCents\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022fiatAmountInCents\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022frequency\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022numberOfPayments\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022startTimestamp\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022trialPeriod\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022nextPaymentTimestamp\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022lastPaymentTimestamp\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022cancelTimestamp\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022treasuryAddress\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022executorAddress\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_executor\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022addExecutor\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_executor\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022removeExecutor\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022v\u0022,\u0022type\u0022:\u0022uint8\u0022},{\u0022name\u0022:\u0022r\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022name\u0022:\u0022s\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022name\u0022:\u0022_paymentDetails\u0022,\u0022type\u0022:\u0022bytes32[4]\u0022},{\u0022name\u0022:\u0022_addresses\u0022,\u0022type\u0022:\u0022address[3]\u0022},{\u0022name\u0022:\u0022_paymentAmounts\u0022,\u0022type\u0022:\u0022uint256[3]\u0022},{\u0022name\u0022:\u0022_paymentTimestamps\u0022,\u0022type\u0022:\u0022uint256[4]\u0022},{\u0022name\u0022:\u0022_currency\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022name\u0022:\u0022registerPullPayment\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022renounceOwnership\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022owner\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022isOwner\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022executors\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022v\u0022,\u0022type\u0022:\u0022uint8\u0022},{\u0022name\u0022:\u0022r\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022name\u0022:\u0022s\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022name\u0022:\u0022_paymentID\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022name\u0022:\u0022_customerAddress\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_pullPaymentExecutor\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022deletePullPayment\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022transferOwnership\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_customerAddress\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_paymentID\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022name\u0022:\u0022_paymentDetails\u0022,\u0022type\u0022:\u0022uint256[2]\u0022}],\u0022name\u0022:\u0022executePullPayment\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022token\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[{\u0022name\u0022:\u0022_token\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022constructor\u0022},{\u0022payable\u0022:true,\u0022stateMutability\u0022:\u0022payable\u0022,\u0022type\u0022:\u0022fallback\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022executor\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022LogExecutorAdded\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022executor\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022LogExecutorRemoved\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022actorRole\u0022,\u0022type\u0022:\u0022string\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022actor\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022timestamp\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022LogSmartContractActorFunded\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022customerAddress\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022paymentID\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022businessID\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022uniqueReferenceID\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022LogPaymentRegistered\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022customerAddress\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022paymentID\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022businessID\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022uniqueReferenceID\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022LogPaymentCancelled\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022customerAddress\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022paymentID\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022businessID\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022uniqueReferenceID\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022amountInPMA\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022conversionRate\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022LogPullPaymentExecuted\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022previousOwner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022OwnershipTransferred\u0022,\u0022type\u0022:\u0022event\u0022}]","ContractName":"PumaPayPullPaymentV2_2","CompilerVersion":"v0.5.10\u002Bcommit.5a6ea5b1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000846c66cf71c43f80403b51fe3906b3599d63336f","Library":"","SwarmSource":"bzzr://78bec68d1480cf9101c04257d6aeaaa02ed94a3a5a1c89ae0c41f943ddacef65"}]