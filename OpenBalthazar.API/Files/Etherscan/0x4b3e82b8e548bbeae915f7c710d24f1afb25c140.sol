[{"SourceCode":"// File: contracts\\interfaces\\IWhitelist.sol\r\n\r\npragma solidity 0.5.16;\r\n\r\n\r\n/**\r\n * Source: https://raw.githubusercontent.com/simple-restricted-token/reference-implementation/master/contracts/token/ERC1404/ERC1404.sol\r\n * With ERC-20 APIs removed (will be implemented as a separate contract).\r\n * And adding authorizeTransfer.\r\n */\r\ninterface IWhitelist\r\n{\r\n  /**\r\n   * @notice Detects if a transfer will be reverted and if so returns an appropriate reference code\r\n   * @param from Sending address\r\n   * @param to Receiving address\r\n   * @param value Amount of tokens being transferred\r\n   * @return Code by which to reference message for rejection reasoning\r\n   * @dev Overwrite with your custom transfer restriction logic\r\n   */\r\n  function detectTransferRestriction(\r\n    address from,\r\n    address to,\r\n    uint value\r\n  ) external view\r\n    returns (uint8);\r\n\r\n  /**\r\n   * @notice Returns a human-readable message for a given restriction code\r\n   * @param restrictionCode Identifier for looking up a message\r\n   * @return Text showing the restriction\u0027s reasoning\r\n   * @dev Overwrite with your custom message and restrictionCode handling\r\n   */\r\n  function messageForTransferRestriction(\r\n    uint8 restrictionCode\r\n  ) external pure\r\n    returns (string memory);\r\n\r\n  /**\r\n   * @notice Called by the DAT contract before a transfer occurs.\r\n   * @dev This call will revert when the transfer is not authorized.\r\n   * This is a mutable call to allow additional data to be recorded,\r\n   * such as when the user aquired their tokens.\r\n   */\r\n  function authorizeTransfer(\r\n    address _from,\r\n    address _to,\r\n    uint _value,\r\n    bool _isSell\r\n  ) external;\r\n}\r\n\r\n// File: @openzeppelin\\contracts-ethereum-package\\contracts\\math\\SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity\u0027s arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * \u0060SafeMath\u0060 restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it\u0027s recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060\u002B\u0060 operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a \u002B b;\r\n        require(c \u003E= a, \u0022SafeMath: addition overflow\u0022);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060-\u0060 operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \u0022SafeMath: subtraction overflow\u0022);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060-\u0060 operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b \u003C= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060*\u0060 operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\r\n        // benefit is lost if \u0027b\u0027 is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \u0022SafeMath: multiplication overflow\u0022);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060/\u0060 operator. Note: this function uses a\r\n     * \u0060revert\u0060 opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \u0022SafeMath: division by zero\u0022);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060/\u0060 operator. Note: this function uses a\r\n     * \u0060revert\u0060 opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b \u003E 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c \u002B a % b); // There is no case in which this doesn\u0027t hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060%\u0060 operator. This function uses a \u0060revert\u0060\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \u0022SafeMath: modulo by zero\u0022);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060%\u0060 operator. This function uses a \u0060revert\u0060\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin\\upgrades\\contracts\\Initializable.sol\r\n\r\npragma solidity \u003E=0.4.24 \u003C0.6.0;\r\n\r\n\r\n/**\r\n * @title Initializable\r\n *\r\n * @dev Helper contract to support initializer functions. To use it, replace\r\n * the constructor with a function that has the \u0060initializer\u0060 modifier.\r\n * WARNING: Unlike constructors, initializer functions must be manually\r\n * invoked. This applies both to deploying an Initializable contract, as well\r\n * as extending an Initializable contract via inheritance.\r\n * WARNING: When used with inheritance, manual care must be taken to not invoke\r\n * a parent initializer twice, or ensure that all initializers are idempotent,\r\n * because this is not dealt with automatically as with constructors.\r\n */\r\ncontract Initializable {\r\n\r\n  /**\r\n   * @dev Indicates that the contract has been initialized.\r\n   */\r\n  bool private initialized;\r\n\r\n  /**\r\n   * @dev Indicates that the contract is in the process of being initialized.\r\n   */\r\n  bool private initializing;\r\n\r\n  /**\r\n   * @dev Modifier to use in the initializer function of a contract.\r\n   */\r\n  modifier initializer() {\r\n    require(initializing || isConstructor() || !initialized, \u0022Contract instance has already been initialized\u0022);\r\n\r\n    bool isTopLevelCall = !initializing;\r\n    if (isTopLevelCall) {\r\n      initializing = true;\r\n      initialized = true;\r\n    }\r\n\r\n    _;\r\n\r\n    if (isTopLevelCall) {\r\n      initializing = false;\r\n    }\r\n  }\r\n\r\n  /// @dev Returns true if and only if the function is running in the constructor\r\n  function isConstructor() private view returns (bool) {\r\n    // extcodesize checks the size of the code stored in an address, and\r\n    // address returns the current address. Since the code is still not\r\n    // deployed when running a constructor, any checks on its code size will\r\n    // yield zero, making it an effective way to detect if a contract is\r\n    // under construction or not.\r\n    uint256 cs;\r\n    assembly { cs := extcodesize(address) }\r\n    return cs == 0;\r\n  }\r\n\r\n  // Reserved storage space to allow for layout changes in the future.\r\n  uint256[50] private ______gap;\r\n}\r\n\r\n// File: node_modules\\@openzeppelin\\contracts-ethereum-package\\contracts\\GSN\\Context.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context is Initializable {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin\\contracts-ethereum-package\\contracts\\ownership\\Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * \u0060onlyOwner\u0060, which can be aplied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Initializable, Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    function initialize(address sender) public initializer {\r\n        _owner = sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \u0022Ownable: caller is not the owner\u0022);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * \u0060onlyOwner\u0060 functions anymore. Can only be called by the current owner.\r\n     *\r\n     * \u003E Note: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (\u0060newOwner\u0060).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (\u0060newOwner\u0060).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \u0022Ownable: new owner is the zero address\u0022);\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    uint256[50] private ______gap;\r\n}\r\n\r\n// File: @openzeppelin\\contracts-ethereum-package\\contracts\\token\\ERC20\\IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by \u0060account\u0060.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves \u0060amount\u0060 tokens from the caller\u0027s account to \u0060recipient\u0060.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that \u0060spender\u0060 will be\r\n     * allowed to spend on behalf of \u0060owner\u0060 through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets \u0060amount\u0060 as the allowance of \u0060spender\u0060 over the caller\u0027s tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves \u0060amount\u0060 tokens from \u0060sender\u0060 to \u0060recipient\u0060 using the\r\n     * allowance mechanism. \u0060amount\u0060 is then deducted from the caller\u0027s\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when \u0060value\u0060 tokens are moved from one account (\u0060from\u0060) to\r\n     * another (\u0060to\u0060).\r\n     *\r\n     * Note that \u0060value\u0060 may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a \u0060spender\u0060 for an \u0060owner\u0060 is set by\r\n     * a call to {approve}. \u0060value\u0060 is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin\\contracts-ethereum-package\\contracts\\access\\Roles.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address =\u003E bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev Give an account access to this role.\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(!has(role, account), \u0022Roles: account already has role\u0022);\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Remove an account\u0027s access to this role.\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(has(role, account), \u0022Roles: account does not have role\u0022);\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Check if an account has this role.\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0), \u0022Roles: account is the zero address\u0022);\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\n// File: contracts\\mixins\\OperatorRole.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n// Original source: openzeppelin\u0027s SignerRole\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @notice allows a single owner to manage a group of operators which may\r\n * have some special permissions in the contract.\r\n */\r\ncontract OperatorRole is Initializable, Context, Ownable\r\n{\r\n  using Roles for Roles.Role;\r\n\r\n  event OperatorAdded(address indexed account);\r\n  event OperatorRemoved(address indexed account);\r\n\r\n  Roles.Role private _operators;\r\n\r\n  function _initializeOperatorRole() internal\r\n  {\r\n    _addOperator(msg.sender);\r\n  }\r\n\r\n  modifier onlyOperator()\r\n  {\r\n    require(isOperator(msg.sender), \u0022OperatorRole: caller does not have the Operator role\u0022);\r\n    _;\r\n  }\r\n\r\n  function isOperator(address account) public view returns (bool)\r\n  {\r\n    return _operators.has(account);\r\n  }\r\n\r\n  function addOperator(address account) public onlyOwner\r\n  {\r\n    _addOperator(account);\r\n  }\r\n\r\n  function removeOperator(address account) public onlyOwner\r\n  {\r\n    _removeOperator(account);\r\n  }\r\n\r\n  function renounceOperator() public\r\n  {\r\n    _removeOperator(msg.sender);\r\n  }\r\n\r\n  function _addOperator(address account) internal\r\n  {\r\n    _operators.add(account);\r\n    emit OperatorAdded(account);\r\n  }\r\n\r\n  function _removeOperator(address account) internal\r\n  {\r\n    _operators.remove(account);\r\n    emit OperatorRemoved(account);\r\n  }\r\n\r\n  uint256[50] private ______gap;\r\n}\r\n\r\n// File: contracts\\Whitelist.sol\r\n\r\npragma solidity 0.5.16;\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @notice whitelist which manages KYC approvals, token lockup, and transfer\r\n * restrictions for a DAT token.\r\n */\r\ncontract Whitelist is IWhitelist, Ownable, OperatorRole\r\n{\r\n  using SafeMath for uint;\r\n\r\n  // uint8 status codes as suggested by the ERC-1404 spec\r\n  uint8 constant private STATUS_SUCCESS = 0;\r\n  uint8 constant private STATUS_ERROR_JURISDICTION_FLOW = 1;\r\n  uint8 constant private STATUS_ERROR_LOCKUP = 2;\r\n  uint8 constant private STATUS_ERROR_USER_UNKNOWN = 3;\r\n\r\n  event ConfigWhitelist(\r\n    uint _startDate,\r\n    uint _lockupGranularity,\r\n    address indexed _operator\r\n  );\r\n  event UpdateJurisdictionFlow(\r\n    uint indexed _fromJurisdictionId,\r\n    uint indexed _toJurisdictionId,\r\n    uint _lockupLength,\r\n    address indexed _operator\r\n  );\r\n  event ApproveNewUser(\r\n    address indexed _trader,\r\n    uint indexed _jurisdictionId,\r\n    address indexed _operator\r\n  );\r\n  event AddApprovedUserWallet(\r\n    address indexed _userId,\r\n    address indexed _newWallet,\r\n    address indexed _operator\r\n  );\r\n  event RevokeUserWallet(\r\n    address indexed _wallet,\r\n    address indexed _operator\r\n  );\r\n  event UpdateJurisdictionForUserId(\r\n    address indexed _userId,\r\n    uint indexed _jurisdictionId,\r\n    address indexed _operator\r\n  );\r\n  event AddLockup(\r\n    address indexed _userId,\r\n    uint _lockupExpirationDate,\r\n    uint _numberOfTokensLocked,\r\n    address indexed _operator\r\n  );\r\n  event UnlockTokens(\r\n    address indexed _userId,\r\n    uint _tokensUnlocked,\r\n    address indexed _operator\r\n  );\r\n\r\n  /**\r\n   * @notice the address of the contract this whitelist manages.\r\n   * @dev this cannot change after initialization\r\n   */\r\n  IERC20 public callingContract;\r\n\r\n  /**\r\n   * @notice blocks all new purchases until now \u003E= startDate.\r\n   * @dev this can be changed by the owner at any time\r\n   */\r\n  uint public startDate;\r\n\r\n  /**\r\n   * @notice Merges lockup entries when the time delta between\r\n   * them is less than this value.\r\n   * @dev this can be changed by the owner at any time\r\n   */\r\n  uint public lockupGranularity;\r\n\r\n  /**\r\n   * @notice Maps the \u0060from\u0060 jurisdiction to the \u0060to\u0060 jurisdiction to determine if\r\n   * transfers between these entities are allowed and if a token lockup should apply:\r\n   * - 0 means transfers between these jurisdictions is blocked (the default)\r\n   * - 1 is supported with no token lockup required\r\n   * - \u003E1 is supported and this value defines the lockup length in seconds\r\n   * @dev You can read data externally with \u0060getJurisdictionFlow\u0060.\r\n   * This configuration can be modified by the owner at any time\r\n   */\r\n  mapping(uint =\u003E mapping(uint =\u003E uint)) internal jurisdictionFlows;\r\n\r\n  /**\r\n   * @notice Maps a KYC\u0027d user addresses to their userId.\r\n   * @dev The first entry for each user should set userId = user address.\r\n   * Future entries can use the same userId for shared accounts\r\n   * (e.g. a single user with multiple wallets).\r\n   *\r\n   * All wallets with the same userId share the same token lockup.\r\n   */\r\n  mapping(address =\u003E address) public authorizedWalletToUserId;\r\n\r\n  /**\r\n   * @notice info stored for each userId.\r\n   */\r\n  struct UserInfo\r\n  {\r\n    // The user\u0027s current jurisdictionId or 0 for unknown (the default)\r\n    uint jurisdictionId;\r\n    // The number of tokens locked, with details tracked in userIdLockups\r\n    uint totalTokensLocked;\r\n    // The first applicable entry in userIdLockups\r\n    uint startIndex;\r\n    // The last applicable entry in userIdLockups \u002B 1\r\n    uint endIndex;\r\n  }\r\n\r\n  /**\r\n   * @notice Maps the userId to UserInfo.\r\n   * @dev You can read data externally with \u0060getAuthorizedUserIdInfo\u0060.\r\n   */\r\n  mapping(address =\u003E UserInfo) internal authorizedUserIdInfo;\r\n\r\n  /**\r\n   * @notice info stored for each token lockup.\r\n   */\r\n  struct Lockup\r\n  {\r\n    // The date/time that this lockup entry has expired and the tokens may be transferred\r\n    uint lockupExpirationDate;\r\n    // How many tokens locked until the given expiration date.\r\n    uint numberOfTokensLocked;\r\n  }\r\n\r\n  /**\r\n   * @notice Maps the userId -\u003E lockup entry index -\u003E a Lockup entry\r\n   * @dev Indexes are tracked by the UserInfo entries.\r\n   * You can read data externally with \u0060getUserIdLockup\u0060.\r\n   * We assume lockups are always added in order of expiration date -\r\n   * if that assumption does not hold, some tokens may remain locked\r\n   * until older lockup entries from that user have expired.\r\n   */\r\n  mapping(address =\u003E mapping(uint =\u003E Lockup)) internal userIdLockups;\r\n\r\n  /**\r\n   * @notice checks for transfer restrictions between jurisdictions.\r\n   * @return if transfers between these jurisdictions are allowed and if a\r\n   * token lockup should apply:\r\n   * - 0 means transfers between these jurisdictions is blocked (the default)\r\n   * - 1 is supported with no token lockup required\r\n   * - \u003E1 is supported and this value defines the lockup length in seconds\r\n   */\r\n  function getJurisdictionFlow(\r\n    uint _fromJurisdictionId,\r\n    uint _toJurisdictionId\r\n  ) external view\r\n    returns (uint lockupLength)\r\n  {\r\n    return jurisdictionFlows[_fromJurisdictionId][_toJurisdictionId];\r\n  }\r\n\r\n  /**\r\n   * @notice checks details for a given userId.\r\n   */\r\n  function getAuthorizedUserIdInfo(\r\n    address _userId\r\n  ) external view\r\n    returns (\r\n      uint jurisdictionId,\r\n      uint totalTokensLocked,\r\n      uint startIndex,\r\n      uint endIndex\r\n    )\r\n  {\r\n    UserInfo memory info = authorizedUserIdInfo[_userId];\r\n    return (info.jurisdictionId, info.totalTokensLocked, info.startIndex, info.endIndex);\r\n  }\r\n\r\n  /**\r\n   * @notice gets a specific lockup entry for a userId.\r\n   * @dev use \u0060getAuthorizedUserIdInfo\u0060 to determine the range of applicable lockupIndex.\r\n   */\r\n  function getUserIdLockup(\r\n    address _userId,\r\n    uint _lockupIndex\r\n  ) external view\r\n    returns (uint lockupExpirationDate, uint numberOfTokensLocked)\r\n  {\r\n    Lockup memory lockup = userIdLockups[_userId][_lockupIndex];\r\n    return (lockup.lockupExpirationDate, lockup.numberOfTokensLocked);\r\n  }\r\n\r\n  /**\r\n   * @notice Returns the number of unlocked tokens a given userId has available.\r\n   * @dev this is a \u0060view\u0060-only way to determine how many tokens are still locked\r\n   * (info.totalTokensLocked is only accurate after processing lockups which changes state)\r\n   */\r\n  function getLockedTokenCount(\r\n    address _userId\r\n  ) external view\r\n    returns (uint lockedTokens)\r\n  {\r\n    UserInfo memory info = authorizedUserIdInfo[_userId];\r\n    lockedTokens = info.totalTokensLocked;\r\n    uint endIndex = info.endIndex;\r\n    for(uint i = info.startIndex; i \u003C endIndex; i\u002B\u002B)\r\n    {\r\n      Lockup memory lockup = userIdLockups[_userId][i];\r\n      if(lockup.lockupExpirationDate \u003E now)\r\n      {\r\n        // no more eligable entries\r\n        break;\r\n      }\r\n      // this lockup entry has expired and would be processed on the next tx\r\n      lockedTokens -= lockup.numberOfTokensLocked;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Checks if there is a transfer restriction for the given addresses.\r\n   * Does not consider tokenLockup. Use \u0060getLockedTokenCount\u0060 for that.\r\n   * @dev this function is from the erc-1404 standard and currently in use by the DAT\r\n   * for the \u0060pay\u0060 feature.\r\n   */\r\n  function detectTransferRestriction(\r\n    address _from,\r\n    address _to,\r\n    uint /* _value */\r\n  ) external view\r\n    returns(uint8 status)\r\n  {\r\n    address fromUserId = authorizedWalletToUserId[_from];\r\n    address toUserId = authorizedWalletToUserId[_to];\r\n    if(\r\n      (fromUserId == address(0) \u0026\u0026 _from != address(0)) ||\r\n      (toUserId == address(0) \u0026\u0026 _to != address(0))\r\n    )\r\n    {\r\n      return STATUS_ERROR_USER_UNKNOWN;\r\n    }\r\n    if(fromUserId != toUserId)\r\n    {\r\n      uint fromJurisdictionId = authorizedUserIdInfo[fromUserId].jurisdictionId;\r\n      uint toJurisdictionId = authorizedUserIdInfo[toUserId].jurisdictionId;\r\n      if(jurisdictionFlows[fromJurisdictionId][toJurisdictionId] == 0)\r\n      {\r\n        return STATUS_ERROR_JURISDICTION_FLOW;\r\n      }\r\n    }\r\n\r\n    return STATUS_SUCCESS;\r\n  }\r\n\r\n  function messageForTransferRestriction(\r\n    uint8 _restrictionCode\r\n  ) external pure\r\n    returns (string memory)\r\n  {\r\n    if(_restrictionCode == STATUS_SUCCESS)\r\n    {\r\n      return \u0022SUCCESS\u0022;\r\n    }\r\n    if(_restrictionCode == STATUS_ERROR_JURISDICTION_FLOW)\r\n    {\r\n      return \u0022DENIED: JURISDICTION_FLOW\u0022;\r\n    }\r\n    if(_restrictionCode == STATUS_ERROR_LOCKUP)\r\n    {\r\n      return \u0022DENIED: LOCKUP\u0022;\r\n    }\r\n    if(_restrictionCode == STATUS_ERROR_USER_UNKNOWN)\r\n    {\r\n      return \u0022DENIED: USER_UNKNOWN\u0022;\r\n    }\r\n    return \u0022DENIED: UNKNOWN_ERROR\u0022;\r\n  }\r\n\r\n  /**\r\n   * @notice Called once to complete configuration for this contract.\r\n   * @dev Done with \u0060initialize\u0060 instead of a constructor in order to support\r\n   * using this contract via an Upgradable Proxy.\r\n   */\r\n  function initialize(\r\n    address _callingContract\r\n  ) public\r\n  {\r\n    Ownable.initialize(msg.sender);\r\n    _initializeOperatorRole();\r\n    callingContract = IERC20(_callingContract);\r\n  }\r\n\r\n  /**\r\n   * @notice Called by the owner to update the startDate or lockupGranularity.\r\n   */\r\n  function configWhitelist(\r\n    uint _startDate,\r\n    uint _lockupGranularity\r\n  ) external\r\n    onlyOwner()\r\n  {\r\n    startDate = _startDate;\r\n    lockupGranularity = _lockupGranularity;\r\n    emit ConfigWhitelist(_startDate, _lockupGranularity, msg.sender);\r\n  }\r\n\r\n  /**\r\n   * @notice Called by the owner to define or update jurisdiction flows.\r\n   * @param _lockupLengths defines transfer restrictions where:\r\n   * - 0 is not supported (the default)\r\n   * - 1 is supported with no token lockup required\r\n   * - \u003E1 is supported and this value defines the lockup length in seconds.\r\n   * @dev note that this can be called with a partial list, only including entries\r\n   * to be added or which have changed.\r\n   */\r\n  function updateJurisdictionFlows(\r\n    uint[] calldata _fromJurisdictionIds,\r\n    uint[] calldata _toJurisdictionIds,\r\n    uint[] calldata _lockupLengths\r\n  ) external\r\n    onlyOwner()\r\n  {\r\n    uint count = _fromJurisdictionIds.length;\r\n    for(uint i = 0; i \u003C count; i\u002B\u002B)\r\n    {\r\n      uint fromJurisdictionId = _fromJurisdictionIds[i];\r\n      uint toJurisdictionId = _toJurisdictionIds[i];\r\n      require(fromJurisdictionId \u003E 0 \u0026\u0026 toJurisdictionId \u003E 0, \u0022INVALID_JURISDICTION_ID\u0022);\r\n      jurisdictionFlows[fromJurisdictionId][toJurisdictionId] = _lockupLengths[i];\r\n      emit UpdateJurisdictionFlow(\r\n        fromJurisdictionId,\r\n        toJurisdictionId,\r\n        _lockupLengths[i],\r\n        msg.sender\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Called by an operator to add new traders.\r\n   * @dev The trader will be assigned a userId equal to their wallet address.\r\n   */\r\n  function approveNewUsers(\r\n    address[] calldata _traders,\r\n    uint[] calldata _jurisdictionIds\r\n  ) external\r\n    onlyOperator()\r\n  {\r\n    uint length = _traders.length;\r\n    for(uint i = 0; i \u003C length; i\u002B\u002B)\r\n    {\r\n      address trader = _traders[i];\r\n      require(authorizedWalletToUserId[trader] == address(0), \u0022USER_WALLET_ALREADY_ADDED\u0022);\r\n      require(authorizedUserIdInfo[trader].jurisdictionId == 0, \u0022USER_ID_ALREADY_ADDED\u0022);\r\n      uint jurisdictionId = _jurisdictionIds[i];\r\n      require(jurisdictionId != 0, \u0022INVALID_JURISDICTION_ID\u0022);\r\n\r\n      authorizedWalletToUserId[trader] = trader;\r\n      authorizedUserIdInfo[trader].jurisdictionId = jurisdictionId;\r\n      emit ApproveNewUser(trader, jurisdictionId, msg.sender);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Called by an operator to add wallets to known userIds.\r\n   */\r\n  function addApprovedUserWallets(\r\n    address[] calldata _userIds,\r\n    address[] calldata _newWallets\r\n  ) external\r\n    onlyOperator()\r\n  {\r\n    uint length = _userIds.length;\r\n    for(uint i = 0; i \u003C length; i\u002B\u002B)\r\n    {\r\n      address userId = _userIds[i];\r\n      require(authorizedUserIdInfo[userId].jurisdictionId != 0, \u0022USER_ID_UNKNOWN\u0022);\r\n      address newWallet = _newWallets[i];\r\n      require(authorizedWalletToUserId[newWallet] == address(0), \u0022WALLET_ALREADY_ADDED\u0022);\r\n\r\n      authorizedWalletToUserId[newWallet] = userId;\r\n      emit AddApprovedUserWallet(userId, newWallet, msg.sender);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Called by an operator to revoke approval for the given wallets.\r\n   * @dev If this is called in error, you can restore access with \u0060addApprovedUserWallets\u0060.\r\n   */\r\n  function revokeUserWallets(\r\n    address[] calldata _wallets\r\n  ) external\r\n    onlyOperator()\r\n  {\r\n    uint length = _wallets.length;\r\n    for(uint i = 0; i \u003C length; i\u002B\u002B)\r\n    {\r\n      address wallet = _wallets[i];\r\n      require(authorizedWalletToUserId[wallet] != address(0), \u0022WALLET_NOT_FOUND\u0022);\r\n\r\n      authorizedWalletToUserId[wallet] = address(0);\r\n      emit RevokeUserWallet(wallet, msg.sender);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Called by an operator to change the jurisdiction\r\n   * for the given userIds.\r\n   */\r\n  function updateJurisdictionsForUserIds(\r\n    address[] calldata _userIds,\r\n    uint[] calldata _jurisdictionIds\r\n  ) external\r\n    onlyOperator()\r\n  {\r\n    uint length = _userIds.length;\r\n    for(uint i = 0; i \u003C length; i\u002B\u002B)\r\n    {\r\n      address userId = _userIds[i];\r\n      require(authorizedUserIdInfo[userId].jurisdictionId != 0, \u0022USER_ID_UNKNOWN\u0022);\r\n      uint jurisdictionId = _jurisdictionIds[i];\r\n      require(jurisdictionId != 0, \u0022INVALID_JURISDICTION_ID\u0022);\r\n\r\n      authorizedUserIdInfo[userId].jurisdictionId = jurisdictionId;\r\n      emit UpdateJurisdictionForUserId(userId, jurisdictionId, msg.sender);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Adds a tokenLockup for the userId.\r\n   * @dev A no-op if lockup is not required for this transfer.\r\n   * The lockup entry is merged with the most recent lockup for that user\r\n   * if the expiration date is \u003C= \u0060lockupGranularity\u0060 from the previous entry.\r\n   */\r\n  function _addLockup(\r\n    address _userId,\r\n    uint _lockupExpirationDate,\r\n    uint _numberOfTokensLocked\r\n  ) internal\r\n  {\r\n    if(_numberOfTokensLocked == 0 || _lockupExpirationDate \u003C= now)\r\n    {\r\n      // This is a no-op\r\n      return;\r\n    }\r\n    emit AddLockup(_userId, _lockupExpirationDate, _numberOfTokensLocked, msg.sender);\r\n    UserInfo storage info = authorizedUserIdInfo[_userId];\r\n    require(info.jurisdictionId != 0, \u0022USER_ID_UNKNOWN\u0022);\r\n    info.totalTokensLocked = info.totalTokensLocked.add(_numberOfTokensLocked);\r\n    if(info.endIndex \u003E 0)\r\n    {\r\n      Lockup storage lockup = userIdLockups[_userId][info.endIndex - 1];\r\n      if(lockup.lockupExpirationDate \u002B lockupGranularity \u003E= _lockupExpirationDate)\r\n      {\r\n        // Merge with the previous entry\r\n        // if totalTokensLocked can\u0027t overflow then this value will not either\r\n        lockup.numberOfTokensLocked \u002B= _numberOfTokensLocked;\r\n        return;\r\n      }\r\n    }\r\n    // Add a new lockup entry\r\n    userIdLockups[_userId][info.endIndex] = Lockup(_lockupExpirationDate, _numberOfTokensLocked);\r\n    info.endIndex\u002B\u002B;\r\n  }\r\n\r\n  /**\r\n   * @notice Operators can manually add lockups for userIds.\r\n   * This may be used by the organization before transfering tokens\r\n   * from the initial supply.\r\n   */\r\n  function addLockups(\r\n    address[] calldata _userIds,\r\n    uint[] calldata _lockupExpirationDates,\r\n    uint[] calldata _numberOfTokensLocked\r\n  ) external\r\n    onlyOperator()\r\n  {\r\n    uint length = _userIds.length;\r\n    for(uint i = 0; i \u003C length; i\u002B\u002B)\r\n    {\r\n      _addLockup(\r\n        _userIds[i],\r\n        _lockupExpirationDates[i],\r\n        _numberOfTokensLocked[i]\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Checks the next lockup entry for a given user and unlocks\r\n   * those tokens if applicable.\r\n   * @param _ignoreExpiration bypasses the recorded expiration date and\r\n   * removes the lockup entry if there are any remaining for this user.\r\n   */\r\n  function _processLockup(\r\n    UserInfo storage info,\r\n    address _userId,\r\n    bool _ignoreExpiration\r\n  ) internal\r\n    returns (bool isDone)\r\n  {\r\n    if(info.startIndex \u003E= info.endIndex)\r\n    {\r\n      // no lockups for this user\r\n      return true;\r\n    }\r\n    Lockup storage lockup = userIdLockups[_userId][info.startIndex];\r\n    if(lockup.lockupExpirationDate \u003E now \u0026\u0026 !_ignoreExpiration)\r\n    {\r\n      // no more eligable entries\r\n      return true;\r\n    }\r\n    emit UnlockTokens(_userId, lockup.numberOfTokensLocked, msg.sender);\r\n    info.totalTokensLocked -= lockup.numberOfTokensLocked;\r\n    info.startIndex\u002B\u002B;\r\n    // Free up space we don\u0027t need anymore\r\n    lockup.numberOfTokensLocked = 0;\r\n    lockup.lockupExpirationDate = 0;\r\n    // There may be another entry\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * @notice Anyone can process lockups for a userId.\r\n   * This is generally unused but may be required if a given userId\r\n   * has a lot of individual lockup entries which are expired.\r\n   */\r\n  function processLockups(\r\n    address _userId,\r\n    uint _maxCount\r\n  ) external\r\n  {\r\n    UserInfo storage info = authorizedUserIdInfo[_userId];\r\n    require(info.jurisdictionId \u003E 0, \u0022USER_ID_UNKNOWN\u0022);\r\n    for(uint i = 0; i \u003C _maxCount; i\u002B\u002B)\r\n    {\r\n      if(_processLockup(info, _userId, false))\r\n      {\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Allows operators to remove lockup entries, bypassing the\r\n   * recorded expiration date.\r\n   * @dev This should generally remain unused. It could be used in combination with\r\n   * \u0060addLockups\u0060 to fix an incorrect lockup expiration date or quantity.\r\n   */\r\n  function forceUnlock(\r\n    address _userId,\r\n    uint _maxCount\r\n  ) external\r\n    onlyOperator()\r\n  {\r\n    UserInfo storage info = authorizedUserIdInfo[_userId];\r\n    require(info.jurisdictionId \u003E 0, \u0022USER_ID_UNKNOWN\u0022);\r\n    for(uint i = 0; i \u003C _maxCount; i\u002B\u002B)\r\n    {\r\n      if(_processLockup(info, _userId, true))\r\n      {\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Called by the callingContract before a transfer occurs.\r\n   * @dev This call will revert when the transfer is not authorized.\r\n   * This is a mutable call to allow additional data to be recorded,\r\n   * such as when the user aquired their tokens.\r\n   */\r\n  function authorizeTransfer(\r\n    address _from,\r\n    address _to,\r\n    uint _value,\r\n    bool _isSell\r\n  ) external\r\n  {\r\n    require(address(callingContract) == msg.sender, \u0022CALL_VIA_CONTRACT_ONLY\u0022);\r\n\r\n    if(_to == address(0) \u0026\u0026 !_isSell)\r\n    {\r\n      // This is a burn, no authorization required\r\n      // You can burn locked tokens. Burning will effectively burn unlocked tokens,\r\n      // and then burn locked tokens starting with those that will be unlocked first.\r\n      return;\r\n    }\r\n\r\n    address fromUserId = authorizedWalletToUserId[_from];\r\n    require(fromUserId != address(0) || _from == address(0), \u0022FROM_USER_UNKNOWN\u0022);\r\n    address toUserId = authorizedWalletToUserId[_to];\r\n    require(toUserId != address(0) || _to == address(0), \u0022TO_USER_UNKNOWN\u0022);\r\n\r\n    // A single user can move funds between wallets they control without restriction\r\n    if(fromUserId != toUserId)\r\n    {\r\n      uint fromJurisdictionId = authorizedUserIdInfo[fromUserId].jurisdictionId;\r\n      uint toJurisdictionId = authorizedUserIdInfo[toUserId].jurisdictionId;\r\n      uint lockupLength = jurisdictionFlows[fromJurisdictionId][toJurisdictionId];\r\n      require(lockupLength \u003E 0, \u0022DENIED: JURISDICTION_FLOW\u0022);\r\n\r\n      // If the lockupLength is 1 then we interpret this as approved without any lockup\r\n      // This means any token lockup period must be at least 2 seconds long in order to apply.\r\n      if(lockupLength \u003E 1 \u0026\u0026 _to != address(0))\r\n      {\r\n        // Lockup may apply for any action other than burn/sell (e.g. buy/pay/transfer)\r\n        uint lockupExpirationDate = now \u002B lockupLength;\r\n        _addLockup(toUserId, lockupExpirationDate, _value);\r\n      }\r\n\r\n      if(_from == address(0))\r\n      {\r\n        // This is minting (buy or pay)\r\n        require(now \u003E= startDate, \u0022WAIT_FOR_START_DATE\u0022);\r\n      }\r\n      else\r\n      {\r\n        // This is a transfer (or sell)\r\n        UserInfo storage info = authorizedUserIdInfo[fromUserId];\r\n        while(true)\r\n        {\r\n          if(_processLockup(info, fromUserId, false))\r\n          {\r\n            break;\r\n          }\r\n        }\r\n        uint balance = callingContract.balanceOf(_from);\r\n        // This first require is redundant, but allows us to provide\r\n        // a more clear error message.\r\n        require(\r\n          balance \u003E= _value,\r\n          \u0022INSUFFICIENT_BALANCE\u0022\r\n        );\r\n        require(\r\n          balance \u003E= info.totalTokensLocked.add(_value),\r\n          \u0022INSUFFICIENT_TRANSFERABLE_BALANCE\u0022\r\n        );\r\n      }\r\n    }\r\n  }\r\n}","ABI":"[{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_userId\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_newWallet\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_operator\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022AddApprovedUserWallet\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_userId\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_lockupExpirationDate\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_numberOfTokensLocked\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_operator\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022AddLockup\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_trader\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_jurisdictionId\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_operator\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022ApproveNewUser\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_startDate\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_lockupGranularity\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_operator\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022ConfigWhitelist\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022OperatorAdded\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022OperatorRemoved\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022previousOwner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022OwnershipTransferred\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_wallet\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_operator\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022RevokeUserWallet\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_userId\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_tokensUnlocked\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_operator\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022UnlockTokens\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_fromJurisdictionId\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_toJurisdictionId\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_lockupLength\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_operator\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022UpdateJurisdictionFlow\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_userId\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_jurisdictionId\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_operator\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022UpdateJurisdictionForUserId\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address[]\u0022,\u0022name\u0022:\u0022_userIds\u0022,\u0022type\u0022:\u0022address[]\u0022},{\u0022internalType\u0022:\u0022address[]\u0022,\u0022name\u0022:\u0022_newWallets\u0022,\u0022type\u0022:\u0022address[]\u0022}],\u0022name\u0022:\u0022addApprovedUserWallets\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address[]\u0022,\u0022name\u0022:\u0022_userIds\u0022,\u0022type\u0022:\u0022address[]\u0022},{\u0022internalType\u0022:\u0022uint256[]\u0022,\u0022name\u0022:\u0022_lockupExpirationDates\u0022,\u0022type\u0022:\u0022uint256[]\u0022},{\u0022internalType\u0022:\u0022uint256[]\u0022,\u0022name\u0022:\u0022_numberOfTokensLocked\u0022,\u0022type\u0022:\u0022uint256[]\u0022}],\u0022name\u0022:\u0022addLockups\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022addOperator\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address[]\u0022,\u0022name\u0022:\u0022_traders\u0022,\u0022type\u0022:\u0022address[]\u0022},{\u0022internalType\u0022:\u0022uint256[]\u0022,\u0022name\u0022:\u0022_jurisdictionIds\u0022,\u0022type\u0022:\u0022uint256[]\u0022}],\u0022name\u0022:\u0022approveNewUsers\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_from\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_value\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022_isSell\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022name\u0022:\u0022authorizeTransfer\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022authorizedWalletToUserId\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022callingContract\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022contract IERC20\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_startDate\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_lockupGranularity\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022configWhitelist\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_from\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022detectTransferRestriction\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint8\u0022,\u0022name\u0022:\u0022status\u0022,\u0022type\u0022:\u0022uint8\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_userId\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_maxCount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022forceUnlock\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_userId\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022getAuthorizedUserIdInfo\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022jurisdictionId\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022totalTokensLocked\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022startIndex\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022endIndex\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_fromJurisdictionId\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_toJurisdictionId\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022getJurisdictionFlow\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022lockupLength\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_userId\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022getLockedTokenCount\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022lockedTokens\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_userId\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_lockupIndex\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022getUserIdLockup\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022lockupExpirationDate\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022numberOfTokensLocked\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_callingContract\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022initialize\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022isOperator\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022isOwner\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022lockupGranularity\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint8\u0022,\u0022name\u0022:\u0022_restrictionCode\u0022,\u0022type\u0022:\u0022uint8\u0022}],\u0022name\u0022:\u0022messageForTransferRestriction\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022string\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022pure\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022owner\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_userId\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_maxCount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022processLockups\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022removeOperator\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022renounceOperator\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022renounceOwnership\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address[]\u0022,\u0022name\u0022:\u0022_wallets\u0022,\u0022type\u0022:\u0022address[]\u0022}],\u0022name\u0022:\u0022revokeUserWallets\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022startDate\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022transferOwnership\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256[]\u0022,\u0022name\u0022:\u0022_fromJurisdictionIds\u0022,\u0022type\u0022:\u0022uint256[]\u0022},{\u0022internalType\u0022:\u0022uint256[]\u0022,\u0022name\u0022:\u0022_toJurisdictionIds\u0022,\u0022type\u0022:\u0022uint256[]\u0022},{\u0022internalType\u0022:\u0022uint256[]\u0022,\u0022name\u0022:\u0022_lockupLengths\u0022,\u0022type\u0022:\u0022uint256[]\u0022}],\u0022name\u0022:\u0022updateJurisdictionFlows\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address[]\u0022,\u0022name\u0022:\u0022_userIds\u0022,\u0022type\u0022:\u0022address[]\u0022},{\u0022internalType\u0022:\u0022uint256[]\u0022,\u0022name\u0022:\u0022_jurisdictionIds\u0022,\u0022type\u0022:\u0022uint256[]\u0022}],\u0022name\u0022:\u0022updateJurisdictionsForUserIds\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022}]","ContractName":"Whitelist","CompilerVersion":"v0.5.16\u002Bcommit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://27751cc849b537c3ffcb0ca714a8649cc5cf549f161571286e17ea1a885d3d4c"}]