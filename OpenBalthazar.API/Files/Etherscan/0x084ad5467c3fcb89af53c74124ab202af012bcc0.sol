[{"SourceCode":"pragma solidity 0.5.11;\r\n\r\n\r\ninterface DharmaKeyRingImplementationV0Interface {\r\n  enum AdminActionType {\r\n    AddStandardKey,\r\n    RemoveStandardKey,\r\n    SetStandardThreshold,\r\n    AddAdminKey,\r\n    RemoveAdminKey,\r\n    SetAdminThreshold,\r\n    AddDualKey,\r\n    RemoveDualKey,\r\n    SetDualThreshold\r\n  }\r\n\r\n  function takeAdminAction(\r\n    AdminActionType adminActionType, uint160 argument, bytes calldata signatures\r\n  ) external;\r\n}\r\n\r\n\r\n/**\r\n * @title DharmaLocksmithV0\r\n * @author 0age\r\n * @notice This contract provides a helper function for setting new keys on a V0\r\n * Dharma Key Ring.\r\n */\r\ncontract DharmaLocksmithV0 {\r\n  /**\r\n   * @notice Set a new signing key on a keyring using an existing signature on\r\n   * the key ring.\r\n   * @param keyRing address The key ring to set the new user signing key on.\r\n   * @param newUserSigningKey address The new user signing key.\r\n   * @param signature bytes The signature, validated from an existing key and\r\n   * signed using a valid message hash.\r\n   */\r\n  function setAdditionalKey(\r\n    address keyRing, address newUserSigningKey, bytes calldata signature\r\n  ) external {\r\n    // Ensure that a key ring has been provided.\r\n    require(keyRing != address(0), \u0022No key ring supplied.\u0022);\r\n\r\n    // Add the new key by providing it as an argument to the key ring.\r\n    DharmaKeyRingImplementationV0Interface(keyRing).takeAdminAction(\r\n      DharmaKeyRingImplementationV0Interface.AdminActionType.AddDualKey,\r\n      uint160(newUserSigningKey),\r\n      signature\r\n    );\r\n  }\r\n}","ABI":"[{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022keyRing\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022newUserSigningKey\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022bytes\u0022,\u0022name\u0022:\u0022signature\u0022,\u0022type\u0022:\u0022bytes\u0022}],\u0022name\u0022:\u0022setAdditionalKey\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022}]","ContractName":"DharmaLocksmithV0","CompilerVersion":"v0.5.11\u002Bcommit.c082d0b4","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://a02d930454e8613769ea3a0388f0cff2f58ce27c854c61bc8c3cdd96db34602c"}]