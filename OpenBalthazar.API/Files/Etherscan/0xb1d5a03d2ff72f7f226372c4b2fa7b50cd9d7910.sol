[{"SourceCode":"pragma solidity 0.4.25;\r\n\r\nlibrary SafeMath {\r\n\tfunction mul (uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tif (a == 0) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\tuint256 c = a * b;\r\n\t\tassert(c / a == b);\r\n\t\treturn c;\r\n\t}\r\n\r\n\tfunction div (uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\treturn a / b;\r\n\t}\r\n\r\n\tfunction sub (uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tassert(b \u003C= a);\r\n\t\treturn a - b;\r\n\t}\r\n\r\n\tfunction add (uint256 a, uint256 b) internal pure returns (uint256) {\r\n\t\tuint256 c = a \u002B b;\r\n\t\tassert(c \u003E= a);\r\n\t\treturn c;\r\n\t}\r\n}\r\n\r\ncontract ERCBasic {\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n\tfunction totalSupply () public view returns (uint256);\r\n\tfunction balanceOf (address who) public view returns (uint256);\r\n\tfunction transfer (address to, uint256 value) public returns (bool);\r\n}\r\n\r\ncontract ERC is ERCBasic {\r\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n\tfunction transferFrom (address from, address to, uint256 value) public returns (bool);\r\n\tfunction allowance (address owner, address spender) public view returns (uint256);\r\n\tfunction approve (address spender, uint256 value) public returns (bool);\r\n}\r\n\r\ncontract Ownable {\r\n\tevent OwnershipTransferred(address indexed oldone, address indexed newone);\r\n\tevent FoundationOwnershipTransferred(address indexed oldFoundationOwner, address indexed newFoundationOwner);\r\n\r\n\taddress internal owner;\r\n\taddress internal foundationOwner;\r\n\r\n\tconstructor () public {\r\n\t\towner = msg.sender;\r\n\t\tfoundationOwner = owner;\r\n\t}\r\n\r\n\tmodifier onlyOwner () {\r\n\t\trequire(msg.sender == owner);\r\n\t\t_;\r\n\t}\r\n\r\n\tmodifier hasMintability () {\r\n\t\trequire(msg.sender == owner || msg.sender == foundationOwner);\r\n\t\t_;\r\n\t}\r\n\r\n\tfunction transferOwnership (address newOwner) public returns (bool);\r\n\t\r\n\tfunction setFountainFoundationOwner (address foundation) public returns (bool);\r\n}\r\n\r\ncontract Pausable is Ownable {\r\n\tevent ContractPause();\r\n\tevent ContractResume();\r\n\tevent ContractPauseSchedule(uint256 from, uint256 to);\r\n\r\n\tuint256 internal pauseFrom;\r\n\tuint256 internal pauseTo;\r\n\r\n\tmodifier whenRunning () {\r\n\t\trequire(now \u003C pauseFrom || now \u003E pauseTo);\r\n\t\t_;\r\n\t}\r\n\r\n\tmodifier whenPaused () {\r\n\t\trequire(now \u003E= pauseFrom \u0026\u0026 now \u003C= pauseTo);\r\n\t\t_;\r\n\t}\r\n\r\n\tfunction pause () public onlyOwner {\r\n\t\tpauseFrom = now - 1;\r\n\t\tpauseTo = now \u002B 30000 days;\r\n\t\temit ContractPause();\r\n\t}\r\n\r\n\tfunction pause (uint256 from, uint256 to) public onlyOwner {\r\n\t\trequire(to \u003E from);\r\n\t\tpauseFrom = from;\r\n\t\tpauseTo = to;\r\n\t\temit ContractPauseSchedule(from, to);\r\n\t}\r\n\r\n\tfunction resume () public onlyOwner {\r\n\t\tpauseFrom = now - 2;\r\n\t\tpauseTo = now - 1;\r\n\t\temit ContractResume();\r\n\t}\r\n}\r\n\r\ncontract TokenForge is Ownable {\r\n\tevent ForgeStart();\r\n\tevent ForgeStop();\r\n\r\n\tbool public forge_running = true;\r\n\r\n\tmodifier canForge () {\r\n\t\trequire(forge_running);\r\n\t\t_;\r\n\t}\r\n\r\n\tmodifier cannotForge () {\r\n\t\trequire(!forge_running);\r\n\t\t_;\r\n\t}\r\n\r\n\tfunction startForge () public onlyOwner cannotForge returns (bool) {\r\n\t\tforge_running = true;\r\n\t\temit ForgeStart();\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction stopForge () public onlyOwner canForge returns (bool) {\r\n\t\tforge_running = false;\r\n\t\temit ForgeStop();\r\n\t\treturn true;\r\n\t}\r\n}\r\n\r\n\r\n\r\n\r\n\r\ncontract CappedToken is Ownable {\r\n\tusing SafeMath for uint256;\r\n\r\n\tuint256 public token_cap;\r\n\tuint256 public token_created;\r\n\tuint256 public token_foundation_cap;\r\n\tuint256 public token_foundation_created;\r\n\r\n\r\n\tconstructor (uint256 _cap, uint256 _foundationCap) public {\r\n\t\ttoken_cap = _cap;\r\n\t\ttoken_foundation_cap = _foundationCap;\r\n\t}\r\n\r\n\tfunction changeCap (uint256 _cap) public onlyOwner returns (bool) {\r\n\t\tif (_cap \u003C token_created \u0026\u0026 _cap \u003E 0) return false;\r\n\t\ttoken_cap = _cap;\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction canMint (uint256 amount) public view returns (bool) {\r\n\t\treturn (token_cap == 0) || (token_created.add(amount) \u003C= token_cap);\r\n\t}\r\n\t\r\n\tfunction canMintFoundation(uint256 amount) internal view returns(bool) {\r\n\t\treturn(token_foundation_created.add(amount) \u003C= token_foundation_cap);\r\n\t}\r\n}\r\n\r\ncontract BasicToken is ERCBasic, Pausable {\r\n\tusing SafeMath for uint256;\r\n\r\n\tmapping(address =\u003E uint256) public wallets;\r\n\r\n\tmodifier canTransfer (address _from, address _to, uint256 amount) {\r\n\t\trequire((_from != address(0)) \u0026\u0026 (_to != address(0)));\r\n\t\trequire(_from != _to);\r\n\t\trequire(amount \u003E 0);\r\n\t\t_;\r\n\t}\r\n\r\n\tfunction balanceOf (address user) public view returns (uint256) {\r\n\t\treturn wallets[user];\r\n\t}\r\n}\r\n\r\ncontract DelegatableToken is ERC, BasicToken {\r\n\tusing SafeMath for uint256;\r\n\r\n\tmapping(address =\u003E mapping(address =\u003E uint256)) public warrants;\r\n\r\n\tfunction allowance (address owner, address delegator) public view returns (uint256) {\r\n\t\treturn warrants[owner][delegator];\r\n\t}\r\n\r\n\tfunction approve (address delegator, uint256 value) public whenRunning returns (bool) {\r\n\t\tif (delegator == msg.sender) return true;\r\n\t\twarrants[msg.sender][delegator] = value;\r\n\t\temit Approval(msg.sender, delegator, value);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction increaseApproval (address delegator, uint256 delta) public whenRunning returns (bool) {\r\n\t\tif (delegator == msg.sender) return true;\r\n\t\tuint256 value = warrants[msg.sender][delegator].add(delta);\r\n\t\twarrants[msg.sender][delegator] = value;\r\n\t\temit Approval(msg.sender, delegator, value);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction decreaseApproval (address delegator, uint256 delta) public whenRunning returns (bool) {\r\n\t\tif (delegator == msg.sender) return true;\r\n\t\tuint256 value = warrants[msg.sender][delegator];\r\n\t\tif (value \u003C delta) {\r\n\t\t\tvalue = 0;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tvalue = value.sub(delta);\r\n\t\t}\r\n\t\twarrants[msg.sender][delegator] = value;\r\n\t\temit Approval(msg.sender, delegator, value);\r\n\t\treturn true;\r\n\t}\r\n}\r\n\r\ncontract LockableProtocol is BasicToken {\r\n\tfunction invest (address investor, uint256 amount) public returns (bool);\r\n\tfunction getInvestedToken (address investor) public view returns (uint256);\r\n\tfunction getLockedToken (address investor) public view returns (uint256);\r\n\tfunction availableWallet (address user) public view returns (uint256) {\r\n\t\treturn wallets[user].sub(getLockedToken(user));\r\n\t}\r\n}\r\n\r\ncontract MintAndBurnToken is TokenForge, CappedToken, LockableProtocol {\r\n\tusing SafeMath for uint256;\r\n\t\r\n\tevent Mint(address indexed user, uint256 amount);\r\n\tevent Burn(address indexed user, uint256 amount);\r\n\r\n\tconstructor (uint256 _initial, uint256 _cap, uint256 _fountainCap) public CappedToken(_cap, _fountainCap) {\r\n\t\ttoken_created = _initial;\r\n\t\twallets[msg.sender] = _initial;\r\n\r\n\t\temit Mint(msg.sender, _initial);\r\n\t\temit Transfer(address(0), msg.sender, _initial);\r\n\t}\r\n\r\n\tfunction totalSupply () public view returns (uint256) {\r\n\t\treturn token_created;\r\n\t}\r\n\r\n\tfunction totalFountainSupply() public view returns(uint256) {\r\n\t\treturn token_foundation_created;\r\n\t}\r\n\r\n\tfunction mint (address target, uint256 amount) public hasMintability whenRunning canForge returns (bool) {\r\n\t\trequire(target != owner \u0026\u0026 target != foundationOwner);\r\n\t\trequire(canMint(amount));\r\n\r\n\t\tif (msg.sender == foundationOwner) {\r\n\t\t\trequire(canMintFoundation(amount));\r\n\t\t\ttoken_foundation_created = token_foundation_created.add(amount);\r\n\t\t}\r\n\t\t\r\n\t\ttoken_created = token_created.add(amount);\r\n\t\twallets[target] = wallets[target].add(amount);\r\n\r\n\t\temit Mint(target, amount);\r\n\t\temit Transfer(address(0), target, amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction burn (uint256 amount) public whenRunning canForge returns (bool) {\r\n\t\tuint256 balance = availableWallet(msg.sender);\r\n\t\trequire(amount \u003C= balance);\r\n\r\n\t\ttoken_created = token_created.sub(amount);\r\n\t\twallets[msg.sender] = wallets[msg.sender].sub(amount);\r\n\r\n\t\temit Burn(msg.sender, amount);\r\n\t\temit Transfer(msg.sender, address(0), amount);\r\n\r\n\t\treturn true;\r\n\t}\r\n}\r\n\r\ncontract LockableToken is MintAndBurnToken, DelegatableToken {\r\n\tusing SafeMath for uint256;\r\n\r\n\tstruct LockBin {\r\n\t\tuint256 start;\r\n\t\tuint256 finish;\r\n\t\tuint256 duration;\r\n\t\tuint256 amount;\r\n\t}\r\n\r\n\tevent InvestStart();\r\n\tevent InvestStop();\r\n\tevent NewInvest(uint256 release_start, uint256 release_duration);\r\n\r\n\tuint256 public releaseStart;\r\n\tuint256 public releaseDuration;\r\n\tbool public forceStopInvest;\r\n\tmapping(address =\u003E mapping(uint =\u003E LockBin)) public lockbins;\r\n\r\n\tmodifier canInvest () {\r\n\t\trequire(!forceStopInvest);\r\n\t\t_;\r\n\t}\r\n\r\n\tconstructor (uint256 _initial, uint256 _cap, uint256 _fountainCap) public MintAndBurnToken(_initial, _cap, _fountainCap) {\r\n\t\tforceStopInvest = true;\r\n\t}\r\n\r\n\tfunction pauseInvest () public onlyOwner whenRunning returns (bool) {\r\n\t\trequire(!forceStopInvest);\r\n\t\tforceStopInvest = true;\r\n\t\temit InvestStop();\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction resumeInvest () public onlyOwner whenRunning returns (bool) {\r\n\t\trequire(forceStopInvest);\r\n\t\tforceStopInvest = false;\r\n\t\temit InvestStart();\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction setInvest (uint256 release_start, uint256 release_duration) public onlyOwner whenRunning returns (bool) {\r\n\t\treleaseStart = release_start;\r\n\t\treleaseDuration = release_duration;\r\n\t\trequire(releaseStart \u002B releaseDuration \u003E releaseStart);\r\n\t\tforceStopInvest = false;\r\n\r\n\t\temit NewInvest(release_start, release_duration);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction invest (address investor, uint256 amount) public onlyOwner whenRunning canInvest returns (bool) {\r\n\t\trequire(investor != address(0));\r\n\t\trequire(investor != owner);\r\n\t\trequire(investor != foundationOwner);\r\n\t\trequire(amount \u003E 0);\r\n\t\trequire(canMint(amount));\r\n\r\n\t\tmapping(uint =\u003E LockBin) locks = lockbins[investor];\r\n\t\tLockBin storage info = locks[0];\r\n\t\tuint index = info.amount \u002B 1;\r\n\t\tlocks[index] = LockBin({\r\n\t\t\tstart: releaseStart,\r\n\t\t\tfinish: releaseStart \u002B releaseDuration,\r\n\t\t\tduration: releaseDuration / (1 days),\r\n\t\t\tamount: amount\r\n\t\t});\r\n\t\tinfo.amount = index;\r\n\r\n\t\ttoken_created = token_created.add(amount);\r\n\t\twallets[investor] = wallets[investor].add(amount);\r\n\t\temit Mint(investor, amount);\r\n\t\temit Transfer(address(0), investor, amount);\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction batchInvest (address[] investors, uint256 amount) public onlyOwner whenRunning canInvest returns (bool) {\r\n\t\trequire(amount \u003E 0);\r\n\r\n\t\tuint investorsLength = investors.length;\r\n\t\tuint investorsCount = 0;\r\n\t\tuint i;\r\n\t\taddress r;\r\n\t\tfor (i = 0; i \u003C investorsLength; i \u002B\u002B) {\r\n\t\t\tr = investors[i];\r\n\t\t\tif (r == address(0) || r == owner || r == foundationOwner) continue;\r\n\t\t\tinvestorsCount \u002B\u002B;\r\n\t\t}\r\n\t\trequire(investorsCount \u003E 0);\r\n\r\n\t\tuint256 totalAmount = amount.mul(uint256(investorsCount));\r\n\t\trequire(canMint(totalAmount));\r\n\r\n\t\ttoken_created = token_created.add(totalAmount);\r\n\r\n\t\tfor (i = 0; i \u003C investorsLength; i \u002B\u002B) {\r\n\t\t\tr = investors[i];\r\n\t\t\tif (r == address(0) || r == owner || r == foundationOwner) continue;\r\n\r\n\t\t\tmapping(uint =\u003E LockBin) locks = lockbins[r];\r\n\t\t\tLockBin storage info = locks[0];\r\n\t\t\tuint index = info.amount \u002B 1;\r\n\t\t\tlocks[index] = LockBin({\r\n\t\t\t\tstart: releaseStart,\r\n\t\t\t\tfinish: releaseStart \u002B releaseDuration,\r\n\t\t\t\tduration: releaseDuration / (1 days),\r\n\t\t\t\tamount: amount\r\n\t\t\t});\r\n\t\t\tinfo.amount = index;\r\n\r\n\t\t\twallets[r] = wallets[r].add(amount);\r\n\t\t\temit Mint(r, amount);\r\n\t\t\temit Transfer(address(0), r, amount);\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction batchInvests (address[] investors, uint256[] amounts) public onlyOwner whenRunning canInvest returns (bool) {\r\n\t\tuint investorsLength = investors.length;\r\n\t\trequire(investorsLength == amounts.length);\r\n\r\n\t\tuint investorsCount = 0;\r\n\t\tuint256 totalAmount = 0;\r\n\t\tuint i;\r\n\t\taddress r;\r\n\t\tfor (i = 0; i \u003C investorsLength; i \u002B\u002B) {\r\n\t\t\tr = investors[i];\r\n\t\t\tif (r == address(0) || r == owner || r == foundationOwner) continue;\r\n\t\t\tinvestorsCount \u002B\u002B;\r\n\t\t\ttotalAmount = totalAmount.add(amounts[i]);\r\n\t\t}\r\n\t\trequire(totalAmount \u003E 0);\r\n\t\trequire(canMint(totalAmount));\r\n\r\n\t\tuint256 amount;\r\n\t\ttoken_created = token_created.add(totalAmount);\r\n\t\tfor (i = 0; i \u003C investorsLength; i \u002B\u002B) {\r\n\t\t\tr = investors[i];\r\n\t\t\tif (r == address(0) || r == owner || r == foundationOwner) continue;\r\n\t\t\tamount = amounts[i];\r\n\t\t\tif (amount == 0) continue;\r\n\t\t\twallets[r] = wallets[r].add(amount);\r\n\t\t\temit Mint(r, amount);\r\n\t\t\temit Transfer(address(0), r, amount);\r\n\r\n\t\t\tmapping(uint =\u003E LockBin) locks = lockbins[r];\r\n\t\t\tLockBin storage info = locks[0];\r\n\t\t\tuint index = info.amount \u002B 1;\r\n\t\t\tlocks[index] = LockBin({\r\n\t\t\t\tstart: releaseStart,\r\n\t\t\t\tfinish: releaseStart \u002B releaseDuration,\r\n\t\t\t\tduration: releaseDuration / (1 days),\r\n\t\t\t\tamount: amount\r\n\t\t\t});\r\n\t\t\tinfo.amount = index;\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction getInvestedToken (address investor) public view returns (uint256) {\r\n\t\trequire(investor != address(0) \u0026\u0026 investor != owner \u0026\u0026 investor != foundationOwner);\r\n\r\n\t\tmapping(uint =\u003E LockBin) locks = lockbins[investor];\r\n\t\tuint256 balance = 0;\r\n\t\tuint l = locks[0].amount;\r\n\t\tfor (uint i = 1; i \u003C= l; i \u002B\u002B) {\r\n\t\t\tLockBin memory bin = locks[i];\r\n\t\t\tbalance = balance.add(bin.amount);\r\n\t\t}\r\n\t\treturn balance;\r\n\t}\r\n\r\n\tfunction getLockedToken (address investor) public view returns (uint256) {\r\n\t\trequire(investor != address(0) \u0026\u0026 investor != owner \u0026\u0026 investor != foundationOwner);\r\n\r\n\t\tmapping(uint =\u003E LockBin) locks = lockbins[investor];\r\n\t\tuint256 balance = 0;\r\n\t\tuint256 d = 1;\r\n\t\tuint l = locks[0].amount;\r\n\t\tfor (uint i = 1; i \u003C= l; i \u002B\u002B) {\r\n\t\t\tLockBin memory bin = locks[i];\r\n\t\t\tif (now \u003C= bin.start) {\r\n\t\t\t\tbalance = balance.add(bin.amount);\r\n\t\t\t}\r\n\t\t\telse if (now \u003C bin.finish) {\r\n\t\t\t\td = (now - bin.start) / (1 days);\r\n\t\t\t\tbalance = balance.add(bin.amount - bin.amount * d / bin.duration);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn balance;\r\n\t}\r\n\r\n\tfunction canPay (address user, uint256 amount) internal view returns (bool) {\r\n\t\tuint256 balance = availableWallet(user);\r\n\t\treturn amount \u003C= balance;\r\n\t}\r\n\r\n\tfunction transfer (address target, uint256 value) public whenRunning canTransfer(msg.sender, target, value) returns (bool) {\r\n\t\trequire(target != owner);\r\n\t\trequire(canPay(msg.sender, value));\r\n\r\n\t\twallets[msg.sender] = wallets[msg.sender].sub(value);\r\n\t\twallets[target] = wallets[target].add(value);\r\n\t\temit Transfer(msg.sender, target, value);\r\n\t\treturn true;\r\n\t}\r\n\r\n\r\n\tfunction batchTransfer (address[] receivers, uint256 amount) public whenRunning returns (bool) {\r\n\t\trequire(amount \u003E 0);\r\n\r\n\t\tuint receiveLength = receivers.length;\r\n\t\tuint receiverCount = 0;\r\n\t\tuint i;\r\n\t\taddress r;\r\n\t\tfor (i = 0; i \u003C receiveLength; i \u002B\u002B) {\r\n\t\t\tr = receivers[i];\r\n\t\t\tif (r == address(0) || r == owner) continue;\r\n\t\t\treceiverCount \u002B\u002B;\r\n\t\t}\r\n\t\trequire(receiverCount \u003E 0);\r\n\r\n\t\tuint256 totalAmount = amount.mul(uint256(receiverCount));\r\n\t\trequire(canPay(msg.sender, totalAmount));\r\n\r\n\t\twallets[msg.sender] = wallets[msg.sender].sub(totalAmount);\r\n\t\tfor (i = 0; i \u003C receiveLength; i\u002B\u002B) {\r\n\t\t\tr = receivers[i];\r\n\t\t\tif (r == address(0) || r == owner) continue;\r\n\t\t\twallets[r] = wallets[r].add(amount);\r\n\t\t\temit Transfer(msg.sender, r, amount);\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction batchTransfers (address[] receivers, uint256[] amounts) public whenRunning returns (bool) {\r\n\t\tuint receiveLength = receivers.length;\r\n\t\trequire(receiveLength == amounts.length);\r\n\r\n\t\tuint receiverCount = 0;\r\n\t\tuint256 totalAmount = 0;\r\n\t\tuint i;\r\n\t\taddress r;\r\n\t\tfor (i = 0; i \u003C receiveLength; i \u002B\u002B) {\r\n\t\t\tr = receivers[i];\r\n\t\t\tif (r == address(0) || r == owner) continue;\r\n\t\t\treceiverCount \u002B\u002B;\r\n\t\t\ttotalAmount = totalAmount.add(amounts[i]);\r\n\t\t}\r\n\t\trequire(totalAmount \u003E 0);\r\n\t\trequire(canPay(msg.sender, totalAmount));\r\n\r\n\t\twallets[msg.sender] = wallets[msg.sender].sub(totalAmount);\r\n\t\tuint256 amount;\r\n\t\tfor (i = 0; i \u003C receiveLength; i\u002B\u002B) {\r\n\t\t\tr = receivers[i];\r\n\t\t\tif (r == address(0) || r == owner) continue;\r\n\t\t\tamount = amounts[i];\r\n\t\t\tif (amount == 0) continue;\r\n\t\t\twallets[r] = wallets[r].add(amount);\r\n\t\t\temit Transfer(msg.sender, r, amount);\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction transferFrom (address from, address to, uint256 value) public whenRunning canTransfer(from, to, value) returns (bool) {\r\n\t\trequire(from != owner);\r\n\t\trequire(to != owner);\r\n\t\trequire(canPay(from, value));\r\n\r\n\t\tuint256 warrant;\r\n\t\tif (msg.sender != from) {\r\n\t\t\twarrant = warrants[from][msg.sender];\r\n\t\t\trequire(value \u003C= warrant);\r\n\t\t\twarrants[from][msg.sender] = warrant.sub(value);\r\n\t\t}\r\n\r\n\t\twallets[from] = wallets[from].sub(value);\r\n\t\twallets[to] = wallets[to].add(value);\r\n\t\temit Transfer(from, to, value);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction batchTransferFrom (address from, address[] receivers, uint256 amount) public whenRunning returns (bool) {\r\n\t\trequire(from != address(0) \u0026\u0026 from != owner);\r\n\t\trequire(amount \u003E 0);\r\n\r\n\t\tuint receiveLength = receivers.length;\r\n\t\tuint receiverCount = 0;\r\n\t\tuint i;\r\n\t\taddress r;\r\n\t\tfor (i = 0; i \u003C receiveLength; i \u002B\u002B) {\r\n\t\t\tr = receivers[i];\r\n\t\t\tif (r == address(0) || r == owner) continue;\r\n\t\t\treceiverCount \u002B\u002B;\r\n\t\t}\r\n\t\trequire(receiverCount \u003E 0);\r\n\r\n\t\tuint256 totalAmount = amount.mul(uint256(receiverCount));\r\n\t\trequire(canPay(from, totalAmount));\r\n\r\n\t\tuint256 warrant;\r\n\t\tif (msg.sender != from) {\r\n\t\t\twarrant = warrants[from][msg.sender];\r\n\t\t\trequire(totalAmount \u003C= warrant);\r\n\t\t\twarrants[from][msg.sender] = warrant.sub(totalAmount);\r\n\t\t}\r\n\r\n\t\twallets[from] = wallets[from].sub(totalAmount);\r\n\t\tfor (i = 0; i \u003C receiveLength; i\u002B\u002B) {\r\n\t\t\tr = receivers[i];\r\n\t\t\tif (r == address(0) || r == owner) continue;\r\n\t\t\twallets[r] = wallets[r].add(amount);\r\n\t\t\temit Transfer(from, r, amount);\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction batchTransferFroms (address from, address[] receivers, uint256[] amounts) public whenRunning returns (bool) {\r\n\t\trequire(from != address(0) \u0026\u0026 from != owner);\r\n\r\n\t\tuint receiveLength = receivers.length;\r\n\t\trequire(receiveLength == amounts.length);\r\n\r\n\t\tuint receiverCount = 0;\r\n\t\tuint256 totalAmount = 0;\r\n\t\tuint i;\r\n\t\taddress r;\r\n\t\tfor (i = 0; i \u003C receiveLength; i \u002B\u002B) {\r\n\t\t\tr = receivers[i];\r\n\t\t\tif (r == address(0) || r == owner) continue;\r\n\t\t\treceiverCount \u002B\u002B;\r\n\t\t\ttotalAmount = totalAmount.add(amounts[i]);\r\n\t\t}\r\n\t\trequire(totalAmount \u003E 0);\r\n\t\trequire(canPay(from, totalAmount));\r\n\r\n\t\tuint256 warrant;\r\n\t\tif (msg.sender != from) {\r\n\t\t\twarrant = warrants[from][msg.sender];\r\n\t\t\trequire(totalAmount \u003C= warrant);\r\n\t\t\twarrants[from][msg.sender] = warrant.sub(totalAmount);\r\n\t\t}\r\n\r\n\t\twallets[from] = wallets[from].sub(totalAmount);\r\n\t\tuint256 amount;\r\n\t\tfor (i = 0; i \u003C receiveLength; i\u002B\u002B) {\r\n\t\t\tr = receivers[i];\r\n\t\t\tif (r == address(0) || r == owner) continue;\r\n\t\t\tamount = amounts[i];\r\n\t\t\tif (amount == 0) continue;\r\n\t\t\twallets[r] = wallets[r].add(amount);\r\n\t\t\temit Transfer(from, r, amount);\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n}\r\n\r\ncontract PunchableToken is LockableToken {\r\n    using SafeMath for uint256;\r\n\t\r\n\tfunction punch (address addr, uint256 amount) public onlyOwner whenPaused returns (bool) {\r\n\t    require(addr != address(0) \u0026\u0026 addr != owner);\r\n\t\trequire(amount \u003E 0);\r\n\t    uint256 accountAmount = availableWallet(addr);\r\n\t    uint256 burnAmount = amount;\r\n\t    if (amount \u003E accountAmount) {\r\n\t        burnAmount = accountAmount;\r\n\t    }\r\n\t    token_created = token_created.sub(burnAmount);\r\n\t\twallets[addr] = wallets[addr].sub(burnAmount);\r\n\t\temit Burn(addr, burnAmount);\r\n\t\temit Transfer(addr, address(0), burnAmount);\r\n\t    \r\n\t    return true;\r\n\t}\r\n\t\r\n\tfunction batchPunchKO (address[] addrs) public onlyOwner whenPaused returns (bool) {\r\n\t    uint len = addrs.length;\r\n\t    require (len \u003E 0);\r\n\t    address addr;\r\n\t    \r\n\t    for (uint i = 0; i \u003C len; i\u002B\u002B) {\r\n\t        addr = addrs[i];\r\n\t        if (addr == address(0) || addr == owner) continue;\r\n\t        uint256 amount = availableWallet(addr);\r\n\t        token_created = token_created.sub(amount);\r\n\t\t    wallets[addr] = wallets[addr].sub(amount);\r\n\t\t    emit Burn(addr, amount);\r\n\t\t    emit Transfer(addr, address(0), amount);\r\n\t    }\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\t\r\n\tfunction batchPunchs (address[] addrs, uint256[] amounts) public onlyOwner whenPaused returns (bool) {\r\n\t    uint len = addrs.length;\r\n\t    require (len \u003E 0);\r\n\t    require (addrs.length == amounts.length);\r\n\r\n\t    address addr;\r\n\t    uint256 amount;\r\n\t    uint256 availableAmount;\r\n\t    \r\n\t    for (uint i = 0; i \u003C len; i\u002B\u002B) {\r\n\t        addr = addrs[i];\r\n\t        if (addr == address(0) || addr == owner) continue;\r\n\t        amount = amounts[i];\r\n\t        availableAmount = availableWallet(addr);\r\n\t        if (amount \u003E availableAmount) {\r\n\t            amount = availableAmount;\r\n\t        }\r\n\t        token_created = token_created.sub(amount);\r\n\t\t    wallets[addr] = wallets[addr].sub(amount);\r\n\t\t    emit Burn(addr, amount);\r\n\t\t    emit Transfer(addr, address(0), amount);\r\n\t    }\r\n\t\treturn true;\r\n\t}\r\n\t\r\n    \r\n}\r\n\r\ncontract FountainToken is PunchableToken {\r\n\tstring  public constant name     = \u0022Fountain\u0022;\r\n\tstring  public constant symbol   = \u0022FTN\u0022;\r\n\tuint8   public constant decimals = 18;\r\n\r\n\tuint256 private constant TOKEN_CAP     = 10000000000 * 10 ** uint256(decimals);\r\n\tuint256 private constant TOKEN_FOUNDATION_CAP = 300000000   * 10 ** uint256(decimals);\r\n\tuint256 private constant TOKEN_INITIAL = 0   * 10 ** uint256(decimals);\r\n\r\n\tconstructor () public LockableToken(TOKEN_INITIAL, TOKEN_CAP, TOKEN_FOUNDATION_CAP) {\r\n\t}\r\n\r\n\tfunction suicide () public onlyOwner {\r\n\t\tselfdestruct(owner);\r\n\t}\r\n\r\n\tfunction transferOwnership (address newOwner) public onlyOwner returns (bool) {\r\n\t\trequire(newOwner != address(0));\r\n\t\trequire(newOwner != owner);\r\n\t\trequire(newOwner != foundationOwner);\r\n\t\trequire(wallets[owner] == 0);\r\n\t\trequire(wallets[newOwner] == 0);\r\n\r\n\t\taddress oldOwner = owner;\r\n\t\towner = newOwner;\r\n\t\temit OwnershipTransferred(oldOwner, newOwner);\r\n\t\t\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\tfunction setFountainFoundationOwner (address newFoundationOwner) public onlyOwner returns (bool) {\r\n\t\trequire(newFoundationOwner != address(0));\r\n\t\trequire(newFoundationOwner != foundationOwner);\r\n\t\trequire(newFoundationOwner != owner);\r\n\t\trequire(wallets[newFoundationOwner] == 0);\r\n\r\n\t\taddress oldFoundation = foundationOwner;\r\n\t\tfoundationOwner = newFoundationOwner;\r\n\r\n\t\temit FoundationOwnershipTransferred(oldFoundation, foundationOwner);\r\n\r\n\t\tuint256 all = wallets[oldFoundation];\r\n\t\twallets[oldFoundation] -= all;\r\n\t\twallets[newFoundationOwner] = all;\r\n\t\temit Transfer(oldFoundation, newFoundationOwner, all);\r\n\r\n\t\treturn true;\r\n\t}\r\n\t\r\n}\r\n\r\n\r\n\r\ncontract FountainTokenUpgrade is FountainToken {\r\n\tevent UpgradeStart();\r\n\tevent UpgradeStop();\r\n\tevent SetRefund(address, uint);\r\n\tevent Refund(address, uint);\r\n\tevent SetFoundation(uint);\r\n\tevent FinishUpgrade();\r\n\t\r\n\tbool public upgrade_running;\r\n\r\n\tbool public upgrade_finish;\r\n\t\r\n\tFountainToken ftn;\r\n\t\r\n\taddress public oldContract;\r\n\t\r\n\tmapping(address=\u003Ebool) public upgraded;\r\n\tmapping(address=\u003Ebool) public skiplist;\r\n\r\n\tmapping(address=\u003Euint) public refundlist;\r\n\r\n\r\n\tconstructor(address old){\r\n\t\toldContract = old;\r\n\t\tftn = FountainToken(old);\r\n\t}\r\n\r\n\tmodifier canUpgrade(){\r\n\t\trequire(!upgrade_finish);\r\n\t\t_;\r\n\t}\r\n\r\n\tmodifier whenUpgrading() {\r\n\t\trequire(upgrade_running);\r\n\t\t_;\r\n\t}\r\n\r\n\tmodifier whenNotUpgrading() {\r\n\t\trequire(!upgrade_running);\r\n\t\t_;\r\n\t}\r\n\r\n\tfunction finishUpgrade() public whenNotUpgrading canUpgrade onlyOwner{\r\n\t\tupgrade_finish = true;\r\n\t\temit FinishUpgrade();\r\n\t}\r\n\r\n\tfunction setFoundation(uint amount) public whenUpgrading whenPaused canUpgrade onlyOwner {\r\n\t\ttoken_foundation_created = amount;\r\n\t\temit SetFoundation(amount);\r\n\t}\r\n\r\n\tfunction setRefund(address addr, uint amount) public whenUpgrading canUpgrade onlyOwner {\r\n\t\trequire(addr != address(0));\r\n\t\trequire(addr != foundationOwner);\r\n\t\trequire(addr != owner);\r\n\t\trefundlist[addr] = amount;\r\n\t\temit SetRefund(addr, amount);\r\n\t}\r\n\r\n\tfunction batchSetRefund(address[] addrs, uint[] amounts) public whenUpgrading canUpgrade onlyOwner {\r\n\t\tuint l1 = addrs.length;\r\n\t\tuint l2 = amounts.length;\r\n\t\taddress addr;\r\n\t\tuint amount;\r\n\t\trequire(l1 \u003E 0 \u0026\u0026 l1 == l2);\r\n\t\tfor (uint i = 0; i \u003C l1; i\u002B\u002B){\r\n\t\t\taddr = addrs[i];\r\n\t\t\tamount = amounts[i];\r\n\t\t\tif (addr == address(0) || addr == foundationOwner || addr == owner) continue;\r\n\t\t\trefundlist[addr] = amount;\r\n\t\t\temit SetRefund(addr, amount);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tfunction runRefund(address addr) public whenUpgrading canUpgrade onlyOwner {\r\n\t\tuint amount = refundlist[addr];\r\n\t\twallets[addr] = wallets[addr].add(amount); \r\n\t\ttoken_created = token_created.add(amount);\r\n\t\trefundlist[addr] = 0;\r\n\t\temit Refund(addr, amount);\r\n\t\temit Mint(addr, amount);\r\n\t\temit Transfer(address(0), addr, amount);\r\n\t}\r\n\r\n\tfunction batchRunRefund(address[] addrs) public whenUpgrading canUpgrade onlyOwner {\r\n\t\tuint l = addrs.length;\r\n\t\taddress addr;\r\n\t\tuint amount;\r\n\t\trequire(l \u003E 0);\r\n\t\tfor (uint i = 0; i \u003C l; i\u002B\u002B){\r\n\t\t\taddr = addrs[i];\r\n\t\t\tamount = refundlist[addr];\r\n\t\t\twallets[addr] = wallets[addr].add(amount); \r\n\t\t\ttoken_created = token_created.add(amount);\r\n\t\t\trefundlist[addr] = 0;\r\n\t\t\temit Refund(addr, amount);\r\n\t\t\temit Mint(addr, amount);\r\n\t\t\temit Transfer(address(0), addr, amount);\r\n\t\t}\r\n\t}\r\n\r\n\tfunction startUpgrade() public whenNotUpgrading canUpgrade onlyOwner {\r\n\t\tupgrade_running = true;\r\n\t\temit UpgradeStart();\r\n\t}\r\n\r\n\tfunction stopUpgrade() public whenUpgrading canUpgrade onlyOwner {\r\n\t\tupgrade_running = false;\r\n\t\temit UpgradeStop();\r\n\t}\r\n\r\n\tfunction setSkiplist(address[] addrs) public whenUpgrading whenPaused canUpgrade onlyOwner {\r\n\t\tuint len = addrs.length;\r\n\t\tif (len\u003E0){\r\n\t\t\tfor (uint i = 0; i \u003C len; i\u002B\u002B){\r\n\t\t\t\tskiplist[addrs[i]] = true;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tfunction upgrade(address addr) whenUpgrading whenPaused canUpgrade onlyOwner{\r\n\t\tuint amount = ftn.balanceOf(addr);\r\n\t\trequire(!upgraded[addr] \u0026\u0026 amount\u003E0 \u0026\u0026 !skiplist[addr]);\r\n\r\n\t\tupgraded[addr] = true;\r\n\t\twallets[addr] = amount;\r\n\r\n\t\t(uint a, uint b, uint c, uint d) = ftn.lockbins(addr,0);\r\n\t\tuint len = d;\r\n\t\tif (len \u003E 0){\r\n\t\t\tlockbins[addr][0].amount = len; \r\n\t\t\tfor (uint i=1; i \u003C= len; i\u002B\u002B){\r\n\t\t\t\t(a, b, c, d) = ftn.lockbins(addr,i);\r\n\t\t\t\tlockbins[addr][i] = LockBin({\r\n\t\t\t\t\tstart: a,\r\n\t\t\t\t\tfinish: b,\r\n\t\t\t\t\tduration: c,\r\n\t\t\t\t\tamount: d\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\ttoken_created = token_created.add(amount);\r\n\t\temit Mint(addr, amount);\r\n\t\temit Transfer(address(0), addr, amount);\r\n\t}\r\n\t\r\n\t\r\n\tfunction batchUpgrade(address[] addrs) whenUpgrading whenPaused canUpgrade onlyOwner{\r\n\t\tuint l = addrs.length;\r\n\t\trequire(l \u003E 0);\r\n\t\tuint a;\r\n\t\tuint b; \r\n\t\tuint c; \r\n\t\tuint d;\r\n\t\tfor (uint i = 0; i \u003C l; i\u002B\u002B){\r\n\r\n\t\t\taddress addr = addrs[i];\r\n\t\t\tuint amount = ftn.balanceOf(addr);\r\n\t\t\tif (upgraded[addr] || amount == 0 || skiplist[addr]){\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\tupgraded[addr] = true;\r\n\t\t\twallets[addr] = amount;\r\n\t\r\n\t\t\t(a, b, c, d) = ftn.lockbins(addr,0);\r\n\t\t\tuint len = d;\r\n\t\t\tif (len \u003E 0){\r\n\t\t\t\tlockbins[addr][0].amount = len; \r\n\t\t\t\tfor (uint j=1; j \u003C= len; j\u002B\u002B){\r\n\t\t\t\t\t(a, b, c, d) = ftn.lockbins(addr, j);\r\n\t\t\t\t\tlockbins[addr][j] = LockBin({\r\n\t\t\t\t\t\tstart: a,\r\n\t\t\t\t\t\tfinish: b,\r\n\t\t\t\t\t\tduration: c,\r\n\t\t\t\t\t\tamount: d\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\ttoken_created = token_created.add(amount);\r\n\t\t\temit Mint(addr, amount);\r\n\t\t\temit Transfer(address(0), addr, amount);\r\n\r\n\t\t} \r\n\t\t\r\n\t}\r\n\r\n}","ABI":"[{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022resume\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022name\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022addr\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022upgrade\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022delegator\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022approve\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022totalSupply\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022stopUpgrade\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022startUpgrade\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022addrs\u0022,\u0022type\u0022:\u0022address[]\u0022},{\u0022name\u0022:\u0022amounts\u0022,\u0022type\u0022:\u0022uint256[]\u0022}],\u0022name\u0022:\u0022batchPunchs\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022from\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022transferFrom\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022addr\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022punch\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022from\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022to\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022pause\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022oldContract\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022decimals\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint8\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022finishUpgrade\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022addrs\u0022,\u0022type\u0022:\u0022address[]\u0022}],\u0022name\u0022:\u0022batchPunchKO\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022upgrade_running\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022receivers\u0022,\u0022type\u0022:\u0022address[]\u0022},{\u0022name\u0022:\u0022amounts\u0022,\u0022type\u0022:\u0022uint256[]\u0022}],\u0022name\u0022:\u0022batchTransfers\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022target\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022mint\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022burn\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022release_start\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022release_duration\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022setInvest\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022addrs\u0022,\u0022type\u0022:\u0022address[]\u0022},{\u0022name\u0022:\u0022amounts\u0022,\u0022type\u0022:\u0022uint256[]\u0022}],\u0022name\u0022:\u0022batchSetRefund\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022startForge\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022forge_running\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022resumeInvest\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022lockbins\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022start\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022finish\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022duration\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022investor\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022getLockedToken\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022setFoundation\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022from\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022receivers\u0022,\u0022type\u0022:\u0022address[]\u0022},{\u0022name\u0022:\u0022amounts\u0022,\u0022type\u0022:\u0022uint256[]\u0022}],\u0022name\u0022:\u0022batchTransferFroms\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022canMint\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022delegator\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022delta\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022decreaseApproval\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022investors\u0022,\u0022type\u0022:\u0022address[]\u0022},{\u0022name\u0022:\u0022amounts\u0022,\u0022type\u0022:\u0022uint256[]\u0022}],\u0022name\u0022:\u0022batchInvests\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022user\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022balanceOf\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022newFoundationOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022setFountainFoundationOwner\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022releaseStart\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022from\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022receivers\u0022,\u0022type\u0022:\u0022address[]\u0022},{\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022batchTransferFrom\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_cap\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022changeCap\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022receivers\u0022,\u0022type\u0022:\u0022address[]\u0022},{\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022batchTransfer\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022pause\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022wallets\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022totalFountainSupply\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022symbol\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022warrants\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022forceStopInvest\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022investor\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022getInvestedToken\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022pauseInvest\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022target\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022transfer\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022addr\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022runRefund\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022addrs\u0022,\u0022type\u0022:\u0022address[]\u0022}],\u0022name\u0022:\u0022batchRunRefund\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022skiplist\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022stopForge\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022investor\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022invest\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022investors\u0022,\u0022type\u0022:\u0022address[]\u0022},{\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022batchInvest\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022token_foundation_cap\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022suicide\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022upgrade_finish\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022refundlist\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022token_foundation_created\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022user\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022availableWallet\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022delegator\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022delta\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022increaseApproval\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022addrs\u0022,\u0022type\u0022:\u0022address[]\u0022}],\u0022name\u0022:\u0022batchUpgrade\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022owner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022delegator\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022allowance\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022token_created\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022addr\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022setRefund\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022addrs\u0022,\u0022type\u0022:\u0022address[]\u0022}],\u0022name\u0022:\u0022setSkiplist\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022token_cap\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022transferOwnership\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022upgraded\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022releaseDuration\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[{\u0022name\u0022:\u0022old\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022constructor\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022UpgradeStart\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022UpgradeStop\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022SetRefund\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022Refund\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022SetFoundation\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022FinishUpgrade\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022InvestStart\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022InvestStop\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022release_start\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022release_duration\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022NewInvest\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022user\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022Mint\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022user\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022Burn\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022ContractPause\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022ContractResume\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022from\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022to\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022ContractPauseSchedule\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022ForgeStart\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022ForgeStop\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022oldone\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022newone\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022OwnershipTransferred\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022oldFoundationOwner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022newFoundationOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022FoundationOwnershipTransferred\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022owner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022spender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022Approval\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022from\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022Transfer\u0022,\u0022type\u0022:\u0022event\u0022}]","ContractName":"FountainTokenUpgrade","CompilerVersion":"v0.4.25\u002Bcommit.59dbf8f1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000056325d180ec3878a9028afc7b0edcee7486cc9df","Library":"","SwarmSource":"bzzr://0c93bf3a33958c45ddd26de8ff997a2406db8cbba9192558666654f4254214b7"}]