[{"SourceCode":"pragma solidity 0.5.11;\r\n\r\ncontract MillionMoney {\r\n    address public ownerWallet;\r\n\r\n    MillionMoney public oldSC = MillionMoney(0x4Dcf60F0cb42c22Df36994CCBebd0b281C57003A);\r\n    uint oldSCUserId = 1;\r\n\r\n    struct UserStruct {\r\n        bool isExist;\r\n        uint id;\r\n        uint referrerID;\r\n        address[] referral;\r\n        mapping(uint =\u003E uint) levelExpired;\r\n    }\r\n\r\n    uint REFERRER_1_LEVEL_LIMIT = 2;\r\n    uint PERIOD_LENGTH = 100 days;\r\n\r\n    mapping(uint =\u003E uint) public LEVEL_PRICE;\r\n\r\n    mapping (address =\u003E UserStruct) public users;\r\n    mapping (uint =\u003E address) public userList;\r\n    uint public currUserID = 0;\r\n\r\n    event regLevelEvent(address indexed _user, address indexed _referrer, uint _time);\r\n    event buyLevelEvent(address indexed _user, uint _level, uint _time);\r\n    event prolongateLevelEvent(address indexed _user, uint _level, uint _time);\r\n    event getMoneyForLevelEvent(address indexed _user, address indexed _referral, uint _level, uint _time);\r\n    event lostMoneyForLevelEvent(address indexed _user, address indexed _referral, uint _level, uint _time);\r\n\r\n    constructor() public {\r\n        ownerWallet = 0xb19dA4fd9f9A73A5A564C66D229B1E7219e8bdbe;//msg.sender;\r\n\r\n        LEVEL_PRICE[1] = 0.03 ether;\r\n        LEVEL_PRICE[2] = 0.05 ether;\r\n        LEVEL_PRICE[3] = 0.1 ether;\r\n        LEVEL_PRICE[4] = 0.4 ether;\r\n        LEVEL_PRICE[5] = 1 ether;\r\n        LEVEL_PRICE[6] = 2.5 ether;\r\n        LEVEL_PRICE[7] = 5 ether;\r\n        LEVEL_PRICE[8] = 10 ether;\r\n        LEVEL_PRICE[9] = 20 ether;\r\n        LEVEL_PRICE[10] = 40 ether;\r\n\r\n        UserStruct memory userStruct;\r\n        currUserID\u002B\u002B;\r\n\r\n        userStruct = UserStruct({\r\n            isExist: true,\r\n            id: currUserID,\r\n            referrerID: 0,\r\n            referral: new address[](0)\r\n        });\r\n        users[ownerWallet] = userStruct;\r\n        userList[currUserID] = ownerWallet;\r\n\r\n        users[ownerWallet].levelExpired[1] = 55555555555;\r\n        users[ownerWallet].levelExpired[2] = 55555555555;\r\n        users[ownerWallet].levelExpired[3] = 55555555555;\r\n        users[ownerWallet].levelExpired[4] = 55555555555;\r\n        users[ownerWallet].levelExpired[5] = 55555555555;\r\n        users[ownerWallet].levelExpired[6] = 55555555555;\r\n        users[ownerWallet].levelExpired[7] = 55555555555;\r\n        users[ownerWallet].levelExpired[8] = 55555555555;\r\n        users[ownerWallet].levelExpired[9] = 55555555555;\r\n        users[ownerWallet].levelExpired[10] = 55555555555;\r\n    }\r\n\r\n    function () external payable {\r\n        uint level;\r\n\r\n        if(msg.value == LEVEL_PRICE[1]) level = 1;\r\n        else if(msg.value == LEVEL_PRICE[2]) level = 2;\r\n        else if(msg.value == LEVEL_PRICE[3]) level = 3;\r\n        else if(msg.value == LEVEL_PRICE[4]) level = 4;\r\n        else if(msg.value == LEVEL_PRICE[5]) level = 5;\r\n        else if(msg.value == LEVEL_PRICE[6]) level = 6;\r\n        else if(msg.value == LEVEL_PRICE[7]) level = 7;\r\n        else if(msg.value == LEVEL_PRICE[8]) level = 8;\r\n        else if(msg.value == LEVEL_PRICE[9]) level = 9;\r\n        else if(msg.value == LEVEL_PRICE[10]) level = 10;\r\n        else revert(\u0027Incorrect Value send\u0027);\r\n\r\n        if(users[msg.sender].isExist) buyLevel(level);\r\n        else if(level == 1) {\r\n            uint refId = 0;\r\n            address referrer = bytesToAddress(msg.data);\r\n\r\n            if(users[referrer].isExist) refId = users[referrer].id;\r\n            else revert(\u0027Incorrect referrer\u0027);\r\n\r\n            regUser(refId);\r\n        }\r\n        else revert(\u0027Please buy first level for 0.03 ETH\u0027);\r\n    }\r\n\r\n    function regUser(uint _referrerID) public payable {\r\n        require(!users[msg.sender].isExist, \u0027User exist\u0027);\r\n        require(_referrerID \u003E 0 \u0026\u0026 _referrerID \u003C= currUserID, \u0027Incorrect referrer Id\u0027);\r\n        require(msg.value == LEVEL_PRICE[1], \u0027Incorrect Value\u0027);\r\n\r\n        if(users[userList[_referrerID]].referral.length \u003E= REFERRER_1_LEVEL_LIMIT) _referrerID = users[findFreeReferrer(userList[_referrerID])].id;\r\n\r\n        UserStruct memory userStruct;\r\n        currUserID\u002B\u002B;\r\n\r\n        userStruct = UserStruct({\r\n            isExist: true,\r\n            id: currUserID,\r\n            referrerID: _referrerID,\r\n            referral: new address[](0)\r\n        });\r\n\r\n        users[msg.sender] = userStruct;\r\n        userList[currUserID] = msg.sender;\r\n\r\n        users[msg.sender].levelExpired[1] = now \u002B PERIOD_LENGTH;\r\n\r\n        users[userList[_referrerID]].referral.push(msg.sender);\r\n\r\n        payForLevel(1, msg.sender);\r\n\r\n        emit regLevelEvent(msg.sender, userList[_referrerID], now);\r\n    }\r\n\r\n    function buyLevel(uint _level) public payable {\r\n        require(users[msg.sender].isExist, \u0027User not exist\u0027); \r\n        require(_level \u003E 0 \u0026\u0026 _level \u003C= 10, \u0027Incorrect level\u0027);\r\n\r\n        if(_level == 1) {\r\n            require(msg.value == LEVEL_PRICE[1], \u0027Incorrect Value\u0027);\r\n            users[msg.sender].levelExpired[1] \u002B= PERIOD_LENGTH;\r\n        }\r\n        else {\r\n            require(msg.value == LEVEL_PRICE[_level], \u0027Incorrect Value\u0027);\r\n\r\n            for(uint l =_level - 1; l \u003E 0; l--) require(users[msg.sender].levelExpired[l] \u003E= now, \u0027Buy the previous level\u0027);\r\n\r\n            if(users[msg.sender].levelExpired[_level] == 0) users[msg.sender].levelExpired[_level] = now \u002B PERIOD_LENGTH;\r\n            else users[msg.sender].levelExpired[_level] \u002B= PERIOD_LENGTH;\r\n        }\r\n\r\n        payForLevel(_level, msg.sender);\r\n\r\n        emit buyLevelEvent(msg.sender, _level, now);\r\n    }\r\n    \r\n    function syncWithOldSC(uint limit) public {\r\n        require(address(oldSC) != address(0), \u0027Initialize closed\u0027);\r\n        require(msg.sender == ownerWallet, \u0027Access denied\u0027);\r\n\r\n        for(uint i = 0; i \u003C limit; i\u002B\u002B) {\r\n            address user = oldSC.userList(oldSCUserId);\r\n            (bool isExist,, uint referrerID) = oldSC.users(user);\r\n\r\n            if(isExist) {\r\n                oldSCUserId\u002B\u002B;\r\n                \r\n                address ref = oldSC.userList(referrerID);\r\n\r\n                if(!users[user].isExist \u0026\u0026 users[ref].isExist) {\r\n                    users[user].isExist = true;\r\n                    users[user].id = \u002B\u002BcurrUserID;\r\n                    users[user].referrerID = users[ref].id;\r\n\r\n                    userList[currUserID] = user;\r\n                    users[ref].referral.push(user);\r\n\r\n                    for(uint j = 1; j \u003C= 8; j\u002B\u002B) {\r\n                        users[user].levelExpired[j] = viewUserLevelExpired(user, j);\r\n                    }\r\n\r\n                    emit regLevelEvent(user, ref, block.timestamp);\r\n                }\r\n            }\r\n            else break;\r\n        }\r\n    }\r\n\r\n    function syncClose() external {\r\n        require(address(oldSC) != address(0), \u0027Initialize already closed\u0027);\r\n        require(msg.sender == ownerWallet, \u0027Access denied\u0027);\r\n\r\n        oldSC = MillionMoney(0);\r\n    }\r\n\r\n    function payForLevel(uint _level, address _user) internal {\r\n        address referer;\r\n        address referer1;\r\n        address referer2;\r\n        address referer3;\r\n        address referer4;\r\n\r\n        if(_level == 1 || _level == 6) {\r\n            referer = userList[users[_user].referrerID];\r\n        }\r\n        else if(_level == 2 || _level == 7) {\r\n            referer1 = userList[users[_user].referrerID];\r\n            referer = userList[users[referer1].referrerID];\r\n        }\r\n        else if(_level == 3 || _level == 8) {\r\n            referer1 = userList[users[_user].referrerID];\r\n            referer2 = userList[users[referer1].referrerID];\r\n            referer = userList[users[referer2].referrerID];\r\n        }\r\n        else if(_level == 4 || _level == 9) {\r\n            referer1 = userList[users[_user].referrerID];\r\n            referer2 = userList[users[referer1].referrerID];\r\n            referer3 = userList[users[referer2].referrerID];\r\n            referer = userList[users[referer3].referrerID];\r\n        }\r\n        else if(_level == 5 || _level == 10) {\r\n            referer1 = userList[users[_user].referrerID];\r\n            referer2 = userList[users[referer1].referrerID];\r\n            referer3 = userList[users[referer2].referrerID];\r\n            referer4 = userList[users[referer3].referrerID];\r\n            referer = userList[users[referer4].referrerID];\r\n        }\r\n\r\n        if(!users[referer].isExist) referer = userList[1];\r\n\r\n        if(users[referer].levelExpired[_level] \u003E= now) {\r\n            address(uint160(referer)).send(LEVEL_PRICE[_level]);\r\n\r\n            emit getMoneyForLevelEvent(referer, msg.sender, _level, now);\r\n        }\r\n        else {\r\n            emit lostMoneyForLevelEvent(referer, msg.sender, _level, now);\r\n\r\n            payForLevel(_level, referer);\r\n        }\r\n    }\r\n\r\n    function findFreeReferrer(address _user) public view returns(address) {\r\n        if(users[_user].referral.length \u003C REFERRER_1_LEVEL_LIMIT) return _user;\r\n\r\n        address[] memory referrals = new address[](126);\r\n        referrals[0] = users[_user].referral[0];\r\n        referrals[1] = users[_user].referral[1];\r\n\r\n        address freeReferrer;\r\n        bool noFreeReferrer = true;\r\n\r\n        for(uint i = 0; i \u003C 126; i\u002B\u002B) {\r\n            if(users[referrals[i]].referral.length == REFERRER_1_LEVEL_LIMIT) {\r\n                if(i \u003C 63) {\r\n                    referrals[(i\u002B1)*2] = users[referrals[i]].referral[0];\r\n                    referrals[(i\u002B1)*2\u002B1] = users[referrals[i]].referral[1];\r\n                }\r\n            }\r\n            else {\r\n                noFreeReferrer = false;\r\n                freeReferrer = referrals[i];\r\n                break;\r\n            }\r\n        }\r\n\r\n        require(!noFreeReferrer, \u0027No Free Referrer\u0027);\r\n\r\n        return freeReferrer;\r\n    }\r\n\r\n    function viewUserReferral(address _user) public view returns(address[] memory) {\r\n        return users[_user].referral;\r\n    }\r\n\r\n    function viewUserLevelExpired(address _user, uint _level) public view returns(uint) {\r\n        return users[_user].levelExpired[_level];\r\n    }\r\n\r\n    function bytesToAddress(bytes memory bys) private pure returns (address addr) {\r\n        assembly {\r\n            addr := mload(add(bys, 20))\r\n        }\r\n    }\r\n}","ABI":"[{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_user\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022findFreeReferrer\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022syncClose\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_user\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022viewUserReferral\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022address[]\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address[]\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022LEVEL_PRICE\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_referrerID\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022regUser\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:true,\u0022stateMutability\u0022:\u0022payable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022oldSC\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022contract MillionMoney\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022ownerWallet\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022userList\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022currUserID\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022users\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022isExist\u0022,\u0022type\u0022:\u0022bool\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022id\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022referrerID\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_user\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_level\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022viewUserLevelExpired\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022limit\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022syncWithOldSC\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_level\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022buyLevel\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:true,\u0022stateMutability\u0022:\u0022payable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022constructor\u0022},{\u0022payable\u0022:true,\u0022stateMutability\u0022:\u0022payable\u0022,\u0022type\u0022:\u0022fallback\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_user\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_referrer\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_time\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022regLevelEvent\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_user\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_level\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_time\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022buyLevelEvent\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_user\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_level\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_time\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022prolongateLevelEvent\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_user\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_referral\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_level\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_time\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022getMoneyForLevelEvent\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_user\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_referral\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_level\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_time\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022lostMoneyForLevelEvent\u0022,\u0022type\u0022:\u0022event\u0022}]","ContractName":"MillionMoney","CompilerVersion":"v0.5.11\u002Bcommit.c082d0b4","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://715c1a8b4a1bdafba6b7fc6d8304dc2b062a725dcbf9ad6f219c7617167a7614"}]