[{"SourceCode":"pragma solidity 0.5.11;\r\n\r\nlibrary AddressCalc {\r\n\r\n\r\n    function futureAddressCalc(address payable _origin, uint _nonce) internal pure  returns (address) {\r\n\r\n        if(_nonce == 0x00) return address(uint160(uint256((keccak256(abi.encodePacked(byte(0xd6),\r\n         byte(0x94), _origin, byte(0x80)))))));\r\n\r\n        if(_nonce \u003C= 0x7f) return address(uint160(uint256((keccak256(abi.encodePacked(byte(0xd6),\r\n         byte(0x94), _origin, byte(uint8(_nonce))))))));\r\n\r\n        if(_nonce \u003C= 0xff) return address(uint160(uint256((keccak256(abi.encodePacked(byte(0xd7),\r\n         byte(0x94), _origin, byte(0x81), uint8(_nonce)))))));\r\n\r\n        if(_nonce \u003C= 0xffff) return address(uint160(uint256((keccak256(abi.encodePacked(byte(0xd8),\r\n         byte(0x94), _origin, byte(0x82), uint16(_nonce)))))));\r\n\r\n        if(_nonce \u003C= 0xffffff) return address(uint160(uint256((keccak256(abi.encodePacked(byte(0xd9),\r\n         byte(0x94), _origin, byte(0x83), uint24(_nonce)))))));\r\n\r\n\t\treturn address(uint160(uint256((keccak256(abi.encodePacked(byte(0xda), byte(0x94), _origin, byte(0x84), uint32(_nonce)))))));\r\n    }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity\u0027s arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * \u0060SafeMath\u0060 restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it\u0027s recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060\u002B\u0060 operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a \u002B b;\r\n        require(c \u003E= a, \u0022SafeMath: addition overflow\u0022);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060-\u0060 operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \u0022SafeMath: subtraction overflow\u0022);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060-\u0060 operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b \u003C= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060*\u0060 operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\r\n        // benefit is lost if \u0027b\u0027 is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \u0022SafeMath: multiplication overflow\u0022);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060/\u0060 operator. Note: this function uses a\r\n     * \u0060revert\u0060 opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \u0022SafeMath: division by zero\u0022);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060/\u0060 operator. Note: this function uses a\r\n     * \u0060revert\u0060 opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b \u003E 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c \u002B a % b); // There is no case in which this doesn\u0027t hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060%\u0060 operator. This function uses a \u0060revert\u0060\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \u0022SafeMath: modulo by zero\u0022);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060%\u0060 operator. This function uses a \u0060revert\u0060\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract BNY   {\r\n    using SafeMath for uint256;\r\n    using AddressCalc for address payable;\r\n    event Deposit(\r\n        address indexed _investor,\r\n        uint256 _investmentValue,\r\n        uint256 _ID,\r\n        uint256 _unlocktime,\r\n        string _investmentTerm\r\n    );\r\n    event PassiveDeposit(\r\n        address indexed _investor2,\r\n        uint256 _investmentValue2,\r\n        uint256 _ID2,\r\n        uint256 _unlocktime2,\r\n        uint256 _dailyIncome,\r\n        uint256 _investmentTime\r\n    );\r\n    event Spent(\r\n        address indexed _acclaimer,\r\n        uint256 indexed _amout\r\n    );\r\n    event PassiveSpent(\r\n        address indexed _acclaimer2,\r\n        uint256 indexed _amout2\r\n    );\r\n    event Transfer(\r\n        address indexed _from,\r\n        address indexed _to,\r\n        uint256 _value\r\n    );\r\n    event Approval(\r\n        address indexed _owner,\r\n        address indexed _spender,\r\n        uint256 _value\r\n    );\r\n    string constant public name = \u0022BANCACY\u0022;\r\n    string constant public symbol = \u0022BNY\u0022;\r\n    string constant public standard = \u0022BNY Token\u0022;\r\n    uint256 constant public decimals = 18 ;\r\n    uint256 private _totalSupply;\r\n    uint256 public totalInvestmentAfterInterest;\r\n    uint256 public investorIndex = 1;\r\n    uint256 public passiveInvestorIndex = 1;\r\n    uint256 constant public interestRate = 16;\r\n    uint256 constant public multiplicationForMidTerm  = 5;\r\n    uint256 constant public multiplicationForLongTerm = 20;\r\n    uint256 public minForPassive = 1200000 * (10 ** uint256(decimals));\r\n    uint256 public tokensForSale = 534600000 * (10 ** uint256(decimals));\r\n    uint256 public tokensSold = 1 * (10 ** uint256(decimals));\r\n    uint256 constant public tokensPerWei = 54000;\r\n  \tuint256 constant public Percent = 1000000000;\r\n    uint256 constant internal secondsInDay = 86400;\r\n    uint256 constant internal secondsInWeek = 604800;\r\n    uint256 constant internal secondsInMonth = 2419200;\r\n    uint256 constant internal secondsInQuarter = 7257600;\r\n\tuint256 constant internal daysInYear = 365;\r\n    uint256 internal _startSupply = 455400000 * (10 ** uint256(decimals));\r\n    address payable public fundsWallet;\r\n    address public XBNY;\r\n    address public BNY_DATA;\r\n\r\n\tenum TermData {DEFAULT, ONE, TWO, THREE}\r\n\r\n    mapping(uint256 =\u003E Investment) private investors;\r\n    mapping(uint256 =\u003E PassiveIncome) private passiveInvestors;\r\n    mapping (address =\u003E uint256) private _balances;\r\n    mapping (address =\u003E mapping (address =\u003E uint256)) private _allowances;\r\n    struct Investment {\r\n        address investorAddress;\r\n        uint256 investedAmount;\r\n        uint256 investmentUnlocktime;\r\n        bool spent;\r\n        string term;\r\n    }\r\n    struct PassiveIncome {\r\n        address investorAddress2;\r\n        uint256 investedAmount2;\r\n        uint256 dailyPassiveIncome;\r\n        uint256 investmentTimeStamp;\r\n        uint256 investmentUnlocktime2;\r\n        uint256 day;\r\n        bool spent2;\r\n    }\r\n    constructor (address payable _fundsWallet)  public {\r\n        _totalSupply = _startSupply;\r\n        fundsWallet = _fundsWallet;\r\n        _balances[fundsWallet] = _startSupply;\r\n        _balances[address(1)] = 0;\r\n        emit Transfer(\r\n            address(1),\r\n            fundsWallet,\r\n            _startSupply\r\n        );\r\n        XBNY = _msgSender().futureAddressCalc(1);\r\n        BNY_DATA = _msgSender().futureAddressCalc(2);\r\n    }\r\n    function () external payable{\r\n        require(tokensSold \u003C tokensForSale, \u0022All tokens are sold\u0022);\r\n        require(msg.value \u003E 0, \u0022Value must be \u003E 0\u0022);\r\n        uint256 eth = msg.value;\r\n        uint256 tokens = eth.mul(tokensPerWei);\r\n        uint256 bounosTokens = getDiscountOnBuy(tokens);\r\n\t\tuint256 totalTokens = bounosTokens.add(tokens);\r\n        require(totalTokens \u003C= (tokensForSale).sub(tokensSold), \u0022All tokens are sold\u0022);\r\n        fundsWallet.transfer(msg.value);\r\n        tokensSold = tokensSold.add((totalTokens));\r\n        _totalSupply = _totalSupply.add((totalTokens));\r\n        _balances[_msgSender()] = _balances[_msgSender()].add((totalTokens));\r\n        emit Transfer(\r\n            address(0),\r\n            _msgSender(),\r\n            totalTokens\r\n        );\r\n    }\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - \u0060recipient\u0060 cannot be the zero address.\r\n     * - the caller must have a balance of at least \u0060amount\u0060.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - \u0060spender\u0060 cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        _approve(_msgSender(), spender, value);\r\n        return true;\r\n    }\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - \u0060sender\u0060 and \u0060recipient\u0060 cannot be the zero address.\r\n     * - \u0060sender\u0060 must have a balance of at least \u0060value\u0060.\r\n     * - the caller must have allowance for \u0060sender\u0060\u0027s tokens of at least\r\n     * \u0060amount\u0060.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \u0022ERC20: transfer amount exceeds allowance\u0022));\r\n        return true;\r\n    }\r\n\t/**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\t/**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\t/**\r\n     * @dev Atomically increases the allowance granted to \u0060spender\u0060 by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - \u0060spender\u0060 cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to \u0060spender\u0060 by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - \u0060spender\u0060 cannot be the zero address.\r\n     * - \u0060spender\u0060 must have allowance for the caller of at least\r\n     * \u0060subtractedValue\u0060.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \u0022ERC20: decreased allowance below zero\u0022));\r\n        return true;\r\n    }\r\n\t/**\r\n     * @dev Moves tokens \u0060amount\u0060 from \u0060sender\u0060 to \u0060recipient\u0060.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - \u0060sender\u0060 cannot be the zero address.\r\n     * - \u0060recipient\u0060 cannot be the zero address.\r\n     * - \u0060sender\u0060 must have a balance of at least \u0060amount\u0060.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \u0022ERC20: transfer from the zero address\u0022);\r\n        require(recipient != address(0), \u0022ERC20: transfer to the zero address\u0022);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \u0022ERC20: transfer amount exceeds balance\u0022);\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\t/**\r\n     * @dev Sets \u0060amount\u0060 as the allowance of \u0060spender\u0060 over the \u0060owner\u0060s tokens.\r\n     *\r\n     * This is internal function is equivalent to \u0060approve\u0060, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - \u0060owner\u0060 cannot be the zero address.\r\n     * - \u0060spender\u0060 cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 value) internal {\r\n        require(owner != address(0), \u0022ERC20: approve from the zero address\u0022);\r\n        require(spender != address(0), \u0022ERC20: approve to the zero address\u0022);\r\n\r\n        _allowances[owner][spender] = value;\r\n        emit Approval(owner, spender, value);\r\n    }\r\n\t/**\r\n\t* @dev Destroys \u0060amount\u0060 tokens from the caller.\r\n\t*\r\n\t* See {ERC20-_burn}.\r\n\t*/\r\n    function burn(uint256 amount) public {\r\n        _burn(_msgSender(), amount);\r\n    }\r\n    /**\r\n     * @dev Destroys \u0060amount\u0060 tokens from \u0060account\u0060, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with \u0060to\u0060 set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - \u0060account\u0060 cannot be the zero address.\r\n     * - \u0060account\u0060 must have at least \u0060amount\u0060 tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != address(0), \u0022ERC20: burn from the zero address\u0022);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \u0022ERC20: burn amount exceeds balance\u0022);\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\tfunction _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n    function makeInvestment(uint256 _unlockTime, uint256 _amount, uint term123) external returns (uint256) {\r\n        require(_balances[_msgSender()] \u003E= _amount, \u0022You dont have sufficent amount of tokens\u0022);\r\n        require(_amount \u003E 0, \u0022Investment amount should be bigger than 0\u0022);\r\n        require(_unlockTime \u003E= secondsInWeek \u0026\u0026 (_unlockTime.mod(secondsInWeek)) == 0, \u0022Wrong investment time\u0022);\r\n        // Term time is currently in weeks\r\n        uint256 termAfter = (_unlockTime.div(secondsInWeek));\r\n        uint256 currentInvestor = investorIndex;\r\n\r\n        /*\r\n        The termAfter in weeks is more than or equal to 1 (week).\r\n        The user must have typed (in weeks) a figure (as termAfter) less than or equal to 48 (when comparing termAfter in weeks). Taken from the UI in (weeks), calculated into (seconds).\r\n        The user has selected \u0022weeks\u0022 / \u0022short term\u0022 (1) in the UI.\r\n        Previous check: The unlock time is a factor of weeks (in require).\r\n        */\r\n        if((termAfter \u003E= 1) \u0026\u0026\r\n\t\t(termAfter \u003C= 48) \u0026\u0026\r\n\t\t(term123 == uint(TermData.ONE)))\r\n        {\r\n            investorIndex\u002B\u002B;\r\n            totalInvestmentAfterInterest = _amount.add(getInterestRate(_amount, termAfter));\r\n            investors[currentInvestor] = Investment(\r\n                _msgSender(),\r\n                totalInvestmentAfterInterest,\r\n                block.timestamp.add(_unlockTime),\r\n                false,\r\n                \u0022short\u0022\r\n            );\r\n            emit Deposit(_msgSender(),\r\n                _amount,\r\n                currentInvestor,\r\n                block.timestamp.add(_unlockTime),\r\n                \u0022SHORT-TERM\u0022\r\n            );\r\n            emit Transfer(\r\n                _msgSender(),\r\n                address(1),\r\n                _amount\r\n            );\r\n            emit Transfer(\r\n                address(1),\r\n                address(1),\r\n                totalInvestmentAfterInterest.sub(_amount)\r\n            );\r\n            _balances[_msgSender()] = _balances[_msgSender()].sub(_amount);\r\n            _balances[address(1)] = _balances[address(1)].add(totalInvestmentAfterInterest);\r\n            _totalSupply = _totalSupply.sub(_amount);\r\n            return (currentInvestor);\r\n        }\r\n        // Recalculate the original termAfter (set in weeks) from unlocktime (in seconds) (instead as whole months, in seconds) for multiplier.\r\n        termAfter = (_unlockTime.div(secondsInMonth));\r\n        /*\r\n        The unlock time in seconds is more than or equal to 1 month in seconds.\r\n        The user has selected \u0022months\u0022 / \u0022mid term\u0022 (2) in the UI.\r\n        The user must have typed (in months) a figure (as termAfter) less than or equal to 1 year / 12 (when comparing termAfter in months). Taken from the UI in (months), calculated into seconds.\r\n        The unlock time (in seconds) is a factor of whole months (in seconds).\r\n        */\r\n        if((_unlockTime \u003E= secondsInMonth) \u0026\u0026\r\n\t\t(term123 == uint(TermData.TWO)) \u0026\u0026\r\n\t\t(termAfter \u003C= 12 ) \u0026\u0026\r\n\t\t(_unlockTime.mod(secondsInMonth)) == 0) {\r\n            investorIndex\u002B\u002B;\r\n            totalInvestmentAfterInterest = _amount.add(getInterestRate(_amount, multiplicationForMidTerm).mul(termAfter));\r\n            investors[currentInvestor] = Investment(\r\n                _msgSender(),\r\n                totalInvestmentAfterInterest,\r\n                block.timestamp.add(_unlockTime),\r\n                false,\r\n                \u0022mid\u0022\r\n            );\r\n            emit Deposit(\r\n                _msgSender(),\r\n                _amount,\r\n                currentInvestor,\r\n                block.timestamp.add(_unlockTime),\r\n                \u0022MID-TERM\u0022\r\n            );\r\n            emit Transfer(\r\n                _msgSender(),\r\n                address(1),\r\n                _amount\r\n            );\r\n            emit Transfer(\r\n                address(1),\r\n                address(1),\r\n                totalInvestmentAfterInterest.sub(_amount)\r\n            );\r\n            _balances[_msgSender()] = _balances[_msgSender()].sub(_amount);\r\n            _balances[address(1)] = _balances[address(1)].add(totalInvestmentAfterInterest);\r\n            _totalSupply = _totalSupply.sub(_amount);\r\n            return (currentInvestor);\r\n        }\r\n\r\n\r\n        // Recalculate the original termAfter (reset as months) from unlocktime (in seconds) (instead as whole quarters, in seconds) for the multiplier.\r\n        termAfter = (_unlockTime.div(secondsInQuarter));\r\n        /*\r\n        The unlock time in seconds is more than or equal to 1 quarter in seconds.\r\n        The user has selected \u0022quarters\u0022 / \u0022long term\u0022 (3) in the UI.\r\n        The user must have typed a figure less than or equal to 3 years / 12 (when comparing termAfter in quarters). Taken from the UI in (quarters), calculated into seconds.\r\n        The unlock time (in seconds) is a factor of whole quarters (in seconds).\r\n        */\r\n        if((_unlockTime \u003E= secondsInQuarter) \u0026\u0026\r\n\t\t(term123 == uint(TermData.THREE)) \u0026\u0026\r\n\t\t(termAfter \u003C= 12 ) \u0026\u0026\r\n\t\t(_unlockTime.mod(secondsInQuarter) == 0)) {\r\n            investorIndex\u002B\u002B;\r\n            totalInvestmentAfterInterest = _amount.add(getInterestRate(_amount, multiplicationForLongTerm).mul(termAfter));\r\n            investors[currentInvestor] = Investment(\r\n                _msgSender(),\r\n                totalInvestmentAfterInterest,\r\n                block.timestamp.add(_unlockTime),\r\n                false,\r\n                \u0022long\u0022\r\n            );\r\n            emit Deposit(\r\n                _msgSender(),\r\n                _amount,\r\n                currentInvestor,\r\n                block.timestamp.add(_unlockTime),\r\n                \u0022LONG-TERM\u0022\r\n            );\r\n            emit Transfer(\r\n                _msgSender(),\r\n                address(1),\r\n                _amount\r\n            );\r\n            emit Transfer(\r\n                address(1),\r\n                address(1),\r\n                totalInvestmentAfterInterest.sub(_amount)\r\n            );\r\n            _balances[_msgSender()] = _balances[_msgSender()].sub(_amount);\r\n            _balances[address(1)] = _balances[address(1)].add(totalInvestmentAfterInterest);\r\n            _totalSupply = _totalSupply.sub(_amount);\r\n            return (currentInvestor);\r\n        }\r\n    }\r\n    function releaseInvestment(uint256 _investmentId) external returns (bool success) {\r\n        require(investors[_investmentId].investorAddress == _msgSender(), \u0022Only the investor can claim the investment\u0022);\r\n        require(investors[_investmentId].spent == false, \u0022The investment is already spent\u0022);\r\n        require(investors[_investmentId].investmentUnlocktime \u003C block.timestamp, \u0022Unlock time for the investment did not pass\u0022);\r\n        investors[_investmentId].spent = true;\r\n        _totalSupply = _totalSupply.add(investors[_investmentId].investedAmount);\r\n        _balances[address(1)] = _balances[address(1)].sub(investors[_investmentId].investedAmount);\r\n        _balances[_msgSender()] = _balances[_msgSender()].add(investors[_investmentId].investedAmount);\r\n        emit Transfer(\r\n            address(1),\r\n            _msgSender(),\r\n            investors[_investmentId].investedAmount\r\n        );\r\n        emit Spent(\r\n            _msgSender(),\r\n            investors[_investmentId].investedAmount\r\n        );\r\n        return true;\r\n    }\r\n    function makePassiveIncomeInvestment(uint256 _amount) external returns (uint256) {\r\n        require(_balances[_msgSender()] \u003E= _amount, \u0022You  have insufficent amount of tokens\u0022);\r\n        require(_amount \u003E= minForPassive, \u0022Investment amount should be bigger than 1.2M\u0022);\r\n        uint256 interestOnInvestment = getInterestRate(_amount, 75).div(daysInYear);\r\n        uint256 currentInvestor = passiveInvestorIndex;\r\n        passiveInvestorIndex\u002B\u002B;\r\n        passiveInvestors[currentInvestor] = PassiveIncome(\r\n            _msgSender(),\r\n            _amount,\r\n            interestOnInvestment,\r\n            block.timestamp,\r\n            block.timestamp.add(secondsInDay * daysInYear),\r\n            1,\r\n            false\r\n        );\r\n        emit Transfer(\r\n            _msgSender(),\r\n            address(1),\r\n            _amount\r\n        );\r\n        emit Transfer(\r\n            address(1),\r\n            address(1),\r\n            interestOnInvestment.mul(daysInYear)\r\n        );\r\n        emit PassiveDeposit(\r\n            _msgSender(),\r\n            _amount,\r\n            currentInvestor,\r\n            block.timestamp.add((secondsInDay * daysInYear)),\r\n            passiveInvestors[currentInvestor].dailyPassiveIncome,\r\n            passiveInvestors[currentInvestor].investmentTimeStamp\r\n        );\r\n        _balances[_msgSender()] = _balances[_msgSender()].sub(_amount);\r\n        _balances[address(1)] = _balances[address(1)].add((interestOnInvestment.mul(daysInYear)).add(_amount));\r\n        _totalSupply = _totalSupply.sub(_amount);\r\n        return (currentInvestor);\r\n    }\r\n    function releasePassiveIncome(uint256 _passiveIncomeID) external returns (bool success) {\r\n        require(passiveInvestors[_passiveIncomeID].investorAddress2 == _msgSender(), \u0022Only the investor can claim the investment\u0022);\r\n        require(passiveInvestors[_passiveIncomeID].spent2 == false, \u0022The investment is already claimed\u0022);\r\n        require(passiveInvestors[_passiveIncomeID].investmentTimeStamp.add((\r\n        secondsInDay * passiveInvestors[_passiveIncomeID].day)) \u003C block.timestamp,\r\n        \u0022Unlock time for the investment did not pass\u0022);\r\n        require(passiveInvestors[_passiveIncomeID].day \u003C 366, \u0022The investment is already claimed\u0022);\r\n        uint256 totalReward = 0;\r\n        uint256 numberOfDaysHeld = (block.timestamp - passiveInvestors[_passiveIncomeID].investmentTimeStamp) / secondsInDay;\r\n        if(numberOfDaysHeld \u003E daysInYear){\r\n            passiveInvestors[_passiveIncomeID].spent2 = true;\r\n            numberOfDaysHeld = daysInYear;\r\n            totalReward = passiveInvestors[_passiveIncomeID].investedAmount2;\r\n        }\r\n        uint numberOfDaysOwed = numberOfDaysHeld - (passiveInvestors[_passiveIncomeID].day - 1);\r\n        uint totalDailyPassiveIncome = passiveInvestors[_passiveIncomeID].dailyPassiveIncome * numberOfDaysOwed;\r\n        passiveInvestors[_passiveIncomeID].day = numberOfDaysHeld.add(1);\r\n        totalReward = totalReward.add(totalDailyPassiveIncome);\r\n        if(totalReward \u003E 0){\r\n            _totalSupply = _totalSupply.add(totalReward);\r\n            _balances[address(1)] = _balances[address(1)].sub(totalReward);\r\n            _balances[_msgSender()] = _balances[_msgSender()].add(totalReward);\r\n            emit Transfer(\r\n                address(1),\r\n                _msgSender(),\r\n                totalReward\r\n            );\r\n            emit PassiveSpent(\r\n                _msgSender(),\r\n                totalReward\r\n            );\r\n            return true;\r\n        }\r\n        else{\r\n            revert(\r\n                \u0022There is no total reward earned.\u0022\r\n            );\r\n        }\r\n    }\r\n    function BNY_AssetSolidification(address _user, uint256 _value) external returns (bool success) {\r\n        require(_msgSender() == BNY_DATA, \u0022No Permission\u0022);\r\n        require(_balances[_user] \u003E= _value, \u0022User have incufficent balance\u0022);\r\n        _balances[_user] = _balances[_user].sub(_value);\r\n        _totalSupply = _totalSupply.sub(_value);\r\n        emit Transfer(\r\n            _user,\r\n            address(2),\r\n            _value\r\n        );\r\n        return true;\r\n    }\r\n    function BNY_AssetDesolidification(address _user,uint256 _value) external returns (bool success) {\r\n        require(_msgSender() == BNY_DATA, \u0022No Permission\u0022);\r\n        _balances[_user] = _balances[_user].add(_value);\r\n        _totalSupply = _totalSupply.add(_value);\r\n        emit Transfer(\r\n            address(2),\r\n            _user,\r\n            _value\r\n        );\r\n        return true;\r\n    }\r\n    function getBalanceOf(address _user) external view returns (uint256 balance) {\r\n        require(_msgSender() == BNY_DATA, \u0022No Permission\u0022);\r\n        return _balances[_user];\r\n    }\r\n    function getPassiveDetails (uint _passiveIncomeID) external view returns (\r\n        address investorAddress2,\r\n        uint256 investedAmount2,\r\n        uint256 dailyPassiveIncome,\r\n        uint256 investmentTimeStamp,\r\n        uint256 investmentUnlocktime2,\r\n        uint256 day,\r\n        bool spent2\r\n    ){\r\n        return(\r\n            passiveInvestors[_passiveIncomeID].investorAddress2,\r\n            passiveInvestors[_passiveIncomeID].investedAmount2,\r\n            passiveInvestors[_passiveIncomeID].dailyPassiveIncome,\r\n            passiveInvestors[_passiveIncomeID].investmentTimeStamp,\r\n            passiveInvestors[_passiveIncomeID].investmentUnlocktime2,\r\n            passiveInvestors[_passiveIncomeID].day,\r\n            passiveInvestors[_passiveIncomeID].spent2\r\n        );\r\n    }\r\n    function getPassiveIncomeDay(uint256 _passiveIncomeID) external view returns (uint256) {\r\n        return(passiveInvestors[_passiveIncomeID].day);\r\n    }\r\n    function getPassiveIncomeStatus(uint256 _passiveIncomeID) external view returns (bool) {\r\n        return (passiveInvestors[_passiveIncomeID].spent2);\r\n    }\r\n    function getPassiveInvestmentTerm(uint256 _passiveIncomeID) external view returns (uint256){\r\n        return (passiveInvestors[_passiveIncomeID].investmentUnlocktime2);\r\n    }\r\n    function getPassiveNumberOfDays (uint _passiveIncomeID) external view returns (uint256){\r\n        return (block.timestamp - passiveInvestors[_passiveIncomeID].investmentTimeStamp) / secondsInDay;\r\n    }\r\n    function getPassiveInvestmentTimeStamp(uint256 _passiveIncomeID) external view returns (uint256){\r\n        return (passiveInvestors[_passiveIncomeID].investmentTimeStamp);\r\n    }\r\n    function getInvestmentStatus(uint256 _ID) external view returns (bool){\r\n        return (investors[_ID].spent);\r\n    }\r\n    function getInvestmentTerm(uint256 _ID) external view returns (uint256){\r\n        return (investors[_ID].investmentUnlocktime);\r\n    }\r\n    function getDiscountOnBuy(uint256 _tokensAmount) public view returns (uint256 discount) {\r\n        uint256 tokensSoldADJ = tokensSold.mul(1000000000);\r\n        uint256 discountPercentage = tokensSoldADJ.div(tokensForSale);\r\n        uint256 adjustedDiscount = (Percent.sub(discountPercentage)).mul(2500);\r\n        uint256 DiscountofTokens = (adjustedDiscount.mul(_tokensAmount));\r\n        return((DiscountofTokens).div(10000000000000));\r\n    }\r\n    function getBlockTimestamp () external view returns (uint blockTimestamp){\r\n        return block.timestamp;\r\n    }\r\n    function getInterestRate(uint256 _investment, uint _term) public view returns (uint256 rate) {\r\n        require(_investment \u003C _totalSupply, \u0022The investment is too large\u0022);\r\n        uint256 totalinvestments = _balances[address(1)].mul(Percent);\r\n        uint256 investmentsPercentage = totalinvestments.div(_totalSupply);\r\n        uint256 adjustedinterestrate = (Percent.sub(investmentsPercentage)).mul(interestRate);\r\n        uint256 interestoninvestment = (adjustedinterestrate.mul(_investment)).div(10000000000000);\r\n        return (interestoninvestment.mul(_term));\r\n    }\r\n    function getSimulatedDailyIncome (uint _passiveIncomeID) external view returns (\r\n        uint _numberOfDaysHeld,\r\n        uint _numberOfDaysOwed,\r\n        uint _totalDailyPassiveIncome,\r\n        uint _dailyPassiveIncome,\r\n        uint _totalReward,\r\n        uint _day,\r\n        bool _spent\r\n    ){\r\n        _spent = false;\r\n        _numberOfDaysHeld = (block.timestamp - passiveInvestors[_passiveIncomeID].investmentTimeStamp) / secondsInDay;\r\n        if(_numberOfDaysHeld \u003E daysInYear){\r\n            _numberOfDaysHeld = daysInYear;\r\n            _totalReward = passiveInvestors[_passiveIncomeID].investedAmount2;\r\n            _spent = true;\r\n        }\r\n        _numberOfDaysOwed = _numberOfDaysHeld - (passiveInvestors[_passiveIncomeID].day - 1);\r\n        _totalDailyPassiveIncome = passiveInvestors[_passiveIncomeID].dailyPassiveIncome * _numberOfDaysOwed;\r\n        _day = _numberOfDaysHeld.add(1);\r\n        _totalReward = _totalReward.add(_totalDailyPassiveIncome);\r\n        _dailyPassiveIncome = passiveInvestors[_passiveIncomeID].dailyPassiveIncome;\r\n        return (\r\n            _numberOfDaysHeld,\r\n            _numberOfDaysOwed,\r\n            _totalDailyPassiveIncome,\r\n            _dailyPassiveIncome,\r\n            _totalReward,\r\n            _day,\r\n            _spent\r\n        );\r\n    }\r\n}","ABI":"[{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022passiveInvestorIndex\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022name\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022string\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022spender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022approve\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_user\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022BNY_AssetDesolidification\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022success\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_passiveIncomeID\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022getPassiveInvestmentTerm\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022tokensForSale\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022totalSupply\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_passiveIncomeID\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022getSimulatedDailyIncome\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_numberOfDaysHeld\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_numberOfDaysOwed\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_totalDailyPassiveIncome\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_dailyPassiveIncome\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_totalReward\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_day\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022_spent\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022minForPassive\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022fundsWallet\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022address payable\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022tokensPerWei\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022multiplicationForMidTerm\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022sender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022recipient\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022transferFrom\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_user\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022BNY_AssetSolidification\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022success\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022BNY_DATA\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022decimals\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022spender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022addedValue\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022increaseAllowance\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022burn\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_passiveIncomeID\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022getPassiveIncomeDay\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022tokensSold\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022makePassiveIncomeInvestment\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_unlockTime\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_amount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022term123\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022makeInvestment\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022standard\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022string\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022balanceOf\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022getBlockTimestamp\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022blockTimestamp\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022interestRate\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_passiveIncomeID\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022getPassiveInvestmentTimeStamp\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_investmentId\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022releaseInvestment\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022success\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022symbol\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022string\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022Percent\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_user\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022getBalanceOf\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022balance\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022multiplicationForLongTerm\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022spender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022subtractedValue\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022decreaseAllowance\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022recipient\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022transfer\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022XBNY\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_ID\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022getInvestmentTerm\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_investment\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_term\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022getInterestRate\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022rate\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_tokensAmount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022getDiscountOnBuy\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022discount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_passiveIncomeID\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022getPassiveDetails\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022investorAddress2\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022investedAmount2\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022dailyPassiveIncome\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022investmentTimeStamp\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022investmentUnlocktime2\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022day\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022spent2\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022owner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022spender\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022allowance\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_passiveIncomeID\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022getPassiveIncomeStatus\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022investorIndex\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_ID\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022getInvestmentStatus\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022totalInvestmentAfterInterest\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_passiveIncomeID\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022getPassiveNumberOfDays\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_passiveIncomeID\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022releasePassiveIncome\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022success\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address payable\u0022,\u0022name\u0022:\u0022_fundsWallet\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022constructor\u0022},{\u0022payable\u0022:true,\u0022stateMutability\u0022:\u0022payable\u0022,\u0022type\u0022:\u0022fallback\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_investor\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_investmentValue\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_ID\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_unlocktime\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022string\u0022,\u0022name\u0022:\u0022_investmentTerm\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022name\u0022:\u0022Deposit\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_investor2\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_investmentValue2\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_ID2\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_unlocktime2\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_dailyIncome\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_investmentTime\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022PassiveDeposit\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_acclaimer\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_amout\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022Spent\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_acclaimer2\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_amout2\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022PassiveSpent\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_from\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022Transfer\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_owner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_spender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022Approval\u0022,\u0022type\u0022:\u0022event\u0022}]","ContractName":"BNY","CompilerVersion":"v0.5.11\u002Bcommit.c082d0b4","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"00000000000000000000000042963c37e9172db6cb9114389a2a89da188b2464","Library":"","SwarmSource":"bzzr://383338b062b55e702bc5bcdef169f2a945abaedb96d288d88ad22d5c1d70ba79"}]