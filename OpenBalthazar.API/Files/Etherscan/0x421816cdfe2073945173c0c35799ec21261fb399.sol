[{"SourceCode":"pragma solidity 0.5.16;\r\n\r\n\r\ninterface IERC20 {\r\n    function transfer(address, uint256) external returns (bool);\r\n    function approve(address, uint256) external returns (bool);\r\n    function balanceOf(address) external view returns (uint256);\r\n    function allowance(address, address) external view returns (uint256);\r\n}\r\n\r\n\r\n/// @notice This contract serves as an isolated execution environment for\r\n/// performing Eth-to-Dai and Dai-to-Eth trades. DO NOT give this contract\r\n/// any ERC20 allowances, as it will be able to steal the approved tokens.\r\n/// To trade Dai-to-Eth, instead transfer in Dai and call \u0060tradeDaiForEth\u0060\r\n/// (obviously, these steps must be performed atomically). For Eth-to-Dai,\r\n/// simply supply an amount of ETH alongside the call to \u0060tradeEthForDai\u0060.\r\n/// Be sure to include a parameter with the expected amount - this serves\r\n/// as a minimum that must end up in the contract at the end of the trade.\r\n/// Both calls will revert if the received amount is less than this value.\r\n/// @author 0age\r\ncontract EthToDaiTradeHelperV3 {\r\n    IERC20 internal constant _DAI = IERC20(\r\n        0x6B175474E89094C44Da98b954EedeAC495271d0F\r\n    );\r\n    \r\n    /// @notice target is the dex to call and data is the payload\r\n    function tradeEthForDai(\r\n        uint256 daiExpected, address payable target, bytes calldata data\r\n    ) external payable returns (uint256 daiReceived) {\r\n        // Call into the provided target, supplying ETH and data.\r\n        (bool ok,) = target.call.value(address(this).balance)(data);\r\n        \r\n        // Revert with reason if the call was not successful.\r\n        _revertOnFailure(ok);\r\n        \r\n        // Determine the total Dai balance of this contract.\r\n        daiReceived = _DAI.balanceOf(address(this));\r\n        \r\n        // Ensure that enough Dai was received.\r\n        require(\r\n            daiReceived \u003E= daiExpected,\r\n            \u0022Trade did not result in the expected amount of Dai.\u0022\r\n        );\r\n        \r\n        // Transfer the Dai to the caller and revert on failure.\r\n        ok = (_DAI.transfer(msg.sender, daiReceived));\r\n        require(ok, \u0022Dai transfer out failed.\u0022);\r\n    }\r\n\r\n    /// @notice target is the dex to call and data is the payload\r\n    function tradeDaiForEth(\r\n        uint256 ethExpected, address target, bytes calldata data\r\n    ) external returns (uint256 ethReceived) {\r\n        // Ensure that target has allowance to transfer Dai.\r\n        if (_DAI.allowance(address(this), target) != uint256(-1)) {\r\n            _DAI.approve(target, uint256(-1));\r\n        }\r\n        \r\n        // Call into the provided target, providing data.\r\n        (bool ok,) = target.call(data);\r\n        \r\n        // Revert with reason if the call was not successful.\r\n        _revertOnFailure(ok);\r\n        \r\n        // Determine the total Ether balance of this contract.\r\n        ethReceived = address(this).balance;\r\n\r\n        // Ensure that enough Ether was received.\r\n        require(\r\n            ethReceived \u003E= ethExpected,\r\n            \u0022Trade did not result in the expected amount of Ether.\u0022\r\n        );\r\n   \r\n        // Transfer the Ether to the caller and revert on failure.\r\n        (ok, ) = msg.sender.call.gas(4999).value(ethReceived)(\u0022\u0022);\r\n\r\n        // Revert with reason if the call was not successful.\r\n        _revertOnFailure(ok);\r\n    }\r\n    \r\n    /// @notice pass along revert reasons on external calls.\r\n    function _revertOnFailure(bool ok) internal pure {\r\n        if (!ok) {\r\n            assembly {\r\n                returndatacopy(0, 0, returndatasize)\r\n                revert(0, returndatasize)\r\n            }\r\n        }\r\n    }\r\n}","ABI":"[{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022ethExpected\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022target\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022bytes\u0022,\u0022name\u0022:\u0022data\u0022,\u0022type\u0022:\u0022bytes\u0022}],\u0022name\u0022:\u0022tradeDaiForEth\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022ethReceived\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022daiExpected\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022address payable\u0022,\u0022name\u0022:\u0022target\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022bytes\u0022,\u0022name\u0022:\u0022data\u0022,\u0022type\u0022:\u0022bytes\u0022}],\u0022name\u0022:\u0022tradeEthForDai\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022daiReceived\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:true,\u0022stateMutability\u0022:\u0022payable\u0022,\u0022type\u0022:\u0022function\u0022}]","ContractName":"EthToDaiTradeHelperV3","CompilerVersion":"v0.5.16\u002Bcommit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://df59379c95d28b550aa606cc9c0222d3fa746fecfbd2c4994f3beef83a6159e6"}]