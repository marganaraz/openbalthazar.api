[{"SourceCode":"pragma solidity 0.5.16;\r\n\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \u0022Ownable: caller is not the owner\u0022);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * \u0060onlyOwner\u0060 functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (\u0060newOwner\u0060).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (\u0060newOwner\u0060).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \u0022Ownable: new owner is the zero address\u0022);\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract EthStation is Ownable {\r\n    address payable[] public accounts;\r\n\r\n    event AddAccount(address _account);\r\n    event RemoveAccount(address _account);\r\n    \r\n    function addAccounts(address payable[] calldata _accounts) external onlyOwner {\r\n        for (uint256 i = 0; i \u003C _accounts.length; i\u002B\u002B) {\r\n            _addAccount(_accounts[i]);\r\n        }\r\n    }\r\n\r\n    function _addAccount(address payable _account) private {\r\n        accounts.push(_account);\r\n        emit AddAccount(_account);\r\n    }\r\n\r\n    function removeAccount(address payable _account, uint256 _index) external onlyOwner {\r\n        require(accounts[_index] == _account, \u0022ethstation: account and index should match\u0022);\r\n        address payable last = accounts[accounts.length - 1];\r\n        accounts[_index] = last;\r\n        accounts.length--;\r\n        emit RemoveAccount(_account);\r\n    }\r\n\r\n    function _balance(uint256 _target, uint256[] memory _balances) internal pure returns (uint256 nTarget) {\r\n        uint256 d = _balances.length;\r\n        uint256 oTarget = _target / _balances.length;\r\n\r\n        uint256 t;\r\n\r\n        for (uint256 i = 0; i \u003C _balances.length; i\u002B\u002B) {\r\n            if (_balances[i] \u003E oTarget) {\r\n                d--;\r\n                t \u002B= (_balances[i] - oTarget);\r\n            }\r\n        }\r\n\r\n        nTarget = oTarget - (t / d);\r\n    }\r\n\r\n    function balances() external view returns (uint256[] memory balances) {\r\n        address payable[] memory maccounts = accounts;\r\n        uint256 length = maccounts.length;\r\n\r\n        balances = new uint256[](length);\r\n\r\n        for (uint256 i = 0; i \u003C length; i\u002B\u002B) {\r\n            balances[i] = maccounts[i].balance;\r\n        }\r\n    }\r\n    \r\n    function lowest() external view returns (address, uint256) {\r\n        address payable[] memory maccounts = accounts;\r\n        uint256 length = maccounts.length;\r\n        \r\n        address lowestAddr;\r\n        uint256 lowestBalance;\r\n\r\n        for (uint256 i = 0; i \u003C length; i\u002B\u002B) {\r\n            address addr = maccounts[i];\r\n            uint256 balance  = addr.balance;\r\n\r\n            if (lowestAddr == address(0)) {\r\n                lowestAddr = addr;\r\n                lowestBalance = balance;\r\n            } else {\r\n                if (balance \u003C lowestBalance) {\r\n                    lowestAddr = addr;\r\n                    lowestBalance = balance;\r\n                }\r\n            }\r\n        }\r\n\r\n        return (lowestAddr, lowestBalance);\r\n    }\r\n\r\n    function() external payable {\r\n        address payable[] memory maccounts = accounts;\r\n        uint256 length = maccounts.length;\r\n\r\n        uint256[] memory balances = new uint256[](length);\r\n        uint256 totalBalance;\r\n        \r\n        for (uint256 i = 0; i \u003C length; i\u002B\u002B) {\r\n            uint256 balance = maccounts[i].balance;\r\n            totalBalance \u002B= balance;\r\n            balances[i] = balance;\r\n        }\r\n\r\n        uint256 nTarget = _balance(address(this).balance \u002B totalBalance, balances);\r\n\r\n        for (uint256 i = 0; i \u003C length; i\u002B\u002B) {                        \r\n            if (balances[i] \u003C nTarget) {\r\n                maccounts[i].call.value(nTarget - balances[i])(\u0022\u0022);\r\n            }\r\n        }\r\n\r\n        msg.sender.transfer(address(this).balance);\r\n    }\r\n\r\n    function kill() external onlyOwner {\r\n        selfdestruct(address(uint160(owner())));\r\n    }\r\n}","ABI":"[{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022AddAccount\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022previousOwner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022OwnershipTransferred\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022RemoveAccount\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022payable\u0022:true,\u0022stateMutability\u0022:\u0022payable\u0022,\u0022type\u0022:\u0022fallback\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022accounts\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022address payable\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address payable[]\u0022,\u0022name\u0022:\u0022_accounts\u0022,\u0022type\u0022:\u0022address[]\u0022}],\u0022name\u0022:\u0022addAccounts\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022balances\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256[]\u0022,\u0022name\u0022:\u0022balances\u0022,\u0022type\u0022:\u0022uint256[]\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022isOwner\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022kill\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022lowest\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022owner\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address payable\u0022,\u0022name\u0022:\u0022_account\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_index\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022removeAccount\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022renounceOwnership\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022transferOwnership\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022}]","ContractName":"EthStation","CompilerVersion":"v0.5.16\u002Bcommit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://b722d11f26b312b5a2eb9fb658c5d8edae9eeb3ad1b7952dad7f40ceca1e433c"}]