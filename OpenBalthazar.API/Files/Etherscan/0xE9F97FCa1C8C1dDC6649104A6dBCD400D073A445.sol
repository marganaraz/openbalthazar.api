[{"SourceCode":"// File: contracts/libs/math/SafeMath.sol\r\n\r\npragma solidity 0.5.15;\r\n\r\n/**\r\n * @dev Wrappers over Solidity\u0027s arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * \u0060SafeMath\u0060 restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it\u0027s recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    uint constant TEN18 = 10**18;\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060\u002B\u0060 operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a \u002B b;\r\n        require(c \u003E= a, \u0022SafeMath: addition overflow\u0022);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060-\u0060 operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \u0022SafeMath: subtraction overflow\u0022);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060-\u0060 operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b \u003C= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060*\u0060 operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\r\n        // benefit is lost if \u0027b\u0027 is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \u0022SafeMath: multiplication overflow\u0022);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060/\u0060 operator. Note: this function uses a\r\n     * \u0060revert\u0060 opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \u0022SafeMath: division by zero\u0022);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060/\u0060 operator. Note: this function uses a\r\n     * \u0060revert\u0060 opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b \u003E 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c \u002B a % b); // There is no case in which this doesn\u0027t hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060%\u0060 operator. This function uses a \u0060revert\u0060\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \u0022SafeMath: modulo by zero\u0022);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060%\u0060 operator. This function uses a \u0060revert\u0060\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/libs/math/Math.sol\r\n\r\npragma solidity 0.5.15;\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a \u003E= b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a \u003C b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a \u002B b) / 2 can overflow, so we distribute\r\n        return (a / 2) \u002B (b / 2) \u002B ((a % 2 \u002B b % 2) / 2);\r\n    }\r\n}\r\n\r\n// File: contracts/libs/utils/Address.sol\r\n\r\npragma solidity 0.5.15;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if \u0060account\u0060 is a contract.\r\n     *\r\n     * This test is non-exhaustive, and there may be false-negatives: during the\r\n     * execution of a contract\u0027s constructor, its address will be reported as\r\n     * not containing a contract.\r\n     *\r\n     * IMPORTANT: It is unsafe to assume that an address for which this\r\n     * function returns false is an externally-owned account (EOA) and not a\r\n     * contract.\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. \u0060keccak256(\u0027\u0027)\u0060\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != 0x0 \u0026\u0026 codehash != accountHash);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an \u0060address\u0060 into \u0060address payable\u0060. Note that this is\r\n     * simply a type cast: the actual underlying value is not changed.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity\u0027s \u0060transfer\u0060: sends \u0060amount\u0060 wei to\r\n     * \u0060recipient\u0060, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by \u0060transfer\u0060, making them unable to receive funds via\r\n     * \u0060transfer\u0060. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to \u0060recipient\u0060, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance \u003E= amount, \u0022Address: insufficient balance\u0022);\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\u0022\u0022);\r\n        require(success, \u0022Address: unable to send value, recipient may have reverted\u0022);\r\n    }\r\n}\r\n\r\n// File: contracts/libs/utils/Arrays.sol\r\n\r\npragma solidity 0.5.15;\r\n\r\n\r\n/**\r\n * @dev Collection of functions related to array types.\r\n */\r\nlibrary Arrays {\r\n   /**\r\n     * @dev Searches a sorted \u0060array\u0060 and returns the first index that contains\r\n     * a value greater or equal to \u0060element\u0060. If no such index exists (i.e. all\r\n     * values in the array are strictly less than \u0060element\u0060), the array length is\r\n     * returned. Time complexity O(log n).\r\n     *\r\n     * \u0060array\u0060 is expected to be sorted in ascending order, and to contain no\r\n     * repeated elements.\r\n     */\r\n    function findUpperBound(uint256[] storage array, uint256 element) internal view returns (uint256) {\r\n        if (array.length == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 low = 0;\r\n        uint256 high = array.length;\r\n\r\n        while (low \u003C high) {\r\n            uint256 mid = Math.average(low, high);\r\n\r\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\r\n            // because Math.average rounds down (it does integer division with truncation).\r\n            if (array[mid] \u003E element) {\r\n                high = mid;\r\n            } else {\r\n                low = mid \u002B 1;\r\n            }\r\n        }\r\n\r\n        // At this point \u0060low\u0060 is the exclusive upper bound. We will return the inclusive upper bound.\r\n        if (low \u003E 0 \u0026\u0026 array[low - 1] == element) {\r\n            return low - 1;\r\n        } else {\r\n            return low;\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/libs/utils/ReentrancyGuard.sol\r\n\r\npragma solidity 0.5.15;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from \u0060ReentrancyGuard\u0060 will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single \u0060nonReentrant\u0060 guard, functions marked as\r\n * \u0060nonReentrant\u0060 may not call one another. This can be worked around by making\r\n * those functions \u0060private\u0060, and then adding \u0060external\u0060 \u0060nonReentrant\u0060 entry\r\n * points to them.\r\n */\r\ncontract ReentrancyGuard {\r\n    // counter to allow mutex lock with only one SSTORE operation\r\n    uint256 private _guardCounter;\r\n\r\n    constructor () internal {\r\n        // The counter starts at one to prevent changing it from zero to a non-zero\r\n        // value, which is a more expensive operation.\r\n        _guardCounter = 1;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a \u0060nonReentrant\u0060 function from another \u0060nonReentrant\u0060\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the \u0060nonReentrant\u0060 function external, and make it call a\r\n     * \u0060private\u0060 function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _guardCounter \u002B= 1;\r\n        uint256 localCounter = _guardCounter;\r\n        _;\r\n        require(localCounter == _guardCounter, \u0022ReentrancyGuard: reentrant call\u0022);\r\n    }\r\n}\r\n\r\n// File: contracts/libs/ownership/Ownable.sol\r\n\r\npragma solidity 0.5.15;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * \u0060onlyOwner\u0060, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \u0022Ownable: caller is not the owner\u0022);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * \u0060onlyOwner\u0060 functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (\u0060newOwner\u0060).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (\u0060newOwner\u0060).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \u0022Ownable: new owner is the zero address\u0022);\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/libs/lifecycle/Pausable.sol\r\n\r\npragma solidity 0.5.15;\r\n\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers \u0060whenNotPaused\u0060 and \u0060whenPaused\u0060, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\ncontract Pausable is Ownable {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by a pauser (\u0060account\u0060).\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by a pauser (\u0060account\u0060).\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state. Assigns the Pauser role\r\n     * to the deployer.\r\n     */\r\n    constructor () internal {\r\n        _paused = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!_paused, \u0022Pausable: paused\u0022);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(_paused, \u0022Pausable: not paused\u0022);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Called by a owner to pause, triggers stopped state.\r\n     */\r\n    function pause() public onlyOwner whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Called by a owner to unpause, returns to normal state.\r\n     */\r\n    function unpause() public onlyOwner whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(msg.sender);\r\n    }\r\n}\r\n\r\n// File: contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by \u0060account\u0060.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves \u0060amount\u0060 tokens from the caller\u0027s account to \u0060recipient\u0060.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that \u0060spender\u0060 will be\r\n     * allowed to spend on behalf of \u0060owner\u0060 through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets \u0060amount\u0060 as the allowance of \u0060spender\u0060 over the caller\u0027s tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves \u0060amount\u0060 tokens from \u0060sender\u0060 to \u0060recipient\u0060 using the\r\n     * allowance mechanism. \u0060amount\u0060 is then deducted from the caller\u0027s\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when \u0060value\u0060 tokens are moved from one account (\u0060from\u0060) to\r\n     * another (\u0060to\u0060).\r\n     *\r\n     * Note that \u0060value\u0060 may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a \u0060spender\u0060 for an \u0060owner\u0060 is set by\r\n     * a call to {approve}. \u0060value\u0060 is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/StakingContract.sol\r\n\r\npragma solidity 0.5.15;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract StakingContract is Pausable, ReentrancyGuard {\r\n\r\n    using SafeMath for uint256;\r\n    using Math for uint256;\r\n    using Address for address;\r\n    using Arrays for uint256[];\r\n\r\n    enum Status {Setup, Running, RewardsDisabled}\r\n\r\n    // EVENTS\r\n    event StakeDeposited(address indexed account, uint256 amount);\r\n    event WithdrawInitiated(address indexed account, uint256 amount);\r\n    event WithdrawExecuted(address indexed account, uint256 amount, uint256 reward);\r\n\r\n    // STRUCT DECLARATIONS\r\n    struct StakeDeposit {\r\n        uint256 amount;\r\n        uint256 startDate;\r\n        uint256 endDate;\r\n        uint256 startCheckpointIndex;\r\n        uint256 endCheckpointIndex;\r\n        bool exists;\r\n    }\r\n\r\n    struct SetupState {\r\n        bool staking;\r\n        bool rewards;\r\n    }\r\n\r\n    struct StakingLimitConfig {\r\n        uint256 maxAmount;\r\n        uint256 initialAmount;\r\n        uint256 daysInterval;\r\n        uint256 maxIntervals;\r\n        uint256 unstakingPeriod;\r\n    }\r\n\r\n    struct BaseRewardCheckpoint {\r\n        uint256 baseRewardIndex;\r\n        uint256 startTimestamp;\r\n        uint256 endTimestamp;\r\n        uint256 fromBlock;\r\n    }\r\n\r\n    struct BaseReward {\r\n        uint256 anualRewardRate;\r\n        uint256 lowerBound;\r\n        uint256 upperBound;\r\n    }\r\n\r\n    struct RewardConfig {\r\n        BaseReward[] baseRewards;\r\n        uint256[] upperBounds;\r\n        uint256 multiplier; // percent of the base reward applicable\r\n    }\r\n\r\n    // CONTRACT STATE VARIABLES\r\n    IERC20 public token;\r\n    Status public currentStatus;\r\n\r\n    SetupState public setupState;\r\n    StakingLimitConfig public stakingLimitConfig;\r\n    RewardConfig public rewardConfig;\r\n\r\n    address public rewardsAddress;\r\n    uint256 public launchTimestamp;\r\n    uint256 public currentTotalStake;\r\n\r\n    mapping(address =\u003E StakeDeposit) private _stakeDeposits;\r\n    BaseRewardCheckpoint[] private _baseRewardHistory;\r\n\r\n    // MODIFIERS\r\n    modifier guardMaxStakingLimit(uint256 amount)\r\n    {\r\n        uint256 resultedStakedAmount = currentTotalStake.add(amount);\r\n        uint256 currentStakingLimit = _computeCurrentStakingLimit();\r\n        require(resultedStakedAmount \u003C= currentStakingLimit, \u0022[Deposit] Your deposit would exceed the current staking limit\u0022);\r\n        _;\r\n    }\r\n\r\n    modifier guardForPrematureWithdrawal()\r\n    {\r\n        uint256 intervalsPassed = _getIntervalsPassed();\r\n        require(intervalsPassed \u003E= stakingLimitConfig.maxIntervals, \u0022[Withdraw] Not enough days passed\u0022);\r\n        _;\r\n    }\r\n\r\n    modifier onlyContract(address account)\r\n    {\r\n        require(account.isContract(), \u0022[Validation] The address does not contain a contract\u0022);\r\n        _;\r\n    }\r\n\r\n    modifier onlyDuringSetup()\r\n    {\r\n        require(currentStatus == Status.Setup, \u0022[Lifecycle] Setup is already done\u0022);\r\n        _;\r\n    }\r\n\r\n    modifier onlyAfterSetup()\r\n    {\r\n        require(currentStatus != Status.Setup, \u0022[Lifecycle] Setup is not done\u0022);\r\n        _;\r\n    }\r\n\r\n    // PUBLIC FUNCTIONS\r\n    constructor(address _token, address _rewardsAddress)\r\n    onlyContract(_token)\r\n    public\r\n    {\r\n        require(_rewardsAddress != address(0), \u0022[Validation] _rewardsAddress is the zero address\u0022);\r\n\r\n        token = IERC20(_token);\r\n        rewardsAddress = _rewardsAddress;\r\n        launchTimestamp = now;\r\n        currentStatus = Status.Setup;\r\n    }\r\n\r\n    function deposit(uint256 amount)\r\n    public\r\n    nonReentrant\r\n    onlyAfterSetup\r\n    whenNotPaused\r\n    guardMaxStakingLimit(amount)\r\n    {\r\n        require(amount \u003E 0, \u0022[Validation] The stake deposit has to be larger than 0\u0022);\r\n        require(!_stakeDeposits[msg.sender].exists, \u0022[Deposit] You already have a stake\u0022);\r\n\r\n        StakeDeposit storage stakeDeposit = _stakeDeposits[msg.sender];\r\n        stakeDeposit.amount = stakeDeposit.amount.add(amount);\r\n        stakeDeposit.startDate = now;\r\n        stakeDeposit.startCheckpointIndex = _baseRewardHistory.length - 1;\r\n        stakeDeposit.exists = true;\r\n\r\n        currentTotalStake = currentTotalStake.add(amount);\r\n        _updateBaseRewardHistory();\r\n\r\n        // Transfer the Tokens to this contract\r\n        require(token.transferFrom(msg.sender, address(this), amount), \u0022[Deposit] Something went wrong during the token transfer\u0022);\r\n        emit StakeDeposited(msg.sender, amount);\r\n    }\r\n\r\n    function initiateWithdrawal()\r\n    external\r\n    whenNotPaused\r\n    onlyAfterSetup\r\n    guardForPrematureWithdrawal\r\n    {\r\n        StakeDeposit storage stakeDeposit = _stakeDeposits[msg.sender];\r\n        require(stakeDeposit.exists \u0026\u0026 stakeDeposit.amount != 0, \u0022[Initiate Withdrawal] There is no stake deposit for this account\u0022);\r\n        require(stakeDeposit.endDate == 0, \u0022[Initiate Withdrawal] You already initiated the withdrawal\u0022);\r\n\r\n        stakeDeposit.endDate = now;\r\n        stakeDeposit.endCheckpointIndex = _baseRewardHistory.length - 1;\r\n        emit WithdrawInitiated(msg.sender, stakeDeposit.amount);\r\n    }\r\n\r\n    function executeWithdrawal()\r\n    external\r\n    nonReentrant\r\n    whenNotPaused\r\n    onlyAfterSetup\r\n    {\r\n        StakeDeposit storage stakeDeposit = _stakeDeposits[msg.sender];\r\n        require(stakeDeposit.exists \u0026\u0026 stakeDeposit.amount != 0, \u0022[Withdraw] There is no stake deposit for this account\u0022);\r\n        require(stakeDeposit.endDate != 0, \u0022[Withdraw] Withdraw is not initialized\u0022);\r\n        // validate enough days have passed from initiating the withdrawal\r\n        uint256 daysPassed = (now - stakeDeposit.endDate) / 1 days;\r\n        require(stakingLimitConfig.unstakingPeriod \u003C= daysPassed, \u0022[Withdraw] The unstaking period did not pass\u0022);\r\n\r\n        uint256 amount = stakeDeposit.amount;\r\n        uint256 reward = _computeReward(stakeDeposit);\r\n\r\n        stakeDeposit.amount = 0;\r\n\r\n        currentTotalStake = currentTotalStake.sub(amount);\r\n        _updateBaseRewardHistory();\r\n\r\n        require(token.transfer(msg.sender, amount), \u0022[Withdraw] Something went wrong while transferring your initial deposit\u0022);\r\n        require(token.transferFrom(rewardsAddress, msg.sender, reward), \u0022[Withdraw] Something went wrong while transferring your reward\u0022);\r\n\r\n        emit WithdrawExecuted(msg.sender, amount, reward);\r\n    }\r\n\r\n    function toggleRewards(bool enabled)\r\n    external\r\n    onlyOwner\r\n    onlyAfterSetup\r\n    {\r\n        Status newStatus = enabled ? Status.Running : Status.RewardsDisabled;\r\n        require(currentStatus != newStatus, \u0022[ToggleRewards] This status is already set\u0022);\r\n\r\n        uint256 index;\r\n\r\n        if (newStatus == Status.RewardsDisabled) {\r\n            index = rewardConfig.baseRewards.length - 1;\r\n        }\r\n\r\n        if (newStatus == Status.Running) {\r\n            index = _computeCurrentBaseReward();\r\n        }\r\n\r\n        _insertNewCheckpoint(index);\r\n\r\n        currentStatus = newStatus;\r\n    }\r\n\r\n    // VIEW FUNCTIONS FOR HELPING THE USER AND CLIENT INTERFACE\r\n    function currentStakingLimit()\r\n    public\r\n    onlyAfterSetup\r\n    view\r\n    returns (uint256)\r\n    {\r\n        return _computeCurrentStakingLimit();\r\n    }\r\n\r\n    function currentReward(address account)\r\n    external\r\n    onlyAfterSetup\r\n    view\r\n    returns (uint256 initialDeposit, uint256 reward)\r\n    {\r\n        require(_stakeDeposits[account].exists \u0026\u0026 _stakeDeposits[account].amount != 0, \u0022[Validation] This account doesn\u0027t have a stake deposit\u0022);\r\n\r\n        StakeDeposit memory stakeDeposit = _stakeDeposits[account];\r\n        stakeDeposit.endDate = now;\r\n\r\n        return (stakeDeposit.amount, _computeReward(stakeDeposit));\r\n    }\r\n\r\n    function getStakeDeposit()\r\n    external\r\n    onlyAfterSetup\r\n    view\r\n    returns (uint256 amount, uint256 startDate, uint256 endDate, uint256 startCheckpointIndex, uint256 endCheckpointIndex)\r\n    {\r\n        require(_stakeDeposits[msg.sender].exists, \u0022[Validation] This account doesn\u0027t have a stake deposit\u0022);\r\n        StakeDeposit memory s = _stakeDeposits[msg.sender];\r\n\r\n        return (s.amount, s.startDate, s.endDate, s.startCheckpointIndex, s.endCheckpointIndex);\r\n    }\r\n\r\n    function baseRewardsLength()\r\n    external\r\n    onlyAfterSetup\r\n    view\r\n    returns (uint256)\r\n    {\r\n        return rewardConfig.baseRewards.length;\r\n    }\r\n\r\n    function baseReward(uint256 index)\r\n    external\r\n    onlyAfterSetup\r\n    view\r\n    returns (uint256, uint256, uint256)\r\n    {\r\n        BaseReward memory br = rewardConfig.baseRewards[index];\r\n\r\n        return (br.anualRewardRate, br.lowerBound, br.upperBound);\r\n    }\r\n\r\n    function baseRewardHistoryLength()\r\n    external\r\n    view\r\n    returns (uint256)\r\n    {\r\n        return _baseRewardHistory.length;\r\n    }\r\n\r\n    function baseRewardHistory(uint256 index)\r\n    external\r\n    onlyAfterSetup\r\n    view\r\n    returns (uint256, uint256, uint256, uint256)\r\n    {\r\n        BaseRewardCheckpoint memory c = _baseRewardHistory[index];\r\n\r\n        return (c.baseRewardIndex, c.startTimestamp, c.endTimestamp, c.fromBlock);\r\n    }\r\n\r\n    // OWNER SETUP\r\n    function setupStakingLimit(uint256 maxAmount, uint256 initialAmount, uint256 daysInterval, uint256 unstakingPeriod)\r\n    external\r\n    onlyOwner\r\n    whenPaused\r\n    onlyDuringSetup\r\n    {\r\n        require(maxAmount \u003E 0 \u0026\u0026 initialAmount \u003E 0 \u0026\u0026 daysInterval \u003E 0 \u0026\u0026 unstakingPeriod \u003E= 0, \u0022[Validation] Some parameters are 0\u0022);\r\n        require(maxAmount.mod(initialAmount) == 0, \u0022[Validation] maxAmount should be a multiple of initialAmount\u0022);\r\n\r\n        uint256 maxIntervals = maxAmount.div(initialAmount);\r\n        // set the staking limits\r\n        stakingLimitConfig.maxAmount = maxAmount;\r\n        stakingLimitConfig.initialAmount = initialAmount;\r\n        stakingLimitConfig.daysInterval = daysInterval;\r\n        stakingLimitConfig.unstakingPeriod = unstakingPeriod;\r\n        stakingLimitConfig.maxIntervals = maxIntervals;\r\n\r\n        setupState.staking = true;\r\n        _updateSetupState();\r\n    }\r\n\r\n    function setupRewards(\r\n        uint256 multiplier,\r\n        uint256[] calldata anualRewardRates,\r\n        uint256[] calldata lowerBounds,\r\n        uint256[] calldata upperBounds\r\n    )\r\n    external\r\n    onlyOwner\r\n    whenPaused\r\n    onlyDuringSetup\r\n    {\r\n        _validateSetupRewardsParameters(multiplier, anualRewardRates, lowerBounds, upperBounds);\r\n\r\n        // Setup rewards\r\n        rewardConfig.multiplier = multiplier;\r\n\r\n        for (uint256 i = 0; i \u003C anualRewardRates.length; i\u002B\u002B) {\r\n            _addBaseReward(anualRewardRates[i], lowerBounds[i], upperBounds[i]);\r\n        }\r\n\r\n        uint256 highestUpperBound = upperBounds[upperBounds.length - 1];\r\n\r\n        // Add the zero annual reward rate\r\n        _addBaseReward(0, highestUpperBound, highestUpperBound \u002B 10);\r\n\r\n        // initiate baseRewardHistory with the first one which should start from 0\r\n        _initBaseRewardHistory();\r\n\r\n        setupState.rewards = true;\r\n        _updateSetupState();\r\n    }\r\n\r\n    // INTERNAL\r\n    function _updateSetupState()\r\n    private\r\n    {\r\n        if (!setupState.rewards || !setupState.staking) {\r\n            return;\r\n        }\r\n\r\n        currentStatus = Status.Running;\r\n    }\r\n\r\n    function _computeCurrentStakingLimit()\r\n    private\r\n    view\r\n    returns (uint256)\r\n    {\r\n        uint256 intervalsPassed = _getIntervalsPassed();\r\n        uint256 baseStakingLimit = stakingLimitConfig.initialAmount;\r\n\r\n        uint256 intervals = intervalsPassed.min(stakingLimitConfig.maxIntervals - 1);\r\n\r\n        // initialLimit * ((now - launchMoment) / interval)\r\n        return baseStakingLimit.add(baseStakingLimit.mul(intervals));\r\n    }\r\n\r\n    function _getIntervalsPassed()\r\n    private\r\n    view\r\n    returns (uint256)\r\n    {\r\n        uint256 daysPassed = (now - launchTimestamp) / 1 days;\r\n        return daysPassed / stakingLimitConfig.daysInterval;\r\n    }\r\n\r\n    function _computeReward(StakeDeposit memory stakeDeposit)\r\n    private\r\n    view\r\n    returns (uint256)\r\n    {\r\n        uint256 scale = 10 ** 18;\r\n        (uint256 weightedSum, uint256 stakingPeriod) = _computeRewardRatesWeightedSum(stakeDeposit);\r\n\r\n        if (stakingPeriod == 0) {\r\n            return 0;\r\n        }\r\n\r\n        // scaling weightedSum and stakingPeriod because the weightedSum is in the thousands magnitude\r\n        // and we risk losing detail while rounding\r\n        weightedSum = weightedSum.mul(scale);\r\n\r\n        uint256 weightedAverage = weightedSum.div(stakingPeriod);\r\n\r\n        // rewardConfig.multiplier is a percentage expressed in 1/10 (a tenth) of a percent hence we divide by 1000\r\n        uint256 accumulator = rewardConfig.multiplier.mul(weightedSum).div(1000);\r\n        uint256 effectiveRate = weightedAverage.add(accumulator);\r\n        uint256 denominator = scale.mul(36500);\r\n\r\n        return stakeDeposit.amount.mul(effectiveRate).mul(stakingPeriod).div(denominator);\r\n    }\r\n\r\n    function _computeRewardRatesWeightedSum(StakeDeposit memory stakeDeposit)\r\n    private\r\n    view\r\n    returns (uint256, uint256)\r\n    {\r\n        uint256 stakingPeriod = (stakeDeposit.endDate - stakeDeposit.startDate) / 1 days;\r\n        uint256 weight;\r\n        uint256 rate;\r\n\r\n        // The contract never left the first checkpoint\r\n        if (stakeDeposit.startCheckpointIndex == stakeDeposit.endCheckpointIndex) {\r\n            rate = _baseRewardFromHistoryIndex(stakeDeposit.startCheckpointIndex).anualRewardRate;\r\n\r\n            return (rate.mul(stakingPeriod), stakingPeriod);\r\n        }\r\n\r\n        // Computing the first segment base reward\r\n        // User could deposit in the middle of the segment so we need to get the segment from which the user deposited\r\n        // to the moment the base reward changes\r\n        weight = (_baseRewardHistory[stakeDeposit.startCheckpointIndex].endTimestamp - stakeDeposit.startDate) / 1 days;\r\n        rate = _baseRewardFromHistoryIndex(stakeDeposit.startCheckpointIndex).anualRewardRate;\r\n        uint256 weightedSum = rate.mul(weight);\r\n\r\n        // Starting from the second checkpoint because the first one is already computed\r\n        for (uint256 i = stakeDeposit.startCheckpointIndex \u002B 1; i \u003C stakeDeposit.endCheckpointIndex; i\u002B\u002B) {\r\n            weight = (_baseRewardHistory[i].endTimestamp - _baseRewardHistory[i].startTimestamp) / 1 days;\r\n            rate = _baseRewardFromHistoryIndex(i).anualRewardRate;\r\n            weightedSum = weightedSum.add(rate.mul(weight));\r\n        }\r\n\r\n        // Computing the base reward for the last segment\r\n        // days between start timestamp of the last checkpoint to the moment he initialized the withdrawal\r\n        weight = (stakeDeposit.endDate - _baseRewardHistory[stakeDeposit.endCheckpointIndex].startTimestamp) / 1 days;\r\n        rate = _baseRewardFromHistoryIndex(stakeDeposit.endCheckpointIndex).anualRewardRate;\r\n        weightedSum = weightedSum.add(weight.mul(rate));\r\n\r\n        return (weightedSum, stakingPeriod);\r\n    }\r\n\r\n    function _addBaseReward(uint256 anualRewardRate, uint256 lowerBound, uint256 upperBound)\r\n    private\r\n    {\r\n        rewardConfig.baseRewards.push(BaseReward(anualRewardRate, lowerBound, upperBound));\r\n        rewardConfig.upperBounds.push(upperBound);\r\n    }\r\n\r\n    function _initBaseRewardHistory()\r\n    private\r\n    {\r\n        require(_baseRewardHistory.length == 0, \u0022[Logical] Base reward history has already been initialized\u0022);\r\n\r\n        _baseRewardHistory.push(BaseRewardCheckpoint(0, now, 0, block.number));\r\n    }\r\n\r\n    function _updateBaseRewardHistory()\r\n    private\r\n    {\r\n        if (currentStatus == Status.RewardsDisabled) {\r\n            return;\r\n        }\r\n\r\n        BaseReward memory currentBaseReward = _currentBaseReward();\r\n\r\n        // Do nothing if currentTotalStake is in the current base reward bounds\r\n        if (currentBaseReward.lowerBound \u003C= currentTotalStake \u0026\u0026 currentTotalStake \u003C= currentBaseReward.upperBound) {\r\n            return;\r\n        }\r\n\r\n        uint256 newIndex = _computeCurrentBaseReward();\r\n        _insertNewCheckpoint(newIndex);\r\n    }\r\n\r\n    function _insertNewCheckpoint(uint256 newIndex)\r\n    private\r\n    {\r\n        BaseRewardCheckpoint storage oldCheckPoint = _lastBaseRewardCheckpoint();\r\n\r\n        if (oldCheckPoint.fromBlock \u003C block.number) {\r\n            oldCheckPoint.endTimestamp = now;\r\n            _baseRewardHistory.push(BaseRewardCheckpoint(newIndex, now, 0, block.number));\r\n        } else {\r\n            oldCheckPoint.baseRewardIndex = newIndex;\r\n        }\r\n    }\r\n\r\n    function _currentBaseReward()\r\n    private\r\n    view\r\n    returns (BaseReward memory)\r\n    {\r\n        // search for the current base reward from current total staked amount\r\n        uint256 currentBaseRewardIndex = _lastBaseRewardCheckpoint().baseRewardIndex;\r\n\r\n        return rewardConfig.baseRewards[currentBaseRewardIndex];\r\n    }\r\n\r\n    function _baseRewardFromHistoryIndex(uint256 index)\r\n    private\r\n    view\r\n    returns (BaseReward memory)\r\n    {\r\n        return rewardConfig.baseRewards[_baseRewardHistory[index].baseRewardIndex];\r\n    }\r\n\r\n    function _lastBaseRewardCheckpoint()\r\n    private\r\n    view\r\n    returns (BaseRewardCheckpoint storage)\r\n    {\r\n        return _baseRewardHistory[_baseRewardHistory.length - 1];\r\n    }\r\n\r\n    function _computeCurrentBaseReward()\r\n    private\r\n    view\r\n    returns (uint256)\r\n    {\r\n        uint256 index = rewardConfig.upperBounds.findUpperBound(currentTotalStake);\r\n\r\n        require(index \u003C rewardConfig.upperBounds.length, \u0022[NotFound] The current total staked is out of bounds\u0022);\r\n\r\n        return index;\r\n    }\r\n\r\n    function _validateSetupRewardsParameters\r\n    (\r\n        uint256 multiplier,\r\n        uint256[] memory anualRewardRates,\r\n        uint256[] memory lowerBounds,\r\n        uint256[] memory upperBounds\r\n    )\r\n    private\r\n    pure\r\n    {\r\n        require(\r\n            anualRewardRates.length \u003E 0 \u0026\u0026 lowerBounds.length \u003E 0 \u0026\u0026 upperBounds.length \u003E 0,\r\n            \u0022[Validation] All parameters must have at least one element\u0022\r\n        );\r\n        require(\r\n            anualRewardRates.length == lowerBounds.length \u0026\u0026 lowerBounds.length == upperBounds.length,\r\n            \u0022[Validation] All parameters must have the same number of elements\u0022\r\n        );\r\n        require(lowerBounds[0] == 0, \u0022[Validation] First lower bound should be 0\u0022);\r\n        require(\r\n            (multiplier \u003C 100) \u0026\u0026 (uint256(100).mod(multiplier) == 0),\r\n            \u0022[Validation] Multiplier should be smaller than 100 and divide it equally\u0022\r\n        );\r\n    }\r\n}","ABI":"[{\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_token\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_rewardsAddress\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022constructor\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022previousOwner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022OwnershipTransferred\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022Paused\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022StakeDeposited\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022Unpaused\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022reward\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022WithdrawExecuted\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022WithdrawInitiated\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022index\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022baseReward\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022index\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022baseRewardHistory\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022baseRewardHistoryLength\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022baseRewardsLength\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022currentReward\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022initialDeposit\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022reward\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022currentStakingLimit\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022currentStatus\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022enum StakingContract.Status\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint8\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022currentTotalStake\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022deposit\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022executeWithdrawal\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022getStakeDeposit\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022startDate\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022endDate\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022startCheckpointIndex\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022endCheckpointIndex\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022initiateWithdrawal\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022isOwner\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022launchTimestamp\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022owner\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022pause\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022paused\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022renounceOwnership\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022rewardConfig\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022multiplier\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022rewardsAddress\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022multiplier\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256[]\u0022,\u0022name\u0022:\u0022anualRewardRates\u0022,\u0022type\u0022:\u0022uint256[]\u0022},{\u0022internalType\u0022:\u0022uint256[]\u0022,\u0022name\u0022:\u0022lowerBounds\u0022,\u0022type\u0022:\u0022uint256[]\u0022},{\u0022internalType\u0022:\u0022uint256[]\u0022,\u0022name\u0022:\u0022upperBounds\u0022,\u0022type\u0022:\u0022uint256[]\u0022}],\u0022name\u0022:\u0022setupRewards\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022maxAmount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022initialAmount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022daysInterval\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022unstakingPeriod\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022setupStakingLimit\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022setupState\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022staking\u0022,\u0022type\u0022:\u0022bool\u0022},{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022rewards\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022stakingLimitConfig\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022maxAmount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022initialAmount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022daysInterval\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022maxIntervals\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022unstakingPeriod\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022enabled\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022name\u0022:\u0022toggleRewards\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022token\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022contract IERC20\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022transferOwnership\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022unpause\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022}]","ContractName":"StakingContract","CompilerVersion":"v0.5.15\u002Bcommit.6a57276f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000f9986d445ced31882377b5d6a5f58eaea72288c3000000000000000000000000b1a2ee4dfdadfca7ecff42295768a3e65d930c56","Library":"","SwarmSource":"bzzr://e356c1da018e02172721d0a92bceb5956202c0b037176d883376c9d2a99617b2"}]