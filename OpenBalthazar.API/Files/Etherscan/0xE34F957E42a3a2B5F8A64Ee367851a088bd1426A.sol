[{"SourceCode":"// File: contracts/zeppelin/upgradable/Initializable.sol\r\n\r\npragma solidity \u003E=0.4.24 \u003C0.6.0;\r\n\r\n\r\n/**\r\n * @title Initializable\r\n *\r\n * @dev Helper contract to support initializer functions. To use it, replace\r\n * the constructor with a function that has the \u0060initializer\u0060 modifier.\r\n * WARNING: Unlike constructors, initializer functions must be manually\r\n * invoked. This applies both to deploying an Initializable contract, as well\r\n * as extending an Initializable contract via inheritance.\r\n * WARNING: When used with inheritance, manual care must be taken to not invoke\r\n * a parent initializer twice, or ensure that all initializers are idempotent,\r\n * because this is not dealt with automatically as with constructors.\r\n */\r\ncontract Initializable {\r\n\r\n  /**\r\n   * @dev Indicates that the contract has been initialized.\r\n   */\r\n  bool private initialized;\r\n\r\n  /**\r\n   * @dev Indicates that the contract is in the process of being initialized.\r\n   */\r\n  bool private initializing;\r\n\r\n  /**\r\n   * @dev Modifier to use in the initializer function of a contract.\r\n   */\r\n  modifier initializer() {\r\n    require(initializing || isConstructor() || !initialized, \u0022Contract instance has already been initialized\u0022);\r\n\r\n    bool isTopLevelCall = !initializing;\r\n    if (isTopLevelCall) {\r\n      initializing = true;\r\n      initialized = true;\r\n    }\r\n\r\n    _;\r\n\r\n    if (isTopLevelCall) {\r\n      initializing = false;\r\n    }\r\n  }\r\n\r\n  /// @dev Returns true if and only if the function is running in the constructor\r\n  function isConstructor() private view returns (bool) {\r\n    // extcodesize checks the size of the code stored in an address, and\r\n    // address returns the current address. Since the code is still not\r\n    // deployed when running a constructor, any checks on its code size will\r\n    // yield zero, making it an effective way to detect if a contract is\r\n    // under construction or not.\r\n    uint256 cs;\r\n    assembly { cs := extcodesize(address) }\r\n    return cs == 0;\r\n  }\r\n\r\n  // Reserved storage space to allow for layout changes in the future.\r\n  uint256[50] private ______gap;\r\n}\r\n\r\n// File: contracts/zeppelin/upgradable/utils/ReentrancyGuard.sol\r\n\r\npragma solidity ^0.5.2;\r\n\r\n\r\n/**\r\n * @title Helps contracts guard against reentrancy attacks.\r\n * @author Remco Bloemen \u003Cremco@2\u03C0.com\u003E, Eenae \u003Calexey@mixbytes.io\u003E\r\n * @dev If you mark a function \u0060nonReentrant\u0060, you should also\r\n * mark it \u0060external\u0060.\r\n */\r\ncontract ReentrancyGuard is Initializable {\r\n    /// @dev counter to allow mutex lock with only one SSTORE operation\r\n    uint256 private _guardCounter;\r\n\r\n    function initialize() public initializer {\r\n        // The counter starts at one to prevent changing it from zero to a non-zero\r\n        // value, which is a more expensive operation.\r\n        _guardCounter = 1;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a \u0060nonReentrant\u0060 function from another \u0060nonReentrant\u0060\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the \u0060nonReentrant\u0060 function external, and make it call a\r\n     * \u0060private\u0060 function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _guardCounter \u002B= 1;\r\n        uint256 localCounter = _guardCounter;\r\n        _;\r\n        require(localCounter == _guardCounter, \u0022ReentrancyGuard: no reentrant allowed\u0022);\r\n    }\r\n}\r\n\r\n// File: contracts/zeppelin/GSN/Context.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: contracts/zeppelin/access/Roles.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address =\u003E bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev Give an account access to this role.\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(!has(role, account), \u0022Roles: account already has role\u0022);\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Remove an account\u0027s access to this role.\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(has(role, account), \u0022Roles: account does not have role\u0022);\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Check if an account has this role.\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0), \u0022Roles: account is the zero address\u0022);\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\n// File: contracts/zeppelin/upgradable/access/roles/UpgradablePauserRole.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\ncontract UpgradablePauserRole is Initializable, Context {\r\n    using Roles for Roles.Role;\r\n\r\n    event PauserAdded(address indexed account);\r\n    event PauserRemoved(address indexed account);\r\n\r\n    Roles.Role private _pausers;\r\n\r\n    function initialize(address sender) public initializer {\r\n        if (!isPauser(sender)) {\r\n            _addPauser(sender);\r\n        }\r\n    }\r\n\r\n    modifier onlyPauser() {\r\n        require(isPauser(_msgSender()), \u0022PauserRole: caller does not have the Pauser role\u0022);\r\n        _;\r\n    }\r\n\r\n    function isPauser(address account) public view returns (bool) {\r\n        return _pausers.has(account);\r\n    }\r\n\r\n    function addPauser(address account) public onlyPauser {\r\n        _addPauser(account);\r\n    }\r\n\r\n    function renouncePauser() public {\r\n        _removePauser(_msgSender());\r\n    }\r\n\r\n    function _addPauser(address account) internal {\r\n        _pausers.add(account);\r\n        emit PauserAdded(account);\r\n    }\r\n\r\n    function _removePauser(address account) internal {\r\n        _pausers.remove(account);\r\n        emit PauserRemoved(account);\r\n    }\r\n}\r\n\r\n// File: contracts/zeppelin/upgradable/lifecycle/UpgradablePausable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers \u0060whenNotPaused\u0060 and \u0060whenPaused\u0060, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\ncontract UpgradablePausable is Initializable, Context, UpgradablePauserRole {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by a pauser (\u0060account\u0060).\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by a pauser (\u0060account\u0060).\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state. Assigns the Pauser role\r\n     * to the deployer.\r\n     */\r\n    function initialize(address sender) public initializer {\r\n        UpgradablePauserRole.initialize(sender);\r\n\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!_paused, \u0022Pausable: paused\u0022);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(_paused, \u0022Pausable: not paused\u0022);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Called by a pauser to pause, triggers stopped state.\r\n     */\r\n    function pause() public onlyPauser whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Called by a pauser to unpause, returns to normal state.\r\n     */\r\n    function unpause() public onlyPauser whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\n// File: contracts/zeppelin/upgradable/ownership/UpgradableOwnable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * \u0060onlyOwner\u0060, which can be aplied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract UpgradableOwnable is Initializable, Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    function initialize(address sender) public initializer {\r\n        _owner = sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \u0022Ownable: caller is not the owner\u0022);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * \u0060onlyOwner\u0060 functions anymore. Can only be called by the current owner.\r\n     *\r\n     * \u003E Note: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (\u0060newOwner\u0060).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (\u0060newOwner\u0060).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \u0022Ownable: new owner is the zero address\u0022);\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/zeppelin/introspection/IERC1820Registry.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the global ERC1820 Registry, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-1820[EIP]. Accounts may register\r\n * implementers for interfaces in this registry, as well as query support.\r\n *\r\n * Implementers may be shared by multiple accounts, and can also implement more\r\n * than a single interface for each account. Contracts can implement interfaces\r\n * for themselves, but externally-owned accounts (EOA) must delegate this to a\r\n * contract.\r\n *\r\n * {IERC165} interfaces can also be queried via the registry.\r\n *\r\n * For an in-depth explanation and source code analysis, see the EIP text.\r\n */\r\ninterface IERC1820Registry {\r\n    /**\r\n     * @dev Sets \u0060newManager\u0060 as the manager for \u0060account\u0060. A manager of an\r\n     * account is able to set interface implementers for it.\r\n     *\r\n     * By default, each account is its own manager. Passing a value of \u00600x0\u0060 in\r\n     * \u0060newManager\u0060 will reset the manager to this initial state.\r\n     *\r\n     * Emits a {ManagerChanged} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must be the current manager for \u0060account\u0060.\r\n     */\r\n    function setManager(address account, address newManager) external;\r\n\r\n    /**\r\n     * @dev Returns the manager for \u0060account\u0060.\r\n     *\r\n     * See {setManager}.\r\n     */\r\n    function getManager(address account) external view returns (address);\r\n\r\n    /**\r\n     * @dev Sets the \u0060implementer\u0060 contract as \u0060account\u0060\u0027s implementer for\r\n     * \u0060interfaceHash\u0060.\r\n     *\r\n     * \u0060account\u0060 being the zero address is an alias for the caller\u0027s address.\r\n     * The zero address can also be used in \u0060implementer\u0060 to remove an old one.\r\n     *\r\n     * See {interfaceHash} to learn how these are created.\r\n     *\r\n     * Emits an {InterfaceImplementerSet} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the caller must be the current manager for \u0060account\u0060.\r\n     * - \u0060interfaceHash\u0060 must not be an {IERC165} interface id (i.e. it must not\r\n     * end in 28 zeroes).\r\n     * - \u0060implementer\u0060 must implement {IERC1820Implementer} and return true when\r\n     * queried for support, unless \u0060implementer\u0060 is the caller. See\r\n     * {IERC1820Implementer-canImplementInterfaceForAddress}.\r\n     */\r\n    function setInterfaceImplementer(address account, bytes32 interfaceHash, address implementer) external;\r\n\r\n    /**\r\n     * @dev Returns the implementer of \u0060interfaceHash\u0060 for \u0060account\u0060. If no such\r\n     * implementer is registered, returns the zero address.\r\n     *\r\n     * If \u0060interfaceHash\u0060 is an {IERC165} interface id (i.e. it ends with 28\r\n     * zeroes), \u0060account\u0060 will be queried for support of it.\r\n     *\r\n     * \u0060account\u0060 being the zero address is an alias for the caller\u0027s address.\r\n     */\r\n    function getInterfaceImplementer(address account, bytes32 interfaceHash) external view returns (address);\r\n\r\n    /**\r\n     * @dev Returns the interface hash for an \u0060interfaceName\u0060, as defined in the\r\n     * corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-1820#interface-name[section of the EIP].\r\n     */\r\n    function interfaceHash(string calldata interfaceName) external pure returns (bytes32);\r\n\r\n    /**\r\n     *  @notice Updates the cache with whether the contract implements an ERC165 interface or not.\r\n     *  @param account Address of the contract for which to update the cache.\r\n     *  @param interfaceId ERC165 interface for which to update the cache.\r\n     */\r\n    function updateERC165Cache(address account, bytes4 interfaceId) external;\r\n\r\n    /**\r\n     *  @notice Checks whether a contract implements an ERC165 interface or not.\r\n     *  If the result is not cached a direct lookup on the contract address is performed.\r\n     *  If the result is not cached or the cached value is out-of-date, the cache MUST be updated manually by calling\r\n     *  {updateERC165Cache} with the contract address.\r\n     *  @param account Address of the contract to check.\r\n     *  @param interfaceId ERC165 interface to check.\r\n     *  @return True if \u0060account\u0060 implements \u0060interfaceId\u0060, false otherwise.\r\n     */\r\n    function implementsERC165Interface(address account, bytes4 interfaceId) external view returns (bool);\r\n\r\n    /**\r\n     *  @notice Checks whether a contract implements an ERC165 interface or not without using nor updating the cache.\r\n     *  @param account Address of the contract to check.\r\n     *  @param interfaceId ERC165 interface to check.\r\n     *  @return True if \u0060account\u0060 implements \u0060interfaceId\u0060, false otherwise.\r\n     */\r\n    function implementsERC165InterfaceNoCache(address account, bytes4 interfaceId) external view returns (bool);\r\n\r\n    event InterfaceImplementerSet(address indexed account, bytes32 indexed interfaceHash, address indexed implementer);\r\n\r\n    event ManagerChanged(address indexed account, address indexed newManager);\r\n}\r\n\r\n// File: contracts/zeppelin/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by \u0060account\u0060.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves \u0060amount\u0060 tokens from the caller\u0027s account to \u0060recipient\u0060.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that \u0060spender\u0060 will be\r\n     * allowed to spend on behalf of \u0060owner\u0060 through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets \u0060amount\u0060 as the allowance of \u0060spender\u0060 over the caller\u0027s tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves \u0060amount\u0060 tokens from \u0060sender\u0060 to \u0060recipient\u0060 using the\r\n     * allowance mechanism. \u0060amount\u0060 is then deducted from the caller\u0027s\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when \u0060value\u0060 tokens are moved from one account (\u0060from\u0060) to\r\n     * another (\u0060to\u0060).\r\n     *\r\n     * Note that \u0060value\u0060 may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a \u0060spender\u0060 for an \u0060owner\u0060 is set by\r\n     * a call to {approve}. \u0060value\u0060 is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/zeppelin/token/ERC20/ERC20Detailed.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @dev Optional functions from the ERC20 standard.\r\n */\r\ncontract ERC20Detailed is IERC20 {\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for \u0060name\u0060, \u0060symbol\u0060, and \u0060decimals\u0060. All three of\r\n     * these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if \u0060decimals\u0060 equals \u00602\u0060, a balance of \u0060505\u0060 tokens should\r\n     * be displayed to a user as \u00605,05\u0060 (\u0060505 / 10 ** 2\u0060).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n}\r\n\r\n// File: contracts/zeppelin/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity\u0027s arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * \u0060SafeMath\u0060 restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it\u0027s recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060\u002B\u0060 operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a \u002B b;\r\n        require(c \u003E= a, \u0022SafeMath: addition overflow\u0022);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060-\u0060 operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \u0022SafeMath: subtraction overflow\u0022);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060-\u0060 operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b \u003C= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060*\u0060 operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\r\n        // benefit is lost if \u0027b\u0027 is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \u0022SafeMath: multiplication overflow\u0022);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060/\u0060 operator. Note: this function uses a\r\n     * \u0060revert\u0060 opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \u0022SafeMath: division by zero\u0022);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060/\u0060 operator. Note: this function uses a\r\n     * \u0060revert\u0060 opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b \u003E 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c \u002B a % b); // There is no case in which this doesn\u0027t hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060%\u0060 operator. This function uses a \u0060revert\u0060\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \u0022SafeMath: modulo by zero\u0022);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060%\u0060 operator. This function uses a \u0060revert\u0060\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/zeppelin/utils/Address.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type,\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if \u0060account\u0060 is a contract.\r\n     *\r\n     * This test is non-exhaustive, and there may be false-negatives: during the\r\n     * execution of a contract\u0027s constructor, its address will be reported as\r\n     * not containing a contract.\r\n     *\r\n     * \u003E It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size \u003E 0;\r\n    }\r\n}\r\n\r\n// File: contracts/zeppelin/token/ERC20/SafeERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a \u0060using SafeERC20 for ERC20;\u0060 statement to your contract,\r\n * which allows you to call the safe operations as \u0060token.safeTransfer(...)\u0060, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // \u0027safeIncreaseAllowance\u0027 and \u0027safeDecreaseAllowance\u0027\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \u0022SafeERC20: approve from non-zero to non-zero allowance\u0022\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \u0022SafeERC20: decreased allowance below zero\u0022);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity\u0027s return data size checking mechanism, since\r\n        // we\u0027re implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \u0022SafeERC20: call to non-contract\u0022);\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \u0022SafeERC20: low-level call failed\u0022);\r\n\r\n        if (returndata.length \u003E 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \u0022SafeERC20: ERC20 operation did not succeed\u0022);\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/IBridge.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\ninterface IBridge {\r\n    function version() external pure returns (string memory);\r\n\r\n    function getCrossingPayment() external view returns(uint);\r\n\r\n    function calcMaxWithdraw() external view returns (uint);\r\n\r\n    /**\r\n     * ERC-20 tokens approve and transferFrom pattern\r\n     * See https://eips.ethereum.org/EIPS/eip-20#transferfrom\r\n     */\r\n    function receiveTokens(address tokenToUse, uint256 amount) external payable returns(bool);\r\n\r\n    /**\r\n     * ERC-677 and ERC-223 implementation for Receiving Tokens Contracts\r\n     * See https://github.com/ethereum/EIPs/issues/677 for details\r\n     * See https://github.com/ethereum/EIPs/issues/223 for details\r\n     */\r\n    function tokenFallback(address from, uint amount, bytes calldata userData) external returns(bool);\r\n\r\n    /**\r\n     * ERC-777 tokensReceived hook allows to send tokens to a contract and notify it in a single transaction\r\n     * See https://eips.ethereum.org/EIPS/eip-777#motivation for details\r\n     */\r\n    function tokensReceived (\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint amount,\r\n        bytes calldata userData,\r\n        bytes calldata operatorData\r\n    ) external;\r\n\r\n    function acceptTransfer(\r\n        address originalTokenAddress,\r\n        address receiver, uint256 amount,\r\n        string calldata symbol,\r\n        bytes32 blockHash,\r\n        bytes32 transactionHash,\r\n        uint32 logIndex\r\n    ) external returns(bool);\r\n\r\n    function transactionWasProcessed(\r\n        bytes32 _blockHash,\r\n        bytes32 _transactionHash,\r\n        address _receiver,\r\n        uint256 _amount,\r\n        uint32 _logIndex\r\n    ) external view returns(bool);\r\n\r\n    event Cross(address indexed _tokenAddress, address indexed _to, uint256 _amount, string _symbol, bytes userData);\r\n    event NewSideToken(address indexed _newSideTokenAddress, address indexed _originalTokenAddress, string _newSymbol);\r\n    event AcceptedCrossTransfer(address indexed _tokenAddress, address indexed _to, uint256 _amount);\r\n    event CrossingPaymentChanged(uint256 _amount);\r\n}\r\n\r\n// File: contracts/zeppelin/token/ERC777/IERC777.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC777Token standard as defined in the EIP.\r\n *\r\n * This contract uses the\r\n * [ERC1820 registry standard](https://eips.ethereum.org/EIPS/eip-1820) to let\r\n * token holders and recipients react to token movements by using setting implementers\r\n * for the associated interfaces in said registry. See \u0060IERC1820Registry\u0060 and\r\n * \u0060ERC1820Implementer\u0060.\r\n */\r\ninterface IERC777 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the smallest part of the token that is not divisible. This\r\n     * means all token operations (creation, movement and destruction) must have\r\n     * amounts that are a multiple of this number.\r\n     *\r\n     * For most token contracts, this value will equal 1.\r\n     */\r\n    function granularity() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by an account (\u0060owner\u0060).\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves \u0060amount\u0060 tokens from the caller\u0027s account to \u0060recipient\u0060.\r\n     *\r\n     * If send or receive hooks are registered for the caller and \u0060recipient\u0060,\r\n     * the corresponding functions will be called with \u0060data\u0060 and empty\r\n     * \u0060operatorData\u0060. See \u0060IERC777Sender\u0060 and \u0060IERC777Recipient\u0060.\r\n     *\r\n     * Emits a \u0060Sent\u0060 event.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - the caller must have at least \u0060amount\u0060 tokens.\r\n     * - \u0060recipient\u0060 cannot be the zero address.\r\n     * - if \u0060recipient\u0060 is a contract, it must implement the \u0060tokensReceived\u0060\r\n     * interface.\r\n     */\r\n    function send(address recipient, uint256 amount, bytes calldata data) external;\r\n\r\n    /**\r\n     * @dev Destroys \u0060amount\u0060 tokens from the caller\u0027s account, reducing the\r\n     * total supply.\r\n     *\r\n     * If a send hook is registered for the caller, the corresponding function\r\n     * will be called with \u0060data\u0060 and empty \u0060operatorData\u0060. See \u0060IERC777Sender\u0060.\r\n     *\r\n     * Emits a \u0060Burned\u0060 event.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - the caller must have at least \u0060amount\u0060 tokens.\r\n     */\r\n    function burn(uint256 amount, bytes calldata data) external;\r\n\r\n    /**\r\n     * @dev Returns true if an account is an operator of \u0060tokenHolder\u0060.\r\n     * Operators can send and burn tokens on behalf of their owners. All\r\n     * accounts are their own operator.\r\n     *\r\n     * See \u0060operatorSend\u0060 and \u0060operatorBurn\u0060.\r\n     */\r\n    function isOperatorFor(address operator, address tokenHolder) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Make an account an operator of the caller.\r\n     *\r\n     * See \u0060isOperatorFor\u0060.\r\n     *\r\n     * Emits an \u0060AuthorizedOperator\u0060 event.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - \u0060operator\u0060 cannot be calling address.\r\n     */\r\n    function authorizeOperator(address operator) external;\r\n\r\n    /**\r\n     * @dev Make an account an operator of the caller.\r\n     *\r\n     * See \u0060isOperatorFor\u0060 and \u0060defaultOperators\u0060.\r\n     *\r\n     * Emits a \u0060RevokedOperator\u0060 event.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - \u0060operator\u0060 cannot be calling address.\r\n     */\r\n    function revokeOperator(address operator) external;\r\n\r\n    /**\r\n     * @dev Returns the list of default operators. These accounts are operators\r\n     * for all token holders, even if \u0060authorizeOperator\u0060 was never called on\r\n     * them.\r\n     *\r\n     * This list is immutable, but individual holders may revoke these via\r\n     * \u0060revokeOperator\u0060, in which case \u0060isOperatorFor\u0060 will return false.\r\n     */\r\n    function defaultOperators() external view returns (address[] memory);\r\n\r\n    /**\r\n     * @dev Moves \u0060amount\u0060 tokens from \u0060sender\u0060 to \u0060recipient\u0060. The caller must\r\n     * be an operator of \u0060sender\u0060.\r\n     *\r\n     * If send or receive hooks are registered for \u0060sender\u0060 and \u0060recipient\u0060,\r\n     * the corresponding functions will be called with \u0060data\u0060 and\r\n     * \u0060operatorData\u0060. See \u0060IERC777Sender\u0060 and \u0060IERC777Recipient\u0060.\r\n     *\r\n     * Emits a \u0060Sent\u0060 event.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - \u0060sender\u0060 cannot be the zero address.\r\n     * - \u0060sender\u0060 must have at least \u0060amount\u0060 tokens.\r\n     * - the caller must be an operator for \u0060sender\u0060.\r\n     * - \u0060recipient\u0060 cannot be the zero address.\r\n     * - if \u0060recipient\u0060 is a contract, it must implement the \u0060tokensReceived\u0060\r\n     * interface.\r\n     */\r\n    function operatorSend(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount,\r\n        bytes calldata data,\r\n        bytes calldata operatorData\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Destoys \u0060amount\u0060 tokens from \u0060account\u0060, reducing the total supply.\r\n     * The caller must be an operator of \u0060account\u0060.\r\n     *\r\n     * If a send hook is registered for \u0060account\u0060, the corresponding function\r\n     * will be called with \u0060data\u0060 and \u0060operatorData\u0060. See \u0060IERC777Sender\u0060.\r\n     *\r\n     * Emits a \u0060Burned\u0060 event.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - \u0060account\u0060 cannot be the zero address.\r\n     * - \u0060account\u0060 must have at least \u0060amount\u0060 tokens.\r\n     * - the caller must be an operator for \u0060account\u0060.\r\n     */\r\n    function operatorBurn(\r\n        address account,\r\n        uint256 amount,\r\n        bytes calldata data,\r\n        bytes calldata operatorData\r\n    ) external;\r\n\r\n    event Sent(\r\n        address indexed operator,\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 amount,\r\n        bytes data,\r\n        bytes operatorData\r\n    );\r\n\r\n    event Minted(address indexed operator, address indexed to, uint256 amount, bytes data, bytes operatorData);\r\n\r\n    event Burned(address indexed operator, address indexed from, uint256 amount, bytes data, bytes operatorData);\r\n\r\n    event AuthorizedOperator(address indexed operator, address indexed tokenHolder);\r\n\r\n    event RevokedOperator(address indexed operator, address indexed tokenHolder);\r\n}\r\n\r\n// File: contracts/zeppelin/token/ERC777/IERC777Recipient.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC777TokensRecipient standard as defined in the EIP.\r\n *\r\n * Accounts can be notified of \u0060IERC777\u0060 tokens being sent to them by having a\r\n * contract implement this interface (contract holders can be their own\r\n * implementer) and registering it on the\r\n * [ERC1820 global registry](https://eips.ethereum.org/EIPS/eip-1820).\r\n *\r\n * See \u0060IERC1820Registry\u0060 and \u0060ERC1820Implementer\u0060.\r\n */\r\ninterface IERC777Recipient {\r\n    /**\r\n     * @dev Called by an \u0060IERC777\u0060 token contract whenever tokens are being\r\n     * moved or created into a registered account (\u0060to\u0060). The type of operation\r\n     * is conveyed by \u0060from\u0060 being the zero address or not.\r\n     *\r\n     * This call occurs _after_ the token contract\u0027s state is updated, so\r\n     * \u0060IERC777.balanceOf\u0060, etc., can be used to query the post-operation state.\r\n     *\r\n     * This function may revert to prevent the operation from being executed.\r\n     */\r\n    function tokensReceived(\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint amount,\r\n        bytes calldata userData,\r\n        bytes calldata operatorData\r\n    ) external;\r\n}\r\n\r\n// File: contracts/zeppelin/token/ERC777/IERC777Sender.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC777TokensSender standard as defined in the EIP.\r\n *\r\n * \u0060IERC777\u0060 Token holders can be notified of operations performed on their\r\n * tokens by having a contract implement this interface (contract holders can be\r\n *  their own implementer) and registering it on the\r\n * [ERC1820 global registry](https://eips.ethereum.org/EIPS/eip-1820).\r\n *\r\n * See \u0060IERC1820Registry\u0060 and \u0060ERC1820Implementer\u0060.\r\n */\r\ninterface IERC777Sender {\r\n    /**\r\n     * @dev Called by an \u0060IERC777\u0060 token contract whenever a registered holder\u0027s\r\n     * (\u0060from\u0060) tokens are about to be moved or destroyed. The type of operation\r\n     * is conveyed by \u0060to\u0060 being the zero address or not.\r\n     *\r\n     * This call occurs _before_ the token contract\u0027s state is updated, so\r\n     * \u0060IERC777.balanceOf\u0060, etc., can be used to query the pre-operation state.\r\n     *\r\n     * This function may revert to prevent the operation from being executed.\r\n     */\r\n    function tokensToSend(\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint amount,\r\n        bytes calldata userData,\r\n        bytes calldata operatorData\r\n    ) external;\r\n}\r\n\r\n// File: contracts/zeppelin/token/ERC777/ERC777.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC777} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n *\r\n * Support for ERC20 is included in this contract, as specified by the EIP: both\r\n * the ERC777 and ERC20 interfaces can be safely used when interacting with it.\r\n * Both {IERC777-Sent} and {IERC20-Transfer} events are emitted on token\r\n * movements.\r\n *\r\n * Additionally, the {IERC777-granularity} value is hard-coded to \u00601\u0060, meaning that there\r\n * are no special restrictions in the amount of tokens that created, moved, or\r\n * destroyed. This makes integration with ERC20 applications seamless.\r\n */\r\ncontract ERC777 is Context, IERC777, IERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    IERC1820Registry constant private _erc1820 = IERC1820Registry(0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24);\r\n\r\n    mapping(address =\u003E uint256) private _balances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    // We inline the result of the following hashes because Solidity doesn\u0027t resolve them at compile time.\r\n    // See https://github.com/ethereum/solidity/issues/4024.\r\n\r\n    // keccak256(\u0022ERC777TokensSender\u0022)\r\n    bytes32 constant private TOKENS_SENDER_INTERFACE_HASH =\r\n        0x29ddb589b1fb5fc7cf394961c1adf5f8c6454761adf795e67fe149f658abe895;\r\n\r\n    // keccak256(\u0022ERC777TokensRecipient\u0022)\r\n    bytes32 constant private TOKENS_RECIPIENT_INTERFACE_HASH =\r\n        0xb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b;\r\n\r\n    // This isn\u0027t ever read from - it\u0027s only used to respond to the defaultOperators query.\r\n    address[] private _defaultOperatorsArray;\r\n\r\n    // Immutable, but accounts may revoke them (tracked in __revokedDefaultOperators).\r\n    mapping(address =\u003E bool) private _defaultOperators;\r\n\r\n    // For each account, a mapping of its operators and revoked default operators.\r\n    mapping(address =\u003E mapping(address =\u003E bool)) private _operators;\r\n    mapping(address =\u003E mapping(address =\u003E bool)) private _revokedDefaultOperators;\r\n\r\n    // ERC20-allowances\r\n    mapping (address =\u003E mapping (address =\u003E uint256)) private _allowances;\r\n\r\n    /**\r\n     * @dev \u0060defaultOperators\u0060 may be an empty array.\r\n     */\r\n    constructor(\r\n        string memory name,\r\n        string memory symbol,\r\n        address[] memory defaultOperators\r\n    ) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n\r\n        _defaultOperatorsArray = defaultOperators;\r\n        for (uint256 i = 0; i \u003C _defaultOperatorsArray.length; i\u002B\u002B) {\r\n            _defaultOperators[_defaultOperatorsArray[i]] = true;\r\n        }\r\n\r\n        // register interfaces\r\n        _erc1820.setInterfaceImplementer(address(this), keccak256(\u0022ERC777Token\u0022), address(this));\r\n        _erc1820.setInterfaceImplementer(address(this), keccak256(\u0022ERC20Token\u0022), address(this));\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC777-name}.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC777-symbol}.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev See {ERC20Detailed-decimals}.\r\n     *\r\n     * Always returns 18, as per the\r\n     * [ERC777 EIP](https://eips.ethereum.org/EIPS/eip-777#backward-compatibility).\r\n     */\r\n    function decimals() public pure returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC777-granularity}.\r\n     *\r\n     * This implementation always returns \u00601\u0060.\r\n     */\r\n    function granularity() public view returns (uint256) {\r\n        return 1;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC777-totalSupply}.\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by an account (\u0060tokenHolder\u0060).\r\n     */\r\n    function balanceOf(address tokenHolder) public view returns (uint256) {\r\n        return _balances[tokenHolder];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC777-send}.\r\n     *\r\n     * Also emits a {Transfer} event for ERC20 compatibility.\r\n     */\r\n    function send(address recipient, uint256 amount, bytes calldata data) external {\r\n        _send(_msgSender(), _msgSender(), recipient, amount, data, \u0022\u0022, true);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Unlike \u0060send\u0060, \u0060recipient\u0060 is _not_ required to implement the {IERC777Recipient}\r\n     * interface if it is a contract.\r\n     *\r\n     * Also emits a {Sent} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool) {\r\n        require(recipient != address(0), \u0022ERC777: transfer to the zero address\u0022);\r\n\r\n        address from = _msgSender();\r\n\r\n        _callTokensToSend(from, from, recipient, amount, \u0022\u0022, \u0022\u0022);\r\n\r\n        _move(from, from, recipient, amount, \u0022\u0022, \u0022\u0022);\r\n\r\n        _callTokensReceived(from, from, recipient, amount, \u0022\u0022, \u0022\u0022, false);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC777-burn}.\r\n     *\r\n     * Also emits a {Transfer} event for ERC20 compatibility.\r\n     */\r\n    function burn(uint256 amount, bytes calldata data) external {\r\n        _burn(_msgSender(), _msgSender(), amount, data, \u0022\u0022);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC777-isOperatorFor}.\r\n     */\r\n    function isOperatorFor(\r\n        address operator,\r\n        address tokenHolder\r\n    ) public view returns (bool) {\r\n        return operator == tokenHolder ||\r\n            (_defaultOperators[operator] \u0026\u0026 !_revokedDefaultOperators[tokenHolder][operator]) ||\r\n            _operators[tokenHolder][operator];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC777-authorizeOperator}.\r\n     */\r\n    function authorizeOperator(address operator) external {\r\n        require(_msgSender() != operator, \u0022ERC777: authorizing self as operator\u0022);\r\n\r\n        if (_defaultOperators[operator]) {\r\n            delete _revokedDefaultOperators[_msgSender()][operator];\r\n        } else {\r\n            _operators[_msgSender()][operator] = true;\r\n        }\r\n\r\n        emit AuthorizedOperator(operator, _msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC777-revokeOperator}.\r\n     */\r\n    function revokeOperator(address operator) external {\r\n        require(operator != _msgSender(), \u0022ERC777: revoking self as operator\u0022);\r\n\r\n        if (_defaultOperators[operator]) {\r\n            _revokedDefaultOperators[_msgSender()][operator] = true;\r\n        } else {\r\n            delete _operators[_msgSender()][operator];\r\n        }\r\n\r\n        emit RevokedOperator(operator, _msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC777-defaultOperators}.\r\n     */\r\n    function defaultOperators() public view returns (address[] memory) {\r\n        return _defaultOperatorsArray;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC777-operatorSend}.\r\n     *\r\n     * Emits {Sent} and {Transfer} events.\r\n     */\r\n    function operatorSend(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount,\r\n        bytes calldata data,\r\n        bytes calldata operatorData\r\n    )\r\n    external\r\n    {\r\n        require(isOperatorFor(_msgSender(), sender), \u0022ERC777: caller is not an operator for holder\u0022);\r\n        _send(_msgSender(), sender, recipient, amount, data, operatorData, true);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC777-operatorBurn}.\r\n     *\r\n     * Emits {Burned} and {Transfer} events.\r\n     */\r\n    function operatorBurn(address account, uint256 amount, bytes calldata data, bytes calldata operatorData) external {\r\n        require(isOperatorFor(_msgSender(), account), \u0022ERC777: caller is not an operator for holder\u0022);\r\n        _burn(_msgSender(), account, amount, data, operatorData);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     *\r\n     * Note that operator and allowance concepts are orthogonal: operators may\r\n     * not have allowance, and accounts with allowance may not be operators\r\n     * themselves.\r\n     */\r\n    function allowance(address holder, address spender) public view returns (uint256) {\r\n        return _allowances[holder][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Note that accounts cannot have allowance issued by their operators.\r\n     */\r\n    function approve(address spender, uint256 value) external returns (bool) {\r\n        address holder = _msgSender();\r\n        _approve(holder, spender, value);\r\n        return true;\r\n    }\r\n\r\n   /**\r\n    * @dev See {IERC20-transferFrom}.\r\n    *\r\n    * Note that operator and allowance concepts are orthogonal: operators cannot\r\n    * call \u0060transferFrom\u0060 (unless they have allowance), and accounts with\r\n    * allowance cannot call \u0060operatorSend\u0060 (unless they are operators).\r\n    *\r\n    * Emits {Sent}, {Transfer} and {Approval} events.\r\n    */\r\n    function transferFrom(address holder, address recipient, uint256 amount) external returns (bool) {\r\n        require(recipient != address(0), \u0022ERC777: transfer to the zero address\u0022);\r\n        require(holder != address(0), \u0022ERC777: transfer from the zero address\u0022);\r\n\r\n        address spender = _msgSender();\r\n\r\n        _callTokensToSend(spender, holder, recipient, amount, \u0022\u0022, \u0022\u0022);\r\n\r\n        _move(spender, holder, recipient, amount, \u0022\u0022, \u0022\u0022);\r\n        _approve(holder, spender, _allowances[holder][spender].sub(amount, \u0022ERC777: transfer amount exceeds allowance\u0022));\r\n\r\n        _callTokensReceived(spender, holder, recipient, amount, \u0022\u0022, \u0022\u0022, false);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Creates \u0060amount\u0060 tokens and assigns them to \u0060account\u0060, increasing\r\n     * the total supply.\r\n     *\r\n     * If a send hook is registered for \u0060account\u0060, the corresponding function\r\n     * will be called with \u0060operator\u0060, \u0060data\u0060 and \u0060operatorData\u0060.\r\n     *\r\n     * See {IERC777Sender} and {IERC777Recipient}.\r\n     *\r\n     * Emits {Minted} and {Transfer} events.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - \u0060account\u0060 cannot be the zero address.\r\n     * - if \u0060account\u0060 is a contract, it must implement the {IERC777Recipient}\r\n     * interface.\r\n     */\r\n    function _mint(\r\n        address operator,\r\n        address account,\r\n        uint256 amount,\r\n        bytes memory userData,\r\n        bytes memory operatorData\r\n    )\r\n    internal\r\n    {\r\n        require(account != address(0), \u0022ERC777: mint to the zero address\u0022);\r\n\r\n        // Update state variables\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n\r\n        _callTokensReceived(operator, address(0), account, amount, userData, operatorData, true);\r\n\r\n        emit Minted(operator, account, amount, userData, operatorData);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Send tokens\r\n     * @param operator address operator requesting the transfer\r\n     * @param from address token holder address\r\n     * @param to address recipient address\r\n     * @param amount uint256 amount of tokens to transfer\r\n     * @param userData bytes extra information provided by the token holder (if any)\r\n     * @param operatorData bytes extra information provided by the operator (if any)\r\n     * @param requireReceptionAck if true, contract recipients are required to implement ERC777TokensRecipient\r\n     */\r\n    function _send(\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint256 amount,\r\n        bytes memory userData,\r\n        bytes memory operatorData,\r\n        bool requireReceptionAck\r\n    )\r\n        private\r\n    {\r\n        require(from != address(0), \u0022ERC777: send from the zero address\u0022);\r\n        require(to != address(0), \u0022ERC777: send to the zero address\u0022);\r\n\r\n        _callTokensToSend(operator, from, to, amount, userData, operatorData);\r\n\r\n        _move(operator, from, to, amount, userData, operatorData);\r\n\r\n        _callTokensReceived(operator, from, to, amount, userData, operatorData, requireReceptionAck);\r\n    }\r\n\r\n    /**\r\n     * @dev Burn tokens\r\n     * @param operator address operator requesting the operation\r\n     * @param from address token holder address\r\n     * @param amount uint256 amount of tokens to burn\r\n     * @param data bytes extra information provided by the token holder\r\n     * @param operatorData bytes extra information provided by the operator (if any)\r\n     */\r\n    function _burn(\r\n        address operator,\r\n        address from,\r\n        uint256 amount,\r\n        bytes memory data,\r\n        bytes memory operatorData\r\n    )\r\n        private\r\n    {\r\n        require(from != address(0), \u0022ERC777: burn from the zero address\u0022);\r\n\r\n        _callTokensToSend(operator, from, address(0), amount, data, operatorData);\r\n\r\n        // Update state variables\r\n        _balances[from] = _balances[from].sub(amount, \u0022ERC777: burn amount exceeds balance\u0022);\r\n        _totalSupply = _totalSupply.sub(amount);\r\n\r\n        emit Burned(operator, from, amount, data, operatorData);\r\n        emit Transfer(from, address(0), amount);\r\n    }\r\n\r\n    function _move(\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint256 amount,\r\n        bytes memory userData,\r\n        bytes memory operatorData\r\n    )\r\n        private\r\n    {\r\n        _balances[from] = _balances[from].sub(amount, \u0022ERC777: transfer amount exceeds balance\u0022);\r\n        _balances[to] = _balances[to].add(amount);\r\n\r\n        emit Sent(operator, from, to, amount, userData, operatorData);\r\n        emit Transfer(from, to, amount);\r\n    }\r\n\r\n    function _approve(address holder, address spender, uint256 value) private {\r\n        // TODO: restore this require statement if this function becomes internal, or is called at a new callsite. It is\r\n        // currently unnecessary.\r\n        //require(holder != address(0), \u0022ERC777: approve from the zero address\u0022);\r\n        require(spender != address(0), \u0022ERC777: approve to the zero address\u0022);\r\n\r\n        _allowances[holder][spender] = value;\r\n        emit Approval(holder, spender, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Call from.tokensToSend() if the interface is registered\r\n     * @param operator address operator requesting the transfer\r\n     * @param from address token holder address\r\n     * @param to address recipient address\r\n     * @param amount uint256 amount of tokens to transfer\r\n     * @param userData bytes extra information provided by the token holder (if any)\r\n     * @param operatorData bytes extra information provided by the operator (if any)\r\n     */\r\n    function _callTokensToSend(\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint256 amount,\r\n        bytes memory userData,\r\n        bytes memory operatorData\r\n    )\r\n        private\r\n    {\r\n        address implementer = _erc1820.getInterfaceImplementer(from, TOKENS_SENDER_INTERFACE_HASH);\r\n        if (implementer != address(0)) {\r\n            IERC777Sender(implementer).tokensToSend(operator, from, to, amount, userData, operatorData);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Call to.tokensReceived() if the interface is registered. Reverts if the recipient is a contract but\r\n     * tokensReceived() was not registered for the recipient\r\n     * @param operator address operator requesting the transfer\r\n     * @param from address token holder address\r\n     * @param to address recipient address\r\n     * @param amount uint256 amount of tokens to transfer\r\n     * @param userData bytes extra information provided by the token holder (if any)\r\n     * @param operatorData bytes extra information provided by the operator (if any)\r\n     * @param requireReceptionAck if true, contract recipients are required to implement ERC777TokensRecipient\r\n     */\r\n    function _callTokensReceived(\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint256 amount,\r\n        bytes memory userData,\r\n        bytes memory operatorData,\r\n        bool requireReceptionAck\r\n    )\r\n        private\r\n    {\r\n        address implementer = _erc1820.getInterfaceImplementer(to, TOKENS_RECIPIENT_INTERFACE_HASH);\r\n        if (implementer != address(0)) {\r\n            IERC777Recipient(implementer).tokensReceived(operator, from, to, amount, userData, operatorData);\r\n        } else if (requireReceptionAck) {\r\n            require(!to.isContract(), \u0022ERC777: token recipient contract has no implementer for ERC777TokensRecipient\u0022);\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/SideToken.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\ncontract SideToken is ERC777 {\r\n    address public minter;\r\n\r\n    constructor(string memory _tokenName, string memory _tokenSymbol, address _minterAddr)\r\n    ERC777(_tokenName, _tokenSymbol, new address[](0)) public {\r\n        require(_minterAddr != address(0), \u0022SideToken: Minter address is null\u0022);\r\n        minter = _minterAddr;\r\n    }\r\n\r\n    modifier onlyMinter() {\r\n        require(_msgSender() == minter, \u0022SideToken: Caller is not the minter\u0022);\r\n        _;\r\n    }\r\n    function mint(\r\n        address account,\r\n        uint256 amount,\r\n        bytes calldata userData,\r\n        bytes calldata operatorData\r\n    )\r\n    external onlyMinter\r\n    {\r\n        _mint(_msgSender(), account, amount, userData, operatorData);\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/zeppelin/ownership/Secondary.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev A Secondary contract can only be used by its primary account (the one that created it).\r\n */\r\ncontract Secondary is Context {\r\n    address private _primary;\r\n\r\n    /**\r\n     * @dev Emitted when the primary contract changes.\r\n     */\r\n    event PrimaryTransferred(\r\n        address recipient\r\n    );\r\n\r\n    /**\r\n     * @dev Sets the primary account to the one that is creating the Secondary contract.\r\n     */\r\n    constructor () internal {\r\n        _primary = _msgSender();\r\n        emit PrimaryTransferred(_primary);\r\n    }\r\n\r\n    /**\r\n     * @dev Reverts if called from any account other than the primary.\r\n     */\r\n    modifier onlyPrimary() {\r\n        require(_msgSender() == _primary, \u0022Secondary: caller is not the primary account\u0022);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return the address of the primary.\r\n     */\r\n    function primary() public view returns (address) {\r\n        return _primary;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers contract to a new primary.\r\n     * @param recipient The address of new primary.\r\n     */\r\n    function transferPrimary(address recipient) public onlyPrimary {\r\n        require(recipient != address(0), \u0022Secondary: new primary is the zero address\u0022);\r\n        _primary = recipient;\r\n        emit PrimaryTransferred(_primary);\r\n    }\r\n}\r\n\r\n// File: contracts/SideTokenFactory.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\ncontract SideTokenFactory is Secondary {\r\n    event createdSideToken(address sideToken, string symbol);\r\n\r\n    function createSideToken(string calldata name, string calldata symbol) external onlyPrimary returns(SideToken) {\r\n        SideToken sideToken = new SideToken(name, symbol, primary());\r\n        emit createdSideToken(address(sideToken), symbol);\r\n        return sideToken;\r\n    }\r\n}\r\n\r\n// File: contracts/zeppelin/ownership/Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * \u0060onlyOwner\u0060, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        _owner = _msgSender();\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \u0022Ownable: caller is not the owner\u0022);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * \u0060onlyOwner\u0060 functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (\u0060newOwner\u0060).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (\u0060newOwner\u0060).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \u0022Ownable: new owner is the zero address\u0022);\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/AllowTokens.sol\r\n\r\npragma solidity \u003E=0.4.21 \u003C0.6.0;\r\n\r\n\r\n\r\ncontract AllowTokens is Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    address constant private NULL_ADDRESS = address(0);\r\n\r\n    mapping (address =\u003E bool) public allowedTokens;\r\n    bool private validateAllowedTokens;\r\n    uint256 private maxTokensAllowed;\r\n    uint256 private minTokensAllowed;\r\n    uint256 public dailyLimit;\r\n\r\n    event AllowedTokenAdded(address indexed _tokenAddress);\r\n    event AllowedTokenRemoved(address indexed _tokenAddress);\r\n    event AllowedTokenValidation(bool _enabled);\r\n    event MaxTokensAllowedChanged(uint256 _maxTokens);\r\n    event MinTokensAllowedChanged(uint256 _minTokens);\r\n    event DailyLimitChanged(uint256 dailyLimit);\r\n\r\n    modifier notNull(address _address) {\r\n        require(_address != NULL_ADDRESS, \u0022AllowTokens: Address cannot be empty\u0022);\r\n        _;\r\n    }\r\n\r\n    constructor(address _manager) public  {\r\n        transferOwnership(_manager);\r\n        validateAllowedTokens = true;\r\n        maxTokensAllowed = 10000 ether;\r\n        minTokensAllowed = 1 ether;\r\n        dailyLimit = 100000 ether;\r\n    }\r\n\r\n    function isValidatingAllowedTokens() external view returns(bool) {\r\n        return validateAllowedTokens;\r\n    }\r\n\r\n    function getMaxTokensAllowed() external view returns(uint256) {\r\n        return maxTokensAllowed;\r\n    }\r\n\r\n    function getMinTokensAllowed() external view returns(uint256) {\r\n        return minTokensAllowed;\r\n    }\r\n\r\n    function allowedTokenExist(address token) private view notNull(token) returns (bool) {\r\n        return allowedTokens[token];\r\n    }\r\n\r\n    function isTokenAllowed(address token) public view notNull(token) returns (bool) {\r\n        if (validateAllowedTokens) {\r\n            return allowedTokenExist(token);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function addAllowedToken(address token) external onlyOwner {\r\n        require(!allowedTokenExist(token), \u0022AllowTokens: Token already exists in allowedTokens\u0022);\r\n        allowedTokens[token] = true;\r\n        emit AllowedTokenAdded(token);\r\n    }\r\n\r\n    function removeAllowedToken(address token) external onlyOwner {\r\n        require(allowedTokenExist(token), \u0022AllowTokens: Token does not exis  in allowedTokenst\u0022);\r\n        allowedTokens[token] = false;\r\n        emit AllowedTokenRemoved(token);\r\n    }\r\n\r\n    function enableAllowedTokensValidation() external onlyOwner {\r\n        validateAllowedTokens = true;\r\n        emit AllowedTokenValidation(validateAllowedTokens);\r\n    }\r\n\r\n    function disableAllowedTokensValidation() external onlyOwner {\r\n        // Before disabling Allowed Tokens Validations some kind of contract validation system\r\n        // should be implemented on the Bridge for the methods receiveTokens, tokenFallback and tokensReceived\r\n        validateAllowedTokens = false;\r\n        emit AllowedTokenValidation(validateAllowedTokens);\r\n    }\r\n\r\n    function setMaxTokensAllowed(uint256 maxTokens) external onlyOwner {\r\n        require(maxTokens \u003E= minTokensAllowed, \u0022AllowTokens: Max Tokens should be equal or bigger than Min Tokens\u0022);\r\n        maxTokensAllowed = maxTokens;\r\n        emit MaxTokensAllowedChanged(maxTokensAllowed);\r\n    }\r\n\r\n    function setMinTokensAllowed(uint256 minTokens) external onlyOwner {\r\n        require(maxTokensAllowed \u003E= minTokens, \u0022AllowTokens: Min Tokens should be equal or smaller than Max Tokens\u0022);\r\n        minTokensAllowed = minTokens;\r\n        emit MinTokensAllowedChanged(minTokensAllowed);\r\n    }\r\n\r\n    function changeDailyLimit(uint256 _dailyLimit) external onlyOwner {\r\n        require(_dailyLimit \u003E= maxTokensAllowed, \u0022AllowTokens: Daily Limit should be equal or bigger than Max Tokens\u0022);\r\n        dailyLimit = _dailyLimit;\r\n        emit DailyLimitChanged(_dailyLimit);\r\n    }\r\n\r\n    // solium-disable-next-line max-len\r\n    function isValidTokenTransfer(address tokenToUse, uint amount, uint spentToday, bool isSideToken) external view returns (bool) {\r\n        if(amount \u003E maxTokensAllowed)\r\n            return false;\r\n        if(amount \u003C minTokensAllowed)\r\n            return false;\r\n        if (spentToday \u002B amount \u003E dailyLimit || spentToday \u002B amount \u003C spentToday)\r\n            return false;\r\n        if(!isSideToken \u0026\u0026 !isTokenAllowed(tokenToUse))\r\n            return false;\r\n        return true;\r\n    }\r\n\r\n    function calcMaxWithdraw(uint spentToday) external view returns (uint) {\r\n        uint maxWithrow = dailyLimit - spentToday;\r\n        if (dailyLimit \u003C spentToday)\r\n            return 0;\r\n        if(maxWithrow \u003E maxTokensAllowed)\r\n            maxWithrow = maxTokensAllowed;\r\n        return maxWithrow;\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/Bridge_v0.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n// Import base Initializable contract\r\n\r\n// Import interface and library from OpenZeppelin contracts\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract Bridge_v0 is Initializable, IBridge, IERC777Recipient, UpgradablePausable, UpgradableOwnable, ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for ERC20Detailed;\r\n    using Address for address;\r\n\r\n    address constant private NULL_ADDRESS = address(0);\r\n    bytes32 constant private NULL_HASH = bytes32(0);\r\n    IERC1820Registry constant private erc1820 = IERC1820Registry(0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24);\r\n\r\n    address private federation;\r\n    uint256 private crossingPayment;\r\n    string public symbolPrefix;\r\n    uint256 public lastDay;\r\n    uint256 public spentToday;\r\n\r\n    mapping (address =\u003E SideToken) public mappedTokens; // OirignalToken =\u003E SideToken\r\n    mapping (address =\u003E address) public originalTokens; // SideToken =\u003E OriginalToken\r\n    mapping (address =\u003E bool) public knownTokens; // OriginalToken =\u003E true\r\n    mapping(bytes32 =\u003E bool) processed; // ProcessedHash =\u003E true\r\n    AllowTokens public allowTokens;\r\n    SideTokenFactory public sideTokenFactory;\r\n\r\n    event FederationChanged(address _newFederation);\r\n\r\n    function initialize(address _manager, address _federation, address _allowTokens, address _sideTokenFactory, string memory _symbolPrefix)\r\n    public initializer {\r\n        require(bytes(_symbolPrefix).length \u003E 0, \u0022Bridge: Empty symbol prefix\u0022);\r\n        require(_allowTokens != NULL_ADDRESS, \u0022Bridge: Missing AllowTokens contract address\u0022);\r\n        require(_manager != NULL_ADDRESS, \u0022Bridge: Manager address is empty\u0022);\r\n        require(_federation != NULL_ADDRESS, \u0022Bridge: Federation address is empty\u0022);\r\n        UpgradableOwnable.initialize(_manager);\r\n        UpgradablePausable.initialize(_manager);\r\n        symbolPrefix = _symbolPrefix;\r\n        allowTokens = AllowTokens(_allowTokens);\r\n        sideTokenFactory = SideTokenFactory(_sideTokenFactory);\r\n        // solium-disable-next-line security/no-block-members\r\n        lastDay = now;\r\n        spentToday = 0;\r\n        _changeFederation(_federation);\r\n        //keccak256(\u0022ERC777TokensRecipient\u0022)\r\n        erc1820.setInterfaceImplementer(address(this), 0xb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b, address(this));\r\n    }\r\n\r\n    function version() external pure returns (string memory) {\r\n        return \u0022v0\u0022;\r\n    }\r\n\r\n    modifier onlyFederation() {\r\n        require(msg.sender == federation, \u0022Bridge: Caller is not the Federation\u0022);\r\n        _;\r\n    }\r\n\r\n    function acceptTransfer(\r\n        address tokenAddress,\r\n        address receiver,\r\n        uint256 amount,\r\n        string calldata symbol,\r\n        bytes32 blockHash,\r\n        bytes32 transactionHash,\r\n        uint32 logIndex\r\n    ) external onlyFederation whenNotPaused nonReentrant returns(bool) {\r\n        require(tokenAddress != NULL_ADDRESS, \u0022Bridge: Token Address cant be null\u0022);\r\n        require(receiver != NULL_ADDRESS, \u0022Bridge: Receiver Address cant be null\u0022);\r\n        require(amount \u003E 0, \u0022Bridge: Amount cant be 0\u0022);\r\n        require(bytes(symbol).length \u003E 0, \u0022Bridge: Symbol cant be empty\u0022);\r\n        require(blockHash != NULL_HASH, \u0022Bridge: Block Hash cant be null\u0022);\r\n        require(transactionHash != NULL_HASH, \u0022Bridge: Transaction Hash cant be null\u0022);\r\n\r\n        bytes32 compiledId = getTransactionId(blockHash, transactionHash, receiver, amount, logIndex);\r\n        require(!processed[compiledId], \u0022Bridge: Transaction was already processed\u0022);\r\n        processed[compiledId] = true;\r\n\r\n        createSideToken(tokenAddress, symbol);\r\n\r\n        if (isMappedToken(tokenAddress)) {\r\n            SideToken sideToken = mappedTokens[tokenAddress];\r\n            sideToken.mint(receiver, amount, \u0022\u0022, \u0022\u0022);\r\n        } else {\r\n            require(knownTokens[tokenAddress], \u0022Bridge: Token address is not in knownTokens\u0022);\r\n            ERC20Detailed token = ERC20Detailed(tokenAddress);\r\n            token.safeTransfer(receiver, amount);\r\n        }\r\n        emit AcceptedCrossTransfer(tokenAddress, receiver, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * ERC-20 tokens approve and transferFrom pattern\r\n     * See https://eips.ethereum.org/EIPS/eip-20#transferfrom\r\n     */\r\n    function receiveTokens(address tokenToUse, uint256 amount) external payable whenNotPaused nonReentrant returns(bool) {\r\n        verifyIsERC20Detailed(tokenToUse);\r\n        address sender = _msgSender();\r\n        require(!sender.isContract(), \u0022Bridge: Contracts can\u0027t cross tokens using their addresses as destination\u0022);\r\n        sendIncentiveToEventsCrossers(msg.value);\r\n        //Transfer the tokens on IERC20, they should be already Approved for the bridge Address to use them\r\n        ERC20Detailed(tokenToUse).safeTransferFrom(_msgSender(), address(this), amount);\r\n        crossTokens(tokenToUse, _msgSender(), amount, \u0022\u0022);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * ERC-677 and ERC-223 implementation for Receiving Tokens Contracts\r\n     * See https://github.com/ethereum/EIPs/issues/677 for details\r\n     * See https://github.com/ethereum/EIPs/issues/223 for details\r\n     */\r\n    function tokenFallback(address from, uint amount, bytes calldata userData) external whenNotPaused nonReentrant returns (bool) {\r\n        require(crossingPayment == 0, \u0022Bridge: Needs payment, use receiveTokens instead\u0022);\r\n        verifyIsERC20Detailed(_msgSender());\r\n        //This can only be used with trusted contracts\r\n        crossTokens(_msgSender(), from, amount, userData);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * ERC-777 tokensReceived hook allows to send tokens to a contract and notify it in a single transaction\r\n     * See https://eips.ethereum.org/EIPS/eip-777#motivation for details\r\n     */\r\n    function tokensReceived (\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint amount,\r\n        bytes calldata userData,\r\n        bytes calldata\r\n    ) external whenNotPaused {\r\n        //Hook from ERC777address\r\n        if(operator == address(this)) return; // Avoid loop from bridge calling to ERC77transferFrom\r\n        require(to == address(this), \u0022Bridge: This contract is not the address receiving the tokens\u0022);\r\n        require(crossingPayment == 0, \u0022Bridge: Needs payment, use receiveTokens instead\u0022);\r\n        verifyIsERC20Detailed(_msgSender());\r\n        //This can only be used with trusted contracts\r\n        crossTokens(_msgSender(), from, amount, userData);\r\n    }\r\n\r\n    function crossTokens(address tokenToUse, address from, uint256 amount, bytes memory userData) private {\r\n        bool _isSideToken = isSideToken(tokenToUse);\r\n        verifyWithAllowTokens(tokenToUse, amount, _isSideToken);\r\n        if (_isSideToken) {\r\n            sideTokenCrossingBack(from, SideToken(tokenToUse), amount, userData);\r\n        } else {\r\n            mainTokenCrossing(from, tokenToUse, amount, userData);\r\n        }\r\n    }\r\n\r\n    function sendIncentiveToEventsCrossers(uint256 payment) private {\r\n        require(payment \u003E= crossingPayment, \u0022Bridge: Insufficient coins sent for crossingPayment\u0022);\r\n        //Send the payment to the MultiSig of the Federation\r\n        if(payment \u003E 0) {\r\n            address payable receiver = address(uint160(owner()));\r\n            receiver.transfer(payment);\r\n        }\r\n    }\r\n\r\n    function sideTokenCrossingBack(address from, SideToken tokenToUse, uint256 amount, bytes memory userData) private {\r\n        tokenToUse.burn(amount, userData);\r\n        emit Cross(originalTokens[address(tokenToUse)], from, amount, tokenToUse.symbol(), userData);\r\n    }\r\n\r\n    function mainTokenCrossing(address from, address tokenToUse, uint256 amount, bytes memory userData) private {\r\n        knownTokens[tokenToUse] = true;\r\n        emit Cross(tokenToUse, from, amount, (ERC20Detailed(tokenToUse)).symbol(), userData);\r\n    }\r\n\r\n    function createSideToken(address token, string memory symbol) private {\r\n        if (knownTokens[token])\r\n            return; //Crossing Back\r\n\r\n        SideToken sideToken = mappedTokens[token];\r\n\r\n        if (address(sideToken) == NULL_ADDRESS) {\r\n            string memory newSymbol = string(abi.encodePacked(symbolPrefix, symbol));\r\n            sideToken = sideTokenFactory.createSideToken(newSymbol, newSymbol);\r\n            mappedTokens[token] = sideToken;\r\n            address sideTokenAddress = address(sideToken);\r\n            originalTokens[sideTokenAddress] = token;\r\n            emit NewSideToken(sideTokenAddress, token, newSymbol);\r\n        }\r\n    }\r\n\r\n    function verifyIsERC20Detailed(address tokenToUse) private view {\r\n        ERC20Detailed detailedTokenToUse = ERC20Detailed(tokenToUse);\r\n        require(detailedTokenToUse.decimals() == 18, \u0022Bridge: Token has decimals other than 18\u0022);\r\n        require(bytes(detailedTokenToUse.symbol()).length != 0, \u0022Bridge: Token doesn\u0027t have a symbol\u0022);\r\n    }\r\n\r\n    function verifyWithAllowTokens(address tokenToUse, uint256 amount, bool isASideToken) private  {\r\n        // solium-disable-next-line security/no-block-members\r\n        if (now \u003E lastDay \u002B 24 hours) {\r\n            // solium-disable-next-line security/no-block-members\r\n            lastDay = now;\r\n            spentToday = 0;\r\n        }\r\n        // solium-disable-next-line max-len\r\n        require(allowTokens.isValidTokenTransfer(tokenToUse, amount, spentToday, isASideToken), \u0022Bridge: Transfer doesn\u0027t comply with AllowTokens limits\u0022);\r\n        spentToday = spentToday.add(amount);\r\n    }\r\n\r\n    function isSideToken(address token) public view returns (bool) {\r\n        return originalTokens[token] != NULL_ADDRESS;\r\n    }\r\n\r\n    function isMappedToken(address token) private view returns (bool) {\r\n        return address(mappedTokens[token]) != NULL_ADDRESS;\r\n    }\r\n\r\n    function getTransactionId(\r\n        bytes32 _blockHash,\r\n        bytes32 _transactionHash,\r\n        address _receiver,\r\n        uint256 _amount,\r\n        uint32 _logIndex\r\n    )\r\n        public pure returns(bytes32)\r\n    {\r\n        return keccak256(abi.encodePacked(_blockHash, _transactionHash, _receiver, _amount, _logIndex));\r\n    }\r\n\r\n    function transactionWasProcessed(\r\n        bytes32 _blockHash,\r\n        bytes32 _transactionHash,\r\n        address _receiver,\r\n        uint256 _amount,\r\n        uint32 _logIndex\r\n    )\r\n        public view returns(bool)\r\n    {\r\n        bytes32 compiledId = getTransactionId(_blockHash, _transactionHash, _receiver, _amount, _logIndex);\r\n\r\n        return processed[compiledId];\r\n    }\r\n\r\n    function setCrossingPayment(uint amount) external onlyOwner whenNotPaused {\r\n        crossingPayment = amount;\r\n        emit CrossingPaymentChanged(crossingPayment);\r\n    }\r\n\r\n    function getCrossingPayment() external view returns(uint) {\r\n        return crossingPayment;\r\n    }\r\n\r\n    function calcMaxWithdraw() external view returns (uint) {\r\n        uint spent = spentToday;\r\n        // solium-disable-next-line security/no-block-members\r\n        if (now \u003E lastDay \u002B 24 hours)\r\n            spent = 0;\r\n        return allowTokens.calcMaxWithdraw(spent);\r\n    }\r\n\r\n    function _changeFederation(address newFederation) private {\r\n        federation = newFederation;\r\n        emit FederationChanged(federation);\r\n    }\r\n\r\n    function changeFederation(address newFederation) external onlyOwner whenNotPaused {\r\n        _changeFederation(newFederation);\r\n    }\r\n\r\n    function getFederation() external view returns(address) {\r\n        return federation;\r\n    }\r\n\r\n}","ABI":"[{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_tokenAddress\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022AcceptedCrossTransfer\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_tokenAddress\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_amount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022string\u0022,\u0022name\u0022:\u0022_symbol\u0022,\u0022type\u0022:\u0022string\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022bytes\u0022,\u0022name\u0022:\u0022userData\u0022,\u0022type\u0022:\u0022bytes\u0022}],\u0022name\u0022:\u0022Cross\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022CrossingPaymentChanged\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_newFederation\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022FederationChanged\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_newSideTokenAddress\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_originalTokenAddress\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022string\u0022,\u0022name\u0022:\u0022_newSymbol\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022name\u0022:\u0022NewSideToken\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022previousOwner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022OwnershipTransferred\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022Paused\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022PauserAdded\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022PauserRemoved\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022Unpaused\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022tokenAddress\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022receiver\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022string\u0022,\u0022name\u0022:\u0022symbol\u0022,\u0022type\u0022:\u0022string\u0022},{\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022blockHash\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022transactionHash\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022internalType\u0022:\u0022uint32\u0022,\u0022name\u0022:\u0022logIndex\u0022,\u0022type\u0022:\u0022uint32\u0022}],\u0022name\u0022:\u0022acceptTransfer\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022addPauser\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022allowTokens\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022contract AllowTokens\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022calcMaxWithdraw\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022newFederation\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022changeFederation\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022getCrossingPayment\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022getFederation\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022_blockHash\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022_transactionHash\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_receiver\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_amount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint32\u0022,\u0022name\u0022:\u0022_logIndex\u0022,\u0022type\u0022:\u0022uint32\u0022}],\u0022name\u0022:\u0022getTransactionId\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022pure\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_manager\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_federation\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_allowTokens\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_sideTokenFactory\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022string\u0022,\u0022name\u0022:\u0022_symbolPrefix\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022name\u0022:\u0022initialize\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022initialize\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022sender\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022initialize\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022isOwner\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022isPauser\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022token\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022isSideToken\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022knownTokens\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022lastDay\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022mappedTokens\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022contract SideToken\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022originalTokens\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022owner\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022pause\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022paused\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022tokenToUse\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022receiveTokens\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:true,\u0022stateMutability\u0022:\u0022payable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022renounceOwnership\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022renouncePauser\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022setCrossingPayment\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022sideTokenFactory\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022contract SideTokenFactory\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022spentToday\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022symbolPrefix\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022string\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022from\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022bytes\u0022,\u0022name\u0022:\u0022userData\u0022,\u0022type\u0022:\u0022bytes\u0022}],\u0022name\u0022:\u0022tokenFallback\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022operator\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022from\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022bytes\u0022,\u0022name\u0022:\u0022userData\u0022,\u0022type\u0022:\u0022bytes\u0022},{\u0022internalType\u0022:\u0022bytes\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bytes\u0022}],\u0022name\u0022:\u0022tokensReceived\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022_blockHash\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022_transactionHash\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_receiver\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_amount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint32\u0022,\u0022name\u0022:\u0022_logIndex\u0022,\u0022type\u0022:\u0022uint32\u0022}],\u0022name\u0022:\u0022transactionWasProcessed\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022transferOwnership\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022unpause\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022version\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022string\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022pure\u0022,\u0022type\u0022:\u0022function\u0022}]","ContractName":"Bridge_v0","CompilerVersion":"v0.5.15\u002Bcommit.6a57276f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://ce4f5dba1790d630b25f6e80a9bc8ec2faf2d5d180d3a609a9cb07ca4009d1cb"}]