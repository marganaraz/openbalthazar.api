[{"SourceCode":"pragma solidity ^0.4.20;\r\n\r\ncontract ReceiverPays {\r\n    address owner = msg.sender;\r\n\r\n    mapping(uint256 =\u003E bool) usedNonces;\r\n\r\n    // Funds are sent at deployment time.\r\n    function ReceiverPays() public payable { }\r\n\r\n\r\n    function claimPayment(uint256 amount, uint256 nonce, bytes sig) public {\r\n        require(!usedNonces[nonce]);\r\n        usedNonces[nonce] = true;\r\n\r\n        // This recreates the message that was signed on the client.\r\n        bytes32 message = prefixed(keccak256(msg.sender, amount, nonce, this));\r\n\r\n        require(recoverSigner(message, sig) == owner);\r\n\r\n        msg.sender.transfer(amount);\r\n    }\r\n\r\n    // Destroy contract and reclaim leftover funds.\r\n    function kill() public {\r\n        require(msg.sender == owner);\r\n        selfdestruct(msg.sender);\r\n    }\r\n\r\n\r\n    // Signature methods\r\n\r\n    function splitSignature(bytes sig)\r\n        internal\r\n        pure\r\n        returns (uint8, bytes32, bytes32)\r\n    {\r\n        require(sig.length == 65);\r\n\r\n        bytes32 r;\r\n        bytes32 s;\r\n        uint8 v;\r\n\r\n        assembly {\r\n            // first 32 bytes, after the length prefix\r\n            r := mload(add(sig, 32))\r\n            // second 32 bytes\r\n            s := mload(add(sig, 64))\r\n            // final byte (first byte of the next 32 bytes)\r\n            v := byte(0, mload(add(sig, 96)))\r\n        }\r\n\r\n        return (v, r, s);\r\n    }\r\n\r\n    function recoverSigner(bytes32 message, bytes sig)\r\n        internal\r\n        pure\r\n        returns (address)\r\n    {\r\n        uint8 v;\r\n        bytes32 r;\r\n        bytes32 s;\r\n\r\n        (v, r, s) = splitSignature(sig);\r\n\r\n        return ecrecover(message, v, r, s);\r\n    }\r\n\r\n    // Builds a prefixed hash to mimic the behavior of eth_sign.\r\n    function prefixed(bytes32 hash) internal pure returns (bytes32) {\r\n        return keccak256(\u0022\\x19Ethereum Signed Message:\\n32\u0022, hash);\r\n    }\r\n}","ABI":"[{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022kill\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022nonce\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022sig\u0022,\u0022type\u0022:\u0022bytes\u0022}],\u0022name\u0022:\u0022claimPayment\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[],\u0022payable\u0022:true,\u0022stateMutability\u0022:\u0022payable\u0022,\u0022type\u0022:\u0022constructor\u0022}]","ContractName":"ReceiverPays","CompilerVersion":"v0.4.26\u002Bcommit.4563c3fc","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://beaf4eb30739da03d2ea0bbf07239fc2a470ef925c33356dcdfe0a7ab30a8216"}]