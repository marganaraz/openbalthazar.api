[{"SourceCode":"pragma solidity ^0.4.18;\r\n\r\n\r\n/**Guardians of Equalism Coin**/\r\n \r\n/* @title SafeMath\r\n\r\n * @dev Math operations with safety checks that throw on error\r\n\r\n */\r\n\r\nlibrary SafeMath {\r\n\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n    if (a == 0) {\r\n\r\n      return 0;\r\n\r\n    }\r\n\r\n    uint256 c = a * b;\r\n\r\n    assert(c / a == b);\r\n\r\n    return c;\r\n\r\n  }\r\n\r\n \r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n    // assert(b \u003E 0); // Solidity automatically throws when dividing by 0\r\n\r\n    uint256 c = a / b;\r\n\r\n    // assert(a == b * c \u002B a % b); // There is no case in which this doesn\u0027t hold\r\n\r\n    return c;\r\n\r\n  }\r\n\r\n \r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n    assert(b \u003C= a);\r\n\r\n    return a - b;\r\n\r\n  }\r\n\r\n \r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n\r\n    uint256 c = a \u002B b;\r\n\r\n    assert(c \u003E= a);\r\n\r\n    return c;\r\n\r\n  }\r\n\r\n}\r\n \r\n\r\n/**\r\n\r\n * File: zeppelin-solidity/contracts/token/ERC20Basic.sol\r\n\r\n * @title ERC20Basic\r\n\r\n * @dev Simpler version of ERC20 interface\r\n\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n\r\n */\r\n\r\ncontract ERC20Basic {\r\n\r\n  uint256 public totalSupply;\r\n\r\n  function balanceOf(address who) public view returns (uint256);\r\n\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n}\r\n \r\n\r\n/**\r\n\r\n * @title Basic token\r\n\r\n * @dev Basic version of StandardToken, with no allowances.\r\n\r\n */\r\n\r\ncontract BasicToken is ERC20Basic {\r\n\r\n  using SafeMath for uint256;\r\n\r\n \r\n\r\n  mapping(address =\u003E uint256) balances;\r\n\r\n  mapping(address =\u003E bool) internal locks;\r\n\r\n  mapping(address =\u003E mapping(address =\u003E uint256)) internal allowed;\r\n\r\n \r\n\r\n  /**\r\n\r\n  * @dev transfer token for a specified address\r\n\r\n  * @param _to The address to transfer to.\r\n\r\n  * @param _value The amount to be transferred.\r\n\r\n  */\r\n\r\n  function transfer(address _to, uint256 _value) public returns (bool) {\r\n\r\n    require(_to != address(0));\r\n\r\n    require(_value \u003C= balances[msg.sender]);\r\n\r\n \r\n\r\n    // SafeMath.sub will throw if there is not enough balance.\r\n\r\n    balances[msg.sender] = balances[msg.sender].sub(_value);\r\n\r\n    balances[_to] = balances[_to].add(_value);\r\n\r\n    Transfer(msg.sender, _to, _value);\r\n\r\n    return true;\r\n\r\n  }\r\n\r\n \r\n\r\n\r\n  /**\r\n\r\n  * @dev Gets the balance of the specified address.\r\n\r\n  * @param _owner The address to query the the balance of.\r\n\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n\r\n  */\r\n\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n\r\n    return balances[_owner];\r\n\r\n  }\r\n}\r\n\r\n \r\n\r\n/**\r\n\r\n * File: zeppelin-solidity/contracts/token/BurnableToken.sol\r\n\r\n * @title Burnable Token\r\n\r\n * @dev Token that can be irreversibly burned (destroyed).\r\n\r\n */\r\n\r\ncontract BurnableToken is BasicToken {\r\n\r\n \r\n\r\n    event Burn(address indexed burner, uint256 value);\r\n\r\n \r\n\r\n    /**\r\n\r\n     * @dev Burns a specific amount of tokens.\r\n\r\n     * @param _value The amount of token to be burned.\r\n\r\n     */\r\n\r\n    function burn(uint256 _value) public {\r\n\r\n        require(_value \u003C= balances[msg.sender]);\r\n\r\n        // no need to require value \u003C= totalSupply, since that would imply the\r\n\r\n        // sender\u0027s balance is greater than the totalSupply, which *should* be an assertion failure\r\n\r\n \r\n\r\n        address burner = msg.sender;\r\n\r\n        balances[burner] = balances[burner].sub(_value);\r\n\r\n        totalSupply = totalSupply.sub(_value);\r\n\r\n        Burn(burner, _value);\r\n\r\n    }\r\n\r\n}\r\n\r\n/**\r\n\r\n * File: zeppelin-solidity/contracts/ownership/Ownable.sol\r\n * @title Ownable\r\n\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n\r\n * functions, this simplifies the implementation of \u0022user permissions\u0022.\r\n\r\n */\r\n\r\ncontract Ownable {\r\n\r\n  address public owner;\r\n\r\n \r\n\r\n \r\n\r\n  function Ownable() public {\r\n\r\n    owner = msg.sender;\r\n\r\n  }\r\n\r\n \r\n\r\n \r\n\r\n  modifier onlyOwner() {\r\n\r\n    require(msg.sender == owner);\r\n\r\n    _;\r\n\r\n  }\r\n\r\n}\r\n\r\ncontract Pausable is Ownable {\r\n\r\n  event Pause();\r\n\r\n  event Unpause();\r\n\r\n \r\n\r\n  bool public paused = false;\r\n\r\n \r\n\r\n \r\n\r\n  /**\r\n\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n\r\n   */\r\n\r\n  modifier whenNotPaused() {\r\n\r\n    require(!paused);\r\n\r\n    _;\r\n\r\n  }\r\n\r\n \r\n\r\n  /**\r\n\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n\r\n   */\r\n\r\n  modifier whenPaused() {\r\n\r\n    require(paused);\r\n\r\n    _;\r\n\r\n  }\r\n\r\n \r\n\r\n  /**\r\n\r\n   * @dev called by the owner to pause, triggers stopped state\r\n\r\n   */\r\n\r\n  function pause() onlyOwner whenNotPaused public {\r\n\r\n    paused = true;\r\n\r\n     Pause();\r\n\r\n  }\r\n\r\n \r\n\r\n  /**\r\n\r\n   * @dev called by the owner to unpause, returns to normal state\r\n\r\n   */\r\n\r\n  function unpause() onlyOwner whenPaused public {\r\n\r\n    paused = false;\r\n\r\n     Unpause();\r\n\r\n  }\r\n\r\n    \r\n\r\n}\r\n\r\n\r\n\r\n/**\r\n * File: zeppelin-solidity/contracts/token/ERC20.sol\r\n\r\n * @title ERC20 interface\r\n\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n\r\n */\r\n\r\ncontract ERC20 is ERC20Basic {\r\n\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n}\r\n\r\n \r\n\r\n\r\n\r\n \r\n\r\n/**\r\n * File: zeppelin-solidity/contracts/token/StandardToken.sol\r\n * @title Standard ERC20 token\r\n\r\n *\r\n\r\n * @dev Implementation of the basic standard token.\r\n\r\n * @dev https://github.com/ethereum/EIPs/issues/20\r\n\r\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n\r\n */\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n \r\n\r\n  mapping (address =\u003E mapping (address =\u003E uint256)) internal allowed;\r\n \r\n\r\n  /**\r\n\r\n   * @dev Transfer tokens from one address to another\r\n\r\n   * @param _from address The address which you want to send tokens from\r\n\r\n   * @param _to address The address which you want to transfer to\r\n\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n\r\n   */\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n\r\n    require(_to != address(0));\r\n\r\n    require(_value \u003C= balances[_from]);\r\n\r\n    require(_value \u003C= allowed[_from][msg.sender]);\r\n\r\n \r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n\r\n    balances[_to] = balances[_to].add(_value);\r\n\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n\r\n    Transfer(_from, _to, _value);\r\n\r\n    return true;\r\n\r\n  }\r\n\r\n \r\n\r\n  /**\r\n\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n\r\n   *\r\n\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n\r\n   * race condition is to first reduce the spender\u0027s allowance to 0 and set the desired value afterwards:\r\n\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n\r\n   * @param _spender The address which will spend the funds.\r\n\r\n   * @param _value The amount of tokens to be spent.\r\n\r\n   */\r\n\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n\r\n    allowed[msg.sender][_spender] = _value;\r\n\r\n    Approval(msg.sender, _spender, _value);\r\n\r\n    return true;\r\n\r\n  }\r\n\r\n \r\n\r\n  /**\r\n\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n\r\n   * @param _owner address The address which owns the funds.\r\n\r\n   * @param _spender address The address which will spend the funds.\r\n\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n\r\n   */\r\n\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n\r\n    return allowed[_owner][_spender];\r\n\r\n  }\r\n\r\n \r\n\r\n  /**\r\n\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n\r\n   *\r\n\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n\r\n   * the first transaction is mined)\r\n\r\n   * From MonolithDAO Token.sol\r\n\r\n   * @param _spender The address which will spend the funds.\r\n\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n\r\n   */\r\n\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n\r\n    return true;\r\n\r\n  }\r\n\r\n \r\n\r\n  /**\r\n\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n\r\n   *\r\n\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n\r\n   * the first transaction is mined)\r\n\r\n   * From MonolithDAO Token.sol\r\n\r\n   * @param _spender The address which will spend the funds.\r\n\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n\r\n   */\r\n\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n\r\n    if (_subtractedValue \u003E oldValue) {\r\n\r\n      allowed[msg.sender][_spender] = 0;\r\n\r\n    } else {\r\n\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n\r\n    }\r\n\r\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n\r\n    return true;\r\n\r\n  }\r\n\r\n \r\n\r\n}\r\n\r\n \r\n\r\n\r\n\r\n \r\n\r\n/**\r\n * File: zeppelin-solidity/contracts/token/MintableToken.sol\r\n\r\n * @title Mintable token\r\n\r\n * @dev Simple ERC20 Token example, with mintable token creation\r\n\r\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\r\n\r\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\r\n\r\n */\r\n\r\n \r\n\r\ncontract MintableToken is StandardToken, Ownable {\r\n\r\n  event Mint(address indexed to, uint256 amount);\r\n\r\n  event MintFinished();\r\n\r\n \r\n\r\n  bool public mintingFinished = false;\r\n\r\n \r\n\r\n \r\n\r\n  modifier canMint() {\r\n\r\n    require(!mintingFinished);\r\n\r\n    _;\r\n\r\n  }\r\n\r\n \r\n\r\n  /**\r\n\r\n   * @dev Function to mint tokens\r\n\r\n   * @param _to The address that will receive the minted tokens.\r\n\r\n   * @param _amount The amount of tokens to mint.\r\n\r\n   * @return A boolean that indicates if the operation was successful.\r\n\r\n   */\r\n\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n\r\n    totalSupply = totalSupply.add(_amount);\r\n\r\n    balances[_to] = balances[_to].add(_amount);\r\n\r\n    Mint(_to, _amount);\r\n\r\n    Transfer(address(0), _to, _amount);\r\n\r\n    return true;\r\n\r\n  }\r\n\r\n \r\n\r\n}\r\n\r\n \r\n\r\n\r\n\r\n \r\n\r\n/**\r\n * File: zeppelin-solidity/contracts/token/CappedToken.sol\r\n \r\n * @title Capped token\r\n\r\n * @dev Mintable token with a token cap.\r\n\r\n */\r\n\r\n \r\n\r\ncontract CappedToken is MintableToken {\r\n\r\n \r\n\r\n  uint256 public cap;\r\n\r\n \r\n\r\n  function CappedToken(uint256 _cap) public {\r\n\r\n    require(_cap \u003E 0);\r\n\r\n    cap = _cap;\r\n\r\n  }\r\n\r\n \r\n\r\n  /**\r\n\r\n   * @dev Function to mint tokens\r\n\r\n   * @param _to The address that will receive the minted tokens.\r\n\r\n   * @param _amount The amount of tokens to mint.\r\n\r\n   * @return A boolean that indicates if the operation was successful.\r\n\r\n   */\r\n\r\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\r\n\r\n    require(totalSupply.add(_amount) \u003C= cap);\r\n\r\n \r\n\r\n    return super.mint(_to, _amount);\r\n\r\n  }\r\n\r\n \r\n\r\n}\r\n\r\n \r\n\r\n// File: zeppelin-solidity/contracts/token/DetailedERC20.sol\r\n\r\n \r\n\r\ncontract DetailedERC20 is ERC20 {\r\n\r\n  string public name;\r\n\r\n  string public symbol;\r\n\r\n  uint8 public decimals;\r\n\r\n \r\n\r\n  function DetailedERC20(string _name, string _symbol, uint8 _decimals) public {\r\n\r\n    name = _name;\r\n\r\n    symbol = _symbol;\r\n\r\n    decimals = _decimals;\r\n\r\n  }\r\n\r\n  \r\n\r\n}\r\n\r\n \r\n\r\n \r\n\r\n \r\n \r\n\r\n \r\n\r\ncontract GuardiansCoin is DetailedERC20, StandardToken, BurnableToken, CappedToken, Pausable {\r\n\r\n  /**\r\n\r\n   * @dev Set the maximum issuance cap and token details.\r\n\r\n   */\r\n\r\n  function GuardiansCoin()\r\n\r\n    DetailedERC20(\u0027Guardians of Equalism\u0027, \u0027GOE\u0027, 18)\r\n\r\n    CappedToken( 100 * (10**9) * (10**18) )\r\n\r\n  public {\r\n\r\n \r\n\r\n  }\r\n\r\n  \r\n\r\n}","ABI":"[{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022mintingFinished\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022name\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_spender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022approve\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022totalSupply\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_from\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022transferFrom\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022decimals\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint8\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022cap\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022unpause\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022mint\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022burn\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022paused\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_spender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_subtractedValue\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022decreaseApproval\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_owner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022balanceOf\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022balance\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022pause\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022owner\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022symbol\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022transfer\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_spender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_addedValue\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022increaseApproval\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_owner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_spender\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022allowance\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022constructor\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022Pause\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022Unpause\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022Mint\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022MintFinished\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022burner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022Burn\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022owner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022spender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022Approval\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022from\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022Transfer\u0022,\u0022type\u0022:\u0022event\u0022}]","ContractName":"GuardiansCoin","CompilerVersion":"v0.4.18\u002Bcommit.9cf6e910","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://34458087904878ae33a1d66e620153647110d00c4815e6f2e06a68323124d960"}]