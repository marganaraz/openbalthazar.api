[{"SourceCode":"pragma solidity ^0.5.11;\r\n\r\n// Voken Shareholders Contract for Voken2.0\r\n//\r\n// More info:\r\n//   https://vision.network\r\n//   https://voken.io\r\n//\r\n// Contact us:\r\n//   support@vision.network\r\n//   support@voken.io\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity\u0027s arithmetic operations with added overflow checks.\r\n */\r\nlibrary SafeMath256 {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a \u002B b;\r\n        require(c \u003E= a, \u0022SafeMath: addition overflow\u0022);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \u0022SafeMath: subtraction overflow\u0022);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b \u003C= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \u0022SafeMath: multiplication overflow\u0022);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \u0022SafeMath: division by zero\u0022);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b \u003E 0, errorMessage);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \u0022SafeMath: modulo by zero\u0022);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address =\u003E bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev Give an account access to this role.\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(!has(role, account), \u0022Roles: account already has role\u0022);\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Remove an account\u0027s access to this role.\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(has(role, account), \u0022Roles: account does not have role\u0022);\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Check if an account has this role.\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0), \u0022Roles: account is the zero address\u0022);\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard\r\n */\r\ninterface IERC20 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @dev Interface of an allocation contract\r\n */\r\ninterface IAllocation {\r\n    function reservedOf(address account) external view returns (uint256);\r\n}\r\n\r\n\r\n/**\r\n * @dev Interface of Voken2.0\r\n */\r\ninterface IVoken2 {\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function mintWithAllocation(address account, uint256 amount, address allocationContract) external returns (bool);\r\n}\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n */\r\ncontract Ownable {\r\n    address internal _owner;\r\n    address internal _newOwner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    event OwnershipAccepted(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addresses of the current and new owner.\r\n     */\r\n    function owner() public view returns (address currentOwner, address newOwner) {\r\n        currentOwner = _owner;\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(msg.sender), \u0022Ownable: caller is not the owner\u0022);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner(address account) public view returns (bool) {\r\n        return account == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (\u0060newOwner\u0060).\r\n     *\r\n     * IMPORTANT: Need to run {acceptOwnership} by the new owner.\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \u0022Ownable: new owner is the zero address\u0022);\r\n\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _newOwner = newOwner;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (\u0060newOwner\u0060).\r\n     *\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Accept ownership of the contract.\r\n     *\r\n     * Can only be called by the new owner.\r\n     */\r\n    function acceptOwnership() public {\r\n        require(msg.sender == _newOwner, \u0022Ownable: caller is not the new owner address\u0022);\r\n        require(msg.sender != address(0), \u0022Ownable: caller is the zero address\u0022);\r\n\r\n        emit OwnershipAccepted(_owner, msg.sender);\r\n        _owner = msg.sender;\r\n        _newOwner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Rescue compatible ERC20 Token\r\n     *\r\n     * Can only be called by the current owner.\r\n     */\r\n    function rescueTokens(address tokenAddr, address recipient, uint256 amount) external onlyOwner {\r\n        IERC20 _token = IERC20(tokenAddr);\r\n        require(recipient != address(0), \u0022Rescue: recipient is the zero address\u0022);\r\n        uint256 balance = _token.balanceOf(address(this));\r\n\r\n        require(balance \u003E= amount, \u0022Rescue: amount exceeds balance\u0022);\r\n        _token.transfer(recipient, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraw Ether\r\n     *\r\n     * Can only be called by the current owner.\r\n     */\r\n    function withdrawEther(address payable recipient, uint256 amount) external onlyOwner {\r\n        require(recipient != address(0), \u0022Withdraw: recipient is the zero address\u0022);\r\n\r\n        uint256 balance = address(this).balance;\r\n\r\n        require(balance \u003E= amount, \u0022Withdraw: amount exceeds balance\u0022);\r\n        recipient.transfer(amount);\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Voken Shareholders\r\n */\r\ncontract VokenShareholders is Ownable, IAllocation {\r\n    using SafeMath256 for uint256;\r\n    using Roles for Roles.Role;\r\n\r\n    IVoken2 private _VOKEN = IVoken2(0xFfFAb974088Bd5bF3d7E6F522e93Dd7861264cDB);\r\n    Roles.Role private _proxies;\r\n\r\n    uint256 private _ALLOCATION_TIMESTAMP = 1598918399; // Sun, 30 Aug 2020 23:59:59 \u002B0000\r\n    uint256 private _ALLOCATION_INTERVAL = 1 days;\r\n    uint256 private _ALLOCATION_STEPS = 60;\r\n\r\n    uint256 private _page;\r\n    uint256 private _weis;\r\n    uint256 private _vokens;\r\n\r\n    address[] private _shareholders;\r\n    mapping (address =\u003E bool) private _isShareholder;\r\n\r\n    mapping (address =\u003E uint256) private _withdrawPos;\r\n    mapping (uint256 =\u003E address[]) private _pageShareholders;\r\n    mapping (uint256 =\u003E mapping (address =\u003E bool)) private _isPageShareholder;\r\n\r\n    mapping (uint256 =\u003E uint256) private _pageEndingBlock;\r\n    mapping (uint256 =\u003E uint256) private _pageEthers;\r\n    mapping (uint256 =\u003E uint256) private _pageVokens;\r\n    mapping (uint256 =\u003E uint256) private _pageVokenSum;\r\n    mapping (uint256 =\u003E mapping (address =\u003E uint256)) private _pageVokenHoldings;\r\n    mapping (uint256 =\u003E mapping (address =\u003E uint256)) private _pageEtherDividends;\r\n\r\n    mapping (address =\u003E uint256) private _allocations;\r\n\r\n    event ProxyAdded(address indexed account);\r\n    event ProxyRemoved(address indexed account);\r\n    event Dividend(address indexed account, uint256 amount, uint256 page);\r\n\r\n\r\n    /**\r\n     * @dev Throws if called by account which is not a proxy.\r\n     */\r\n    modifier onlyProxy() {\r\n        require(isProxy(msg.sender), \u0022ProxyRole: caller does not have the Proxy role\u0022);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the \u0060account\u0060 has the Proxy role.\r\n     */\r\n    function isProxy(address account) public view returns (bool) {\r\n        return _proxies.has(account);\r\n    }\r\n\r\n    /**\r\n     * @dev Give an \u0060account\u0060 access to the Proxy role.\r\n     *\r\n     * Can only be called by the current owner.\r\n     */\r\n    function addProxy(address account) public onlyOwner {\r\n        _proxies.add(account);\r\n        emit ProxyAdded(account);\r\n    }\r\n\r\n    /**\r\n     * @dev Remove an \u0060account\u0060 access from the Proxy role.\r\n     *\r\n     * Can only be called by the current owner.\r\n     */\r\n    function removeProxy(address account) public onlyOwner {\r\n        _proxies.remove(account);\r\n        emit ProxyRemoved(account);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the VOKEN main contract address.\r\n     */\r\n    function VOKEN() public view returns (IVoken2) {\r\n        return _VOKEN;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the max page number.\r\n     */\r\n    function page() public view returns (uint256) {\r\n        return _page;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the amount of deposited Ether.\r\n     */\r\n    function weis() public view returns (uint256) {\r\n        return _weis;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the amount of VOKEN holding by all shareholders.\r\n     */\r\n    function vokens() public view returns (uint256) {\r\n        return _vokens;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the shareholders list on \u0060pageNumber\u0060.\r\n     */\r\n    function shareholders(uint256 pageNumber) public view returns (address[] memory) {\r\n        if (pageNumber \u003E 0) {\r\n            return _pageShareholders[pageNumber];\r\n        }\r\n\r\n        return _shareholders;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the shareholders counter on \u0060pageNumber\u0060.\r\n     */\r\n    function shareholdersCounter(uint256 pageNumber) public view returns (uint256) {\r\n        if (pageNumber \u003E 0) {\r\n            return _pageShareholders[pageNumber].length;\r\n        }\r\n\r\n        return _shareholders.length;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the amount of deposited Ether at \u0060pageNumber\u0060.\r\n     */\r\n    function pageEther(uint256 pageNumber) public view returns (uint256) {\r\n        return _pageEthers[pageNumber];\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the amount of deposited Ether till \u0060pageNumber\u0060.\r\n     */\r\n    function pageEtherSum(uint256 pageNumber) public view returns (uint256) {\r\n        uint256 __page = _pageNumber(pageNumber);\r\n        uint256 __amount;\r\n\r\n        for (uint256 i = 1; i \u003C= __page; i\u002B\u002B) {\r\n            __amount = __amount.add(_pageEthers[i]);\r\n        }\r\n\r\n        return __amount;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the amount of VOKEN holding by all shareholders at \u0060pageNumber\u0060.\r\n     */\r\n    function pageVoken(uint256 pageNumber) public view returns (uint256) {\r\n        return _pageVokens[pageNumber];\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the amount of VOKEN holding by all shareholders till \u0060pageNumber\u0060.\r\n     */\r\n    function pageVokenSum(uint256 pageNumber) public view returns (uint256) {\r\n        return _pageVokenSum[_pageNumber(pageNumber)];\r\n    }\r\n\r\n    /**\r\n     * Returns the ending block number of \u0060pageNumber\u0060.\r\n     */\r\n    function pageEndingBlock(uint256 pageNumber) public view returns (uint256) {\r\n        return _pageEndingBlock[pageNumber];\r\n    }\r\n\r\n    /**\r\n     * Returns the page number greater than 0 by \u0060pageNmber\u0060.\r\n     */\r\n    function _pageNumber(uint256 pageNumber) internal view returns (uint256) {\r\n        if (pageNumber \u003E 0) {\r\n            return pageNumber;\r\n        }\r\n\r\n        else {\r\n            return _page;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the amount of VOKEN holding by \u0060account\u0060 and \u0060pageNumber\u0060.\r\n     */\r\n    function vokenHolding(address account, uint256 pageNumber) public view returns (uint256) {\r\n        uint256 __page;\r\n        uint256 __amount;\r\n\r\n        if (pageNumber \u003E 0) {\r\n            __page = pageNumber;\r\n        }\r\n\r\n        else {\r\n            __page = _page;\r\n        }\r\n\r\n        for (uint256 i = 1; i \u003C= __page; i\u002B\u002B) {\r\n            __amount = __amount.add(_pageVokenHoldings[i][account]);\r\n        }\r\n\r\n        return __amount;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the ether dividend of \u0060account\u0060 on \u0060pageNumber\u0060.\r\n     */\r\n    function etherDividend(address account, uint256 pageNumber) public view returns (uint256 amount,\r\n                                                                                     uint256 dividend,\r\n                                                                                     uint256 remain) {\r\n        if (pageNumber \u003E 0) {\r\n            amount = pageEther(pageNumber).mul(vokenHolding(account, pageNumber)).div(pageVokenSum(pageNumber));\r\n            dividend = _pageEtherDividends[pageNumber][account];\r\n        }\r\n\r\n        else {\r\n            for (uint256 i = 1; i \u003C= _page; i\u002B\u002B) {\r\n                uint256 __pageEtherDividend = pageEther(i).mul(vokenHolding(account, i)).div(pageVokenSum(i));\r\n                amount = amount.add(__pageEtherDividend);\r\n                dividend = dividend.add(_pageEtherDividends[i][account]);\r\n            }\r\n        }\r\n\r\n        remain = amount.sub(dividend);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the allocation of \u0060account\u0060.\r\n     */\r\n    function allocation(address account) public view returns (uint256) {\r\n        return _allocations[account];\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the reserved amount of VOKENs by \u0060account\u0060.\r\n     */\r\n    function reservedOf(address account) public view returns (uint256 reserved) {\r\n        reserved = _allocations[account];\r\n\r\n        if (now \u003E _ALLOCATION_TIMESTAMP \u0026\u0026 reserved \u003E 0) {\r\n            uint256 __passed = now.sub(_ALLOCATION_TIMESTAMP).div(_ALLOCATION_INTERVAL).add(1);\r\n\r\n            if (__passed \u003E _ALLOCATION_STEPS) {\r\n                reserved = 0;\r\n            }\r\n            else {\r\n                reserved = reserved.sub(reserved.mul(__passed).div(_ALLOCATION_STEPS));\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Constructor\r\n     */\r\n    constructor () public {\r\n        _page = 1;\r\n\r\n        addProxy(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev {Deposit} or {Withdraw}\r\n     */\r\n    function () external payable {\r\n        // deposit\r\n        if (msg.value \u003E 0) {\r\n            _weis = _weis.add(msg.value);\r\n            _pageEthers[_page] = _pageEthers[_page].add(msg.value);\r\n        }\r\n\r\n        // withdraw\r\n        else if (_isShareholder[msg.sender]) {\r\n            uint256 __vokenHolding;\r\n\r\n            for (uint256 i = 1; i \u003C= _page.sub(1); i\u002B\u002B) {\r\n                __vokenHolding = __vokenHolding.add(_pageVokenHoldings[i][msg.sender]);\r\n\r\n                if (_withdrawPos[msg.sender] \u003C i) {\r\n                    uint256 __etherAmount = _pageEthers[i].mul(__vokenHolding).div(_pageVokenSum[i]);\r\n\r\n                    _withdrawPos[msg.sender] = i;\r\n                    _pageEtherDividends[i][msg.sender] = __etherAmount;\r\n\r\n                    msg.sender.transfer(__etherAmount);\r\n                    emit Dividend(msg.sender, __etherAmount, i);\r\n                }\r\n            }\r\n        }\r\n\r\n        assert(true);\r\n    }\r\n\r\n    /**\r\n     * @dev End the current page.\r\n     */\r\n    function endPage() public onlyProxy {\r\n        require(_pageEthers[_page] \u003E 0, \u0022Ethers on current page is zero.\u0022);\r\n\r\n        _pageEndingBlock[_page] = block.number;\r\n\r\n        _page = _page.add(1);\r\n        _pageVokenSum[_page] = _vokens;\r\n\r\n        assert(true);\r\n    }\r\n\r\n    /**\r\n     * @dev Push shareholders.\r\n     *\r\n     * Can only be called by a proxy.\r\n     */\r\n    function pushShareholders(address[] memory accounts, uint256[] memory values) public onlyProxy {\r\n        require(accounts.length == values.length, \u0022Shareholders: batch length is not match\u0022);\r\n\r\n        for (uint256 i = 0; i \u003C accounts.length; i\u002B\u002B) {\r\n            address __account = accounts[i];\r\n            uint256 __value = values[i];\r\n\r\n            if (!_isShareholder[__account]) {\r\n                _shareholders.push(__account);\r\n                _isShareholder[__account] = true;\r\n            }\r\n\r\n            if (!_isPageShareholder[_page][__account]) {\r\n                _pageShareholders[_page].push(__account);\r\n                _isPageShareholder[_page][__account] = true;\r\n            }\r\n\r\n            _vokens = _vokens.add(__value);\r\n            _pageVokens[_page] = _pageVokens[_page].add(__value);\r\n            _pageVokenSum[_page] = _vokens;\r\n            _pageVokenHoldings[_page][__account] = _pageVokenHoldings[_page][__account].add(__value);\r\n\r\n            _allocations[__account] = _allocations[__account].add(__value);\r\n            assert(_VOKEN.mintWithAllocation(__account, __value, address(this)));\r\n        }\r\n\r\n        assert(true);\r\n    }\r\n}","ABI":"[{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022pageNumber\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022pageVokenSum\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022page\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022pageNumber\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022pageVoken\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022pageNumber\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022etherDividend\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022dividend\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022remain\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022addProxy\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022isProxy\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022isOwner\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022pageNumber\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022pageEther\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address payable\u0022,\u0022name\u0022:\u0022recipient\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022withdrawEther\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022weis\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022vokens\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022acceptOwnership\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022pageNumber\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022vokenHolding\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022owner\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022currentOwner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022VOKEN\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022contract IVoken2\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022pageNumber\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022shareholders\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022address[]\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address[]\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022allocation\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022pageNumber\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022pageEndingBlock\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022removeProxy\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022pageNumber\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022pageEtherSum\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022reservedOf\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022reserved\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022pageNumber\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022shareholdersCounter\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022tokenAddr\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022recipient\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022rescueTokens\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022endPage\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address[]\u0022,\u0022name\u0022:\u0022accounts\u0022,\u0022type\u0022:\u0022address[]\u0022},{\u0022internalType\u0022:\u0022uint256[]\u0022,\u0022name\u0022:\u0022values\u0022,\u0022type\u0022:\u0022uint256[]\u0022}],\u0022name\u0022:\u0022pushShareholders\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022transferOwnership\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022constructor\u0022},{\u0022payable\u0022:true,\u0022stateMutability\u0022:\u0022payable\u0022,\u0022type\u0022:\u0022fallback\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022ProxyAdded\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022ProxyRemoved\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022page\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022Dividend\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022previousOwner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022OwnershipTransferred\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022previousOwner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022OwnershipAccepted\u0022,\u0022type\u0022:\u0022event\u0022}]","ContractName":"VokenShareholders","CompilerVersion":"v0.5.11\u002Bcommit.c082d0b4","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://df1453a35bf0ca89a94529531314292e5b6e3613b325063c0d67f4628925c392"}]