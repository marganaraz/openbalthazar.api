[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2020-01-07\r\n*/\r\n\r\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \u0022user permissions\u0022.\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original \u0060owner\u0060 of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @return the address of the owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner());\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return true if \u0060msg.sender\u0060 is the owner of the contract.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to relinquish control of the contract.\r\n     * @notice Renouncing to ownership will leave the contract without an owner.\r\n     * It will not be possible to call the functions with the \u0060onlyOwner\u0060\r\n     * modifier anymore.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/PaymentHandler.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * The payment handler is responsible for receiving payments.\r\n * If the payment is in ETH, it auto forwards to its parent master\u0027s owner.\r\n * If the payment is in ERC20, it holds the tokens until it is asked to sweep.\r\n * It can only sweep ERC20s to the parent master\u0027s owner.\r\n */\r\ncontract PaymentHandler {\r\n\r\n\t// Keep track of the parent master contract - cannot be changed once set\r\n\tPaymentMaster public master;\r\n\r\n\t/**\r\n\t * General constructor called by the master\r\n\t */\r\n\tconstructor(PaymentMaster _master) public {\r\n\t\tmaster = _master;\r\n\t}\r\n\r\n\t/**\r\n\t * Helper function to return the parent master\u0027s address\r\n\t */\r\n\tfunction getMasterAddress() public view returns (address) {\r\n\t\treturn address(master);\r\n\t}\r\n\r\n\t/**\r\n\t * Default payable function - forwards to the owner and triggers event\r\n\t */\r\n\tfunction() external payable {\r\n\t\t// Get the parent master\u0027s owner address - explicity convert to payable\r\n\t\taddress payable ownerAddress = address(uint160(master.owner()));\r\n\r\n\t\t// Forward the funds to the owner\r\n\t\townerAddress.transfer(msg.value);\r\n\r\n\t\t// Trigger the event notification in the parent master\r\n\t\tmaster.firePaymentReceivedEvent(address(this), msg.sender, msg.value);\r\n\t}\r\n\r\n\t/**\r\n\t * Sweep any tokens to the owner of the master\r\n\t */\r\n\tfunction sweepTokens(IERC20 token) public {\r\n\t\t// Get the owner address\r\n\t\taddress ownerAddress = master.owner();\r\n\r\n\t\t// Get the current balance\r\n\t\tuint balance = token.balanceOf(address(this));\r\n\r\n\t\t// Transfer to the owner\r\n\t\ttoken.transfer(ownerAddress, balance);\r\n\t}\r\n\r\n}\r\n\r\n// File: contracts/PaymentMaster.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * The PaymentMaster sits above the payment handler contracts.\r\n * It deploys and keeps track of all the handlers.\r\n * It can trigger events by child handlers when they receive ETH.\r\n * It allows ERC20 tokens to be swept in bulk to the owner account.\r\n */\r\ncontract PaymentMaster is Ownable {\r\n\r\n\t// A list of handler addresses for retrieval\r\n  address[] public handlerList;\r\n\r\n\t// A mapping of handler addresses for lookups\r\n\tmapping(address =\u003E bool) public handlerMap;\r\n\r\n\t// Events triggered for listeners\r\n\tevent HandlerCreated(address indexed _addr);\r\n\tevent EthPaymentReceived(address indexed _to, address indexed _from, uint256 _amount);\r\n\r\n\t/**\r\n\t * Anyone can call the function to deploy a new payment handler.\r\n\t * The new contract will be created, added to the list, and an event fired.\r\n\t */\r\n\tfunction deployNewHandler() public {\r\n\t\t// Deploy the new contract\r\n\t\tPaymentHandler createdHandler = new PaymentHandler(this);\r\n\r\n\t\t// Add it to the list and the mapping\r\n\t\thandlerList.push(address(createdHandler));\r\n\t\thandlerMap[address(createdHandler)] = true;\r\n\r\n\t\t// Emit event to let watchers know that a new handler was created\r\n\t\temit HandlerCreated(address(createdHandler));\r\n\t}\r\n\r\n\t/**\r\n\t * This is a convenience method to allow watchers to get the entire list\r\n\t */\r\n\tfunction getHandlerList() public view returns (address[] memory) {\r\n\t\t\t// Return the entire list\r\n      return handlerList;\r\n  }\r\n\r\n\t/**\r\n\t * Allows caller to determine how long the handler list is for convenience\r\n\t */\r\n\tfunction getHandlerListLength() public view returns (uint) {\r\n\t\treturn handlerList.length;\r\n\t}\r\n\r\n\t/**\r\n\t * This function is called by handlers when they receive ETH payments.\r\n\t */\r\n\tfunction firePaymentReceivedEvent(address to, address from, uint256 amount) public {\r\n\t\t// Verify the call is coming from a handler\r\n\t\trequire(handlerMap[msg.sender], \u0022Only payment handlers are allowed to trigger payment events.\u0022);\r\n\r\n\t\t// Emit the event\r\n\t\temit EthPaymentReceived(to, from, amount);\r\n\t}\r\n\r\n\t/**\r\n\t * Allows a caller to sweep multiple handlers in one transaction\r\n\t */\r\n\tfunction multiHandlerSweep(address[] memory handlers, IERC20 tokenContract) public {\r\n\t\tfor (uint i = 0; i \u003C handlers.length; i\u002B\u002B) {\r\n\r\n\t\t\t// Whitelist calls to only handlers\r\n\t\t\trequire(handlerMap[handlers[i]], \u0022Only payment handlers are valid sweep targets.\u0022);\r\n\r\n\t\t\t// Trigger sweep\r\n\t\t\tPaymentHandler(address(uint160(handlers[i]))).sweepTokens(tokenContract);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Safety function to allow sweep of ERC20s if accidentally sent to this contract\r\n\t */\r\n\tfunction sweepTokens(IERC20 token) public {\r\n\t\t// Get the current balance\r\n\t\tuint balance = token.balanceOf(address(this));\r\n\r\n\t\t// Transfer to the owner\r\n\t\ttoken.transfer(this.owner(), balance);\r\n\t}\r\n}","ABI":"[{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022handlers\u0022,\u0022type\u0022:\u0022address[]\u0022},{\u0022name\u0022:\u0022tokenContract\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022multiHandlerSweep\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022getHandlerListLength\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022handlerMap\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022renounceOwnership\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022owner\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022isOwner\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022handlerList\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022from\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022firePaymentReceivedEvent\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022getHandlerList\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address[]\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022deployNewHandler\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022transferOwnership\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022token\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022sweepTokens\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022_addr\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022HandlerCreated\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022_to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022_from\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022_amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022EthPaymentReceived\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022previousOwner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022OwnershipTransferred\u0022,\u0022type\u0022:\u0022event\u0022}]","ContractName":"PaymentMaster","CompilerVersion":"v0.5.10\u002Bcommit.5a6ea5b1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://ec0258f45465701f22ca95f52651d19812326006f4b932bd0b52df64d8377e4b"}]