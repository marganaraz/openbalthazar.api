[{"SourceCode":"pragma solidity 0.5.7;\r\n// produced by the Solididy File Flattener (c) David Appleton 2018\r\n// contact : dave@akomba.com\r\n// released under Apache 2.0 licence\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by \u0060account\u0060.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves \u0060amount\u0060 tokens from the caller\u0027s account to \u0060recipient\u0060.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that \u0060spender\u0060 will be\r\n     * allowed to spend on behalf of \u0060owner\u0060 through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets \u0060amount\u0060 as the allowance of \u0060spender\u0060 over the caller\u0027s tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves \u0060amount\u0060 tokens from \u0060sender\u0060 to \u0060recipient\u0060 using the\r\n     * allowance mechanism. \u0060amount\u0060 is then deducted from the caller\u0027s\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when \u0060value\u0060 tokens are moved from one account (\u0060from\u0060) to\r\n     * another (\u0060to\u0060).\r\n     *\r\n     * Note that \u0060value\u0060 may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a \u0060spender\u0060 for an \u0060owner\u0060 is set by\r\n     * a call to {approve}. \u0060value\u0060 is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060\u002B\u0060 operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a \u002B b;\r\n        require(c \u003E= a, \u0022SafeMath: addition overflow\u0022);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060-\u0060 operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \u0022SafeMath: subtraction overflow\u0022);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060-\u0060 operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * NOTE: This is a feature of the next version of OpenZeppelin Contracts.\r\n     * @dev Get it via \u0060npm install @openzeppelin/contracts@next\u0060.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b \u003C= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060*\u0060 operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\r\n        // benefit is lost if \u0027b\u0027 is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \u0022SafeMath: multiplication overflow\u0022);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060/\u0060 operator. Note: this function uses a\r\n     * \u0060revert\u0060 opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \u0022SafeMath: division by zero\u0022);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060/\u0060 operator. Note: this function uses a\r\n     * \u0060revert\u0060 opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     * NOTE: This is a feature of the next version of OpenZeppelin Contracts.\r\n     * @dev Get it via \u0060npm install @openzeppelin/contracts@next\u0060.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b \u003E 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c \u002B a % b); // There is no case in which this doesn\u0027t hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060%\u0060 operator. This function uses a \u0060revert\u0060\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \u0022SafeMath: modulo by zero\u0022);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060%\u0060 operator. This function uses a \u0060revert\u0060\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * NOTE: This is a feature of the next version of OpenZeppelin Contracts.\r\n     * @dev Get it via \u0060npm install @openzeppelin/contracts@next\u0060.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    address private _nominatedOwner;\r\n\r\n    event NewOwnerNominated(address indexed previousOwner, address indexed nominee);\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current nominated owner.\r\n     */\r\n    function nominatedOwner() external view returns (address) {\r\n        return _nominatedOwner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _onlyOwner();\r\n        _;\r\n    }\r\n\r\n    function _onlyOwner() internal view {\r\n        require(_msgSender() == _owner, \u0022caller is not owner\u0022);\r\n    }\r\n\r\n    /**\r\n     * @dev Nominates a new owner \u0060newOwner\u0060.\r\n     * Requires a follow-up \u0060acceptOwnership\u0060.\r\n     * Can only be called by the current owner.\r\n     */\r\n    function nominateNewOwner(address newOwner) external onlyOwner {\r\n        require(newOwner != address(0), \u0022new owner is 0 address\u0022);\r\n        emit NewOwnerNominated(_owner, newOwner);\r\n        _nominatedOwner = newOwner;\r\n    }\r\n\r\n    /**\r\n     * @dev Accepts ownership of the contract.\r\n     */\r\n    function acceptOwnership() external {\r\n        require(_nominatedOwner == _msgSender(), \u0022unauthorized\u0022);\r\n        emit OwnershipTransferred(_owner, _nominatedOwner);\r\n        _owner = _nominatedOwner;\r\n    }\r\n\r\n    /** Set \u0060_owner\u0060 to the 0 address.\r\n     * Only do this to deliberately lock in the current permissions.\r\n     *\r\n     * THIS CANNOT BE UNDONE! Call this only if you know what you\u0027re doing and why you\u0027re doing it!\r\n     */\r\n    function renounceOwnership(string calldata declaration) external onlyOwner {\r\n        string memory requiredDeclaration = \u0022I hereby renounce ownership of this contract forever.\u0022;\r\n        require(\r\n            keccak256(abi.encodePacked(declaration)) ==\r\n            keccak256(abi.encodePacked(requiredDeclaration)),\r\n            \u0022declaration incorrect\u0022);\r\n\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n}\r\n\r\ncontract ReserveEternalStorage is Ownable {\r\n\r\n    using SafeMath for uint256;\r\n\r\n\r\n    // ===== auth =====\r\n\r\n    address public reserveAddress;\r\n\r\n    event ReserveAddressTransferred(\r\n        address indexed oldReserveAddress,\r\n        address indexed newReserveAddress\r\n    );\r\n\r\n    /// On construction, set auth fields.\r\n    constructor() public {\r\n        reserveAddress = _msgSender();\r\n        emit ReserveAddressTransferred(address(0), reserveAddress);\r\n    }\r\n\r\n    /// Only run modified function if sent by \u0060reserveAddress\u0060.\r\n    modifier onlyReserveAddress() {\r\n        require(_msgSender() == reserveAddress, \u0022onlyReserveAddress\u0022);\r\n        _;\r\n    }\r\n\r\n    /// Set \u0060reserveAddress\u0060.\r\n    function updateReserveAddress(address newReserveAddress) external {\r\n        require(newReserveAddress != address(0), \u0022zero address\u0022);\r\n        require(_msgSender() == reserveAddress || _msgSender() == owner(), \u0022not authorized\u0022);\r\n        emit ReserveAddressTransferred(reserveAddress, newReserveAddress);\r\n        reserveAddress = newReserveAddress;\r\n    }\r\n\r\n\r\n\r\n    // ===== balance =====\r\n\r\n    mapping(address =\u003E uint256) public balance;\r\n\r\n    /// Add \u0060value\u0060 to \u0060balance[key]\u0060, unless this causes integer overflow.\r\n    ///\r\n    /// @dev This is a slight divergence from the strict Eternal Storage pattern, but it reduces\r\n    /// the gas for the by-far most common token usage, it\u0027s a *very simple* divergence, and\r\n    /// \u0060setBalance\u0060 is available anyway.\r\n    function addBalance(address key, uint256 value) external onlyReserveAddress {\r\n        balance[key] = balance[key].add(value);\r\n    }\r\n\r\n    /// Subtract \u0060value\u0060 from \u0060balance[key]\u0060, unless this causes integer underflow.\r\n    function subBalance(address key, uint256 value) external onlyReserveAddress {\r\n        balance[key] = balance[key].sub(value);\r\n    }\r\n\r\n    /// Set \u0060balance[key]\u0060 to \u0060value\u0060.\r\n    function setBalance(address key, uint256 value) external onlyReserveAddress {\r\n        balance[key] = value;\r\n    }\r\n\r\n\r\n\r\n    // ===== allowed =====\r\n\r\n    mapping(address =\u003E mapping(address =\u003E uint256)) public allowed;\r\n\r\n    /// Set \u0060to\u0060\u0027s allowance of \u0060from\u0060\u0027s tokens to \u0060value\u0060.\r\n    function setAllowed(address from, address to, uint256 value) external onlyReserveAddress {\r\n        allowed[from][to] = value;\r\n    }\r\n}\r\n\r\ninterface ITXFee {\r\n     function calculateFee(address from, address to, uint256 amount) external returns (uint256);\r\n}\r\n\r\ncontract Reserve is IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n\r\n    // ==== State ====\r\n\r\n\r\n    // Non-constant-sized data\r\n    ReserveEternalStorage internal trustedData;\r\n\r\n    // TX Fee helper contract\r\n    ITXFee public trustedTxFee;\r\n\r\n    // Basic token data\r\n    uint256 public totalSupply;\r\n    uint256 public maxSupply;\r\n\r\n    // Paused data\r\n    bool public paused;\r\n\r\n    // Auth roles\r\n    address public minter;\r\n    address public pauser;\r\n    address public feeRecipient;\r\n\r\n\r\n    // ==== Events, Constants, and Constructor ====\r\n\r\n\r\n    // Auth role change events\r\n    event MinterChanged(address indexed newMinter);\r\n    event PauserChanged(address indexed newPauser);\r\n    event FeeRecipientChanged(address indexed newFeeRecipient);\r\n    event MaxSupplyChanged(uint256 indexed newMaxSupply);\r\n    event EternalStorageTransferred(address indexed newReserveAddress);\r\n    event TxFeeHelperChanged(address indexed newTxFeeHelper);\r\n\r\n    // Pause events\r\n    event Paused(address indexed account);\r\n    event Unpaused(address indexed account);\r\n\r\n    // Basic information as constants\r\n    string public constant name = \u0022Reserve\u0022;\r\n    string public constant symbol = \u0022RSV\u0022;\r\n    uint8 public constant decimals = 18;\r\n\r\n    /// Initialize critical fields.\r\n    constructor() public {\r\n        pauser = msg.sender;\r\n        feeRecipient = msg.sender;\r\n        // minter defaults to the zero address.\r\n\r\n        maxSupply = 2 ** 256 - 1;\r\n        paused = true;\r\n\r\n        trustedTxFee = ITXFee(address(0));\r\n        trustedData = new ReserveEternalStorage();\r\n        trustedData.nominateNewOwner(msg.sender);\r\n    }\r\n\r\n    /// Accessor for eternal storage contract address.\r\n    function getEternalStorageAddress() external view returns(address) {\r\n        return address(trustedData);\r\n    }\r\n\r\n\r\n    // ==== Admin functions ====\r\n\r\n\r\n    /// Modifies a function to only run if sent by \u0060role\u0060.\r\n    modifier only(address role) {\r\n        require(msg.sender == role, \u0022unauthorized: not role holder\u0022);\r\n        _;\r\n    }\r\n\r\n    /// Modifies a function to only run if sent by \u0060role\u0060 or the contract\u0027s \u0060owner\u0060.\r\n    modifier onlyOwnerOr(address role) {\r\n        require(msg.sender == owner() || msg.sender == role, \u0022unauthorized: not owner or role\u0022);\r\n        _;\r\n    }\r\n\r\n    /// Change who holds the \u0060minter\u0060 role.\r\n    function changeMinter(address newMinter) external onlyOwnerOr(minter) {\r\n        minter = newMinter;\r\n        emit MinterChanged(newMinter);\r\n    }\r\n\r\n    /// Change who holds the \u0060pauser\u0060 role.\r\n    function changePauser(address newPauser) external onlyOwnerOr(pauser) {\r\n        pauser = newPauser;\r\n        emit PauserChanged(newPauser);\r\n    }\r\n\r\n    function changeFeeRecipient(address newFeeRecipient) external onlyOwnerOr(feeRecipient) {\r\n        feeRecipient = newFeeRecipient;\r\n        emit FeeRecipientChanged(newFeeRecipient);\r\n    }\r\n\r\n    /// Make a different address the EternalStorage contract\u0027s reserveAddress.\r\n    /// This will break this contract, so only do it if you\u0027re\r\n    /// abandoning this contract, e.g., for an upgrade.\r\n    function transferEternalStorage(address newReserveAddress) external onlyOwner isPaused {\r\n        require(newReserveAddress != address(0), \u0022zero address\u0022);\r\n        emit EternalStorageTransferred(newReserveAddress);\r\n        trustedData.updateReserveAddress(newReserveAddress);\r\n    }\r\n\r\n    /// Change the contract that helps with transaction fee calculation.\r\n    function changeTxFeeHelper(address newTrustedTxFee) external onlyOwner {\r\n        trustedTxFee = ITXFee(newTrustedTxFee);\r\n        emit TxFeeHelperChanged(newTrustedTxFee);\r\n    }\r\n\r\n    /// Change the maximum supply allowed.\r\n    function changeMaxSupply(uint256 newMaxSupply) external onlyOwner {\r\n        maxSupply = newMaxSupply;\r\n        emit MaxSupplyChanged(newMaxSupply);\r\n    }\r\n\r\n    /// Pause the contract.\r\n    function pause() external only(pauser) {\r\n        paused = true;\r\n        emit Paused(pauser);\r\n    }\r\n\r\n    /// Unpause the contract.\r\n    function unpause() external only(pauser) {\r\n        paused = false;\r\n        emit Unpaused(pauser);\r\n    }\r\n\r\n    /// Modifies a function to run only when the contract is paused.\r\n    modifier isPaused() {\r\n        require(paused, \u0022contract is not paused\u0022);\r\n        _;\r\n    }\r\n\r\n    /// Modifies a function to run only when the contract is not paused.\r\n    modifier notPaused() {\r\n        require(!paused, \u0022contract is paused\u0022);\r\n        _;\r\n    }\r\n\r\n\r\n    // ==== Token transfers, allowances, minting, and burning ====\r\n\r\n\r\n    /// @return how many attoRSV are held by \u0060holder\u0060.\r\n    function balanceOf(address holder) external view returns (uint256) {\r\n        return trustedData.balance(holder);\r\n    }\r\n\r\n    /// @return how many attoRSV \u0060holder\u0060 has allowed \u0060spender\u0060 to control.\r\n    function allowance(address holder, address spender) external view returns (uint256) {\r\n        return trustedData.allowed(holder, spender);\r\n    }\r\n\r\n    /// Transfer \u0060value\u0060 attoRSV from \u0060msg.sender\u0060 to \u0060to\u0060.\r\n    function transfer(address to, uint256 value)\r\n        external\r\n        notPaused\r\n        returns (bool)\r\n    {\r\n        _transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Approve \u0060spender\u0060 to spend \u0060value\u0060 attotokens on behalf of \u0060msg.sender\u0060.\r\n     *\r\n     * Beware that changing a nonzero allowance with this method brings the risk that\r\n     * someone may use both the old and the new allowance by unfortunate transaction ordering. One\r\n     * way to mitigate this risk is to first reduce the spender\u0027s allowance\r\n     * to 0, and then set the desired value afterwards, per\r\n     * [this ERC-20 issue](https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729).\r\n     *\r\n     * A simpler workaround is to use \u0060increaseAllowance\u0060 or \u0060decreaseAllowance\u0060, below.\r\n     *\r\n     * @param spender address The address which will spend the funds.\r\n     * @param value uint256 How many attotokens to allow \u0060spender\u0060 to spend.\r\n     */\r\n    function approve(address spender, uint256 value)\r\n        external\r\n        notPaused\r\n        returns (bool)\r\n    {\r\n        _approve(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    /// Transfer approved tokens from one address to another.\r\n    /// @param from address The address to send tokens from.\r\n    /// @param to address The address to send tokens to.\r\n    /// @param value uint256 The number of attotokens to send.\r\n    function transferFrom(address from, address to, uint256 value)\r\n        external\r\n        notPaused\r\n        returns (bool)\r\n    {\r\n        _transfer(from, to, value);\r\n        _approve(from, msg.sender, trustedData.allowed(from, msg.sender).sub(value));\r\n        return true;\r\n    }\r\n\r\n    /// Increase \u0060spender\u0060\u0027s allowance of the sender\u0027s tokens.\r\n    /// @dev From MonolithDAO Token.sol\r\n    /// @param spender The address which will spend the funds.\r\n    /// @param addedValue How many attotokens to increase the allowance by.\r\n    function increaseAllowance(address spender, uint256 addedValue)\r\n        external\r\n        notPaused\r\n        returns (bool)\r\n    {\r\n        _approve(msg.sender, spender, trustedData.allowed(msg.sender, spender).add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /// Decrease \u0060spender\u0060\u0027s allowance of the sender\u0027s tokens.\r\n    /// @dev From MonolithDAO Token.sol\r\n    /// @param spender The address which will spend the funds.\r\n    /// @param subtractedValue How many attotokens to decrease the allowance by.\r\n    function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        external\r\n        notPaused\r\n        returns (bool)\r\n    {\r\n        _approve(\r\n            msg.sender,\r\n            spender,\r\n            trustedData.allowed(msg.sender, spender).sub(subtractedValue)\r\n        );\r\n        return true;\r\n    }\r\n\r\n    /// Mint \u0060value\u0060 new attotokens to \u0060account\u0060.\r\n    function mint(address account, uint256 value)\r\n        external\r\n        notPaused\r\n        only(minter)\r\n    {\r\n        require(account != address(0), \u0022can\u0027t mint to address zero\u0022);\r\n\r\n        totalSupply = totalSupply.add(value);\r\n        require(totalSupply \u003C maxSupply, \u0022max supply exceeded\u0022);\r\n        trustedData.addBalance(account, value);\r\n        emit Transfer(address(0), account, value);\r\n    }\r\n\r\n    /// Burn \u0060value\u0060 attotokens from \u0060account\u0060, if sender has that much allowance from \u0060account\u0060.\r\n    function burnFrom(address account, uint256 value)\r\n        external\r\n        notPaused\r\n        only(minter)\r\n    {\r\n        _burn(account, value);\r\n        _approve(account, msg.sender, trustedData.allowed(account, msg.sender).sub(value));\r\n    }\r\n\r\n    /// @dev Transfer of \u0060value\u0060 attotokens from \u0060from\u0060 to \u0060to\u0060.\r\n    /// Internal; doesn\u0027t check permissions.\r\n    function _transfer(address from, address to, uint256 value) internal {\r\n        require(to != address(0), \u0022can\u0027t transfer to address zero\u0022);\r\n        trustedData.subBalance(from, value);\r\n        uint256 fee = 0;\r\n\r\n        if (address(trustedTxFee) != address(0)) {\r\n            fee = trustedTxFee.calculateFee(from, to, value);\r\n            require(fee \u003C= value, \u0022transaction fee out of bounds\u0022);\r\n\r\n            trustedData.addBalance(feeRecipient, fee);\r\n            emit Transfer(from, feeRecipient, fee);\r\n        }\r\n\r\n        trustedData.addBalance(to, value.sub(fee));\r\n        emit Transfer(from, to, value.sub(fee));\r\n    }\r\n\r\n    /// @dev Burn \u0060value\u0060 attotokens from \u0060account\u0060.\r\n    /// Internal; doesn\u0027t check permissions.\r\n    function _burn(address account, uint256 value) internal {\r\n        require(account != address(0), \u0022can\u0027t burn from address zero\u0022);\r\n\r\n        totalSupply = totalSupply.sub(value);\r\n        trustedData.subBalance(account, value);\r\n        emit Transfer(account, address(0), value);\r\n    }\r\n\r\n    /// @dev Set \u0060spender\u0060\u0027s allowance on \u0060holder\u0060\u0027s tokens to \u0060value\u0060 attotokens.\r\n    /// Internal; doesn\u0027t check permissions.\r\n    function _approve(address holder, address spender, uint256 value) internal {\r\n        require(spender != address(0), \u0022spender cannot be address zero\u0022);\r\n        require(holder != address(0), \u0022holder cannot be address zero\u0022);\r\n\r\n        trustedData.setAllowed(holder, spender, value);\r\n        emit Approval(holder, spender, value);\r\n    }\r\n}","ABI":"[{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022name\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022minter\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022spender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022approve\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022nominateNewOwner\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022totalSupply\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022newFeeRecipient\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022changeFeeRecipient\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022from\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022transferFrom\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022newMinter\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022changeMinter\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022newPauser\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022changePauser\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022decimals\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint8\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022spender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022addedValue\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022increaseAllowance\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022unpause\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022newMaxSupply\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022changeMaxSupply\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022mint\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022feeRecipient\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022declaration\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022name\u0022:\u0022renounceOwnership\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022nominatedOwner\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022paused\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022holder\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022balanceOf\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022acceptOwnership\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022burnFrom\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022pause\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022owner\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022symbol\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022newReserveAddress\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022transferEternalStorage\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022pauser\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022spender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022subtractedValue\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022decreaseAllowance\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022transfer\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022newTrustedTxFee\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022changeTxFeeHelper\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022trustedTxFee\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022maxSupply\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022holder\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022spender\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022allowance\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022getEternalStorageAddress\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022constructor\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022newMinter\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022MinterChanged\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022newPauser\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022PauserChanged\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022newFeeRecipient\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022FeeRecipientChanged\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022newMaxSupply\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022MaxSupplyChanged\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022newReserveAddress\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022EternalStorageTransferred\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022newTxFeeHelper\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022TxFeeHelperChanged\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022Paused\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022Unpaused\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022previousOwner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022nominee\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022NewOwnerNominated\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022previousOwner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022OwnershipTransferred\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022from\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022Transfer\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022owner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022spender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022Approval\u0022,\u0022type\u0022:\u0022event\u0022}]","ContractName":"Reserve","CompilerVersion":"v0.5.7\u002Bcommit.6da8b019","OptimizationUsed":"1","Runs":"1000000","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://3f41f21ac65fb659dfc5d43511d3d95725f5541fcedf1e3b55b78f90c97a4eff"}]