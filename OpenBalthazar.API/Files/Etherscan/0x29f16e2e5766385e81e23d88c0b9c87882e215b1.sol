[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract Context {\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    constructor () internal {\r\n        _owner = _msgSender();\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \u0022Ownable: caller is not the owner\u0022);\r\n        _;\r\n    }\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \u0022Ownable: new owner is the zero address\u0022);\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract ReentrancyGuard {\r\n    uint256 private _guardCounter;\r\n\r\n    constructor () internal {\r\n        _guardCounter = 1;\r\n    }\r\n\r\n    modifier nonReentrant() {\r\n        _guardCounter \u002B= 1;\r\n        uint256 localCounter = _guardCounter;\r\n        _;\r\n        require(localCounter == _guardCounter, \u0022ReentrancyGuard: reentrant call\u0022);\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a \u002B b;\r\n        require(c \u003E= a, \u0022SafeMath: addition overflow\u0022);\r\n\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \u0022SafeMath: subtraction overflow\u0022);\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b \u003C= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \u0022SafeMath: multiplication overflow\u0022);\r\n\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \u0022SafeMath: division by zero\u0022);\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b \u003E 0, errorMessage);\r\n        uint256 c = a / b;\r\n\r\n        return c;\r\n    }\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \u0022SafeMath: modulo by zero\u0022);\r\n    }\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { codehash := extcodehash(account) }\r\n        return (codehash != 0x0 \u0026\u0026 codehash != accountHash);\r\n    }\r\n    function toPayable(address account) internal pure returns (address payable) {\r\n        return address(uint160(account));\r\n    }\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance \u003E= amount, \u0022Address: insufficient balance\u0022);\r\n\r\n        // solhint-disable-next-line avoid-call-value\r\n        (bool success, ) = recipient.call.value(amount)(\u0022\u0022);\r\n        require(success, \u0022Address: unable to send value, recipient may have reverted\u0022);\r\n    }\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \u0022SafeERC20: approve from non-zero to non-zero allowance\u0022\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \u0022SafeERC20: decreased allowance below zero\u0022);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        require(address(token).isContract(), \u0022SafeERC20: call to non-contract\u0022);\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \u0022SafeERC20: low-level call failed\u0022);\r\n\r\n        if (returndata.length \u003E 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \u0022SafeERC20: ERC20 operation did not succeed\u0022);\r\n        }\r\n    }\r\n}\r\n\r\ninterface ICurveFi {\r\n  function exchange_underlying(\r\n    int128 from, int128 to, uint256 _from_amount, uint256 _min_to_amount\r\n  ) external;\r\n}\r\n\r\ninterface yERC20 {\r\n  function deposit(uint256 _amount) external;\r\n  function withdraw(uint256 _amount) external;\r\n  function getPricePerFullShare() external view returns (uint256);\r\n}\r\n\r\ninterface borrower {\r\n  function borrowAave(address _reserve, uint256 _amount) external;\r\n  function getBorrowDebt(address _reserve) external view returns (uint256);\r\n  function getBorrowInterest(address _reserve) external view returns (uint256);\r\n  function repayAave(address _reserve, uint256 _amount) external;\r\n}\r\n\r\ncontract iTrade is ReentrancyGuard, Ownable {\r\n  using SafeERC20 for IERC20;\r\n  using Address for address;\r\n  using SafeMath for uint256;\r\n\r\n  address public constant yCurveSwap = address(0x45F783CCE6B7FF23B2ab2D70e416cdb7D6055f51);\r\n\r\n  address public constant yDAI = address(0x16de59092dAE5CcF4A1E6439D611fd0653f0Bd01);\r\n  address public constant yUSDC = address(0xd6aD7a6750A7593E092a9B218d66C0A814a3436e);\r\n  address public constant yUSDT = address(0x83f798e925BcD4017Eb265844FDDAbb448f1707D);\r\n  address public constant yTUSD = address(0x73a052500105205d34Daf004eAb301916DA8190f);\r\n\r\n  address public constant DAI = address(0x6B175474E89094C44Da98b954EedeAC495271d0F);\r\n  address public constant USDC = address(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);\r\n  address public constant USDT = address(0xdAC17F958D2ee523a2206206994597C13D831ec7);\r\n  address public constant TUSD = address(0x0000000000085d4780B73119b644AE5ecd22b376);\r\n\r\n  address public constant collateral = address(0xCC784c1d240dD721a02a121448fBE474ffa3Defa);\r\n\r\n  uint256 public constant ltv = uint256(150);\r\n  uint256 public constant base = uint256(100);\r\n\r\n  // principal deposits\r\n  mapping (address =\u003E mapping (address =\u003E uint256)) public principals;\r\n\r\n  // debt shares\r\n  mapping (address =\u003E mapping (address =\u003E uint256)) public debts;\r\n  mapping (address =\u003E uint256) public debtsTotalSupply;\r\n\r\n  mapping (address =\u003E mapping (address =\u003E uint256)) public positions;\r\n\r\n  constructor() public {\r\n    approveToken();\r\n  }\r\n\r\n  function approveToken() public {\r\n      // Repayments to Aave\r\n      IERC20(DAI).safeApprove(collateral, uint(-1));\r\n      IERC20(USDC).safeApprove(collateral, uint(-1));\r\n      IERC20(TUSD).safeApprove(collateral, uint(-1));\r\n\r\n      IERC20(USDT).safeApprove(collateral, uint(0));\r\n      IERC20(USDT).safeApprove(collateral, uint(-1));\r\n\r\n      // Approvals for swaps\r\n      IERC20(DAI).safeApprove(yCurveSwap, uint(-1));\r\n      IERC20(USDC).safeApprove(yCurveSwap, uint(-1));\r\n      IERC20(TUSD).safeApprove(yCurveSwap, uint(-1));\r\n\r\n      IERC20(USDT).safeApprove(yCurveSwap, uint(0));\r\n      IERC20(USDT).safeApprove(yCurveSwap, uint(-1));\r\n  }\r\n\r\n  function addCollateral(address _reserve, address _to, uint256 _amount, uint256 _min_to_amount, uint256 leverage) external {\r\n      require(isLeverage(leverage) == true, \u0022itrade: invalid leverage parameter\u0022);\r\n      require(isReserve(_reserve) == true, \u0022itrade: invalid reserve\u0022);\r\n\r\n      IERC20(_reserve).safeTransferFrom(msg.sender, address(this), _amount);\r\n      principals[_reserve][msg.sender] = principals[_reserve][msg.sender].add(_amount);\r\n      yERC20(getYToken(_reserve)).deposit(_amount);\r\n\r\n      uint256 _borrow = (_amount.mul(leverage));\r\n      uint256 _pool = borrower(collateral).getBorrowDebt(_reserve);\r\n      uint256 _debt = 0;\r\n      if (_pool == 0) {\r\n        _debt = _borrow;\r\n      } else {\r\n        _debt = (_borrow.mul(debtsTotalSupply[_reserve])).div(_pool);\r\n      }\r\n      _mintDebt(_reserve, msg.sender, _debt);\r\n      borrower(collateral).borrowAave(_reserve, _amount);\r\n\r\n      uint8 _fromID = getCurveID(_reserve);\r\n      uint8 _toID = getCurveID(_to);\r\n      require(IERC20(_to).balanceOf(address(this)) == 0, \u0022itrade: unexpected result\u0022);\r\n      ICurveFi(yCurveSwap).exchange_underlying(_fromID, _toID, _borrow, _min_to_amount);\r\n      uint256 _bought = IERC20(_to).balanceOf(address(this));\r\n      positions[_to][msg.sender] = positions[_to][msg.sender].add(_bought);\r\n\r\n      yERC20(getYToken(_to)).deposit(_bought);\r\n  }\r\n\r\n  function withdrawCollateral(address _reserve, uint256 _amount) external {\r\n      require(isReserve(_reserve) == true, \u0022itrade: invalid reserve\u0022);\r\n      require(getUserDebt(_reserve, msg.sender) == 0, \u0022itrade: outstanding debt to settle\u0022);\r\n\r\n      require(_amount \u003C= principals[_reserve][msg.sender], \u0022itrade: insufficient balance\u0022);\r\n      require(IERC20(_reserve).balanceOf(address(this)) == 0, \u0022itrade: unexpected result\u0022);\r\n\r\n      uint256 _price = yERC20(getYToken(_reserve)).getPricePerFullShare();\r\n      uint256 _ytoken = _amount.mul(1e18).div(_price);\r\n      yERC20(getYToken(_reserve)).withdraw(_ytoken);\r\n\r\n      require(IERC20(_reserve).balanceOf(address(this)) \u003E= _amount, \u0022itrade: unexpected result\u0022);\r\n      principals[_reserve][msg.sender] = principals[_reserve][msg.sender].sub(_amount);\r\n\r\n      IERC20(_reserve).safeTransfer(msg.sender, _amount);\r\n\r\n      // Cleanup dust (if any)\r\n      if (IERC20(_reserve).balanceOf(address(this)) \u003E 0) {\r\n        yERC20(getYToken(_reserve)).deposit(IERC20(_reserve).balanceOf(address(this)));\r\n      }\r\n  }\r\n\r\n  function repayDebt(address _reserve, uint256 _amount) external {\r\n      require(isReserve(_reserve) == true, \u0022itrade: invalid reserve\u0022);\r\n\r\n      uint256 debt = getUserDebt(_reserve, msg.sender);\r\n\r\n      if (_amount \u003E debt) {\r\n        _amount = debt;\r\n      }\r\n\r\n      IERC20(_reserve).safeTransferFrom(msg.sender, address(this), _amount);\r\n      uint256 shares = debts[_reserve][msg.sender].mul(_amount).div(debt);\r\n      borrower(collateral).repayAave(_reserve, _amount);\r\n      _burnDebt(_reserve, msg.sender, shares);\r\n  }\r\n\r\n  function settle(address _reserve) external {\r\n      require(isReserve(_reserve) == true, \u0022itrade: invalid reserve\u0022);\r\n\r\n      uint256 _debt = getUserDebt(_reserve, msg.sender);\r\n      IERC20(_reserve).safeTransferFrom(msg.sender, address(this), _debt);\r\n      borrower(collateral).repayAave(_reserve, _debt);\r\n      _burnDebt(_reserve, msg.sender, debts[_reserve][msg.sender]);\r\n  }\r\n\r\n  function tradePosition(address _reserve, address _to, uint256 _amount, uint256 _min_to_amount) external {\r\n      require(isReserve(_reserve) == true, \u0022itrade: invalid reserve\u0022);\r\n      require(_amount \u003C= positions[_reserve][msg.sender], \u0022itrade: insufficient balance\u0022);\r\n      require(IERC20(_reserve).balanceOf(address(this)) == 0, \u0022itrade: unexpected result\u0022);\r\n\r\n      uint256 _price = yERC20(getYToken(_reserve)).getPricePerFullShare();\r\n      uint256 _ytoken = _amount.mul(1e18).div(_price);\r\n      yERC20(getYToken(_reserve)).withdraw(_ytoken);\r\n\r\n      require(IERC20(_reserve).balanceOf(address(this)) \u003E= _amount, \u0022itrade: unexpected result\u0022);\r\n      require(IERC20(_to).balanceOf(address(this)) == 0, \u0022itrade: unexpected result\u0022);\r\n\r\n      uint8 _fromID = getCurveID(_reserve);\r\n      uint8 _toID = getCurveID(_to);\r\n\r\n      ICurveFi(yCurveSwap).exchange_underlying(_fromID, _toID, _amount, _min_to_amount);\r\n      positions[_reserve][msg.sender] = positions[_reserve][msg.sender].sub(_amount);\r\n      uint256 _bought = IERC20(_to).balanceOf(address(this));\r\n      positions[_to][msg.sender] = positions[_to][msg.sender].add(_bought);\r\n      yERC20(getYToken(_to)).deposit(_bought);\r\n\r\n      // Cleanup dust (if any)\r\n      if (IERC20(_reserve).balanceOf(address(this)) \u003E 0) {\r\n        yERC20(getYToken(_reserve)).deposit(IERC20(_reserve).balanceOf(address(this)));\r\n      }\r\n  }\r\n\r\n  function closePosition(address _reserve, uint256 _amount) external {\r\n      require(isReserve(_reserve) == true, \u0022itrade: invalid reserve\u0022);\r\n      require(_amount \u003C= positions[_reserve][msg.sender], \u0022itrade: insufficient balance\u0022);\r\n      require(IERC20(_reserve).balanceOf(address(this)) == 0, \u0022itrade: unexpected result\u0022);\r\n\r\n      uint256 debt = getUserDebt(_reserve, msg.sender);\r\n      uint256 ret = 0;\r\n\r\n      if (_amount \u003E debt) {\r\n        ret = _amount.sub(debt);\r\n        _amount = debt;\r\n      }\r\n\r\n      uint256 _price = yERC20(getYToken(_reserve)).getPricePerFullShare();\r\n      uint256 _ytoken = _amount.mul(1e18).div(_price);\r\n      yERC20(getYToken(_reserve)).withdraw(_ytoken);\r\n\r\n      uint256 shares = debts[_reserve][msg.sender].mul(_amount).div(debt);\r\n      borrower(collateral).repayAave(_reserve, _amount);\r\n      _burnDebt(_reserve, msg.sender, shares);\r\n\r\n      // Profits from trade\r\n      if (ret \u003E 0) {\r\n        IERC20(_reserve).safeTransfer(msg.sender, ret);\r\n      }\r\n\r\n      // Cleanup dust (if any)\r\n      if (IERC20(_reserve).balanceOf(address(this)) \u003E 0) {\r\n        yERC20(getYToken(_reserve)).deposit(IERC20(_reserve).balanceOf(address(this)));\r\n      }\r\n  }\r\n\r\n  function getUserDebt(address _reserve, address _user) public view returns (uint256) {\r\n      return borrower(collateral).getBorrowDebt(_reserve).mul(debts[_reserve][_user]).div(debtsTotalSupply[_reserve]);\r\n  }\r\n\r\n  function getUserInterest(address _reserve, address _user) public view returns (uint256) {\r\n      return borrower(collateral).getBorrowInterest(_reserve).mul(debts[_reserve][_user]).div(debtsTotalSupply[_reserve]);\r\n  }\r\n  function _mintDebt(address _reserve, address account, uint256 amount) internal {\r\n      require(account != address(0), \u0022DEBT: mint to the zero address\u0022);\r\n      debtsTotalSupply[_reserve] = debtsTotalSupply[_reserve].add(amount);\r\n      debts[_reserve][account] = debts[_reserve][account].add(amount);\r\n  }\r\n  function _burnDebt(address _reserve, address account, uint256 amount) internal {\r\n      require(account != address(0), \u0022DEBT: burn from the zero address\u0022);\r\n      debts[_reserve][account] = debts[_reserve][account].sub(amount, \u0022DEBT: burn amount exceeds balance\u0022);\r\n      debtsTotalSupply[_reserve] = debtsTotalSupply[_reserve].sub(amount);\r\n  }\r\n  function getYToken(address _reserve) public pure returns (address) {\r\n      if (_reserve == DAI) {\r\n        return yDAI;\r\n      } else if (_reserve == USDC) {\r\n        return yUSDC;\r\n      } else if (_reserve == USDT) {\r\n        return yUSDT;\r\n      /*} else if (_reserve == TUSD) {\r\n        return yTUSD;*/\r\n      } else {\r\n        return address(0x0);\r\n      }\r\n  }\r\n  function getCurveID(address _reserve) public pure returns (uint8) {\r\n      if (_reserve == DAI) {\r\n        return uint8(1);\r\n      } else if (_reserve == USDC) {\r\n        return uint8(2);\r\n      } else if (_reserve == USDT) {\r\n        return uint8(3);\r\n      /*} else if (_reserve == TUSD) {\r\n        return uint8(4);*/\r\n      } else {\r\n        return uint8(0);\r\n      }\r\n  }\r\n  function isReserve(address _reserve) public pure returns (bool) {\r\n      if (_reserve == DAI) {\r\n        return true;\r\n      } else if (_reserve == USDC) {\r\n        return true;\r\n      } else if (_reserve == USDT) {\r\n        return true;\r\n    /*  } else if (_reserve == TUSD) {\r\n        return true;*/\r\n      } else {\r\n        return false;\r\n      }\r\n  }\r\n  function isLeverage(uint256 leverage) public pure returns (bool) {\r\n      if (leverage == 2||\r\n        leverage == 5||\r\n        leverage == 10||\r\n        leverage == 25||\r\n        leverage == 50||\r\n        leverage == 75||\r\n        leverage == 100||\r\n        leverage == 1000) {\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n  }\r\n  // incase of half-way error\r\n  function inCaseTokenGetsStuck(IERC20 _TokenAddress) onlyOwner public {\r\n      uint qty = _TokenAddress.balanceOf(address(this));\r\n      _TokenAddress.safeTransfer(msg.sender, qty);\r\n  }\r\n  // incase of half-way error\r\n  function inCaseETHGetsStuck() onlyOwner public{\r\n      (bool result, ) = msg.sender.call.value(address(this).balance)(\u0022\u0022);\r\n      require(result, \u0022transfer of ETH failed\u0022);\r\n  }\r\n}","ABI":"[{\u0022inputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022constructor\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022previousOwner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022OwnershipTransferred\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022DAI\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022TUSD\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022USDC\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022USDT\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_reserve\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_amount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_min_to_amount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022leverage\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022addCollateral\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022approveToken\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022base\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_reserve\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022closePosition\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022collateral\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022debts\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022debtsTotalSupply\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_reserve\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022getCurveID\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint8\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint8\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022pure\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_reserve\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_user\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022getUserDebt\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_reserve\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_user\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022getUserInterest\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_reserve\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022getYToken\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022pure\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022inCaseETHGetsStuck\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022contract IERC20\u0022,\u0022name\u0022:\u0022_TokenAddress\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022inCaseTokenGetsStuck\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022leverage\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022isLeverage\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022pure\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022isOwner\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_reserve\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022isReserve\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022pure\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022ltv\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022owner\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022positions\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022principals\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022renounceOwnership\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_reserve\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022repayDebt\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_reserve\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022settle\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_reserve\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_amount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_min_to_amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022tradePosition\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022transferOwnership\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_reserve\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022withdrawCollateral\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022yCurveSwap\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022yDAI\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022yTUSD\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022yUSDC\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022yUSDT\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022}]","ContractName":"iTrade","CompilerVersion":"v0.5.12\u002Bcommit.7709ece9","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://d6ef63442e53954ef8996168410076f9e4535b54b839713c6f803d932ca5ba19"}]