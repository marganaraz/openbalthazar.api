[{"SourceCode":"// File: contracts/interfaces/CERC20.sol\r\n\r\npragma solidity 0.5.11;\r\n\r\ninterface CERC20 {\r\n  function mint(uint256 mintAmount) external returns (uint256);\r\n  function redeem(uint256 redeemTokens) external returns (uint256);\r\n  function exchangeRateStored() external view returns (uint256);\r\n  function supplyRatePerBlock() external view returns (uint256);\r\n\r\n  function borrowRatePerBlock() external view returns (uint256);\r\n  function totalReserves() external view returns (uint256);\r\n  function getCash() external view returns (uint256);\r\n  function totalBorrows() external view returns (uint256);\r\n  function reserveFactorMantissa() external view returns (uint256);\r\n  function interestRateModel() external view returns (address);\r\n}\r\n\r\n// File: contracts/interfaces/iERC20Fulcrum.sol\r\n\r\npragma solidity 0.5.11;\r\n\r\ninterface iERC20Fulcrum {\r\n  function mint(\r\n    address receiver,\r\n    uint256 depositAmount)\r\n    external\r\n    returns (uint256 mintAmount);\r\n\r\n  function burn(\r\n    address receiver,\r\n    uint256 burnAmount)\r\n    external\r\n    returns (uint256 loanAmountPaid);\r\n\r\n  function tokenPrice()\r\n    external\r\n    view\r\n    returns (uint256 price);\r\n\r\n  function supplyInterestRate()\r\n    external\r\n    view\r\n    returns (uint256);\r\n\r\n  function rateMultiplier()\r\n    external\r\n    view\r\n    returns (uint256);\r\n  function baseRate()\r\n    external\r\n    view\r\n    returns (uint256);\r\n\r\n  function borrowInterestRate()\r\n    external\r\n    view\r\n    returns (uint256);\r\n\r\n  function avgBorrowInterestRate()\r\n    external\r\n    view\r\n    returns (uint256);\r\n\r\n  function protocolInterestRate()\r\n    external\r\n    view\r\n    returns (uint256);\r\n\r\n  function spreadMultiplier()\r\n    external\r\n    view\r\n    returns (uint256);\r\n\r\n  function totalAssetBorrow()\r\n    external\r\n    view\r\n    returns (uint256);\r\n\r\n  function totalAssetSupply()\r\n    external\r\n    view\r\n    returns (uint256);\r\n\r\n  function nextSupplyInterestRate(uint256)\r\n    external\r\n    view\r\n    returns (uint256);\r\n\r\n  function nextBorrowInterestRate(uint256)\r\n    external\r\n    view\r\n    returns (uint256);\r\n  function nextLoanInterestRate(uint256)\r\n    external\r\n    view\r\n    returns (uint256);\r\n\r\n  function claimLoanToken()\r\n    external\r\n    returns (uint256 claimedAmount);\r\n\r\n  function dsr()\r\n    external\r\n    view\r\n    returns (uint256);\r\n\r\n  function chaiPrice()\r\n    external\r\n    view\r\n    returns (uint256);\r\n}\r\n\r\n// File: contracts/interfaces/ILendingProtocol.sol\r\n\r\npragma solidity 0.5.11;\r\n\r\ninterface ILendingProtocol {\r\n  function mint() external returns (uint256);\r\n  function redeem(address account) external returns (uint256);\r\n  function nextSupplyRate(uint256 amount) external view returns (uint256);\r\n  function nextSupplyRateWithParams(uint256[] calldata params) external view returns (uint256);\r\n  function getAPR() external view returns (uint256);\r\n  function getPriceInToken() external view returns (uint256);\r\n  function token() external view returns (address);\r\n  function underlying() external view returns (address);\r\n}\r\n\r\n// File: contracts/interfaces/WhitePaperInterestRateModel.sol\r\n\r\npragma solidity 0.5.11;\r\n\r\ninterface WhitePaperInterestRateModel {\r\n  function getBorrowRate(uint256 cash, uint256 borrows, uint256 _reserves) external view returns (uint256, uint256);\r\n  function getSupplyRate(uint256 cash, uint256 borrows, uint256 reserves, uint256 reserveFactorMantissa) external view returns (uint256);\r\n  function multiplier() external view returns (uint256);\r\n  function baseRate() external view returns (uint256);\r\n  function blocksPerYear() external view returns (uint256);\r\n  function dsrPerBlock() external view returns (uint256);\r\n}\r\n\r\n// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * \u0060onlyOwner\u0060, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        _owner = _msgSender();\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \u0022Ownable: caller is not the owner\u0022);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * \u0060onlyOwner\u0060 functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (\u0060newOwner\u0060).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (\u0060newOwner\u0060).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \u0022Ownable: new owner is the zero address\u0022);\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by \u0060account\u0060.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves \u0060amount\u0060 tokens from the caller\u0027s account to \u0060recipient\u0060.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that \u0060spender\u0060 will be\r\n     * allowed to spend on behalf of \u0060owner\u0060 through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets \u0060amount\u0060 as the allowance of \u0060spender\u0060 over the caller\u0027s tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves \u0060amount\u0060 tokens from \u0060sender\u0060 to \u0060recipient\u0060 using the\r\n     * allowance mechanism. \u0060amount\u0060 is then deducted from the caller\u0027s\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when \u0060value\u0060 tokens are moved from one account (\u0060from\u0060) to\r\n     * another (\u0060to\u0060).\r\n     *\r\n     * Note that \u0060value\u0060 may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a \u0060spender\u0060 for an \u0060owner\u0060 is set by\r\n     * a call to {approve}. \u0060value\u0060 is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity\u0027s arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * \u0060SafeMath\u0060 restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it\u0027s recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060\u002B\u0060 operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a \u002B b;\r\n        require(c \u003E= a, \u0022SafeMath: addition overflow\u0022);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060-\u0060 operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \u0022SafeMath: subtraction overflow\u0022);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060-\u0060 operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b \u003C= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060*\u0060 operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\r\n        // benefit is lost if \u0027b\u0027 is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \u0022SafeMath: multiplication overflow\u0022);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060/\u0060 operator. Note: this function uses a\r\n     * \u0060revert\u0060 opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \u0022SafeMath: division by zero\u0022);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060/\u0060 operator. Note: this function uses a\r\n     * \u0060revert\u0060 opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b \u003E 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c \u002B a % b); // There is no case in which this doesn\u0027t hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060%\u0060 operator. This function uses a \u0060revert\u0060\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \u0022SafeMath: modulo by zero\u0022);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060%\u0060 operator. This function uses a \u0060revert\u0060\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: contracts/IdleRebalancerV2.sol\r\n\r\n/**\r\n * @title: Idle Rebalancer contract\r\n * @summary: Used for calculating amounts to lend on each implemented protocol.\r\n *           This implementation works with Compound and Fulcrum only,\r\n *           when a new protocol will be added this should be replaced\r\n * @author: William Bergamo, idle.finance\r\n */\r\npragma solidity 0.5.11;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract IdleRebalancerV2 is Ownable {\r\n  using SafeMath for uint256;\r\n  // IdleToken address\r\n  address public idleToken;\r\n  // protocol token (cToken) address\r\n  address public cToken;\r\n  // protocol token (iToken) address\r\n  address public iToken;\r\n  // cToken protocol wrapper IdleCompound\r\n  address public cWrapper;\r\n  // iToken protocol wrapper IdleFulcrum\r\n  address public iWrapper;\r\n  // max % difference between next supply rate of Fulcrum and Compound\r\n  uint256 public maxRateDifference; // 10**17 -\u003E 0.1 %\r\n  // max % difference between off-chain user supplied params for rebalance and actual amount to be rebalanced\r\n  uint256 public maxSupplyedParamsDifference; // 100000 -\u003E 0.001%\r\n  // max number of recursive calls for bisection algorithm\r\n  uint256 public maxIterations;\r\n\r\n  /**\r\n   * @param _cToken : cToken address\r\n   * @param _iToken : iToken address\r\n   * @param _cWrapper : cWrapper address\r\n   * @param _iWrapper : iWrapper address\r\n   */\r\n  constructor(address _cToken, address _iToken, address _cWrapper, address _iWrapper) public {\r\n    require(_cToken != address(0) \u0026\u0026 _iToken != address(0) \u0026\u0026 _cWrapper != address(0) \u0026\u0026 _iWrapper != address(0), \u0027some addr is 0\u0027);\r\n\r\n    cToken = _cToken;\r\n    iToken = _iToken;\r\n    cWrapper = _cWrapper;\r\n    iWrapper = _iWrapper;\r\n    maxRateDifference = 10**17; // 0.1%\r\n    maxSupplyedParamsDifference = 100000; // 0.001%\r\n    maxIterations = 30;\r\n  }\r\n\r\n  /**\r\n   * Throws if called by any account other than IdleToken contract.\r\n   */\r\n  modifier onlyIdle() {\r\n    require(msg.sender == idleToken, \u0022Ownable: caller is not IdleToken contract\u0022);\r\n    _;\r\n  }\r\n\r\n  // onlyOwner\r\n  /**\r\n   * sets idleToken address\r\n   * NOTE: can be called only once. It\u0027s not on the constructor because we are deploying this contract\r\n   *       after the IdleToken contract\r\n   * @param _idleToken : idleToken address\r\n   */\r\n  function setIdleToken(address _idleToken)\r\n    external onlyOwner {\r\n      require(idleToken == address(0), \u0022idleToken addr already set\u0022);\r\n      require(_idleToken != address(0), \u0022_idleToken addr is 0\u0022);\r\n      idleToken = _idleToken;\r\n  }\r\n\r\n  /**\r\n   * sets maxIterations for bisection recursive calls\r\n   * @param _maxIterations : max rate difference in percentage scaled by 10**18\r\n   */\r\n  function setMaxIterations(uint256 _maxIterations)\r\n    external onlyOwner {\r\n      maxIterations = _maxIterations;\r\n  }\r\n\r\n  /**\r\n   * sets maxRateDifference\r\n   * @param _maxDifference : max rate difference in percentage scaled by 10**18\r\n   */\r\n  function setMaxRateDifference(uint256 _maxDifference)\r\n    external onlyOwner {\r\n      maxRateDifference = _maxDifference;\r\n  }\r\n\r\n  /**\r\n   * sets maxSupplyedParamsDifference\r\n   * @param _maxSupplyedParamsDifference : max rate difference in percentage scaled by 10**18\r\n   */\r\n  function setMaxSupplyedParamsDifference(uint256 _maxSupplyedParamsDifference)\r\n    external onlyOwner {\r\n      maxSupplyedParamsDifference = _maxSupplyedParamsDifference;\r\n  }\r\n  // end onlyOwner\r\n\r\n  /**\r\n   * Used by IdleToken contract to calculate the amount to be lended\r\n   * on each protocol in order to get the best available rate for all funds.\r\n   *\r\n   * @param _rebalanceParams : first param is the total amount to be rebalanced,\r\n   *                           all other elements are client side calculated amounts to put on each lending protocol\r\n   * @return tokenAddresses : array with all token addresses used,\r\n   *                          currently [cTokenAddress, iTokenAddress]\r\n   * @return amounts : array with all amounts for each protocol in order,\r\n   *                   currently [amountCompound, amountFulcrum]\r\n   */\r\n  function calcRebalanceAmounts(uint256[] calldata _rebalanceParams)\r\n    external view onlyIdle\r\n    returns (address[] memory tokenAddresses, uint256[] memory amounts)\r\n  {\r\n    // Get all params for calculating Compound nextSupplyRateWithParams\r\n    CERC20 _cToken = CERC20(cToken);\r\n    WhitePaperInterestRateModel white = WhitePaperInterestRateModel(_cToken.interestRateModel());\r\n\r\n    uint256[] memory paramsCompound = new uint256[](6);\r\n    paramsCompound[0] = _cToken.totalBorrows(); // b\r\n    paramsCompound[1] = _cToken.getCash(); // s\r\n    paramsCompound[2] = _cToken.totalReserves();\r\n    paramsCompound[3] = _cToken.reserveFactorMantissa();\r\n    paramsCompound[4] = white.blocksPerYear();\r\n\r\n    // Get all params for calculating Fulcrum nextSupplyRateWithParams\r\n    iERC20Fulcrum _iToken = iERC20Fulcrum(iToken);\r\n    uint256[] memory paramsFulcrum = new uint256[](3);\r\n    paramsFulcrum[0] = _iToken.totalAssetBorrow(); // b1\r\n    paramsFulcrum[1] = _iToken.totalAssetSupply(); // s1\r\n\r\n    tokenAddresses = new address[](2);\r\n    tokenAddresses[0] = cToken;\r\n    tokenAddresses[1] = iToken;\r\n\r\n    // _rebalanceParams should be [totAmountToRebalance, amountCompound, amountFulcrum];\r\n    if (_rebalanceParams.length == 3) {\r\n      (bool amountsAreCorrect, uint256[] memory checkedAmounts) = checkRebalanceAmounts(_rebalanceParams, paramsCompound, paramsFulcrum);\r\n      if (amountsAreCorrect) {\r\n        return (tokenAddresses, checkedAmounts);\r\n      }\r\n    }\r\n\r\n    // Initial guess for shrinking initial bisection interval\r\n    /*\r\n      Compound: (getCash returns the available supply only, not the borrowed one)\r\n      getCash \u002B totalBorrows = totalSuppliedCompound\r\n\r\n      Fulcrum:\r\n      totalSupply = totalSuppliedFulcrum\r\n\r\n      we try to correlate borrow and supply on both markets\r\n      totC = totalSuppliedCompound \u002B totalBorrowsCompound\r\n      totF = totalSuppliedFulcrum \u002B totalBorrowsFulcrum\r\n\r\n      n : (totC \u002B totF) = x : totF\r\n      x = n * totF / (totC \u002B totF)\r\n    */\r\n\r\n    uint256 amountFulcrum = _rebalanceParams[0].mul(paramsFulcrum[1].add(paramsFulcrum[0])).div(\r\n      paramsFulcrum[1].add(paramsFulcrum[0]).add(paramsCompound[1].add(paramsCompound[0]).add(paramsCompound[0]))\r\n    );\r\n\r\n    // Recursive bisection algorithm\r\n    amounts = bisectionRec(\r\n      _rebalanceParams[0].sub(amountFulcrum), // amountCompound\r\n      amountFulcrum,\r\n      maxRateDifference, // 0.1% of rate difference,\r\n      0, // currIter\r\n      maxIterations, // maxIter\r\n      _rebalanceParams[0],\r\n      paramsCompound,\r\n      paramsFulcrum\r\n    ); // returns [amountCompound, amountFulcrum]\r\n\r\n    return (tokenAddresses, amounts);\r\n  }\r\n  /**\r\n   * Used by IdleToken contract to check if provided amounts\r\n   * causes the rates of Fulcrum and Compound to be balanced\r\n   * (counting a tolerance)\r\n   *\r\n   * @param rebalanceParams : first element is the total amount to be rebalanced,\r\n   *                   the rest is an array with all amounts for each protocol in order,\r\n   *                   currently [amountCompound, amountFulcrum]\r\n   * @param paramsCompound : array with all params (except for the newDAIAmount)\r\n   *                          for calculating next supply rate of Compound\r\n   * @param paramsFulcrum : array with all params (except for the newDAIAmount)\r\n   *                          for calculating next supply rate of Fulcrum\r\n   * @return bool : if provided amount correctly rebalances the pool\r\n   */\r\n  function checkRebalanceAmounts(\r\n    uint256[] memory rebalanceParams,\r\n    uint256[] memory paramsCompound,\r\n    uint256[] memory paramsFulcrum\r\n  )\r\n    internal view\r\n    returns (bool, uint256[] memory checkedAmounts)\r\n  {\r\n    // This is the amount that should be rebalanced no more no less\r\n    uint256 actualAmountToBeRebalanced = rebalanceParams[0]; // n\r\n    // interest is earned between when tx was submitted and when it is mined so params sent by users\r\n    // should always be slightly less than what should be rebalanced\r\n    uint256 totAmountSentByUser;\r\n    for (uint8 i = 1; i \u003C rebalanceParams.length; i\u002B\u002B) {\r\n      totAmountSentByUser = totAmountSentByUser.add(rebalanceParams[i]);\r\n    }\r\n\r\n    // check if amounts sent from user are less than actualAmountToBeRebalanced and\r\n    // at most \u0060actualAmountToBeRebalanced - 0.001% of (actualAmountToBeRebalanced)\u0060\r\n    if (totAmountSentByUser \u003E actualAmountToBeRebalanced ||\r\n        totAmountSentByUser.add(totAmountSentByUser.div(maxSupplyedParamsDifference)) \u003C actualAmountToBeRebalanced) {\r\n      return (false, new uint256[](2));\r\n    }\r\n\r\n    uint256 interestToBeSplitted = actualAmountToBeRebalanced.sub(totAmountSentByUser);\r\n\r\n    // sets newDAIAmount for each protocol\r\n    paramsCompound[5] = rebalanceParams[1].add(interestToBeSplitted.div(2));\r\n    paramsFulcrum[2] = rebalanceParams[2].add(interestToBeSplitted.sub(interestToBeSplitted.div(2)));\r\n\r\n    // calculate next rates with amountCompound and amountFulcrum\r\n    uint256 currFulcRate = ILendingProtocol(iWrapper).nextSupplyRateWithParams(paramsFulcrum);\r\n    uint256 currCompRate = ILendingProtocol(cWrapper).nextSupplyRateWithParams(paramsCompound);\r\n    bool isCompoundBest = currCompRate \u003E currFulcRate;\r\n    // |fulcrumRate - compoundRate| \u003C= tolerance\r\n    bool areParamsOk = (currFulcRate.add(maxRateDifference) \u003E= currCompRate \u0026\u0026 isCompoundBest) ||\r\n      (currCompRate.add(maxRateDifference) \u003E= currFulcRate \u0026\u0026 !isCompoundBest);\r\n\r\n    uint256[] memory actualParams = new uint256[](2);\r\n    actualParams[0] = paramsCompound[5];\r\n    actualParams[1] = paramsFulcrum[2];\r\n\r\n    return (areParamsOk, actualParams);\r\n  }\r\n\r\n  /**\r\n   * Internal implementation of our bisection algorithm\r\n   *\r\n   * @param amountCompound : amount to be lended in compound in current iteration\r\n   * @param amountFulcrum : amount to be lended in Fulcrum in current iteration\r\n   * @param tolerance : max % difference between next supply rate of Fulcrum and Compound\r\n   * @param currIter : current iteration\r\n   * @param maxIter : max number of iterations\r\n   * @param n : amount of underlying tokens (eg. DAI) to rebalance\r\n   * @param paramsCompound : array with all params (except for the newDAIAmount)\r\n   *                          for calculating next supply rate of Compound\r\n   * @param paramsFulcrum : array with all params (except for the newDAIAmount)\r\n   *                          for calculating next supply rate of Fulcrum\r\n   * @return amounts : array with all amounts for each protocol in order,\r\n   *                   currently [amountCompound, amountFulcrum]\r\n   */\r\n  function bisectionRec(\r\n    uint256 amountCompound, uint256 amountFulcrum,\r\n    uint256 tolerance, uint256 currIter, uint256 maxIter, uint256 n,\r\n    uint256[] memory paramsCompound,\r\n    uint256[] memory paramsFulcrum\r\n  )\r\n    internal view\r\n    returns (uint256[] memory amounts) {\r\n\r\n    // sets newDAIAmount for each protocol\r\n    paramsCompound[5] = amountCompound;\r\n    paramsFulcrum[2] = amountFulcrum;\r\n\r\n    // calculate next rates with amountCompound and amountFulcrum\r\n    uint256 currFulcRate = ILendingProtocol(iWrapper).nextSupplyRateWithParams(paramsFulcrum);\r\n    uint256 currCompRate = ILendingProtocol(cWrapper).nextSupplyRateWithParams(paramsCompound);\r\n    bool isCompoundBest = currCompRate \u003E currFulcRate;\r\n\r\n    // bisection interval update, we choose to halve the smaller amount\r\n    uint256 step = amountCompound \u003C amountFulcrum ? amountCompound.div(2) : amountFulcrum.div(2);\r\n\r\n    // base case\r\n    // |fulcrumRate - compoundRate| \u003C= tolerance\r\n    if (\r\n      ((currFulcRate.add(tolerance) \u003E= currCompRate \u0026\u0026 isCompoundBest) ||\r\n      (currCompRate.add(tolerance) \u003E= currFulcRate \u0026\u0026 !isCompoundBest)) ||\r\n      currIter \u003E= maxIter\r\n    ) {\r\n      amounts = new uint256[](2);\r\n      amounts[0] = amountCompound;\r\n      amounts[1] = amountFulcrum;\r\n      return amounts;\r\n    }\r\n\r\n    return bisectionRec(\r\n      isCompoundBest ? amountCompound.add(step) : amountCompound.sub(step),\r\n      isCompoundBest ? amountFulcrum.sub(step) : amountFulcrum.add(step),\r\n      tolerance, currIter \u002B 1, maxIter, n,\r\n      paramsCompound, // paramsCompound[5] would be overwritten on next iteration\r\n      paramsFulcrum // paramsFulcrum[2] would be overwritten on next iteration\r\n    );\r\n  }\r\n}","ABI":"[{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022idleToken\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_maxIterations\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022setMaxIterations\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022maxIterations\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022iToken\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022maxRateDifference\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022cToken\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022renounceOwnership\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022iWrapper\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022owner\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022isOwner\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_idleToken\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022setIdleToken\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_maxSupplyedParamsDifference\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022setMaxSupplyedParamsDifference\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_maxDifference\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022setMaxRateDifference\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022maxSupplyedParamsDifference\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022cWrapper\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022transferOwnership\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256[]\u0022,\u0022name\u0022:\u0022_rebalanceParams\u0022,\u0022type\u0022:\u0022uint256[]\u0022}],\u0022name\u0022:\u0022calcRebalanceAmounts\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022address[]\u0022,\u0022name\u0022:\u0022tokenAddresses\u0022,\u0022type\u0022:\u0022address[]\u0022},{\u0022internalType\u0022:\u0022uint256[]\u0022,\u0022name\u0022:\u0022amounts\u0022,\u0022type\u0022:\u0022uint256[]\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_cToken\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_iToken\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_cWrapper\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_iWrapper\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022constructor\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022previousOwner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022OwnershipTransferred\u0022,\u0022type\u0022:\u0022event\u0022}]","ContractName":"IdleRebalancerV2","CompilerVersion":"v0.5.11\u002Bcommit.c082d0b4","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000005d3a536e4d6dbd6114cc1ead35777bab948e3643000000000000000000000000493c57c4763932315a328269e1adad09653b90810000000000000000000000000e90cf05acb23d8dfa856a74e74a165c6a7af8b300000000000000000000000044b6cdda5d030b29eec58009f6f474082313c470","Library":"","SwarmSource":"bzzr://5a424db758b6addf08a11a24b57696a4a9c6627d45a1a23505619c1e57f27e2e"}]