[{"SourceCode":"pragma solidity 0.5.2;\r\n\r\n/***************\r\n**            **\r\n** INTERFACES **\r\n**            **\r\n***************/\r\n\r\n/**\r\n * @dev Interface of OpenZeppelin\u0027s ERC20; For definitions / documentation, see below.\r\n */\r\ninterface IERC20 {\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function totalSupply() external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n}\r\n\r\n/****************************\r\n**                         **\r\n** OPEN ZEPPELIN CONTRACTS **\r\n**                         **\r\n****************************/\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20Mintable}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning \u0060false\u0060 on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn\u0027t required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address =\u003E uint256) private _balances;\r\n\r\n    mapping (address =\u003E mapping (address =\u003E uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - \u0060recipient\u0060 cannot be the zero address.\r\n     * - the caller must have a balance of at least \u0060amount\u0060.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - \u0060spender\u0060 cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        _approve(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - \u0060sender\u0060 and \u0060recipient\u0060 cannot be the zero address.\r\n     * - \u0060sender\u0060 must have a balance of at least \u0060value\u0060.\r\n     * - the caller must have allowance for \u0060sender\u0060\u0027s tokens of at least\r\n     * \u0060amount\u0060.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount, \u0022ERC20: transfer amount exceeds allowance\u0022));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to \u0060spender\u0060 by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - \u0060spender\u0060 cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to \u0060spender\u0060 by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - \u0060spender\u0060 cannot be the zero address.\r\n     * - \u0060spender\u0060 must have allowance for the caller of at least\r\n     * \u0060subtractedValue\u0060.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue, \u0022ERC20: decreased allowance below zero\u0022));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens \u0060amount\u0060 from \u0060sender\u0060 to \u0060recipient\u0060.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - \u0060sender\u0060 cannot be the zero address.\r\n     * - \u0060recipient\u0060 cannot be the zero address.\r\n     * - \u0060sender\u0060 must have a balance of at least \u0060amount\u0060.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \u0022ERC20: transfer from the zero address\u0022);\r\n        require(recipient != address(0), \u0022ERC20: transfer to the zero address\u0022);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \u0022ERC20: transfer amount exceeds balance\u0022);\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates \u0060amount\u0060 tokens and assigns them to \u0060account\u0060, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with \u0060from\u0060 set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - \u0060to\u0060 cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \u0022ERC20: mint to the zero address\u0022);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n     /**\r\n     * @dev Destroys \u0060amount\u0060 tokens from \u0060account\u0060, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with \u0060to\u0060 set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - \u0060account\u0060 cannot be the zero address.\r\n     * - \u0060account\u0060 must have at least \u0060amount\u0060 tokens.\r\n     */\r\n    function _burn(address account, uint256 value) internal {\r\n        require(account != address(0), \u0022ERC20: burn from the zero address\u0022);\r\n\r\n        _balances[account] = _balances[account].sub(value, \u0022ERC20: burn amount exceeds balance\u0022);\r\n        _totalSupply = _totalSupply.sub(value);\r\n        emit Transfer(account, address(0), value);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets \u0060amount\u0060 as the allowance of \u0060spender\u0060 over the \u0060owner\u0060s tokens.\r\n     *\r\n     * This is internal function is equivalent to \u0060approve\u0060, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - \u0060owner\u0060 cannot be the zero address.\r\n     * - \u0060spender\u0060 cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 value) internal {\r\n        require(owner != address(0), \u0022ERC20: approve from the zero address\u0022);\r\n        require(spender != address(0), \u0022ERC20: approve to the zero address\u0022);\r\n\r\n        _allowances[owner][spender] = value;\r\n        emit Approval(owner, spender, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Destoys \u0060amount\u0060 tokens from \u0060account\u0060.\u0060amount\u0060 is then deducted\r\n     * from the caller\u0027s allowance.\r\n     *\r\n     * See {_burn} and {_approve}.\r\n     */\r\n    function _burnFrom(address account, uint256 amount) internal {\r\n        _burn(account, amount);\r\n        _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount, \u0022ERC20: burn amount exceeds allowance\u0022));\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\r\n * tokens and those that they have an allowance for, in a way that can be\r\n * recognized off-chain (via event analysis).\r\n */\r\ncontract ERC20Burnable is ERC20 {\r\n    /**\r\n     * @dev Destroys \u0060amount\u0060 tokens from the caller.\r\n     *\r\n     * See {ERC20-_burn}.\r\n     */\r\n    function burn(uint256 amount) public {\r\n        _burn(msg.sender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev See {ERC20-_burnFrom}.\r\n     */\r\n    function burnFrom(address account, uint256 amount) public {\r\n        _burnFrom(account, amount);\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Optional functions from the ERC20 standard.\r\n */\r\ncontract ERC20Detailed is IERC20 {\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for \u0060name\u0060, \u0060symbol\u0060, and \u0060decimals\u0060. All three of\r\n     * these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\r\n        _name = name;\r\n        _symbol = symbol;\r\n        _decimals = decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if \u0060decimals\u0060 equals \u00602\u0060, a balance of \u0060505\u0060 tokens should\r\n     * be displayed to a user as \u00605,05\u0060 (\u0060505 / 10 ** 2\u0060).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity\u0027s arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * \u0060SafeMath\u0060 restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it\u0027s recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060\u002B\u0060 operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a \u002B b;\r\n        require(c \u003E= a, \u0022SafeMath: addition overflow\u0022);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060-\u0060 operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \u0022SafeMath: subtraction overflow\u0022);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060-\u0060 operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b \u003C= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060*\u0060 operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\r\n        // benefit is lost if \u0027b\u0027 is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \u0022SafeMath: multiplication overflow\u0022);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060/\u0060 operator. Note: this function uses a\r\n     * \u0060revert\u0060 opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \u0022SafeMath: division by zero\u0022);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060/\u0060 operator. Note: this function uses a\r\n     * \u0060revert\u0060 opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b \u003E 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c \u002B a % b); // There is no case in which this doesn\u0027t hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060%\u0060 operator. This function uses a \u0060revert\u0060\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \u0022SafeMath: modulo by zero\u0022);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060%\u0060 operator. This function uses a \u0060revert\u0060\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/*******************\r\n**                **\r\n** KONG CONTRACTS **\r\n**                **\r\n*******************/\r\n\r\n/**\r\n * @title  Kong ERC20 Token Contract.\r\n *\r\n * @dev    Extends OpenZeppelin contracts \u0060ERC20\u0060, \u0060ERC20Detailed\u0060, and \u0060ERC20Burnable\u0060.\r\n *\r\n *         Main additions:\r\n *\r\n *         - \u0060beginLockDrop()\u0060: Function to deploy instances of \u0060LockDrop\u0060 contracts. This function\r\n *         can be called periodically. The amount of new tokens minted is proportional to the\r\n *         existing supply of tokens.\r\n *\r\n *         - \u0060mint()\u0060: Function to mint new Kong token. Can only be called by addresses that have\r\n *         been added to \u0060_minters\u0060 through \u0060addMinter()\u0060 which is only accessible to \u0060owner\u0060.\r\n *         \u0060mint()\u0060 is subject to restrictions concerning the mintable amount (see below).\r\n */\r\ncontract KongERC20 is ERC20, ERC20Burnable, ERC20Detailed {\r\n    // Constants.\r\n    uint256 constant ONE_YEAR = 365 * 24 * 60 * 60;\r\n    uint256 constant ONE_MONTH = 30 * 24 * 60 * 60;\r\n    uint256 constant MINTING_REWARD = 2 ** 8 * 10 ** 18;\r\n\r\n    // Account with right to add to \u0060minters\u0060.\r\n    address public _owner;\r\n\r\n    // Total amount minted through \u0060minters\u0060; does not include Genesis Kong.\r\n    uint256 public _totalMinted;\r\n\r\n    // Timestamp of contract deployment; used to calculate number of years since launch.\r\n    uint256 public _launchTimestamp;\r\n\r\n    // Address and timestamp of last \u0060LockDrop\u0060 deployment.\r\n    address public _lastLockDropAddress;\r\n    uint256 public _lastLockDropTimestamp;\r\n\r\n    // Addresses allowed to mint new Kong.\r\n    mapping (address =\u003E bool) public _minters;\r\n\r\n    // Emits when new \u0060LockDrop\u0060 is deployed.\r\n    event LockDropCreation(\r\n        address deployedBy,\r\n        uint256 deployedTimestamp,\r\n        uint256 deployedSize,\r\n        address deployedAddress\r\n    );\r\n\r\n    // Emits when a new address is added to \u0060minters\u0060.\r\n    event MinterAddition(\r\n        address minter\r\n    );\r\n\r\n    /**\r\n     * @dev The constructor sets the following variables:\r\n     *\r\n     *      - \u0060_name\u0060,\r\n     *      - \u0060_symbol\u0060,\r\n     *      - \u0060_decimals\u0060,\r\n     *      - \u0060_owner\u0060, and\r\n     *      - \u0060_launchTimeStamp\u0060.\r\n     *\r\n     *      It also mints Genesis tokens.\r\n     */\r\n    constructor() public ERC20Detailed(\u0027KONG\u0027, \u0027KONG\u0027, 18) {\r\n\r\n        // Set _owner.\r\n        _owner = 0xAB35D3476251C6b614dC2eb36380D7AF1232D822;\r\n\r\n        // Store launch time.\r\n        _launchTimestamp = block.timestamp;\r\n\r\n        // Mint Genesis Kong.\r\n        _mint(0xAB35D3476251C6b614dC2eb36380D7AF1232D822, 3 * 2 ** 20 * 10 ** 18);\r\n        _mint(0x9699b500fD907636f10965d005813F0CE0986176, 2 ** 20 * 10 ** 18);\r\n        _mint(0xdBa9A507aa0838370399FDE048752E91B5a27F06, 2 ** 20 * 10 ** 18);\r\n        _mint(0xb2E0F4dee26CcCf1f3A267Ad185f212Dd3e7a6b1, 2 ** 20 * 10 ** 18);\r\n        _mint(0xdB6e9FaAcE283e230939769A2DFa80BdcD7E1E43, 2 ** 20 * 10 ** 18);\r\n\r\n    }\r\n\r\n    /**\r\n     * @dev Function to add a minter.\r\n     */\r\n    function addMinter(address minter) public {\r\n\r\n      require(msg.sender == _owner, \u0027Can only be called by owner.\u0027);\r\n\r\n      _minters[minter] = true;\r\n      emit MinterAddition(minter);\r\n\r\n    }\r\n\r\n    /**\r\n     * @dev Function to deploy a new \u0060LockDrop\u0060 contract. The function can be called every 30 days,\r\n     *      i.e., whenever 30 days have passed since the function was last called successfully.\r\n     *      Mints approximately (1.01^(1/12) - 1) percent of the current total supply\r\n     *      and transfers the new tokens to the deployed contract. Mints \u0060MINTING_REWARD\u0060 tokens\r\n     *      to whoever calls it successfully.\r\n     */\r\n    function beginLockDrop() public {\r\n\r\n        // Verify that time to last \u0060LockDrop\u0060 deployment exceeds 30 days.\r\n        require(_lastLockDropTimestamp \u002B ONE_MONTH \u003C= block.timestamp, \u002730 day cooling period.\u0027);\r\n\r\n        // Update timestamp of last \u0060LockDrop\u0060 deployment.\r\n        _lastLockDropTimestamp = block.timestamp;\r\n\r\n        // Calculate size of lockdrop as 0.0008295381 (\u2248 1.01 ^ (1/12) - 1) times the total supply.\r\n        uint256 lockDropSize = totalSupply().mul(8295381).div(10 ** 10);\r\n\r\n        // Deploy a new \u0060LockDrop\u0060 contract.\r\n        LockDrop lockDrop = new LockDrop(address(this));\r\n\r\n        // Update address of last lock drop.\r\n        _lastLockDropAddress = address(lockDrop);\r\n\r\n        // Mint \u0060lockDropSize\u0060 to deployed \u0060LockDrop\u0060 contract.\r\n        _mint(_lastLockDropAddress, lockDropSize);\r\n\r\n        // Mint \u0060MINTING_REWARD\u0060 to msg.sender.\r\n        _mint(msg.sender, MINTING_REWARD);\r\n\r\n        // Emit event.\r\n        emit LockDropCreation(\r\n            msg.sender,\r\n            block.timestamp,\r\n            lockDropSize,\r\n            address(lockDrop)\r\n        );\r\n\r\n    }\r\n\r\n    /**\r\n     * @dev Helper function to calculate the maximal amount \u0060minters\u0060 are capable of minting.\r\n     */\r\n    function getMintingLimit() public view returns(uint256) {\r\n\r\n        // Calculate number of years since launch.\r\n        uint256 y = (block.timestamp - _launchTimestamp) / uint(ONE_YEAR);\r\n\r\n        // Determine maximally mintable amount.\r\n        uint256 mintingLimit = 2 ** 25 * 10 ** 18;\r\n        if (y \u003E 0) {mintingLimit \u002B= 2 ** 24 * 10 ** 18;}\r\n        if (y \u003E 1) {mintingLimit \u002B= 2 ** 23 * 10 ** 18;}\r\n        if (y \u003E 2) {mintingLimit \u002B= 2 ** 22 * 10 ** 18;}\r\n\r\n        // Return.\r\n        return mintingLimit;\r\n\r\n    }\r\n\r\n    /**\r\n     * @dev Mints new tokens conditional on not exceeding minting limits. Can only be called by\r\n     *      valid \u0060minters\u0060.\r\n     */\r\n    function mint(uint256 mintedAmount, address recipient) public {\r\n\r\n        require(_minters[msg.sender] == true, \u0027Can only be called by registered minter.\u0027);\r\n\r\n        // Enforce global cap.\r\n        require(_totalMinted.add(mintedAmount) \u003C= getMintingLimit(), \u0027Exceeds global cap.\u0027);\r\n\r\n        // Increase minted amount.\r\n        _totalMinted \u002B= mintedAmount;\r\n\r\n        // Mint.\r\n        _mint(recipient, mintedAmount);\r\n\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title   Lock Drop Contract\r\n *\r\n * @dev     This contract implements a Kong Lock Drop.\r\n *\r\n *          Notes (check online sources for further details):\r\n *\r\n *          - \u0060stakeETH()\u0060 can be called to participate in the lock drop by staking ETH. Individual\r\n *          stakes are immediately sent to separate instances of \u0060LockETH\u0060 contracts that only the\r\n *          staker has access to.\r\n *\r\n *          - \u0060claimKong()\u0060 can be called to claim Kong once the staking period is over.\r\n *\r\n *          - The contract is open for contributions for 30 days after its deployment.\r\n */\r\ncontract LockDrop {\r\n    using SafeMath for uint256;\r\n\r\n    // Timestamp for the end of staking.\r\n    uint256 public _stakingEnd;\r\n\r\n    // Sum of all contribution weights.\r\n    uint256 public _weightsSum;\r\n\r\n    // Address of the KONG ERC20 contract.\r\n    address public _kongERC20Address;\r\n\r\n    // Mapping from contributors to contribution weights.\r\n    mapping(address =\u003E uint256) public _weights;\r\n\r\n    // Mapping from contributors to locking period ends.\r\n    mapping(address =\u003E uint256) public _lockingEnds;\r\n\r\n    // Events for staking and claiming.\r\n    event Staked(\r\n        address indexed contributor,\r\n        address lockETHAddress,\r\n        uint256 ethStaked,\r\n        uint256 endDate\r\n    );\r\n    event Claimed(\r\n        address indexed claimant,\r\n        uint256 ethStaked,\r\n        uint256 kongClaim\r\n    );\r\n\r\n    constructor (address kongERC20Address) public {\r\n\r\n        // Set the address of the ERC20 token.\r\n        _kongERC20Address = kongERC20Address;\r\n\r\n        // Set the end of the staking period to 30 days after deployment.\r\n        _stakingEnd = block.timestamp \u002B 30 days;\r\n\r\n    }\r\n\r\n    /**\r\n     * @dev Function to stake ETH in this lock drop.\r\n     *\r\n     *      When called with positive \u0060msg.value\u0060 and valid \u0060stakingPeriod\u0060, deploys instance of\r\n     *      \u0060LockETH\u0060 contract and transfers \u0060msg.value\u0060 to it. Each \u0060LockETH\u0060 contract is only\r\n     *      accessible to the address that called \u0060stakeETH()\u0060 to deploy the respective instance.\r\n     *\r\n     *      For valid stakes, calculates the variable \u0060weight\u0060 as the product of total lockup time\r\n     *      and \u0060msg.value\u0060. Stores \u0060weight\u0060 in \u0060_weights[msg.sender]\u0060 and adds it to \u0060_weightsSum\u0060.\r\n     *\r\n     *      Expects \u0060block.timestamp\u0060 to be smaller than \u0060_stakingEnd\u0060. Does not allow for topping\r\n     *      up of existing stakes. Restricts staking period to be between 90 and 365.\r\n     *\r\n     *      Emits \u0060Staked\u0060 event.\r\n     */\r\n    function stakeETH(uint256 stakingPeriod) public payable {\r\n\r\n        // Require positive msg.value.\r\n        require(msg.value \u003E 0, \u0027Msg value = 0.\u0027);\r\n\r\n        // No topping up.\r\n        require(_weights[msg.sender] == 0, \u0027No topping up.\u0027);\r\n\r\n        // No contributions after _stakingEnd.\r\n        require(block.timestamp \u003C= _stakingEnd, \u0027Closed for contributions.\u0027);\r\n\r\n        // Ensure the staking period is valid.\r\n        require(stakingPeriod \u003E= 30 \u0026\u0026 stakingPeriod \u003C= 365, \u0027Staking period outside of allowed range.\u0027);\r\n\r\n        // Calculate contribution weight as product of msg.value and total time the ETH is locked.\r\n        uint256 totalTime = _stakingEnd \u002B stakingPeriod * 1 days - block.timestamp;\r\n        uint256 weight = totalTime.mul(msg.value);\r\n\r\n        // Adjust contribution weights.\r\n        _weightsSum = _weightsSum.add(weight);\r\n        _weights[msg.sender] = weight;\r\n\r\n        // Set end date for lock.\r\n        _lockingEnds[msg.sender] = _stakingEnd \u002B stakingPeriod * 1 days;\r\n\r\n        // Deploy new lock contract.\r\n        LockETH lockETH = (new LockETH).value(msg.value)(_lockingEnds[msg.sender], msg.sender);\r\n\r\n        // Abort if the new contract\u0027s balance is lower than expected.\r\n        require(address(lockETH).balance \u003E= msg.value);\r\n\r\n        // Emit event.\r\n        emit Staked(msg.sender, address(lockETH), msg.value, _lockingEnds[msg.sender]);\r\n\r\n    }\r\n\r\n    /**\r\n     * @dev Function to claim Kong.\r\n     *\r\n     *      Determines the ratio of the contribution by \u0060msg.sender\u0060 to all contributions. Sends\r\n     *      the product of this ratio and the contract\u0027s Kong balance to \u0060msg.sender\u0060. Sets the\r\n     *      contribution of \u0060msg.sender\u0060 to zero afterwards and subtracts it from the sum of all\r\n     *      contributions.\r\n     *\r\n     *      Expects \u0060block.timestamp\u0060 to be larger than \u0060_lockingEnds[msg.sender]\u0060. Throws if\r\n     *      \u0060_weights[msg.sender]\u0060 is zero. Emits \u0060Claimed\u0060 event.\r\n     *\r\n     *      NOTE: Overflow protection in calculation of \u0060kongClaim\u0060 prevents anyone staking massive\r\n     *      amounts from ever claiming. Fine as long as product of weight and the contract\u0027s Kong\r\n     *      balance is at most (2^256)-1.\r\n     */\r\n    function claimKong() external {\r\n\r\n        // Verify that this \u0060msg.sender\u0060 has contributed.\r\n        require(_weights[msg.sender] \u003E 0, \u0027Zero contribution.\u0027);\r\n\r\n        // Verify that this \u0060msg.sender\u0060 can claim.\r\n        require(block.timestamp \u003E _lockingEnds[msg.sender], \u0027Cannot claim yet.\u0027);\r\n\r\n        // Calculate amount to return.\r\n        uint256 weight = _weights[msg.sender];\r\n        uint256 kongClaim = IERC20(_kongERC20Address).balanceOf(address(this)).mul(weight).div(_weightsSum);\r\n\r\n        // Adjust stake and sum of stakes.\r\n        _weights[msg.sender] = 0;\r\n        _weightsSum = _weightsSum.sub(weight);\r\n\r\n        // Send kong to \u0060msg.sender\u0060.\r\n        IERC20(_kongERC20Address).transfer(msg.sender, kongClaim);\r\n\r\n        // Emit event.\r\n        emit Claimed(msg.sender, weight, kongClaim);\r\n\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * @title   LockETH contract.\r\n *\r\n * @dev     Escrows ETH until \u0060_endOfLockUp\u0060. Calling \u0060unlockETH()\u0060 after \u0060_endOfLockUp\u0060 sends ETH\r\n *          to \u0060_contractOwner\u0060.\r\n */\r\ncontract LockETH {\r\n\r\n    uint256 public _endOfLockUp;\r\n    address payable public _contractOwner;\r\n\r\n    constructor (uint256 endOfLockUp, address payable contractOwner) public payable {\r\n\r\n        _endOfLockUp = endOfLockUp;\r\n        _contractOwner = contractOwner;\r\n\r\n    }\r\n\r\n    /**\r\n     * @dev Send ETH owned by this contract to \u0060_contractOwner\u0060. Can be called by anyone but\r\n     *      requires \u0060block.timestamp\u0060 \u003E \u0060endOfLockUp\u0060.\r\n     */\r\n    function unlockETH() external {\r\n\r\n        // Verify end of lock-up period.\r\n        require(block.timestamp \u003E _endOfLockUp, \u0027Cannot claim yet.\u0027);\r\n\r\n        // Send ETH balance to \u0060_contractOwner\u0060.\r\n        _contractOwner.transfer(address(this).balance);\r\n\r\n    }\r\n\r\n}","ABI":"[{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022name\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022spender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022approve\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022totalSupply\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022sender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022recipient\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022transferFrom\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022decimals\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint8\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022_minters\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022spender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022addedValue\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022increaseAllowance\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022burn\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022beginLockDrop\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022balanceOf\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022_totalMinted\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022burnFrom\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022_launchTimestamp\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022mintedAmount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022recipient\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022mint\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022symbol\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022minter\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022addMinter\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022_lastLockDropAddress\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022spender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022subtractedValue\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022decreaseAllowance\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022recipient\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022transfer\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022_owner\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022getMintingLimit\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022owner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022spender\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022allowance\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022_lastLockDropTimestamp\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022constructor\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022deployedBy\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022deployedTimestamp\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022deployedSize\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022deployedAddress\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022LockDropCreation\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022minter\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022MinterAddition\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022owner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022spender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022Approval\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022from\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022Transfer\u0022,\u0022type\u0022:\u0022event\u0022}]","ContractName":"KongERC20","CompilerVersion":"v0.5.2\u002Bcommit.1df8f40c","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://87ad1ee8610421e693c718d2fac652c5339df46fed08c65b2b80aad6f056450c"}]