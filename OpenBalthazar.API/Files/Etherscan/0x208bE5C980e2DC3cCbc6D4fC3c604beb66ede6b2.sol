[{"SourceCode":"pragma solidity ^0.5.2;\r\n\r\n/**\r\n * Copyright (c) 2018-present, Leap DAO (leapdao.org)\r\n *\r\n * This source code is licensed under the Mozilla Public License, version 2,\r\n * found in the LICENSE file in the root directory of this source tree.\r\n */\r\n\r\n\r\n\r\n/**\r\n * Copyright (c) 2018-present, Leap DAO (leapdao.org)\r\n *\r\n * This source code is licensed under the Mozilla Public License, version 2,\r\n * found in the LICENSE file in the root directory of this source tree.\r\n */\r\n\r\n/* solium-disable security/no-block-members */\r\n\r\n\r\n\r\n/**\r\n * @title Math\r\n * @dev Assorted math operations\r\n */\r\nlibrary Math {\r\n    /**\r\n    * @dev Returns the largest of two numbers.\r\n    */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a \u003E= b ? a : b;\r\n    }\r\n\r\n    /**\r\n    * @dev Returns the smallest of two numbers.\r\n    */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a \u003C b ? a : b;\r\n    }\r\n\r\n    /**\r\n    * @dev Calculates the average of two numbers. Since these are integers,\r\n    * averages of an even and odd number cannot be represented, and will be\r\n    * rounded down.\r\n    */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a \u002B b) / 2 can overflow, so we distribute\r\n        return (a / 2) \u002B (b / 2) \u002B ((a % 2 \u002B b % 2) / 2);\r\n    }\r\n}\r\n\r\n/**\r\n * Copyright (c) 2018-present, Leap DAO (leapdao.org)\r\n *\r\n * This source code is licensed under the Mozilla Public License, version 2,\r\n * found in the LICENSE file in the root directory of this source tree.\r\n */\r\n\r\n\r\n\r\n/**\r\n * Copyright (c) 2018-present, Leap DAO (leapdao.org)\r\n *\r\n * This source code is licensed under the Mozilla Public License, version 2,\r\n * found in the LICENSE file in the root directory of this source tree.\r\n */\r\n\r\n\r\n\r\n/**\r\n * Copyright (c) 2018-present, Leap DAO (leapdao.org)\r\n *\r\n * This source code is licensed under the Mozilla Public License, version 2,\r\n * found in the LICENSE file in the root directory of this source tree.\r\n */\r\n\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n    * @dev Multiplies two unsigned integers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\r\n        // benefit is lost if \u0027b\u0027 is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b \u003E 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c \u002B a % b); // There is no case in which this doesn\u0027t hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b \u003C= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two unsigned integers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a \u002B b;\r\n        require(c \u003E= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n/**\r\n * Copyright (c) 2018-present, Leap DAO (leapdao.org)\r\n *\r\n * This source code is licensed under the Mozilla Public License, version 2,\r\n * found in the LICENSE file in the root directory of this source tree.\r\n */\r\n\r\n\r\n\r\n/**\r\n * @title Initializable\r\n *\r\n * @dev Helper contract to support initializer functions. To use it, replace\r\n * the constructor with a function that has the \u0060initializer\u0060 modifier.\r\n * WARNING: Unlike constructors, initializer functions must be manually\r\n * invoked. This applies both to deploying an Initializable contract, as well\r\n * as extending an Initializable contract via inheritance.\r\n * WARNING: When used with inheritance, manual care must be taken to not invoke\r\n * a parent initializer twice, or ensure that all initializers are idempotent,\r\n * because this is not dealt with automatically as with constructors.\r\n */\r\ncontract Initializable {\r\n\r\n  /**\r\n   * @dev Indicates that the contract has been initialized.\r\n   */\r\n  bool private initialized;\r\n\r\n  /**\r\n   * @dev Indicates that the contract is in the process of being initialized.\r\n   */\r\n  bool private initializing;\r\n\r\n  /**\r\n   * @dev Modifier to use in the initializer function of a contract.\r\n   */\r\n  modifier initializer() {\r\n    require(initializing || isConstructor() || !initialized, \u0022Contract instance has already been initialized\u0022);\r\n\r\n    bool wasInitializing = initializing;\r\n    initializing = true;\r\n    initialized = true;\r\n\r\n    _;\r\n\r\n    initializing = wasInitializing;\r\n  }\r\n\r\n  /// @dev Returns true if and only if the function is running in the constructor\r\n  function isConstructor() private view returns (bool) {\r\n    // extcodesize checks the size of the code stored in an address, and\r\n    // address returns the current address. Since the code is still not\r\n    // deployed when running a constructor, any checks on its code size will\r\n    // yield zero, making it an effective way to detect if a contract is\r\n    // under construction or not.\r\n    uint256 cs;\r\n    assembly { cs := extcodesize(address) }\r\n    return cs == 0;\r\n  }\r\n\r\n  // Reserved storage space to allow for layout changes in the future.\r\n  uint256[50] private ______gap;\r\n}\r\n\r\n/**\r\n * @title Adminable\r\n *\r\n * @dev Helper contract to support initializer functions. To use it, replace\r\n * the constructor with a function that has the \u0060initializer\u0060 modifier.\r\n * WARNING: Unlike constructors, initializer functions must be manually\r\n * invoked. This applies both to deploying an Initializable contract, as well\r\n * as extending an Initializable contract via inheritance.\r\n * WARNING: When used with inheritance, manual care must be taken to not invoke\r\n * a parent initializer twice, or ensure that all initializers are idempotent,\r\n * because this is not dealt with automatically as with constructors.\r\n */\r\ncontract Adminable is Initializable {\r\n\r\n  /**\r\n   * @dev Storage slot with the admin of the contract.\r\n   * This is the keccak-256 hash of \u0022org.zeppelinos.proxy.admin\u0022, and is\r\n   * validated in the constructor.\r\n   */\r\n  bytes32 private constant ADMIN_SLOT = 0x10d6a54a4754c8869d6886b5f5d7fbfa5b4522237ea5c60d11bc4e7a1ff9390b;\r\n\r\n  /**\r\n   * @dev Modifier to check whether the \u0060msg.sender\u0060 is the admin.\r\n   * If it is, it will run the function. Otherwise, fails.\r\n   */\r\n  modifier ifAdmin() {\r\n    require(msg.sender == _admin());\r\n    _;\r\n  }\r\n\r\n  function admin() external view returns (address) {\r\n    return _admin();\r\n  }\r\n\r\n  function implementation() external view returns (address impl) {\r\n    bytes32 slot = 0x7050c9e0f4ca769c69bd3a8ef740bc37934f8e2c036e5a723fd8ee048ed3f8c3;\r\n    assembly {\r\n      impl := sload(slot)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @return The admin slot.\r\n   */\r\n  function _admin() internal view returns (address adm) {\r\n    bytes32 slot = ADMIN_SLOT;\r\n    assembly {\r\n      adm := sload(slot)\r\n    }\r\n  }\r\n}\r\n\r\ncontract Bridge is Adminable {\r\n  using SafeMath for uint256;\r\n\r\n  modifier onlyOperator() {\r\n    require(msg.sender == operator, \u0022Tried to call a only-operator function from non-operator\u0022);\r\n    _;\r\n  }\r\n\r\n  event NewHeight(uint256 height, bytes32 indexed root);\r\n  event NewOperator(address operator);\r\n\r\n  struct Period {\r\n    uint32 height;            // the height of last block in period\r\n    uint32 timestamp;         // the block.timestamp at submission of period\r\n    uint32 parentBlockNumber; // the block.number at submission of period\r\n    bytes32 parentBlockHash;  // the blockhash(block.number -1) at submission of period\r\n  }\r\n\r\n  bytes32 constant GENESIS = 0x4920616d207665727920616e6772792c20627574206974207761732066756e21;\r\n\r\n  bytes32 public tipHash; // hash of first period that has extended chain to some height\r\n  uint256 public genesisBlockNumber;\r\n  uint256 parentBlockInterval; // how often epochs can be submitted max\r\n  uint256 public lastParentBlock; // last ethereum block when epoch was submitted\r\n  address public operator; // the operator contract\r\n\r\n  mapping(bytes32 =\u003E Period) public periods;\r\n\r\n  function initialize(uint256 _parentBlockInterval) public initializer {\r\n    // init genesis preiod\r\n    Period memory genesisPeriod = Period({\r\n      height: 1,\r\n      timestamp: uint32(block.timestamp),\r\n      parentBlockNumber: uint32(block.number),\r\n      parentBlockHash: blockhash(block.number-1)\r\n    });\r\n    tipHash = GENESIS;\r\n    periods[GENESIS] = genesisPeriod;\r\n    genesisBlockNumber = block.number;\r\n    parentBlockInterval = _parentBlockInterval;\r\n    operator = msg.sender;\r\n  }\r\n\r\n  function setOperator(address _operator) public ifAdmin {\r\n    operator = _operator;\r\n    emit NewOperator(_operator);\r\n  }\r\n\r\n  function getParentBlockInterval() public view returns (uint256) {\r\n    return parentBlockInterval;\r\n  }\r\n\r\n  function setParentBlockInterval(uint256 _parentBlockInterval) public ifAdmin {\r\n    parentBlockInterval = _parentBlockInterval;\r\n  }\r\n\r\n  function submitPeriod(\r\n    bytes32 _prevHash,\r\n    bytes32 _root)\r\n  public onlyOperator returns (uint256 newHeight) {\r\n\r\n    require(periods[_prevHash].timestamp \u003E 0, \u0022Parent node should exist\u0022);\r\n    require(periods[_root].timestamp == 0, \u0022Trying to submit the same root twice\u0022);\r\n\r\n    // calculate height\r\n    newHeight = periods[_prevHash].height \u002B 1;\r\n    // do some magic if chain extended\r\n    if (newHeight \u003E periods[tipHash].height) {\r\n      // new periods can only be submitted every x Ethereum blocks\r\n      require(\r\n        block.number \u003E= lastParentBlock \u002B parentBlockInterval,\r\n        \u0022Tried to submit new period too soon\u0022\r\n      );\r\n      tipHash = _root;\r\n      lastParentBlock = block.number;\r\n    }\r\n    // strictly speaking this event should be called \u0022New Period\u0022\r\n    // but we don\u0027t want to break interfaces for now.\r\n    emit NewHeight(newHeight, _root);\r\n    // store the period\r\n    Period memory newPeriod = Period({\r\n      height: uint32(newHeight),\r\n      timestamp: uint32(block.timestamp),\r\n      parentBlockNumber: uint32(block.number),\r\n      parentBlockHash: blockhash(block.number-1)\r\n    });\r\n    periods[_root] = newPeriod;\r\n  }\r\n}\r\n\r\n/**\r\n * Copyright (c) 2018-present, Leap DAO (leapdao.org)\r\n *\r\n * This source code is licensed under the Mozilla Public License, version 2,\r\n * found in the LICENSE file in the root directory of this source tree.\r\n */\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\r\n * Originally based on code by FirstBlood:\r\n * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n *\r\n * This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for\r\n * all accounts just by listening to said events. Note that this isn\u0027t required by the specification, and other\r\n * compliant implementations may not do it.\r\n */\r\ncontract ERC20 is IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address =\u003E uint256) private _balances;\r\n\r\n    mapping (address =\u003E mapping (address =\u003E uint256)) private _allowed;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    /**\r\n    * @dev Total number of tokens in existence\r\n    */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param owner The address to query the balance of.\r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address owner) public view returns (uint256) {\r\n        return _balances[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param owner address The address which owns the funds.\r\n     * @param spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowed[owner][spender];\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer token for a specified address\r\n    * @param to The address to transfer to.\r\n    * @param value The amount to be transferred.\r\n    */\r\n    function transfer(address to, uint256 value) public returns (bool) {\r\n        _transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender\u0027s allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param spender The address which will spend the funds.\r\n     * @param value The amount of tokens to be spent.\r\n     */\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        require(spender != address(0));\r\n\r\n        _allowed[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another.\r\n     * Note that while this function emits an Approval event, this is not required as per the specification,\r\n     * and other compliant implementations may not emit the event.\r\n     * @param from address The address which you want to send tokens from\r\n     * @param to address The address which you want to transfer to\r\n     * @param value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\r\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\r\n        _transfer(from, to, value);\r\n        emit Approval(from, msg.sender, _allowed[from][msg.sender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n     * approve should be called when allowed_[_spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * Emits an Approval event.\r\n     * @param spender The address which will spend the funds.\r\n     * @param addedValue The amount of tokens to increase the allowance by.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        require(spender != address(0));\r\n\r\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].add(addedValue);\r\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n     * approve should be called when allowed_[_spender] == 0. To decrement\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * Emits an Approval event.\r\n     * @param spender The address which will spend the funds.\r\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        require(spender != address(0));\r\n\r\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].sub(subtractedValue);\r\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer token for a specified addresses\r\n    * @param from The address to transfer from.\r\n    * @param to The address to transfer to.\r\n    * @param value The amount to be transferred.\r\n    */\r\n    function _transfer(address from, address to, uint256 value) internal {\r\n        require(to != address(0));\r\n\r\n        _balances[from] = _balances[from].sub(value);\r\n        _balances[to] = _balances[to].add(value);\r\n        emit Transfer(from, to, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that mints an amount of the token and assigns it to\r\n     * an account. This encapsulates the modification of balances such that the\r\n     * proper events are emitted.\r\n     * @param account The account that will receive the created tokens.\r\n     * @param value The amount that will be created.\r\n     */\r\n    function _mint(address account, uint256 value) internal {\r\n        require(account != address(0));\r\n\r\n        _totalSupply = _totalSupply.add(value);\r\n        _balances[account] = _balances[account].add(value);\r\n        emit Transfer(address(0), account, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that burns an amount of the token of a given\r\n     * account.\r\n     * @param account The account whose tokens will be burnt.\r\n     * @param value The amount that will be burnt.\r\n     */\r\n    function _burn(address account, uint256 value) internal {\r\n        require(account != address(0));\r\n\r\n        _totalSupply = _totalSupply.sub(value);\r\n        _balances[account] = _balances[account].sub(value);\r\n        emit Transfer(account, address(0), value);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that burns an amount of the token of a given\r\n     * account, deducting from the sender\u0027s allowance for said account. Uses the\r\n     * internal burn function.\r\n     * Emits an Approval event (reflecting the reduced allowance).\r\n     * @param account The account whose tokens will be burnt.\r\n     * @param value The amount that will be burnt.\r\n     */\r\n    function _burnFrom(address account, uint256 value) internal {\r\n        _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(value);\r\n        _burn(account, value);\r\n        emit Approval(account, msg.sender, _allowed[account][msg.sender]);\r\n    }\r\n}\r\n/**\r\n * Copyright (c) 2018-present, Leap DAO (leapdao.org)\r\n *\r\n * This source code is licensed under the Mozilla Public License, version 2,\r\n * found in the LICENSE file in the root directory of this source tree.\r\n */\r\n\r\n\r\n\r\n/**\r\n * @title IERC165\r\n * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @notice Query if a contract implements an interface\r\n     * @param interfaceId The interface identifier, as specified in ERC-165\r\n     * @dev Interface identification is specified in ERC-165. This function\r\n     * uses less than 30,000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n/**\r\n * @title ERC165\r\n * @author Matt Condon (@shrugs)\r\n * @dev Implements ERC165 using a lookup table.\r\n */\r\ncontract ERC165 is IERC165 {\r\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\r\n    /**\r\n     * 0x01ffc9a7 ===\r\n     *     bytes4(keccak256(\u0027supportsInterface(bytes4)\u0027))\r\n     */\r\n\r\n    /**\r\n     * @dev a mapping of interface id to whether or not it\u0027s supported\r\n     */\r\n    mapping(bytes4 =\u003E bool) private _supportedInterfaces;\r\n\r\n    /**\r\n     * @dev A contract implementing SupportsInterfaceWithLookup\r\n     * implement ERC165 itself\r\n     */\r\n    constructor () internal {\r\n        _registerInterface(_INTERFACE_ID_ERC165);\r\n    }\r\n\r\n    /**\r\n     * @dev implement supportsInterface(bytes4) using a lookup table\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\r\n        return _supportedInterfaces[interfaceId];\r\n    }\r\n\r\n    /**\r\n     * @dev internal method for registering an interface\r\n     */\r\n    function _registerInterface(bytes4 interfaceId) internal {\r\n        require(interfaceId != 0xffffffff);\r\n        _supportedInterfaces[interfaceId] = true;\r\n    }\r\n}\r\n\r\n\r\ncontract TransferrableToken is ERC165 {\r\n  function transferFrom(address _from, address _to, uint256 _valueOrTokenId) public;\r\n  function approve(address _to, uint256 _value) public;\r\n}\r\n\r\n/**\r\n * @title PriorityQueue\r\n * @dev A priority queue implementation\r\n */\r\n\r\nlibrary PriorityQueue {\r\n  using SafeMath for uint256;\r\n\r\n  struct Token {\r\n    TransferrableToken addr;\r\n    uint256[] heapList;\r\n    uint256 currentSize;\r\n  }\r\n\r\n  function insert(Token storage self, uint256 k) internal {\r\n    self.heapList.push(k);\r\n    self.currentSize = self.currentSize.add(1);\r\n    percUp(self, self.currentSize);\r\n  }\r\n\r\n  function minChild(Token storage self, uint256 i) internal view returns (uint256) {\r\n    if (i.mul(2).add(1) \u003E self.currentSize) {\r\n      return i.mul(2);\r\n    } else {\r\n      if (self.heapList[i.mul(2)] \u003C self.heapList[i.mul(2).add(1)]) {\r\n        return i.mul(2);\r\n      } else {\r\n        return i.mul(2).add(1);\r\n      }\r\n    }\r\n  }\r\n\r\n  function getMin(Token storage self) internal view returns (uint256) {\r\n    return self.heapList[1];\r\n  }\r\n\r\n  function delMin(Token storage self) internal returns (uint256) {\r\n    uint256 retVal = self.heapList[1];\r\n    self.heapList[1] = self.heapList[self.currentSize];\r\n    delete self.heapList[self.currentSize];\r\n    self.currentSize = self.currentSize.sub(1);\r\n    percDown(self, 1);\r\n    self.heapList.length = self.heapList.length.sub(1);\r\n    return retVal;\r\n  }\r\n\r\n  // solium-disable-next-line security/no-assign-params\r\n  function percUp(Token storage self, uint256 i) private {\r\n    uint256 j = i;\r\n    uint256 newVal = self.heapList[i];\r\n    while (newVal \u003C self.heapList[i.div(2)]) {\r\n      self.heapList[i] = self.heapList[i.div(2)];\r\n      i = i.div(2);\r\n    }\r\n    if (i != j) self.heapList[i] = newVal;\r\n  }\r\n\r\n  // solium-disable-next-line security/no-assign-params\r\n  function percDown(Token storage self, uint256 i) private {\r\n    uint256 j = i;\r\n    uint256 newVal = self.heapList[i];\r\n    uint256 mc = minChild(self, i);\r\n    while (mc \u003C= self.currentSize \u0026\u0026 newVal \u003E self.heapList[mc]) {\r\n      self.heapList[i] = self.heapList[mc];\r\n      i = mc;\r\n      mc = minChild(self, i);\r\n    }\r\n    if (i != j) self.heapList[i] = newVal;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * Copyright (c) 2018-present, Leap DAO (leapdao.org)\r\n *\r\n * This source code is licensed under the Mozilla Public License, version 2,\r\n * found in the LICENSE file in the root directory of this source tree.\r\n */\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC1948 contract.\r\n */\r\ninterface IERC1948 {\r\n\r\n  /**\r\n   * @dev Emitted when \u0060oldData\u0060 is replaced with \u0060newData\u0060 in storage of \u0060tokenId\u0060.\r\n   *\r\n   * Note that \u0060oldData\u0060 or \u0060newData\u0060 may be empty bytes.\r\n   */\r\n  event DataUpdated(uint256 indexed tokenId, bytes32 oldData, bytes32 newData);\r\n\r\n  /**\r\n   * @dev Reads the data of a specified token. Returns the current data in\r\n   * storage of \u0060tokenId\u0060.\r\n   *\r\n   * @param tokenId The token to read the data off.\r\n   *\r\n   * @return A bytes32 representing the current data stored in the token.\r\n   */\r\n  function readData(uint256 tokenId) external view returns (bytes32);\r\n\r\n  /**\r\n   * @dev Updates the data of a specified token. Writes \u0060newData\u0060 into storage\r\n   * of \u0060tokenId\u0060.\r\n   *\r\n   * @param tokenId The token to write data to.\r\n   * @param newData The data to be written to the token.\r\n   *\r\n   * Emits a \u0060DataUpdated\u0060 event.\r\n   */\r\n  function writeData(uint256 tokenId, bytes32 newData) external;\r\n\r\n}\r\n\r\ncontract Vault is Adminable {\r\n  using PriorityQueue for PriorityQueue.Token;\r\n\r\n  // 2**15 \u002B 1\r\n  uint16 constant NFT_FIRST_COLOR = 32769;\r\n  // 2**15 \u002B 2**14 \u002B 1\r\n  uint16 constant NST_FIRST_COLOR = 49153;\r\n\r\n  event NewToken(address indexed tokenAddr, uint16 color);\r\n\r\n  Bridge public bridge;\r\n\r\n  uint16 public erc20TokenCount;\r\n  uint16 public nftTokenCount;\r\n  uint16 public nstTokenCount;\r\n\r\n  mapping(uint16 =\u003E PriorityQueue.Token) public tokens;\r\n  mapping(address =\u003E bool) public tokenColors;\r\n\r\n  function initialize(Bridge _bridge) public initializer {\r\n    bridge = _bridge;\r\n  } \r\n\r\n  function getTokenAddr(uint16 _color) public view returns (address) {\r\n    return address(tokens[_color].addr);\r\n  }\r\n\r\n  // token types: 0 = ERC20, 1 = ERC721, 2 = ERC1948\r\n  function registerToken(address _token, uint256 _type) public ifAdmin {\r\n    // make sure token is not 0x0 and that it has not been registered yet\r\n    require(_token != address(0), \u0022Tried to register 0x0 address\u0022);\r\n    require(!tokenColors[_token], \u0022Token already registered\u0022);\r\n    uint16 color;\r\n    if (_type == 0) {\r\n      require(ERC20(_token).totalSupply() \u003E= 0, \u0022Not an ERC20 token\u0022);\r\n      color = erc20TokenCount;\r\n      erc20TokenCount \u002B= 1;\r\n    } else if (_type == 1) {\r\n      // max nft count without being an NST is 16384\r\n      // color must be \u003C 49153\r\n      require(nftTokenCount \u003C 0x4000);\r\n      require(TransferrableToken(_token).supportsInterface(0x80ac58cd) == true, \u0022Not an ERC721 token\u0022);\r\n      color = NFT_FIRST_COLOR \u002B nftTokenCount; // NFT color namespace starts from 2^15 \u002B 1\r\n      nftTokenCount \u002B= 1;\r\n    } else {\r\n      require(nstTokenCount \u003C 0x3ffe);\r\n      require(TransferrableToken(_token).supportsInterface(0x80ac58cd) == true, \u0022Not an ERC721 token\u0022);\r\n      color = NST_FIRST_COLOR \u002B nstTokenCount; // NST color namespace starts from 2^15 \u002B 2^14 \u002B 1\r\n      nstTokenCount \u002B= 1;\r\n    }\r\n    uint256[] memory arr = new uint256[](1);\r\n    tokenColors[_token] = true;\r\n    tokens[color] = PriorityQueue.Token({\r\n      addr: TransferrableToken(_token),\r\n      heapList: arr,\r\n      currentSize: 0\r\n    });\r\n    emit NewToken(_token, color);\r\n  }\r\n\r\n  // solium-disable-next-line mixedcase\r\n  uint256[49] private ______gap;\r\n\r\n}\r\n\r\n\r\n\r\ncontract DepositHandler is Vault {\r\n\r\n  event NewDeposit(\r\n    uint32 indexed depositId,\r\n    address indexed depositor,\r\n    uint256 indexed color,\r\n    uint256 amount\r\n  );\r\n  event MinGasPrice(uint256 minGasPrice);\r\n  // Support for NSTs\r\n  event NewDepositV2(\r\n    uint32 indexed depositId,\r\n    address indexed depositor,\r\n    uint256 indexed color,\r\n    uint256 amount,\r\n    bytes32 data\r\n  );\r\n\r\n  struct Deposit {\r\n    uint64 time;\r\n    uint16 color;\r\n    address owner;\r\n    uint256 amount;\r\n  }\r\n\r\n  uint32 public depositCount;\r\n  uint256 public minGasPrice;\r\n\r\n  mapping(uint32 =\u003E Deposit) public deposits;\r\n  mapping(uint32 =\u003E bytes32) public tokenData;\r\n\r\n  function setMinGasPrice(uint256 _minGasPrice) public ifAdmin {\r\n    minGasPrice = _minGasPrice;\r\n    emit MinGasPrice(minGasPrice);\r\n  }\r\n\r\n /**\r\n  * @notice Add to the network \u0060(_amountOrTokenId)\u0060 amount of a \u0060(_color)\u0060 tokens\r\n  * or \u0060(_amountOrTokenId)\u0060 token id if \u0060(_color)\u0060 is NFT.\r\n  *\r\n  * !!!! DEPRECATED, use depositBySender() instead !!!!\r\n  *\r\n  * @dev Token should be registered with the Bridge first.\r\n  * @param _owner Account to transfer tokens from\r\n  * @param _amountOrTokenId Amount (for ERC20) or token ID (for ERC721) to transfer\r\n  * @param _color Color of the token to deposit\r\n  */\r\n  function deposit(address _owner, uint256 _amountOrTokenId, uint16 _color) public {\r\n    require(_owner == msg.sender, \u0022owner different from msg.sender\u0022);\r\n    _deposit(_amountOrTokenId, _color);\r\n  }\r\n\r\n  function depositBySender(uint256 _amountOrTokenId, uint16 _color) public {\r\n    _deposit(_amountOrTokenId, _color);\r\n  }\r\n\r\n  function _deposit(uint256 _amountOrTokenId, uint16 _color) internal {\r\n    TransferrableToken token = tokens[_color].addr;\r\n    require(address(token) != address(0), \u0022Token color already registered\u0022);\r\n    require(_amountOrTokenId \u003E 0 || _color \u003E 32769, \u0022no 0 deposits for fungible tokens\u0022);\r\n\r\n    bytes32 _tokenData;\r\n\r\n    if (_color \u003E= NST_FIRST_COLOR) {\r\n      IERC1948 nst = IERC1948(address(token));\r\n      // XXX: maybe we need a \u0027support\u0027 getter here, to announce support?\r\n      _tokenData = nst.readData(_amountOrTokenId);\r\n    }\r\n\r\n    token.transferFrom(msg.sender, address(this), _amountOrTokenId);\r\n\r\n    bytes32 tipHash = bridge.tipHash();\r\n    uint256 timestamp;\r\n    (, timestamp,,) = bridge.periods(tipHash);\r\n\r\n    depositCount\u002B\u002B;\r\n    deposits[depositCount] = Deposit({\r\n      time: uint32(timestamp),\r\n      owner: msg.sender,\r\n      color: _color,\r\n      amount: _amountOrTokenId\r\n    });\r\n\r\n    if (_color \u003E= NST_FIRST_COLOR) {\r\n      tokenData[depositCount] = _tokenData;\r\n\r\n      emit NewDepositV2(\r\n        depositCount,\r\n        msg.sender,\r\n        _color,\r\n        _amountOrTokenId,\r\n        _tokenData\r\n      );\r\n    } else {\r\n      emit NewDeposit(\r\n        depositCount,\r\n        msg.sender,\r\n        _color,\r\n        _amountOrTokenId\r\n      );\r\n    }\r\n  }\r\n\r\n  // solium-disable-next-line mixedcase\r\n  uint256[49] private ______gap;\r\n}\r\n/**\r\n * Copyright (c) 2018-present, Leap DAO (leapdao.org)\r\n *\r\n * This source code is licensed under the Mozilla Public License, version 2,\r\n * found in the LICENSE file in the root directory of this source tree.\r\n */\r\n\r\n/* solium-disable security/no-block-members */\r\n\r\n\r\n\r\ncontract IExitHandler {\r\n\r\n  function startExit(bytes32[] memory, bytes32[] memory, uint8, uint8) public payable;\r\n\r\n}\r\n\r\n/**\r\n * Copyright (c) 2018-present, Leap DAO (leapdao.org)\r\n *\r\n * This source code is licensed under the Mozilla Public License, version 2,\r\n * found in the LICENSE file in the root directory of this source tree.\r\n */\r\n\r\n\r\n\r\nlibrary TxLib {\r\n\r\n  uint constant internal WORD_SIZE = 32;\r\n  uint constant internal ONES = ~uint(0);\r\n  enum TxType { None0, None1, Deposit, Transfer, None4, None5,\r\n  None6, None7, None8, None9, None10, None11, None12, SpendCond }\r\n\r\n  struct Outpoint {\r\n    bytes32 hash;\r\n    uint8 pos;\r\n  }\r\n\r\n  struct Input {\r\n    Outpoint outpoint;\r\n    bytes32 r;\r\n    bytes32 s;\r\n    uint8 v;\r\n    bytes script;\r\n    bytes msgData;\r\n  }\r\n\r\n  struct Output {\r\n    uint256 value;\r\n    uint16 color;\r\n    address owner;\r\n    bytes32 stateRoot;\r\n  }\r\n\r\n  struct Tx {\r\n    TxType txType;\r\n    Input[] ins;\r\n    Output[] outs;\r\n  }\r\n\r\n  function parseInput(\r\n    TxType _type, bytes memory _txData, uint256 _pos, uint256 offset, Input[] memory _ins\r\n  ) internal pure returns (uint256 newOffset) {\r\n    bytes32 inputData;\r\n    uint8 index;\r\n    if (_type == TxType.Deposit) {\r\n      assembly {\r\n        // load the depositId (4 bytes) starting from byte 2 of tx\r\n        inputData := mload(add(add(offset, 4), _txData))\r\n      }\r\n      inputData = bytes32(uint256(uint32(uint256(inputData))));\r\n      index = 0;\r\n      newOffset = offset \u002B 4;\r\n    } else {\r\n      assembly {\r\n        // load the prevHash (32 bytes) from input\r\n        inputData := mload(add(add(offset, 32), _txData))\r\n        // load the output index (1 byte) from input\r\n        index := mload(add(add(offset, 33), _txData))\r\n      }\r\n      newOffset = offset \u002B 33;\r\n    }\r\n    Outpoint memory outpoint = Outpoint(inputData, index);\r\n    bytes memory data = new bytes(0);\r\n    Input memory input = Input(outpoint, 0, 0, 0, data, data); // solium-disable-line arg-overflow\r\n    if (_type == TxType.SpendCond) {\r\n      uint16 len;\r\n      assembly {\r\n        len := mload(add(add(offset, 35), _txData)) \r\n      }\r\n      // read msgData\r\n      data = new bytes(len);  \r\n      uint src;\r\n      uint dest;\r\n      assembly {  \r\n        src := add(add(add(offset, 35), 0x20), _txData) \r\n        dest := add(data, 0x20) \r\n      }\r\n      memcopy(src, dest, len);  \r\n      input.msgData = data;  \r\n      newOffset = offset \u002B 37 \u002B len;\r\n\r\n      assembly {\r\n        len := mload(add(newOffset, _txData)) \r\n      }\r\n\r\n      // read script\r\n      data = new bytes(len);\r\n      assembly {  \r\n        src := add(add(add(newOffset, 0), 0x20), _txData) \r\n        dest := add(data, 0x20) \r\n      }\r\n      memcopy(src, dest, len);  \r\n      input.script = data;\r\n      newOffset = newOffset \u002B len;\r\n    }\r\n    if (_type == TxType.Transfer) {\r\n      bytes32 r;\r\n      bytes32 s;\r\n      uint8 v;\r\n      assembly {\r\n        r := mload(add(add(offset, 65), _txData))\r\n        s := mload(add(add(offset, 97), _txData))\r\n        v := mload(add(add(offset, 98), _txData))\r\n      }\r\n      input.r = r;\r\n      input.s = s;\r\n      input.v = v;\r\n      newOffset = offset \u002B 33 \u002B 65;\r\n    }\r\n    _ins[_pos] = input;\r\n  }\r\n\r\n  // Copies \u0027len\u0027 bytes from \u0027srcPtr\u0027 to \u0027destPtr\u0027.\r\n  // NOTE: This function does not check if memory is allocated, it only copies the bytes.\r\n  function memcopy(uint srcPtr, uint destPtr, uint len) internal pure {\r\n    uint offset = 0;\r\n    uint size = len / WORD_SIZE;\r\n    // Copy word-length chunks while possible.\r\n    for (uint i = 0; i \u003C size; i\u002B\u002B) {\r\n      offset = i * WORD_SIZE;\r\n      assembly {\r\n        mstore(add(destPtr, offset), mload(add(srcPtr, offset)))\r\n      }\r\n    }\r\n    offset = size*WORD_SIZE;\r\n    uint mask = ONES \u003C\u003C 8*(32 - len % WORD_SIZE);\r\n    assembly {\r\n      let nSrc := add(srcPtr, offset)\r\n      let nDest := add(destPtr, offset)\r\n      mstore(nDest, or(and(mload(nSrc), mask), and(mload(nDest), not(mask))))\r\n    }\r\n  }\r\n\r\n  function parseOutput(\r\n    bytes memory _txData, uint256 _pos, uint256 offset, Output[] memory _outs\r\n  ) internal pure returns (uint256) {\r\n    uint256 value;\r\n    uint16 color;\r\n    address owner;\r\n    bytes32 data;\r\n\r\n    assembly {\r\n      offset := add(offset, 32)\r\n      value := mload(add(offset, _txData))\r\n\r\n      offset := add(offset, 2)\r\n      color := and(mload(add(offset, _txData)), 0xffff)\r\n\r\n      offset := add(offset, 20)\r\n      owner := mload(add(offset, _txData))\r\n\r\n      // NST - data\r\n      // (2 ** 15) \u002B (2 ** 14);\r\n      if gt(color, 49152) {\r\n        offset := add(offset, 32)\r\n        data := mload(add(offset, _txData))\r\n      }\r\n    }\r\n\r\n    Output memory output = Output(value, color, owner, data);  // solium-disable-line arg-overflow\r\n    _outs[_pos] = output;\r\n\r\n    return offset;\r\n  }\r\n\r\n  function parseTx(bytes memory _txData) internal pure returns (Tx memory txn) {\r\n    // read type\r\n    TxType txType;\r\n    uint256 a;\r\n    assembly {\r\n      a := mload(add(0x20, _txData))\r\n    }\r\n    a = a \u003E\u003E 248; // get first byte\r\n    if (a == 2) {\r\n      txType = TxType.Deposit;\r\n    } else if (a == 3) {\r\n      txType = TxType.Transfer;\r\n    } else if (a == 13) {\r\n      txType = TxType.SpendCond;\r\n    } else {\r\n      revert(\u0022unknown tx type\u0022);\r\n    }\r\n    // read ins and outs\r\n    assembly {\r\n        a := mload(add(0x21, _txData))\r\n    }\r\n    a = a \u003E\u003E 252; // get ins-length nibble\r\n    Input[] memory ins = new Input[](a);\r\n    uint256 offset = 2;\r\n    for (uint i = 0; i \u003C ins.length; i\u002B\u002B) {\r\n      offset = parseInput(txType, _txData, i, offset, ins); // solium-disable-line arg-overflow\r\n    }\r\n    assembly {\r\n        a := mload(add(0x21, _txData))\r\n    }\r\n    a = (a \u003E\u003E 248) \u0026 0x0f; // get outs-length nibble\r\n    Output[] memory outs = new Output[](a);\r\n    for (uint256 i = 0; i \u003C outs.length; i\u002B\u002B) {\r\n      offset = parseOutput(_txData, i, offset, outs); // solium-disable-line arg-overflow\r\n    }\r\n    txn = Tx(txType, ins, outs);\r\n  }\r\n\r\n  function getSigHash(bytes memory _txData) internal pure returns (bytes32 sigHash) {\r\n    uint256 a;\r\n    assembly {\r\n      a := mload(add(0x20, _txData))\r\n    }\r\n    a = a \u003E\u003E 248;\r\n    // if not transfer, sighash is just tx hash\r\n    require(a == 3);\r\n    // read ins\r\n    assembly {\r\n        a := mload(add(0x21, _txData))\r\n    }\r\n    a = a \u003E\u003E 252; // get ins-length nibble\r\n    bytes memory sigData = new bytes(_txData.length);\r\n    assembly {\r\n      // copy type\r\n      mstore8(add(sigData, 32), byte(0, mload(add(_txData, 32))))\r\n      // copy #inputs / #outputs\r\n      mstore8(add(sigData, 33), byte(1, mload(add(_txData, 32))))\r\n      let offset := 0\r\n      for\r\n        { let i := 0 }\r\n        lt(i, a)\r\n        { i := add(i, 1) }\r\n        {\r\n          mstore(add(sigData, add(34, offset)), mload(add(_txData, add(34, offset))))\r\n          mstore8(add(sigData, add(66, offset)), byte(0, mload(add(_txData, add(66, offset)))))\r\n          offset := add(offset, add(33, 65))\r\n        }\r\n      for\r\n        { let i := add(34, offset) }\r\n        lt(i, add(64, mload(_txData)))\r\n        { i := add(i, 0x20) }\r\n        {\r\n          mstore(add(sigData, i), mload(add(_txData, i)))\r\n        }\r\n    }\r\n\r\n    return keccak256(abi.encodePacked(\u0022\\x19Ethereum Signed Message:\\n\u0022, uint2str(_txData.length), sigData));\r\n  }\r\n\r\n  // solium-disable-next-line security/no-assign-params\r\n  function getMerkleRoot(\r\n    bytes32 _leaf, uint256 _index, uint256 _offset, bytes32[] memory _proof\r\n  ) internal pure returns (bytes32) {\r\n    bytes32 temp;\r\n    for (uint256 i = _offset; i \u003C _proof.length; i\u002B\u002B) {\r\n      temp = _proof[i];\r\n      if (_index % 2 == 0) {\r\n        assembly {\r\n          mstore(0, _leaf)\r\n          mstore(0x20, temp)\r\n          _leaf := keccak256(0, 0x40)\r\n        }\r\n      } else {\r\n        assembly {\r\n          mstore(0, temp)\r\n          mstore(0x20, _leaf)\r\n          _leaf := keccak256(0, 0x40)\r\n        }\r\n      }\r\n      _index = _index / 2;\r\n    }\r\n    return _leaf;\r\n  }\r\n\r\n  //validate that transaction is included to the period (merkle proof)\r\n  function validateProof(\r\n    uint256 _cdOffset, bytes32[] memory _proof\r\n  ) internal pure returns (uint64 txPos, bytes32 txHash, bytes memory txData) {\r\n    uint256 offset = uint8(uint256(_proof[1] \u003E\u003E 248));\r\n    uint256 txLength = uint16(uint256(_proof[1] \u003E\u003E 224));\r\n\r\n    txData = new bytes(txLength);\r\n    assembly {\r\n      calldatacopy(add(txData, 0x20), add(68, add(offset, _cdOffset)), txLength)\r\n    }\r\n    txHash = keccak256(txData);\r\n    txPos = uint64(uint256(_proof[1] \u003E\u003E 160));\r\n    bytes32 root = getMerkleRoot(\r\n      txHash, \r\n      txPos, \r\n      uint8(uint256(_proof[1] \u003E\u003E 240)),\r\n      _proof\r\n    ); \r\n    require(root == _proof[0]);\r\n  }\r\n\r\n  function recoverTxSigner(uint256 offset, bytes32[] memory _proof) internal pure returns (address dest) {\r\n    uint16 txLength = uint16(uint256(_proof[1] \u003E\u003E 224));\r\n    bytes memory txData = new bytes(txLength);\r\n    bytes32 r;\r\n    bytes32 s;\r\n    uint8 v;\r\n    assembly {\r\n      calldatacopy(add(txData, 32), add(114, offset), 43)\r\n      r := calldataload(add(157, offset))\r\n      s := calldataload(add(189, offset))\r\n      v := calldataload(add(190, offset))\r\n      calldatacopy(add(txData, 140), add(222, offset), 28) // 32 \u002B 43 \u002B 65\r\n    }\r\n    dest = ecrecover(getSigHash(txData), v, r, s); // solium-disable-line arg-overflow\r\n  }\r\n\r\n  // https://github.com/oraclize/ethereum-api/blob/master/oraclizeAPI_0.5.sol#L886\r\n  // solium-disable-next-line security/no-assign-params\r\n  function uint2str(uint _i) internal pure returns (string memory _uintAsString) {\r\n    if (_i == 0) {\r\n      return \u00220\u0022;\r\n    }\r\n    uint j = _i;\r\n    uint len;\r\n    while (j != 0) {\r\n      len\u002B\u002B;\r\n      j /= 10;\r\n    }\r\n    bytes memory bstr = new bytes(len);\r\n    uint k = len - 1;\r\n    while (_i != 0) {\r\n      bstr[k--] = byte(uint8(48 \u002B _i % 10));\r\n      _i /= 10;\r\n    }\r\n    return string(bstr);\r\n  }\r\n}\r\n\r\n\r\ncontract ExitHandler is IExitHandler, DepositHandler {\r\n\r\n  using PriorityQueue for PriorityQueue.Token;\r\n\r\n  event ExitStarted(\r\n    bytes32 indexed txHash,\r\n    uint8 indexed outIndex,\r\n    uint256 indexed color,\r\n    address exitor,\r\n    uint256 amount\r\n  );\r\n\r\n  /**\r\n    - tokenData \u2014 (optional) NST data\r\n   */\r\n  struct Exit {\r\n    uint256 amount;\r\n    uint16 color;\r\n    address owner;\r\n    bool finalized;\r\n    uint32 priorityTimestamp;\r\n    uint256 stake;\r\n    bytes32 tokenData;\r\n  }\r\n\r\n  uint256 public exitDuration;\r\n  uint256 public exitStake;\r\n  uint256 public nftExitCounter;\r\n  uint256 public nstExitCounter;\r\n\r\n  /**\r\n   * UTXO \u2192 Exit mapping\r\n   */\r\n  mapping(bytes32 =\u003E Exit) public exits;\r\n\r\n  function initializeWithExit(\r\n    Bridge _bridge,\r\n    uint256 _exitDuration,\r\n    uint256 _exitStake) public initializer {\r\n    initialize(_bridge);\r\n    exitDuration = _exitDuration;\r\n    exitStake = _exitStake;\r\n    emit MinGasPrice(0);\r\n  }\r\n\r\n  function setExitStake(uint256 _exitStake) public ifAdmin {\r\n    exitStake = _exitStake;\r\n  }\r\n\r\n  function setExitDuration(uint256 _exitDuration) public ifAdmin {\r\n    exitDuration = _exitDuration;\r\n  }\r\n\r\n  function startExit(\r\n    bytes32[] memory _youngestInputProof, bytes32[] memory _proof,\r\n    uint8 _outputIndex, uint8 _inputIndex\r\n  ) public payable {\r\n    require(msg.value \u003E= exitStake, \u0022Not enough ether sent to pay for exit stake\u0022);\r\n    uint32 timestamp;\r\n    (, timestamp,,) = bridge.periods(_proof[0]);\r\n    require(timestamp \u003E 0, \u0022The referenced period was not submitted to bridge\u0022);\r\n\r\n    if (_youngestInputProof.length \u003E 0) {\r\n      (, timestamp,,) = bridge.periods(_youngestInputProof[0]);\r\n      require(timestamp \u003E 0, \u0022The referenced period was not submitted to bridge\u0022);\r\n    }\r\n\r\n    // check exiting tx inclusion in the root chain block\r\n    bytes32 txHash;\r\n    bytes memory txData;\r\n    uint64 txPos;\r\n    (txPos, txHash, txData) = TxLib.validateProof(32 * (_youngestInputProof.length \u002B 2) \u002B 64, _proof);\r\n\r\n    // parse exiting tx and check if it is exitable\r\n    TxLib.Tx memory exitingTx = TxLib.parseTx(txData);\r\n    TxLib.Output memory out = exitingTx.outs[_outputIndex];\r\n\r\n    bytes32 utxoId = bytes32(uint256(_outputIndex) \u003C\u003C 120 | uint120(uint256(txHash)));\r\n    uint256 priority;\r\n    if (msg.sender != out.owner) {\r\n      // or caller code hashes to owner\r\n      address a = msg.sender;\r\n      assembly {\r\n        priority := extcodehash(a) // abusing priority for hashBytes here, to save stack\r\n      }\r\n      require(priority != 0, \u0022caller not contract\u0022);\r\n      require(bytes20(out.owner) == ripemd160(abi.encode(priority)), \u0022Only UTXO owner or contract can start exit\u0022);\r\n      out.owner = msg.sender;\r\n    }\r\n    require(out.value \u003E 0, \u0022UTXO has no value\u0022);\r\n    require(exits[utxoId].amount == 0, \u0022The exit for UTXO has already been started\u0022);\r\n    require(!exits[utxoId].finalized, \u0022The exit for UTXO has already been finalized\u0022);\r\n\r\n    \r\n    if (_youngestInputProof.length \u003E 0) {\r\n      // check youngest input tx inclusion in the root chain block\r\n      bytes32 inputTxHash;\r\n      (txPos, inputTxHash,) = TxLib.validateProof(96, _youngestInputProof);\r\n      require(\r\n        inputTxHash == exitingTx.ins[_inputIndex].outpoint.hash,\r\n        \u0022Input from the proof is not referenced in exiting tx\u0022\r\n      );\r\n      \r\n      if (isNft(out.color)) {\r\n        priority = (nftExitCounter \u003C\u003C 128) | uint128(uint256(utxoId));\r\n        nftExitCounter\u002B\u002B;\r\n      } else if (isNST(out.color)) {\r\n        priority = (nstExitCounter \u003C\u003C 128) | uint128(uint256(utxoId));\r\n        nstExitCounter\u002B\u002B;\r\n      } else {      \r\n        priority = getERC20ExitPriority(timestamp, utxoId, txPos);\r\n      }\r\n    } else {\r\n      require(exitingTx.txType == TxLib.TxType.Deposit, \u0022Expected deposit tx\u0022);\r\n      if (isNft(out.color)) {\r\n        priority = (nftExitCounter \u003C\u003C 128) | uint128(uint256(utxoId));\r\n        nftExitCounter\u002B\u002B;\r\n      } else if (isNST(out.color)) {\r\n        priority = (nstExitCounter \u003C\u003C 128) | uint128(uint256(utxoId));\r\n        nstExitCounter\u002B\u002B;\r\n      } else {\r\n        priority = getERC20ExitPriority(timestamp, utxoId, txPos);\r\n      }\r\n    }\r\n\r\n    tokens[out.color].insert(priority);\r\n\r\n    exits[utxoId] = Exit({\r\n      owner: out.owner,\r\n      color: out.color,\r\n      amount: out.value,\r\n      finalized: false,\r\n      stake: exitStake,\r\n      priorityTimestamp: timestamp,\r\n      tokenData: out.stateRoot\r\n    });\r\n\r\n    emit ExitStarted(\r\n      txHash,\r\n      _outputIndex,\r\n      out.color,\r\n      out.owner,\r\n      out.value\r\n    );\r\n  }\r\n\r\n  function startDepositExit(uint256 _depositId) public payable {\r\n    require(msg.value \u003E= exitStake, \u0022Not enough ether sent to pay for exit stake\u0022);\r\n    // check that deposit exits\r\n    Deposit memory deposit = deposits[uint32(_depositId)];\r\n    require(deposit.owner == msg.sender, \u0022Only deposit owner can start exit\u0022);\r\n    require(deposit.amount \u003E 0, \u0022deposit has no value\u0022);\r\n    require(exits[bytes32(_depositId)].amount == 0, \u0022The exit of deposit has already been started\u0022);\r\n    require(!exits[bytes32(_depositId)].finalized, \u0022The exit for deposit has already been finalized\u0022);\r\n\r\n    uint256 priority;\r\n    if (isNft(deposit.color)) {\r\n      priority = (nftExitCounter \u003C\u003C 128) | uint128(_depositId);\r\n      nftExitCounter\u002B\u002B;\r\n    } else if (isNST(deposit.color)) {\r\n      priority = (nstExitCounter \u003C\u003C 128) | uint128(_depositId);\r\n      nstExitCounter\u002B\u002B;\r\n    } else {\r\n      priority = getERC20ExitPriority(uint32(deposit.time), bytes32(_depositId), 0);\r\n    }\r\n\r\n    tokens[deposit.color].insert(priority);\r\n\r\n    exits[bytes32(_depositId)] = Exit({\r\n      owner: deposit.owner,\r\n      color: deposit.color,\r\n      amount: deposit.amount,\r\n      finalized: false,\r\n      stake: exitStake,\r\n      priorityTimestamp: uint32(now),\r\n      tokenData: \u00220x\u0022\r\n    });\r\n\r\n    // no need to emit ExitStartedV2\r\n    // no need to update emit data root for NSTs, as it only got deposit now.\r\n    emit ExitStarted(\r\n      bytes32(_depositId),\r\n      0,\r\n      deposit.color,\r\n      deposit.owner,\r\n      deposit.amount\r\n    );\r\n  }\r\n\r\n  // @dev Finalizes exit for the chosen color with the highest priority\r\n  function finalizeExits(uint16 _color) public {\r\n    bytes32 utxoId;\r\n    uint256 exitableAt;\r\n    Exit memory currentExit;\r\n\r\n    (utxoId, exitableAt) = getNextExit(_color);\r\n\r\n    require(tokens[_color].currentSize \u003E 0, \u0022Queue empty for color.\u0022);\r\n\r\n    for (uint i = 0; i\u003C20; i\u002B\u002B) {\r\n      // if queue is empty or top exit cannot be exited yet, stop\r\n      if (exitableAt \u003E block.timestamp) {\r\n        return;\r\n      }\r\n\r\n      currentExit = exits[utxoId];\r\n\r\n      if (currentExit.owner != address(0) || currentExit.amount != 0) { // exit was not removed\r\n        // Note: for NFTs, the amount is actually the NFT id (both uint256)\r\n        if (isNft(currentExit.color)) {\r\n          tokens[currentExit.color].addr.transferFrom(address(this), currentExit.owner, currentExit.amount);\r\n        } else if (isNST(currentExit.color)) {\r\n          bytes32 tokenData = currentExit.tokenData;\r\n          address tokenAddr = address(tokens[currentExit.color].addr);\r\n\r\n          bool success;\r\n          (success, ) = tokenAddr.call(abi.encodeWithSignature(\u0022writeData(uint256,bytes32)\u0022, currentExit.amount, tokenData));\r\n          // if set data did not work, we assume the token hasn\u0027t been minted yet\r\n          if (!success) {\r\n            tokenAddr.call(\r\n              abi.encodeWithSignature(\r\n                \u0022breed(uint256,address,bytes32)\u0022,\r\n                currentExit.amount, currentExit.owner, tokenData\r\n              )\r\n            );\r\n          } else {\r\n            // only if we were able to setData we try to transfer\r\n            tokens[currentExit.color].addr.transferFrom(address(this), currentExit.owner, currentExit.amount);\r\n          }\r\n        } else {\r\n          // why so complicated? why not transfer()?\r\n          tokens[currentExit.color].addr.approve(address(this), currentExit.amount);\r\n          tokens[currentExit.color].addr.transferFrom(address(this), currentExit.owner, currentExit.amount);\r\n        }\r\n        // Pay exit stake\r\n        address(uint160(currentExit.owner)).send(currentExit.stake);\r\n      }\r\n\r\n      tokens[currentExit.color].delMin();\r\n      exits[utxoId].finalized = true;\r\n\r\n      if (tokens[currentExit.color].currentSize \u003E 0) {\r\n        (utxoId, exitableAt) = getNextExit(_color);\r\n      } else {\r\n        return;\r\n      }\r\n    }\r\n  }\r\n\r\n  // @dev For backwards compatibility reasons...\r\n  function finalizeTopExit(uint16 _color) public {\r\n    finalizeExits(_color);\r\n  }\r\n\r\n  function challengeExit(\r\n    bytes32[] memory _proof,\r\n    bytes32[] memory _prevProof,\r\n    uint8 _outputIndex,\r\n    uint8 _inputIndex,\r\n    address challenger\r\n  ) public {\r\n    require(msg.sender == challenger, \u0022Wrong challenger\u0022);\r\n    // validate exiting tx\r\n    uint256 offset = 32 * (_proof.length \u002B 2);\r\n    bytes32 txHash1;\r\n    bytes memory txData;\r\n    (, txHash1, txData) = TxLib.validateProof(offset \u002B 96, _prevProof);\r\n    bytes32 utxoId = bytes32(uint256(_outputIndex) \u003C\u003C 120 | uint120(uint256(txHash1)));\r\n\r\n    TxLib.Tx memory txn;\r\n    if (_proof.length \u003E 0) {\r\n      // validate spending tx\r\n      bytes32 txHash;\r\n      (, txHash, txData) = TxLib.validateProof(128, _proof);\r\n      txn = TxLib.parseTx(txData);\r\n\r\n      // make sure one is spending the other one\r\n      require(txHash1 == txn.ins[_inputIndex].outpoint.hash);\r\n      require(_outputIndex == txn.ins[_inputIndex].outpoint.pos);\r\n\r\n      // if transfer, make sure signature correct\r\n      if (txn.txType == TxLib.TxType.Transfer) {\r\n        bytes32 sigHash = TxLib.getSigHash(txData);\r\n        address signer = ecrecover(\r\n          sigHash,\r\n          txn.ins[_inputIndex].v,\r\n          txn.ins[_inputIndex].r,\r\n          txn.ins[_inputIndex].s\r\n        );\r\n        require(exits[utxoId].owner == signer);\r\n      } else if (txn.txType == TxLib.TxType.SpendCond) {\r\n        // just have the pass through\r\n        // later we will check solEVM Enforcer here.\r\n      } else {\r\n        revert(\u0022unknown tx type\u0022);\r\n      }\r\n    } else {\r\n      // challenging deposit exit\r\n      txn = TxLib.parseTx(txData);\r\n      utxoId = txn.ins[_inputIndex].outpoint.hash;\r\n      if (txn.txType == TxLib.TxType.Deposit) {\r\n        // check that deposit was included correctly\r\n        // only then it should be usable for challenge\r\n        Deposit memory deposit = deposits[uint32(uint256(utxoId))];\r\n        require(deposit.amount == txn.outs[0].value, \u0022value mismatch\u0022);\r\n        require(deposit.owner == txn.outs[0].owner, \u0022owner mismatch\u0022);\r\n        require(deposit.color == txn.outs[0].color, \u0022color mismatch\u0022);\r\n        if (isNST(deposit.color)) {\r\n          require(tokenData[uint32(uint256(utxoId))] == txn.outs[0].stateRoot, \u0022data mismatch\u0022);\r\n        }\r\n        // todo: check timely inclusion of deposit tx\r\n        // this will prevent grieving attacks by the operator\r\n      } else {\r\n        revert(\u0022unexpected tx type\u0022);\r\n      }\r\n    }\r\n\r\n    require(exits[utxoId].amount \u003E 0, \u0022exit not found\u0022);\r\n    require(!exits[utxoId].finalized, \u0022The exit has already been finalized\u0022);\r\n\r\n    // award stake to challanger\r\n    msg.sender.transfer(exits[utxoId].stake);\r\n    // delete invalid exit\r\n    delete exits[utxoId];\r\n  }\r\n\r\n  function challengeYoungestInput(\r\n    bytes32[] memory _youngerInputProof,\r\n    bytes32[] memory _exitingTxProof,\r\n    uint8 _outputIndex,\r\n    uint8 _inputIndex,\r\n    address challenger\r\n  ) public {\r\n    require(msg.sender == challenger, \u0022Wrong challenger\u0022);\r\n    // validate exiting input tx\r\n    bytes32 txHash;\r\n    bytes memory txData;\r\n    (, txHash, txData) = TxLib.validateProof(32 * (_youngerInputProof.length \u002B 2) \u002B 96, _exitingTxProof);\r\n    bytes32 utxoId = bytes32(uint256(_outputIndex) \u003C\u003C 120 | uint120(uint256(txHash)));\r\n\r\n    // check the exit exists\r\n    require(exits[utxoId].amount \u003E 0, \u0022There is no exit for this UTXO\u0022);\r\n\r\n    TxLib.Tx memory exitingTx = TxLib.parseTx(txData);\r\n\r\n    // validate younger input tx\r\n    (,txHash,) = TxLib.validateProof(128, _youngerInputProof);\r\n\r\n    // check younger input is actually an input of exiting tx\r\n    require(txHash == exitingTx.ins[_inputIndex].outpoint.hash, \u0022Given output is not referenced in exiting tx\u0022);\r\n\r\n    uint32 youngerInputTimestamp;\r\n    (,youngerInputTimestamp,,) = bridge.periods(_youngerInputProof[0]);\r\n    require(youngerInputTimestamp \u003E 0, \u0022The referenced period was not submitted to bridge\u0022);\r\n\r\n    require(exits[utxoId].priorityTimestamp \u003C youngerInputTimestamp, \u0022Challenged input should be older\u0022);\r\n\r\n    // award stake to challanger\r\n    msg.sender.transfer(exits[utxoId].stake);\r\n    // delete invalid exit\r\n    delete exits[utxoId];\r\n  }\r\n\r\n  function getNextExit(uint16 _color) internal view returns (bytes32 utxoId, uint256 exitableAt) {\r\n    uint256 priority = tokens[_color].getMin();\r\n    utxoId = bytes32(uint256(uint128(priority)));\r\n    exitableAt = priority \u003E\u003E 192;\r\n  }\r\n\r\n  function isNft(uint16 _color) internal pure returns (bool) {\r\n    return (_color \u003E= NFT_FIRST_COLOR) \u0026\u0026 (_color \u003C NST_FIRST_COLOR);\r\n  }\r\n\r\n  function isNST(uint16 _color) internal pure returns (bool) {\r\n    return _color \u003E= NST_FIRST_COLOR;\r\n  }\r\n\r\n  function getERC20ExitPriority(\r\n    uint32 timestamp, bytes32 utxoId, uint64 txPos\r\n  ) internal view returns (uint256 priority) {\r\n    uint256 exitableAt = Math.max(timestamp \u002B (2 * exitDuration), block.timestamp \u002B exitDuration);\r\n    return (exitableAt \u003C\u003C 192) | uint256(txPos) \u003C\u003C 128 | uint128(uint256(utxoId));\r\n  }\r\n\r\n  // solium-disable-next-line mixedcase\r\n  uint256[49] private ______gap;\r\n}\r\n\r\n\r\n\r\ncontract FastExitHandler is ExitHandler {\r\n\r\n  struct Data {\r\n    uint32 timestamp;\r\n    bytes32 txHash;\r\n    uint64 txPos;\r\n    bytes32 utxoId;\r\n  }\r\n\r\n  function startBoughtExit(\r\n    bytes32[] memory _youngestInputProof, bytes32[] memory _proof,\r\n    uint8 _outputIndex, uint8 _inputIndex, bytes32[] memory signedData\r\n  ) public payable {\r\n    require(msg.value \u003E= exitStake, \u0022Not enough ether sent to pay for exit stake\u0022);\r\n    Data memory data;\r\n\r\n    (,data.timestamp,,) = bridge.periods(_proof[0]);\r\n    require(data.timestamp \u003E 0, \u0022The referenced period was not submitted to bridge\u0022);\r\n\r\n    (, data.timestamp,,) = bridge.periods(_youngestInputProof[0]);\r\n    require(data.timestamp \u003E 0, \u0022The referenced period was not submitted to bridge\u0022);\r\n\r\n    // check exiting tx inclusion in the root chain block\r\n    bytes memory txData;\r\n    (data.txPos, data.txHash, txData) = TxLib.validateProof(32 * (_youngestInputProof.length \u002B 2) \u002B 96, _proof);\r\n\r\n    // parse exiting tx and check if it is exitable\r\n    TxLib.Tx memory exitingTx = TxLib.parseTx(txData);\r\n    TxLib.Output memory out = exitingTx.outs[_outputIndex];\r\n    data.utxoId = bytes32(uint256(_outputIndex) \u003C\u003C 120 | uint120(uint256(data.txHash)));\r\n\r\n    (uint256 buyPrice, bytes32 utxoIdSigned, address signer) = unpackSignedData(signedData);\r\n\r\n    require(!isNft(out.color), \u0022Can not fast exit NFTs\u0022);\r\n    require(out.owner == address(this), \u0022Funds were not sent to this contract\u0022);\r\n    require(\r\n      ecrecover(\r\n        TxLib.getSigHash(txData),\r\n        exitingTx.ins[0].v, exitingTx.ins[0].r, exitingTx.ins[0].s\r\n      ) == signer,\r\n      \u0022Signer was not the previous owner of UTXO\u0022\r\n    );\r\n    require(\r\n      data.utxoId == utxoIdSigned,\r\n      \u0022The signed utxoid does not match the one in the proof\u0022\r\n    );\r\n\r\n    require(out.value \u003E 0, \u0022UTXO has no value\u0022);\r\n    require(exits[data.utxoId].amount == 0, \u0022The exit for UTXO has already been started\u0022);\r\n    require(!exits[data.utxoId].finalized, \u0022The exit for UTXO has already been finalized\u0022);\r\n    require(exitingTx.txType == TxLib.TxType.Transfer, \u0022Can only fast exit transfer tx\u0022);\r\n\r\n    uint256 priority;\r\n    // check youngest input tx inclusion in the root chain block\r\n    bytes32 inputTxHash;\r\n    (data.txPos, inputTxHash,) = TxLib.validateProof(128, _youngestInputProof);\r\n    require(\r\n      inputTxHash == exitingTx.ins[_inputIndex].outpoint.hash,\r\n      \u0022Input from the proof is not referenced in exiting tx\u0022\r\n    );\r\n\r\n    if (isNft(out.color)) {\r\n      priority = (nftExitCounter \u003C\u003C 128) | uint128(uint256(data.utxoId));\r\n      nftExitCounter\u002B\u002B;\r\n    } else {\r\n      priority = getERC20ExitPriority(data.timestamp, data.utxoId, data.txPos);\r\n    }\r\n\r\n    tokens[out.color].addr.transferFrom(msg.sender, signer, buyPrice);\r\n\r\n    tokens[out.color].insert(priority);\r\n\r\n    exits[data.utxoId] = Exit({\r\n      owner: msg.sender,\r\n      color: out.color,\r\n      amount: out.value,\r\n      finalized: false,\r\n      stake: exitStake,\r\n      priorityTimestamp: data.timestamp,\r\n      tokenData: out.stateRoot\r\n    });\r\n    emit ExitStarted(\r\n      data.txHash,\r\n      _outputIndex,\r\n      out.color,\r\n      out.owner,\r\n      out.value\r\n    );\r\n  }\r\n\r\n  function unpackSignedData(\r\n    bytes32[] memory signedData\r\n  ) internal pure returns (\r\n    uint256 buyPrice, bytes32 utxoId, address signer\r\n  ) {\r\n    utxoId = signedData[0];\r\n    buyPrice = uint256(signedData[1]);\r\n    bytes32 r = signedData[2];\r\n    bytes32 s = signedData[3];\r\n    uint8 v = uint8(uint256(signedData[4]));\r\n    // solium-disable-next-line\r\n    bytes32 sigHash = keccak256(abi.encodePacked(\r\n      \u0022\\x19Ethereum Signed Message:\\n\u0022,\r\n      uint2str(64),\r\n      utxoId,\r\n      buyPrice\r\n    ));\r\n    signer = ecrecover(sigHash, v, r, s); // solium-disable-line arg-overflow\r\n  }\r\n\r\n  // https://github.com/oraclize/ethereum-api/blob/master/oraclizeAPI_0.5.sol#L886\r\n  // solium-disable-next-line security/no-assign-params\r\n  function uint2str(uint _i) internal pure returns (string memory _uintAsString) {\r\n    if (_i == 0) {\r\n      return \u00220\u0022;\r\n    }\r\n    uint j = _i;\r\n    uint len;\r\n    while (j != 0) {\r\n      len\u002B\u002B;\r\n      j /= 10;\r\n    }\r\n    bytes memory bstr = new bytes(len);\r\n    uint k = len - 1;\r\n    while (_i != 0) {\r\n      bstr[k--] = byte(uint8(48 \u002B _i % 10));\r\n      _i /= 10;\r\n    }\r\n    return string(bstr);\r\n  }\r\n}","ABI":"[{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_token\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_type\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022registerToken\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_amountOrTokenId\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_color\u0022,\u0022type\u0022:\u0022uint16\u0022}],\u0022name\u0022:\u0022depositBySender\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022depositCount\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint32\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint32\u0022}],\u0022name\u0022:\u0022tokenData\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022exitStake\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_youngerInputProof\u0022,\u0022type\u0022:\u0022bytes32[]\u0022},{\u0022name\u0022:\u0022_exitingTxProof\u0022,\u0022type\u0022:\u0022bytes32[]\u0022},{\u0022name\u0022:\u0022_outputIndex\u0022,\u0022type\u0022:\u0022uint8\u0022},{\u0022name\u0022:\u0022_inputIndex\u0022,\u0022type\u0022:\u0022uint8\u0022},{\u0022name\u0022:\u0022challenger\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022challengeYoungestInput\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint32\u0022}],\u0022name\u0022:\u0022deposits\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022time\u0022,\u0022type\u0022:\u0022uint64\u0022},{\u0022name\u0022:\u0022color\u0022,\u0022type\u0022:\u0022uint16\u0022},{\u0022name\u0022:\u0022owner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022implementation\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022impl\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022nstExitCounter\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_youngestInputProof\u0022,\u0022type\u0022:\u0022bytes32[]\u0022},{\u0022name\u0022:\u0022_proof\u0022,\u0022type\u0022:\u0022bytes32[]\u0022},{\u0022name\u0022:\u0022_outputIndex\u0022,\u0022type\u0022:\u0022uint8\u0022},{\u0022name\u0022:\u0022_inputIndex\u0022,\u0022type\u0022:\u0022uint8\u0022},{\u0022name\u0022:\u0022signedData\u0022,\u0022type\u0022:\u0022bytes32[]\u0022}],\u0022name\u0022:\u0022startBoughtExit\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:true,\u0022stateMutability\u0022:\u0022payable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022nftTokenCount\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint16\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022nftExitCounter\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_color\u0022,\u0022type\u0022:\u0022uint16\u0022}],\u0022name\u0022:\u0022finalizeExits\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022nstTokenCount\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint16\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_minGasPrice\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022setMinGasPrice\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022exitDuration\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_exitStake\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022setExitStake\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_bridge\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_exitDuration\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_exitStake\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022initializeWithExit\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022erc20TokenCount\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint16\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_color\u0022,\u0022type\u0022:\u0022uint16\u0022}],\u0022name\u0022:\u0022finalizeTopExit\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_bridge\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022initialize\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_proof\u0022,\u0022type\u0022:\u0022bytes32[]\u0022},{\u0022name\u0022:\u0022_prevProof\u0022,\u0022type\u0022:\u0022bytes32[]\u0022},{\u0022name\u0022:\u0022_outputIndex\u0022,\u0022type\u0022:\u0022uint8\u0022},{\u0022name\u0022:\u0022_inputIndex\u0022,\u0022type\u0022:\u0022uint8\u0022},{\u0022name\u0022:\u0022challenger\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022challengeExit\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_owner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_amountOrTokenId\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_color\u0022,\u0022type\u0022:\u0022uint16\u0022}],\u0022name\u0022:\u0022deposit\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022minGasPrice\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_color\u0022,\u0022type\u0022:\u0022uint16\u0022}],\u0022name\u0022:\u0022getTokenAddr\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022bridge\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_exitDuration\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022setExitDuration\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022tokenColors\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint16\u0022}],\u0022name\u0022:\u0022tokens\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022addr\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022currentSize\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_depositId\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022startDepositExit\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:true,\u0022stateMutability\u0022:\u0022payable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_youngestInputProof\u0022,\u0022type\u0022:\u0022bytes32[]\u0022},{\u0022name\u0022:\u0022_proof\u0022,\u0022type\u0022:\u0022bytes32[]\u0022},{\u0022name\u0022:\u0022_outputIndex\u0022,\u0022type\u0022:\u0022uint8\u0022},{\u0022name\u0022:\u0022_inputIndex\u0022,\u0022type\u0022:\u0022uint8\u0022}],\u0022name\u0022:\u0022startExit\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:true,\u0022stateMutability\u0022:\u0022payable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022admin\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022exits\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022color\u0022,\u0022type\u0022:\u0022uint16\u0022},{\u0022name\u0022:\u0022owner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022finalized\u0022,\u0022type\u0022:\u0022bool\u0022},{\u0022name\u0022:\u0022priorityTimestamp\u0022,\u0022type\u0022:\u0022uint32\u0022},{\u0022name\u0022:\u0022stake\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022tokenData\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022txHash\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022outIndex\u0022,\u0022type\u0022:\u0022uint8\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022color\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022exitor\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022ExitStarted\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022depositId\u0022,\u0022type\u0022:\u0022uint32\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022depositor\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022color\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022NewDeposit\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022minGasPrice\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022MinGasPrice\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022depositId\u0022,\u0022type\u0022:\u0022uint32\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022depositor\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022color\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022data\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022NewDepositV2\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022tokenAddr\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022color\u0022,\u0022type\u0022:\u0022uint16\u0022}],\u0022name\u0022:\u0022NewToken\u0022,\u0022type\u0022:\u0022event\u0022}]","ContractName":"FastExitHandler","CompilerVersion":"v0.5.2\u002Bcommit.1df8f40c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://3d9e9876a311caf13744e2c6e0045ee9d19ee4c8b0ba769b8352544d974665ca"}]