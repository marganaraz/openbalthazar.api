[{"SourceCode":"// File: contracts/Owned.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\ncontract Owned {\r\n    address public owner;\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/ERC20Basic.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// File: contracts/ERC20.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\ncontract ERC20 is ERC20Basic {\r\n  // Optional token name\r\n  string  public  name = \u0022zeosX\u0022;\r\n  string  public  symbol;\r\n  uint256  public  decimals = 18; // standard token precision. override to customize\r\n    \r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/lib/SafeMath.sol\r\n\r\npragma solidity ^0.4.24;\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\n \r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b \u003E 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c \u002B a % b); // There is no case in which this doesn\u0027t hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b \u003C= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a \u002B b;\r\n    assert(c \u003E= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: contracts/BasicToken.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\ncontract BasicToken is ERC20Basic {\r\n  using SafeMath for uint256;\r\n\r\n  mapping(address =\u003E uint256) balances;\r\n\r\n  uint256 totalSupply_;\r\n\r\n  /**\r\n  * @dev total number of tokens in existence\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return totalSupply_;\r\n  }\r\n\r\n  \r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address.\r\n  * @param _owner The address to query the the balance of.\r\n  * @return An uint256 representing the amount owned by the passed address.\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/StandardToken.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\ncontract StandardToken is ERC20, BasicToken {\r\n\r\n  mapping (address =\u003E mapping (address =\u003E uint256)) internal allowed;\r\n\r\n  function multiTransfer(address[] _to,uint[] _value) public returns (bool);\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n    require(_to != address(0));\r\n    require(_value \u003C= balances[_from]);\r\n    require(_value \u003C= allowed[_from][msg.sender]);\r\n\r\n    balances[_from] = balances[_from].sub(_value);\r\n    balances[_to] = balances[_to].add(_value);\r\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n    emit Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender\u0027s allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) public returns (bool) {\r\n    allowed[msg.sender][_spender] = _value;\r\n    emit Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param _owner address The address which owns the funds.\r\n   * @param _spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address _owner, address _spender) public view returns (uint256) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\r\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[_spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][_spender];\r\n    if (_subtractedValue \u003E oldValue) {\r\n      allowed[msg.sender][_spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\r\n    }\r\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/BurnableToken.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\ncontract BurnableToken is StandardToken {\r\n\r\n  event Burn(address indexed burner, uint256 value);\r\n\r\n  /**\r\n   * @dev Burns a specific amount of tokens.\r\n   * @param _value The amount of token to be burned.\r\n   */\r\n  function burn(uint256 _value) public {\r\n    require(_value \u003C= balances[msg.sender]);\r\n    // no need to require value \u003C= totalSupply, since that would imply the\r\n    // sender\u0027s balance is greater than the totalSupply, which *should* be an assertion failure\r\n\r\n    address burner = msg.sender;\r\n    balances[burner] = balances[burner].sub(_value);\r\n    totalSupply_ = totalSupply_.sub(_value);\r\n    emit Burn(burner, _value);\r\n    emit Transfer(burner, address(0), _value);\r\n  }\r\n}\r\n\r\n// File: contracts/KYCVerification.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\ncontract KYCVerification is Owned{\r\n    \r\n    mapping(address =\u003E bool) public kycAddress;\r\n    \r\n    event LogKYCVerification(address _kycAddress,bool _status);\r\n    \r\n    constructor () public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function updateVerifcationBatch(address[] _kycAddress,bool _status) onlyOwner public returns(bool)\r\n    {\r\n        for(uint tmpIndex = 0; tmpIndex \u003C _kycAddress.length; tmpIndex\u002B\u002B)\r\n        {\r\n            kycAddress[_kycAddress[tmpIndex]] = _status;\r\n            emit LogKYCVerification(_kycAddress[tmpIndex],_status);\r\n        }\r\n        \r\n        return true;\r\n    }\r\n    \r\n    function updateVerifcation(address _kycAddress,bool _status) onlyOwner public returns(bool)\r\n    {\r\n        kycAddress[_kycAddress] = _status;\r\n        \r\n        emit LogKYCVerification(_kycAddress,_status);\r\n        \r\n        return true;\r\n    }\r\n    \r\n    function isVerified(address _user) view public returns(bool)\r\n    {\r\n        return kycAddress[_user] == true; \r\n    }\r\n}\r\n\r\n// File: contracts/STRIVEToken.sol\r\n\r\npragma solidity ^0.4.24;\r\n/* import \u0022./oraclizeAPI_0.5.sol\u0022; */\r\n\r\n\r\n\r\n\r\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\r\n\r\ncontract STRIVEToken is Owned, BurnableToken {\r\n    string public name = \u0022SUREBANQA TRUSTLESS, REWARD, INVESTMENT \u0026  VALUE ENABLER TOKEN\u0022;\r\n    string public symbol = \u0022STRIVE\u0022;\r\n    uint8 public decimals = 10;\r\n    \r\n    uint256 public initialSupply = 1000000000 * (10 ** uint256(decimals));\r\n    uint256 public totalSupply = 1000000000 * (10 ** uint256(decimals));\r\n    uint256 public externalAuthorizePurchase = 0;\r\n    \r\n    mapping (address =\u003E bool) public frozenAccount;\r\n    mapping(address =\u003E uint8) authorizedCaller;\r\n    // mapping (address =\u003E bool) public lockingEnabled;\r\n    /* in timestamp  */\r\n    mapping (address =\u003E uint) public userInitialLockinPeriod;\r\n\r\n    /* type 1 =\u003E 2 years   */\r\n    mapping (address =\u003E uint) public userFinalLockinPeriod;\r\n    /* withdraw amount in between initial and final period */\r\n    mapping (address =\u003E uint) public finalYearDebitAmount;\r\n    \r\n    bool public kycEnabled = true;\r\n    uint public capWithdrawPercent = 25; /* in percent*/\r\n    // uint public capWithdrawAmount = 25; /* in percent*/\r\n\r\n    KYCVerification public kycVerification;\r\n\r\n    event KYCMandateUpdate(bool _kycEnabled);\r\n    event KYCContractAddressUpdate(KYCVerification _kycAddress);\r\n    event LockinPeriodUpdated(address _guy,uint _userInitialLockinPeriod, uint _userFinalalLockinPeriod);\r\n    // event LockFunds(address _buyer,bool _status);\r\n    event LockinCapWithdrawPercentUpdated(address _guy, uint _percent);\r\n    event CapWithdrawDebitAmount(address _guy, uint256 value);\r\n\r\n\r\n    modifier onlyAuthCaller(){\r\n        require(authorizedCaller[msg.sender] == 1 || msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    /*\r\n        check locking status of user address.\r\n    */\r\n    // modifier lockingVerified(address _guy) {\r\n    //     if(lockingEnabled[_guy] == true){\r\n    //         revert(\u0022Account is locked\u0022);\r\n    //     }\r\n    //     _;\r\n    // }\r\n    \r\n    modifier kycVerified(address _guy) {\r\n      if(kycEnabled == true){\r\n          if(kycVerification.isVerified(_guy) == false)\r\n          {\r\n              revert(\u0022KYC Not Verified\u0022);\r\n          }\r\n      }\r\n      _;\r\n    }\r\n    \r\n     modifier frozenVerified(address _guy) {\r\n        if(frozenAccount[_guy] == true)\r\n        {\r\n            revert(\u0022Account is freeze\u0022);\r\n        }\r\n        _;\r\n    }\r\n\r\n    function updateKycContractAddress(KYCVerification _kycAddress) public onlyOwner returns(bool)\r\n    {\r\n      kycVerification = _kycAddress;\r\n\r\n      emit KYCContractAddressUpdate(_kycAddress);\r\n\r\n      return true;\r\n    }\r\n\r\n    function updateKycMandate(bool _kycEnabled) public onlyAuthCaller returns(bool)\r\n    {\r\n        kycEnabled = _kycEnabled;\r\n        emit KYCMandateUpdate(_kycEnabled);\r\n        return true;\r\n    }\r\n\r\n    /* This generates a public event on the blockchain that will notify clients */\r\n    event FrozenFunds(address target, bool frozen);\r\n    \r\n    /* Events */\r\n    event AuthorizedCaller(address caller);\r\n    event DeAuthorizedCaller(address caller);\r\n\r\n    /* Initializes contract with initial supply tokens to the creator of the contract */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        balances[0xBcd5B67aaeBb9765beE438e4Ce137B9aE2181898] = totalSupply;\r\n        \r\n        emit Transfer(address(0x0), address(this), totalSupply);\r\n        emit Transfer(address(this), address(0xBcd5B67aaeBb9765beE438e4Ce137B9aE2181898), totalSupply);\r\n            \r\n        authorizedCaller[msg.sender] = 1;\r\n        emit AuthorizedCaller(msg.sender);\r\n    }\r\n    \r\n    /* authorize caller */\r\n    function authorizeCaller(address _caller) public onlyOwner returns(bool) \r\n    {\r\n        authorizedCaller[_caller] = 1;\r\n        emit AuthorizedCaller(_caller);\r\n        return true;\r\n    }\r\n    \r\n    /* deauthorize caller */\r\n    function deAuthorizeCaller(address _caller) public onlyOwner returns(bool) \r\n    {\r\n        authorizedCaller[_caller] = 0;\r\n        emit DeAuthorizedCaller(_caller);\r\n        return true;\r\n    }\r\n    \r\n    function () payable public {\r\n        revert();\r\n    }\r\n    \r\n\r\n    /* Internal transfer, only can be called by this contract */\r\n    function _transfer(address _from, address _to, uint _value) internal returns(bool) {\r\n        require (_to != 0x0);                               // Prevent transfer to 0x0 address. Use burn() instead\r\n        \r\n        if(msg.sender != owner)\r\n        {\r\n            require (userInitialLockinPeriod[_from] \u003C now);  //v:check transfer if lockin period completed\r\n         \r\n            if(userInitialLockinPeriod[_from] \u003C now \u0026\u0026 userFinalLockinPeriod[_from] \u003E now)\r\n            {\r\n                uint _allowWithdrawAmt = balances[_from].mul(capWithdrawPercent).div(100);\r\n                \r\n                finalYearDebitAmount[_from] = finalYearDebitAmount[_from].add(_value);\r\n                \r\n                if(finalYearDebitAmount[_from] \u003C= _allowWithdrawAmt)\r\n                {\r\n                    require (balances[_from] \u003E _value);                // Check if the sender has enough\r\n                    require (balances[_to].add(_value) \u003E balances[_to]); // Check for overflow\r\n                    balances[_from] = balances[_from].sub(_value);                         // Subtract from the sender\r\n                    balances[_to] = balances[_to].add(_value);                           // Add the same to the recipient\r\n                    emit Transfer(_from, _to, _value);   \r\n                    \r\n                    emit CapWithdrawDebitAmount(_from,finalYearDebitAmount[_from]); // update withdraw amount.\r\n                    return true;        \r\n                }\r\n                revert();\r\n            }\r\n            \r\n        }\r\n        \r\n        \r\n        require (balances[_from] \u003E _value);                // Check if the sender has enough\r\n        require (balances[_to].add(_value) \u003E balances[_to]); // Check for overflow\r\n        balances[_from] = balances[_from].sub(_value);                         // Subtract from the sender\r\n        balances[_to] = balances[_to].add(_value);                           // Add the same to the recipient\r\n        emit Transfer(_from, _to, _value); \r\n        \r\n        return true;\r\n    }\r\n\r\n    /// @notice Create \u0060mintedAmount\u0060 tokens and send it to \u0060target\u0060\r\n    /// @param target Address to receive the tokens\r\n    /// @param mintedAmount the amount of tokens it will receive\r\n    function mintToken(address target, uint256 mintedAmount) onlyOwner public {\r\n        balances[target] = balances[target].add(mintedAmount);\r\n        totalSupply = totalSupply.add(mintedAmount);\r\n        emit Transfer(0, this, mintedAmount);\r\n        emit Transfer(this, target, mintedAmount);\r\n    }\r\n\r\n    /// @notice \u0060freeze? Prevent | Allow\u0060 \u0060target\u0060 from sending \u0026 receiving tokens\r\n    /// @param target Address to be frozen\r\n    /// @param freeze either to freeze it or not\r\n    function freezeAccount(address target, bool freeze) onlyOwner public {\r\n        frozenAccount[target] = freeze;\r\n        emit FrozenFunds(target, freeze);\r\n    }\r\n\r\n\r\n    function purchaseToken(address _receiver, uint _tokens, uint _userInitialLockinPeriod, uint _userFinalalLockinPeriod) onlyAuthCaller public {\r\n        require(_tokens \u003E 0);\r\n        require(initialSupply \u003E _tokens);\r\n        \r\n        // lockingEnabled[_receiver] = true;\r\n        // emit LockFunds(_receiver, true);\r\n        \r\n        initialSupply = initialSupply.sub(_tokens);\r\n        _transfer(owner, _receiver, _tokens);              // makes the transfers\r\n        externalAuthorizePurchase = externalAuthorizePurchase.add(_tokens);\r\n        \r\n         /*  Check if lockin period and lockin period type is to be set  */\r\n        if(_userInitialLockinPeriod != 0 \u0026\u0026 _userFinalalLockinPeriod != 0)\r\n        {\r\n            userInitialLockinPeriod[_receiver] = _userInitialLockinPeriod; //v:add initial lockin period.\r\n            userFinalLockinPeriod[_receiver] = _userFinalalLockinPeriod;  //v:add final lockin period.\r\n\r\n            emit LockinPeriodUpdated(_receiver,_userInitialLockinPeriod,_userFinalalLockinPeriod);\r\n        }\r\n    }\r\n\r\n    /**\r\n      * @dev transfer token for a specified address\r\n      * @param _to The address to transfer to.\r\n      * @param _value The amount to be transferred.\r\n    */\r\n    function transfer(address _to, uint256 _value) public kycVerified(msg.sender) frozenVerified(msg.sender)  returns (bool) {\r\n        _transfer(msg.sender,_to,_value);\r\n        return true;\r\n    }\r\n    \r\n    /*\r\n        Please make sure before calling this function from UI, Sender has sufficient balance for \r\n        All transfers \r\n    */\r\n    function multiTransfer(address[] _to,uint[] _value) public kycVerified(msg.sender) frozenVerified(msg.sender) returns (bool) {\r\n        require(_to.length == _value.length, \u0022Length of Destination should be equal to value\u0022);\r\n        for(uint _interator = 0;_interator \u003C _to.length; _interator\u002B\u002B )\r\n        {\r\n            _transfer(msg.sender,_to[_interator],_value[_interator]);\r\n        }\r\n        return true;    \r\n    }\r\n    \r\n    \r\n     /**\r\n      * @dev enables to change Lockin withdraw Percent\r\n      * @param _percent Percent to be updated .\r\n      *  Can only be called by authorized caller   \r\n      */\r\n    function updateLockinCapPercent(uint _percent) onlyAuthCaller public returns(bool)\r\n    {\r\n        capWithdrawPercent = _percent;\r\n\r\n        emit LockinCapWithdrawPercentUpdated(msg.sender,_percent);\r\n\r\n        return true;\r\n    }  \r\n    \r\n    \r\n    /**\r\n    * @dev Transfer tokens from one address to another\r\n    * @param _from address The address which you want to send tokens from\r\n    * @param _to address The address which you want to transfer to\r\n    * @param _value uint256 the amount of tokens to be transferred\r\n    */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_value \u003C= balances[_from]);\r\n        require(_value \u003C= allowed[_from][msg.sender]);\r\n    \r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n    \r\n}","ABI":"[{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022userInitialLockinPeriod\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022name\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_spender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022approve\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022totalSupply\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_caller\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022deAuthorizeCaller\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_to\u0022,\u0022type\u0022:\u0022address[]\u0022},{\u0022name\u0022:\u0022_value\u0022,\u0022type\u0022:\u0022uint256[]\u0022}],\u0022name\u0022:\u0022multiTransfer\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_from\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022transferFrom\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_caller\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022authorizeCaller\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022decimals\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint8\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022initialSupply\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022burn\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_spender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_subtractedValue\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022decreaseApproval\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022kycVerification\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_owner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022balanceOf\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022balance\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022target\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022mintedAmount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022mintToken\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_kycAddress\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022updateKycContractAddress\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022owner\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022externalAuthorizePurchase\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_receiver\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_tokens\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_userInitialLockinPeriod\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_userFinalalLockinPeriod\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022purchaseToken\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022symbol\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022capWithdrawPercent\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022kycEnabled\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022transfer\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022userFinalLockinPeriod\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022frozenAccount\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_kycEnabled\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022name\u0022:\u0022updateKycMandate\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_percent\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022updateLockinCapPercent\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_spender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_addedValue\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022increaseApproval\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_owner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_spender\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022allowance\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022target\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022freeze\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022name\u0022:\u0022freezeAccount\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022finalYearDebitAmount\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022transferOwnership\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022constructor\u0022},{\u0022payable\u0022:true,\u0022stateMutability\u0022:\u0022payable\u0022,\u0022type\u0022:\u0022fallback\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022_kycEnabled\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022name\u0022:\u0022KYCMandateUpdate\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022_kycAddress\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022KYCContractAddressUpdate\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022_guy\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022_userInitialLockinPeriod\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022_userFinalalLockinPeriod\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022LockinPeriodUpdated\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022_guy\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022_percent\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022LockinCapWithdrawPercentUpdated\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022_guy\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022CapWithdrawDebitAmount\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022target\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022frozen\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022name\u0022:\u0022FrozenFunds\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022caller\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022AuthorizedCaller\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022caller\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022DeAuthorizedCaller\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022burner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022Burn\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022owner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022spender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022Approval\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022from\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022Transfer\u0022,\u0022type\u0022:\u0022event\u0022}]","ContractName":"STRIVEToken","CompilerVersion":"v0.4.25\u002Bcommit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://b741277ac392452f2e2d558a1d5544783c437c5a8764331ec3cb0abcb6e0a92d"}]