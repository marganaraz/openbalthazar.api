[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2019-12-02\r\n*/\r\n\r\npragma solidity ^0.5.4;\r\n\r\n/**\r\n * ERC20 contract interface.\r\n */\r\ncontract ERC20 {\r\n    function totalSupply() public view returns (uint);\r\n    function decimals() public view returns (uint);\r\n    function balanceOf(address tokenOwner) public view returns (uint balance);\r\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining);\r\n    function transfer(address to, uint tokens) public returns (bool success);\r\n    function approve(address spender, uint tokens) public returns (bool success);\r\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\r\n}\r\n\r\n/**\r\n * @title Module\r\n * @dev Interface for a module. \r\n * A module MUST implement the addModule() method to ensure that a wallet with at least one module\r\n * can never end up in a \u0022frozen\u0022 state.\r\n * @author Julien Niset - \u003Cjulien@argent.xyz\u003E\r\n */\r\ninterface Module {\r\n    function init(BaseWallet _wallet) external;\r\n    function addModule(BaseWallet _wallet, Module _module) external;\r\n    function recoverToken(address _token) external;\r\n}\r\n\r\n/**\r\n * @title BaseWallet\r\n * @dev Simple modular wallet that authorises modules to call its invoke() method.\r\n * Based on https://gist.github.com/Arachnid/a619d31f6d32757a4328a428286da186 by \r\n * @author Julien Niset - \u003Cjulien@argent.xyz\u003E\r\n */\r\ncontract BaseWallet {\r\n    address public implementation;\r\n    address public owner;\r\n    mapping (address =\u003E bool) public authorised;\r\n    mapping (bytes4 =\u003E address) public enabled;\r\n    uint public modules;\r\n    function init(address _owner, address[] calldata _modules) external;\r\n    function authoriseModule(address _module, bool _value) external;\r\n    function enableStaticCall(address _module, bytes4 _method) external;\r\n    function setOwner(address _newOwner) external;\r\n    function invoke(address _target, uint _value, bytes calldata _data) external;\r\n    function() external payable;\r\n}\r\n\r\n/**\r\n * @title ModuleRegistry\r\n * @dev Registry of authorised modules. \r\n * Modules must be registered before they can be authorised on a wallet.\r\n * @author Julien Niset - \u003Cjulien@argent.xyz\u003E\r\n */\r\ncontract ModuleRegistry {\r\n    function registerModule(address _module, bytes32 _name) external;\r\n    function deregisterModule(address _module) external;\r\n    function registerUpgrader(address _upgrader, bytes32 _name) external;\r\n    function deregisterUpgrader(address _upgrader) external;\r\n    function recoverToken(address _token) external;\r\n    function moduleInfo(address _module) external view returns (bytes32);\r\n    function upgraderInfo(address _upgrader) external view returns (bytes32);\r\n    function isRegisteredModule(address _module) external view returns (bool);\r\n    function isRegisteredModule(address[] calldata _modules) external view returns (bool);\r\n    function isRegisteredUpgrader(address _upgrader) external view returns (bool);\r\n}\r\n\r\n/**\r\n * @title GuardianStorage\r\n * @dev Contract storing the state of wallets related to guardians and lock.\r\n * The contract only defines basic setters and getters with no logic. Only modules authorised\r\n * for a wallet can modify its state.\r\n * @author Julien Niset - \u003Cjulien@argent.xyz\u003E\r\n * @author Olivier Van Den Biggelaar - \u003Colivier@argent.xyz\u003E\r\n */\r\ncontract GuardianStorage {\r\n    function addGuardian(BaseWallet _wallet, address _guardian) external;\r\n    function revokeGuardian(BaseWallet _wallet, address _guardian) external;\r\n    function guardianCount(BaseWallet _wallet) external view returns (uint256);\r\n    function getGuardians(BaseWallet _wallet) external view returns (address[] memory);\r\n    function isGuardian(BaseWallet _wallet, address _guardian) external view returns (bool);\r\n    function setLock(BaseWallet _wallet, uint256 _releaseAfter) external;\r\n    function isLocked(BaseWallet _wallet) external view returns (bool);\r\n    function getLock(BaseWallet _wallet) external view returns (uint256);\r\n    function getLocker(BaseWallet _wallet) external view returns (address);\r\n}\r\n\r\ninterface Comptroller {\r\n    function enterMarkets(address[] calldata _cTokens) external returns (uint[] memory);\r\n    function exitMarket(address _cToken) external returns (uint);\r\n    function getAssetsIn(address _account) external view returns (address[] memory);\r\n    function getAccountLiquidity(address _account) external view returns (uint, uint, uint);\r\n    function checkMembership(address account, CToken cToken) external view returns (bool);\r\n}\r\n\r\ninterface CToken {\r\n    function comptroller() external view returns (address);\r\n    function underlying() external view returns (address);\r\n    function symbol() external view returns (string memory);\r\n    function exchangeRateCurrent() external returns (uint256);\r\n    function exchangeRateStored() external view returns (uint256);\r\n    function balanceOf(address _account) external view returns (uint256);\r\n    function borrowBalanceCurrent(address _account) external returns (uint256);\r\n    function borrowBalanceStored(address _account) external view returns (uint256);\r\n}\r\n\r\n/**\r\n * @title CompoundRegistry\r\n * @dev Simple registry containing a mapping between underlying assets and their corresponding cToken.\r\n * @author Julien Niset - \u003Cjulien@argent.xyz\u003E\r\n */\r\ncontract CompoundRegistry {\r\n    function addCToken(address _underlying, address _cToken) external;\r\n    function removeCToken(address _underlying) external;\r\n    function getCToken(address _underlying) external view returns (address);\r\n    function listUnderlyings() external view returns (address[] memory);\r\n}\r\n\r\n/**\r\n * @title Interface for a contract that can invest tokens in order to earn an interest.\r\n * @author Julien Niset - \u003Cjulien@argent.xyz\u003E\r\n */\r\ninterface Invest {\r\n\r\n    event InvestmentAdded(address indexed _wallet, address _token, uint256 _invested, uint256 _period);\r\n    event InvestmentRemoved(address indexed _wallet, address _token, uint256 _fraction);\r\n\r\n    /**\r\n     * @dev Invest tokens for a given period.\r\n     * @param _wallet The target wallet.\r\n     * @param _token The token address.\r\n     * @param _amount The amount of tokens to invest.\r\n     * @param _period The period over which the tokens may be locked in the investment (optional).\r\n     * @return The exact amount of tokens that have been invested. \r\n     */\r\n    function addInvestment(\r\n        BaseWallet _wallet, \r\n        address _token, \r\n        uint256 _amount, \r\n        uint256 _period\r\n    ) \r\n        external\r\n        returns (uint256 _invested);\r\n\r\n    /**\r\n     * @dev Exit invested postions.\r\n     * @param _wallet The target wallet.\r\n     * @param _token The token address.\r\n     * @param _fraction The fraction of invested tokens to exit in per 10000. \r\n     */\r\n    function removeInvestment(\r\n        BaseWallet _wallet, \r\n        address _token, \r\n        uint256 _fraction\r\n    ) \r\n        external;\r\n\r\n    /**\r\n     * @dev Get the amount of investment in a given token.\r\n     * @param _wallet The target wallet.\r\n     * @param _token The token address.\r\n     * @return The value in tokens of the investment (including interests) and the time at which the investment can be removed.\r\n     */\r\n    function getInvestment(\r\n        BaseWallet _wallet,\r\n        address _token\r\n    )\r\n        external\r\n        view\r\n        returns (uint256 _tokenValue, uint256 _periodEnd);\r\n}\r\n\r\n/**\r\n * @title Interface for a contract that can loan tokens to a wallet.\r\n * @author Julien Niset - \u003Cjulien@argent.xyz\u003E\r\n */\r\ninterface Loan {\r\n\r\n    event LoanOpened(address indexed _wallet, bytes32 indexed _loanId, address _collateral, uint256 _collateralAmount, address _debtToken, uint256 _debtAmount);\r\n    event LoanClosed(address indexed _wallet, bytes32 indexed _loanId);\r\n    event CollateralAdded(address indexed _wallet, bytes32 indexed _loanId, address _collateral, uint256 _collateralAmount);\r\n    event CollateralRemoved(address indexed _wallet, bytes32 indexed _loanId, address _collateral, uint256 _collateralAmount);\r\n    event DebtAdded(address indexed _wallet, bytes32 indexed _loanId, address _debtToken, uint256 _debtAmount);\r\n    event DebtRemoved(address indexed _wallet, bytes32 indexed _loanId, address _debtToken, uint256 _debtAmount);\r\n\r\n    /**\r\n     * @dev Opens a collateralized loan.\r\n     * @param _wallet The target wallet.\r\n     * @param _collateral The token used as a collateral.\r\n     * @param _collateralAmount The amount of collateral token provided.\r\n     * @param _debtToken The token borrowed.\r\n     * @param _debtAmount The amount of tokens borrowed.\r\n     * @return (optional) An ID for the loan when the provider enables users to create multiple distinct loans.\r\n     */\r\n    function openLoan(\r\n        BaseWallet _wallet, \r\n        address _collateral, \r\n        uint256 _collateralAmount, \r\n        address _debtToken, \r\n        uint256 _debtAmount\r\n    ) \r\n        external \r\n        returns (bytes32 _loanId);\r\n\r\n    /**\r\n     * @dev Closes a collateralized loan by repaying all debts (plus interest) and redeeming all collateral (plus interest).\r\n     * @param _wallet The target wallet.\r\n     * @param _loanId The ID of the loan if any, 0 otherwise.\r\n     */\r\n    function closeLoan(\r\n        BaseWallet _wallet, \r\n        bytes32 _loanId\r\n    ) \r\n        external;\r\n\r\n    /**\r\n     * @dev Adds collateral to a loan identified by its ID.\r\n     * @param _wallet The target wallet.\r\n     * @param _loanId The ID of the loan if any, 0 otherwise.\r\n     * @param _collateral The token used as a collateral.\r\n     * @param _collateralAmount The amount of collateral to add.\r\n     */\r\n    function addCollateral(\r\n        BaseWallet _wallet, \r\n        bytes32 _loanId, \r\n        address _collateral, \r\n        uint256 _collateralAmount\r\n    ) \r\n        external;\r\n\r\n    /**\r\n     * @dev Removes collateral from a loan identified by its ID.\r\n     * @param _wallet The target wallet.\r\n     * @param _loanId The ID of the loan if any, 0 otherwise.\r\n     * @param _collateral The token used as a collateral.\r\n     * @param _collateralAmount The amount of collateral to remove.\r\n     */\r\n    function removeCollateral(\r\n        BaseWallet _wallet, \r\n        bytes32 _loanId, \r\n        address _collateral, \r\n        uint256 _collateralAmount\r\n    ) \r\n        external;\r\n\r\n    /**\r\n     * @dev Increases the debt by borrowing more token from a loan identified by its ID.\r\n     * @param _wallet The target wallet.\r\n     * @param _loanId The ID of the loan if any, 0 otherwise.\r\n     * @param _debtToken The token borrowed.\r\n     * @param _debtAmount The amount of token to borrow.\r\n     */\r\n    function addDebt(\r\n        BaseWallet _wallet, \r\n        bytes32 _loanId, \r\n        address _debtToken, \r\n        uint256 _debtAmount\r\n    ) \r\n        external;\r\n\r\n    /**\r\n     * @dev Decreases the debt by repaying some token from a loan identified by its ID.\r\n     * @param _wallet The target wallet.\r\n     * @param _loanId The ID of the loan if any, 0 otherwise.\r\n     * @param _debtToken The token to repay.\r\n     * @param _debtAmount The amount of token to repay.\r\n     */\r\n    function removeDebt(\r\n        BaseWallet _wallet, \r\n        bytes32 _loanId, \r\n        address _debtToken, \r\n        uint256 _debtAmount\r\n    ) \r\n        external;\r\n\r\n    /**\r\n     * @dev Gets information about a loan identified by its ID.\r\n     * @param _wallet The target wallet.\r\n     * @param _loanId The ID of the loan if any, 0 otherwise.\r\n     * @return a status [0: no loan, 1: loan is safe, 2: loan is unsafe and can be liquidated, 3: unable to provide info]\r\n     * and a value (in ETH) representing the value that could still be borrowed when status = 1; or the value of the collateral \r\n     * that should be added to avoid liquidation when status = 2.     \r\n     */\r\n    function getLoan(\r\n        BaseWallet _wallet, \r\n        bytes32 _loanId\r\n    ) \r\n        external \r\n        view \r\n        returns (uint8 _status, uint256 _ethValue);\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\r\n        // benefit is lost if \u0027b\u0027 is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b \u003E 0); // Solidity only automatically asserts when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c \u002B a % b); // There is no case in which this doesn\u0027t hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b \u003C= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a \u002B b;\r\n        require(c \u003E= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n    * @dev Returns ceil(a / b).\r\n    */\r\n    function ceil(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a / b;\r\n        if(a % b == 0) {\r\n            return c;\r\n        }\r\n        else {\r\n            return c \u002B 1;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @title BaseModule\r\n * @dev Basic module that contains some methods common to all modules.\r\n * @author Julien Niset - \u003Cjulien@argent.im\u003E\r\n */\r\ncontract BaseModule is Module {\r\n\r\n    // The adddress of the module registry.\r\n    ModuleRegistry internal registry;\r\n\r\n    event ModuleCreated(bytes32 name);\r\n    event ModuleInitialised(address wallet);\r\n\r\n    constructor(ModuleRegistry _registry, bytes32 _name) public {\r\n        registry = _registry;\r\n        emit ModuleCreated(_name);\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the target wallet of the call.\r\n     */\r\n    modifier onlyWallet(BaseWallet _wallet) {\r\n        require(msg.sender == address(_wallet), \u0022BM: caller must be wallet\u0022);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner of the target wallet or the module itself.\r\n     */\r\n    modifier onlyWalletOwner(BaseWallet _wallet) {\r\n        require(msg.sender == address(this) || isOwner(_wallet, msg.sender), \u0022BM: must be an owner for the wallet\u0022);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner of the target wallet.\r\n     */\r\n    modifier strictOnlyWalletOwner(BaseWallet _wallet) {\r\n        require(isOwner(_wallet, msg.sender), \u0022BM: msg.sender must be an owner for the wallet\u0022);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Inits the module for a wallet by logging an event.\r\n     * The method can only be called by the wallet itself.\r\n     * @param _wallet The wallet.\r\n     */\r\n    function init(BaseWallet _wallet) external onlyWallet(_wallet) {\r\n        emit ModuleInitialised(address(_wallet));\r\n    }\r\n\r\n    /**\r\n     * @dev Adds a module to a wallet. First checks that the module is registered.\r\n     * @param _wallet The target wallet.\r\n     * @param _module The modules to authorise.\r\n     */\r\n    function addModule(BaseWallet _wallet, Module _module) external strictOnlyWalletOwner(_wallet) {\r\n        require(registry.isRegisteredModule(address(_module)), \u0022BM: module is not registered\u0022);\r\n        _wallet.authoriseModule(address(_module), true);\r\n    }\r\n\r\n    /**\r\n    * @dev Utility method enbaling anyone to recover ERC20 token sent to the\r\n    * module by mistake and transfer them to the Module Registry. \r\n    * @param _token The token to recover.\r\n    */\r\n    function recoverToken(address _token) external {\r\n        uint total = ERC20(_token).balanceOf(address(this));\r\n        ERC20(_token).transfer(address(registry), total);\r\n    }\r\n\r\n    /**\r\n     * @dev Helper method to check if an address is the owner of a target wallet.\r\n     * @param _wallet The target wallet.\r\n     * @param _addr The address.\r\n     */\r\n    function isOwner(BaseWallet _wallet, address _addr) internal view returns (bool) {\r\n        return _wallet.owner() == _addr;\r\n    }\r\n}\r\n\r\n/**\r\n * @title RelayerModule\r\n * @dev Base module containing logic to execute transactions signed by eth-less accounts and sent by a relayer. \r\n * @author Julien Niset - \u003Cjulien@argent.im\u003E\r\n */\r\ncontract RelayerModule is Module {\r\n\r\n    uint256 constant internal BLOCKBOUND = 10000;\r\n\r\n    mapping (address =\u003E RelayerConfig) public relayer; \r\n\r\n    struct RelayerConfig {\r\n        uint256 nonce;\r\n        mapping (bytes32 =\u003E bool) executedTx;\r\n    }\r\n\r\n    event TransactionExecuted(address indexed wallet, bool indexed success, bytes32 signedHash);\r\n\r\n    /**\r\n     * @dev Throws if the call did not go through the execute() method.\r\n     */\r\n    modifier onlyExecute {\r\n        require(msg.sender == address(this), \u0022RM: must be called via execute()\u0022);\r\n        _;\r\n    }\r\n\r\n    /* ***************** Abstract method ************************* */\r\n\r\n    /**\r\n    * @dev Gets the number of valid signatures that must be provided to execute a\r\n    * specific relayed transaction.\r\n    * @param _wallet The target wallet.\r\n    * @param _data The data of the relayed transaction.\r\n    * @return The number of required signatures.\r\n    */\r\n    function getRequiredSignatures(BaseWallet _wallet, bytes memory _data) internal view returns (uint256);\r\n\r\n    /**\r\n    * @dev Validates the signatures provided with a relayed transaction.\r\n    * The method MUST throw if one or more signatures are not valid.\r\n    * @param _wallet The target wallet.\r\n    * @param _data The data of the relayed transaction.\r\n    * @param _signHash The signed hash representing the relayed transaction.\r\n    * @param _signatures The signatures as a concatenated byte array.\r\n    */\r\n    function validateSignatures(BaseWallet _wallet, bytes memory _data, bytes32 _signHash, bytes memory _signatures) internal view returns (bool);\r\n\r\n    /* ************************************************************ */\r\n\r\n    /**\r\n    * @dev Executes a relayed transaction.\r\n    * @param _wallet The target wallet.\r\n    * @param _data The data for the relayed transaction\r\n    * @param _nonce The nonce used to prevent replay attacks.\r\n    * @param _signatures The signatures as a concatenated byte array.\r\n    * @param _gasPrice The gas price to use for the gas refund.\r\n    * @param _gasLimit The gas limit to use for the gas refund.\r\n    */\r\n    function execute(\r\n        BaseWallet _wallet,\r\n        bytes calldata _data, \r\n        uint256 _nonce, \r\n        bytes calldata _signatures, \r\n        uint256 _gasPrice,\r\n        uint256 _gasLimit\r\n    )\r\n        external\r\n        returns (bool success)\r\n    {\r\n        uint startGas = gasleft();\r\n        bytes32 signHash = getSignHash(address(this), address(_wallet), 0, _data, _nonce, _gasPrice, _gasLimit);\r\n        require(checkAndUpdateUniqueness(_wallet, _nonce, signHash), \u0022RM: Duplicate request\u0022);\r\n        require(verifyData(address(_wallet), _data), \u0022RM: the wallet authorized is different then the target of the relayed data\u0022);\r\n        uint256 requiredSignatures = getRequiredSignatures(_wallet, _data);\r\n        if((requiredSignatures * 65) == _signatures.length) {\r\n            if(verifyRefund(_wallet, _gasLimit, _gasPrice, requiredSignatures)) {\r\n                if(requiredSignatures == 0 || validateSignatures(_wallet, _data, signHash, _signatures)) {\r\n                    // solium-disable-next-line security/no-call-value\r\n                    (success,) = address(this).call(_data);\r\n                    refund(_wallet, startGas - gasleft(), _gasPrice, _gasLimit, requiredSignatures, msg.sender);\r\n                }\r\n            }\r\n        }\r\n        emit TransactionExecuted(address(_wallet), success, signHash); \r\n    }\r\n\r\n    /**\r\n    * @dev Gets the current nonce for a wallet.\r\n    * @param _wallet The target wallet.\r\n    */\r\n    function getNonce(BaseWallet _wallet) external view returns (uint256 nonce) {\r\n        return relayer[address(_wallet)].nonce;\r\n    }\r\n\r\n    /**\r\n    * @dev Generates the signed hash of a relayed transaction according to ERC 1077.\r\n    * @param _from The starting address for the relayed transaction (should be the module)\r\n    * @param _to The destination address for the relayed transaction (should be the wallet)\r\n    * @param _value The value for the relayed transaction\r\n    * @param _data The data for the relayed transaction\r\n    * @param _nonce The nonce used to prevent replay attacks.\r\n    * @param _gasPrice The gas price to use for the gas refund.\r\n    * @param _gasLimit The gas limit to use for the gas refund.\r\n    */\r\n    function getSignHash(\r\n        address _from,\r\n        address _to, \r\n        uint256 _value, \r\n        bytes memory _data, \r\n        uint256 _nonce,\r\n        uint256 _gasPrice,\r\n        uint256 _gasLimit\r\n    ) \r\n        internal \r\n        pure\r\n        returns (bytes32) \r\n    {\r\n        return keccak256(\r\n            abi.encodePacked(\r\n                \u0022\\x19Ethereum Signed Message:\\n32\u0022,\r\n                keccak256(abi.encodePacked(byte(0x19), byte(0), _from, _to, _value, _data, _nonce, _gasPrice, _gasLimit))\r\n        ));\r\n    }\r\n\r\n    /**\r\n    * @dev Checks if the relayed transaction is unique.\r\n    * @param _wallet The target wallet.\r\n    * @param _nonce The nonce\r\n    * @param _signHash The signed hash of the transaction\r\n    */\r\n    function checkAndUpdateUniqueness(BaseWallet _wallet, uint256 _nonce, bytes32 _signHash) internal returns (bool) {\r\n        if(relayer[address(_wallet)].executedTx[_signHash] == true) {\r\n            return false;\r\n        }\r\n        relayer[address(_wallet)].executedTx[_signHash] = true;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Checks that a nonce has the correct format and is valid. \r\n    * It must be constructed as nonce = {block number}{timestamp} where each component is 16 bytes.\r\n    * @param _wallet The target wallet.\r\n    * @param _nonce The nonce\r\n    */\r\n    function checkAndUpdateNonce(BaseWallet _wallet, uint256 _nonce) internal returns (bool) {\r\n        if(_nonce \u003C= relayer[address(_wallet)].nonce) {\r\n            return false;\r\n        }   \r\n        uint256 nonceBlock = (_nonce \u0026 0xffffffffffffffffffffffffffffffff00000000000000000000000000000000) \u003E\u003E 128;\r\n        if(nonceBlock \u003E block.number \u002B BLOCKBOUND) {\r\n            return false;\r\n        }\r\n        relayer[address(_wallet)].nonce = _nonce;\r\n        return true;    \r\n    }\r\n\r\n    /**\r\n    * @dev Recovers the signer at a given position from a list of concatenated signatures.\r\n    * @param _signedHash The signed hash\r\n    * @param _signatures The concatenated signatures.\r\n    * @param _index The index of the signature to recover.\r\n    */\r\n    function recoverSigner(bytes32 _signedHash, bytes memory _signatures, uint _index) internal pure returns (address) {\r\n        uint8 v;\r\n        bytes32 r;\r\n        bytes32 s;\r\n        // we jump 32 (0x20) as the first slot of bytes contains the length\r\n        // we jump 65 (0x41) per signature\r\n        // for v we load 32 bytes ending with v (the first 31 come from s) then apply a mask\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            r := mload(add(_signatures, add(0x20,mul(0x41,_index))))\r\n            s := mload(add(_signatures, add(0x40,mul(0x41,_index))))\r\n            v := and(mload(add(_signatures, add(0x41,mul(0x41,_index)))), 0xff)\r\n        }\r\n        require(v == 27 || v == 28); \r\n        return ecrecover(_signedHash, v, r, s);\r\n    }\r\n\r\n    /**\r\n    * @dev Refunds the gas used to the Relayer. \r\n    * For security reasons the default behavior is to not refund calls with 0 or 1 signatures. \r\n    * @param _wallet The target wallet.\r\n    * @param _gasUsed The gas used.\r\n    * @param _gasPrice The gas price for the refund.\r\n    * @param _gasLimit The gas limit for the refund.\r\n    * @param _signatures The number of signatures used in the call.\r\n    * @param _relayer The address of the Relayer.\r\n    */\r\n    function refund(BaseWallet _wallet, uint _gasUsed, uint _gasPrice, uint _gasLimit, uint _signatures, address _relayer) internal {\r\n        uint256 amount = 29292 \u002B _gasUsed; // 21000 (transaction) \u002B 7620 (execution of refund) \u002B 672 to log the event \u002B _gasUsed\r\n        // only refund if gas price not null, more than 1 signatures, gas less than gasLimit\r\n        if(_gasPrice \u003E 0 \u0026\u0026 _signatures \u003E 1 \u0026\u0026 amount \u003C= _gasLimit) {\r\n            if(_gasPrice \u003E tx.gasprice) {\r\n                amount = amount * tx.gasprice;\r\n            }\r\n            else {\r\n                amount = amount * _gasPrice;\r\n            }\r\n            _wallet.invoke(_relayer, amount, \u0022\u0022);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Returns false if the refund is expected to fail.\r\n    * @param _wallet The target wallet.\r\n    * @param _gasUsed The expected gas used.\r\n    * @param _gasPrice The expected gas price for the refund.\r\n    */\r\n    function verifyRefund(BaseWallet _wallet, uint _gasUsed, uint _gasPrice, uint _signatures) internal view returns (bool) {\r\n        if(_gasPrice \u003E 0 \r\n            \u0026\u0026 _signatures \u003E 1 \r\n            \u0026\u0026 (address(_wallet).balance \u003C _gasUsed * _gasPrice || _wallet.authorised(address(this)) == false)) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Checks that the wallet address provided as the first parameter of the relayed data is the same\r\n    * as the wallet passed as the input of the execute() method. \r\n    @return false if the addresses are different.\r\n    */\r\n    function verifyData(address _wallet, bytes memory _data) private pure returns (bool) {\r\n        require(_data.length \u003E= 36, \u0022RM: Invalid dataWallet\u0022);\r\n        address dataWallet;\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            //_data = {length:32}{sig:4}{_wallet:32}{...}\r\n            dataWallet := mload(add(_data, 0x24))\r\n        }\r\n        return dataWallet == _wallet;\r\n    }\r\n\r\n    /**\r\n    * @dev Parses the data to extract the method signature. \r\n    */\r\n    function functionPrefix(bytes memory _data) internal pure returns (bytes4 prefix) {\r\n        require(_data.length \u003E= 4, \u0022RM: Invalid functionPrefix\u0022);\r\n        // solium-disable-next-line security/no-inline-assembly\r\n        assembly {\r\n            prefix := mload(add(_data, 0x20))\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @title OnlyOwnerModule\r\n * @dev Module that extends BaseModule and RelayerModule for modules where the execute() method\r\n * must be called with one signature frm the owner.\r\n * @author Julien Niset - \u003Cjulien@argent.im\u003E\r\n */\r\ncontract OnlyOwnerModule is BaseModule, RelayerModule {\r\n\r\n    // *************** Implementation of RelayerModule methods ********************* //\r\n\r\n    // Overrides to use the incremental nonce and save some gas\r\n    function checkAndUpdateUniqueness(BaseWallet _wallet, uint256 _nonce, bytes32 _signHash) internal returns (bool) {\r\n        return checkAndUpdateNonce(_wallet, _nonce);\r\n    }\r\n\r\n    function validateSignatures(BaseWallet _wallet, bytes memory _data, bytes32 _signHash, bytes memory _signatures) internal view returns (bool) {\r\n        address signer = recoverSigner(_signHash, _signatures, 0);\r\n        return isOwner(_wallet, signer); // \u0022OOM: signer must be owner\u0022\r\n    }\r\n\r\n    function getRequiredSignatures(BaseWallet _wallet, bytes memory _data) internal view returns (uint256) {\r\n        return 1;\r\n    }\r\n}\r\n\r\n/**\r\n * @title CompoundManager\r\n * @dev Module to invest and borrow tokens with CompoundV2\r\n * @author Julien Niset - \u003Cjulien@argent.xyz\u003E\r\n */\r\ncontract CompoundManager is Loan, Invest, BaseModule, RelayerModule, OnlyOwnerModule {\r\n\r\n    bytes32 constant NAME = \u0022CompoundManager\u0022;\r\n\r\n    // The Guardian storage contract\r\n    GuardianStorage public guardianStorage;\r\n    // The Compound Comptroller contract\r\n    Comptroller public comptroller;\r\n    // The registry mapping underlying with cTokens\r\n    CompoundRegistry public compoundRegistry;\r\n\r\n    // Mock token address for ETH\r\n    address constant internal ETH_TOKEN_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n\r\n    using SafeMath for uint256;\r\n\r\n    /**\r\n     * @dev Throws if the wallet is locked.\r\n     */\r\n    modifier onlyWhenUnlocked(BaseWallet _wallet) {\r\n        // solium-disable-next-line security/no-block-members\r\n        require(!guardianStorage.isLocked(_wallet), \u0022CompoundManager: wallet must be unlocked\u0022);\r\n        _;\r\n    }\r\n\r\n    constructor(\r\n        ModuleRegistry _registry,\r\n        GuardianStorage _guardianStorage,\r\n        Comptroller _comptroller,\r\n        CompoundRegistry _compoundRegistry\r\n    )\r\n        BaseModule(_registry, NAME)\r\n        public\r\n    {\r\n        guardianStorage = _guardianStorage;\r\n        comptroller = _comptroller;\r\n        compoundRegistry = _compoundRegistry;\r\n    }\r\n\r\n    /* ********************************** Implementation of Loan ************************************* */\r\n\r\n    /**\r\n     * @dev Opens a collateralized loan.\r\n     * @param _wallet The target wallet.\r\n     * @param _collateral The token used as a collateral.\r\n     * @param _collateralAmount The amount of collateral token provided.\r\n     * @param _debtToken The token borrowed.\r\n     * @param _debtAmount The amount of tokens borrowed.\r\n     * @return bytes32(0) as Compound does not allow the creation of multiple loans.\r\n     */\r\n    function openLoan(\r\n        BaseWallet _wallet,\r\n        address _collateral,\r\n        uint256 _collateralAmount,\r\n        address _debtToken,\r\n        uint256 _debtAmount\r\n    ) \r\n        external \r\n        onlyWalletOwner(_wallet)\r\n        onlyWhenUnlocked(_wallet)\r\n        returns (bytes32 _loanId) \r\n    {\r\n        address[] memory markets = new address[](2);\r\n        markets[0] = compoundRegistry.getCToken(_collateral);\r\n        markets[1] = compoundRegistry.getCToken(_debtToken);\r\n        _wallet.invoke(address(comptroller), 0, abi.encodeWithSignature(\u0022enterMarkets(address[])\u0022, markets));\r\n        mint(_wallet, markets[0], _collateral, _collateralAmount);\r\n        borrow(_wallet, markets[1], _debtAmount);\r\n        emit LoanOpened(address(_wallet), _loanId, _collateral, _collateralAmount, _debtToken, _debtAmount);\r\n    }\r\n\r\n    /**\r\n     * @dev Closes the collateralized loan in all markets by repaying all debts (plus interest). Note that it does not redeem the collateral.\r\n     * @param _wallet The target wallet.\r\n     * @param _loanId bytes32(0) as Compound does not allow the creation of multiple loans.\r\n     */\r\n    function closeLoan(\r\n        BaseWallet _wallet,\r\n        bytes32 _loanId\r\n    )\r\n        external\r\n        onlyWalletOwner(_wallet)\r\n        onlyWhenUnlocked(_wallet)\r\n    {\r\n        address[] memory markets = comptroller.getAssetsIn(address(_wallet));\r\n        for(uint i = 0; i \u003C markets.length; i\u002B\u002B) {\r\n            address cToken = markets[i];\r\n            uint debt = CToken(cToken).borrowBalanceCurrent(address(_wallet));\r\n            if(debt \u003E 0) {\r\n                repayBorrow(_wallet, cToken, debt);\r\n                uint collateral = CToken(cToken).balanceOf(address(_wallet));\r\n                if(collateral == 0) {\r\n                    _wallet.invoke(address(comptroller), 0, abi.encodeWithSignature(\u0022exitMarket(address)\u0022, address(cToken)));\r\n                }\r\n            }\r\n        }\r\n        emit LoanClosed(address(_wallet), _loanId);\r\n    }\r\n\r\n    /**\r\n     * @dev Adds collateral to a loan identified by its ID.\r\n     * @param _wallet The target wallet.\r\n     * @param _loanId bytes32(0) as Compound does not allow the creation of multiple loans.\r\n     * @param _collateral The token used as a collateral.\r\n     * @param _collateralAmount The amount of collateral to add.\r\n     */\r\n    function addCollateral(\r\n        BaseWallet _wallet, \r\n        bytes32 _loanId, \r\n        address _collateral, \r\n        uint256 _collateralAmount\r\n    ) \r\n        external \r\n        onlyWalletOwner(_wallet)\r\n        onlyWhenUnlocked(_wallet)\r\n    {\r\n        address cToken = compoundRegistry.getCToken(_collateral);\r\n        enterMarketIfNeeded(_wallet, cToken, address(comptroller));\r\n        mint(_wallet, cToken, _collateral, _collateralAmount);\r\n        emit CollateralAdded(address(_wallet), _loanId, _collateral, _collateralAmount);\r\n    }\r\n\r\n    /**\r\n     * @dev Removes collateral from a loan identified by its ID.\r\n     * @param _wallet The target wallet.\r\n     * @param _loanId bytes32(0) as Compound does not allow the creation of multiple loans.\r\n     * @param _collateral The token used as a collateral.\r\n     * @param _collateralAmount The amount of collateral to remove.\r\n     */\r\n    function removeCollateral(\r\n        BaseWallet _wallet, \r\n        bytes32 _loanId, \r\n        address _collateral, \r\n        uint256 _collateralAmount\r\n    ) \r\n        external \r\n        onlyWalletOwner(_wallet)\r\n        onlyWhenUnlocked(_wallet)\r\n    {\r\n        address cToken = compoundRegistry.getCToken(_collateral);\r\n        redeemUnderlying(_wallet, cToken, _collateralAmount);\r\n        exitMarketIfNeeded(_wallet, cToken, address(comptroller));\r\n        emit CollateralRemoved(address(_wallet), _loanId, _collateral, _collateralAmount);\r\n    }\r\n\r\n    /**\r\n     * @dev Increases the debt by borrowing more token from a loan identified by its ID.\r\n     * @param _wallet The target wallet.\r\n     * @param _loanId bytes32(0) as Compound does not allow the creation of multiple loans.\r\n     * @param _debtToken The token borrowed.\r\n     * @param _debtAmount The amount of token to borrow.\r\n     */\r\n    function addDebt(\r\n        BaseWallet _wallet, \r\n        bytes32 _loanId, \r\n        address _debtToken, \r\n        uint256 _debtAmount\r\n    ) \r\n        external \r\n        onlyWalletOwner(_wallet)\r\n        onlyWhenUnlocked(_wallet)\r\n    {\r\n        address dToken = compoundRegistry.getCToken(_debtToken);\r\n        enterMarketIfNeeded(_wallet, dToken, address(comptroller));\r\n        borrow(_wallet, dToken, _debtAmount);\r\n        emit DebtAdded(address(_wallet), _loanId, _debtToken, _debtAmount);\r\n    }\r\n\r\n    /**\r\n     * @dev Decreases the debt by repaying some token from a loan identified by its ID.\r\n     * @param _wallet The target wallet.\r\n     * @param _loanId bytes32(0) as Compound does not allow the creation of multiple loans.\r\n     * @param _debtToken The token to repay.\r\n     * @param _debtAmount The amount of token to repay.\r\n     */\r\n    function removeDebt(\r\n        BaseWallet _wallet, \r\n        bytes32 _loanId, \r\n        address _debtToken, \r\n        uint256 _debtAmount\r\n    ) \r\n        external\r\n        onlyWalletOwner(_wallet)\r\n        onlyWhenUnlocked(_wallet)\r\n    {\r\n        address dToken = compoundRegistry.getCToken(_debtToken);\r\n        repayBorrow(_wallet, dToken, _debtAmount);\r\n        exitMarketIfNeeded(_wallet, dToken, address(comptroller));\r\n        emit DebtRemoved(address(_wallet), _loanId, _debtToken, _debtAmount);\r\n    }\r\n\r\n    /**\r\n     * @dev Gets information about a loan identified by its ID.\r\n     * @param _wallet The target wallet.\r\n     * @param _loanId bytes32(0) as Compound does not allow the creation of multiple loans\r\n     * @return a status [0: no loan, 1: loan is safe, 2: loan is unsafe and can be liquidated]\r\n     * and a value (in ETH) representing the value that could still be borrowed when status = 1; or the value of the collateral \r\n     * that should be added to avoid liquidation when status = 2.  \r\n     */\r\n    function getLoan(\r\n        BaseWallet _wallet, \r\n        bytes32 _loanId\r\n    ) \r\n        external \r\n        view \r\n        returns (uint8 _status, uint256 _ethValue)\r\n    {\r\n        (uint error, uint liquidity, uint shortfall) = comptroller.getAccountLiquidity(address(_wallet));\r\n        require(error == 0, \u0022Compound: failed to get account liquidity\u0022);\r\n        if(liquidity \u003E 0) {\r\n            return (1, liquidity);\r\n        }\r\n        if(shortfall \u003E 0) {\r\n            return (2, shortfall);\r\n        }\r\n        return (0,0);\r\n    }\r\n\r\n    /* ********************************** Implementation of Invest ************************************* */\r\n\r\n    /**\r\n     * @dev Invest tokens for a given period.\r\n     * @param _wallet The target wallet.\r\n     * @param _token The token address.\r\n     * @param _amount The amount of tokens to invest.\r\n     * @param _period The period over which the tokens may be locked in the investment (optional).\r\n     * @return The exact amount of tokens that have been invested. \r\n     */\r\n    function addInvestment(\r\n        BaseWallet _wallet, \r\n        address _token, \r\n        uint256 _amount, \r\n        uint256 _period\r\n    ) \r\n        external \r\n        onlyWalletOwner(_wallet)\r\n        onlyWhenUnlocked(_wallet)\r\n        returns (uint256 _invested)\r\n    {\r\n        address cToken = compoundRegistry.getCToken(_token);\r\n        mint(_wallet, cToken, _token, _amount);\r\n        _invested = _amount;\r\n        emit InvestmentAdded(address(_wallet), _token, _amount, _period);\r\n    }\r\n\r\n    /**\r\n     * @dev Exit invested postions.\r\n     * @param _wallet The target wallet.\r\n     * @param _token The token address.\r\n     * @param _fraction The fraction of invested tokens to exit in per 10000. \r\n     */\r\n    function removeInvestment(\r\n        BaseWallet _wallet, \r\n        address _token, \r\n        uint256 _fraction\r\n    )\r\n        external\r\n        onlyWalletOwner(_wallet)\r\n        onlyWhenUnlocked(_wallet)\r\n    {\r\n        require(_fraction \u003C= 10000, \u0022CompoundV2: invalid fraction value\u0022);\r\n        address cToken = compoundRegistry.getCToken(_token);\r\n        uint shares = CToken(cToken).balanceOf(address(_wallet));\r\n        redeem(_wallet, cToken, shares.mul(_fraction).div(10000));\r\n        emit InvestmentRemoved(address(_wallet), _token, _fraction);\r\n    }\r\n\r\n    /**\r\n     * @dev Get the amount of investment in a given token.\r\n     * @param _wallet The target wallet.\r\n     * @param _token The token address.\r\n     * @return The value in tokens of the investment (including interests) and the time at which the investment can be removed.\r\n     */\r\n    function getInvestment(\r\n        BaseWallet _wallet, \r\n        address _token\r\n    ) \r\n        external \r\n        view\r\n        returns (uint256 _tokenValue, uint256 _periodEnd) \r\n    {\r\n        address cToken = compoundRegistry.getCToken(_token);\r\n        uint amount = CToken(cToken).balanceOf(address(_wallet));\r\n        uint exchangeRateMantissa = CToken(cToken).exchangeRateStored();\r\n        _tokenValue = amount.mul(exchangeRateMantissa).div(10 ** 18);\r\n        _periodEnd = 0;\r\n    }\r\n\r\n    /* ****************************************** Compound wrappers ******************************************* */\r\n\r\n    /**\r\n     * @dev Adds underlying tokens to a cToken contract.\r\n     * @param _wallet The target wallet.\r\n     * @param _cToken The cToken contract.\r\n     * @param _token The underlying token.\r\n     * @param _amount The amount of underlying token to add.\r\n     */\r\n    function mint(BaseWallet _wallet, address _cToken, address _token, uint256 _amount) internal {\r\n        require(_cToken != address(0), \u0022Compound: No market for target token\u0022);\r\n        require(_amount \u003E 0, \u0022Compound: amount cannot be 0\u0022);\r\n        if(_token == ETH_TOKEN_ADDRESS) {\r\n            _wallet.invoke(_cToken, _amount, abi.encodeWithSignature(\u0022mint()\u0022));\r\n        }\r\n        else {\r\n            _wallet.invoke(_token, 0, abi.encodeWithSignature(\u0022approve(address,uint256)\u0022, _cToken, _amount));\r\n            _wallet.invoke(_cToken, 0, abi.encodeWithSignature(\u0022mint(uint256)\u0022, _amount));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Redeems underlying tokens from a cToken contract.\r\n     * @param _wallet The target wallet.\r\n     * @param _cToken The cToken contract.\r\n     * @param _amount The amount of cToken to redeem.\r\n     */\r\n    function redeem(BaseWallet _wallet, address _cToken, uint256 _amount) internal {     \r\n        require(_cToken != address(0), \u0022Compound: No market for target token\u0022);   \r\n        require(_amount \u003E 0, \u0022Compound: amount cannot be 0\u0022);\r\n        _wallet.invoke(_cToken, 0, abi.encodeWithSignature(\u0022redeem(uint256)\u0022, _amount));\r\n    }\r\n\r\n    /**\r\n     * @dev Redeems underlying tokens from a cToken contract.\r\n     * @param _wallet The target wallet.\r\n     * @param _cToken The cToken contract.\r\n     * @param _amount The amount of underlying token to redeem.\r\n     */\r\n    function redeemUnderlying(BaseWallet _wallet, address _cToken, uint256 _amount) internal {     \r\n        require(_cToken != address(0), \u0022Compound: No market for target token\u0022);   \r\n        require(_amount \u003E 0, \u0022Compound: amount cannot be 0\u0022);\r\n        _wallet.invoke(_cToken, 0, abi.encodeWithSignature(\u0022redeemUnderlying(uint256)\u0022, _amount));\r\n    }\r\n\r\n    /**\r\n     * @dev Borrows underlying tokens from a cToken contract.\r\n     * @param _wallet The target wallet.\r\n     * @param _cToken The cToken contract.\r\n     * @param _amount The amount of underlying tokens to borrow.\r\n     */\r\n    function borrow(BaseWallet _wallet, address _cToken, uint256 _amount) internal {\r\n        require(_cToken != address(0), \u0022Compound: No market for target token\u0022);\r\n        require(_amount \u003E 0, \u0022Compound: amount cannot be 0\u0022);\r\n        _wallet.invoke(_cToken, 0, abi.encodeWithSignature(\u0022borrow(uint256)\u0022, _amount));\r\n    }\r\n\r\n    /**\r\n     * @dev Repays some borrowed underlying tokens to a cToken contract.\r\n     * @param _wallet The target wallet.\r\n     * @param _cToken The cToken contract.\r\n     * @param _amount The amount of underlying to repay.\r\n     */\r\n    function repayBorrow(BaseWallet _wallet, address _cToken, uint256 _amount) internal {\r\n        require(_cToken != address(0), \u0022Compound: No market for target token\u0022);\r\n        require(_amount \u003E 0, \u0022Compound: amount cannot be 0\u0022);\r\n        string memory symbol = CToken(_cToken).symbol();\r\n        if(keccak256(abi.encodePacked(symbol)) == keccak256(abi.encodePacked(\u0022cETH\u0022))) {\r\n            _wallet.invoke(_cToken, _amount, abi.encodeWithSignature(\u0022repayBorrow()\u0022));\r\n        }\r\n        else { \r\n            address token = CToken(_cToken).underlying();\r\n            _wallet.invoke(token, 0, abi.encodeWithSignature(\u0022approve(address,uint256)\u0022, _cToken, _amount));\r\n            _wallet.invoke(_cToken, 0, abi.encodeWithSignature(\u0022repayBorrow(uint256)\u0022, _amount));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Enters a cToken market if it was not entered before.\r\n     * @param _wallet The target wallet.\r\n     * @param _cToken The cToken contract.\r\n     * @param _comptroller The comptroller contract.\r\n     */\r\n    function enterMarketIfNeeded(BaseWallet _wallet, address _cToken, address _comptroller) internal {\r\n        bool isEntered = Comptroller(_comptroller).checkMembership(address(_wallet), CToken(_cToken));\r\n        if(!isEntered) {\r\n            address[] memory market = new address[](1);\r\n            market[0] = _cToken;\r\n            _wallet.invoke(_comptroller, 0, abi.encodeWithSignature(\u0022enterMarkets(address[])\u0022, market));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Exits a cToken market if there is no more collateral and debt.\r\n     * @param _wallet The target wallet.\r\n     * @param _cToken The cToken contract.\r\n     * @param _comptroller The comptroller contract.\r\n     */\r\n    function exitMarketIfNeeded(BaseWallet _wallet, address _cToken, address _comptroller) internal {\r\n        uint collateral = CToken(_cToken).balanceOf(address(_wallet));\r\n        uint debt = CToken(_cToken).borrowBalanceStored(address(_wallet));\r\n        if(collateral == 0 \u0026\u0026 debt == 0) {\r\n            _wallet.invoke(_comptroller, 0, abi.encodeWithSignature(\u0022exitMarket(address)\u0022, _cToken));\r\n        }\r\n    }\r\n}","ABI":"[{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_wallet\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022init\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_wallet\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022getNonce\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022nonce\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022compoundRegistry\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_wallet\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_module\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022addModule\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022comptroller\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_wallet\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_loanId\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022getLoan\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022_status\u0022,\u0022type\u0022:\u0022uint8\u0022},{\u0022name\u0022:\u0022_ethValue\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_wallet\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_loanId\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022name\u0022:\u0022_debtToken\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_debtAmount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022addDebt\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_wallet\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_token\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_fraction\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022removeInvestment\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_token\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022recoverToken\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_wallet\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_loanId\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022closeLoan\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_wallet\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_data\u0022,\u0022type\u0022:\u0022bytes\u0022},{\u0022name\u0022:\u0022_nonce\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_signatures\u0022,\u0022type\u0022:\u0022bytes\u0022},{\u0022name\u0022:\u0022_gasPrice\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_gasLimit\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022execute\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022success\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_wallet\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_loanId\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022name\u0022:\u0022_collateral\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_collateralAmount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022removeCollateral\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_wallet\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_collateral\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_collateralAmount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_debtToken\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_debtAmount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022openLoan\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022_loanId\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_wallet\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_loanId\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022name\u0022:\u0022_collateral\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_collateralAmount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022addCollateral\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022relayer\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022nonce\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_wallet\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_token\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022getInvestment\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022_tokenValue\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_periodEnd\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022guardianStorage\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_wallet\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_loanId\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022name\u0022:\u0022_debtToken\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_debtAmount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022removeDebt\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_wallet\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_token\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_amount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_period\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022addInvestment\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022_invested\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[{\u0022name\u0022:\u0022_registry\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_guardianStorage\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_comptroller\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_compoundRegistry\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022constructor\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022wallet\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022success\u0022,\u0022type\u0022:\u0022bool\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022signedHash\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022TransactionExecuted\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022name\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022ModuleCreated\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022wallet\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022ModuleInitialised\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022_wallet\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022_token\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022_invested\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022_period\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022InvestmentAdded\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022_wallet\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022_token\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022_fraction\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022InvestmentRemoved\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022_wallet\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022_loanId\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022_collateral\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022_collateralAmount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022_debtToken\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022_debtAmount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022LoanOpened\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022_wallet\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022_loanId\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022LoanClosed\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022_wallet\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022_loanId\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022_collateral\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022_collateralAmount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022CollateralAdded\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022_wallet\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022_loanId\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022_collateral\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022_collateralAmount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022CollateralRemoved\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022_wallet\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022_loanId\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022_debtToken\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022_debtAmount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022DebtAdded\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022_wallet\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022_loanId\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022_debtToken\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022_debtAmount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022DebtRemoved\u0022,\u0022type\u0022:\u0022event\u0022}]","ContractName":"CompoundManager","CompilerVersion":"v0.5.4\u002Bcommit.9549d8ff","OptimizationUsed":"1","Runs":"999","ConstructorArguments":"000000000000000000000000c17d432bd8e8850fd7b32b0270f5afac65db010500000000000000000000000044da3a8051ba88eab0440db3779cab9d679ae76f0000000000000000000000003d9819210a31b4961b30ef54be2aed79b9c9cd3b000000000000000000000000c43472062b4e3763c775956988cc883d4b863d91","Library":"","SwarmSource":"bzzr://df2afe3c428b7d5f34ac8bdd119c67d13b70d5a8ff1b2c4b49c5005e4a4ba98f"}]