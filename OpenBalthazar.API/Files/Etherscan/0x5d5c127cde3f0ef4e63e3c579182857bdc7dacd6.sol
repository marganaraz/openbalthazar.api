[{"SourceCode":"{\u0022CENNZReward.sol\u0022:{\u0022content\u0022:\u0022pragma solidity ^0.5.0;\\n\\nimport \\\u0022./IERC20.sol\\\u0022;\\nimport \\\u0022./ERC20Mintable.sol\\\u0022;\\nimport \\\u0022./SafeMath.sol\\\u0022;\\n\\ncontract CENNZReward {\\n  using SafeMath for uint256;\\n\\n  address public cennzContract;\\n  address public cpayContract;\\n  address public manager;\\n\\n  bool public finished;\\n  uint public finishedBlockNumber;\\n  uint public earnRatePerBlock;\\n\\n  mapping(address =\\u003e uint256) public balances;\\n  mapping(address =\\u003e uint) public blockNumbers;\\n\\n  /**\\n   * All methods tagged by this can only be called by the manager account\\n   */\\n  modifier restricted() {\\n    require((msg.sender == manager), \\\u0022No permission\\\u0022);\\n      _;\\n  }\\n\\n  /**\\n   * Init\\n   */\\n  constructor () public {\\n    manager = 0x62C9BBbb7c295c15801B2Bd5aBaD44B01952545E;\\n    finished = false;\\n\\n    uint256 base = 1 ether;\\n    earnRatePerBlock = base.div(10).div(365 * 24 * 60 * 60).mul(15);\\n  }\\n\\n  /**\\n   * Setting cennzContractAddress and cpayContractAddress\\n   */\\n  function changeContractAddress(address cennzContractAddress, address cpayContractAddress)\\n    public\\n    restricted()\\n  {\\n    cennzContract = cennzContractAddress;\\n    cpayContract = cpayContractAddress;\\n  }\\n\\n  function cennzContractAddress()\\n    public\\n    view\\n    returns (address)\\n  {\\n    return cennzContract;\\n  }\\n\\n  function cpayContractAddress()\\n    public\\n    view\\n    returns (address)\\n  {\\n    return cpayContract;\\n  }\\n\\n  function finish()\\n    public\\n    restricted()\\n  {\\n    finished = true;\\n    finishedBlockNumber = block.number;\\n  }\\n\\n  /**\\n   * Transfering tokens from sender\\u0027s account to manager\\u0027s account\\n   */\\n  function transferAnyERC20Token(address tokenAddress, uint amount)\\n    public\\n    restricted()\\n    returns (bool success)\\n  {\\n    return ERC20(tokenAddress).transfer(manager, amount);\\n  }\\n\\n  /**\\n   * If the reward progress is not finished\\n   * and the message sender never get deposited before,\\n   * depositing CENNZ from the message sender\\u0027s account to this contract.\\n   */\\n  function deposit(uint256 amount, address referrer) public {\\n    require((balances[msg.sender] == 0), \\\u0022Account exist\\\u0022);\\n    require(!finished, \\\u0022Deposit not enabled\\\u0022);\\n\\n    IERC20 CENNZ = IERC20(cennzContract);\\n    require(CENNZ.transferFrom(msg.sender, address(this), amount), \\\u0022Transfer failed\\\u0022);\\n\\n    balances[msg.sender] = amount;\\n    blockNumbers[msg.sender] = block.number;\\n  }\\n\\n  /**\\n   * If the reward progress is not finished,\\n   * withdrawing CENNZ from the message sender\\u0027s account\\n   * and giving CPay as reward to message sender.\\n   */\\n  function withdraw() public {\\n    require(finished, \\\u0022Withdraw not enabled\\\u0022);\\n\\n    uint256 balance = balances[msg.sender];\\n    uint256 reward = getEarning(msg.sender);\\n\\n    require((balance \\u003e 0), \\\u0022Invalid balance\\\u0022);\\n\\n    IERC20 CENNZ = IERC20(cennzContract);\\n    ERC20Mintable CPay = ERC20Mintable(cpayContract);\\n\\n    require(CENNZ.transfer(msg.sender, balance), \\\u0022Transfer failed\\\u0022);\\n    require(CPay.mint(msg.sender, reward), \\\u0022Reward mint failed\\\u0022);\\n\\n    balances[msg.sender] = 0;\\n  }\\n\\n  function balanceOf(address user)\\n    public\\n    view\\n    returns (uint256)\\n  {\\n    return balances[user];\\n  }\\n\\n  function depositBlockNumberOf(address user)\\n    public\\n    view\\n    returns (uint)\\n  {\\n    return blockNumbers[user];\\n  }\\n\\n  function getEarnRatePerBlock()\\n    public\\n    view\\n    returns (uint)\\n  {\\n    return earnRatePerBlock;\\n  }\\n\\n  /**\\n   * Getting amount of token earned by the user\\n   */\\n  function getEarning(address user)\\n    public\\n    view\\n    returns (uint)\\n  {\\n    uint256 balance = balances[user];\\n    uint depositBlockNumber = blockNumbers[user];\\n    uint duration;\\n\\n    if (finished \\u0026\\u0026 finishedBlockNumber \\u003e 0) {\\n      duration = finishedBlockNumber - depositBlockNumber;\\n    } else {\\n      duration = block.number - depositBlockNumber;\\n    }\\n\\n    if (duration \\u003c 0) {\\n      duration = 0;\\n    }\\n\\n    uint256 earning = balance.div(1 ether).mul(duration.mul(earnRatePerBlock));\\n    return earning;\\n  }\\n}\\n\u0022},\u0022ERC20.sol\u0022:{\u0022content\u0022:\u0022pragma solidity ^0.5.0;\\n\\nimport \\\u0022./IERC20.sol\\\u0022;\\nimport \\\u0022./SafeMath.sol\\\u0022;\\n\\n/**\\n * @dev Implementation of the \u0060IERC20\u0060 interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using \u0060_mint\u0060.\\n * For a generic mechanism see \u0060ERC20Mintable\u0060.\\n *\\n * *For a detailed writeup see our guide [How to implement supply\\n * mechanisms](https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226).*\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning \u0060false\u0060 on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an \u0060Approval\u0060 event is emitted on calls to \u0060transferFrom\u0060.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn\\u0027t required by the specification.\\n *\\n * Finally, the non-standard \u0060decreaseAllowance\u0060 and \u0060increaseAllowance\u0060\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See \u0060IERC20.approve\u0060.\\n */\\ncontract ERC20 is IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address =\\u003e uint256) private _balances;\\n\\n    mapping (address =\\u003e mapping (address =\\u003e uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    /**\\n     * @dev See \u0060IERC20.totalSupply\u0060.\\n     */\\n    function totalSupply() public view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See \u0060IERC20.balanceOf\u0060.\\n     */\\n    function balanceOf(address account) public view returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See \u0060IERC20.transfer\u0060.\\n     *\\n     * Requirements:\\n     *\\n     * - \u0060recipient\u0060 cannot be the zero address.\\n     * - the caller must have a balance of at least \u0060amount\u0060.\\n     */\\n    function transfer(address recipient, uint256 amount) public returns (bool) {\\n        _transfer(msg.sender, recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See \u0060IERC20.allowance\u0060.\\n     */\\n    function allowance(address owner, address spender) public view returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See \u0060IERC20.approve\u0060.\\n     *\\n     * Requirements:\\n     *\\n     * - \u0060spender\u0060 cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public returns (bool) {\\n        _approve(msg.sender, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See \u0060IERC20.transferFrom\u0060.\\n     *\\n     * Emits an \u0060Approval\u0060 event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of \u0060ERC20\u0060;\\n     *\\n     * Requirements:\\n     * - \u0060sender\u0060 and \u0060recipient\u0060 cannot be the zero address.\\n     * - \u0060sender\u0060 must have a balance of at least \u0060value\u0060.\\n     * - the caller must have allowance for \u0060sender\u0060\\u0027s tokens of at least\\n     * \u0060amount\u0060.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to \u0060spender\u0060 by the caller.\\n     *\\n     * This is an alternative to \u0060approve\u0060 that can be used as a mitigation for\\n     * problems described in \u0060IERC20.approve\u0060.\\n     *\\n     * Emits an \u0060Approval\u0060 event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - \u0060spender\u0060 cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to \u0060spender\u0060 by the caller.\\n     *\\n     * This is an alternative to \u0060approve\u0060 that can be used as a mitigation for\\n     * problems described in \u0060IERC20.approve\u0060.\\n     *\\n     * Emits an \u0060Approval\u0060 event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - \u0060spender\u0060 cannot be the zero address.\\n     * - \u0060spender\u0060 must have allowance for the caller of at least\\n     * \u0060subtractedValue\u0060.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens \u0060amount\u0060 from \u0060sender\u0060 to \u0060recipient\u0060.\\n     *\\n     * This is internal function is equivalent to \u0060transfer\u0060, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a \u0060Transfer\u0060 event.\\n     *\\n     * Requirements:\\n     *\\n     * - \u0060sender\u0060 cannot be the zero address.\\n     * - \u0060recipient\u0060 cannot be the zero address.\\n     * - \u0060sender\u0060 must have a balance of at least \u0060amount\u0060.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal {\\n        require(sender != address(0), \\\u0022ERC20: transfer from the zero address\\\u0022);\\n        require(recipient != address(0), \\\u0022ERC20: transfer to the zero address\\\u0022);\\n\\n        _balances[sender] = _balances[sender].sub(amount);\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates \u0060amount\u0060 tokens and assigns them to \u0060account\u0060, increasing\\n     * the total supply.\\n     *\\n     * Emits a \u0060Transfer\u0060 event with \u0060from\u0060 set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - \u0060to\u0060 cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal {\\n        require(account != address(0), \\\u0022ERC20: mint to the zero address\\\u0022);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n     /**\\n     * @dev Destroys \u0060amount\u0060 tokens from \u0060account\u0060, reducing the\\n     * total supply.\\n     *\\n     * Emits a \u0060Transfer\u0060 event with \u0060to\u0060 set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - \u0060account\u0060 cannot be the zero address.\\n     * - \u0060account\u0060 must have at least \u0060amount\u0060 tokens.\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        require(account != address(0), \\\u0022ERC20: burn from the zero address\\\u0022);\\n\\n        _totalSupply = _totalSupply.sub(value);\\n        _balances[account] = _balances[account].sub(value);\\n        emit Transfer(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets \u0060amount\u0060 as the allowance of \u0060spender\u0060 over the \u0060owner\u0060s tokens.\\n     *\\n     * This is internal function is equivalent to \u0060approve\u0060, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an \u0060Approval\u0060 event.\\n     *\\n     * Requirements:\\n     *\\n     * - \u0060owner\u0060 cannot be the zero address.\\n     * - \u0060spender\u0060 cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        require(owner != address(0), \\\u0022ERC20: approve from the zero address\\\u0022);\\n        require(spender != address(0), \\\u0022ERC20: approve to the zero address\\\u0022);\\n\\n        _allowances[owner][spender] = value;\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    /**\\n     * @dev Destoys \u0060amount\u0060 tokens from \u0060account\u0060.\u0060amount\u0060 is then deducted\\n     * from the caller\\u0027s allowance.\\n     *\\n     * See \u0060_burn\u0060 and \u0060_approve\u0060.\\n     */\\n    function _burnFrom(address account, uint256 amount) internal {\\n        _burn(account, amount);\\n        _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount));\\n    }\\n}\\n\u0022},\u0022ERC20Mintable.sol\u0022:{\u0022content\u0022:\u0022pragma solidity ^0.5.0;\\n\\nimport \\\u0022./ERC20.sol\\\u0022;\\nimport \\\u0022./MinterRole.sol\\\u0022;\\n\\n/**\\n * @dev Extension of \u0060ERC20\u0060 that adds a set of accounts with the \u0060MinterRole\u0060,\\n * which have permission to mint (create) new tokens as they see fit.\\n *\\n * At construction, the deployer of the contract is the only minter.\\n */\\ncontract ERC20Mintable is ERC20, MinterRole {\\n    /**\\n     * @dev See \u0060ERC20._mint\u0060.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have the \u0060MinterRole\u0060.\\n     */\\n    function mint(address account, uint256 amount) public onlyMinter returns (bool) {\\n        _mint(account, amount);\\n        return true;\\n    }\\n}\\n\u0022},\u0022IERC20.sol\u0022:{\u0022content\u0022:\u0022pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see \u0060ERC20Detailed\u0060.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by \u0060account\u0060.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves \u0060amount\u0060 tokens from the caller\\u0027s account to \u0060recipient\u0060.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a \u0060Transfer\u0060 event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that \u0060spender\u0060 will be\\n     * allowed to spend on behalf of \u0060owner\u0060 through \u0060transferFrom\u0060. This is\\n     * zero by default.\\n     *\\n     * This value changes when \u0060approve\u0060 or \u0060transferFrom\u0060 are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets \u0060amount\u0060 as the allowance of \u0060spender\u0060 over the caller\\u0027s tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * \\u003e Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an \u0060Approval\u0060 event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves \u0060amount\u0060 tokens from \u0060sender\u0060 to \u0060recipient\u0060 using the\\n     * allowance mechanism. \u0060amount\u0060 is then deducted from the caller\\u0027s\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a \u0060Transfer\u0060 event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when \u0060value\u0060 tokens are moved from one account (\u0060from\u0060) to\\n     * another (\u0060to\u0060).\\n     *\\n     * Note that \u0060value\u0060 may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a \u0060spender\u0060 for an \u0060owner\u0060 is set by\\n     * a call to \u0060approve\u0060. \u0060value\u0060 is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\u0022},\u0022MinterRole.sol\u0022:{\u0022content\u0022:\u0022pragma solidity ^0.5.0;\\n\\nimport \\\u0022./Roles.sol\\\u0022;\\n\\ncontract MinterRole {\\n    using Roles for Roles.Role;\\n\\n    event MinterAdded(address indexed account);\\n    event MinterRemoved(address indexed account);\\n\\n    Roles.Role private _minters;\\n\\n    constructor () internal {\\n        _addMinter(msg.sender);\\n    }\\n\\n    modifier onlyMinter() {\\n        require(isMinter(msg.sender), \\\u0022MinterRole: caller does not have the Minter role\\\u0022);\\n        _;\\n    }\\n\\n    function isMinter(address account) public view returns (bool) {\\n        return _minters.has(account);\\n    }\\n\\n    function addMinter(address account) public onlyMinter {\\n        _addMinter(account);\\n    }\\n\\n    function renounceMinter() public {\\n        _removeMinter(msg.sender);\\n    }\\n\\n    function _addMinter(address account) internal {\\n        _minters.add(account);\\n        emit MinterAdded(account);\\n    }\\n\\n    function _removeMinter(address account) internal {\\n        _minters.remove(account);\\n        emit MinterRemoved(account);\\n    }\\n}\\n\u0022},\u0022Roles.sol\u0022:{\u0022content\u0022:\u0022pragma solidity ^0.5.0;\\n\\n/**\\n * @title Roles\\n * @dev Library for managing addresses assigned to a Role.\\n */\\nlibrary Roles {\\n    struct Role {\\n        mapping (address =\\u003e bool) bearer;\\n    }\\n\\n    /**\\n     * @dev Give an account access to this role.\\n     */\\n    function add(Role storage role, address account) internal {\\n        require(!has(role, account), \\\u0022Roles: account already has role\\\u0022);\\n        role.bearer[account] = true;\\n    }\\n\\n    /**\\n     * @dev Remove an account\\u0027s access to this role.\\n     */\\n    function remove(Role storage role, address account) internal {\\n        require(has(role, account), \\\u0022Roles: account does not have role\\\u0022);\\n        role.bearer[account] = false;\\n    }\\n\\n    /**\\n     * @dev Check if an account has this role.\\n     * @return bool\\n     */\\n    function has(Role storage role, address account) internal view returns (bool) {\\n        require(account != address(0), \\\u0022Roles: account is the zero address\\\u0022);\\n        return role.bearer[account];\\n    }\\n}\\n\u0022},\u0022SafeMath.sol\u0022:{\u0022content\u0022:\u0022pragma solidity ^0.5.0;\\n\\n/**\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * \u0060SafeMath\u0060 restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it\\u0027s recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s \u0060\u002B\u0060 operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a \u002B b;\\n        require(c \\u003e= a, \\\u0022SafeMath: addition overflow\\\u0022);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s \u0060-\u0060 operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b \\u003c= a, \\\u0022SafeMath: subtraction overflow\\\u0022);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s \u0060*\u0060 operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\u0022SafeMath: multiplication overflow\\\u0022);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s \u0060/\u0060 operator. Note: this function uses a\\n     * \u0060revert\u0060 opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b \\u003e 0, \\\u0022SafeMath: division by zero\\\u0022);\\n        uint256 c = a / b;\\n        // assert(a == b * c \u002B a % b); // There is no case in which this doesn\\u0027t hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s \u0060%\u0060 operator. This function uses a \u0060revert\u0060\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, \\\u0022SafeMath: modulo by zero\\\u0022);\\n        return a % b;\\n    }\\n}\\n\u0022}}","ABI":"[{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022getEarnRatePerBlock\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022user\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022depositBlockNumberOf\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022blockNumbers\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022cpayContractAddress\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022balances\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022withdraw\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022cennzContractAddress\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022manager\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022referrer\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022deposit\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022user\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022balanceOf\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022earnRatePerBlock\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022cennzContractAddress\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022cpayContractAddress\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022changeContractAddress\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022finishedBlockNumber\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022cpayContract\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022cennzContract\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022finished\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022finish\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022user\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022getEarning\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022tokenAddress\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022transferAnyERC20Token\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022success\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022constructor\u0022}]","ContractName":"CENNZReward","CompilerVersion":"v0.5.11\u002Bcommit.c082d0b4","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://2d151718f426f9e4922d13acd1b35a9eae0b607a485fe094af0a2779a0e75659"}]