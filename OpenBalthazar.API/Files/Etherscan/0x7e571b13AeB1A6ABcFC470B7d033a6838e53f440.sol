[{"SourceCode":"pragma solidity ^0.5.7;\r\n\r\ncontract ApproveAndCallFallBack {\r\n    function receiveApproval(address from, uint256 _amount, address _token, bytes memory _data) public;\r\n}\r\n\r\n\r\n\r\n\r\n\r\ncontract SafeTransfer {\r\n    function _safeTransfer(ERC20Token _token, address _to, uint256 _value) internal returns (bool result) {\r\n        _token.transfer(_to, _value);\r\n        assembly {\r\n        switch returndatasize()\r\n            case 0 {\r\n            result := not(0)\r\n            }\r\n            case 32 {\r\n            returndatacopy(0, 0, 32)\r\n            result := mload(0)\r\n            }\r\n            default {\r\n            revert(0, 0)\r\n            }\r\n        }\r\n        require(result, \u0022Unsuccessful token transfer\u0022);\r\n    }\r\n\r\n    function _safeTransferFrom(\r\n        ERC20Token _token,\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    ) internal returns (bool result)\r\n    {\r\n        _token.transferFrom(_from, _to, _value);\r\n        assembly {\r\n        switch returndatasize()\r\n            case 0 {\r\n            result := not(0)\r\n            }\r\n            case 32 {\r\n            returndatacopy(0, 0, 32)\r\n            result := mload(0)\r\n            }\r\n            default {\r\n            revert(0, 0)\r\n            }\r\n        }\r\n        require(result, \u0022Unsuccessful token transfer\u0022);\r\n    }\r\n}/* solium-disable security/no-block-members */\r\n\r\n\r\n/* solium-disable security/no-block-members */\r\n/* solium-disable security/no-inline-assembly */\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \u0022user permissions\u0022.\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original \u0060owner\u0060 of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Get the contract\u0027s owner\r\n     * @return the address of the owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \u0022Only the contract\u0027s owner can invoke this function\u0022);\r\n        _;\r\n    }\r\n\r\n     /**\r\n      * @dev Sets an owner address\r\n      * @param _newOwner new owner address\r\n      */\r\n    function _setOwner(address _newOwner) internal {\r\n        _owner = _newOwner;\r\n    }\r\n\r\n    /**\r\n     * @dev is sender the owner of the contract?\r\n     * @return true if \u0060msg.sender\u0060 is the owner of the contract.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to relinquish control of the contract.\r\n     *      Renouncing to ownership will leave the contract without an owner.\r\n     *      It will not be possible to call the functions with the \u0060onlyOwner\u0060\r\n     *      modifier anymore.\r\n     */\r\n    function renounceOwnership() external onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param _newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address _newOwner) external onlyOwner {\r\n        _transferOwnership(_newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param _newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address _newOwner) internal {\r\n        require(_newOwner != address(0), \u0022New owner cannot be address(0)\u0022);\r\n        emit OwnershipTransferred(_owner, _newOwner);\r\n        _owner = _newOwner;\r\n    }\r\n}\r\n\r\n\r\n// Abstract contract for the full ERC 20 Token standard\r\n// https://github.com/ethereum/EIPs/issues/20\r\n\r\ninterface ERC20Token {\r\n\r\n    /**\r\n     * @notice send \u0060_value\u0060 token to \u0060_to\u0060 from \u0060msg.sender\u0060\r\n     * @param _to The address of the recipient\r\n     * @param _value The amount of token to be transferred\r\n     * @return Whether the transfer was successful or not\r\n     */\r\n    function transfer(address _to, uint256 _value) external returns (bool success);\r\n\r\n    /**\r\n     * @notice \u0060msg.sender\u0060 approves \u0060_spender\u0060 to spend \u0060_value\u0060 tokens\r\n     * @param _spender The address of the account able to transfer the tokens\r\n     * @param _value The amount of tokens to be approved for transfer\r\n     * @return Whether the approval was successful or not\r\n     */\r\n    function approve(address _spender, uint256 _value) external returns (bool success);\r\n\r\n    /**\r\n     * @notice send \u0060_value\u0060 token to \u0060_to\u0060 from \u0060_from\u0060 on the condition it is approved by \u0060_from\u0060\r\n     * @param _from The address of the sender\r\n     * @param _to The address of the recipient\r\n     * @param _value The amount of token to be transferred\r\n     * @return Whether the transfer was successful or not\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\r\n\r\n    /**\r\n     * @param _owner The address from which the balance will be retrieved\r\n     * @return The balance\r\n     */\r\n    function balanceOf(address _owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @param _owner The address of the account owning tokens\r\n     * @param _spender The address of the account able to transfer the tokens\r\n     * @return Amount of remaining tokens allowed to spent\r\n     */\r\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\r\n\r\n    /**\r\n     * @notice return total supply of tokens\r\n     */\r\n    function totalSupply() external view returns (uint256 supply);\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\n\r\n\r\n\r\ncontract Proxiable {\r\n    // Code position in storage is keccak256(\u0022PROXIABLE\u0022) = \u00220xc5f16f0fcc639fa48a6947836d9850f504798523bf8c9a3a87d5876cf622bcf7\u0022\r\n    event Upgraded(address indexed implementation);\r\n\r\n    function updateCodeAddress(address newAddress) internal {\r\n        require(\r\n            bytes32(0xc5f16f0fcc639fa48a6947836d9850f504798523bf8c9a3a87d5876cf622bcf7) == Proxiable(newAddress).proxiableUUID(),\r\n            \u0022Not compatible\u0022\r\n        );\r\n        assembly { // solium-disable-line\r\n            sstore(0xc5f16f0fcc639fa48a6947836d9850f504798523bf8c9a3a87d5876cf622bcf7, newAddress)\r\n        }\r\n        emit Upgraded(newAddress);\r\n    }\r\n    function proxiableUUID() public pure returns (bytes32) {\r\n        return 0xc5f16f0fcc639fa48a6947836d9850f504798523bf8c9a3a87d5876cf622bcf7;\r\n    }\r\n\r\n    bool internal _initialized;\r\n\r\n    function isInitialized() public view returns(bool) {\r\n        return _initialized;\r\n    }\r\n}\r\n\r\n/**\r\n* @title License\r\n* @dev Contract for buying a license\r\n*/\r\ncontract License is Ownable, ApproveAndCallFallBack, SafeTransfer, Proxiable {\r\n    uint256 public price;\r\n\r\n    ERC20Token token;\r\n    address burnAddress;\r\n\r\n    struct LicenseDetails {\r\n        uint price;\r\n        uint creationTime;\r\n    }\r\n\r\n    address[] public licenseOwners;\r\n    mapping(address =\u003E uint) public idxLicenseOwners;\r\n    mapping(address =\u003E LicenseDetails) public licenseDetails;\r\n\r\n    event Bought(address buyer, uint256 price);\r\n    event PriceChanged(uint256 _price);\r\n    event BurnAddressChanged(address sender, address prevBurnAddress, address newBurnAddress);\r\n\r\n    /**\r\n     * @dev Changes the burn address\r\n     * @param _burnAddress New burn address\r\n     */\r\n    function setBurnAddress(address payable _burnAddress) external onlyOwner {\r\n        emit BurnAddressChanged(msg.sender, burnAddress, _burnAddress);\r\n        burnAddress = _burnAddress;\r\n    }\r\n\r\n    /**\r\n     * @param _tokenAddress Address of token used to pay for licenses (SNT)\r\n     * @param _price Price of the licenses\r\n     * @param _burnAddress Address where the license fee is going to be sent\r\n     */\r\n    constructor(address _tokenAddress, uint256 _price, address _burnAddress) public {\r\n        init(_tokenAddress, _price, _burnAddress);\r\n    }\r\n\r\n    /**\r\n     * @dev Initialize contract (used with proxy). Can only be called once\r\n     * @param _tokenAddress Address of token used to pay for licenses (SNT)\r\n     * @param _price Price of the licenses\r\n     * @param _burnAddress Address where the license fee is going to be sent\r\n     */\r\n    function init(\r\n        address _tokenAddress,\r\n        uint256 _price,\r\n        address _burnAddress\r\n    ) public {\r\n        assert(_initialized == false);\r\n\r\n        _initialized = true;\r\n\r\n        price = _price;\r\n        token = ERC20Token(_tokenAddress);\r\n        burnAddress = _burnAddress;\r\n\r\n        _setOwner(msg.sender);\r\n    }\r\n\r\n    function updateCode(address newCode) public onlyOwner {\r\n        updateCodeAddress(newCode);\r\n    }\r\n\r\n    /**\r\n     * @notice Check if the address already owns a license\r\n     * @param _address The address to check\r\n     * @return bool\r\n     */\r\n    function isLicenseOwner(address _address) public view returns (bool) {\r\n        return licenseDetails[_address].price != 0 \u0026\u0026 licenseDetails[_address].creationTime != 0;\r\n    }\r\n\r\n    /**\r\n     * @notice Buy a license\r\n     * @dev Requires value to be equal to the price of the license.\r\n     *      The msg.sender must not already own a license.\r\n     */\r\n    function buy() external returns(uint) {\r\n        uint id = _buyFrom(msg.sender);\r\n        return id;\r\n    }\r\n\r\n    /**\r\n     * @notice Buy a license\r\n     * @dev Requires value to be equal to the price of the license.\r\n     *      The _owner must not already own a license.\r\n     */\r\n    function _buyFrom(address _licenseOwner) internal returns(uint) {\r\n        require(licenseDetails[_licenseOwner].creationTime == 0, \u0022License already bought\u0022);\r\n\r\n        licenseDetails[_licenseOwner] = LicenseDetails({\r\n            price: price,\r\n            creationTime: block.timestamp\r\n        });\r\n\r\n        uint idx = licenseOwners.push(_licenseOwner);\r\n        idxLicenseOwners[_licenseOwner] = idx;\r\n\r\n        emit Bought(_licenseOwner, price);\r\n\r\n        require(_safeTransferFrom(token, _licenseOwner, burnAddress, price), \u0022Unsuccessful token transfer\u0022);\r\n\r\n        return idx;\r\n    }\r\n\r\n    /**\r\n     * @notice Set the license price\r\n     * @param _price The new price of the license\r\n     * @dev Only the owner of the contract can perform this action\r\n    */\r\n    function setPrice(uint256 _price) external onlyOwner {\r\n        price = _price;\r\n        emit PriceChanged(_price);\r\n    }\r\n\r\n    /**\r\n     * @dev Get number of license owners\r\n     * @return uint\r\n     */\r\n    function getNumLicenseOwners() external view returns (uint256) {\r\n        return licenseOwners.length;\r\n    }\r\n\r\n    /**\r\n     * @notice Support for \u0022approveAndCall\u0022. Callable only by \u0060token()\u0060.\r\n     * @param _from Who approved.\r\n     * @param _amount Amount being approved, need to be equal \u0060price()\u0060.\r\n     * @param _token Token being approved, need to be equal \u0060token()\u0060.\r\n     * @param _data Abi encoded data with selector of \u0060buy(and)\u0060.\r\n     */\r\n    function receiveApproval(address _from, uint256 _amount, address _token, bytes memory _data) public {\r\n        require(_amount == price, \u0022Wrong value\u0022);\r\n        require(_token == address(token), \u0022Wrong token\u0022);\r\n        require(_token == address(msg.sender), \u0022Wrong call\u0022);\r\n        require(_data.length == 4, \u0022Wrong data length\u0022);\r\n\r\n        require(_abiDecodeBuy(_data) == bytes4(0xa6f2ae3a), \u0022Wrong method selector\u0022); //bytes4(keccak256(\u0022buy()\u0022))\r\n\r\n        _buyFrom(_from);\r\n    }\r\n\r\n    /**\r\n     * @dev Decodes abi encoded data with selector for \u0022buy()\u0022.\r\n     * @param _data Abi encoded data.\r\n     * @return Decoded registry call.\r\n     */\r\n    function _abiDecodeBuy(bytes memory _data) internal pure returns(bytes4 sig) {\r\n        assembly {\r\n            sig := mload(add(_data, add(0x20, 0)))\r\n        }\r\n    }\r\n}\r\n\r\n\r\n/**\r\n* @title ArbitratorLicense\r\n* @dev Contract for management of an arbitrator license\r\n*/\r\ncontract ArbitrationLicense is License {\r\n\r\n    enum RequestStatus {NONE,AWAIT,ACCEPTED,REJECTED,CLOSED}\r\n\r\n    struct Request{\r\n        address seller;\r\n        address arbitrator;\r\n        RequestStatus status;\r\n        uint date;\r\n    }\r\n\r\n\tstruct ArbitratorLicenseDetails {\r\n        uint id;\r\n        bool acceptAny;// accept any seller\r\n    }\r\n\r\n    mapping(address =\u003E ArbitratorLicenseDetails) public arbitratorlicenseDetails;\r\n    mapping(address =\u003E mapping(address =\u003E bool)) public permissions;\r\n    mapping(address =\u003E mapping(address =\u003E bool)) public blacklist;\r\n    mapping(bytes32 =\u003E Request) public requests;\r\n\r\n    event ArbitratorRequested(bytes32 id, address indexed seller, address indexed arbitrator);\r\n\r\n    event RequestAccepted(bytes32 id, address indexed arbitrator, address indexed seller);\r\n    event RequestRejected(bytes32 id, address indexed arbitrator, address indexed seller);\r\n    event RequestCanceled(bytes32 id, address indexed arbitrator, address indexed seller);\r\n    event BlacklistSeller(address indexed arbitrator, address indexed seller);\r\n    event UnBlacklistSeller(address indexed arbitrator, address indexed seller);\r\n\r\n    /**\r\n     * @param _tokenAddress Address of token used to pay for licenses (SNT)\r\n     * @param _price Amount of token needed to buy a license\r\n     * @param _burnAddress Burn address where the price of the license is sent\r\n     */\r\n    constructor(address _tokenAddress, uint256 _price, address _burnAddress)\r\n      License(_tokenAddress, _price, _burnAddress)\r\n      public {}\r\n\r\n    /**\r\n     * @notice Buy an arbitrator license\r\n     */\r\n    function buy() external returns(uint) {\r\n        return _buy(msg.sender, false);\r\n    }\r\n\r\n    /**\r\n     * @notice Buy an arbitrator license and set if the arbitrator accepts any seller\r\n     * @param _acceptAny When set to true, all sellers are accepted by the arbitrator\r\n     */\r\n    function buy(bool _acceptAny) external returns(uint) {\r\n        return _buy(msg.sender, _acceptAny);\r\n    }\r\n\r\n    /**\r\n     * @notice Buy an arbitrator license and set if the arbitrator accepts any seller. Sets the arbitrator as the address in params instead of the sender\r\n     * @param _sender Address of the arbitrator\r\n     * @param _acceptAny When set to true, all sellers are accepted by the arbitrator\r\n     */\r\n    function _buy(address _sender, bool _acceptAny) internal returns (uint id) {\r\n        id = _buyFrom(_sender);\r\n        arbitratorlicenseDetails[_sender].id = id;\r\n        arbitratorlicenseDetails[_sender].acceptAny = _acceptAny;\r\n    }\r\n\r\n    /**\r\n     * @notice Change acceptAny parameter for arbitrator\r\n     * @param _acceptAny indicates does arbitrator allow to accept any seller/choose sellers\r\n     */\r\n    function changeAcceptAny(bool _acceptAny) public {\r\n        require(isLicenseOwner(msg.sender), \u0022Message sender should have a valid arbitrator license\u0022);\r\n        require(arbitratorlicenseDetails[msg.sender].acceptAny != _acceptAny,\r\n                \u0022Message sender should pass parameter different from the current one\u0022);\r\n\r\n        arbitratorlicenseDetails[msg.sender].acceptAny = _acceptAny;\r\n    }\r\n\r\n    /**\r\n     * @notice Allows arbitrator to accept a seller\r\n     * @param _arbitrator address of a licensed arbitrator\r\n     */\r\n    function requestArbitrator(address _arbitrator) public {\r\n       require(isLicenseOwner(_arbitrator), \u0022Arbitrator should have a valid license\u0022);\r\n       require(!arbitratorlicenseDetails[_arbitrator].acceptAny, \u0022Arbitrator already accepts all cases\u0022);\r\n\r\n       bytes32 _id = keccak256(abi.encodePacked(_arbitrator, msg.sender));\r\n       RequestStatus _status = requests[_id].status;\r\n       require(_status != RequestStatus.AWAIT \u0026\u0026 _status != RequestStatus.ACCEPTED, \u0022Invalid request status\u0022);\r\n\r\n       if(_status == RequestStatus.REJECTED || _status == RequestStatus.CLOSED){\r\n           require(requests[_id].date \u002B 3 days \u003C block.timestamp,\r\n            \u0022Must wait 3 days before requesting the arbitrator again\u0022);\r\n       }\r\n\r\n       requests[_id] = Request({\r\n            seller: msg.sender,\r\n            arbitrator: _arbitrator,\r\n            status: RequestStatus.AWAIT,\r\n            date: block.timestamp\r\n       });\r\n\r\n       emit ArbitratorRequested(_id, msg.sender, _arbitrator);\r\n    }\r\n\r\n    /**\r\n     * @dev Get Request Id\r\n     * @param _arbitrator Arbitrator address\r\n     * @param _account Seller account\r\n     * @return Request Id\r\n     */\r\n    function getId(address _arbitrator, address _account) external pure returns(bytes32){\r\n        return keccak256(abi.encodePacked(_arbitrator,_account));\r\n    }\r\n\r\n    /**\r\n     * @notice Allows arbitrator to accept a seller\u0027s request\r\n     * @param _id request id\r\n     */\r\n    function acceptRequest(bytes32 _id) public {\r\n        require(isLicenseOwner(msg.sender), \u0022Arbitrator should have a valid license\u0022);\r\n        require(requests[_id].status == RequestStatus.AWAIT, \u0022This request is not pending\u0022);\r\n        require(!arbitratorlicenseDetails[msg.sender].acceptAny, \u0022Arbitrator already accepts all cases\u0022);\r\n        require(requests[_id].arbitrator == msg.sender, \u0022Invalid arbitrator\u0022);\r\n\r\n        requests[_id].status = RequestStatus.ACCEPTED;\r\n\r\n        address _seller = requests[_id].seller;\r\n        permissions[msg.sender][_seller] = true;\r\n\r\n        emit RequestAccepted(_id, msg.sender, requests[_id].seller);\r\n    }\r\n\r\n    /**\r\n     * @notice Allows arbitrator to reject a request\r\n     * @param _id request id\r\n     */\r\n    function rejectRequest(bytes32 _id) public {\r\n        require(isLicenseOwner(msg.sender), \u0022Arbitrator should have a valid license\u0022);\r\n        require(requests[_id].status == RequestStatus.AWAIT || requests[_id].status == RequestStatus.ACCEPTED,\r\n            \u0022Invalid request status\u0022);\r\n        require(!arbitratorlicenseDetails[msg.sender].acceptAny, \u0022Arbitrator accepts all cases\u0022);\r\n        require(requests[_id].arbitrator == msg.sender, \u0022Invalid arbitrator\u0022);\r\n\r\n        requests[_id].status = RequestStatus.REJECTED;\r\n        requests[_id].date = block.timestamp;\r\n\r\n        address _seller = requests[_id].seller;\r\n        permissions[msg.sender][_seller] = false;\r\n\r\n        emit RequestRejected(_id, msg.sender, requests[_id].seller);\r\n    }\r\n\r\n    /**\r\n     * @notice Allows seller to cancel a request\r\n     * @param _id request id\r\n     */\r\n    function cancelRequest(bytes32 _id) public {\r\n        require(requests[_id].seller == msg.sender,  \u0022This request id does not belong to the message sender\u0022);\r\n        require(requests[_id].status == RequestStatus.AWAIT || requests[_id].status == RequestStatus.ACCEPTED, \u0022Invalid request status\u0022);\r\n\r\n        address arbitrator = requests[_id].arbitrator;\r\n\r\n        requests[_id].status = RequestStatus.CLOSED;\r\n        requests[_id].date = block.timestamp;\r\n\r\n        address _arbitrator = requests[_id].arbitrator;\r\n        permissions[_arbitrator][msg.sender] = false;\r\n\r\n        emit RequestCanceled(_id, arbitrator, requests[_id].seller);\r\n    }\r\n\r\n    /**\r\n     * @notice Allows arbitrator to blacklist a seller\r\n     * @param _seller Seller address\r\n     */\r\n    function blacklistSeller(address _seller) public {\r\n        require(isLicenseOwner(msg.sender), \u0022Arbitrator should have a valid license\u0022);\r\n\r\n        blacklist[msg.sender][_seller] = true;\r\n\r\n        emit BlacklistSeller(msg.sender, _seller);\r\n    }\r\n\r\n    /**\r\n     * @notice Allows arbitrator to remove a seller from the blacklist\r\n     * @param _seller Seller address\r\n     */\r\n    function unBlacklistSeller(address _seller) public {\r\n        require(isLicenseOwner(msg.sender), \u0022Arbitrator should have a valid license\u0022);\r\n\r\n        blacklist[msg.sender][_seller] = false;\r\n\r\n        emit UnBlacklistSeller(msg.sender, _seller);\r\n    }\r\n\r\n    /**\r\n     * @notice Checks if Arbitrator permits to use his/her services\r\n     * @param _seller sellers\u0027s address\r\n     * @param _arbitrator arbitrator\u0027s address\r\n     */\r\n    function isAllowed(address _seller, address _arbitrator) public view returns(bool) {\r\n        return (arbitratorlicenseDetails[_arbitrator].acceptAny \u0026\u0026 !blacklist[_arbitrator][_seller]) || permissions[_arbitrator][_seller];\r\n    }\r\n\r\n    /**\r\n     * @notice Support for \u0022approveAndCall\u0022. Callable only by \u0060token()\u0060.\r\n     * @param _from Who approved.\r\n     * @param _amount Amount being approved, need to be equal \u0060price()\u0060.\r\n     * @param _token Token being approved, need to be equal \u0060token()\u0060.\r\n     * @param _data Abi encoded data with selector of \u0060buy(and)\u0060.\r\n     */\r\n    function receiveApproval(address _from, uint256 _amount, address _token, bytes memory _data) public {\r\n        require(_amount == price, \u0022Wrong value\u0022);\r\n        require(_token == address(token), \u0022Wrong token\u0022);\r\n        require(_token == address(msg.sender), \u0022Wrong call\u0022);\r\n        require(_data.length == 4, \u0022Wrong data length\u0022);\r\n\r\n        require(_abiDecodeBuy(_data) == bytes4(0xa6f2ae3a), \u0022Wrong method selector\u0022); //bytes4(keccak256(\u0022buy()\u0022))\r\n\r\n        _buy(_from, false);\r\n    }\r\n}","ABI":"[{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022getNumLicenseOwners\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_acceptAny\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022name\u0022:\u0022changeAcceptAny\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022idxLicenseOwners\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022permissions\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_arbitrator\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022getId\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022pure\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022isInitialized\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_tokenAddress\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_price\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_burnAddress\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022init\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022newCode\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022updateCode\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_burnAddress\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022setBurnAddress\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_id\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022cancelRequest\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022proxiableUUID\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022pure\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_address\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022isLicenseOwner\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022licenseDetails\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022price\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022creationTime\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022renounceOwnership\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_arbitrator\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022requestArbitrator\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022owner\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022isOwner\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_from\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_amount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_token\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_data\u0022,\u0022type\u0022:\u0022bytes\u0022}],\u0022name\u0022:\u0022receiveApproval\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_price\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022setPrice\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022licenseOwners\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_id\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022rejectRequest\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022requests\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022seller\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022arbitrator\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022status\u0022,\u0022type\u0022:\u0022uint8\u0022},{\u0022name\u0022:\u0022date\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022price\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_seller\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_arbitrator\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022isAllowed\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022buy\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_id\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022acceptRequest\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022blacklist\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_seller\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022unBlacklistSeller\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_acceptAny\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022name\u0022:\u0022buy\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_seller\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022blacklistSeller\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022transferOwnership\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022arbitratorlicenseDetails\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022id\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022acceptAny\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[{\u0022name\u0022:\u0022_tokenAddress\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_price\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_burnAddress\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022constructor\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022id\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022seller\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022arbitrator\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022ArbitratorRequested\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022id\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022arbitrator\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022seller\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022RequestAccepted\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022id\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022arbitrator\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022seller\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022RequestRejected\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022id\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022arbitrator\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022seller\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022RequestCanceled\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022arbitrator\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022seller\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022BlacklistSeller\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022arbitrator\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022seller\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022UnBlacklistSeller\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022buyer\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022price\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022Bought\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022_price\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022PriceChanged\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022sender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022prevBurnAddress\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022newBurnAddress\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022BurnAddressChanged\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022implementation\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022Upgraded\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022previousOwner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022OwnershipTransferred\u0022,\u0022type\u0022:\u0022event\u0022}]","ContractName":"ArbitrationLicense","CompilerVersion":"v0.5.10\u002Bcommit.5a6ea5b1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000744d70fdbe2ba4cf95131626614a1763df805b9e0000000000000000000000000000000000000000000000000de0b6b3a76400000000000000000000000000007702caae3d8fee750c4464d80fcb14ce05e00743","Library":"","SwarmSource":"bzzr://3d1b2b0eccdf9e00e8dea5dc0177ae5d88a806830a749b99e156cd5e486478f8"}]