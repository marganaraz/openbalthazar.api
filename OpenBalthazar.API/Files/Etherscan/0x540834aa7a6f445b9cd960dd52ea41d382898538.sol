[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\ncontract AccessControl {\r\n    address public creatorAddress;\r\n    uint16 public totalSeraphims = 0;\r\n    mapping (address =\u003E bool) public seraphims;\r\n\r\n    bool public isMaintenanceMode = true;\r\n \r\n    modifier onlyCREATOR() {\r\n        require(msg.sender == creatorAddress);\r\n        _;\r\n    }\r\n\r\n    modifier onlySERAPHIM() {\r\n      \r\n      require(seraphims[msg.sender] == true);\r\n        _;\r\n    }\r\n    modifier isContractActive {\r\n        require(!isMaintenanceMode);\r\n        _;\r\n    }\r\n    \r\n    // Constructor\r\n    constructor() public {\r\n        creatorAddress = msg.sender;\r\n    }\r\n    \r\n\r\n    function addSERAPHIM(address _newSeraphim) onlyCREATOR public {\r\n        if (seraphims[_newSeraphim] == false) {\r\n            seraphims[_newSeraphim] = true;\r\n            totalSeraphims \u002B= 1;\r\n        }\r\n    }\r\n    \r\n    function removeSERAPHIM(address _oldSeraphim) onlyCREATOR public {\r\n        if (seraphims[_oldSeraphim] == true) {\r\n            seraphims[_oldSeraphim] = false;\r\n            totalSeraphims -= 1;\r\n        }\r\n    }\r\n\r\n    function updateMaintenanceMode(bool _isMaintaining) onlyCREATOR public {\r\n        isMaintenanceMode = _isMaintaining;\r\n    }\r\n\r\n  \r\n} \r\n\r\npragma solidity ^0.4.16;\r\n\r\ncontract SafeMath {\r\n    function safeAdd(uint x, uint y) pure internal returns(uint) {\r\n      uint z = x \u002B y;\r\n      assert((z \u003E= x) \u0026\u0026 (z \u003E= y));\r\n      return z;\r\n    }\r\n\r\n    function safeSubtract(uint x, uint y) pure internal returns(uint) {\r\n      assert(x \u003E= y);\r\n      uint z = x - y;\r\n      return z;\r\n    }\r\n\r\n    function safeMult(uint x, uint y) pure internal returns(uint) {\r\n      uint z = x * y;\r\n      assert((x == 0)||(z/x == y));\r\n      return z;\r\n    }\r\n    \r\n     function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b \u003E 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c \u002B a % b); // There is no case in which this doesn\u0027t hold\r\n    return c;\r\n  }\r\n\r\n    function getRandomNumber(uint16 maxRandom, uint16 min, address privateAddress) constant public returns(uint8) {\r\n        uint256 genNum = uint256(block.blockhash(block.number-1)) \u002B uint256(privateAddress);\r\n        return uint8(genNum % (maxRandom - min \u002B 1)\u002Bmin);\r\n    }\r\n}\r\n\r\ncontract Enums {\r\n    enum ResultCode {\r\n        SUCCESS,\r\n        ERROR_CLASS_NOT_FOUND,\r\n        ERROR_LOW_BALANCE,\r\n        ERROR_SEND_FAIL,\r\n        ERROR_NOT_OWNER,\r\n        ERROR_NOT_ENOUGH_MONEY,\r\n        ERROR_INVALID_AMOUNT\r\n    }\r\n\r\n    enum AngelAura { \r\n        Blue, \r\n        Yellow, \r\n        Purple, \r\n        Orange, \r\n        Red, \r\n        Green \r\n    }\r\n}\r\n\r\n\r\ncontract IABToken is AccessControl {\r\n \r\n \r\n    function balanceOf(address owner) public view returns (uint256);\r\n    function totalSupply() external view returns (uint256) ;\r\n    function ownerOf(uint256 tokenId) public view returns (address) ;\r\n    function setMaxAngels() external;\r\n    function setMaxAccessories() external;\r\n    function setMaxMedals()  external ;\r\n    function initAngelPrices() external;\r\n    function initAccessoryPrices() external ;\r\n    function setCardSeriesPrice(uint8 _cardSeriesId, uint _newPrice) external;\r\n    function approve(address to, uint256 tokenId) public;\r\n    function getRandomNumber(uint16 maxRandom, uint8 min, address privateAddress) view public returns(uint8) ;\r\n    function tokenURI(uint256 _tokenId) public pure returns (string memory) ;\r\n    function baseTokenURI() public pure returns (string memory) ;\r\n    function name() external pure returns (string memory _name) ;\r\n    function symbol() external pure returns (string memory _symbol) ;\r\n    function getApproved(uint256 tokenId) public view returns (address) ;\r\n    function setApprovalForAll(address to, bool approved) public ;\r\n    function isApprovedForAll(address owner, address operator) public view returns (bool);\r\n    function transferFrom(address from, address to, uint256 tokenId) public ;\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) public ;\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public ;\r\n    function _exists(uint256 tokenId) internal view returns (bool) ;\r\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view returns (bool) ;\r\n    function _mint(address to, uint256 tokenId) internal ;\r\n    function mintABToken(address owner, uint8 _cardSeriesId, uint16 _power, uint16 _auraRed, uint16 _auraYellow, uint16 _auraBlue, string memory _name, uint16 _experience, uint16 _oldId) public;\r\n    function addABTokenIdMapping(address _owner, uint256 _tokenId) private ;\r\n    function getPrice(uint8 _cardSeriesId) public view returns (uint);\r\n    function buyAngel(uint8 _angelSeriesId) public payable ;\r\n    function buyAccessory(uint8 _accessorySeriesId) public payable ;\r\n    function getAura(uint8 _angelSeriesId) pure public returns (uint8 auraRed, uint8 auraYellow, uint8 auraBlue) ;\r\n    function getAngelPower(uint8 _angelSeriesId) private view returns (uint16) ;\r\n    function getABToken(uint256 tokenId) view public returns(uint8 cardSeriesId, uint16 power, uint16 auraRed, uint16 auraYellow, uint16 auraBlue, string memory name, uint16 experience, uint64 lastBattleTime, uint16 lastBattleResult, address owner, uint16 oldId);\r\n    function setAuras(uint256 tokenId, uint16 _red, uint16 _blue, uint16 _yellow) external;\r\n    function setName(uint256 tokenId,string memory namechange) public ;\r\n    function setExperience(uint256 tokenId, uint16 _experience) external;\r\n    function setLastBattleResult(uint256 tokenId, uint16 _result) external ;\r\n    function setLastBattleTime(uint256 tokenId) external;\r\n    function setLastBreedingTime(uint256 tokenId) external ;\r\n    function setoldId(uint256 tokenId, uint16 _oldId) external;\r\n    function getABTokenByIndex(address _owner, uint64 _index) view external returns(uint256) ;\r\n    function _burn(address owner, uint256 tokenId) internal ;\r\n    function _burn(uint256 tokenId) internal ;\r\n    function _transferFrom(address from, address to, uint256 tokenId) internal ;\r\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data) internal returns (bool);\r\n    function _clearApproval(uint256 tokenId) private ;\r\n}\r\n\r\n\r\ncontract IPetCardData is AccessControl, Enums {\r\n    uint8 public totalPetCardSeries;    \r\n    uint64 public totalPets;\r\n    \r\n    // write\r\n    function createPetCardSeries(uint8 _petCardSeriesId, uint32 _maxTotal) onlyCREATOR public returns(uint8);\r\n    function setPet(uint8 _petCardSeriesId, address _owner, string _name, uint8 _luck, uint16 _auraRed, uint16 _auraYellow, uint16 _auraBlue) onlySERAPHIM external returns(uint64);\r\n    function setPetAuras(uint64 _petId, uint8 _auraRed, uint8 _auraBlue, uint8 _auraYellow) onlySERAPHIM external;\r\n    function setPetLastTrainingTime(uint64 _petId) onlySERAPHIM external;\r\n    function setPetLastBreedingTime(uint64 _petId) onlySERAPHIM external;\r\n    function addPetIdMapping(address _owner, uint64 _petId) private;\r\n    function transferPet(address _from, address _to, uint64 _petId) onlySERAPHIM public returns(ResultCode);\r\n    function ownerPetTransfer (address _to, uint64 _petId)  public;\r\n    function setPetName(string _name, uint64 _petId) public;\r\n\r\n    // read\r\n    function getPetCardSeries(uint8 _petCardSeriesId) constant public returns(uint8 petCardSeriesId, uint32 currentPetTotal, uint32 maxPetTotal);\r\n    function getPet(uint _petId) constant public returns(uint petId, uint8 petCardSeriesId, string name, uint8 luck, uint16 auraRed, uint16 auraBlue, uint16 auraYellow, uint64 lastTrainingTime, uint64 lastBreedingTime, address owner);\r\n    function getOwnerPetCount(address _owner) constant public returns(uint);\r\n    function getPetByIndex(address _owner, uint _index) constant public returns(uint);\r\n    function getTotalPetCardSeries() constant public returns (uint8);\r\n    function getTotalPets() constant public returns (uint);\r\n}\r\n\r\n\r\n\r\ncontract Pets is AccessControl, SafeMath {\r\n    // Addresses for other contracts Pets interacts with. \r\n  \r\n    address public petCardDataContract = 0xB340686da996b8B3d486b4D27E38E38500A9E926;\r\n    address public ABTokenDataContract = 0xDC32FF5aaDA11b5cE3CAf2D00459cfDA05293F96;\r\n    uint16 public maxRetireAura = 30;\r\n    uint16 public minRetireAura = 10;\r\n    \r\n    uint64 public breedingDelay = 0;\r\n    uint64 public breedingPrice = 0;\r\n    uint8  public upgradeChance = 17;\r\n \r\n    uint8  public bigAuraRand = 100;\r\n    uint8  public smallAuraRand = 50;\r\n    \r\n    uint16 public elementalThreshold = 300;\r\n    \r\n    /*** DATA TYPES ***/\r\n\r\n//Main ABCard Struct, but only using values used in this contract. \r\nstruct ABCard {\r\n    uint256 tokenId;       \r\n        uint8 cardSeriesId;\r\n        //This is 0 to 23 for angels, 24 to 42 for pets, 43 to 60 for accessories, 61 to 72 for medals\r\n        uint16 power;\r\n        //This number is luck for pets and battlepower for angels\r\n        uint16 auraRed;\r\n        uint16 auraYellow;\r\n        uint16 auraBlue;\r\n        string name;\r\n        uint64 lastBattleTime;\r\n     \r\n    }\r\n    \r\n    \r\n \r\n\r\n    // write functions\r\n    function DataContacts(address _petCardDataContract, address _ABTokenDataContract) onlyCREATOR external {\r\n        petCardDataContract = _petCardDataContract;\r\n        ABTokenDataContract = _ABTokenDataContract;\r\n    }\r\n    \r\n    function setParameters(uint16 _minRetireAura, uint16 _maxRetireAura, uint64 _breedingDelay, uint64 _breedingPrice, uint8 _upgradeChance, uint8 _bigAuraRand, uint8 _smallAuraRand) onlyCREATOR external {\r\n        minRetireAura = _minRetireAura;\r\n        maxRetireAura = _maxRetireAura;\r\n        breedingDelay = _breedingDelay;\r\n        breedingPrice = _breedingPrice;\r\n        upgradeChance = _upgradeChance;\r\n        bigAuraRand = _bigAuraRand;\r\n        smallAuraRand = _smallAuraRand;\r\n    }\r\n     \r\n      function getParameters() view external returns (uint16 _minRetireAura, uint16 _maxRetireAura, uint64 _breedingDelay, uint64 _breedingPrice, uint8 _upgradeChance, uint8 _bigAuraRand, uint8 _smallAuraRand)  {\r\n        _minRetireAura = minRetireAura;\r\n        _maxRetireAura = maxRetireAura;\r\n        _breedingDelay = breedingDelay;\r\n        _breedingPrice = breedingPrice;\r\n        _upgradeChance = upgradeChance;\r\n        _bigAuraRand = bigAuraRand;\r\n        _smallAuraRand = smallAuraRand;\r\n    }\r\n     \r\n     \r\n     //Non-721 Retirement functions\r\n     /////////////////////////////////////////////////\r\n     \r\n     \r\n    function checkPet (uint64  petID) private constant returns (uint8) {\r\n       //Legacy function\r\n        IPetCardData petCardData = IPetCardData(petCardDataContract);\r\n        //check if a pet both exists and is owned by the message sender.\r\n        // This function also returns the petcardSeriesID. \r\n        if ((petID \u003C= 0) || (petID \u003E petCardData.getTotalPets())) {return 0;}\r\n        address petowner;\r\n        uint8 petcardSeriesID;\r\n      (,petcardSeriesID,,,,,,,,petowner) = petCardData.getPet(petID);\r\n         if  (petowner != msg.sender)  {return 0;}\r\n        return petcardSeriesID;\r\n        \r\n        \r\n}\r\n     function retireLegacyPets(uint64 pet1, uint64 pet2, uint64 pet3, uint64 pet4, uint64 pet5, uint64 pet6) public {\r\n            IPetCardData petCardData = IPetCardData(petCardDataContract);\r\n         // Send this function the petIds of 6 of your Wild Easy (2 star pets) to receive 1 3 star pet. \r\n         // Send this function the petIds of 6 of your Wild Hard (3 star pets) to receive 1 four star pet. \r\n      \r\n         if (checkPet(pet1) \u003C5) {revert();}\r\n         if (checkPet(pet2) \u003C5) {revert();}\r\n         if (checkPet(pet3) \u003C5) {revert();}\r\n         if (checkPet(pet4) \u003C5) {revert();}\r\n         if (checkPet(pet5) \u003C5) {revert();}\r\n         if (checkPet(pet6) \u003C5) {revert();}\r\n         \r\n        uint8 _newLuck = getRandomNumber(39,30,msg.sender);\r\n        uint8 base = 9;\r\n         if ((checkPet(pet1) \u003E8) \u0026\u0026 (checkPet(pet2) \u003E8) \u0026\u0026 (checkPet(pet3) \u003E8) \u0026\u0026 (checkPet(pet4) \u003E8) \u0026\u0026 (checkPet(pet5) \u003E8) \u0026\u0026 (checkPet(pet6) \u003E8)) {\r\n             //Case of all 3 star pets, so send a 4 star pet. \r\n             _newLuck = getRandomNumber(49,40,msg.sender);\r\n             base = 13;\r\n         }\r\n         \r\n       petCardData.transferPet(msg.sender, address(0), pet1);\r\n       petCardData.transferPet(msg.sender, address(0), pet2);\r\n       petCardData.transferPet(msg.sender, address(0), pet3);\r\n       petCardData.transferPet(msg.sender, address(0), pet4);\r\n       petCardData.transferPet(msg.sender, address(0), pet5);\r\n       petCardData.transferPet(msg.sender, address(0), pet6);\r\n        \r\n        getNewPetCard(getRandomNumber(base\u002B4,9,msg.sender), _newLuck);\r\n         \r\n         }\r\n    //721 Retirement Functions             \r\n     //////////////////////////////////////////////////\r\n         function check721Pet (uint256  petId) private constant returns (uint8) {\r\n      \r\n         IABToken ABTokenData = IABToken(ABTokenDataContract);\r\n        //check if a pet both exists and is owned by the message sender.\r\n        // This function also returns the petcardSeriesID. \r\n    \r\n        address petowner;\r\n        uint8 petCardSeriesId;\r\n     \r\n         (petCardSeriesId,,,,,,,,,,)  = ABTokenData.getABToken(petId);\r\n         if  (ABTokenData.ownerOf(petId) != msg.sender)  {return 0;}\r\n        return petCardSeriesId;\r\n        }\r\n     \r\n     \r\n      function retirePets(uint256 pet1, uint256 pet2, uint256 pet3, uint256 pet4, uint256 pet5, uint256 pet6) public {\r\n        \r\n         // Send this function the petIds of 6 of your Wild Easy (2 star pets) to receive 1 3 star pet. \r\n         // Send this function the petIds of 6 of your Wild Hard (3 star pets) to receive 1 four star pet. \r\n      \r\n        IABToken ABTokenData = IABToken(ABTokenDataContract);\r\n      \r\n         if (check721Pet(pet1) \u003C28) {revert();}\r\n         if (check721Pet(pet2) \u003C28) {revert();}\r\n         if (check721Pet(pet3) \u003C28) {revert();}\r\n         if (check721Pet(pet4) \u003C28) {revert();}\r\n         if (check721Pet(pet5) \u003C28) {revert();}\r\n         if (check721Pet(pet6) \u003C28) {revert();}\r\n         \r\n        uint8 _newLuck = getRandomNumber(39,30,msg.sender);\r\n        uint8 base = 31;\r\n         if ((check721Pet(pet1) \u003E31) \u0026\u0026 (check721Pet(pet2) \u003E31) \u0026\u0026 (check721Pet(pet3) \u003E31) \u0026\u0026 (check721Pet(pet4) \u003E31) \u0026\u0026 (check721Pet(pet5) \u003E31) \u0026\u0026 (check721Pet(pet6) \u003E31)) {\r\n             //Case of all 3 star pets, so send a 4 star pet. \r\n             _newLuck = getRandomNumber(49,40,msg.sender);\r\n             base = 35;\r\n         }\r\n         //Note, user MUST approve contract address or use approveForAll on this address. \r\n        ABTokenData.transferFrom(address(this), address(0), pet1);\r\n        ABTokenData.transferFrom(address(this), address(0), pet2);\r\n        ABTokenData.transferFrom(address(this), address(0), pet3);\r\n        ABTokenData.transferFrom(address(this), address(0), pet4);\r\n        ABTokenData.transferFrom(address(this), address(0), pet5);\r\n        ABTokenData.transferFrom(address(this), address(0), pet6);\r\n            \r\n        getNewPetCard(getRandomNumber(base\u002B4,31,msg.sender), _newLuck);\r\n         \r\n     }\r\n     \r\n//Used for both 721 and legacy retirements. \r\n////////////////////////////////////////\r\n\r\n    \r\n   function getNewPetCard(uint8 seriesId, uint8 _luck) private {\r\n        uint16 _auraRed = getRandomNumber(maxRetireAura,minRetireAura,msg.sender);\r\n        uint16 _auraYellow = getRandomNumber(maxRetireAura,minRetireAura,msg.sender);\r\n        uint16 _auraBlue = getRandomNumber(maxRetireAura,minRetireAura,msg.sender);\r\n      \r\n       IABToken ABTokenData = IABToken(ABTokenDataContract);\r\n\r\n       //create the new one. \r\n       ABTokenData.mintABToken(msg.sender,seriesId \u002B 23, _luck, _auraRed, _auraYellow,_auraBlue, \u0022Lucky\u0022,0, 0);\r\n    }\r\n\r\n\r\n\r\n////////////////////////////////////////////////////////////////////////////////////////////\r\n// Get level 1 pets //////\r\n////////////////////////////////////////////////////////////////////////////////////////////\r\nfunction getLevelFreePet(uint8 petSeriesId) public {\r\n    //Link to the data contract. \r\n    IABToken ABTokenData = IABToken(ABTokenDataContract);\r\n    require(petSeriesId \u003E23 \u0026\u0026 petSeriesId \u003C28, \u0027You must only use this to create a free pet\u0027);\r\n    uint8 _power = getRandomNumber(19,10, msg.sender);\r\n    ABTokenData.mintABToken(msg.sender, petSeriesId, _power, 2, 2, 2, \u0027Lucky\u0027, 0, 0);\r\n}\r\n\r\n\r\n////////////////////////////////////////////////////////////////////////////////////////////\r\n// Breeding Functions //////\r\n////////////////////////////////////////////////////////////////////////////////////////////\r\n      function BreedElemental (uint16 pet1Red, uint16 pet2Red, uint16 pet1Yellow, uint16 pet2Yellow, uint16 pet1Blue, uint16 pet2Blue) private {\r\n          uint16 newPetRed;\r\n          uint16 newPetYellow;\r\n          uint16 newPetBlue;\r\n          \r\n          //find the largest aura \r\n          uint16 largest = pet1Red\u002Bpet2Red;\r\n          uint8 petCardSeriesId = 40;\r\n          newPetRed = largest - bigAuraRand;\r\n          newPetBlue = getRandomNumber(bigAuraRand, 0, msg.sender);\r\n          newPetYellow = getRandomNumber(bigAuraRand, 0, msg.sender);\r\n         \r\n          if ((pet1Yellow \u002B pet2Yellow) \u003E largest) {\r\n              largest = pet1Yellow \u002B pet2Yellow;\r\n              petCardSeriesId = 42;\r\n              newPetYellow = largest - bigAuraRand;\r\n              newPetRed = getRandomNumber(bigAuraRand, 0, msg.sender);\r\n              newPetBlue = getRandomNumber(bigAuraRand, 0, msg.sender);\r\n          }\r\n          if ((pet1Blue \u002B pet2Blue) \u003E largest) {\r\n              largest = pet1Blue \u002B pet2Blue;\r\n              petCardSeriesId = 41;\r\n              newPetBlue = largest - bigAuraRand;\r\n              newPetRed = getRandomNumber(bigAuraRand, 0, msg.sender);\r\n              newPetYellow = getRandomNumber(bigAuraRand, 0, msg.sender);\r\n          }\r\n          \r\n        IABToken ABTokenData = IABToken(ABTokenDataContract);\r\n        uint8 newPetPowerToCreate = getRandomNumber(59,50,msg.sender);\r\n        \r\n              //Set Results\r\n        ABTokenData.mintABToken(msg.sender,petCardSeriesId, newPetPowerToCreate, newPetRed, newPetYellow,newPetBlue,\u0022lucky\u0022,0, 0);\r\n        setNewPetLastBreedingTime();\r\n          \r\n      }\r\n       \r\n\r\n    function Breed (uint256  pet1Id, uint256 pet2Id) external payable  {\r\n        //Link to the data contract. \r\n        IABToken ABTokenData = IABToken(ABTokenDataContract);\r\n        if (msg.value \u003C breedingPrice) {revert();}\r\n        //check if breeding function has improper parameters \r\n         //can\u0027t breed someone else\u0027s pets. \r\n        if ((ABTokenData.ownerOf(pet1Id) != msg.sender) || (ABTokenData.ownerOf(pet2Id) != msg.sender)) {revert();}\r\n        \r\n        ABCard memory pet1;\r\n        ABCard memory pet2;\r\n        (pet1.cardSeriesId,,pet1.auraRed,pet1.auraYellow,pet1.auraBlue,,,pet1.lastBattleTime,,,)  = ABTokenData.getABToken(pet1Id);\r\n        (pet2.cardSeriesId,,pet2.auraRed,pet2.auraYellow,pet2.auraBlue,,,pet2.lastBattleTime,,,)  = ABTokenData.getABToken(pet1Id);\r\n        \r\n  if ((now \u003C (pet1.lastBattleTime\u002BbreedingDelay)) || (now \u003C (pet2.lastBattleTime\u002B breedingDelay))) {revert();}\r\n   \r\n    //set now to avoid reentrancy. Battle time is used instead of breeding time. \r\n   ABTokenData.setLastBattleTime(pet1Id);\r\n   ABTokenData.setLastBattleTime(pet2Id);\r\n   \r\n   \r\n   \r\n   if ((pet1.cardSeriesId \u003C24) || (pet1.cardSeriesId \u003E39) || (pet2.cardSeriesId \u003C24) || (pet2.cardSeriesId \u003E 39)) {revert();}\r\n   //only pets can breed. \r\n\r\n\r\n   \r\n    (uint8 petSeriesIDtoCreate, uint16 newPetPowerToCreate) =  getNewPetSeries(pet1.cardSeriesId, pet2.cardSeriesId);\r\n \r\n    uint16 newPetRed =  findAuras(pet1.auraRed, pet2.auraRed);\r\n    uint16 newPetYellow =  findAuras(pet1.auraYellow,pet2.auraYellow);\r\n    uint16 newPetBlue =  findAuras(pet1.auraBlue, pet2.auraBlue);\r\n\r\n    if (((pet1.cardSeriesId \u003E35) \u0026\u0026 (pet2.cardSeriesId \u003E35))  \u0026\u0026 ((getRandomNumber((pet1.auraRed \u002B pet2.auraRed),0,msg.sender) \u003E elementalThreshold) || (getRandomNumber((pet1.auraYellow \u002B pet2.auraYellow),0,msg.sender) \u003E elementalThreshold) || (getRandomNumber((pet1.auraRed \u002B pet2.auraRed),0,msg.sender) \u003E elementalThreshold))){\r\n       \r\n            BreedElemental (pet1.auraRed, pet2.auraRed, pet1.auraYellow, pet2.auraYellow, pet1.auraBlue, pet2.auraBlue);\r\n    }\r\n    \r\n    else {\r\n    //Set Results\r\n        ABTokenData.mintABToken(msg.sender,petSeriesIDtoCreate, newPetPowerToCreate, newPetRed, newPetYellow,newPetBlue,\u0022lucky\u0022,0, 0);\r\n        setNewPetLastBreedingTime();\r\n   \r\n        }\r\n    }\r\n   \r\n    function getNewPetSeries (uint8 pet1CardSeries, uint8 pet2CardSeries) private returns (uint8 newPetLineToCreate, uint16 newPetPowerToCreate) {\r\n      uint8 newPetLine = 0; \r\n        \r\n       \r\n        uint8 petRand = getRandomNumber(9,0,msg.sender); \r\n        uint8 petPowerRand = getRandomNumber(8,0,msg.sender) \u002B 1;\r\n        //Get the number of pet stars *4\r\n        pet1CardSeries = (((pet1CardSeries - 24) - ((pet1CardSeries - 24) % 4)) \u002B 1);\r\n        pet2CardSeries = (((pet2CardSeries - 24) - ((pet2CardSeries - 24) % 4)) \u002B 1);\r\n        uint8 newPetPower =20 \u002B petPowerRand;\r\n        if (pet1CardSeries \u002B pet2CardSeries \u002B petRand \u003E upgradeChance) {newPetPowerToCreate = 30 \u002B petPowerRand;}\r\n        if (pet1CardSeries \u002B pet2CardSeries \u002B petRand \u003E upgradeChance \u002B 8 ) {newPetPowerToCreate = 40 \u002B petPowerRand;}\r\n        \r\n    if (getRandomNumber(100, 0, msg.sender) \u003C 50) {\r\n        if ((pet1CardSeries-24) % 4 == 0)  {newPetLine = 1;} //Reptile Line \r\n        if ((pet1CardSeries-24) % 4 == 1)  {newPetLine = 2;} //Avian Line\r\n        if ((pet1CardSeries-24) % 4 == 2)  {newPetLine = 3;} //Feline Line\r\n        if ((pet1CardSeries-24) % 4 == 3)  {newPetLine = 4;} //Equine\r\n        \r\n    }\r\n    else {\r\n        if ((pet2CardSeries-24) % 4 == 0)  {newPetLine = 1;} //Reptile Line \r\n        if ((pet2CardSeries-24) % 4 == 1)  {newPetLine = 2;} //Avian Line\r\n        if ((pet2CardSeries-24) % 4 == 2)  {newPetLine = 3;} //Feline Line\r\n        if ((pet2CardSeries-24) % 4 == 3)  {newPetLine = 4;} //Equine\r\n    }\r\n\t\r\n\r\n      (newPetLineToCreate, newPetPowerToCreate) = findNewPetType(newPetPower, newPetLine);\r\n    \r\n}\r\n\r\n////////////////\r\n\r\n   function findNewPetType (uint16 _newPetPower, uint8 _newPetLine) private returns (uint8  newPetLine, uint16 newPetPower) {\r\n    newPetPower = _newPetPower;\r\n    newPetLine = _newPetLine;\r\n    \r\n    if (newPetPower \u003C 20) {return;}\r\n    // can\u2019t go back to domestic\r\n\tif (newPetPower \u003C 30) {newPetLine = (27 \u002B _newPetLine);}  //create wild easy\r\n\tif (newPetPower \u003C 40) {newPetLine = (31 \u002B _newPetLine);}  //create wild hard\r\n\tif (newPetPower \u003E= 40) {newPetLine = (35 \u002B _newPetLine);}  //create epic pet\r\n   }\r\n\r\n////////////////\r\n\r\n        \r\n    function findAuras (uint16 pet1Aura, uint16 pet2Aura) private returns (uint16) {\r\n        if ((pet1Aura \u002B pet2Aura) \u003E= 300) {\r\n       return (pet1Aura \u002B pet2Aura - getRandomNumber (bigAuraRand,bigAuraRand-100,msg.sender)) ;\r\n        }\r\n          if ((pet1Aura \u002B pet2Aura) \u003E= 100) {\r\n       return (pet1Aura \u002B pet2Aura- getRandomNumber (smallAuraRand,smallAuraRand-50,msg.sender)) ;\r\n        }\r\n        if ((pet1Aura \u002B pet2Aura) \u003E= 30) {\r\n       return (pet1Aura \u002B pet2Aura- getRandomNumber (30,10,msg.sender)) ;\r\n        }\r\n        else {return 15;}\r\n        \r\n    }\r\n\r\n\r\n////////////////\r\n\r\nfunction setNewPetLastBreedingTime () private {\r\n    IABToken ABTokenData = IABToken(ABTokenDataContract);\r\n    uint256 ownerTokens = ABTokenData.balanceOf(msg.sender);\r\n    uint256 newPetID = ABTokenData.getABTokenByIndex(msg.sender, uint64(ownerTokens-1));\r\n    ABTokenData.setLastBattleTime(newPetID);\r\n    \r\n   \r\n}\r\n\r\n    function withdrawEther() external onlyCREATOR {\r\n    creatorAddress.transfer(this.balance);\r\n}\r\n        \r\n      function kill() onlyCREATOR external {\r\n        selfdestruct(creatorAddress);\r\n    }\r\n}","ABI":"[{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_petCardDataContract\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_ABTokenDataContract\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022DataContacts\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022ABTokenDataContract\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022smallAuraRand\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint8\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022seraphims\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022kill\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022minRetireAura\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint16\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_isMaintaining\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022name\u0022:\u0022updateMaintenanceMode\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022pet1Id\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022pet2Id\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022Breed\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:true,\u0022stateMutability\u0022:\u0022payable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022breedingPrice\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint64\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022pet1\u0022,\u0022type\u0022:\u0022uint64\u0022},{\u0022name\u0022:\u0022pet2\u0022,\u0022type\u0022:\u0022uint64\u0022},{\u0022name\u0022:\u0022pet3\u0022,\u0022type\u0022:\u0022uint64\u0022},{\u0022name\u0022:\u0022pet4\u0022,\u0022type\u0022:\u0022uint64\u0022},{\u0022name\u0022:\u0022pet5\u0022,\u0022type\u0022:\u0022uint64\u0022},{\u0022name\u0022:\u0022pet6\u0022,\u0022type\u0022:\u0022uint64\u0022}],\u0022name\u0022:\u0022retireLegacyPets\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022petSeriesId\u0022,\u0022type\u0022:\u0022uint8\u0022}],\u0022name\u0022:\u0022getLevelFreePet\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022isMaintenanceMode\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_oldSeraphim\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022removeSERAPHIM\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022bigAuraRand\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint8\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022withdrawEther\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022maxRandom\u0022,\u0022type\u0022:\u0022uint16\u0022},{\u0022name\u0022:\u0022min\u0022,\u0022type\u0022:\u0022uint16\u0022},{\u0022name\u0022:\u0022privateAddress\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022getRandomNumber\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint8\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022petCardDataContract\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022upgradeChance\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint8\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022getParameters\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022_minRetireAura\u0022,\u0022type\u0022:\u0022uint16\u0022},{\u0022name\u0022:\u0022_maxRetireAura\u0022,\u0022type\u0022:\u0022uint16\u0022},{\u0022name\u0022:\u0022_breedingDelay\u0022,\u0022type\u0022:\u0022uint64\u0022},{\u0022name\u0022:\u0022_breedingPrice\u0022,\u0022type\u0022:\u0022uint64\u0022},{\u0022name\u0022:\u0022_upgradeChance\u0022,\u0022type\u0022:\u0022uint8\u0022},{\u0022name\u0022:\u0022_bigAuraRand\u0022,\u0022type\u0022:\u0022uint8\u0022},{\u0022name\u0022:\u0022_smallAuraRand\u0022,\u0022type\u0022:\u0022uint8\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022elementalThreshold\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint16\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022totalSeraphims\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint16\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022pet1\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022pet2\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022pet3\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022pet4\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022pet5\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022pet6\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022retirePets\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022breedingDelay\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint64\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_newSeraphim\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022addSERAPHIM\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022creatorAddress\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_minRetireAura\u0022,\u0022type\u0022:\u0022uint16\u0022},{\u0022name\u0022:\u0022_maxRetireAura\u0022,\u0022type\u0022:\u0022uint16\u0022},{\u0022name\u0022:\u0022_breedingDelay\u0022,\u0022type\u0022:\u0022uint64\u0022},{\u0022name\u0022:\u0022_breedingPrice\u0022,\u0022type\u0022:\u0022uint64\u0022},{\u0022name\u0022:\u0022_upgradeChance\u0022,\u0022type\u0022:\u0022uint8\u0022},{\u0022name\u0022:\u0022_bigAuraRand\u0022,\u0022type\u0022:\u0022uint8\u0022},{\u0022name\u0022:\u0022_smallAuraRand\u0022,\u0022type\u0022:\u0022uint8\u0022}],\u0022name\u0022:\u0022setParameters\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022maxRetireAura\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint16\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022}]","ContractName":"Pets","CompilerVersion":"v0.4.24\u002Bcommit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://3c9de6961c706408796ef35e440583f410587e4d82024ab4ec75c58774103f8a"}]