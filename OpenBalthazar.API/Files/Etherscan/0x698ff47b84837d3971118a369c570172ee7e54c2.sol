[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n/*\r\n * Origin Protocol\r\n * https://originprotocol.com\r\n *\r\n * Released under the MIT license\r\n * https://github.com/OriginProtocol\r\n *\r\n * Copyright 2019 Origin Protocol, Inc\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \u0022Software\u0022), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n * \r\n * THE SOFTWARE IS PROVIDED \u0022AS IS\u0022, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \u0022user permissions\u0022.\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original \u0060owner\u0060 of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the \u0060onlyOwner\u0060\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n\r\ncontract ERC20 {\r\n    function transfer(address _to, uint256 _value) external returns (bool);\r\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool);\r\n}\r\n\r\n\r\n/**\r\n * @title A Marketplace contract for managing listings, offers, payments, escrow and arbitration\r\n *\r\n * Listings may be priced in ETH or ERC20.\r\n */\r\ncontract V01_Marketplace is Ownable {\r\n\r\n    /**\r\n    * @notice All events have the same indexed signature offsets for easy filtering\r\n    */\r\n    event MarketplaceData  (address indexed party, bytes32 ipfsHash);\r\n    event AffiliateAdded   (address indexed party, bytes32 ipfsHash);\r\n    event AffiliateRemoved (address indexed party, bytes32 ipfsHash);\r\n    event ListingCreated   (address indexed party, uint indexed listingID, bytes32 ipfsHash);\r\n    event ListingUpdated   (address indexed party, uint indexed listingID, bytes32 ipfsHash);\r\n    event ListingWithdrawn (address indexed party, uint indexed listingID, bytes32 ipfsHash);\r\n    event ListingArbitrated(address indexed party, uint indexed listingID, bytes32 ipfsHash);\r\n    event ListingData      (address indexed party, uint indexed listingID, bytes32 ipfsHash);\r\n    event OfferCreated     (address indexed party, uint indexed listingID, uint indexed offerID, bytes32 ipfsHash);\r\n    event OfferAccepted    (address indexed party, uint indexed listingID, uint indexed offerID, bytes32 ipfsHash);\r\n    event OfferFinalized   (address indexed party, uint indexed listingID, uint indexed offerID, bytes32 ipfsHash);\r\n    event OfferWithdrawn   (address indexed party, uint indexed listingID, uint indexed offerID, bytes32 ipfsHash);\r\n    event OfferFundsAdded  (address indexed party, uint indexed listingID, uint indexed offerID, bytes32 ipfsHash);\r\n    event OfferDisputed    (address indexed party, uint indexed listingID, uint indexed offerID, bytes32 ipfsHash);\r\n    event OfferRuling      (address indexed party, uint indexed listingID, uint indexed offerID, bytes32 ipfsHash, uint ruling);\r\n    event OfferData        (address indexed party, uint indexed listingID, uint indexed offerID, bytes32 ipfsHash);\r\n\r\n    struct Listing {\r\n        address seller;     // Seller wallet / identity contract / other contract\r\n        uint deposit;       // Deposit in Origin Token\r\n        address depositManager; // Address that decides token distribution\r\n    }\r\n\r\n    struct Offer {\r\n        uint value;         // Amount in Eth or ERC20 buyer is offering\r\n        uint commission;    // Amount of commission earned if offer is finalized\r\n        uint refund;        // Amount to refund buyer upon finalization\r\n        ERC20 currency;     // Currency of listing\r\n        address buyer;      // Buyer wallet / identity contract / other contract\r\n        address affiliate;  // Address to send any commission\r\n        address arbitrator; // Address that settles disputes\r\n        uint finalizes;     // Timestamp offer finalizes\r\n        uint8 status;       // 0: Undefined, 1: Created, 2: Accepted, 3: Disputed\r\n    }\r\n\r\n    Listing[] public listings;\r\n    mapping(uint =\u003E Offer[]) public offers; // listingID =\u003E Offers\r\n    mapping(address =\u003E bool) public allowedAffiliates;\r\n\r\n    ERC20 public tokenAddr; // Origin Token address\r\n\r\n    constructor(address _tokenAddr) public {\r\n        owner = msg.sender;\r\n        setTokenAddr(_tokenAddr); // Origin Token contract\r\n        allowedAffiliates[0x0] = true; // Allow null affiliate by default\r\n    }\r\n\r\n    // @dev Return the total number of listings\r\n    function totalListings() public view returns (uint) {\r\n        return listings.length;\r\n    }\r\n\r\n    // @dev Return the total number of offers\r\n    function totalOffers(uint listingID) public view returns (uint) {\r\n        return offers[listingID].length;\r\n    }\r\n\r\n    // @dev Seller creates listing\r\n    function createListing(bytes32 _ipfsHash, uint _deposit, address _depositManager)\r\n        public\r\n    {\r\n        _createListing(msg.sender, _ipfsHash, _deposit, _depositManager);\r\n    }\r\n\r\n    // @dev Can only be called by token\r\n    function createListingWithSender(\r\n        address _seller,\r\n        bytes32 _ipfsHash,\r\n        uint _deposit,\r\n        address _depositManager\r\n    )\r\n        public returns (bool)\r\n    {\r\n        require(msg.sender == address(tokenAddr), \u0022Token must call\u0022);\r\n        _createListing(_seller, _ipfsHash, _deposit, _depositManager);\r\n        return true;\r\n    }\r\n\r\n    // Private\r\n    function _createListing(\r\n        address _seller,\r\n        bytes32 _ipfsHash,  // IPFS JSON with details, pricing, availability\r\n        uint _deposit,      // Deposit in Origin Token\r\n        address _depositManager // Address of listing depositManager\r\n    )\r\n        private\r\n    {\r\n        /* require(_deposit \u003E 0); // Listings must deposit some amount of Origin Token */\r\n        require(_depositManager != 0x0, \u0022Must specify depositManager\u0022);\r\n\r\n        listings.push(Listing({\r\n            seller: _seller,\r\n            deposit: _deposit,\r\n            depositManager: _depositManager\r\n        }));\r\n\r\n        if (_deposit \u003E 0) {\r\n            require(\r\n                tokenAddr.transferFrom(_seller, this, _deposit), // Transfer Origin Token\r\n                \u0022transferFrom failed\u0022\r\n            );\r\n        }\r\n        emit ListingCreated(_seller, listings.length - 1, _ipfsHash);\r\n    }\r\n\r\n    // @dev Seller updates listing\r\n    function updateListing(\r\n        uint listingID,\r\n        bytes32 _ipfsHash,\r\n        uint _additionalDeposit\r\n    ) public {\r\n        _updateListing(msg.sender, listingID, _ipfsHash, _additionalDeposit);\r\n    }\r\n\r\n    function updateListingWithSender(\r\n        address _seller,\r\n        uint listingID,\r\n        bytes32 _ipfsHash,\r\n        uint _additionalDeposit\r\n    )\r\n        public returns (bool)\r\n    {\r\n        require(msg.sender == address(tokenAddr), \u0022Token must call\u0022);\r\n        _updateListing(_seller, listingID, _ipfsHash, _additionalDeposit);\r\n        return true;\r\n    }\r\n\r\n    function _updateListing(\r\n        address _seller,\r\n        uint listingID,\r\n        bytes32 _ipfsHash,      // Updated IPFS hash\r\n        uint _additionalDeposit // Additional deposit to add\r\n    ) private {\r\n        Listing storage listing = listings[listingID];\r\n        require(listing.seller == _seller, \u0022Seller must call\u0022);\r\n\r\n        if (_additionalDeposit \u003E 0) {\r\n            listing.deposit \u002B= _additionalDeposit;\r\n            require(\r\n                tokenAddr.transferFrom(_seller, this, _additionalDeposit),\r\n                \u0022transferFrom failed\u0022\r\n            );\r\n        }\r\n\r\n        emit ListingUpdated(listing.seller, listingID, _ipfsHash);\r\n    }\r\n\r\n    // @dev Listing depositManager withdraws listing. IPFS hash contains reason for withdrawl.\r\n    function withdrawListing(uint listingID, address _target, bytes32 _ipfsHash) public {\r\n        Listing storage listing = listings[listingID];\r\n        require(msg.sender == listing.depositManager, \u0022Must be depositManager\u0022);\r\n        require(_target != 0x0, \u0022No target\u0022);\r\n        uint deposit = listing.deposit;\r\n        listing.deposit = 0; // Prevent multiple deposit withdrawals\r\n        require(tokenAddr.transfer(_target, deposit), \u0022transfer failed\u0022); // Send deposit to target\r\n        emit ListingWithdrawn(_target, listingID, _ipfsHash);\r\n    }\r\n\r\n    // @dev Buyer makes offer.\r\n    function makeOffer(\r\n        uint listingID,\r\n        bytes32 _ipfsHash,   // IPFS hash containing offer data\r\n        uint _finalizes,     // Timestamp an accepted offer will finalize\r\n        address _affiliate,  // Address to send any required commission to\r\n        uint256 _commission, // Amount of commission to send in Origin Token if offer finalizes\r\n        uint _value,         // Offer amount in ERC20 or Eth\r\n        ERC20 _currency,     // ERC20 token address or 0x0 for Eth\r\n        address _arbitrator  // Escrow arbitrator\r\n    )\r\n        public\r\n        payable\r\n    {\r\n        bool affiliateWhitelistDisabled = allowedAffiliates[address(this)];\r\n        require(\r\n            affiliateWhitelistDisabled || allowedAffiliates[_affiliate],\r\n            \u0022Affiliate not allowed\u0022\r\n        );\r\n\r\n        if (_affiliate == 0x0) {\r\n            // Avoid commission tokens being trapped in marketplace contract.\r\n            require(_commission == 0, \u0022commission requires affiliate\u0022);\r\n        }\r\n\r\n        offers[listingID].push(Offer({\r\n            status: 1,\r\n            buyer: msg.sender,\r\n            finalizes: _finalizes,\r\n            affiliate: _affiliate,\r\n            commission: _commission,\r\n            currency: _currency,\r\n            value: _value,\r\n            arbitrator: _arbitrator,\r\n            refund: 0\r\n        }));\r\n\r\n        if (address(_currency) == 0x0) { // Listing is in ETH\r\n            require(msg.value == _value, \u0022ETH value doesn\u0027t match offer\u0022);\r\n        } else { // Listing is in ERC20\r\n            require(msg.value == 0, \u0022ETH would be lost\u0022);\r\n            require(\r\n                _currency.transferFrom(msg.sender, this, _value),\r\n                \u0022transferFrom failed\u0022\r\n            );\r\n        }\r\n\r\n        emit OfferCreated(msg.sender, listingID, offers[listingID].length-1, _ipfsHash);\r\n    }\r\n\r\n    // @dev Seller accepts offer\r\n    function acceptOffer(uint listingID, uint offerID, bytes32 _ipfsHash) public {\r\n        Listing storage listing = listings[listingID];\r\n        Offer storage offer = offers[listingID][offerID];\r\n        require(msg.sender == listing.seller, \u0022Seller must accept\u0022);\r\n        require(offer.status == 1, \u0022status != created\u0022);\r\n        require(\r\n            listing.deposit \u003E= offer.commission,\r\n            \u0022deposit must cover commission\u0022\r\n        );\r\n        if (offer.finalizes \u003C 1000000000) { // Relative finalization window\r\n            offer.finalizes = now \u002B offer.finalizes;\r\n        }\r\n        listing.deposit -= offer.commission; // Accepting an offer puts Origin Token into escrow\r\n        offer.status = 2; // Set offer to \u0027Accepted\u0027\r\n        emit OfferAccepted(msg.sender, listingID, offerID, _ipfsHash);\r\n    }\r\n\r\n    // @dev Buyer withdraws offer. IPFS hash contains reason for withdrawl.\r\n    function withdrawOffer(uint listingID, uint offerID, bytes32 _ipfsHash) public {\r\n        Listing storage listing = listings[listingID];\r\n        Offer memory offer = offers[listingID][offerID];\r\n        require(\r\n            msg.sender == offer.buyer || msg.sender == listing.seller,\r\n            \u0022Restricted to buyer or seller\u0022\r\n        );\r\n        require(offer.status == 1, \u0022status != created\u0022);\r\n        delete offers[listingID][offerID];\r\n        refundBuyer(offer.buyer, offer.currency, offer.value);\r\n        emit OfferWithdrawn(msg.sender, listingID, offerID, _ipfsHash);\r\n    }\r\n\r\n    // @dev Buyer adds extra funds to an accepted offer.\r\n    function addFunds(uint listingID, uint offerID, bytes32 _ipfsHash, uint _value) public payable {\r\n        Offer storage offer = offers[listingID][offerID];\r\n        require(msg.sender == offer.buyer, \u0022Buyer must call\u0022);\r\n        require(offer.status == 2, \u0022status != accepted\u0022);\r\n        offer.value \u002B= _value;\r\n        if (address(offer.currency) == 0x0) { // Listing is in ETH\r\n            require(\r\n                msg.value == _value,\r\n                \u0022sent != offered value\u0022\r\n            );\r\n        } else { // Listing is in ERC20\r\n            require(msg.value == 0, \u0022ETH must not be sent\u0022);\r\n            require(\r\n                offer.currency.transferFrom(msg.sender, this, _value),\r\n                \u0022transferFrom failed\u0022\r\n            );\r\n        }\r\n        emit OfferFundsAdded(msg.sender, listingID, offerID, _ipfsHash);\r\n    }\r\n\r\n    // @dev Buyer must finalize transaction to receive commission\r\n    function finalize(uint listingID, uint offerID, bytes32 _ipfsHash) public {\r\n        Listing storage listing = listings[listingID];\r\n        Offer memory offer = offers[listingID][offerID];\r\n        if (now \u003C= offer.finalizes) { // Only buyer can finalize before finalization window\r\n            require(\r\n                msg.sender == offer.buyer,\r\n                \u0022Only buyer can finalize\u0022\r\n            );\r\n        } else { // Allow both seller and buyer to finalize if finalization window has passed\r\n            require(\r\n                msg.sender == offer.buyer || msg.sender == listing.seller,\r\n                \u0022Seller or buyer must finalize\u0022\r\n            );\r\n        }\r\n        require(offer.status == 2, \u0022status != accepted\u0022);\r\n        delete offers[listingID][offerID];\r\n\r\n        if (msg.sender != offer.buyer) {\r\n            listing.deposit \u002B= offer.commission; // Refund commission to seller\r\n        } else {\r\n            // Only pay commission if buyer is finalizing\r\n            payCommission(offer.affiliate, offer.commission);\r\n        }\r\n\r\n        paySeller(listing.seller, offer.buyer, offer.currency, offer.value, offer.refund); // Pay seller\r\n\r\n        emit OfferFinalized(msg.sender, listingID, offerID, _ipfsHash);\r\n    }\r\n\r\n    // @dev Buyer or seller can dispute transaction during finalization window\r\n    function dispute(uint listingID, uint offerID, bytes32 _ipfsHash) public {\r\n        Listing storage listing = listings[listingID];\r\n        Offer storage offer = offers[listingID][offerID];\r\n        require(\r\n            msg.sender == offer.buyer || msg.sender == listing.seller,\r\n            \u0022Must be seller or buyer\u0022\r\n        );\r\n        require(offer.status == 2, \u0022status != accepted\u0022);\r\n        require(now \u003C= offer.finalizes, \u0022Already finalized\u0022);\r\n        offer.status = 3; // Set status to \u0022Disputed\u0022\r\n        emit OfferDisputed(msg.sender, listingID, offerID, _ipfsHash);\r\n    }\r\n\r\n    // @dev Called by arbitrator\r\n    function executeRuling(\r\n        uint listingID,\r\n        uint offerID,\r\n        bytes32 _ipfsHash,\r\n        uint _ruling, // 0: Seller, 1: Buyer, 2: Com \u002B Seller, 3: Com \u002B Buyer\r\n        uint _refund\r\n    ) public {\r\n        Listing storage listing = listings[listingID];\r\n        Offer memory offer = offers[listingID][offerID];\r\n        require(msg.sender == offer.arbitrator, \u0022Must be arbitrator\u0022);\r\n        require(offer.status == 3, \u0022status != disputed\u0022);\r\n        require(_refund \u003C= offer.value, \u0022refund too high\u0022);\r\n        delete offers[listingID][offerID];\r\n        if (_ruling \u0026 2 == 2) {\r\n            payCommission(offer.affiliate, offer.commission);\r\n        } else  { // Refund commission to seller\r\n            listings[listingID].deposit \u002B= offer.commission;\r\n        }\r\n        if (_ruling \u0026 1 == 1) {\r\n            refundBuyer(offer.buyer, offer.currency, offer.value);\r\n        } else  {\r\n            paySeller(listing.seller, offer.buyer, offer.currency, offer.value, _refund); // Pay seller\r\n        }\r\n        emit OfferRuling(offer.arbitrator, listingID, offerID, _ipfsHash, _ruling);\r\n    }\r\n\r\n    // @dev Sets the amount that a seller wants to refund to a buyer.\r\n    function updateRefund(uint listingID, uint offerID, uint _refund, bytes32 _ipfsHash) public {\r\n        Offer storage offer = offers[listingID][offerID];\r\n        Listing storage listing = listings[listingID];\r\n        require(msg.sender == listing.seller, \u0022Seller must call\u0022);\r\n        require(offer.status == 2, \u0022status != accepted\u0022);\r\n        require(_refund \u003C= offer.value, \u0022Excessive refund\u0022);\r\n        offer.refund = _refund;\r\n        emit OfferData(msg.sender, listingID, offerID, _ipfsHash);\r\n    }\r\n\r\n    // @dev Refunds buyer in ETH or ERC20 - used by 1) executeRuling() and 2) to allow a seller to refund a purchase\r\n    function refundBuyer(address buyer, ERC20 currency, uint value) private {\r\n        if (address(currency) == 0x0) {\r\n            require(buyer.send(value), \u0022ETH refund failed\u0022);\r\n        } else {\r\n            require(\r\n                currency.transfer(buyer, value),\r\n                \u0022Refund failed\u0022\r\n            );\r\n        }\r\n    }\r\n\r\n    // @dev Pay seller in ETH or ERC20\r\n    function paySeller(address seller, address buyer, ERC20 currency, uint offerValue, uint offerRefund) private {\r\n        uint value = offerValue - offerRefund;\r\n\r\n        if (address(currency) == 0x0) {\r\n            require(buyer.send(offerRefund), \u0022ETH refund failed\u0022);\r\n            require(seller.send(value), \u0022ETH send failed\u0022);\r\n        } else {\r\n            require(\r\n                currency.transfer(buyer, offerRefund),\r\n                \u0022Refund failed\u0022\r\n            );\r\n            require(\r\n                currency.transfer(seller, value),\r\n                \u0022Transfer failed\u0022\r\n            );\r\n        }\r\n    }\r\n\r\n    // @dev Pay commission to affiliate\r\n    function payCommission(address affiliate, uint commission) private {\r\n        if (affiliate != 0x0) {\r\n            require(\r\n                tokenAddr.transfer(affiliate, commission),\r\n                \u0022Commission transfer failed\u0022\r\n            );\r\n        }\r\n    }\r\n\r\n    // @dev Associate ipfs data with the marketplace\r\n    function addData(bytes32 ipfsHash) public {\r\n        emit MarketplaceData(msg.sender, ipfsHash);\r\n    }\r\n\r\n    // @dev Associate ipfs data with a listing\r\n    function addData(uint listingID, bytes32 ipfsHash) public {\r\n        emit ListingData(msg.sender, listingID, ipfsHash);\r\n    }\r\n\r\n    // @dev Associate ipfs data with an offer\r\n    function addData(uint listingID, uint offerID, bytes32 ipfsHash) public {\r\n        emit OfferData(msg.sender, listingID, offerID, ipfsHash);\r\n    }\r\n\r\n    // @dev Allow listing depositManager to send deposit\r\n    function sendDeposit(uint listingID, address target, uint value, bytes32 ipfsHash) public {\r\n        Listing storage listing = listings[listingID];\r\n        require(listing.depositManager == msg.sender, \u0022depositManager must call\u0022);\r\n        require(listing.deposit \u003E= value, \u0022Value too high\u0022);\r\n        listing.deposit -= value;\r\n        require(tokenAddr.transfer(target, value), \u0022Transfer failed\u0022);\r\n        emit ListingArbitrated(target, listingID, ipfsHash);\r\n    }\r\n\r\n    // @dev Set the address of the Origin token contract\r\n    function setTokenAddr(address _tokenAddr) public onlyOwner {\r\n        tokenAddr = ERC20(_tokenAddr);\r\n    }\r\n\r\n    // @dev Add affiliate to whitelist. Set to address(this) to disable.\r\n    function addAffiliate(address _affiliate, bytes32 ipfsHash) public onlyOwner {\r\n        allowedAffiliates[_affiliate] = true;\r\n        emit AffiliateAdded(_affiliate, ipfsHash);\r\n    }\r\n\r\n    // @dev Remove affiliate from whitelist.\r\n    function removeAffiliate(address _affiliate, bytes32 ipfsHash) public onlyOwner {\r\n        delete allowedAffiliates[_affiliate];\r\n        emit AffiliateRemoved(_affiliate, ipfsHash);\r\n    }\r\n}","ABI":"[{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022listingID\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022offerID\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_refund\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_ipfsHash\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022updateRefund\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022ipfsHash\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022addData\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_tokenAddr\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022setTokenAddr\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022offers\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022commission\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022refund\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022currency\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022buyer\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022affiliate\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022arbitrator\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022finalizes\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022status\u0022,\u0022type\u0022:\u0022uint8\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022listingID\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_ipfsHash\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022name\u0022:\u0022_finalizes\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_affiliate\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_commission\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_value\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_currency\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_arbitrator\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022makeOffer\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:true,\u0022stateMutability\u0022:\u0022payable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022listingID\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022target\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022ipfsHash\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022sendDeposit\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022tokenAddr\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022listingID\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022offerID\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_ipfsHash\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022dispute\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022renounceOwnership\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_affiliate\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022ipfsHash\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022addAffiliate\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022listingID\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022offerID\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_ipfsHash\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022name\u0022:\u0022_value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022addFunds\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:true,\u0022stateMutability\u0022:\u0022payable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022owner\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022listingID\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022totalOffers\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022allowedAffiliates\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022listingID\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022ipfsHash\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022addData\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022listingID\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022offerID\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_ipfsHash\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022acceptOffer\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_affiliate\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022ipfsHash\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022removeAffiliate\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022listingID\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_target\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_ipfsHash\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022withdrawListing\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022listingID\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_ipfsHash\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022name\u0022:\u0022_additionalDeposit\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022updateListing\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022listingID\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022offerID\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_ipfsHash\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022name\u0022:\u0022_ruling\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_refund\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022executeRuling\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022totalListings\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_ipfsHash\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022name\u0022:\u0022_deposit\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_depositManager\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022createListing\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_seller\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022listingID\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_ipfsHash\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022name\u0022:\u0022_additionalDeposit\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022updateListingWithSender\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022listingID\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022offerID\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022ipfsHash\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022addData\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_seller\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_ipfsHash\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022name\u0022:\u0022_deposit\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_depositManager\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022createListingWithSender\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022listings\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022seller\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022deposit\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022depositManager\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022listingID\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022offerID\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_ipfsHash\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022withdrawOffer\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022transferOwnership\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022listingID\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022offerID\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_ipfsHash\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022finalize\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[{\u0022name\u0022:\u0022_tokenAddr\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022constructor\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022party\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022ipfsHash\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022MarketplaceData\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022party\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022ipfsHash\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022AffiliateAdded\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022party\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022ipfsHash\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022AffiliateRemoved\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022party\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022listingID\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022ipfsHash\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022ListingCreated\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022party\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022listingID\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022ipfsHash\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022ListingUpdated\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022party\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022listingID\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022ipfsHash\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022ListingWithdrawn\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022party\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022listingID\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022ipfsHash\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022ListingArbitrated\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022party\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022listingID\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022ipfsHash\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022ListingData\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022party\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022listingID\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022offerID\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022ipfsHash\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022OfferCreated\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022party\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022listingID\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022offerID\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022ipfsHash\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022OfferAccepted\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022party\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022listingID\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022offerID\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022ipfsHash\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022OfferFinalized\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022party\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022listingID\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022offerID\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022ipfsHash\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022OfferWithdrawn\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022party\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022listingID\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022offerID\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022ipfsHash\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022OfferFundsAdded\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022party\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022listingID\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022offerID\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022ipfsHash\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022OfferDisputed\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022party\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022listingID\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022offerID\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022ipfsHash\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022ruling\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022OfferRuling\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022party\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022listingID\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022offerID\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022ipfsHash\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022OfferData\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022previousOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022OwnershipRenounced\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022previousOwner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022OwnershipTransferred\u0022,\u0022type\u0022:\u0022event\u0022}]","ContractName":"V01_Marketplace","CompilerVersion":"v0.4.24\u002Bcommit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000a115e16ef6e217f7a327a57031f75ce0487aadb8","Library":"","SwarmSource":"bzzr://7a46bb4eab2446f6310429368a6aca7cd68db18cb7c8888777f1ec503f43101f"}]