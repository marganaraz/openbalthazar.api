[{"SourceCode":"// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * \u0060onlyOwner\u0060, which can be aplied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \u0022Ownable: caller is not the owner\u0022);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * \u0060onlyOwner\u0060 functions anymore. Can only be called by the current owner.\r\n     *\r\n     * \u003E Note: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (\u0060newOwner\u0060).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (\u0060newOwner\u0060).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \u0022Ownable: new owner is the zero address\u0022);\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/access/Roles.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address =\u003E bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev Give an account access to this role.\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(!has(role, account), \u0022Roles: account already has role\u0022);\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Remove an account\u0027s access to this role.\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(has(role, account), \u0022Roles: account does not have role\u0022);\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Check if an account has this role.\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0), \u0022Roles: account is the zero address\u0022);\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\n// File: contracts/roles/DelegateRole.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @title DelegateRole\r\n * @dev Delegate is accounts allowed to do certain operations on\r\n * contract, apart from owner.\r\n */\r\ncontract DelegateRole {\r\n    using Roles for Roles.Role;\r\n\r\n    event DelegateAdded(address indexed account);\r\n    event DelegateRemoved(address indexed account);\r\n\r\n    Roles.Role private _delegates;\r\n\r\n    function _addDelegate(address account) internal {\r\n        _delegates.add(account);\r\n        emit DelegateAdded(account);\r\n    }\r\n\r\n    function _removeDelegate(address account) internal {\r\n        _delegates.remove(account);\r\n        emit DelegateRemoved(account);\r\n    }\r\n\r\n    function _hasDelegate(address account) internal view returns (bool) {\r\n        return _delegates.has(account);\r\n    }\r\n}\r\n\r\n// File: contracts/roles/AuthorityRole.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title AuthorityRole\r\n * @dev Authority is roles responsible for signing/approving token transfers\r\n * on-chain \u0026 off-chain\r\n */\r\ncontract AuthorityRole {\r\n    using Roles for Roles.Role;\r\n\r\n    event AuthorityAdded(address indexed account);\r\n    event AuthorityRemoved(address indexed account);\r\n\r\n    Roles.Role private _authorities;\r\n\r\n    function _addAuthority(address account) internal {\r\n        _authorities.add(account);\r\n        emit AuthorityAdded(account);\r\n    }\r\n\r\n    function _removeAuthority(address account) internal {\r\n        _authorities.remove(account);\r\n        emit AuthorityRemoved(account);\r\n    }\r\n\r\n    function _hasAuthority(address account) internal view returns (bool) {\r\n        return _authorities.has(account);\r\n    }\r\n}\r\n\r\n// File: contracts/roles/Managed.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Manager is responsible for minting and burning tokens in\r\n * response to SWM token staking changes.\r\n */\r\ncontract Managed {\r\n    address internal _manager;\r\n\r\n    event ManagementTransferred(address indexed previousManager, address indexed newManager);\r\n\r\n    /**\r\n     * @dev The Managed constructor sets the original \u0060manager\u0060 of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor (address manager) internal {\r\n        _manager = manager;\r\n        emit ManagementTransferred(address(0), _manager);\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyManager() {\r\n        require(_isManager(msg.sender), \u0022Caller not manager\u0022);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return true if \u0060msg.sender\u0060 is the owner of the contract.\r\n     */\r\n    function _isManager(address account) internal view returns (bool) {\r\n        return account == _manager;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current manager to relinquish control of the contract.\r\n     * It will not be possible to call the functions with the \u0060onlyManager\u0060\r\n     * modifier anymore.\r\n     * @notice Renouncing management will leave the contract without an manager,\r\n     * thereby removing any functionality that is only available to the manager.\r\n     */\r\n    function _renounceManagement() internal returns (bool) {\r\n        emit ManagementTransferred(_manager, address(0));\r\n        _manager = address(0);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current manager to transfer control of the contract to a newManager.\r\n     * @param newManager The address to transfer management to.\r\n     */\r\n    function _transferManagement(address newManager) internal returns (bool) {\r\n        require(newManager != address(0));\r\n\r\n        emit ManagementTransferred(_manager, newManager);\r\n        _manager = newManager;\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/ISRC20Roles.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module which allows children to implement access managements\r\n * with multiple roles.\r\n *\r\n * \u0060Authority\u0060 the one how is authorized by token owner/issuer to authorize transfers\r\n * either on-chain or off-chain.\r\n *\r\n * \u0060Delegate\u0060 the person who person responsible for updating KYA document\r\n *\r\n * \u0060Manager\u0060 the person who is responsible for minting and burning the tokens. It should be\r\n * be registry contract where staking-\u003Eminting is executed.\r\n */\r\ncontract ISRC20Roles {\r\n    function isAuthority(address account) external view returns (bool);\r\n    function removeAuthority(address account) external returns (bool);\r\n    function addAuthority(address account) external returns (bool);\r\n\r\n    function isDelegate(address account) external view returns (bool);\r\n    function addDelegate(address account) external returns (bool);\r\n    function removeDelegate(address account) external returns (bool);\r\n\r\n    function manager() external view returns (address);\r\n    function isManager(address account) external view returns (bool);\r\n    function transferManagement(address newManager) external returns (bool);\r\n    function renounceManagement() external returns (bool);\r\n}\r\n\r\n// File: contracts/roles/SRC20Roles.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*\r\n * @title SRC20Roles contract\r\n * @dev Roles wrapper contract around all roles needed for SRC20 contract.\r\n */\r\ncontract SRC20Roles is ISRC20Roles, DelegateRole, AuthorityRole, Managed, Ownable {\r\n    constructor(address owner, address manager, address rules) public\r\n        Managed(manager)\r\n    {\r\n        _transferOwnership(owner);\r\n        if (rules != address(0)) {\r\n            _addAuthority(rules);\r\n        }\r\n    }\r\n\r\n    function addAuthority(address account) external onlyOwner returns (bool) {\r\n        _addAuthority(account);\r\n        return true;\r\n    }\r\n\r\n    function removeAuthority(address account) external onlyOwner returns (bool) {\r\n        _removeAuthority(account);\r\n        return true;\r\n    }\r\n\r\n    function isAuthority(address account) external view returns (bool) {\r\n        return _hasAuthority(account);\r\n    }\r\n\r\n    function addDelegate(address account) external onlyOwner returns (bool) {\r\n        _addDelegate(account);\r\n        return true;\r\n    }\r\n\r\n    function removeDelegate(address account) external onlyOwner returns (bool) {\r\n        _removeDelegate(account);\r\n        return true;\r\n    }\r\n\r\n    function isDelegate(address account) external view returns (bool) {\r\n        return _hasDelegate(account);\r\n    }\r\n\r\n    /**\r\n    * @return the address of the manager.\r\n    */\r\n    function manager() external view returns (address) {\r\n        return _manager;\r\n    }\r\n\r\n    function isManager(address account) external view returns (bool) {\r\n        return _isManager(account);\r\n    }\r\n\r\n    function renounceManagement() external onlyManager returns (bool) {\r\n        _renounceManagement();\r\n        return true;\r\n    }\r\n\r\n    function transferManagement(address newManager) external onlyManager returns (bool) {\r\n        _transferManagement(newManager);\r\n        return true;\r\n    }\r\n}","ABI":"[{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022isDelegate\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022renounceManagement\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022isAuthority\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022addAuthority\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022manager\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022removeDelegate\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022renounceOwnership\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022owner\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022isOwner\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022removeAuthority\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022newManager\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022transferManagement\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022addDelegate\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022transferOwnership\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022isManager\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[{\u0022name\u0022:\u0022owner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022manager\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022rules\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022constructor\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022previousOwner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022OwnershipTransferred\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022previousManager\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022newManager\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022ManagementTransferred\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022AuthorityAdded\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022AuthorityRemoved\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022DelegateAdded\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022DelegateRemoved\u0022,\u0022type\u0022:\u0022event\u0022}]","ContractName":"SRC20Roles","CompilerVersion":"v0.5.10\u002Bcommit.5a6ea5b1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000003ec1440b81c55cb7646491a7187710512a7f4b19000000000000000000000000a79958571d55749898292f09366ce2b7c2f89b7400000000000000000000000084a260de7e8b75facd51ee77067ca5f0eb3f49b5","Library":"","SwarmSource":"bzzr://126bbe5f54cb6de814762602354eed93d37bbfb8c3bc2d26ddc5e5d2782bcc5e"}]