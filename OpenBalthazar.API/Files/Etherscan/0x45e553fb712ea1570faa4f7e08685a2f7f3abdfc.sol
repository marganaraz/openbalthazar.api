[{"SourceCode":"{\u0022AdminRole.sol\u0022:{\u0022content\u0022:\u0022pragma solidity 0.5.12;\\n\\nimport \\u0027./Roles.sol\\u0027;\\nimport \\u0027./Pausable.sol\\u0027;\\n\\ncontract AdminRole is Pausable {\\n  using Roles for Roles.Role;\\n\\n  event AdminAdded(address indexed account);\\n  event AdminRemoved(address indexed account);\\n\\n  Roles.Role private _admins;\\n\\n  modifier onlyAdmin() {\\n    require(\\n      isAdmin(_msgSender()),\\n      \\u0027AdminRole: caller does not have the Admin role\\u0027\\n    );\\n    _;\\n  }\\n\\n  function isAdmin(address account) public view returns (bool) {\\n    return _admins.has(account);\\n  }\\n\\n  // adding an admin should be possible any time\\n  function addAdmin(address account) external onlyOwner {\\n    _addAdmin(account);\\n  }\\n\\n  // removing an admin should be possible any time\\n  function removeAdmin(address account) external onlyOwner {\\n    _removeAdmin(account);\\n  }\\n\\n  // renouncing admin role should be possible any time\\n  function renounceAdmin() external {\\n    _removeAdmin(_msgSender());\\n  }\\n\\n  function _addAdmin(address account) internal {\\n    _admins.add(account);\\n    emit AdminAdded(account);\\n  }\\n\\n  function _removeAdmin(address account) internal {\\n    _admins.remove(account);\\n    emit AdminRemoved(account);\\n  }\\n\\n  uint256[50] private adminRoleGap;\\n}\\n\u0022},\u0022Context.sol\u0022:{\u0022content\u0022:\u0022pragma solidity 0.5.12;\\n\\nimport \\u0027./Initializable.sol\\u0027;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\ncontract Context is Initializable {\\n  // Empty internal constructor, to prevent people from mistakenly deploying\\n  // an instance of this contract, which should be used via inheritance.\\n  constructor() internal {} // solhint-disable-line\\n\\n  function _msgSender() internal view returns (address payable) {\\n    return msg.sender;\\n  }\\n\\n  function _msgData() internal view returns (bytes memory) {\\n    this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n    return msg.data;\\n  }\\n}\\n\u0022},\u0022ERC20.sol\u0022:{\u0022content\u0022:\u0022pragma solidity 0.5.12;\\n\\nimport \\\u0022./Context.sol\\\u0022;\\nimport \\\u0022./SafeMath.sol\\\u0022;\\nimport \\\u0022./IERC20.sol\\\u0022;\\n\\n/**\\n * @dev Implementation of the \u0060IERC20\u0060 interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using \u0060_mint\u0060.\\n * For a generic mechanism see \u0060ERC20Mintable\u0060.\\n *\\n * *For a detailed writeup see our guide [How to implement supply\\n * mechanisms](https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226).*\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning \u0060false\u0060 on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an \u0060Approval\u0060 event is emitted on calls to \u0060transferFrom\u0060.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn\\u0027t required by the specification.\\n *\\n * Finally, the non-standard \u0060decreaseAllowance\u0060 and \u0060increaseAllowance\u0060\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See \u0060IERC20.approve\u0060.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping(address =\\u003e uint256) private _balances;\\n\\n    mapping(address =\\u003e mapping(address =\\u003e uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    /**\\n     * @dev See \u0060IERC20.totalSupply\u0060.\\n     */\\n    function totalSupply() external view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See \u0060IERC20.balanceOf\u0060.\\n     */\\n    function balanceOf(address account) external view returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See \u0060IERC20.transfer\u0060.\\n     *\\n     * Requirements:\\n     *\\n     * - \u0060recipient\u0060 cannot be the zero address.\\n     * - the caller must have a balance of at least \u0060amount\u0060.\\n     */\\n    function transfer(address to, uint256 value) public returns (bool) {\\n        _transfer(_msgSender(), to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See \u0060IERC20.allowance\u0060.\\n     */\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See \u0060IERC20.approve\u0060.\\n     *\\n     * Requirements:\\n     *\\n     * - \u0060spender\u0060 cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public returns (bool) {\\n        _approve(_msgSender(), spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See \u0060IERC20.transferFrom\u0060.\\n     *\\n     * Emits an \u0060Approval\u0060 event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of \u0060ERC20\u0060;\\n     *\\n     * Requirements:\\n     * - \u0060sender\u0060 and \u0060recipient\u0060 cannot be the zero address.\\n     * - \u0060sender\u0060 must have a balance of at least \u0060value\u0060.\\n     * - the caller must have allowance for \u0060sender\u0060\\u0027s tokens of at least\\n     * \u0060amount\u0060.\\n     */\\n    function transferFrom(address from, address to, uint256 value)\\n        public\\n        returns (bool)\\n    {\\n        _transfer(from, to, value);\\n        _approve(\\n            from,\\n            _msgSender(),\\n            _allowances[from][_msgSender()].sub(value)\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to \u0060spender\u0060 by the caller.\\n     *\\n     * This is an alternative to \u0060approve\u0060 that can be used as a mitigation for\\n     * problems described in \u0060IERC20.approve\u0060.\\n     *\\n     * Emits an \u0060Approval\u0060 event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - \u0060spender\u0060 cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue)\\n        public\\n        returns (bool)\\n    {\\n        _approve(\\n            _msgSender(),\\n            spender,\\n            _allowances[_msgSender()][spender].add(addedValue)\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to \u0060spender\u0060 by the caller.\\n     *\\n     * This is an alternative to \u0060approve\u0060 that can be used as a mitigation for\\n     * problems described in \u0060IERC20.approve\u0060.\\n     *\\n     * Emits an \u0060Approval\u0060 event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - \u0060spender\u0060 cannot be the zero address.\\n     * - \u0060spender\u0060 must have allowance for the caller of at least\\n     * \u0060subtractedValue\u0060.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue)\\n        public\\n        returns (bool)\\n    {\\n        _approve(\\n            _msgSender(),\\n            spender,\\n            _allowances[_msgSender()][spender].sub(subtractedValue)\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens \u0060amount\u0060 from \u0060sender\u0060 to \u0060recipient\u0060.\\n     *\\n     * This is internal function is equivalent to \u0060transfer\u0060, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a \u0060Transfer\u0060 event.\\n     *\\n     * Requirements:\\n     *\\n     * - \u0060sender\u0060 cannot be the zero address.\\n     * - \u0060recipient\u0060 cannot be the zero address.\\n     * - \u0060sender\u0060 must have a balance of at least \u0060amount\u0060.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount)\\n        internal\\n    {\\n        require(sender != address(0), \\\u0022ERC20: transfer from the zero address\\\u0022);\\n        require(recipient != address(0), \\\u0022ERC20: transfer to the zero address\\\u0022);\\n\\n        _balances[sender] = _balances[sender].sub(amount);\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates \u0060amount\u0060 tokens and assigns them to \u0060account\u0060, increasing\\n     * the total supply.\\n     *\\n     * Emits a \u0060Transfer\u0060 event with \u0060from\u0060 set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - \u0060to\u0060 cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal {\\n        require(account != address(0), \\\u0022ERC20: mint to the zero address\\\u0022);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destoys \u0060amount\u0060 tokens from \u0060account\u0060, reducing the\\n     * total supply.\\n     *\\n     * Emits a \u0060Transfer\u0060 event with \u0060to\u0060 set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - \u0060account\u0060 cannot be the zero address.\\n     * - \u0060account\u0060 must have at least \u0060amount\u0060 tokens.\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        require(account != address(0), \\\u0022ERC20: burn from the zero address\\\u0022);\\n\\n        _totalSupply = _totalSupply.sub(value);\\n        _balances[account] = _balances[account].sub(value);\\n        emit Transfer(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets \u0060amount\u0060 as the allowance of \u0060spender\u0060 over the \u0060owner\u0060s tokens.\\n     *\\n     * This is internal function is equivalent to \u0060approve\u0060, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an \u0060Approval\u0060 event.\\n     *\\n     * Requirements:\\n     *\\n     * - \u0060owner\u0060 cannot be the zero address.\\n     * - \u0060spender\u0060 cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        require(owner != address(0), \\\u0022ERC20: approve from the zero address\\\u0022);\\n        require(spender != address(0), \\\u0022ERC20: approve to the zero address\\\u0022);\\n\\n        _allowances[owner][spender] = value;\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    uint256[50] private erc20Gap;\\n}\\n\u0022},\u0022ERC20Detailed.sol\u0022:{\u0022content\u0022:\u0022pragma solidity 0.5.12;\\n\\nimport \\\u0022./ERC20.sol\\\u0022;\\n\\n/**\\n * @dev Optional functions from the ERC20 standard.\\n */\\ncontract ERC20Detailed is ERC20 {\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for \u0060name\u0060, \u0060symbol\u0060, and \u0060decimals\u0060. All three of\\n     * these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function initialize(\\n        string memory name,\\n        string memory symbol,\\n        uint8 decimals\\n    ) public initializer {\\n        _name = name;\\n        _symbol = symbol;\\n        _decimals = decimals;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() external view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if \u0060decimals\u0060 equals \u00602\u0060, a balance of \u0060505\u0060 tokens should\\n     * be displayed to a user as \u00605,05\u0060 (\u0060505 / 10 ** 2\u0060).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei.\\n     *\\n     * \\u003e Note that this information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * \u0060IERC20.balanceOf\u0060 and \u0060IERC20.transfer\u0060.\\n     */\\n    function decimals() external view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    uint256[50] private erc20DetailedGap;\\n}\\n\u0022},\u0022ERC20Pausable.sol\u0022:{\u0022content\u0022:\u0022pragma solidity 0.5.12;\\n\\nimport \\\u0022./StateManager.sol\\\u0022;\\n\\n/**\\n * @title Pausable token\\n * @dev ERC20 modified with pausable transfers.\\n */\\ncontract ERC20Pausable is StateManager {\\n    function transfer(address to, uint256 value)\\n        public\\n        whenNotPaused\\n        notBlacklisted\\n        notBlocked\\n        returns (bool)\\n    {\\n        require(!isBlacklisted(to), \\\u0022Cannot send to Blacklisted Address\\\u0022);\\n        require(!isBlocked(to), \\\u0022Cannot send to blocked Address\\\u0022);\\n        return super.transfer(to, value);\\n    }\\n\\n    function transferFrom(address from, address to, uint256 value)\\n        public\\n        whenNotPaused\\n        notBlacklisted\\n        notBlocked\\n        returns (bool)\\n    {\\n        require(!isBlacklisted(to), \\\u0022Cannot send to Blacklisted Address\\\u0022);\\n        require(!isBlocked(to), \\\u0022Cannot send to blocked Address\\\u0022);\\n        require(!isBlacklisted(from), \\\u0022Cannot send from Blacklisted Address\\\u0022);\\n        require(!isBlocked(from), \\\u0022Cannot send from blocked Address\\\u0022);\\n        return super.transferFrom(from, to, value);\\n    }\\n\\n    function approve(address spender, uint256 value)\\n        public\\n        whenNotPaused\\n        notBlacklisted\\n        notBlocked\\n        returns (bool)\\n    {\\n        require(!isBlacklisted(spender), \\\u0022Cannot send to Blacklisted Address\\\u0022);\\n        require(!isBlocked(spender), \\\u0022Cannot send to blocked Address\\\u0022);\\n        return super.approve(spender, value);\\n    }\\n\\n    function increaseAllowance(address spender, uint256 addedValue)\\n        public\\n        whenNotPaused\\n        notBlacklisted\\n        notBlocked\\n        returns (bool)\\n    {\\n        require(!isBlacklisted(spender), \\\u0022Cannot send to Blacklisted Address\\\u0022);\\n        require(!isBlocked(spender), \\\u0022Cannot send to blocked Address\\\u0022);\\n        return super.increaseAllowance(spender, addedValue);\\n    }\\n\\n    function decreaseAllowance(address spender, uint256 subtractedValue)\\n        public\\n        whenNotPaused\\n        notBlacklisted\\n        notBlocked\\n        returns (bool)\\n    {\\n        require(!isBlacklisted(spender), \\\u0022Cannot send to Blacklisted Address\\\u0022);\\n        require(!isBlocked(spender), \\\u0022Cannot send to blocked Address\\\u0022);\\n        return super.decreaseAllowance(spender, subtractedValue);\\n    }\\n\\n    uint256[50] private erc20PausableGap;\\n}\\n\u0022},\u0022IERC20.sol\u0022:{\u0022content\u0022:\u0022pragma solidity 0.5.12;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\\n * the optional functions; to access them see \u0060ERC20Detailed\u0060.\\n */\\ninterface IERC20 {\\n  /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n     * @dev Returns the amount of tokens owned by \u0060account\u0060.\\n     */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n     * @dev Moves \u0060amount\u0060 tokens from the caller\\u0027s account to \u0060recipient\u0060.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a \u0060Transfer\u0060 event.\\n     */\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n     * @dev Returns the remaining number of tokens that \u0060spender\u0060 will be\\n     * allowed to spend on behalf of \u0060owner\u0060 through \u0060transferFrom\u0060. This is\\n     * zero by default.\\n     *\\n     * This value changes when \u0060approve\u0060 or \u0060transferFrom\u0060 are called.\\n     */\\n  function allowance(address owner, address spender)\\n    external\\n    view\\n    returns (uint256);\\n\\n  /**\\n     * @dev Sets \u0060amount\u0060 as the allowance of \u0060spender\u0060 over the caller\\u0027s tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * \\u003e Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an \u0060Approval\u0060 event.\\n     */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n     * @dev Moves \u0060amount\u0060 tokens from \u0060sender\u0060 to \u0060recipient\u0060 using the\\n     * allowance mechanism. \u0060amount\u0060 is then deducted from the caller\\u0027s\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a \u0060Transfer\u0060 event.\\n     */\\n  function transferFrom(address sender, address recipient, uint256 amount)\\n    external\\n    returns (bool);\\n\\n  /**\\n     * @dev Emitted when \u0060value\u0060 tokens are moved from one account (\u0060from\u0060) to\\n     * another (\u0060to\u0060).\\n     *\\n     * Note that \u0060value\u0060 may be zero.\\n     */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n     * @dev Emitted when the allowance of a \u0060spender\u0060 for an \u0060owner\u0060 is set by\\n     * a call to \u0060approve\u0060. \u0060value\u0060 is the new allowance.\\n     */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\u0022},\u0022Initializable.sol\u0022:{\u0022content\u0022:\u0022pragma solidity 0.5.12;\\n\\n/**\\n * @title Initializable\\n *\\n * @dev Helper contract to support initializer functions. To use it, replace\\n * the constructor with a function that has the \u0060initializer\u0060 modifier.\\n * WARNING: Unlike constructors, initializer functions must be manually\\n * invoked. This applies both to deploying an Initializable contract, as well\\n * as extending an Initializable contract via inheritance.\\n * WARNING: When used with inheritance, manual care must be taken to not invoke\\n * a parent initializer twice, or ensure that all initializers are idempotent,\\n * because this is not dealt with automatically as with constructors.\\n */\\ncontract Initializable {\\n  /**\\n   * @dev Indicates that the contract has been initialized.\\n   */\\n  bool private initialized;\\n\\n  /**\\n   * @dev Indicates that the contract is in the process of being initialized.\\n   */\\n  bool private initializing;\\n\\n  /**\\n   * @dev Modifier to use in the initializer function of a contract.\\n   */\\n  modifier initializer() {\\n    require(\\n      initializing || isConstructor() || !initialized,\\n      \\u0027Contract instance has already been initialized\\u0027\\n    );\\n\\n    bool isTopLevelCall = !initializing;\\n    if (isTopLevelCall) {\\n      initializing = true;\\n      initialized = true;\\n    }\\n\\n    _;\\n\\n    if (isTopLevelCall) {\\n      initializing = false;\\n    }\\n  }\\n\\n  /// @dev Returns true if and only if the function is running in the constructor\\n  function isConstructor() private view returns (bool) {\\n    // extcodesize checks the size of the code stored in an address, and\\n    // address returns the current address. Since the code is still not\\n    // deployed when running a constructor, any checks on its code size will\\n    // yield zero, making it an effective way to detect if a contract is\\n    // under construction or not.\\n    uint256 cs;\\n    assembly {\\n      cs := extcodesize(address)\\n    } // solhint-disable-line\\n    return cs == 0;\\n  }\\n\\n  // Reserved storage space to allow for layout changes in the future.\\n  uint256[50] private initializableGap;\\n}\\n\u0022},\u0022Ownable.sol\u0022:{\u0022content\u0022:\u0022pragma solidity 0.5.12;\\n\\nimport \\u0027./ERC20Detailed.sol\\u0027;\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * \u0060onlyOwner\u0060, which can be aplied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is ERC20Detailed {\\n  address private _owner;\\n\\n  event OwnershipTransferred(\\n    address indexed previousOwner,\\n    address indexed newOwner\\n  );\\n\\n  /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n  function initialize(address sender) public initializer {\\n    _owner = sender;\\n    emit OwnershipTransferred(address(0), _owner);\\n  }\\n\\n  /**\\n     * @dev Returns the address of the current owner.\\n     */\\n  function owner() external view returns (address) {\\n    return _owner;\\n  }\\n\\n  /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n  modifier onlyOwner() {\\n    require(isOwner(), \\u0027Ownable: caller is not the owner\\u0027);\\n    _;\\n  }\\n\\n  /**\\n     * @dev Returns true if the caller is the current owner.\\n     */\\n  function isOwner() public view returns (bool) {\\n    return _msgSender() == _owner;\\n  }\\n\\n  /**\\n     * @dev Transfers ownership of the contract to a new account (\u0060newOwner\u0060).\\n     * Can only be called by the current owner.\\n     */\\n  function transferOwnership(address newOwner) external onlyOwner {\\n    _transferOwnership(newOwner);\\n  }\\n\\n  /**\\n     * @dev Transfers ownership of the contract to a new account (\u0060newOwner\u0060).\\n     */\\n  function _transferOwnership(address newOwner) internal {\\n    require(newOwner != address(0), \\u0027Ownable: new owner is the zero address\\u0027);\\n    emit OwnershipTransferred(_owner, newOwner);\\n    _owner = newOwner;\\n  }\\n\\n  uint256[50] private ownableGap;\\n}\\n\u0022},\u0022Pausable.sol\u0022:{\u0022content\u0022:\u0022pragma solidity 0.5.12;\\n\\nimport \\u0027./Ownable.sol\\u0027;\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers \u0060whenNotPaused\u0060 and \u0060whenPaused\u0060, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\ncontract Pausable is Ownable {\\n  /**\\n     * @dev Emitted when the pause is triggered by a pauser (\u0060account\u0060).\\n     */\\n  event Paused(address account);\\n\\n  /**\\n     * @dev Emitted when the pause is lifted by a pauser (\u0060account\u0060).\\n     */\\n  event Unpaused(address account);\\n\\n  bool private _paused;\\n\\n  /**\\n     * @dev Initializes the contract in unpaused state. Assigns the Pauser role\\n     * to the deployer.\\n     */\\n  function initialize() public initializer {\\n    _paused = false;\\n  }\\n\\n  /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n  function paused() external view returns (bool) {\\n    return _paused;\\n  }\\n\\n  /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     */\\n  modifier whenNotPaused() {\\n    require(!_paused, \\u0027Pausable: paused\\u0027);\\n    _;\\n  }\\n\\n  /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     */\\n  modifier whenPaused() {\\n    require(_paused, \\u0027Pausable: not paused\\u0027);\\n    _;\\n  }\\n\\n  /**\\n     * @dev Called by a pauser to pause, triggers stopped state.\\n     */\\n  function pause() external onlyOwner whenNotPaused {\\n    _paused = true;\\n    emit Paused(_msgSender());\\n  }\\n\\n  /**\\n     * @dev Called by a pauser to unpause, returns to normal state.\\n     */\\n  function unpause() external onlyOwner whenPaused {\\n    _paused = false;\\n    emit Unpaused(_msgSender());\\n  }\\n\\n  uint256[50] private pausableGap;\\n}\\n\u0022},\u0022QCAD.sol\u0022:{\u0022content\u0022:\u0022pragma solidity 0.5.12;\\n\\nimport \\\u0022./ERC20Pausable.sol\\\u0022;\\n\\ncontract QCAD is ERC20Pausable {\\n    function initialize(\\n        string calldata name,\\n        string calldata symbol,\\n        uint8 decimals,\\n        address[] calldata admins\\n    ) external initializer {\\n        ERC20Detailed.initialize(name, symbol, decimals);\\n        Ownable.initialize(_msgSender());\\n        Pausable.initialize();\\n\\n        for (uint256 i = 0; i \\u003c admins.length; \u002B\u002Bi) {\\n            _addAdmin(admins[i]);\\n        }\\n    }\\n\\n    function mint(address account, uint256 amount)\\n        external\\n        onlyAdmin\\n        whenNotPaused\\n        returns (bool)\\n    {\\n        require(isWhitelisted(account), \\\u0022minting to non-whitelisted address\\\u0022);\\n        _mint(account, amount);\\n        return true;\\n    }\\n\\n    function burn(uint256 amount)\\n        external\\n        onlyAdmin\\n        whenNotPaused\\n        returns (bool)\\n    {\\n        _burn(address(this), amount);\\n        return true;\\n    }\\n}\\n\u0022},\u0022Roles.sol\u0022:{\u0022content\u0022:\u0022pragma solidity 0.5.12;\\n\\n/**\\n * @title Roles\\n * @dev Library for managing addresses assigned to a Role.\\n */\\nlibrary Roles {\\n  struct Role {\\n    mapping(address =\\u003e bool) bearer;\\n  }\\n\\n  /**\\n     * @dev Give an account access to this role.\\n     */\\n  function add(Role storage role, address account) internal {\\n    require(!has(role, account), \\u0027Roles: account already has role\\u0027);\\n    role.bearer[account] = true;\\n  }\\n\\n  /**\\n     * @dev Remove an account\\u0027s access to this role.\\n     */\\n  function remove(Role storage role, address account) internal {\\n    require(has(role, account), \\u0027Roles: account does not have role\\u0027);\\n    role.bearer[account] = false;\\n  }\\n\\n  /**\\n     * @dev Check if an account has this role.\\n     * @return bool\\n     */\\n  function has(Role storage role, address account)\\n    internal\\n    view\\n    returns (bool)\\n  {\\n    require(account != address(0), \\u0027Roles: account is the zero address\\u0027);\\n    return role.bearer[account];\\n  }\\n}\\n\u0022},\u0022SafeMath.sol\u0022:{\u0022content\u0022:\u0022pragma solidity 0.5.12;\\n\\n/**\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * \u0060SafeMath\u0060 restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it\\u0027s recommended to use it always.\\n */\\nlibrary SafeMath {\\n  /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s \u0060\u002B\u0060 operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a \u002B b;\\n    require(c \\u003e= a, \\u0027SafeMath: addition overflow\\u0027);\\n\\n    return c;\\n  }\\n\\n  /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s \u0060-\u0060 operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return sub(a, b, \\u0027SafeMath: subtraction overflow\\u0027);\\n  }\\n\\n  /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity\\u0027s \u0060-\u0060 operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n  function sub(uint256 a, uint256 b, string memory errorMessage)\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    require(b \\u003c= a, errorMessage);\\n    uint256 c = a - b;\\n\\n    return c;\\n  }\\n\\n  /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity\\u0027s \u0060*\u0060 operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\n    // benefit is lost if \\u0027b\\u0027 is also tested.\\n    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n    if (a == 0) {\\n      return 0;\\n    }\\n\\n    uint256 c = a * b;\\n    require(c / a == b, \\u0027SafeMath: multiplication overflow\\u0027);\\n\\n    return c;\\n  }\\n\\n  /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s \u0060/\u0060 operator. Note: this function uses a\\n     * \u0060revert\u0060 opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return div(a, b, \\u0027SafeMath: division by zero\\u0027);\\n  }\\n\\n  /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity\\u0027s \u0060/\u0060 operator. Note: this function uses a\\n     * \u0060revert\u0060 opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n  function div(uint256 a, uint256 b, string memory errorMessage)\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    // Solidity only automatically asserts when dividing by 0\\n    require(b \\u003e 0, errorMessage);\\n    uint256 c = a / b;\\n    // assert(a == b * c \u002B a % b); // There is no case in which this doesn\\u0027t hold\\n\\n    return c;\\n  }\\n\\n  /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s \u0060%\u0060 operator. This function uses a \u0060revert\u0060\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return mod(a, b, \\u0027SafeMath: modulo by zero\\u0027);\\n  }\\n\\n  /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity\\u0027s \u0060%\u0060 operator. This function uses a \u0060revert\u0060\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     *\\n     * _Available since v2.4.0._\\n     */\\n  function mod(uint256 a, uint256 b, string memory errorMessage)\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    require(b != 0, errorMessage);\\n    return a % b;\\n  }\\n}\\n\u0022},\u0022StateManager.sol\u0022:{\u0022content\u0022:\u0022pragma solidity 0.5.12;\\n\\nimport \\\u0022./AdminRole.sol\\\u0022;\\n\\ncontract StateManager is AdminRole {\\n  event WhitelistedAdded(address indexed account);\\n  event WhitelistedRemoved(address indexed account);\\n\\n  event BlockedAdded(address indexed account);\\n  event BlockedRemoved(address indexed account);\\n\\n  event BlacklistedAdded(address indexed account);\\n\\n  enum States { None, Whitelisted, Blacklisted, Blocked }\\n  mapping(address =\\u003e uint256) internal addressState;\\n\\n  modifier notBlocked() {\\n    require(!isBlocked(_msgSender()), \\\u0022Blocked: caller is not blocked \\\u0022);\\n    _;\\n  }\\n  modifier notBlacklisted() {\\n    require(\\n      !isBlacklisted(_msgSender()),\\n      \\\u0022Blacklisted: caller is not blacklisted\\\u0022\\n    );\\n    _;\\n  }\\n\\n  function isWhitelisted(address account) public view returns (bool) {\\n    return addressState[account] == uint256(States.Whitelisted);\\n  }\\n\\n  function isBlocked(address account) public view returns (bool) {\\n    return addressState[account] == uint256(States.Blocked);\\n  }\\n\\n  function isBlacklisted(address account) public view returns (bool) {\\n    return addressState[account] == uint256(States.Blacklisted);\\n  }\\n\\n  function addWhitelisted(address account) external onlyAdmin whenNotPaused {\\n    require(!isWhitelisted(account), \\\u0022Whitelisted: already whitelisted\\\u0022);\\n    require(!isBlocked(account), \\\u0022Whitelisted: cannot add Blocked accounts\\\u0022);\\n    require(\\n      !isBlacklisted(account),\\n      \\\u0022Whitelisted: cannot add Blacklisted accounts\\\u0022\\n    );\\n    _addWhitelisted(account);\\n  }\\n\\n  function addBlocked(address account) external onlyAdmin {\\n    require(!isBlocked(account), \\\u0022Blocked: already blocked\\\u0022);\\n    require(\\n      !isBlacklisted(account),\\n      \\\u0022Blocked: cannot add Blacklisted accounts\\\u0022\\n    );\\n    _addBlocked(account);\\n  }\\n\\n  function addBlacklisted(address account) external onlyAdmin {\\n    require(!isBlacklisted(account), \\\u0022Blacklisted: already Blacklisted\\\u0022);\\n    _addBlacklisted(account);\\n  }\\n\\n  function removeWhitelisted(address account) external onlyAdmin whenNotPaused {\\n    _removeWhitelisted(account);\\n  }\\n\\n  function removeBlocked(address account) external onlyAdmin whenNotPaused {\\n    _removeBlocked(account);\\n  }\\n\\n  function renounceWhitelisted() external whenNotPaused {\\n    _removeWhitelisted(_msgSender());\\n  }\\n\\n  function _addWhitelisted(address account) internal {\\n    addressState[account] = uint256(States.Whitelisted);\\n    emit WhitelistedAdded(account);\\n  }\\n  function _addBlocked(address account) internal {\\n    addressState[account] = uint256(States.Blocked);\\n    emit BlockedAdded(account);\\n  }\\n\\n  function _addBlacklisted(address account) internal {\\n    addressState[account] = uint256(States.Blacklisted);\\n    emit BlacklistedAdded(account);\\n  }\\n\\n  function _removeWhitelisted(address account) internal {\\n    delete addressState[account];\\n    emit WhitelistedRemoved(account);\\n  }\\n\\n  function _removeBlocked(address account) internal {\\n    delete addressState[account];\\n    emit BlockedRemoved(account);\\n  }\\n\\n  uint256[50] private stateManagerGap;\\n}\\n\u0022}}","ABI":"[{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022AdminAdded\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022AdminRemoved\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022owner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022spender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022Approval\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022BlacklistedAdded\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022BlockedAdded\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022BlockedRemoved\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022previousOwner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022OwnershipTransferred\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022Paused\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022from\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022Transfer\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022Unpaused\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022WhitelistedAdded\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022WhitelistedRemoved\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022addAdmin\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022addBlacklisted\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022addBlocked\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022addWhitelisted\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022owner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022spender\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022allowance\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022spender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022approve\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022balanceOf\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022decimals\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint8\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint8\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022spender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022subtractedValue\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022decreaseAllowance\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022spender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022addedValue\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022increaseAllowance\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022string\u0022,\u0022name\u0022:\u0022name\u0022,\u0022type\u0022:\u0022string\u0022},{\u0022internalType\u0022:\u0022string\u0022,\u0022name\u0022:\u0022symbol\u0022,\u0022type\u0022:\u0022string\u0022},{\u0022internalType\u0022:\u0022uint8\u0022,\u0022name\u0022:\u0022decimals\u0022,\u0022type\u0022:\u0022uint8\u0022}],\u0022name\u0022:\u0022initialize\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022initialize\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022sender\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022initialize\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022isAdmin\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022isBlacklisted\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022isBlocked\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022isOwner\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022isWhitelisted\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022name\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022string\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022owner\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022pause\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022paused\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022removeAdmin\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022removeBlocked\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022removeWhitelisted\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022renounceAdmin\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022renounceWhitelisted\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022symbol\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022string\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022totalSupply\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022transfer\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022from\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022transferFrom\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022transferOwnership\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022unpause\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022}]","ContractName":"ERC20Pausable","CompilerVersion":"v0.5.12\u002Bcommit.7709ece9","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://2fb329bafcc44d674f199e23e4dea21bbac40abd1585986c6ac9b6a8907e01a7"}]