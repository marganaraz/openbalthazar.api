[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n// File: contracts/database/Minter.sol\r\n\r\ninterface Minter_Database{\r\n  function addressStorage(bytes32 _key) external view returns (address);\r\n}\r\n\r\ninterface Minter_MiniMeTokenFactory{\r\n  function createCloneToken(\r\n      address _parentToken,\r\n      uint _snapshotBlock,\r\n      string _tokenName,\r\n      uint8 _decimalUnits,\r\n      string _tokenSymbol,\r\n      bool _transfersEnabled,\r\n      address _erc20Address\r\n  ) external returns (address);\r\n}\r\n\r\ninterface Minter_MiniMeToken{\r\n  function generateTokens(address _owner, uint _amount) external returns (bool);\r\n  function changeController(address _newController) external;\r\n}\r\n\r\ncontract Minter {\r\n  Minter_Database private database;\r\n\r\n  constructor(address _database) public {\r\n    database = Minter_Database(_database);\r\n  }\r\n\r\n  function cloneToken(string _uri, address _erc20Address) external returns (address asset) {\r\n    require(msg.sender == database.addressStorage(keccak256(abi.encodePacked(\u0022contract\u0022, \u0022CrowdsaleGeneratorERC20\u0022))) ||\r\n            msg.sender == database.addressStorage(keccak256(abi.encodePacked(\u0022contract\u0022, \u0022CrowdsaleGeneratorETH\u0022))) ||\r\n            msg.sender == database.addressStorage(keccak256(abi.encodePacked(\u0022contract\u0022, \u0022AssetGenerator\u0022))) );\r\n    Minter_MiniMeTokenFactory factory = Minter_MiniMeTokenFactory(database.addressStorage(keccak256(abi.encodePacked(\u0022platform.tokenFactory\u0022))));\r\n    asset = factory.createCloneToken(address(0), 0, _uri, uint8(18), _uri, true, _erc20Address);\r\n    return asset;\r\n  }\r\n\r\n  function mintAssetTokens(address _assetAddress, address _receiver, uint256 _amount) external returns (bool){\r\n    require(msg.sender == database.addressStorage(keccak256(abi.encodePacked(\u0022contract\u0022, \u0022CrowdsaleERC20\u0022))) ||\r\n            msg.sender == database.addressStorage(keccak256(abi.encodePacked(\u0022contract\u0022, \u0022CrowdsaleETH\u0022))) ||\r\n            msg.sender == database.addressStorage(keccak256(abi.encodePacked(\u0022contract\u0022, \u0022AssetGenerator\u0022))) );\r\n    require(Minter_MiniMeToken(_assetAddress).generateTokens(_receiver, _amount));\r\n    return true;\r\n  }\r\n\r\n  function changeTokenController(address _assetAddress, address _newController) external returns (bool){\r\n    require(msg.sender == database.addressStorage(keccak256(abi.encodePacked(\u0022contract\u0022, \u0022DAODeployer\u0022))));\r\n    Minter_MiniMeToken(_assetAddress).changeController(_newController);\r\n  }\r\n}","ABI":"[{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_assetAddress\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_newController\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022changeTokenController\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_assetAddress\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_receiver\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022mintAssetTokens\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_uri\u0022,\u0022type\u0022:\u0022string\u0022},{\u0022name\u0022:\u0022_erc20Address\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022cloneToken\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022asset\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[{\u0022name\u0022:\u0022_database\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022constructor\u0022}]","ContractName":"Minter","CompilerVersion":"v0.4.24\u002Bcommit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000005fcebeb70b88e86dd880352684e775b0f4d57c71","Library":"","SwarmSource":"bzzr://d69217e0dffb1d785ecf9567a96d57efcbc7df05fc9cad0131f8810fc05d0fa3"}]