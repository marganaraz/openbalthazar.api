[{"SourceCode":"pragma solidity^0.5.11;\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a \u002B b;\r\n        require(c \u003E= a, \u0022SafeMath: addition overflow\u0022);\r\n\r\n        return c;\r\n    }\r\n\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \u0022SafeMath: subtraction overflow\u0022);\r\n    }\r\n\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b \u003C= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \u0022SafeMath: multiplication overflow\u0022);\r\n\r\n        return c;\r\n    }\r\n\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \u0022SafeMath: division by zero\u0022);\r\n    }\r\n\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b \u003E 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c \u002B a % b); // There is no case in which this doesn\u0027t hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \u0022SafeMath: modulo by zero\u0022);\r\n    }\r\n\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/*\r\n  Lock and Hold is a contract for people with terrible self control.  \r\n  \r\n*/\r\n\r\ncontract LockAndHold {\r\n    \r\n    using SafeMath for uint256;\r\n    \r\n    address public initializer;\r\n    \r\n    /*\r\n      All times are approximations since human time is a silly construct.\r\n    */\r\n    \r\n    uint256 constant ONE_MONTH    = 2629746;\r\n    uint256 constant THREE_MONTHS = 7889238;\r\n    uint256 constant SIX_MONTHS   = 15778476;\r\n    uint256 constant YEAR         = 31556952;\r\n    \r\n    string public padding = \u00220x0909090909\u0022;\r\n    \r\n    mapping (int256 =\u003E uint256) Times;\r\n    \r\n    struct Lock {\r\n        bytes32 id;\r\n        uint256 value;\r\n        uint256 withdrawl_time;\r\n    }\r\n    \r\n    mapping (address =\u003E Lock) locks;\r\n    mapping (address =\u003E bool) lock_registry;\r\n    //mapping (bytes32 =\u003E Lock) lookupLockByID;\r\n    \r\n    \r\n    modifier requireNotAlreadyLocked(){\r\n        require(!lock_registry[msg.sender], \u0022Sending Address already has locked funds\u0022);\r\n        _;\r\n    }\r\n    \r\n    modifier requireIsAlreadyLocked(){\r\n        require(lock_registry[msg.sender], \u0022Sending Address has no locked funds\u0022);\r\n        _;\r\n    }\r\n    \r\n    \r\n    constructor () public {\r\n      initializer = msg.sender;\r\n      \r\n      // Setting at Construction\r\n      Times[1] = THREE_MONTHS;\r\n      Times[2] = SIX_MONTHS;\r\n      Times[3] = YEAR;\r\n    }\r\n    \r\n    /*\r\n      View Functions\r\n    */\r\n    \r\n    function isAddressLocking(address _address) public view returns (bool) {\r\n        return lock_registry[_address];\r\n    }\r\n    \r\n    function getLockReceiptBySender(address _address) public view returns (bytes memory) {\r\n        Lock storage t = locks[_address];\r\n        return abi.encode(t.id, padding, t.value, padding, t.withdrawl_time);\r\n    }\r\n    \r\n    function getLockAmountBySender(address _address) public view returns (uint256) {\r\n        return locks[_address].value;\r\n    }\r\n    \r\n    function getLockupUntilTimeBySender(address _address) public view returns (uint256) {\r\n        return locks[_address].withdrawl_time;\r\n    }\r\n    \r\n    function getCurrentBlockTime() public view returns (uint256){\r\n        return block.timestamp;\r\n    }\r\n    \r\n    /*\r\n      Internal Function that creates lock ID\u0027s for receipts\r\n    */\r\n    \r\n    function __generateId(address _sender, uint256 _now, uint _salt) private pure returns (bytes32 id){\r\n        return keccak256(abi.encode(_sender, _now, _salt));\r\n    }\r\n    \r\n    /*\r\n      Lock on Specific time outlined in Contract (Recommended way to use)\r\n    */\r\n    \r\n    function lockOnTime(int8 _timeIDX) requireNotAlreadyLocked external payable {\r\n        uint256 until = block.timestamp.add(Times[_timeIDX]);\r\n        bytes32 id = __generateId(msg.sender, block.timestamp, block.number);\r\n        \r\n        locks[msg.sender] = Lock(id, msg.value, until);\r\n        lock_registry[msg.sender] = true;\r\n        \r\n        emit Receipt(id, msg.value, block.timestamp, until);\r\n    }\r\n    \r\n    /*\r\n      Lock on a number of months.  Minimum is 1 month.  If you need to lock up for less than that\r\n      ...what the fuck is wrong with you?\r\n    */\r\n    \r\n    function customLockByMonth(uint256 _number_of_months) requireNotAlreadyLocked external payable {\r\n        uint256 time_to_lock = _number_of_months.mul(ONE_MONTH);\r\n        uint256 until = block.timestamp.add(time_to_lock);\r\n        bytes32 id = __generateId(msg.sender, block.timestamp, block.number);\r\n        \r\n        locks[msg.sender] = Lock(id, msg.value, until);\r\n        \r\n        lock_registry[msg.sender] = true;\r\n        \r\n        emit Receipt(id, msg.value, block.timestamp, until);\r\n    }\r\n    \r\n    /*\r\n      Witthdrawl function for getting stuff out.\r\n    */\r\n    \r\n    function withdrawl() requireIsAlreadyLocked external {\r\n        require(locks[msg.sender].withdrawl_time \u003C= block.timestamp, \u0022Lockup period is still in effect\u0022);\r\n        \r\n        msg.sender.transfer(locks[msg.sender].value);\r\n        locks[msg.sender].value = 0; // Just in case...\r\n        lock_registry[msg.sender] = false;\r\n        \r\n        emit Withdrawl(msg.sender, block.timestamp);\r\n    }\r\n\r\n    /*\r\n      If user sends funds directly without function will revert\r\n    */\r\n    \r\n    function () external {\r\n      revert();\r\n    }\r\n    \r\n    event Receipt(bytes32 id, uint256 amount, uint256 locked_on, uint256 until);\r\n    event Message(bytes16 status, bytes32 msg);\r\n    event Withdrawl(address to, uint256 on);\r\n}","ABI":"[{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022padding\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022string\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022withdrawl\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_address\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022getLockupUntilTimeBySender\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022int8\u0022,\u0022name\u0022:\u0022_timeIDX\u0022,\u0022type\u0022:\u0022int8\u0022}],\u0022name\u0022:\u0022lockOnTime\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:true,\u0022stateMutability\u0022:\u0022payable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_address\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022getLockReceiptBySender\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bytes\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bytes\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022getCurrentBlockTime\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022initializer\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_address\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022isAddressLocking\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_number_of_months\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022customLockByMonth\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:true,\u0022stateMutability\u0022:\u0022payable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_address\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022getLockAmountBySender\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022constructor\u0022},{\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022fallback\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022id\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022locked_on\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022until\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022Receipt\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022bytes16\u0022,\u0022name\u0022:\u0022status\u0022,\u0022type\u0022:\u0022bytes16\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022msg\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022Message\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022on\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022Withdrawl\u0022,\u0022type\u0022:\u0022event\u0022}]","ContractName":"LockAndHold","CompilerVersion":"v0.5.11\u002Bcommit.c082d0b4","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://4ba8a6d215a8a081ff4c73e6ecbb19fe26143c98b651e3f7b78f52bc3bfd4cb0"}]