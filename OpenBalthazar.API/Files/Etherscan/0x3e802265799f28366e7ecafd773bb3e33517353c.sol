[{"SourceCode":"pragma solidity 0.4.25;\r\n// ----------------------------------------------------------------------------\r\n// \u0027SCLX\u0027 contract\r\n//\r\n// Symbol      : SCLX\r\n// Name        : Scalecoin\r\n// Total supply: 21,000,000\r\n// Decimals    : 18\r\n//\r\n// Copyright (c) 2019 Scale Blockchain\r\n// Contract designed by: Scale Blockchain (https://scaleblockchain.tech/) \r\n// ----------------------------------------------------------------------------\r\n   \r\n    /**\r\n     * @title SafeMath\r\n     * @dev Math operations with safety checks that throw on error\r\n     */\r\n    library SafeMath {\r\n      function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n          return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n      }\r\n    \r\n      function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b \u003E 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c \u002B a % b); // There is no case in which this doesn\u0027t hold\r\n        return c;\r\n      }\r\n    \r\n      function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b \u003C= a);\r\n        return a - b;\r\n      }\r\n    \r\n      function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a \u002B b;\r\n        assert(c \u003E= a);\r\n        return c;\r\n      }\r\n    }\r\n    \r\n    contract owned {\r\n        address public owner;\r\n        using SafeMath for uint256;\r\n        \r\n        constructor() public {\r\n            owner = msg.sender;\r\n        }\r\n    \r\n        modifier onlyOwner {\r\n            require(msg.sender == owner);\r\n            _;\r\n        }\r\n    \r\n        function transferOwnership(address newOwner) onlyOwner public {\r\n            owner = newOwner;\r\n        }\r\n    }\r\n    \r\n    interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external ; }\r\n    \r\n    contract TokenERC20 {\r\n        // Public variables of the token\r\n        using SafeMath for uint256;\r\n        string public name = \u0022Scalecoin\u0022;\r\n        string public symbol = \u0022SCLX\u0022;\r\n        uint8 public decimals = 18;         // 18 decimals is the strongly suggested default, avoid changing it\r\n        uint256 public totalSupply          = 21000000 * (1 ether);   \r\n        uint256 public tokensForCrowdsale   = 15000000 * (1 ether);\r\n        uint256 public tokensForTeam        = 5000000  * (1 ether);\r\n        uint256 public tokensForOwner       = 1000000  * (1 ether);\r\n        \r\n        address public teamWallet = 0xF1f9C43e6AabBa5cF61C038af4eEa50d2030Ed7B\r\n\r\n;\r\n    \r\n        // This creates an array with all balances\r\n        mapping (address =\u003E uint256) public balanceOf;\r\n        mapping (address =\u003E mapping (address =\u003E uint256)) public allowance;\r\n    \r\n        // This generates a public event on the blockchain that will notify clients\r\n        event Transfer(address indexed from, address indexed to, uint256 value);\r\n    \r\n        // This notifies clients about the amount burnt\r\n        event Burn(address indexed from, uint256 value);\r\n    \r\n        /**\r\n         * Constrctor function\r\n         *\r\n         * Initializes contract with initial supply tokens to the creator of the contract\r\n         */\r\n        constructor() public {\r\n             \r\n            balanceOf[this] = tokensForCrowdsale;          // 15 Million will remain in contract for crowdsale\r\n            balanceOf[teamWallet] = tokensForTeam;         // 5 Million will be allocated to Team\r\n            balanceOf[msg.sender] = tokensForOwner;        // 1 Million will be sent to contract owner\r\n\r\n        }\r\n    \r\n        /**\r\n         * Internal transfer, only can be called by this contract\r\n         */\r\n        function _transfer(address _from, address _to, uint _value) internal {\r\n            // Prevent transfer to 0x0 address. Use burn() instead\r\n            require(_to != 0x0);\r\n            // Check if the sender has enough\r\n            require(balanceOf[_from] \u003E= _value);\r\n            // Check for overflows\r\n            require(balanceOf[_to].add(_value) \u003E balanceOf[_to]);\r\n            // Save this for an assertion in the future\r\n            uint previousBalances = balanceOf[_from].add(balanceOf[_to]);\r\n            // Subtract from the sender\r\n            balanceOf[_from] = balanceOf[_from].sub(_value);\r\n            // Add the same to the recipient\r\n            balanceOf[_to] = balanceOf[_to].add(_value);\r\n            emit Transfer(_from, _to, _value);\r\n            // Asserts are used to use static analysis to find bugs in your code. They should never fail\r\n            assert(balanceOf[_from].add(balanceOf[_to]) == previousBalances);\r\n        }\r\n    \r\n        /**\r\n         * Transfer tokens\r\n         *\r\n         * Send \u0060_value\u0060 tokens to \u0060_to\u0060 from your account\r\n         *\r\n         * @param _to The address of the recipient\r\n         * @param _value the amount to send\r\n         */\r\n        function transfer(address _to, uint256 _value) public {\r\n            _transfer(msg.sender, _to, _value);\r\n        }\r\n    \r\n        /**\r\n         * Transfer tokens from other address\r\n         *\r\n         * Send \u0060_value\u0060 tokens to \u0060_to\u0060 in behalf of \u0060_from\u0060\r\n         *\r\n         * @param _from The address of the sender\r\n         * @param _to The address of the recipient\r\n         * @param _value the amount to send\r\n         */\r\n        function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n            require(_value \u003C= allowance[_from][msg.sender]);     // Check allowance\r\n            allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\r\n            _transfer(_from, _to, _value);\r\n            return true;\r\n        }\r\n    \r\n        /**\r\n         * Set allowance for other address\r\n         *\r\n         * Allows \u0060_spender\u0060 to spend no more than \u0060_value\u0060 tokens in your behalf\r\n         *\r\n         * @param _spender The address authorized to spend\r\n         * @param _value the max amount they can spend\r\n         */\r\n        function approve(address _spender, uint256 _value) public\r\n            returns (bool success) {\r\n            allowance[msg.sender][_spender] = _value;\r\n            return true;\r\n        }\r\n    \r\n        /**\r\n         * Set allowance for other address and notify\r\n         *\r\n         * Allows \u0060_spender\u0060 to spend no more than \u0060_value\u0060 tokens in your behalf, and then ping the contract about it\r\n         *\r\n         * @param _spender The address authorized to spend\r\n         * @param _value the max amount they can spend\r\n         * @param _extraData some extra information to send to the approved contract\r\n         */\r\n        function approveAndCall(address _spender, uint256 _value, bytes _extraData)\r\n            public\r\n            returns (bool success) {\r\n            tokenRecipient spender = tokenRecipient(_spender);\r\n            if (approve(_spender, _value)) {\r\n                spender.receiveApproval(msg.sender, _value, this, _extraData);\r\n                return true;\r\n            }\r\n        }\r\n    \r\n        /**\r\n         * Destroy tokens\r\n         *\r\n         * Remove \u0060_value\u0060 tokens from the system irreversibly\r\n         *\r\n         * @param _value the amount of money to burn\r\n         */\r\n        function burn(uint256 _value) public returns (bool success) {\r\n            require(balanceOf[msg.sender] \u003E= _value);   // Check if the sender has enough\r\n            balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);            // Subtract from the sender\r\n            totalSupply = totalSupply.sub(_value);                      // Updates totalSupply\r\n           emit Burn(msg.sender, _value);\r\n            return true;\r\n        }\r\n    \r\n        /**\r\n         * Destroy tokens from other account\r\n         *\r\n         * Remove \u0060_value\u0060 tokens from the system irreversibly on behalf of \u0060_from\u0060.\r\n         *\r\n         * @param _from the address of the sender\r\n         * @param _value the amount of money to burn\r\n         */\r\n        function burnFrom(address _from, uint256 _value) public returns (bool success) {\r\n            require(balanceOf[_from] \u003E= _value);                // Check if the targeted balance is enough\r\n            require(_value \u003C= allowance[_from][msg.sender]);    // Check allowance\r\n            balanceOf[_from] = balanceOf[_from].sub(_value);                         // Subtract from the targeted balance\r\n            allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);             // Subtract from the sender\u0027s allowance\r\n            totalSupply = totalSupply.sub(_value);                              // Update totalSupply\r\n          emit  Burn(_from, _value);\r\n            return true;\r\n        }\r\n    }\r\n    \r\n    /******************************************/\r\n    /*       ADVANCED TOKEN STARTS HERE       */\r\n    /******************************************/\r\n    \r\n    contract Scalecoin is owned, TokenERC20 {\r\n\r\n        using SafeMath for uint256;\r\n        uint256 public startTime = 0; //client wants ICO run Infinite time, so startTimeStamp 0\r\n        uint256 public endTime = 9999999999999999999999; //and entTimeStamp higher number\r\n        uint256 public exchangeRate = 30000; // this is how many tokens for 1 Ether\r\n        uint256 public tokensSold = 0; // how many tokens sold in crowdsale\r\n        \r\n        mapping (address =\u003E bool) public frozenAccount;\r\n    \r\n        /* This generates a public event on the blockchain that will notify clients */\r\n        event FrozenFunds(address target, bool frozen);\r\n    \r\n        /* Initializes contract with initial supply tokens to the creator of the contract */\r\n        constructor() TokenERC20() public {}\r\n\r\n        /* Internal transfer, only can be called by this contract */\r\n        function _transfer(address _from, address _to, uint _value) internal {\r\n            require (_to != 0x0);                               // Prevent transfer to 0x0 address. Use burn() instead\r\n            require (balanceOf[_from] \u003E= _value);               // Check if the sender has enough\r\n            require (balanceOf[_to].add(_value) \u003E= balanceOf[_to]); // Check for overflows\r\n            require(!frozenAccount[_from]);                     // Check if sender is frozen\r\n            require(!frozenAccount[_to]);                       // Check if recipient is frozen\r\n            balanceOf[_from] = balanceOf[_from].sub(_value);                         // Subtract from the sender\r\n            balanceOf[_to] = balanceOf[_to].add(_value);                           // Add the same to the recipient\r\n            emit Transfer(_from, _to, _value);\r\n        }\r\n        \r\n        //@dev fallback function, only accepts ether if ICO is running or Reject\r\n        function () payable public {\r\n            require(endTime \u003E now);\r\n            require(startTime \u003C now);\r\n            uint ethervalueWEI=msg.value;\r\n            // calculate token amount to be sent\r\n            uint256 token = ethervalueWEI.mul(exchangeRate); //weiamount * price\r\n            tokensSold = tokensSold.add(token);\r\n            _transfer(this, msg.sender, token);              // makes the transfers\r\n            forwardEherToOwner();\r\n        }\r\n        \r\n        //Automatocally forwards ether from smart contract to owner address\r\n        function forwardEherToOwner() internal {\r\n            owner.transfer(msg.value); \r\n          }\r\n        \r\n        //function to start an ICO.\r\n        //It requires: start and end timestamp, exchange rate in Wei, and token amounts to allocate for the ICO\r\n        //It will transfer allocated amount to the smart contract\r\n        function startIco(uint256 start,uint256 end, uint256 exchangeRateInWei, uint256 TokensAllocationForICO) onlyOwner public {\r\n            require(start \u003C end);\r\n            uint256 tokenAmount = TokensAllocationForICO.mul(1 ether);\r\n            require(balanceOf[msg.sender] \u003E tokenAmount);\r\n            startTime=start;\r\n            endTime=end;\r\n            exchangeRate = exchangeRateInWei;\r\n            approve(this,tokenAmount);\r\n            transfer(this,tokenAmount);\r\n        }       \r\n        \r\n        //Stops an ICO.\r\n        //It will also transfer remaining tokens to owner\r\n        function stopICO() onlyOwner public{\r\n            endTime = 0;\r\n            uint256 tokenAmount=balanceOf[this];\r\n            _transfer(this, msg.sender, tokenAmount);\r\n        }\r\n        \r\n        //function to check wheter ICO is running or not.\r\n        function isICORunning() public view returns(bool){\r\n            if(endTime \u003E now \u0026\u0026 startTime \u003C now){\r\n                return true;                \r\n            }else{\r\n                return false;\r\n            }\r\n        }\r\n        \r\n        //Function to set ICO Exchange rate. \r\n        function setICOExchangeRate(uint256 newExchangeRate) onlyOwner public {\r\n            exchangeRate=newExchangeRate;\r\n        }\r\n        \r\n        //Just in case, owner wants to transfer Tokens from contract to owner address\r\n        function manualWithdrawToken(uint256 _amount) onlyOwner public {\r\n            uint256 tokenAmount = _amount.mul(1 ether);\r\n            _transfer(this, msg.sender, tokenAmount);\r\n          }\r\n          \r\n        //Just in case, owner wants to transfer Ether from contract to owner address\r\n        function manualWithdrawEther()onlyOwner public{\r\n            uint256 amount=address(this).balance;\r\n            owner.transfer(amount);\r\n        }\r\n        \r\n        /// @notice Create \u0060mintedAmount\u0060 tokens and send it to \u0060target\u0060\r\n        /// @param target Address to receive the tokens\r\n        /// @param mintedAmount the amount of tokens it will receive\r\n        function mintToken(address target, uint256 mintedAmount) onlyOwner public {\r\n            balanceOf[target] = balanceOf[target].add(mintedAmount);\r\n            totalSupply = totalSupply.add(mintedAmount);\r\n           emit Transfer(0, this, mintedAmount);\r\n           emit Transfer(this, target, mintedAmount);\r\n        }\r\n    \r\n        /// @notice \u0060freeze? Prevent | Allow\u0060 \u0060target\u0060 from sending \u0026 receiving tokens\r\n        /// @param target Address to be frozen\r\n        /// @param freeze either to freeze it or not\r\n        function freezeAccount(address target, bool freeze) onlyOwner public {\r\n            frozenAccount[target] = freeze;\r\n          emit  FrozenFunds(target, freeze);\r\n        }\r\n\r\n\r\n\r\n    }","ABI":"[{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022name\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_spender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022approve\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022success\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022totalSupply\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_from\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022transferFrom\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022success\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022decimals\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint8\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022endTime\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022isICORunning\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022exchangeRate\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022burn\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022success\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022tokensSold\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022manualWithdrawEther\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022teamWallet\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022manualWithdrawToken\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022balanceOf\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022startTime\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022target\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022mintedAmount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022mintToken\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_from\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022burnFrom\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022success\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022tokensForCrowdsale\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022owner\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022symbol\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022transfer\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022frozenAccount\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022tokensForOwner\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022stopICO\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_spender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_value\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_extraData\u0022,\u0022type\u0022:\u0022bytes\u0022}],\u0022name\u0022:\u0022approveAndCall\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022success\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022allowance\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022target\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022freeze\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022name\u0022:\u0022freezeAccount\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022start\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022end\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022exchangeRateInWei\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022TokensAllocationForICO\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022startIco\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022transferOwnership\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022newExchangeRate\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022setICOExchangeRate\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022tokensForTeam\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022constructor\u0022},{\u0022payable\u0022:true,\u0022stateMutability\u0022:\u0022payable\u0022,\u0022type\u0022:\u0022fallback\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022target\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022frozen\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022name\u0022:\u0022FrozenFunds\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022from\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022Transfer\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022from\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022Burn\u0022,\u0022type\u0022:\u0022event\u0022}]","ContractName":"Scalecoin","CompilerVersion":"v0.4.25\u002Bcommit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://014a1fb9ea57d27d536835a1f5653000b8acb227fc6d3d225a60628de2e55ffd"}]