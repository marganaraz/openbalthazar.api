[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\ncontract simple_contract {\r\n    mapping (bytes32 =\u003E uint8[]) public vMap;\r\n    mapping (bytes32 =\u003E bytes32[]) public rMap;\r\n    mapping (bytes32 =\u003E bytes32[]) public sMap;\r\n\r\n    constructor() public {\r\n    }\r\n\r\n    /*\r\n    ecrecover : check signer\r\n    */\r\n    function addSign(bytes32 hash, uint8[] vArray, bytes32[] rArray, bytes32[] sArray, address[] addrArray) public {\r\n        require(vMap[hash].length == 0 \u0026\u0026 rMap[hash].length == 0 \u0026\u0026 sMap[hash].length == 0, \u0022no map\u0022);\r\n        require(vArray.length == rArray.length \u0026\u0026 rArray.length == sArray.length, \u0022invalid map\u0022);\r\n        require(addrArray.length \u003E 0 \u0026\u0026 addrArray.length \u003C 1000, \u0022invalid address array length\u0022);\r\n        require(_checkDistinctParties(addrArray), \u0022invalid address array\u0022);\r\n        vMap[hash] = new uint8[](vArray.length);\r\n        rMap[hash] = new bytes32[](vArray.length);\r\n        sMap[hash] = new bytes32[](vArray.length);\r\n        for (uint256 i = 0; i \u003C vArray.length; i\u002B\u002B) {\r\n            vMap[hash][i] = vArray[i];\r\n            rMap[hash][i] = rArray[i];\r\n            sMap[hash][i] = sArray[i];\r\n\r\n            bytes memory prefix = \u0022\\x19Ethereum Signed Message:\\n32\u0022;\r\n            bytes32 prefixedHash = keccak256(abi.encodePacked(prefix, hash));\r\n            require(ecrecover(prefixedHash, vArray[i], rArray[i], sArray[i]) == addrArray[i], \u0022ecrecover fail\u0022);\r\n        }\r\n    }\r\n\r\n    function getAddresses(bytes32 hash) public view returns (address[]) {\r\n        uint8[] storage vArray = vMap[hash];\r\n        bytes32[] storage rArray = rMap[hash];\r\n        bytes32[] storage sArray = sMap[hash];\r\n        address[] memory addrArray = new address[](vArray.length);\r\n        require(vArray.length \u003E 0 \u0026\u0026 rArray.length \u003E 0 \u0026\u0026 sArray.length \u003E 0);\r\n        for (uint256 i = 0; i \u003C vArray.length; i\u002B\u002B) {\r\n            bytes memory prefix = \u0022\\x19Ethereum Signed Message:\\n32\u0022;\r\n            bytes32 prefixedHash = keccak256(abi.encodePacked(prefix, hash));\r\n            addrArray[i] = ecrecover(prefixedHash, vArray[i], rArray[i], sArray[i]);\r\n        }\r\n        return addrArray;\r\n    }\r\n\r\n    function getEcrecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) public pure returns (address) {\r\n        return ecrecover(hash, v, r, s);\r\n    }\r\n\r\n    function _checkDistinctParties(address[] _parties) private pure returns (bool) {\r\n        for (uint256 i = 0; i \u003C _parties.length; i\u002B\u002B) {\r\n            for (uint256 j = i \u002B 1; j \u003C _parties.length; j\u002B\u002B) {\r\n                if (_parties[i] == _parties[j]) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n}","ABI":"[{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022vMap\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint8\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022sMap\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022hash\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022getAddresses\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address[]\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022hash\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022name\u0022:\u0022v\u0022,\u0022type\u0022:\u0022uint8\u0022},{\u0022name\u0022:\u0022r\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022name\u0022:\u0022s\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022getEcrecover\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022pure\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022rMap\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022hash\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022name\u0022:\u0022vArray\u0022,\u0022type\u0022:\u0022uint8[]\u0022},{\u0022name\u0022:\u0022rArray\u0022,\u0022type\u0022:\u0022bytes32[]\u0022},{\u0022name\u0022:\u0022sArray\u0022,\u0022type\u0022:\u0022bytes32[]\u0022},{\u0022name\u0022:\u0022addrArray\u0022,\u0022type\u0022:\u0022address[]\u0022}],\u0022name\u0022:\u0022addSign\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022constructor\u0022}]","ContractName":"simple_contract","CompilerVersion":"v0.4.24\u002Bcommit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://b3adf41b13926028acbfad8a5e4c9c45c2527c6aed9acbc66920131fba68990c"}]