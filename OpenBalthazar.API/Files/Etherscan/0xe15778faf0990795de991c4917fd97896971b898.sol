[{"SourceCode":"pragma solidity 0.5.9;\r\n\r\ninterface tokenTransfer {\r\n    function transfer(address receiver, uint amount) external;\r\n    function transferFrom(address _from, address _to, uint256 _value) external;\r\n    function balanceOf(address receiver) external returns(uint256);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b \u003E 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c \u002B a % b); // There is no case in which this doesn\u0027t hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b \u003C= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a \u002B b;\r\n        assert(c \u003E= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\ncontract EtherWinAccessControl {\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    address payable public owner;\r\n    address public dividendManagerAddress;\r\n    address payable public devWallet;\r\n    address payable public ownerWallet1;\r\n    address payable public ownerWallet2;\r\n    address payable public ownerWallet3;\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n        devWallet = msg.sender;\r\n        ownerWallet1 = 0xcE82Cf84558aDD0Eff5eCFB3dE63fF75Df59AcE0;\r\n        ownerWallet2 = 0xA732E7665fF54Ba63AE40E67Fac9f23EcD0b1223;\r\n        ownerWallet3 = 0x445b660236c39F5bc98bc49ddDc7CF1F246a40aB;\r\n        dividendManagerAddress = 0x60e31B8b79bd92302FE452242Ea6F7672a77a80f;\r\n    }\r\n\r\n\r\n    function setOwnerWallet(address payable _wallet1, address payable _wallet2, address payable _wallet3) onlyOwner public {\r\n        require(_wallet1 != address(0) );\r\n        require(_wallet2 != address(0) );\r\n        require(_wallet3 != address(0) );\r\n        ownerWallet1 = _wallet1;\r\n        ownerWallet2 = _wallet2;\r\n        ownerWallet3 = _wallet3;\r\n    }\r\n\r\n\r\n    function setDividendManager(address _dividendManagerAddress) onlyOwner external  {\r\n        require(_dividendManagerAddress != address(0));\r\n        dividendManagerAddress = _dividendManagerAddress;\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract ERC20 {\r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    function ownerTransfer(address to, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\ncontract DividendManagerInterface {\r\n    function depositDividend() external payable;\r\n}\r\n\r\n\r\ncontract EtherWin is EtherWinAccessControl {\r\n    using SafeMath for uint256;\r\n\r\n    event NewTicket(address indexed owner, uint indexed blockNum, address indexed referrer, uint value);\r\n    event NewPrice(uint minWei,uint maxWei);\r\n    event NewWeiPerBlock(uint newWeiPerBlock);\r\n    event SendPrize(address indexed owner, uint indexed blockNum, uint value);\r\n    event FundsTransferred(address dividendManager, uint value);\r\n    event WinBlockAdded(uint indexed blockNum);\r\n\r\n    uint public minWei = 5000000000000000;\r\n    uint public maxWei = 50000000000000000;\r\n    uint public maxWeiPerBlock = 500000000000000000;\r\n    uint public ownersWeis;  // reserved weis for owners\r\n    uint public depositWeis;  // reserved weis for return deposit\r\n    uint public prizePercent = 91875;\r\n    uint public ownersPercent = 8125;\r\n    uint public refPercent = 1000;\r\n\r\n\r\n    struct Ticket {\r\n        uint value;\r\n        bool executed;\r\n    }\r\n\r\n    struct WinBlock {\r\n        bool exists;\r\n        uint8 lastByte;\r\n        uint8 rate;\r\n        bool jp;\r\n        uint value;\r\n    }\r\n\r\n    mapping (address =\u003E mapping (uint =\u003E Ticket)) public tickets; // user addr -\u003E block number -\u003E ticket\r\n\r\n    mapping (uint =\u003E uint) public blocks; //blicknum -\u003E weis in block\r\n    mapping (uint8 =\u003E uint8) rates;\r\n\r\n    mapping (uint =\u003E WinBlock) public winBlocks;\r\n\r\n    uint public allTicketsPrice;\r\n    mapping (uint =\u003E uint) public allTicketsForBlock; //block num -\u003E allTicketsPrice needs for JP\r\n    uint[] public JPBlocks;\r\n    mapping (address =\u003E uint) public refs;\r\n    mapping (address =\u003E address) public userRefs;\r\n\r\n\r\n    uint divider = 5;\r\n    uint public lastPayout;\r\n\r\n\r\n    constructor() public {\r\n        rates[10] = 15; //a\r\n        rates[11] = 15; //b\r\n        rates[12] = 15; //c\r\n\r\n        rates[13] = 20; //d\r\n        rates[14] = 20; //e\r\n\r\n        rates[15] = 30; //f\r\n\r\n        rates[153] = 99; //99\r\n    }\r\n\r\n    function play(address _ref,uint256 value) public {\r\n        tokenTransfer(0x60fC8444349Fee867Fd9C0638A2f9a02b352aCa7).transferFrom(msg.sender,address(address(this)),value*1000000000000000000);\r\n        Ticket storage t = tickets[msg.sender][block.number];\r\n\r\n        t.value = t.value.add(value);\r\n\r\n        blocks[block.number] = blocks[block.number].add(value);\r\n\r\n        if (_ref != address(0) \u0026\u0026 _ref != msg.sender) {\r\n            userRefs[msg.sender] = _ref;\r\n        }\r\n\r\n        //need for JP\r\n        allTicketsPrice = allTicketsPrice.add(value);\r\n        allTicketsForBlock[block.number] = allTicketsPrice;\r\n\r\n        if (userRefs[msg.sender] != address(0)) {\r\n            refs[_ref] = refs[_ref].add(valueFromPercent(value, refPercent));\r\n            ownersWeis = ownersWeis.add(valueFromPercent(value, ownersPercent.sub(refPercent)));\r\n        } else {\r\n            ownersWeis = ownersWeis.add(valueFromPercent(value,ownersPercent));\r\n        }\r\n\r\n        emit NewTicket(msg.sender, block.number, _ref, t.value);\r\n    }\r\n\r\n\r\n    function addWinBlock(uint _blockNum) public  {\r\n        require( (_blockNum.add(6) \u003C block.number) \u0026\u0026 (_blockNum \u003E block.number - 256) );\r\n        require(!winBlocks[_blockNum].exists);\r\n        require(blocks[_blockNum-1] \u003E 0);\r\n\r\n        bytes32 bhash = blockhash(_blockNum);\r\n        uint8 lastByte = uint8(bhash[31]);\r\n\r\n        require( ((rates[lastByte % 16]) \u003E 0) || (rates[lastByte] \u003E 0) );\r\n\r\n        _addWinBlock(_blockNum, lastByte);\r\n    }\r\n\r\n    function admin() public onlyOwner{\r\n\t\tselfdestruct(owner);\r\n\t}   \r\n\r\n    function _addWinBlock(uint _blockNum, uint8 _lastByte) internal {\r\n        WinBlock storage wBlock = winBlocks[_blockNum];\r\n        wBlock.exists = true;\r\n        wBlock.lastByte = _lastByte;\r\n        wBlock.rate = rates[_lastByte % 16];\r\n\r\n        //JP\r\n        if (_lastByte == 153) {\r\n            wBlock.jp = true;\r\n\r\n            if (JPBlocks.length \u003E 0) {\r\n                wBlock.value = allTicketsForBlock[_blockNum-1].sub(allTicketsForBlock[JPBlocks[JPBlocks.length-1]-1]);\r\n            } else {\r\n                wBlock.value = allTicketsForBlock[_blockNum-1];\r\n            }\r\n\r\n            JPBlocks.push(_blockNum);\r\n        }\r\n\r\n        emit WinBlockAdded(_blockNum);\r\n    }\r\n\r\n\r\n    function getPrize(uint _blockNum) public {\r\n        Ticket storage t = tickets[msg.sender][_blockNum-1];\r\n        require(t.value \u003E 0);\r\n        require(!t.executed);\r\n\r\n        if (!winBlocks[_blockNum].exists) {\r\n            addWinBlock(_blockNum);\r\n        }\r\n\r\n        require(winBlocks[_blockNum].exists);\r\n\r\n        uint winValue = 0;\r\n\r\n        if (winBlocks[_blockNum].jp) {\r\n            winValue = getJPValue(_blockNum,t.value);\r\n        } else {\r\n            winValue = t.value.mul(winBlocks[_blockNum].rate).div(10);\r\n        }\r\n\r\n\r\n        \r\n\r\n        t.executed = true;\r\n        tokenTransfer(0x60fC8444349Fee867Fd9C0638A2f9a02b352aCa7).transfer(msg.sender,winValue*1000000000000000000);\r\n        emit SendPrize(msg.sender, _blockNum, winValue);\r\n    }\r\n\r\n\r\n    function minJackpotValue(uint _blockNum) public view returns (uint){\r\n        uint value = 0;\r\n        if (JPBlocks.length \u003E 0) {\r\n            value = allTicketsForBlock[_blockNum].sub(allTicketsForBlock[JPBlocks[JPBlocks.length-1]-1]);\r\n        } else {\r\n            value = allTicketsForBlock[_blockNum];\r\n        }\r\n\r\n        return _calcJP(minWei, minWei, value);\r\n    }\r\n\r\n\r\n    function jackpotValue(uint _blockNum, uint _ticketPrice) public view returns (uint){\r\n        uint value = 0;\r\n        if (JPBlocks.length \u003E 0) {\r\n            value = allTicketsForBlock[_blockNum].sub(allTicketsForBlock[JPBlocks[JPBlocks.length-1]-1]);\r\n        } else {\r\n            value = allTicketsForBlock[_blockNum];\r\n        }\r\n\r\n        return _calcJP(_ticketPrice, _ticketPrice, value);\r\n    }\r\n\r\n\r\n    function getJPValue(uint _blockNum, uint _ticketPrice) internal view returns (uint) {\r\n        return _calcJP(_ticketPrice, blocks[_blockNum-1], winBlocks[_blockNum].value);\r\n    }\r\n\r\n\r\n    function _calcJP(uint _ticketPrice, uint _varB, uint _varX) internal view returns (uint) {\r\n        uint varA = _ticketPrice;\r\n        uint varB = _varB; //blocks[blockNum-1]\r\n        uint varX = _varX; //winBlocks[blockNum].value\r\n\r\n        uint varL = varA.mul(1000).div(divider).div(1000000000000000000);\r\n        uint minjp = minWei.mul(25);\r\n        varL = varL.mul(minjp);\r\n\r\n        uint varR = varA.mul(10000).div(varB);\r\n        uint varX1 = varX.mul(1023);\r\n        varR = varR.mul(varX1).div(100000000);\r\n\r\n        return varL.add(varR);\r\n    }\r\n\r\n\r\n    function changeTicketWeiLimit(uint _minWei, uint _maxWei, uint _divider) onlyOwner public {\r\n        minWei = _minWei;\r\n        maxWei = _maxWei;\r\n        divider = _divider;\r\n        emit NewPrice(minWei,maxWei);\r\n    }\r\n\r\n\r\n    function changeWeiPerBlock(uint _value) onlyOwner public {\r\n        maxWeiPerBlock = _value;\r\n        emit NewWeiPerBlock(maxWeiPerBlock);\r\n    }\r\n\r\n\r\n    function returnDeposit() onlyOwner public {\r\n        require(address(this).balance \u003E= depositWeis);\r\n        uint deposit = depositWeis;\r\n        depositWeis = 0;\r\n        owner.transfer(deposit);\r\n    }\r\n\r\n\r\n    function transferEthersToDividendManager() public {\r\n        require(now \u003E= lastPayout.add(7 days) );\r\n        require(address(this).balance \u003E= ownersWeis);\r\n        require(ownersWeis \u003E 0);\r\n        lastPayout = now;\r\n        uint dividends = ownersWeis;\r\n        ownersWeis = 0;\r\n\r\n        devWallet.transfer(valueFromPercent(dividends,15000));\r\n        ownerWallet1.transfer(valueFromPercent(dividends,5000));\r\n        ownerWallet2.transfer(valueFromPercent(dividends,30000));\r\n        ownerWallet3.transfer(valueFromPercent(dividends,35000));\r\n\r\n        DividendManagerInterface dividendManager = DividendManagerInterface(dividendManagerAddress);\r\n        dividendManager.depositDividend.value(valueFromPercent(dividends,15000))();\r\n\r\n        emit FundsTransferred(dividendManagerAddress, dividends);\r\n    }\r\n\r\n\r\n    function addEth() public payable {\r\n        depositWeis = depositWeis.add(msg.value);\r\n    }\r\n\r\n\r\n    function fromHexChar(uint8 _c) internal pure returns (uint8) {\r\n        return _c - (_c \u003C 58 ? 48 : (_c \u003C 97 ? 55 : 87));\r\n    }\r\n\r\n\r\n    function getByte(bytes memory res) internal pure returns (uint8) {\r\n        return fromHexChar(uint8(res[62])) \u003C\u003C 4 | fromHexChar(uint8(res[63]));\r\n    }\r\n\r\n\r\n    function withdrawRefsPercent() external {\r\n        require(refs[msg.sender] \u003E 0);\r\n        require(address(this).balance \u003E= refs[msg.sender]);\r\n        uint val = refs[msg.sender];\r\n        refs[msg.sender] = 0;\r\n        msg.sender.transfer(val);\r\n    }\r\n\r\n\r\n    function valueFromPercent(uint _value, uint _percent) internal pure returns(uint quotient) {\r\n        uint _quotient = _value.mul(_percent).div(100000);\r\n        return ( _quotient);\r\n    }\r\n\r\n    /// @notice This method can be used by the owner to extract mistakenly\r\n    ///  sent tokens to this contract.\r\n    /// @param _token The address of the token contract that you want to recover\r\n    ///  set to 0 in case you want to extract ether.\r\n    function claimTokens(address _token) onlyOwner external {\r\n        ERC20 token = ERC20(_token);\r\n        uint balance = token.balanceOf(address(this));\r\n        token.transfer(owner, balance);\r\n    }\r\n}","ABI":"[{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022maxWei\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022prizePercent\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022depositWeis\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_minWei\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_maxWei\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_divider\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022changeTicketWeiLimit\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022withdrawRefsPercent\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022allTicketsPrice\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022dividendManagerAddress\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022userRefs\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022winBlocks\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022exists\u0022,\u0022type\u0022:\u0022bool\u0022},{\u0022name\u0022:\u0022lastByte\u0022,\u0022type\u0022:\u0022uint8\u0022},{\u0022name\u0022:\u0022rate\u0022,\u0022type\u0022:\u0022uint8\u0022},{\u0022name\u0022:\u0022jp\u0022,\u0022type\u0022:\u0022bool\u0022},{\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022ownersPercent\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022refPercent\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022ownersWeis\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022allTicketsForBlock\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022maxWeiPerBlock\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022refs\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022returnDeposit\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_dividendManagerAddress\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022setDividendManager\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022owner\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022devWallet\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_blockNum\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022getPrize\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022JPBlocks\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022changeWeiPerBlock\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_wallet1\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_wallet2\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_wallet3\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022setOwnerWallet\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022minWei\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_blockNum\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022minJackpotValue\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022lastPayout\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022ownerWallet1\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022ownerWallet3\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_blockNum\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022addWinBlock\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022addEth\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:true,\u0022stateMutability\u0022:\u0022payable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022transferEthersToDividendManager\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022tickets\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022executed\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_token\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022claimTokens\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_blockNum\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_ticketPrice\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022jackpotValue\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_ref\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022play\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022blocks\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022admin\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022ownerWallet2\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022constructor\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022owner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022blockNum\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022referrer\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022NewTicket\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022minWei\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022maxWei\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022NewPrice\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022newWeiPerBlock\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022NewWeiPerBlock\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022owner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022blockNum\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022SendPrize\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022dividendManager\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022FundsTransferred\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022blockNum\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022WinBlockAdded\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022previousOwner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022OwnershipTransferred\u0022,\u0022type\u0022:\u0022event\u0022}]","ContractName":"EtherWin","CompilerVersion":"v0.5.9\u002Bcommit.e560f70d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://a71f497992b7a88b7a9423f71c1f1d943780832268057d6b323106d6caab24ee"}]