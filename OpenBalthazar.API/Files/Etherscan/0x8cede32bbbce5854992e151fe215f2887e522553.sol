[{"SourceCode":"/*\r\n|| THE LEXDAO REGISTRY (TLDR) || version 0.3\r\n\r\nDEAR MSG.SENDER(S):\r\n\r\n/ TLDR is a project in beta.\r\n// Please audit and use at your own risk.\r\n/// Entry into TLDR shall not create an attorney/client relationship.\r\n//// Likewise, TLDR should not be construed as legal advice or replacement for professional counsel.\r\n\r\n///// STEAL THIS C0D3SL4W \r\n\r\n|| lexDAO || \r\n~presented by Open, ESQ LLC_DAO~\r\n\u003C https://mainnet.aragon.org/#/openesquire/ \u003E\r\n*/\r\n\r\npragma solidity 0.5.9;\r\n\r\n/***************\r\nOPENZEPPELIN REFERENCE CONTRACTS - SafeMath, ScribeRole, ERC-20 transactional scripts\r\n***************/\r\n/**\r\n * @dev Wrappers over Solidity\u0027s arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * \u0060SafeMath\u0060 restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it\u0027s recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060\u002B\u0060 operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a \u002B b;\r\n        require(c \u003E= a, \u0022SafeMath: addition overflow\u0022);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060-\u0060 operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \u0022SafeMath: subtraction overflow\u0022);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060-\u0060 operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * NOTE: This is a feature of the next version of OpenZeppelin Contracts.\r\n     * @dev Get it via \u0060npm install @openzeppelin/contracts@next\u0060.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b \u003C= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060*\u0060 operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\r\n        // benefit is lost if \u0027b\u0027 is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \u0022SafeMath: multiplication overflow\u0022);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060/\u0060 operator. Note: this function uses a\r\n     * \u0060revert\u0060 opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \u0022SafeMath: division by zero\u0022);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060/\u0060 operator. Note: this function uses a\r\n     * \u0060revert\u0060 opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     * NOTE: This is a feature of the next version of OpenZeppelin Contracts.\r\n     * @dev Get it via \u0060npm install @openzeppelin/contracts@next\u0060.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b \u003E 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c \u002B a % b); // There is no case in which this doesn\u0027t hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060%\u0060 operator. This function uses a \u0060revert\u0060\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \u0022SafeMath: modulo by zero\u0022);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060%\u0060 operator. This function uses a \u0060revert\u0060\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * NOTE: This is a feature of the next version of OpenZeppelin Contracts.\r\n     * @dev Get it via \u0060npm install @openzeppelin/contracts@next\u0060.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address =\u003E bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev Give an account access to this role.\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(!has(role, account), \u0022Roles: account already has role\u0022);\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Remove an account\u0027s access to this role.\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(has(role, account), \u0022Roles: account does not have role\u0022);\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Check if an account has this role.\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0), \u0022Roles: account is the zero address\u0022);\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract ScribeRole is Context {\r\n    using Roles for Roles.Role;\r\n\r\n    event ScribeAdded(address indexed account);\r\n    event ScribeRemoved(address indexed account);\r\n\r\n    Roles.Role private _Scribes;\r\n\r\n    constructor () internal {\r\n        _addScribe(_msgSender());\r\n    }\r\n\r\n    modifier onlyScribe() {\r\n        require(isScribe(_msgSender()), \u0022ScribeRole: caller does not have the Scribe role\u0022);\r\n        _;\r\n    }\r\n\r\n    function isScribe(address account) public view returns (bool) {\r\n        return _Scribes.has(account);\r\n    }\r\n\r\n    function renounceScribe() public {\r\n        _removeScribe(_msgSender());\r\n    }\r\n\r\n    function _addScribe(address account) internal {\r\n        _Scribes.add(account);\r\n        emit ScribeAdded(account);\r\n    }\r\n\r\n    function _removeScribe(address account) internal {\r\n        _Scribes.remove(account);\r\n        emit ScribeRemoved(account);\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by \u0060account\u0060.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves \u0060amount\u0060 tokens from the caller\u0027s account to \u0060recipient\u0060.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that \u0060spender\u0060 will be\r\n     * allowed to spend on behalf of \u0060owner\u0060 through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets \u0060amount\u0060 as the allowance of \u0060spender\u0060 over the caller\u0027s tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves \u0060amount\u0060 tokens from \u0060sender\u0060 to \u0060recipient\u0060 using the\r\n     * allowance mechanism. \u0060amount\u0060 is then deducted from the caller\u0027s\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when \u0060value\u0060 tokens are moved from one account (\u0060from\u0060) to\r\n     * another (\u0060to\u0060).\r\n     *\r\n     * Note that \u0060value\u0060 may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a \u0060spender\u0060 for an \u0060owner\u0060 is set by\r\n     * a call to {approve}. \u0060value\u0060 is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20Mintable}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning \u0060false\u0060 on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn\u0027t required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address =\u003E uint256) private _balances;\r\n\r\n    mapping (address =\u003E mapping (address =\u003E uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - \u0060recipient\u0060 cannot be the zero address.\r\n     * - the caller must have a balance of at least \u0060amount\u0060.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - \u0060spender\u0060 cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - \u0060sender\u0060 and \u0060recipient\u0060 cannot be the zero address.\r\n     * - \u0060sender\u0060 must have a balance of at least \u0060amount\u0060.\r\n     * - the caller must have allowance for \u0060sender\u0060\u0027s tokens of at least\r\n     * \u0060amount\u0060.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \u0022ERC20: transfer amount exceeds allowance\u0022));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to \u0060spender\u0060 by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - \u0060spender\u0060 cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to \u0060spender\u0060 by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - \u0060spender\u0060 cannot be the zero address.\r\n     * - \u0060spender\u0060 must have allowance for the caller of at least\r\n     * \u0060subtractedValue\u0060.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \u0022ERC20: decreased allowance below zero\u0022));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens \u0060amount\u0060 from \u0060sender\u0060 to \u0060recipient\u0060.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - \u0060sender\u0060 cannot be the zero address.\r\n     * - \u0060recipient\u0060 cannot be the zero address.\r\n     * - \u0060sender\u0060 must have a balance of at least \u0060amount\u0060.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \u0022ERC20: transfer from the zero address\u0022);\r\n        require(recipient != address(0), \u0022ERC20: transfer to the zero address\u0022);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \u0022ERC20: transfer amount exceeds balance\u0022);\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates \u0060amount\u0060 tokens and assigns them to \u0060account\u0060, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with \u0060from\u0060 set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - \u0060to\u0060 cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \u0022ERC20: mint to the zero address\u0022);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys \u0060amount\u0060 tokens from \u0060account\u0060, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with \u0060to\u0060 set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - \u0060account\u0060 cannot be the zero address.\r\n     * - \u0060account\u0060 must have at least \u0060amount\u0060 tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != address(0), \u0022ERC20: burn from the zero address\u0022);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \u0022ERC20: burn amount exceeds balance\u0022);\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets \u0060amount\u0060 as the allowance of \u0060spender\u0060 over the \u0060owner\u0060s tokens.\r\n     *\r\n     * This is internal function is equivalent to \u0060approve\u0060, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - \u0060owner\u0060 cannot be the zero address.\r\n     * - \u0060spender\u0060 cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal {\r\n        require(owner != address(0), \u0022ERC20: approve from the zero address\u0022);\r\n        require(spender != address(0), \u0022ERC20: approve to the zero address\u0022);\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys \u0060amount\u0060 tokens from \u0060account\u0060.\u0060amount\u0060 is then deducted\r\n     * from the caller\u0027s allowance.\r\n     *\r\n     * See {_burn} and {_approve}.\r\n     */\r\n    function _burnFrom(address account, uint256 amount) internal {\r\n        _burn(account, amount);\r\n        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \u0022ERC20: burn amount exceeds allowance\u0022));\r\n    }\r\n}\r\n\r\n/***************\r\nTLDR CONTRACT\r\n***************/\r\ncontract TLDR is ScribeRole, ERC20 { // TLDR: Curated covenant \u0026 escrow scriptbase with incentivized arbitration \r\n    using SafeMath for uint256;\r\n    \r\n    // lexDAO reference for lexScribe reputation governance fees (\u039E)\r\n    address payable public lexDAO;\r\n\t\r\n    // TLDR (LEX) ERC-20 token references \r\n    address public tldrAddress = address(this);\r\n    ERC20 tldrToken = ERC20(tldrAddress); \r\n    \r\n    string public name = \u0022TLDR\u0022;\r\n    string public symbol = \u0022LEX\u0022;\r\n    uint8 public decimals = 18;\r\n\t\r\n    // counters for lexScribe lexScriptWrapper and registered DR (rdr) / DC (rdc)\r\n    uint256 public LSW; // number of lexScriptWrapper enscribed \r\n    uint256 public RDC; // number of rdc\r\n    uint256 public RDR; // number of rdr\r\n\t\r\n    // mapping for lexScribe reputation governance program\r\n    mapping(address =\u003E uint256) public reputation; // mapping lexScribe reputation points \r\n    mapping(address =\u003E uint256) public lastActionTimestamp; // mapping Unix timestamp of lexScribe governance actions (cooldown)\r\n    mapping(address =\u003E uint256) public lastSuperActionTimestamp; // mapping Unix timestamp of material lexScribe governance actions requiring longer cooldown (icedown)\r\n    \r\n    // mapping for stored lexScript wrappers and registered digital retainers (DR / rdr)\r\n    mapping (uint256 =\u003E lexScriptWrapper) public lexScript; // mapping registered lexScript \u0027wet code\u0027 templates\r\n    mapping (uint256 =\u003E DC) public rdc; // mapping rdc call numbers for inspection and signature revocation\r\n    mapping (uint256 =\u003E DR) public rdr; // mapping rdr call numbers for inspection and scripted payments\r\n\t\r\n    struct lexScriptWrapper { // LSW: rdr lexScript templates maintained by lexScribes\r\n        address lexScribe; // lexScribe (0x) address that enscribed lexScript template into TLDR / can make subsequent edits (lexVersion)\r\n        address lexAddress; // (0x) address to receive lexScript wrapper lexFee / adjustable by associated lexScribe\r\n        string templateTerms; // lexScript template terms to wrap rdr with legal security\r\n        uint256 lexID; // number to reference in rdr to import lexScript terms\r\n        uint256 lexVersion; // version number to mark lexScribe edits\r\n        uint256 lexRate; // fixed divisible rate for lexFee in drToken per rdr payment made thereunder / e.g., 100 = 1% lexFee on rdr payDR transaction\r\n    }\r\n        \r\n    struct DC { // Digital Covenant lexScript templates maintained by lexScribes\r\n        address signatory; // DC signatory (0x) address\r\n        string templateTerms; // DC templateTerms imported from referenced lexScriptWrapper\r\n        string signatureDetails; // DC may include signatory name or other supplementary info\r\n        uint256 lexID; // lexID number reference to include lexScriptWrapper for legal security \r\n        uint256 dcNumber; // DC number generated on signed covenant registration / identifies DC for signatory revocation \r\n        uint256 timeStamp; // block.timestamp (\u0022now\u0022) of DC registration \r\n        bool revoked; // tracks signatory revocation status on DC\r\n    }\r\n    \t\r\n    struct DR { // Digital Retainer created on lexScript terms maintained by lexScribes / data registered for escrow script \r\n        address client; // rdr client (0x) address\r\n        address provider; // provider (0x) address that receives ERC-20 payments in exchange for goods or services (deliverable)\r\n        address drToken; // ERC-20 digital token (0x) address used to transfer value on Ethereum under rdr \r\n        string deliverable; // description of deliverable retained for benefit of Ethereum payments\r\n        uint256 lexID; // lexID number reference to include lexScriptWrapper for legal security / default \u00271\u0027 for generalized rdr lexScript template\r\n        uint256 drNumber; // rdr number generated on DR registration / identifies rdr for payDR function calls\r\n        uint256 timeStamp; // block.timestamp (\u0022now\u0022) of registration used to calculate retainerTermination UnixTime\r\n        uint256 retainerTermination; // termination date of rdr in UnixTime / locks payments to provider / after, remainder can be withrawn by client\r\n        uint256 deliverableRate; // rate for rdr deliverables in wei amount / 1 = 1000000000000000000\r\n        uint256 paid; // tracking amount of designated ERC-20 digital value paid under rdr in wei amount for payCap logic\r\n        uint256 payCap; // value cap limit on rdr payments in wei amount \r\n        bool confirmed; // tracks client countersignature status\r\n        bool disputed; // tracks dispute status from client or provider / if called, locks remainder of escrow rdr payments for reputable lexScribe resolution\r\n    }\r\n    \t\r\n    constructor(string memory tldrTerms, uint256 tldrLexRate, address tldrLexAddress, address payable _lexDAO) public { // deploys TLDR contract \u0026 stores base lexScript\r\n\t    reputation[msg.sender] = 1; // sets TLDR summoner lexScribe reputation to \u00271\u0027 initial value\r\n\t    lexDAO = _lexDAO; // sets initial lexDAO (0x) address \r\n\t\r\n\t    LSW = LSW.add(1); // counts initial \u0027tldr\u0027 entry to LSW\r\n\t    \r\n\t    lexScript[1] = lexScriptWrapper( // populates default \u00271\u0027 lexScript data for reference in LSW and rdr\r\n                msg.sender,\r\n                tldrLexAddress,\r\n                tldrTerms,\r\n                1,\r\n                0,\r\n                tldrLexRate);\r\n    }\r\n        \r\n    // TLDR Contract Events\r\n    event Enscribed(uint256 indexed lexID, uint256 indexed lexVersion, address indexed lexScribe); // triggered on successful LSW creation / edits to LSW\r\n    event Signed(uint256 indexed lexID, uint256 indexed dcNumber, address indexed signatory); // triggered on successful DC creation / edits to DC \r\n    event Registered(uint256 indexed drNumber, uint256 indexed lexID, address indexed provider); // triggered on successful rdr \r\n    event Confirmed(uint256 indexed drNumber, uint256 indexed lexID, address indexed client); // triggered on successful rdr confirmation\r\n    event Paid(uint256 indexed drNumber, uint256 indexed lexID); // triggered on successful rdr payments\r\n    event Disputed(uint256 indexed drNumber); // triggered on rdr dispute\r\n    event Resolved(uint256 indexed drNumber); // triggered on successful rdr dispute resolution\r\n    \r\n    /***************\r\n    TLDR GOVERNANCE FUNCTIONS\r\n    ***************/   \r\n    // restricts lexScribe TLDR reputation governance function calls to once per day (cooldown)\r\n    modifier cooldown() {\r\n        require(now.sub(lastActionTimestamp[msg.sender]) \u003E 1 days); // enforces cooldown period\r\n        _;\r\n        \r\n\t    lastActionTimestamp[msg.sender] = now; // block.timestamp, \u0022now\u0022\r\n    }\r\n        \r\n    // restricts material lexScribe TLDR reputation staking and lexDAO governance function calls to once per 90 days (icedown)\r\n    modifier icedown() {\r\n        require(now.sub(lastSuperActionTimestamp[msg.sender]) \u003E 90 days); // enforces icedown period\r\n        _;\r\n        \r\n\t    lastSuperActionTimestamp[msg.sender] = now; // block.timestamp, \u0022now\u0022\r\n    }\r\n    \r\n    // lexDAO can add new lexScribe to maintain TLDR\r\n    function addScribe(address account) public {\r\n        require(msg.sender == lexDAO);\r\n        _addScribe(account);\r\n\t    reputation[account] = 1;\r\n    }\r\n    \r\n    // lexDAO can remove lexScribe from TLDR / slash reputation\r\n    function removeScribe(address account) public {\r\n        require(msg.sender == lexDAO);\r\n        _removeScribe(account);\r\n\t    reputation[account] = 0;\r\n    }\r\n    \r\n    // lexDAO can update (0x) address receiving reputation governance stakes (\u039E) / maintaining lexScribe registry\r\n    function updateLexDAO(address payable newLexDAO) public {\r\n    \trequire(msg.sender == lexDAO);\r\n        require(newLexDAO != address(0)); // program safety check / newLexDAO cannot be \u00220\u0022 burn address\r\n        \r\n\t    lexDAO = newLexDAO; // updates lexDAO (0x) address\r\n    }\r\n        \r\n    // lexScribes can submit ether (\u039E) value for TLDR reputation and special TLDR function access (TLDR write privileges, rdr dispute resolution role) \r\n    function submitETHreputation() payable public onlyScribe icedown {\r\n        require(msg.value == 0.1 ether); // tenth of ether (\u039E) fee for refreshing reputation in lexDAO\r\n        \r\n\t    reputation[msg.sender] = 3; // sets / refreshes lexScribe reputation to \u00273\u0027 max value, \u0027three strikes, you\u0027re out\u0027 buffer\r\n        \r\n\t    address(lexDAO).transfer(msg.value); // transfers ether value (\u039E) to designated lexDAO (0x) address\r\n    }\r\n    \r\n    // lexScribes can burn minted LEX value for TLDR reputation \r\n    function submitLEXreputation() public onlyScribe icedown { \r\n\t    _burn(_msgSender(), 10000000000000000000); // 10 LEX burned \r\n        \r\n\t    reputation[msg.sender] = 3; // sets / refreshes lexScribe reputation to \u00273\u0027 max value, \u0027three strikes, you\u0027re out\u0027 buffer\r\n    }\r\n         \r\n    // public check on lexScribe reputation status\r\n    function isReputable(address x) public view returns (bool) { // returns true if lexScribe is reputable\r\n        return reputation[x] \u003E 0;\r\n    }\r\n        \r\n    // reputable lexScribes can reduce reputation within cooldown period \r\n    function reduceScribeRep(address reducedLexScribe) cooldown public {\r\n        require(isReputable(msg.sender)); // program governance check / lexScribe must be reputable\r\n        require(msg.sender != reducedLexScribe); // program governance check / cannot reduce own reputation\r\n        \r\n\t    reputation[reducedLexScribe] = reputation[reducedLexScribe].sub(1); // reduces reputation by \u00221\u0022\r\n    }\r\n        \r\n    // reputable lexScribes can repair reputation within cooldown period\r\n    function repairScribeRep(address repairedLexScribe) cooldown public {\r\n        require(isReputable(msg.sender)); // program governance check / lexScribe must be reputable\r\n        require(msg.sender != repairedLexScribe); // program governance check / cannot repair own reputation\r\n        require(reputation[repairedLexScribe] \u003C 3); // program governance check / cannot repair fully reputable lexScribe\r\n        require(reputation[repairedLexScribe] \u003E 0); // program governance check / cannot repair disreputable lexScribe \r\n        \r\n\t    reputation[repairedLexScribe] = reputation[repairedLexScribe].add(1); // repairs reputation by \u00221\u0022\r\n    }\r\n       \r\n    /***************\r\n    TLDR LEXSCRIBE FUNCTIONS\r\n    ***************/\r\n    // reputable lexScribes can register lexScript legal wrappers on TLDR and program ERC-20 lexFees associated with lexID / LEX mint, \u00221\u0022\r\n    function writeLexScript(string memory templateTerms, uint256 lexRate, address lexAddress) public {\r\n        require(isReputable(msg.sender)); // program governance check / lexScribe must be reputable \r\n\t\r\n\t    uint256 lexID = LSW.add(1); // reflects new lexScript value for tracking lexScript wrappers\r\n\t    LSW = LSW.add(1); // counts new entry to LSW \r\n\t    \r\n\t    lexScript[lexID] = lexScriptWrapper( // populate lexScript data for rdr / rdc usage\r\n                msg.sender,\r\n                lexAddress,\r\n                templateTerms,\r\n                lexID,\r\n                0,\r\n                lexRate);\r\n                \r\n        _mint(msg.sender, 1000000000000000000); // mints lexScribe \u00221\u0022 LEX for contribution to TLDR\r\n\t\r\n        emit Enscribed(lexID, 0, msg.sender); \r\n    }\r\n\t    \r\n    // lexScribes can update TLDR lexScript wrappers with new templateTerms and (0x) newLexAddress / version up LSW\r\n    function editLexScript(uint256 lexID, string memory templateTerms, address lexAddress) public {\r\n\t    lexScriptWrapper storage lS = lexScript[lexID]; // retrieve LSW data\r\n\t\r\n\t    require(msg.sender == lS.lexScribe); // program safety check / authorization \r\n\t\r\n\t    uint256 lexVersion = lS.lexVersion.add(1); // updates lexVersion \r\n\t    \r\n\t    lexScript[lexID] = lexScriptWrapper( // populates updated lexScript data for rdr / rdc usage\r\n                msg.sender,\r\n                lexAddress,\r\n                templateTerms,\r\n                lexID,\r\n                lexVersion,\r\n                lS.lexRate);\r\n                \t\r\n        emit Enscribed(lexID, lexVersion, msg.sender);\r\n    }\r\n\r\n    /***************\r\n    TLDR MARKET FUNCTIONS\r\n    ***************/\r\n    // public can sign and associate (0x) identity with lexScript digital covenant wrapper \r\n    function signDC(uint256 lexID, string memory signatureDetails) public { // sign Digital Covenant with (0x) address\r\n\t    require(lexID \u003E (0)); // program safety check\r\n\t    require(lexID \u003C= LSW); // program safety check\r\n\t    lexScriptWrapper storage lS = lexScript[lexID]; // retrieve LSW data\r\n\t\r\n\t    uint256 dcNumber = RDC.add(1); // reflects new rdc value for public inspection and signature revocation\r\n\t    RDC = RDC.add(1); // counts new entry to RDC\r\n\t        \r\n\t    rdc[dcNumber] = DC( // populates rdc data\r\n                msg.sender,\r\n                lS.templateTerms,\r\n                signatureDetails,\r\n                lexID,\r\n                dcNumber,\r\n                now, \r\n                false);\r\n                \t\r\n        emit Signed(lexID, dcNumber, msg.sender);\r\n    }\r\n    \t\r\n    // registered DC signatories can revoke (0x) signature  \r\n    function revokeDC(uint256 dcNumber) public { // revoke Digital Covenant signature with (0x) address\r\n\t    DC storage dc = rdc[dcNumber]; // retrieve rdc data\r\n\t\r\n\t    require(msg.sender == dc.signatory); // program safety check / authorization\r\n\t    \r\n\t    rdc[dcNumber] = DC(// updates rdc data\r\n                msg.sender,\r\n                \u0022Signature Revoked\u0022, // replaces Digital Covenant terms with revocation message\r\n                dc.signatureDetails,\r\n                dc.lexID,\r\n                dc.dcNumber,\r\n                now, // updates to revocation block.timestamp\r\n                true); // reflects revocation status\r\n                \t\r\n        emit Signed(dc.lexID, dcNumber, msg.sender);\r\n    }\r\n    \r\n    // goods and/or service providers can register DR with TLDR lexScript (lexID) \r\n    function registerDR( // rdr \r\n    \taddress client,\r\n    \taddress drToken,\r\n    \tstring memory deliverable,\r\n        uint256 retainerDuration,\r\n    \tuint256 deliverableRate,\r\n    \tuint256 payCap,\r\n    \tuint256 lexID) public {\r\n    \trequire(lexID \u003E (0)); // program safety check \r\n    \trequire(lexID \u003C= LSW); // program safety check \r\n        require(deliverableRate \u003C= payCap); // program safety check / economics\r\n        \r\n\t    uint256 drNumber = RDR.add(1); // reflects new rdr value for inspection and escrow management\r\n        uint256 retainerTermination = now.add(retainerDuration); // rdr termination date in UnixTime, \u0022now\u0022 block.timestamp \u002B retainerDuration\r\n\r\n\t    RDR = RDR.add(1); // counts new entry to RDR\r\n                \r\n            rdr[drNumber] = DR( // populate rdr data \r\n                client,\r\n                msg.sender,\r\n                drToken,\r\n                deliverable,\r\n                lexID,\r\n                drNumber,\r\n                now, // block.timestamp, \u0022now\u0022\r\n                retainerTermination,\r\n                deliverableRate,\r\n                0,\r\n                payCap,\r\n                false,\r\n                false);\r\n        \t \r\n        emit Registered(drNumber, lexID, msg.sender); \r\n    }\r\n\r\n    // rdr client can confirm rdr offer script and countersign drNumber / trigger escrow deposit in approved payCap amount\r\n    function confirmDR(uint256 drNumber) public {\r\n        DR storage dr = rdr[drNumber]; // retrieve rdr data\r\n\r\n        require(dr.confirmed == false); // program safety check / status\r\n        require(now \u003C= dr.retainerTermination); // program safety check / time\r\n        require(msg.sender == dr.client); // program safety check / authorization\r\n        \r\n        dr.confirmed = true; // reflect rdr client countersignature\r\n        ERC20 drTokenERC20 = ERC20(dr.drToken);\r\n        drTokenERC20.transferFrom(msg.sender, address(this), dr.payCap); // escrows payCap amount in approved drToken into TLDR \r\n    \r\n        emit Confirmed(drNumber, dr.lexID, msg.sender);\r\n    }\r\n         \r\n    // rdr client can call to delegate role\r\n    function delegateDRclient(uint256 drNumber, address clientDelegate) public {\r\n        DR storage dr = rdr[drNumber]; // retrieve rdr data\r\n        \r\n        require(dr.disputed == false); // program safety check / status\r\n        require(now \u003C= dr.retainerTermination); // program safety check / time\r\n        require(msg.sender == dr.client); // program safety check / authorization\r\n        require(dr.paid \u003C dr.payCap); // program safety check / economics\r\n        \r\n        dr.client = clientDelegate; // updates rdr client address to delegate\r\n    }\r\n    \r\n    // rdr parties can initiate dispute and lock escrowed remainder of rdr payCap in TLDR until resolution by reputable lexScribe\r\n    function disputeDR(uint256 drNumber) public {\r\n        DR storage dr = rdr[drNumber]; // retrieve rdr data\r\n        \r\n        require(dr.confirmed == true); // program safety check / status\r\n\t    require(dr.disputed == false); // program safety check / status\r\n        require(now \u003C= dr.retainerTermination); // program safety check / time\r\n        require(msg.sender == dr.client || msg.sender == dr.provider); // program safety check / authorization\r\n\t    require(dr.paid \u003C dr.payCap); // program safety check / economics\r\n        \r\n\t    dr.disputed = true; // updates rdr value to reflect dispute status, \u0022true\u0022\r\n\t    \r\n\t    emit Disputed(drNumber);\r\n    }\r\n    \r\n    // reputable lexScribe can resolve rdr dispute with division of remaining payCap amount in wei accounting for 5% fee / LEX mint, \u00221\u0022\r\n    function resolveDR(uint256 drNumber, uint256 clientAward, uint256 providerAward) public {\r\n        DR storage dr = rdr[drNumber]; // retrieve rdr data\r\n\t\r\n\t    uint256 remainder = dr.payCap.sub(dr.paid); // alias remainder rdr wei amount for rdr resolution reference\r\n\t    uint256 resolutionFee = remainder.div(20); // calculates 5% lexScribe dispute resolution fee\r\n\t\r\n\t    require(dr.disputed == true); // program safety check / status\r\n\t    require(clientAward.add(providerAward) == remainder.sub(resolutionFee)); // program safety check / economics\r\n        require(msg.sender != dr.client); // program safety check / authorization / client cannot resolve own dispute as lexScribe\r\n        require(msg.sender != dr.provider); // program safety check / authorization / provider cannot resolve own dispute as lexScribe\r\n        require(isReputable(msg.sender)); // program governance check / resolving lexScribe must be reputable\r\n\t    require(balanceOf(msg.sender) \u003E= 5000000000000000000); // program governance check / resolving lexScribe must have at least \u00225\u0022 LEX balance\r\n\t\r\n        ERC20 drTokenERC20 = ERC20(dr.drToken);\r\n        drTokenERC20.transfer(dr.client, clientAward); // executes ERC-20 award transfer to rdr client\r\n        drTokenERC20.transfer(dr.provider, providerAward); // executes ERC-20 award transfer to rdr provider\r\n    \tdrTokenERC20.transfer(msg.sender, resolutionFee); // executes ERC-20 fee transfer to resolving lexScribe\r\n    \t\r\n    \t_mint(msg.sender, 1000000000000000000); // mints resolving lexScribe \u00221\u0022 LEX for contribution to TLDR\r\n\t\r\n\t    dr.paid = dr.paid.add(remainder); // tallies remainder to paid wei amount to reflect rdr closure\r\n\t    \r\n\t    emit Resolved(drNumber);\r\n    }\r\n    \r\n    // client can call to pay rdr on TLDR\r\n    function payDR(uint256 drNumber) public { // releases escrowed drToken deliverableRate amount to provider (0x) address / lexFee for attached lexID lexAddress\r\n    \tDR storage dr = rdr[drNumber]; // retrieve rdr data\r\n    \tlexScriptWrapper storage lS = lexScript[dr.lexID]; // retrieve LSW data\r\n\t\r\n\t    require(dr.confirmed == true); // program safety check / status\r\n\t    require(dr.disputed == false); // program safety check / status\r\n    \trequire(now \u003C= dr.retainerTermination); // program safety check / time\r\n    \trequire(msg.sender == dr.client); // program safety check / authorization\r\n    \trequire(dr.paid.add(dr.deliverableRate) \u003C= dr.payCap); // program safety check / economics\r\n\t\r\n    \tuint256 lexFee = dr.deliverableRate.div(lS.lexRate); // derives lexFee from rdr deliverableRate\r\n\t\r\n        ERC20 drTokenERC20 = ERC20(dr.drToken);\r\n    \tdrTokenERC20.transfer(dr.provider, dr.deliverableRate.sub(lexFee)); // executes ERC-20 transfer to rdr provider in deliverableRate amount\r\n    \tdrTokenERC20.transfer(lS.lexAddress, lexFee); // executes ERC-20 transfer of lexFee to (0x) lexAddress identified in lexID\r\n    \tdr.paid = dr.paid.add(dr.deliverableRate); // tracks total ERC-20 wei amount paid under rdr / used to calculate rdr remainder\r\n        \r\n\t    emit Paid(drNumber, dr.lexID); \r\n    }\r\n    \r\n    // client can call to withdraw rdr remainder on TLDR after termination\r\n    function withdrawRemainder(uint256 drNumber) public {  \r\n    \tDR storage dr = rdr[drNumber]; // retrieve rdr data\r\n\t\r\n        require(dr.confirmed == true); // program safety check / status\r\n        require(dr.disputed == false); // program safety check / status\r\n    \trequire(now \u003E= dr.retainerTermination); // program safety check / time\r\n    \trequire(msg.sender == dr.client); // program safety check / authorization\r\n    \t\r\n    \tuint256 remainder = dr.payCap.sub(dr.paid); // derive rdr remainder\r\n    \tERC20 drTokenERC20 = ERC20(dr.drToken);\r\n\r\n    \trequire(remainder \u003E 0); // program safety check / economics\r\n\t\r\n    \tdrTokenERC20.transfer(dr.client, remainder); // executes ERC-20 transfer to rdr client in escrow remainder amount\r\n    \t\r\n    \tdr.paid = dr.paid.add(remainder); // tallies remainder to paid wei amount to reflect rdr closure\r\n    }\r\n}","ABI":"[{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022name\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022spender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022approve\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022dcNumber\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022revokeDC\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022lastActionTimestamp\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022drNumber\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022clientDelegate\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022delegateDRclient\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022drNumber\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022confirmDR\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022totalSupply\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022sender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022recipient\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022transferFrom\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022decimals\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint8\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022submitLEXreputation\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022client\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022drToken\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022deliverable\u0022,\u0022type\u0022:\u0022string\u0022},{\u0022name\u0022:\u0022retainerDuration\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022deliverableRate\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022payCap\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022lexID\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022registerDR\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022lastSuperActionTimestamp\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022spender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022addedValue\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022increaseAllowance\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022RDC\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022removeScribe\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022drNumber\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022clientAward\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022providerAward\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022resolveDR\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022lexDAO\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022lexID\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022templateTerms\u0022,\u0022type\u0022:\u0022string\u0022},{\u0022name\u0022:\u0022lexAddress\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022editLexScript\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022tldrAddress\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022drNumber\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022disputeDR\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022drNumber\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022payDR\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022renounceScribe\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022submitETHreputation\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:true,\u0022stateMutability\u0022:\u0022payable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022balanceOf\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022x\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022isReputable\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022drNumber\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022withdrawRemainder\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022repairedLexScribe\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022repairScribeRep\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022templateTerms\u0022,\u0022type\u0022:\u0022string\u0022},{\u0022name\u0022:\u0022lexRate\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022lexAddress\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022writeLexScript\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022symbol\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022RDR\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022spender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022subtractedValue\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022decreaseAllowance\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022lexScript\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022lexScribe\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022lexAddress\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022templateTerms\u0022,\u0022type\u0022:\u0022string\u0022},{\u0022name\u0022:\u0022lexID\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022lexVersion\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022lexRate\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022recipient\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022transfer\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022newLexDAO\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022updateLexDAO\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022reputation\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022addScribe\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022isScribe\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022rdc\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022signatory\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022templateTerms\u0022,\u0022type\u0022:\u0022string\u0022},{\u0022name\u0022:\u0022signatureDetails\u0022,\u0022type\u0022:\u0022string\u0022},{\u0022name\u0022:\u0022lexID\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022dcNumber\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022timeStamp\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022revoked\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022reducedLexScribe\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022reduceScribeRep\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022owner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022spender\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022allowance\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022rdr\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022client\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022provider\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022drToken\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022deliverable\u0022,\u0022type\u0022:\u0022string\u0022},{\u0022name\u0022:\u0022lexID\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022drNumber\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022timeStamp\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022retainerTermination\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022deliverableRate\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022paid\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022payCap\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022confirmed\u0022,\u0022type\u0022:\u0022bool\u0022},{\u0022name\u0022:\u0022disputed\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022lexID\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022signatureDetails\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022name\u0022:\u0022signDC\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022LSW\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[{\u0022name\u0022:\u0022tldrTerms\u0022,\u0022type\u0022:\u0022string\u0022},{\u0022name\u0022:\u0022tldrLexRate\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022tldrLexAddress\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_lexDAO\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022constructor\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022lexID\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022lexVersion\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022lexScribe\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022Enscribed\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022lexID\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022dcNumber\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022signatory\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022Signed\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022drNumber\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022lexID\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022provider\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022Registered\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022drNumber\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022lexID\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022client\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022Confirmed\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022drNumber\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022lexID\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022Paid\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022drNumber\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022Disputed\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022drNumber\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022Resolved\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022from\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022Transfer\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022owner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022spender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022Approval\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022ScribeAdded\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022ScribeRemoved\u0022,\u0022type\u0022:\u0022event\u0022}]","ContractName":"TLDR","CompilerVersion":"v0.5.9\u002Bcommit.e560f70d","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000001f40000000000000000000000001c0aa8ccd568d90d61659f060d1bfb1e6f855a200000000000000000000000001c0aa8ccd568d90d61659f060d1bfb1e6f855a2000000000000000000000000000000000000000000000000000000000000002f945737461626c697368696e672061206469676974616c2072657461696e657220616e642061636b6e6f776c656467696e67206d757475616c20636f6e73696465726174696f6e20616e642061677265656d656e74206865726562792c20436c69656e742c206964656e74696669656420627920457468657265756d20616464726573732030785b636c69656e745d2c20636f6d6d69747320746f206d616b65207061796d656e74732061732070726f76696465642068657265696e20756e6465722074686520544c4452207472616e73616374696f6e616c2073637269707420636170706564206174205b7061794361705d20756e6974732064656e6f6d696e6174656420696e2030785b646472546f6b656e5d20666f72207468652062656e65666974206f662050726f76696465722c206964656e74696669656420627920457468657265756d20616464726573732030785b70726f76696465725d2c20696e2065786368616e676520666f722070726f6d707420736174697366616374696f6e206f662074686520666f6c6c6f77696e672c205b64656c6976657261626c655d2c20746f20436c69656e742062792050726f76696465722075706f6e207363726970746564207061796d656e747320736574206174207468652072617465206f66205b64656c6976657261626c65526174655d20756e697473207065722064656c6976657261626c652c207769746820737563682072657461696e65722072656c6174696f6e73686970206e6f7420746f20657863656564205b72657461696e65724475726174696f6e5d207365636f6e647320616e6420746f20626520676f7665726e6564206279207468652063686f696365206f66204e657720596f726b206c617720616e6420276569746865722f6f7227206172626974726174696f6e2072756c65732061646d696e697374657265642062792061206c6578536372696265206163636f756e742072656769737465726564206f6e2074686520544c4452207472616e73616374696f6e616c207363726970742e00000000000000","Library":"","SwarmSource":"bzzr://1cfb765002bdd76431569afefd6a0a6a6734f22c5cb4870203dd8194522d7296"}]