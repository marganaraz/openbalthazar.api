[{"SourceCode":"pragma solidity ^0.5.8;\r\n\r\ncontract IERC1271 {\r\n  function isValidSignature(\r\n    bytes memory _messageHash,\r\n    bytes memory _signature)\r\n    public\r\n    view\r\n    returns (bytes4 magicValue);\r\n}\r\n\r\n/**\r\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\r\n *\r\n * These functions can be used to verify that a message was signed by the holder\r\n * of the private keys of a given address.\r\n */\r\nlibrary ECDSA {\r\n    /**\r\n     * @dev Returns the address that signed a hashed message (\u0060hash\u0060) with\r\n     * \u0060signature\u0060. This address can then be used for verification purposes.\r\n     *\r\n     * The \u0060ecrecover\u0060 EVM opcode allows for malleable (non-unique) signatures:\r\n     * this function rejects them by requiring the \u0060s\u0060 value to be in the lower\r\n     * half order, and the \u0060v\u0060 value to be either 27 or 28.\r\n     *\r\n     * (.note) This call _does not revert_ if the signature is invalid, or\r\n     * if the signer is otherwise unable to be retrieved. In those scenarios,\r\n     * the zero address is returned.\r\n     *\r\n     * (.warning) \u0060hash\u0060 _must_ be the result of a hash operation for the\r\n     * verification to be secure: it is possible to craft signatures that\r\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\r\n     * this is by receiving a hash of the original message (which may otherwise)\r\n     * be too long), and then calling \u0060toEthSignedMessageHash\u0060 on it.\r\n     */\r\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\r\n        // Check the signature length\r\n        if (signature.length != 65) {\r\n            return (address(0));\r\n        }\r\n\r\n        // Divide the signature in r, s and v variables\r\n        bytes32 r;\r\n        bytes32 s;\r\n        uint8 v;\r\n\r\n        // ecrecover takes the signature parameters, and the only way to get them\r\n        // currently is to use assembly.\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            r := mload(add(signature, 0x20))\r\n            s := mload(add(signature, 0x40))\r\n            v := byte(0, mload(add(signature, 0x60)))\r\n        }\r\n\r\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\r\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\r\n        // the valid range for s in (281): 0 \u003C s \u003C secp256k1n \u00F7 2 \u002B 1, and for v in (282): v \u2208 {27, 28}. Most\r\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\r\n        //\r\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\r\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\r\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\r\n        // these malleable signatures as well.\r\n        if (uint256(s) \u003E 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\r\n            return address(0);\r\n        }\r\n\r\n        if (v != 27 \u0026\u0026 v != 28) {\r\n            return address(0);\r\n        }\r\n\r\n        // If the signature is valid (and not malleable), return the signer address\r\n        return ecrecover(hash, v, r, s);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an Ethereum Signed Message, created from a \u0060hash\u0060. This\r\n     * replicates the behavior of the\r\n     * [\u0060eth_sign\u0060](https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign)\r\n     * JSON-RPC method.\r\n     *\r\n     * See \u0060recover\u0060.\r\n     */\r\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\r\n        // 32 is the length in bytes of hash,\r\n        // enforced by the type signature above\r\n        return keccak256(abi.encodePacked(\u0022\\x19Ethereum Signed Message:\\n32\u0022, hash));\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity\u0027s arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * \u0060SafeMath\u0060 restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it\u0027s recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060\u002B\u0060 operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a \u002B b;\r\n        require(c \u003E= a, \u0022SafeMath: addition overflow\u0022);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060-\u0060 operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b \u003C= a, \u0022SafeMath: subtraction overflow\u0022);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060*\u0060 operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\r\n        // benefit is lost if \u0027b\u0027 is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \u0022SafeMath: multiplication overflow\u0022);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060/\u0060 operator. Note: this function uses a\r\n     * \u0060revert\u0060 opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b \u003E 0, \u0022SafeMath: division by zero\u0022);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c \u002B a % b); // There is no case in which this doesn\u0027t hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060%\u0060 operator. This function uses a \u0060revert\u0060\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \u0022SafeMath: modulo by zero\u0022);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Initializable\r\n *\r\n * @dev Helper contract to support initializer functions. To use it, replace\r\n * the constructor with a function that has the \u0060initializer\u0060 modifier.\r\n * WARNING: Unlike constructors, initializer functions must be manually\r\n * invoked. This applies both to deploying an Initializable contract, as well\r\n * as extending an Initializable contract via inheritance.\r\n * WARNING: When used with inheritance, manual care must be taken to not invoke\r\n * a parent initializer twice, or ensure that all initializers are idempotent,\r\n * because this is not dealt with automatically as with constructors.\r\n */\r\ncontract Initializable {\r\n\r\n  /**\r\n   * @dev Indicates that the contract has been initialized.\r\n   */\r\n  bool private initialized;\r\n\r\n  /**\r\n   * @dev Indicates that the contract is in the process of being initialized.\r\n   */\r\n  bool private initializing;\r\n\r\n  /**\r\n   * @dev Modifier to use in the initializer function of a contract.\r\n   */\r\n  modifier initializer() {\r\n    require(initializing || isConstructor() || !initialized, \u0022Contract instance has already been initialized\u0022);\r\n\r\n    bool isTopLevelCall = !initializing;\r\n    if (isTopLevelCall) {\r\n      initializing = true;\r\n      initialized = true;\r\n    }\r\n\r\n    _;\r\n\r\n    if (isTopLevelCall) {\r\n      initializing = false;\r\n    }\r\n  }\r\n\r\n  /// @dev Returns true if and only if the function is running in the constructor\r\n  function isConstructor() private view returns (bool) {\r\n    // extcodesize checks the size of the code stored in an address, and\r\n    // address returns the current address. Since the code is still not\r\n    // deployed when running a constructor, any checks on its code size will\r\n    // yield zero, making it an effective way to detect if a contract is\r\n    // under construction or not.\r\n    uint256 cs;\r\n    assembly { cs := extcodesize(address) }\r\n    return cs == 0;\r\n  }\r\n\r\n  // Reserved storage space to allow for layout changes in the future.\r\n  uint256[50] private ______gap;\r\n}\r\n\r\nlibrary BytesLib {\r\n    function concat(\r\n        bytes memory _preBytes,\r\n        bytes memory _postBytes\r\n    )\r\n        internal\r\n        pure\r\n        returns (bytes memory)\r\n    {\r\n        bytes memory tempBytes;\r\n\r\n        assembly {\r\n            // Get a location of some free memory and store it in tempBytes as\r\n            // Solidity does for memory variables.\r\n            tempBytes := mload(0x40)\r\n\r\n            // Store the length of the first bytes array at the beginning of\r\n            // the memory for tempBytes.\r\n            let length := mload(_preBytes)\r\n            mstore(tempBytes, length)\r\n\r\n            // Maintain a memory counter for the current write location in the\r\n            // temp bytes array by adding the 32 bytes for the array length to\r\n            // the starting location.\r\n            let mc := add(tempBytes, 0x20)\r\n            // Stop copying when the memory counter reaches the length of the\r\n            // first bytes array.\r\n            let end := add(mc, length)\r\n\r\n            for {\r\n                // Initialize a copy counter to the start of the _preBytes data,\r\n                // 32 bytes into its memory.\r\n                let cc := add(_preBytes, 0x20)\r\n            } lt(mc, end) {\r\n                // Increase both counters by 32 bytes each iteration.\r\n                mc := add(mc, 0x20)\r\n                cc := add(cc, 0x20)\r\n            } {\r\n                // Write the _preBytes data into the tempBytes memory 32 bytes\r\n                // at a time.\r\n                mstore(mc, mload(cc))\r\n            }\r\n\r\n            // Add the length of _postBytes to the current length of tempBytes\r\n            // and store it as the new length in the first 32 bytes of the\r\n            // tempBytes memory.\r\n            length := mload(_postBytes)\r\n            mstore(tempBytes, add(length, mload(tempBytes)))\r\n\r\n            // Move the memory counter back from a multiple of 0x20 to the\r\n            // actual end of the _preBytes data.\r\n            mc := end\r\n            // Stop copying when the memory counter reaches the new combined\r\n            // length of the arrays.\r\n            end := add(mc, length)\r\n\r\n            for {\r\n                let cc := add(_postBytes, 0x20)\r\n            } lt(mc, end) {\r\n                mc := add(mc, 0x20)\r\n                cc := add(cc, 0x20)\r\n            } {\r\n                mstore(mc, mload(cc))\r\n            }\r\n\r\n            // Update the free-memory pointer by padding our last write location\r\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\r\n            // next 32 byte block, then round down to the nearest multiple of\r\n            // 32. If the sum of the length of the two arrays is zero then add \r\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\r\n            mstore(0x40, and(\r\n              add(add(end, iszero(add(length, mload(_preBytes)))), 31),\r\n              not(31) // Round down to the nearest 32 bytes.\r\n            ))\r\n        }\r\n\r\n        return tempBytes;\r\n    }\r\n\r\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\r\n        assembly {\r\n            // Read the first 32 bytes of _preBytes storage, which is the length\r\n            // of the array. (We don\u0027t need to use the offset into the slot\r\n            // because arrays use the entire slot.)\r\n            let fslot := sload(_preBytes_slot)\r\n            // Arrays of 31 bytes or less have an even value in their slot,\r\n            // while longer arrays have an odd value. The actual length is\r\n            // the slot divided by two for odd values, and the lowest order\r\n            // byte divided by two for even values.\r\n            // If the slot is even, bitwise and the slot with 255 and divide by\r\n            // two to get the length. If the slot is odd, bitwise and the slot\r\n            // with -1 and divide by two.\r\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\r\n            let mlength := mload(_postBytes)\r\n            let newlength := add(slength, mlength)\r\n            // slength can contain both the length and contents of the array\r\n            // if length \u003C 32 bytes so let\u0027s prepare for that\r\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\r\n            switch add(lt(slength, 32), lt(newlength, 32))\r\n            case 2 {\r\n                // Since the new array still fits in the slot, we just need to\r\n                // update the contents of the slot.\r\n                // uint256(bytes_storage) = uint256(bytes_storage) \u002B uint256(bytes_memory) \u002B new_length\r\n                sstore(\r\n                    _preBytes_slot,\r\n                    // all the modifications to the slot are inside this\r\n                    // next block\r\n                    add(\r\n                        // we can just add to the slot contents because the\r\n                        // bytes we want to change are the LSBs\r\n                        fslot,\r\n                        add(\r\n                            mul(\r\n                                div(\r\n                                    // load the bytes from memory\r\n                                    mload(add(_postBytes, 0x20)),\r\n                                    // zero all bytes to the right\r\n                                    exp(0x100, sub(32, mlength))\r\n                                ),\r\n                                // and now shift left the number of bytes to\r\n                                // leave space for the length in the slot\r\n                                exp(0x100, sub(32, newlength))\r\n                            ),\r\n                            // increase length by the double of the memory\r\n                            // bytes length\r\n                            mul(mlength, 2)\r\n                        )\r\n                    )\r\n                )\r\n            }\r\n            case 1 {\r\n                // The stored value fits in the slot, but the combined value\r\n                // will exceed it.\r\n                // get the keccak hash to get the contents of the array\r\n                mstore(0x0, _preBytes_slot)\r\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\r\n\r\n                // save new length\r\n                sstore(_preBytes_slot, add(mul(newlength, 2), 1))\r\n\r\n                // The contents of the _postBytes array start 32 bytes into\r\n                // the structure. Our first read should obtain the \u0060submod\u0060\r\n                // bytes that can fit into the unused space in the last word\r\n                // of the stored array. To get this, we read 32 bytes starting\r\n                // from \u0060submod\u0060, so the data we read overlaps with the array\r\n                // contents by \u0060submod\u0060 bytes. Masking the lowest-order\r\n                // \u0060submod\u0060 bytes allows us to add that value directly to the\r\n                // stored value.\r\n\r\n                let submod := sub(32, slength)\r\n                let mc := add(_postBytes, submod)\r\n                let end := add(_postBytes, mlength)\r\n                let mask := sub(exp(0x100, submod), 1)\r\n\r\n                sstore(\r\n                    sc,\r\n                    add(\r\n                        and(\r\n                            fslot,\r\n                            0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\r\n                        ),\r\n                        and(mload(mc), mask)\r\n                    )\r\n                )\r\n\r\n                for {\r\n                    mc := add(mc, 0x20)\r\n                    sc := add(sc, 1)\r\n                } lt(mc, end) {\r\n                    sc := add(sc, 1)\r\n                    mc := add(mc, 0x20)\r\n                } {\r\n                    sstore(sc, mload(mc))\r\n                }\r\n\r\n                mask := exp(0x100, sub(mc, end))\r\n\r\n                sstore(sc, mul(div(mload(mc), mask), mask))\r\n            }\r\n            default {\r\n                // get the keccak hash to get the contents of the array\r\n                mstore(0x0, _preBytes_slot)\r\n                // Start copying to the last used word of the stored array.\r\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\r\n\r\n                // save new length\r\n                sstore(_preBytes_slot, add(mul(newlength, 2), 1))\r\n\r\n                // Copy over the first \u0060submod\u0060 bytes of the new data as in\r\n                // case 1 above.\r\n                let slengthmod := mod(slength, 32)\r\n                let mlengthmod := mod(mlength, 32)\r\n                let submod := sub(32, slengthmod)\r\n                let mc := add(_postBytes, submod)\r\n                let end := add(_postBytes, mlength)\r\n                let mask := sub(exp(0x100, submod), 1)\r\n\r\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\r\n                \r\n                for { \r\n                    sc := add(sc, 1)\r\n                    mc := add(mc, 0x20)\r\n                } lt(mc, end) {\r\n                    sc := add(sc, 1)\r\n                    mc := add(mc, 0x20)\r\n                } {\r\n                    sstore(sc, mload(mc))\r\n                }\r\n\r\n                mask := exp(0x100, sub(mc, end))\r\n\r\n                sstore(sc, mul(div(mload(mc), mask), mask))\r\n            }\r\n        }\r\n    }\r\n\r\n    function slice(\r\n        bytes memory _bytes,\r\n        uint _start,\r\n        uint _length\r\n    )\r\n        internal\r\n        pure\r\n        returns (bytes memory)\r\n    {\r\n        require(_bytes.length \u003E= (_start \u002B _length));\r\n\r\n        bytes memory tempBytes;\r\n\r\n        assembly {\r\n            switch iszero(_length)\r\n            case 0 {\r\n                // Get a location of some free memory and store it in tempBytes as\r\n                // Solidity does for memory variables.\r\n                tempBytes := mload(0x40)\r\n\r\n                // The first word of the slice result is potentially a partial\r\n                // word read from the original array. To read it, we calculate\r\n                // the length of that partial word and start copying that many\r\n                // bytes into the array. The first word we copy will start with\r\n                // data we don\u0027t care about, but the last \u0060lengthmod\u0060 bytes will\r\n                // land at the beginning of the contents of the new array. When\r\n                // we\u0027re done copying, we overwrite the full first word with\r\n                // the actual length of the slice.\r\n                let lengthmod := and(_length, 31)\r\n\r\n                // The multiplication in the next line is necessary\r\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\r\n                // the following copy loop was copying the origin\u0027s length\r\n                // and then ending prematurely not copying everything it should.\r\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\r\n                let end := add(mc, _length)\r\n\r\n                for {\r\n                    // The multiplication in the next line has the same exact purpose\r\n                    // as the one above.\r\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\r\n                } lt(mc, end) {\r\n                    mc := add(mc, 0x20)\r\n                    cc := add(cc, 0x20)\r\n                } {\r\n                    mstore(mc, mload(cc))\r\n                }\r\n\r\n                mstore(tempBytes, _length)\r\n\r\n                //update free-memory pointer\r\n                //allocating the array padded to 32 bytes like the compiler does now\r\n                mstore(0x40, and(add(mc, 31), not(31)))\r\n            }\r\n            //if we want a zero-length slice let\u0027s just return a zero-length array\r\n            default {\r\n                tempBytes := mload(0x40)\r\n\r\n                mstore(0x40, add(tempBytes, 0x20))\r\n            }\r\n        }\r\n\r\n        return tempBytes;\r\n    }\r\n\r\n    function toAddress(bytes memory _bytes, uint _start) internal  pure returns (address) {\r\n        require(_bytes.length \u003E= (_start \u002B 20));\r\n        address tempAddress;\r\n\r\n        assembly {\r\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\r\n        }\r\n\r\n        return tempAddress;\r\n    }\r\n\r\n    function toUint8(bytes memory _bytes, uint _start) internal  pure returns (uint8) {\r\n        require(_bytes.length \u003E= (_start \u002B 1));\r\n        uint8 tempUint;\r\n\r\n        assembly {\r\n            tempUint := mload(add(add(_bytes, 0x1), _start))\r\n        }\r\n\r\n        return tempUint;\r\n    }\r\n\r\n    function toUint16(bytes memory _bytes, uint _start) internal  pure returns (uint16) {\r\n        require(_bytes.length \u003E= (_start \u002B 2));\r\n        uint16 tempUint;\r\n\r\n        assembly {\r\n            tempUint := mload(add(add(_bytes, 0x2), _start))\r\n        }\r\n\r\n        return tempUint;\r\n    }\r\n\r\n    function toUint32(bytes memory _bytes, uint _start) internal  pure returns (uint32) {\r\n        require(_bytes.length \u003E= (_start \u002B 4));\r\n        uint32 tempUint;\r\n\r\n        assembly {\r\n            tempUint := mload(add(add(_bytes, 0x4), _start))\r\n        }\r\n\r\n        return tempUint;\r\n    }\r\n\r\n    function toUint64(bytes memory _bytes, uint _start) internal  pure returns (uint64) {\r\n        require(_bytes.length \u003E= (_start \u002B 8));\r\n        uint64 tempUint;\r\n\r\n        assembly {\r\n            tempUint := mload(add(add(_bytes, 0x8), _start))\r\n        }\r\n\r\n        return tempUint;\r\n    }\r\n\r\n    function toUint96(bytes memory _bytes, uint _start) internal  pure returns (uint96) {\r\n        require(_bytes.length \u003E= (_start \u002B 12));\r\n        uint96 tempUint;\r\n\r\n        assembly {\r\n            tempUint := mload(add(add(_bytes, 0xc), _start))\r\n        }\r\n\r\n        return tempUint;\r\n    }\r\n\r\n    function toUint128(bytes memory _bytes, uint _start) internal  pure returns (uint128) {\r\n        require(_bytes.length \u003E= (_start \u002B 16));\r\n        uint128 tempUint;\r\n\r\n        assembly {\r\n            tempUint := mload(add(add(_bytes, 0x10), _start))\r\n        }\r\n\r\n        return tempUint;\r\n    }\r\n\r\n    function toUint(bytes memory _bytes, uint _start) internal  pure returns (uint256) {\r\n        require(_bytes.length \u003E= (_start \u002B 32));\r\n        uint256 tempUint;\r\n\r\n        assembly {\r\n            tempUint := mload(add(add(_bytes, 0x20), _start))\r\n        }\r\n\r\n        return tempUint;\r\n    }\r\n\r\n    function toBytes32(bytes memory _bytes, uint _start) internal  pure returns (bytes32) {\r\n        require(_bytes.length \u003E= (_start \u002B 32));\r\n        bytes32 tempBytes32;\r\n\r\n        assembly {\r\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\r\n        }\r\n\r\n        return tempBytes32;\r\n    }\r\n\r\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\r\n        bool success = true;\r\n\r\n        assembly {\r\n            let length := mload(_preBytes)\r\n\r\n            // if lengths don\u0027t match the arrays are not equal\r\n            switch eq(length, mload(_postBytes))\r\n            case 1 {\r\n                // cb is a circuit breaker in the for loop since there\u0027s\r\n                //  no said feature for inline assembly loops\r\n                // cb = 1 - don\u0027t breaker\r\n                // cb = 0 - break\r\n                let cb := 1\r\n\r\n                let mc := add(_preBytes, 0x20)\r\n                let end := add(mc, length)\r\n\r\n                for {\r\n                    let cc := add(_postBytes, 0x20)\r\n                // the next line is the loop condition:\r\n                // while(uint(mc \u003C end) \u002B cb == 2)\r\n                } eq(add(lt(mc, end), cb), 2) {\r\n                    mc := add(mc, 0x20)\r\n                    cc := add(cc, 0x20)\r\n                } {\r\n                    // if any of these checks fails then arrays are not equal\r\n                    if iszero(eq(mload(mc), mload(cc))) {\r\n                        // unsuccess:\r\n                        success := 0\r\n                        cb := 0\r\n                    }\r\n                }\r\n            }\r\n            default {\r\n                // unsuccess:\r\n                success := 0\r\n            }\r\n        }\r\n\r\n        return success;\r\n    }\r\n\r\n    function equalStorage(\r\n        bytes storage _preBytes,\r\n        bytes memory _postBytes\r\n    )\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        bool success = true;\r\n\r\n        assembly {\r\n            // we know _preBytes_offset is 0\r\n            let fslot := sload(_preBytes_slot)\r\n            // Decode the length of the stored array like in concatStorage().\r\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\r\n            let mlength := mload(_postBytes)\r\n\r\n            // if lengths don\u0027t match the arrays are not equal\r\n            switch eq(slength, mlength)\r\n            case 1 {\r\n                // slength can contain both the length and contents of the array\r\n                // if length \u003C 32 bytes so let\u0027s prepare for that\r\n                // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\r\n                if iszero(iszero(slength)) {\r\n                    switch lt(slength, 32)\r\n                    case 1 {\r\n                        // blank the last byte which is the length\r\n                        fslot := mul(div(fslot, 0x100), 0x100)\r\n\r\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\r\n                            // unsuccess:\r\n                            success := 0\r\n                        }\r\n                    }\r\n                    default {\r\n                        // cb is a circuit breaker in the for loop since there\u0027s\r\n                        //  no said feature for inline assembly loops\r\n                        // cb = 1 - don\u0027t breaker\r\n                        // cb = 0 - break\r\n                        let cb := 1\r\n\r\n                        // get the keccak hash to get the contents of the array\r\n                        mstore(0x0, _preBytes_slot)\r\n                        let sc := keccak256(0x0, 0x20)\r\n\r\n                        let mc := add(_postBytes, 0x20)\r\n                        let end := add(mc, mlength)\r\n\r\n                        // the next line is the loop condition:\r\n                        // while(uint(mc \u003C end) \u002B cb == 2)\r\n                        for {} eq(add(lt(mc, end), cb), 2) {\r\n                            sc := add(sc, 1)\r\n                            mc := add(mc, 0x20)\r\n                        } {\r\n                            if iszero(eq(sload(sc), mload(mc))) {\r\n                                // unsuccess:\r\n                                success := 0\r\n                                cb := 0\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            default {\r\n                // unsuccess:\r\n                success := 0\r\n            }\r\n        }\r\n\r\n        return success;\r\n    }\r\n}\r\n\r\n\r\ncontract Account is Initializable, IERC1271 {\r\n    using SafeMath for uint256;\r\n    using ECDSA for bytes32;\r\n    using BytesLib for bytes;\r\n\r\n    address[] public authKeysArray;\r\n    mapping(address =\u003E uint256) public authKeysArrayIndex;\r\n    mapping(address =\u003E bool) public authKeys;\r\n    uint256 public nonce;\r\n    uint256 public CHAIN_ID;\r\n\r\n    // bytes4(keccak256(\u0022isValidSignature(bytes,bytes)\u0022)\r\n    bytes4 constant internal VALID_SIG = 0x20c13b0b;\r\n    bytes4 constant internal INVALID_SIG = 0xffffffff;\r\n\r\n    event FundsReceived(address indexed sender, uint256 indexed value);\r\n    event AddedAuthKey(address indexed authKey);\r\n    event RemovedAuthKey(address indexed authKey);\r\n    event SwappedAuthKeys(address indexed oldAuthKey, address indexed newAuthKey);\r\n\r\n    // Invalid Sigs\r\n    event InvalidAuthkey();\r\n    event InvalidTransactionDataSigner();\r\n    // Invalid Firewalls\r\n    event OverDailyLimit();\r\n    // Invalid Tx\r\n    event CallFailed(bytes32 encodedData);\r\n\r\n    modifier onlyValidAuthKeyOrSelf {\r\n        _validateAuthKey(msg.sender);\r\n        _;\r\n    }\r\n\r\n    function initialize() public initializer {\r\n        CHAIN_ID = 1;\r\n    }\r\n\r\n    function () external payable {\r\n        emit FundsReceived(msg.sender, msg.value);\r\n    }\r\n\r\n    /**\r\n     *  Getters\r\n     */\r\n\r\n    /// @dev Return the length of the authKeysArray\r\n    function getAuthKeysArrayLength() public view returns (uint256) {\r\n        return authKeysArray.length;\r\n    }\r\n\r\n    /// @dev Get the current nonce of the contract\r\n    function getNonce() public view returns (uint256) {\r\n        return nonce;\r\n    }\r\n\r\n    /**\r\n     *  Public functions\r\n     */\r\n\r\n    /// @dev Execute a transaction\r\n    /// @notice This is to be called directly by an AuthKey\r\n    /// @param _destination Destination of the transaction\r\n    /// @param _value Value of the transaction\r\n    /// @param _data Data of the transaction\r\n    /// @param _gasLimit Gas limit of the transaction\r\n    function executeTransaction(\r\n        address _destination,\r\n        uint256 _value,\r\n        bytes memory _data,\r\n        uint256 _gasLimit\r\n    )\r\n        public\r\n        onlyValidAuthKeyOrSelf\r\n        returns (bytes memory)\r\n    {\r\n        return _executeTransaction(_destination, _value, _data, _gasLimit);\r\n    }\r\n\r\n    /// @dev Add an auth key to the list of auth keys\r\n    /// @param _authKey Address of the auth key to add\r\n    function addAuthKey(address _authKey) public onlyValidAuthKeyOrSelf {\r\n        require(!authKeys[_authKey], \u0022Auth key already added\u0022);\r\n        authKeys[_authKey] = true;\r\n        authKeysArray.push(_authKey);\r\n        authKeysArrayIndex[_authKey] = authKeysArray.length - 1;\r\n        emit AddedAuthKey(_authKey);\r\n    }\r\n\r\n    /// @dev Add multiple auth keys to the list of auth keys\r\n    /// @param _authKeys Array of addresses to add to the auth keys list\r\n    function addMultipleAuthKeys(address[] memory _authKeys) public onlyValidAuthKeyOrSelf {\r\n        for (uint256 i = 0; i \u003C _authKeys.length; i\u002B\u002B) {\r\n            addAuthKey(_authKeys[i]);\r\n        }\r\n    }\r\n\r\n    /// @dev Remove an auth key from the list of auth keys\r\n    /// @param _authKey Address of the auth key to remove\r\n    function removeAuthKey(address _authKey) public onlyValidAuthKeyOrSelf {\r\n        require(authKeys[_authKey], \u0022Auth key not yet added\u0022);\r\n        require(getAuthKeysArrayLength() \u003E 1, \u0022Cannot remove last auth key\u0022);\r\n        authKeys[_authKey] = false;\r\n        _removeAuthKeyFromArray(_authKey);\r\n        authKeysArrayIndex[_authKey] = 0;\r\n        emit RemovedAuthKey(_authKey);\r\n    }\r\n\r\n    /// @dev Remove multiple auth keys to the list of auth keys\r\n    /// @param _authKeys Array of addresses to remove to the auth keys list\r\n    function removeMultipleAuthKeys(address[] memory _authKeys) public onlyValidAuthKeyOrSelf {\r\n        for (uint256 i = 0; i \u003C _authKeys.length; i\u002B\u002B) {\r\n            removeAuthKey(_authKeys[i]);\r\n        }\r\n    }\r\n\r\n    /// @dev Swap one authKey for a non-authKey\r\n    /// @param _oldAuthKey An existing authKey\r\n    /// @param _newAuthKey A non-existing authKey\r\n    function swapAuthKeys(\r\n        address _oldAuthKey,\r\n        address _newAuthKey\r\n    )\r\n        public\r\n        onlyValidAuthKeyOrSelf\r\n    {\r\n        require(authKeys[_oldAuthKey], \u0022Old auth key does not exist\u0022);\r\n        require(!authKeys[_newAuthKey], \u0022New auth key already exists\u0022);\r\n        addAuthKey(_newAuthKey);\r\n        removeAuthKey(_oldAuthKey);\r\n        emit SwappedAuthKeys(_oldAuthKey, _newAuthKey);\r\n    }\r\n\r\n    /// @dev Swap multiple auth keys to the list of auth keys\r\n    /// @param _oldAuthKeys Array of addresses to remove to the auth keys list\r\n    /// @param _newAuthKeys Array of addresses to add to the auth keys list\r\n    function swapMultipleAuthKeys(\r\n        address[] memory _oldAuthKeys,\r\n        address[] memory _newAuthKeys\r\n    )\r\n        public\r\n    {\r\n        require(_oldAuthKeys.length == _newAuthKeys.length, \u0022Input arrays not equal length\u0022);\r\n        for (uint256 i = 0; i \u003C _oldAuthKeys.length; i\u002B\u002B) {\r\n            swapAuthKeys(_oldAuthKeys[i], _newAuthKeys[i]);\r\n        }\r\n    }\r\n\r\n    function isValidSignature(\r\n        bytes memory _msg,\r\n        bytes memory _signatures\r\n    )\r\n        public\r\n        view\r\n        returns (bytes4)\r\n    {\r\n        if (_signatures.length == 65) {\r\n            return isValidAuthKeySignature(_msg, _signatures);\r\n        } else if (_signatures.length == 130) {\r\n            return isValidLoginKeySignature(_msg, _signatures);\r\n        } else {\r\n            revert(\u0022Invalid _signatures length\u0022);\r\n        }\r\n    }\r\n\r\n    function isValidAuthKeySignature(\r\n        bytes memory _msg,\r\n        bytes memory _signature\r\n    )\r\n        public\r\n        view\r\n        returns (bytes4)\r\n    {\r\n        address authKeyAddress = getEthSignedMessageHash(_msg).recover(\r\n            _signature\r\n        );\r\n\r\n        if(authKeys[authKeyAddress]) {\r\n            return VALID_SIG;\r\n        } else {\r\n            return INVALID_SIG;\r\n        }\r\n    }\r\n\r\n    function isValidLoginKeySignature(\r\n        bytes memory _msg,\r\n        bytes memory _signatures\r\n    )\r\n        public\r\n        view\r\n        returns (bytes4)\r\n    {\r\n        bytes memory msgHashSignature = _signatures.slice(0, 65);\r\n        bytes memory loginKeyAuthorizationSignature = _signatures.slice(65, 65);\r\n\r\n        address loginKeyAddress = getEthSignedMessageHash(_msg).recover(\r\n            msgHashSignature\r\n        );\r\n\r\n        bytes32 loginKeyAuthorizationMessageHash = keccak256(abi.encodePacked(\r\n            loginKeyAddress\r\n        )).toEthSignedMessageHash();\r\n\r\n        address authorizationSigner = loginKeyAuthorizationMessageHash.recover(\r\n            loginKeyAuthorizationSignature\r\n        );\r\n\r\n        if(authKeys[authorizationSigner]) {\r\n            return VALID_SIG;\r\n        } else {\r\n            return INVALID_SIG;\r\n        }\r\n    }\r\n\r\n    /**\r\n     *  Internal functions\r\n     */\r\n\r\n    /// Remove an authKey from the authKeys array\r\n    /// @param _authKey authKey to remove\r\n    function _removeAuthKeyFromArray(address _authKey) internal {\r\n        uint256 index = authKeysArrayIndex[_authKey];\r\n\r\n        for (uint256 i = index; i \u003C authKeysArray.length - 1; i\u002B\u002B) {\r\n            authKeysArray[i] = authKeysArray[i \u002B 1];\r\n        }\r\n\r\n        delete authKeysArray[authKeysArray.length - 1];\r\n        authKeysArray.length--;\r\n    }\r\n\r\n    /// @dev Validate an authKey\r\n    /// @param _authKey Address of the auth key to validate\r\n    function _validateAuthKey(address _authKey) internal view {\r\n        require(authKeys[_authKey] == true || msg.sender == address(this), \u0022Auth key is invalid\u0022);\r\n    }\r\n\r\n    /// @dev Validate signatures from an AuthKeyMetaTx\r\n    /// @param _txDataMessageHash Ethereum signed message of the transaction\r\n    /// @param _transactionDataSignature Signed tx data\r\n    function _validateAuthKeyMetaTxSigs(\r\n        bytes32 _txDataMessageHash,\r\n        bytes memory _transactionDataSignature\r\n    )\r\n        internal\r\n        view\r\n        returns (address)\r\n    {\r\n        address transactionDataSigner = _txDataMessageHash.recover(_transactionDataSignature);\r\n        _validateAuthKey(transactionDataSigner);\r\n        return transactionDataSigner;\r\n    }\r\n\r\n    /// @dev Validate signatures from an AuthKeyMetaTx\r\n    /// @param _txDataMessageHash Ethereum signed message of the transaction\r\n    /// @param _transactionDataSignature Signed tx data\r\n    /// @param _loginKeyAuthorizationSignature Signed loginKey\r\n    function validateLoginKeyMetaTxSigs(\r\n        bytes32 _txDataMessageHash,\r\n        bytes memory _transactionDataSignature,\r\n        bytes memory _loginKeyAuthorizationSignature\r\n    )\r\n        public\r\n        view\r\n        returns (address)\r\n    {\r\n        address transactionDataSigner = _txDataMessageHash.recover(\r\n            _transactionDataSignature\r\n        );\r\n\r\n        bytes32 loginKeyAuthorizationMessageHash = keccak256(abi.encodePacked(\r\n            transactionDataSigner\r\n        )).toEthSignedMessageHash();\r\n\r\n        address authorizationSigner = loginKeyAuthorizationMessageHash.recover(\r\n            _loginKeyAuthorizationSignature\r\n        );\r\n        _validateAuthKey(authorizationSigner);\r\n\r\n        return transactionDataSigner;\r\n    }\r\n\r\n    /// @dev Execute a transaction without a refund\r\n    /// @notice This is the transaction sent from the CBA\r\n    /// @param _destination Destination of the transaction\r\n    /// @param _value Value of the transaction\r\n    /// @param _data Data of the transaction\r\n    /// @param _gasLimit Gas limit of the transaction\r\n    function _executeTransaction(\r\n        address _destination,\r\n        uint256 _value,\r\n        bytes memory _data,\r\n        uint256 _gasLimit\r\n    )\r\n        internal\r\n        returns (bytes memory)\r\n    {\r\n        (bool success, bytes memory response) = _destination.call.gas(_gasLimit).value(_value)(_data);\r\n\r\n        if (!success) {\r\n            bytes32 encodedData = _encodeData(nonce, _destination, _value, _data);\r\n            emit CallFailed(encodedData);\r\n        }\r\n\r\n        // Increment nonce here so that both relayed and non-relayed calls will increment nonce\r\n        // Must be incremented after !success data encode in order to encode original nonce\r\n        nonce\u002B\u002B;\r\n\r\n        return response;\r\n    }\r\n\r\n    /// @dev Execute a transaction with a refund\r\n    /// @notice This is meant to be used by executeAuthKeyMetaTx when being called\r\n    /// @notice from a relayer.\r\n    /// @param _destination Destination of the transaction\r\n    /// @param _value Value of the transaction\r\n    /// @param _data Data of the transaction\r\n    /// @param _gasPrice Gas price of the transaction\r\n    /// @param _gasLimit Gas limit of the transaction\r\n    /// @param _startGas Starting gas at the beginning of the transaction\r\n    function _executeTransactionWithRefund(\r\n        address _destination,\r\n        uint256 _value,\r\n        bytes memory _data,\r\n        uint256 _gasPrice,\r\n        uint256 _gasLimit,\r\n        uint256 _startGas\r\n    )\r\n        internal\r\n        returns (bytes memory)\r\n    {\r\n        bytes memory response = _executeTransaction(_destination, _value, _data, _gasLimit);\r\n        _issueRefund(_startGas, _gasPrice);\r\n        return response;\r\n    }\r\n\r\n    /// @dev Issue a refund\r\n    /// @param _gasPrice Gas price to use when sending a refund\r\n    function _issueRefund(\r\n        uint256 _startGas,\r\n        uint256 _gasPrice\r\n    )\r\n        internal\r\n    {\r\n        uint256 _gasUsed = _startGas.sub(gasleft());\r\n        require(_gasUsed.mul(_gasPrice) \u003C= address(this).balance, \u0022Insufficient gas for refund\u0022);\r\n        msg.sender.transfer(_gasUsed.mul(_gasPrice));\r\n    }\r\n\r\n    /// @dev Encode data for a failed transaction\r\n    /// @param _nonce Nonce of the transaction\r\n    /// @param _destination Destination of the transaction\r\n    /// @param _value Value of the transaction\r\n    /// @param _data Data of the transaction\r\n    function _encodeData(\r\n        uint256 _nonce,\r\n        address _destination,\r\n        uint256 _value,\r\n        bytes memory _data\r\n    )\r\n        internal\r\n        pure\r\n        returns (bytes32)\r\n    {\r\n        return keccak256(abi.encodePacked(\r\n            _nonce,\r\n            _destination,\r\n            _value,\r\n            _data\r\n        ));\r\n    }\r\n\r\n    /// @dev Adds ETH signed message prefix to bytes message and hashes it\r\n    /// @param _msg the bytes message before adding the prefix\r\n    /// @return the prefixed and hashed message\r\n    function getEthSignedMessageHash(bytes memory _msg) internal pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(\u0022\\x19Ethereum Signed Message:\\n\u0022, uint2str(_msg.length), _msg));\r\n    }\r\n\r\n    /// @dev Convert uint to string\r\n    /// @param _num uint to be converted\r\n    /// @return the string equivalent of the uint\r\n    function uint2str(uint _num) private pure returns (string memory _uintAsString) {\r\n        if (_num == 0) {\r\n            return \u00220\u0022;\r\n        }\r\n        uint i = _num;\r\n        uint j = _num;\r\n        uint len;\r\n        while (j != 0) {\r\n            len\u002B\u002B;\r\n            j /= 10;\r\n        }\r\n        bytes memory bstr = new bytes(len);\r\n        uint k = len - 1;\r\n        while (i != 0) {\r\n            bstr[k--] = byte(uint8(48 \u002B i % 10));\r\n            i /= 10;\r\n        }\r\n        return string(bstr);\r\n    }\r\n}\r\n\r\ncontract TransactionLimit is Account {\r\n\r\n    uint256 public dailyLimit;\r\n    mapping(uint256 =\u003E uint256) public dailyLimitTracker;\r\n\r\n    event DailySpendIncrease(uint256 indexed day, uint256 indexed spendIncrease);\r\n    event DailyLimitChanged(address indexed authKey, uint256 indexed newDailyLimit);\r\n\r\n    function initialize() public initializer {\r\n        dailyLimit = 10 ether;\r\n    }\r\n\r\n    /**\r\n     * Getters\r\n     */\r\n\r\n    /// @dev Gets the current day for the contract\r\n    function getCurrentDay() public view returns (uint256) {\r\n        return block.timestamp / 86400;\r\n    }\r\n\r\n    /// @dev Check if a user is within their daily limit\r\n    function getIsWithinEthDailyTransactionLimit() public view returns (bool) {\r\n        return getWillBeWithinEthDailyTransactionLimit(0);\r\n    }\r\n\r\n    /// @dev Check if a user will be within their daily limit after a transaction\r\n    /// @param _value Value being sent with the current transaction\r\n    function getWillBeWithinEthDailyTransactionLimit(uint256 _value) public view returns (bool) {\r\n        uint256 currentDay = getCurrentDay();\r\n        uint256 dailySpend = dailyLimitTracker[currentDay] \u002B _value;\r\n        if (dailySpend \u003C= dailyLimit) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Setters\r\n     */\r\n\r\n    /// @dev Change the daily limit for a user\r\n    /// @dev _newDailyLimit New daily limit to set\r\n    function changeDailyLimit(uint256 _newDailyLimit) public onlyValidAuthKeyOrSelf {\r\n        dailyLimit = _newDailyLimit;\r\n        emit DailyLimitChanged(msg.sender, dailyLimit);\r\n    }\r\n\r\n    /**\r\n     * Internal functions\r\n     */\r\n\r\n    /// @dev Update the tracked balance for daily limit for a user\r\n    /// @param _value Value being sent with the current transaction\r\n    function updateEthDailyTransactionLimit(uint256 _value) internal {\r\n        dailyLimitTracker[getCurrentDay()] \u002B= _value;\r\n        emit DailySpendIncrease(getCurrentDay(), _value);\r\n    }\r\n}\r\n\r\ncontract LoginKeyMetaTxAccount is Account, TransactionLimit {\r\n\r\n    /// @dev Check if a loginKey is valid\r\n    /// @param transactionDataSigner loginKey that signed the tx data\r\n    /// @param _loginKeyAuthorizationSignature Signed loginKey\r\n    function isValidLoginKey(\r\n        address transactionDataSigner,\r\n        bytes memory _loginKeyAuthorizationSignature\r\n    )\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        bytes32 loginKeyAuthorizationMessageHash = keccak256(abi.encodePacked(\r\n            transactionDataSigner\r\n        )).toEthSignedMessageHash();\r\n\r\n        address authorizationSigner = loginKeyAuthorizationMessageHash.recover(\r\n            _loginKeyAuthorizationSignature\r\n        );\r\n\r\n        return authKeys[authorizationSigner];\r\n    }\r\n\r\n    /// @dev Execute an loginKey meta transaction\r\n    /// @param _destination Destination of the transaction\r\n    /// @param _data Data of the transaction\r\n    /// @param _value Value of the transaction\r\n    /// @param _gasLimit Gas limit of the transaction\r\n    /// @param _transactionDataSignature Signed tx data\r\n    /// @param _loginKeyAuthorizationSignature Signed loginKey\r\n    function executeLoginKeyMetaTx(\r\n        address _destination,\r\n        bytes memory _data,\r\n        uint256 _value,\r\n        uint256 _gasLimit,\r\n        bytes memory _transactionDataSignature,\r\n        bytes memory _loginKeyAuthorizationSignature\r\n    )\r\n        public\r\n        returns (bytes memory)\r\n    {\r\n        uint256 startGas = gasleft();\r\n\r\n        // This is only in loginKey because authKeys are not restricted by firewalls\r\n        require(checkFirewall(_value), \u0022Transaction blocked by the firewall\u0022);\r\n\r\n        // Login key cannot upgrade the contract\r\n        require(checkDestination(_destination), \u0022Login key is not able to upgrade to proxy\u0022);\r\n\r\n        // Update daily limits\r\n        updateEthDailyTransactionLimit(_value);\r\n\r\n        bytes32 _txDataMessageHash = keccak256(abi.encodePacked(\r\n            address(this),\r\n            msg.sig,\r\n            CHAIN_ID,\r\n            _destination,\r\n            _data,\r\n            _value,\r\n            nonce,\r\n            tx.gasprice,\r\n            _gasLimit\r\n        )).toEthSignedMessageHash();\r\n\r\n        address transactionDataSigner = validateLoginKeyMetaTxSigs(\r\n            _txDataMessageHash, _transactionDataSignature, _loginKeyAuthorizationSignature\r\n        );\r\n\r\n        bytes memory response = _executeTransactionWithRefund(\r\n            _destination, _value, _data, tx.gasprice, _gasLimit, startGas\r\n        );\r\n\r\n        return response;\r\n    }\r\n\r\n    /// @dev Check to see if the transaction passes the firewall\r\n    /// @param _value Value of the transaction being sent\r\n    function checkFirewall(uint256 _value) public view returns (bool) {\r\n        return getWillBeWithinEthDailyTransactionLimit(_value);\r\n    }\r\n\r\n    /// @dev Check to see if the destination is the proxy admin.\r\n    /// @notice The login key is not able to upgrade the proxy\r\n    /// @notice This transaction will throw if an upgrade is attempted\r\n    /// @param _destination Destination address\r\n    function checkDestination(address _destination) public view returns (bool) {\r\n        address proxyAdminAddress;\r\n        assembly {\r\n            proxyAdminAddress := sload(0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103)\r\n        }\r\n        return (proxyAdminAddress != _destination);\r\n    }\r\n}\r\n\r\ncontract AuthKeyMetaTxAccount is Account {\r\n\r\n    /// @dev Execute an authKey meta transaction\r\n    /// @param _destination Destination of the transaction\r\n    /// @param _data Data of the transaction\r\n    /// @param _value Value of the transaction\r\n    /// @param _gasLimit Gas limit of the transaction\r\n    /// @param _transactionDataSignature Signed tx data\r\n    function executeAuthKeyMetaTx(\r\n        address _destination,\r\n        bytes memory _data,\r\n        uint256 _value,\r\n        uint256 _gasLimit,\r\n        bytes memory _transactionDataSignature\r\n    )\r\n        public\r\n        returns (bytes memory)\r\n    {\r\n        uint256 startGas = gasleft();\r\n\r\n        bytes32 _txDataMessageHash = keccak256(abi.encodePacked(\r\n            address(this),\r\n            msg.sig,\r\n            CHAIN_ID,\r\n            _destination,\r\n            _data,\r\n            _value,\r\n            nonce,\r\n            tx.gasprice,\r\n            _gasLimit\r\n        )).toEthSignedMessageHash();\r\n\r\n        address transactionDataSigner = _validateAuthKeyMetaTxSigs(\r\n            _txDataMessageHash, _transactionDataSignature\r\n        );\r\n\r\n        bytes memory response = _executeTransactionWithRefund(\r\n            _destination, _value, _data, tx.gasprice, _gasLimit, startGas\r\n        );\r\n\r\n        return response;\r\n    }\r\n}\r\n\r\n/**\r\n * AuthereumENSManager interface.\r\n */\r\ncontract AuthereumENSManager {\r\n    function register(string calldata _label, address _owner, uint256 _salt) external {}\r\n}\r\n\r\ncontract AuthereumAccount is Account, AuthKeyMetaTxAccount, LoginKeyMetaTxAccount, AuthereumENSManager {\r\n\r\n    string constant public authereumVersion = \u00221.0.0\u0022;\r\n\r\n    /// @dev Initialize the Authereum Account\r\n    /// @param _authKey authKey that will own this account\r\n    /// @param _authereumENSManager Address of the Authereum ENS Manager\r\n    /// @param _label Label of the ENS name\r\n    /// @param _salt User specific salt\r\n    function initialize(\r\n        address _authKey,\r\n        address _authereumENSManager,\r\n        string memory _label,\r\n        uint256 _salt\r\n    )\r\n        public\r\n        initializer\r\n    {\r\n        // Set the CHAIN_ID\r\n        Account.initialize();\r\n        TransactionLimit.initialize();\r\n\r\n        // Add self as an authKey\r\n        authKeys[_authKey] = true;\r\n        authKeysArray.push(_authKey);\r\n        authKeysArrayIndex[_authKey] = authKeysArray.length - 1;\r\n        emit AddedAuthKey(_authKey);\r\n\r\n        // Register user in ENS\r\n        AuthereumENSManager(_authereumENSManager).register(_label, address(this), _salt);\r\n    }\r\n}","ABI":"[{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_destination\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_value\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_data\u0022,\u0022type\u0022:\u0022bytes\u0022},{\u0022name\u0022:\u0022_gasLimit\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022executeTransaction\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bytes\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_authKey\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022addAuthKey\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_authKeys\u0022,\u0022type\u0022:\u0022address[]\u0022}],\u0022name\u0022:\u0022removeMultipleAuthKeys\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022authereumVersion\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022getWillBeWithinEthDailyTransactionLimit\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_msg\u0022,\u0022type\u0022:\u0022bytes\u0022},{\u0022name\u0022:\u0022_signatures\u0022,\u0022type\u0022:\u0022bytes\u0022}],\u0022name\u0022:\u0022isValidSignature\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bytes4\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022getCurrentDay\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_msg\u0022,\u0022type\u0022:\u0022bytes\u0022},{\u0022name\u0022:\u0022_signature\u0022,\u0022type\u0022:\u0022bytes\u0022}],\u0022name\u0022:\u0022isValidAuthKeySignature\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bytes4\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_txDataMessageHash\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022name\u0022:\u0022_transactionDataSignature\u0022,\u0022type\u0022:\u0022bytes\u0022},{\u0022name\u0022:\u0022_loginKeyAuthorizationSignature\u0022,\u0022type\u0022:\u0022bytes\u0022}],\u0022name\u0022:\u0022validateLoginKeyMetaTxSigs\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022authKeys\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_oldAuthKeys\u0022,\u0022type\u0022:\u0022address[]\u0022},{\u0022name\u0022:\u0022_newAuthKeys\u0022,\u0022type\u0022:\u0022address[]\u0022}],\u0022name\u0022:\u0022swapMultipleAuthKeys\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022dailyLimit\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_destination\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022checkDestination\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_destination\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_data\u0022,\u0022type\u0022:\u0022bytes\u0022},{\u0022name\u0022:\u0022_value\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_gasLimit\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_transactionDataSignature\u0022,\u0022type\u0022:\u0022bytes\u0022},{\u0022name\u0022:\u0022_loginKeyAuthorizationSignature\u0022,\u0022type\u0022:\u0022bytes\u0022}],\u0022name\u0022:\u0022executeLoginKeyMetaTx\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bytes\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022initialize\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022CHAIN_ID\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022checkFirewall\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_authKey\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022removeAuthKey\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022dailyLimitTracker\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022getIsWithinEthDailyTransactionLimit\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022nonce\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_oldAuthKey\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_newAuthKey\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022swapAuthKeys\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022authKeysArray\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022getAuthKeysArrayLength\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_newDailyLimit\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022changeDailyLimit\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022getNonce\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_authKey\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_authereumENSManager\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_label\u0022,\u0022type\u0022:\u0022string\u0022},{\u0022name\u0022:\u0022_salt\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022initialize\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_label\u0022,\u0022type\u0022:\u0022string\u0022},{\u0022name\u0022:\u0022_owner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_salt\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022register\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_msg\u0022,\u0022type\u0022:\u0022bytes\u0022},{\u0022name\u0022:\u0022_signatures\u0022,\u0022type\u0022:\u0022bytes\u0022}],\u0022name\u0022:\u0022isValidLoginKeySignature\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bytes4\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_destination\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_data\u0022,\u0022type\u0022:\u0022bytes\u0022},{\u0022name\u0022:\u0022_value\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_gasLimit\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_transactionDataSignature\u0022,\u0022type\u0022:\u0022bytes\u0022}],\u0022name\u0022:\u0022executeAuthKeyMetaTx\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bytes\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022authKeysArrayIndex\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_authKeys\u0022,\u0022type\u0022:\u0022address[]\u0022}],\u0022name\u0022:\u0022addMultipleAuthKeys\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022transactionDataSigner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_loginKeyAuthorizationSignature\u0022,\u0022type\u0022:\u0022bytes\u0022}],\u0022name\u0022:\u0022isValidLoginKey\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022payable\u0022:true,\u0022stateMutability\u0022:\u0022payable\u0022,\u0022type\u0022:\u0022fallback\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022day\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022spendIncrease\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022DailySpendIncrease\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022authKey\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022newDailyLimit\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022DailyLimitChanged\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022sender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022FundsReceived\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022authKey\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022AddedAuthKey\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022authKey\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022RemovedAuthKey\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022oldAuthKey\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022newAuthKey\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022SwappedAuthKeys\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022InvalidAuthkey\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022InvalidTransactionDataSigner\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022OverDailyLimit\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022encodedData\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022CallFailed\u0022,\u0022type\u0022:\u0022event\u0022}]","ContractName":"AuthereumAccount","CompilerVersion":"v0.5.8\u002Bcommit.23d335f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://4225d565f04798fc3eb1a58ddd7c204cd2cda325df4bbe551e64a1c05d4eb63c"}]