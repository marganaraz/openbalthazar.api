[{"SourceCode":"pragma solidity ^0.5.8;\r\n\r\ncontract IBNEST {\r\n    function totalSupply() public view returns (uint supply);\r\n    function balanceOf( address who ) public view returns (uint value);\r\n    function allowance( address owner, address spender ) public view returns (uint _allowance);\r\n\r\n    function transfer( address to, uint256 value) external;\r\n    function transferFrom( address from, address to, uint value) public returns (bool ok);\r\n    function approve( address spender, uint value ) public returns (bool ok);\r\n\r\n    event Transfer( address indexed from, address indexed to, uint value);\r\n    event Approval( address indexed owner, address indexed spender, uint value);\r\n    \r\n    function balancesStart() public view returns(uint256);\r\n    function balancesGetBool(uint256 num) public view returns(bool);\r\n    function balancesGetNext(uint256 num) public view returns(uint256);\r\n    function balancesGetValue(uint256 num) public view returns(address, uint256);\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting \u0027a\u0027 not being zero, but the\r\n    // benefit is lost if \u0027b\u0027 is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = _a * _b;\r\n    assert(c / _a == _b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    assert(_b \u003E 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = _a / _b;\r\n    assert(_a == _b * c \u002B _a % _b); // There is no case in which this doesn\u0027t hold\r\n    return _a / _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    assert(_b \u003C= _a);\r\n    return _a - _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    c = _a \u002B _b;\r\n    assert(c \u003E= _a);\r\n    return c;\r\n  }\r\n}\r\n\r\n//  \u6620\u5C04\u5408\u7EA6\r\ncontract IBMapping {\r\n    //  \u67E5\u8BE2\u5730\u5740\r\n\tfunction checkAddress(string memory name) public view returns (address contractAddress);\r\n\t//  \u67E5\u770B\u662F\u5426\u7BA1\u7406\u5458\r\n\tfunction checkOwners(address man) public view returns (bool);\r\n}\r\n\r\nlibrary address_make_payable {\r\n   function make_payable(address x) internal pure returns (address payable) {\r\n      return address(uint160(x));\r\n   }\r\n}\r\n\r\ncontract NESTSave {\r\n    function takeOut(uint256 num) public;\r\n    function depositIn(uint256 num) public;\r\n    function takeOutPrivate() public;\r\n    function checkAmount(address sender) public view returns(uint256);\r\n}\r\n\r\ncontract Abonus {\r\n    function getETH(uint256 num) public;    \r\n    function getETHNum() public view returns (uint256);\r\n}\r\n\r\ncontract NESTAbonus {\r\n    using address_make_payable for address;\r\n    using SafeMath for uint256;\r\n    IBNEST nestContract;\r\n    IBMapping mappingContract;                  \r\n    NESTSave baseMapping;\r\n    Abonus abonusContract;\r\n    \r\n    uint256 timeLimit = 168 hours;                    \r\n    uint256 nextTime = 1562299200;                   \r\n    uint256 getAbonusTimeLimit = 60 hours;           \r\n    \r\n    uint256 ethNum = 0;                         \r\n    uint256 nestAllValue = 0;                   \r\n    uint256 times = 0;                          \r\n    \r\n    mapping(uint256 =\u003E mapping(address =\u003E bool)) getMapping;\r\n    constructor (address map) public {\r\n        mappingContract = IBMapping(map); \r\n        nestContract = IBNEST(address(mappingContract.checkAddress(\u0022nest\u0022)));\r\n        baseMapping = NESTSave(address(mappingContract.checkAddress(\u0022nestSave\u0022)));\r\n        address payable addr = address(mappingContract.checkAddress(\u0022abonus\u0022)).make_payable();\r\n        abonusContract = Abonus(addr);\r\n    }\r\n\r\n    function changeMapping(address map) public {\r\n        mappingContract = IBMapping(map); \r\n        nestContract = IBNEST(address(mappingContract.checkAddress(\u0022nest\u0022)));\r\n        baseMapping = NESTSave(address(mappingContract.checkAddress(\u0022nestSave\u0022)));\r\n        address payable addr = address(mappingContract.checkAddress(\u0022abonus\u0022)).make_payable();\r\n        abonusContract = Abonus(addr);\r\n    }\r\n    \r\n    function depositIn(uint256 amount) public {\r\n        require(isContract(address(msg.sender)) == false);          \r\n        uint256 nowTime = now;\r\n        if (nowTime \u003C nextTime) {\r\n            require(!(nowTime \u003E= nextTime.sub(timeLimit) \u0026\u0026 nowTime \u003C= nextTime.sub(timeLimit).add(getAbonusTimeLimit)));\r\n        } else {\r\n            require(!(nowTime \u003E= nextTime \u0026\u0026 nowTime \u003C= nextTime.add(getAbonusTimeLimit)));\r\n            uint256 time = (nowTime.sub(nextTime)).div(timeLimit);\r\n            uint256 startTime = nextTime.add((time).mul(timeLimit));         \r\n            uint256 endTime = startTime.add(getAbonusTimeLimit);                     \r\n            require(!(nowTime \u003E= startTime \u0026\u0026 nowTime \u003C= endTime));\r\n        }\r\n        baseMapping.depositIn(amount);                              \r\n    }\r\n    \r\n    function takeOut(uint256 amount) public {\r\n        require(isContract(address(msg.sender)) == false);          \r\n        require(amount != 0);                                       \r\n        require(amount \u003C= baseMapping.checkAmount(address(msg.sender)));\r\n        baseMapping.takeOut(amount);                         \r\n    }r\n    \r\n    function getETH() public {\r\n        require(isContract(address(msg.sender)) == false);          \r\n        reloadTimeAndMapping ();                \r\n        uint256 nowTime = now;\r\n        require(nowTime \u003E= nextTime.sub(timeLimit) \u0026\u0026 nowTime \u003C= nextTime.sub(timeLimit).add(getAbonusTimeLimit));\r\n        require(getMapping[times.sub(1)][address(msg.sender)] != true);     \r\n        uint256 nestAmount = baseMapping.checkAmount(address(msg.sender));\r\n        require(nestAmount \u003E 0);\r\n        require(nestAllValue \u003E 0);\r\n        uint256 selfEth = nestAmount.mul(ethNum).div(nestAllValue);\r\n        require(selfEth \u003E 0);\r\n        \r\n        getMapping[times.sub(1)][address(msg.sender)] = true;\r\n        abonusContract.getETH(selfEth);                           \r\n    }\r\n    \r\n    function reloadTimeAndMapping () private {\r\n        require(isContract(address(msg.sender)) == false);          \r\n        uint256 nowTime = now;\r\n        if (nowTime \u003E= nextTime) {                                                      \r\n            uint256 time = (nowTime.sub(nextTime)).div(timeLimit);\r\n            uint256 startTime = nextTime.add((time).mul(timeLimit));         \r\n            uint256 endTime = startTime.add(getAbonusTimeLimit);                     \r\n            if (nowTime \u003E= startTime \u0026\u0026 nowTime \u003C= endTime) {\r\n                nextTime = getNextTime();                               \r\n                times = times.add(1);                                   \r\n                ethNum = abonusContract.getETHNum();                    \r\n                nestAllValue = allValue();                              \r\n            }\r\n        }\r\n    }\r\n    \r\n    function getInfo() public view returns (uint256 _nextTime, uint256 _getAbonusTime, uint256 _ethNum, uint256 _nestValue, uint256 _myJoinNest, uint256 _getEth, uint256 _allowNum, uint256 _leftNum, bool allowAbonus)  {\r\n        uint256 nowTime = now;\r\n        if (nowTime \u003E= nextTime.sub(timeLimit) \u0026\u0026 nowTime \u003C= nextTime.sub(timeLimit).add(getAbonusTimeLimit)) {\r\n            allowAbonus = getMapping[times.sub(1)][address(msg.sender)];\r\n            _ethNum = ethNum;\r\n            _nestValue = nestAllValue;\r\n            \r\n        } else {\r\n            _ethNum = abonusContract.getETHNum();\r\n            _nestValue = allValue();\r\n            allowAbonus = getMapping[times][address(msg.sender)];\r\n        }\r\n        _myJoinNest = baseMapping.checkAmount(address(msg.sender));\r\n        if (allowAbonus == true) {\r\n            _getEth = 0; \r\n        } else {\r\n            _getEth = _myJoinNest.mul(_ethNum).div(_nestValue);\r\n        }\r\n        \r\n       \r\n        _nextTime = getNextTime();\r\n        _getAbonusTime = _nextTime.sub(timeLimit).add(getAbonusTimeLimit);\r\n        _allowNum = nestContract.allowance(address(msg.sender), address(baseMapping));\r\n        _leftNum = nestContract.balanceOf(address(msg.sender));\r\n        \r\n    }\r\n    \r\n    function getNextTime() public view returns (uint256) {\r\n        uint256 nowTime = now;\r\n        if (nextTime \u003E= nowTime) { \r\n            return nextTime; \r\n        } else {\r\n            uint256 time = (nowTime.sub(nextTime)).div(timeLimit);\r\n            return nextTime.add(timeLimit.mul(time.add(1)));\r\n        }\r\n    }\r\n    \r\n    function allValue() public view returns (uint256) {\r\n        uint256 all = 10000000000 ether;\r\n        uint256 leftNum = all.sub(nestContract.balanceOf(address(mappingContract.checkAddress(\u0022miningSave\u0022))));\r\n        return leftNum;\r\n    }\r\n    function changeTimeLimit(uint256 hour) public onlyOwner {\r\n        require(hour \u003E 0);\r\n        timeLimit = hour.mul(1 hours);\r\n    }\r\n\r\n    function changeGetAbonusTimeLimit(uint256 hour) public onlyOwner {\r\n        require(hour \u003E 0);\r\n        getAbonusTimeLimit = hour;\r\n    }\r\n\r\n    modifier onlyOwner(){\r\n        require(mappingContract.checkOwners(msg.sender) == true);\r\n        _;\r\n    }\r\n    function isContract(address addr) public view returns (bool) {\r\n        uint size;\r\n        assembly { size := extcodesize(addr) }\r\n        return size \u003E 0;\r\n    }\r\n}","ABI":"[{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022getETH\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022addr\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022isContract\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022depositIn\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022getInfo\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022_nextTime\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_getAbonusTime\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_ethNum\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_nestValue\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_myJoinNest\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_getEth\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_allowNum\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_leftNum\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022allowAbonus\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022hour\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022changeTimeLimit\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022getNextTime\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022allValue\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022map\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022changeMapping\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022takeOut\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022hour\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022changeGetAbonusTimeLimit\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[{\u0022name\u0022:\u0022map\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022constructor\u0022}]","ContractName":"NESTAbonus","CompilerVersion":"v0.5.9\u002Bcommit.e560f70d","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000005e7db2ffc5b2c7c47103e4f21c702bc402603fbf","Library":"","SwarmSource":"bzzr://5678cb3a0dce46e12ef57b2a0dbe1fcb8e1a6ac6f2bd723b23b935b442793881"}]