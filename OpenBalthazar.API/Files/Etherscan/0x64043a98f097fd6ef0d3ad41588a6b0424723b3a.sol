[{"SourceCode":"/// dach.sol -- Dai automated clearing house\r\n\r\n// Copyright (C) 2020  Martin Lundfall\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see \u003Chttp://www.gnu.org/licenses/\u003E.\r\n\r\npragma solidity \u003E=0.5.12;\r\n\r\ninterface TokenLike {\r\n  function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n  function approve(address to, uint256 amount) external returns (bool);\r\n  function balanceOf(address to) external returns (uint);\r\n  function join(address to, uint256 amount) external;\r\n  function exit(address from, uint256 amount) external;\r\n}\r\n\r\ninterface Uniswappy {\r\n    function tokenToEthTransferInput(uint256 tokens_sold, uint256 min_tokens,\r\n                uint256 deadline, address recipient) external returns (uint256);\r\n}\r\n/*\r\nThe Dai automated clearing house demonstrates the generality of the \u0060permit()\u0060 pattern,\r\nallowing users perform the following actions via signatures, paying for the transaction fee\r\nin the native token instead of eth.\r\n\r\n1. Dai transfers (DaiCheque)\r\n2. Sell dai for eth (DaiSwap)\r\n3. Convert dai to chai (ChaiJoin)\r\n4. Chai transfers (ChaiCheque)\r\n5. Sell dai for eth (ChaiSwap)\r\n6. Convert chai to dai (ChaiExit)\r\n\r\nAll \u0060fee\u0060s are denominated in the \u0022source token\u0022, \r\nand paid to the \u0060relayer\u0060.\r\n\r\nIn other words, actions 1-3 have their \u0060fee\u0060 denominated in Dai\r\nand require the \u0060sender\u0060 to \u0060dai.permit\u0060 the dach before performed,\r\nwhile actions 4-6 have their \u0060fee\u0060 denominated in Chai and require\r\na \u0060chai.permit\u0060 in order to succeed.\r\n*/\r\n\r\ncontract Dach {\r\n  TokenLike public constant dai = TokenLike(0x6B175474E89094C44Da98b954EedeAC495271d0F);\r\n  TokenLike public constant chai = TokenLike(0x06AF07097C9Eeb7fD685c692751D5C66dB49c215);\r\n  Uniswappy public constant daiUniswap = Uniswappy(0x2a1530C4C41db0B0b2bB646CB5Eb1A67b7158667);\r\n  Uniswappy public constant chaiUniswap = Uniswappy(0x6C3942B383bc3d0efd3F36eFa1CBE7C8E12C8A2B);\r\n  \r\n  mapping (address =\u003E uint256) public nonces;\r\n  string public constant version = \u00221\u0022;\r\n  string public constant name = \u0022Dai Automated Clearing House\u0022;\r\n\r\n  // --- EIP712 niceties ---\r\n  //keccak256(abi.encode(\r\n  //   keccak256(\u0022EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\u0022),\r\n  //   keccak256(bytes(name)), keccak256(bytes(version)), chainId, address(this)));\r\n  //generate with ADDRESS=$(dapp address $ETH_FROM $(seth nonce $ETH_FROM)) CHAIN_ID=1 ./bin/domain_separator\r\n  bytes32 constant public DOMAIN_SEPARATOR = 0x12941727324f08818b6823ad59845bef3c6e4139428eb3fd9490efeb9d088969;\r\n\r\n  //keccak256(\u0022DaiCheque(address sender,address receiver,uint256 amount,uint256 fee,uint256 nonce,uint256 expiry,address relayer)\u0022);\r\n  bytes32 constant public DAICHEQUE_TYPEHASH = 0x2d4b89f08cf38e73f267d45cf655caeec6ec2d1958ff3f7c04bc93b285692ba0;\r\n\r\n  //keccak256(\u0022DaiSwap(address sender,uint256 amount,uint256 min_eth,uint256 fee,uint256 nonce,uint256 expiry,address relayer)\u0022);\r\n  bytes32 constant public DAISWAP_TYPEHASH = 0x569d16faba32239b19edb6a011b30ad0035ca192ef2f179c46edfb1d50280084;\r\n\r\n  //keccak256(\u0022ChaiJoin(address sender,address receiver,uint256 amount,uint256 fee,uint256 nonce,uint256 expiry,address relayer)\u0022);\r\n  bytes32 constant public CHAIJOIN_TYPEHASH = 0x9b0767889629ab3e37d797178aba3047e96d19239c5977f2c56ea8da3275cb05;\r\n\r\n  //keccak256(\u0022ChaiCheque(address sender,address receiver,uint256 amount,uint256 fee,uint256 nonce,uint256 expiry,address relayer)\u0022);\r\n  bytes32 constant public CHAICHEQUE_TYPEHASH = 0x77ae2fa9d8312ad1d4a645b9102258e9fc5e64280c2198da01c426cbcc966fb1;\r\n\r\n  //keccak256(\u0022ChaiSwap(address sender,uint256 amount,uint256 min_eth,uint256 fee,uint256 nonce,uint256 expiry,address relayer)\u0022);\r\n  bytes32 constant public CHAISWAP_TYPEHASH = 0x7cf3e6fd2031b292afffa62c2dbc5e4212855cadd6455a36bed415f2b8246a47;\r\n\r\n  //keccak256(\u0022ChaiExit(address sender,address receiver,uint256 amount,uint256 fee,uint256 nonce,uint256 expiry,address relayer)\u0022);\r\n  bytes32 constant public CHAIEXIT_TYPEHASH = 0x69fa4cd566f89a9c8d4e3ca437a7fbc893137962cb1b036c59ceeb1415c58c01;\r\n \r\n  constructor() public {\r\n    dai.approve(address(chai), uint(-1));\r\n    dai.approve(address(daiUniswap), uint(-1));\r\n    chai.approve(address(chaiUniswap), uint(-1));\r\n  }\r\n\r\n  function digest(bytes32 hash, address src, address dst, uint amount, uint fee,\r\n                  uint nonce, uint expiry, address relayer) internal view returns (bytes32) {\r\n    return keccak256(abi.encodePacked(\u0022\\x19\\x01\u0022, DOMAIN_SEPARATOR,\r\n                                      keccak256(abi.encode(hash, src, dst, amount, fee, nonce, expiry, relayer))\r\n                                      )\r\n                     );\r\n  }\r\n\r\n  function digest(bytes32 hash, address src, uint amount, uint min_eth, uint fee,\r\n                  uint nonce, uint expiry, address relayer) internal view returns (bytes32) {\r\n    return keccak256(abi.encodePacked(\u0022\\x19\\x01\u0022, DOMAIN_SEPARATOR,\r\n                                      keccak256(abi.encode(hash, src, amount, min_eth, fee, nonce, expiry, relayer))\r\n                                      )\r\n                     );\r\n  }\r\n\r\n  // --- Dai actions ---\r\n  // Requires dai.permit before execution\r\n\r\n  // Transfer @amount dai to the receiver from the sender\r\n  function daiCheque(address sender, address receiver, uint amount, uint fee, uint nonce,\r\n                     uint expiry, address relayer, uint8 v, bytes32 r, bytes32 s) public {\r\n    require(sender != address(0) \u0026\u0026 sender == ecrecover(digest(DAICHEQUE_TYPEHASH, sender, receiver,\r\n                                       amount, fee, nonce, expiry, relayer), v, r, s), \u0022invalid cheque\u0022);\r\n    require(nonce  == nonces[sender]\u002B\u002B, \u0022invalid nonce\u0022);\r\n    require(expiry == 0 || now \u003C= expiry, \u0022cheque expired\u0022);\r\n    dai.transferFrom(sender, relayer, fee);\r\n    dai.transferFrom(sender, receiver, amount);\r\n  }\r\n\r\n  // Sell @amount dai for eth on uniswap\r\n  function daiSwap(address sender, uint amount, uint min_eth, uint fee, uint nonce,\r\n                   uint expiry, address relayer, uint8 v, bytes32 r, bytes32 s) public returns (uint256) {\r\n    require(sender != address(0) \u0026\u0026 sender == ecrecover(digest(DAISWAP_TYPEHASH, sender, amount,\r\n                                       min_eth, fee, nonce, expiry, relayer), v, r, s), \u0022invalid swap\u0022);\r\n    require(nonce == nonces[sender]\u002B\u002B, \u0022invalid nonce\u0022);\r\n    require(expiry == 0 || now \u003C= expiry, \u0022swap expired\u0022);\r\n    dai.transferFrom(sender, address(this), amount);\r\n    dai.transferFrom(sender, relayer, fee);\r\n    return daiUniswap.tokenToEthTransferInput(amount, min_eth, now, sender);\r\n  }\r\n\r\n  // Convert @amount dai to chai\r\n  function joinChai(address sender, address receiver, uint amount, uint fee, uint nonce,\r\n                    uint expiry, address relayer, uint8 v, bytes32 r, bytes32 s) public {\r\n    require(sender != address(0) \u0026\u0026 sender == ecrecover(digest(CHAIJOIN_TYPEHASH, sender, receiver,\r\n                                       amount, fee, nonce, expiry, relayer), v, r, s), \u0022invalid join\u0022);\r\n    require(nonce == nonces[sender]\u002B\u002B, \u0022invalid nonce\u0022);\r\n    require(expiry == 0 || now \u003C= expiry, \u0022join expired\u0022);\r\n    dai.transferFrom(sender, address(this), amount);\r\n    dai.transferFrom(sender, relayer, fee);\r\n    chai.join(receiver, amount);\r\n  }\r\n\r\n  // --- Chai actions ---\r\n  // Requires chai.permit before execution\r\n\r\n  // Transfer @amount chai to the receiver from the sender\r\n  function chaiCheque(address sender, address receiver, uint amount, uint fee, uint nonce,\r\n                      uint expiry, address relayer, uint8 v, bytes32 r, bytes32 s) public {\r\n    require(sender != address(0) \u0026\u0026 sender == ecrecover(digest(CHAICHEQUE_TYPEHASH, sender, receiver,\r\n                                       amount, fee, nonce, expiry, relayer), v, r, s), \u0022invalid cheque\u0022);\r\n    require(nonce  == nonces[sender]\u002B\u002B, \u0022invalid nonce\u0022);\r\n    require(expiry == 0 || now \u003C= expiry, \u0022cheque expired\u0022);\r\n    chai.transferFrom(sender, relayer, fee);\r\n    chai.transferFrom(sender, receiver, amount);\r\n  }\r\n\r\n  // Sell @amount chai for eth on uniswap\r\n  function chaiSwap(address sender, uint amount, uint min_eth, uint fee, uint nonce,\r\n                    uint expiry, address relayer, uint8 v, bytes32 r, bytes32 s) public returns (uint256) {\r\n    require(sender != address(0) \u0026\u0026 sender == ecrecover(digest(CHAISWAP_TYPEHASH, sender, amount,\r\n                                       min_eth, fee, nonce, expiry, relayer), v, r, s), \u0022invalid swap\u0022);\r\n    require(nonce == nonces[sender]\u002B\u002B, \u0022invalid nonce\u0022);\r\n    require(expiry == 0 || now \u003C= expiry, \u0022swap expired\u0022);\r\n    chai.transferFrom(sender, address(this), amount);\r\n    chai.transferFrom(sender, relayer, fee);\r\n    return chaiUniswap.tokenToEthTransferInput(amount, min_eth, now, sender);\r\n  }\r\n\r\n  // Convert @amount chai to dai\r\n  function exitChai(address sender, address receiver, uint amount, uint fee, uint nonce,\r\n                    uint expiry, address relayer, uint8 v, bytes32 r, bytes32 s) public {\r\n    require(sender != address(0) \u0026\u0026 sender == ecrecover(digest(CHAIEXIT_TYPEHASH, sender, receiver,\r\n                                       amount, fee, nonce, expiry, relayer), v, r, s), \u0022invalid exit\u0022);\r\n    require(nonce == nonces[sender]\u002B\u002B, \u0022invalid nonce\u0022);\r\n    require(expiry == 0 || now \u003C= expiry, \u0022exit expired\u0022);\r\n    chai.exit(sender, amount);\r\n    dai.transferFrom(address(this), receiver, dai.balanceOf(address(this)));\r\n    chai.transferFrom(sender, relayer, fee);\r\n  }\r\n}","ABI":"[{\u0022inputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022constructor\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022CHAICHEQUE_TYPEHASH\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022CHAIEXIT_TYPEHASH\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022CHAIJOIN_TYPEHASH\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022CHAISWAP_TYPEHASH\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022DAICHEQUE_TYPEHASH\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022DAISWAP_TYPEHASH\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022DOMAIN_SEPARATOR\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022chai\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022contract TokenLike\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022sender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022receiver\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022fee\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022nonce\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022expiry\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022relayer\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint8\u0022,\u0022name\u0022:\u0022v\u0022,\u0022type\u0022:\u0022uint8\u0022},{\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022r\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022s\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022chaiCheque\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022sender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022min_eth\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022fee\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022nonce\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022expiry\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022relayer\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint8\u0022,\u0022name\u0022:\u0022v\u0022,\u0022type\u0022:\u0022uint8\u0022},{\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022r\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022s\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022chaiSwap\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022chaiUniswap\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022contract Uniswappy\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022dai\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022contract TokenLike\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022sender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022receiver\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022fee\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022nonce\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022expiry\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022relayer\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint8\u0022,\u0022name\u0022:\u0022v\u0022,\u0022type\u0022:\u0022uint8\u0022},{\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022r\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022s\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022daiCheque\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022sender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022min_eth\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022fee\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022nonce\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022expiry\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022relayer\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint8\u0022,\u0022name\u0022:\u0022v\u0022,\u0022type\u0022:\u0022uint8\u0022},{\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022r\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022s\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022daiSwap\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022daiUniswap\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022contract Uniswappy\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022sender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022receiver\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022fee\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022nonce\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022expiry\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022relayer\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint8\u0022,\u0022name\u0022:\u0022v\u0022,\u0022type\u0022:\u0022uint8\u0022},{\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022r\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022s\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022exitChai\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022sender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022receiver\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022fee\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022nonce\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022expiry\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022relayer\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint8\u0022,\u0022name\u0022:\u0022v\u0022,\u0022type\u0022:\u0022uint8\u0022},{\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022r\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022s\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022joinChai\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022name\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022string\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022nonces\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022version\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022string\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022}]","ContractName":"Dach","CompilerVersion":"v0.5.12\u002Bcommit.7709ece9","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://f93bc70b55eaa55d70a4aa35ededf37492080272ae83a5b08b8fa8e8f7eadbb3"}]