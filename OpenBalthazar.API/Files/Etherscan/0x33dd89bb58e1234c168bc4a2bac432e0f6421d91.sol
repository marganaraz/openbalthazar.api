[{"SourceCode":"// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * \u0060onlyOwner\u0060, which can be aplied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \u0022Ownable: caller is not the owner\u0022);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * \u0060onlyOwner\u0060 functions anymore. Can only be called by the current owner.\r\n     *\r\n     * \u003E Note: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (\u0060newOwner\u0060).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (\u0060newOwner\u0060).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \u0022Ownable: new owner is the zero address\u0022);\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/IFreezable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available events\r\n * \u0060AccountFrozen\u0060 and \u0060AccountUnfroze\u0060 and it will make sure that any child\r\n * that implements all necessary functionality.\r\n */\r\ncontract IFreezable {\r\n    event AccountFrozen(address indexed account);\r\n    event AccountUnfrozen(address indexed account);\r\n\r\n    function _freezeAccount(address account) internal;\r\n    function _unfreezeAccount(address account) internal;\r\n    function _isAccountFrozen(address account) internal view returns (bool);\r\n}\r\n\r\n// File: contracts/interfaces/IPausable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers \u0060whenNotPaused\u0060 and \u0060whenPaused\u0060, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the functions are implemented.\r\n */\r\ncontract IPausable{\r\n    event Paused(address account);\r\n    event Unpaused(address account);\r\n\r\n    function paused() public view returns (bool);\r\n\r\n    function _pause() internal;\r\n    function _unpause() internal;\r\n}\r\n\r\n// File: contracts/interfaces/IFeatured.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n/**\r\n * @dev Support for \u0022SRC20 feature\u0022 modifier.\r\n */\r\ncontract IFeatured is IPausable, IFreezable {\r\n    \r\n    event AccountFrozen(address indexed account);\r\n    event AccountUnfrozen(address indexed account);\r\n    event TokenFrozen();\r\n    event TokenUnfrozen();\r\n    \r\n    uint8 public constant ForceTransfer = 0x01;\r\n    uint8 public constant Pausable = 0x02;\r\n    uint8 public constant AccountBurning = 0x04;\r\n    uint8 public constant AccountFreezing = 0x08;\r\n\r\n    function _enable(uint8 features) internal;\r\n    function isEnabled(uint8 feature) public view returns (bool);\r\n\r\n    function checkTransfer(address from, address to) external view returns (bool);\r\n    function isAccountFrozen(address account) external view returns (bool);\r\n    function freezeAccount(address account) external;\r\n    function unfreezeAccount(address account) external;\r\n    function isTokenPaused() external view returns (bool);\r\n    function pauseToken() external;\r\n    function unPauseToken() external;\r\n}\r\n\r\n// File: contracts/token/features/Pausable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @title Pausable token feature\r\n * @dev Base contract providing implementation for token pausing and\r\n * checking if token is paused.\r\n */\r\ncontract Pausable is IPausable {\r\n    bool private _paused;\r\n\r\n    /**\r\n    * @dev Modifier to make a function callable only when the contract is not paused.\r\n    */\r\n    modifier whenNotPaused() {\r\n        require(!_paused, \u0022Pausable: paused\u0022);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(_paused, \u0022Pausable: not paused\u0022);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor () internal {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Sets stopped state.\r\n     */\r\n    function _pause() internal whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     */\r\n    function _unpause() internal whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(msg.sender);\r\n    }\r\n}\r\n\r\n// File: contracts/token/features/Freezable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @title Freezable account\r\n * @dev Base contract providing internal methods for freezing,\r\n * unfreezing and checking accounts\u0027 status.\r\n */\r\ncontract Freezable is IFreezable {\r\n    mapping (address =\u003E bool) private _frozen;\r\n\r\n    event AccountFrozen(address indexed account);\r\n    event AccountUnfrozen(address indexed account);\r\n\r\n    /**\r\n     * @dev Freeze an account\r\n     */\r\n    function _freezeAccount(address account) internal {\r\n        _frozen[account] = true;\r\n        emit AccountFrozen(account);\r\n    }\r\n\r\n    /**\r\n     * @dev Unfreeze an account\r\n     */\r\n    function _unfreezeAccount(address account) internal {\r\n         _frozen[account] = false;\r\n         emit AccountUnfrozen(account);\r\n    }\r\n\r\n    /**\r\n     * @dev Check if an account is frozen. If token is frozen, all\r\n     * of accounts are frozen also.\r\n     * @return bool\r\n     */\r\n    function _isAccountFrozen(address account) internal view returns (bool) {\r\n         return _frozen[account];\r\n    }\r\n}\r\n\r\n// File: contracts/token/features/Featured.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Support for \u0022SRC20 feature\u0022 modifier.\r\n */\r\ncontract Featured is IFeatured, Pausable, Freezable, Ownable {\r\n    uint8 public _enabledFeatures;\r\n\r\n    modifier enabled(uint8 feature) {\r\n        require(isEnabled(feature), \u0022Token feature is not enabled\u0022);\r\n        _;\r\n    }\r\n\r\n    constructor (address owner, uint8 features) public {\r\n        _enable(features);\r\n        _transferOwnership(owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Enable features. Call from SRC20 token constructor.\r\n     * @param features ORed features to enable.\r\n     */\r\n    function _enable(uint8 features) internal {\r\n        _enabledFeatures = features;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns if feature is enabled.\r\n     * @param feature Feature constant to check if enabled.\r\n     * @return True if feature is enabled.\r\n     */\r\n    function isEnabled(uint8 feature) public view returns (bool) {\r\n        return _enabledFeatures \u0026 feature \u003E 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Call to check if transfer will pass from feature contract stand point.\r\n     *\r\n     * @param from The address to transfer from.\r\n     * @param to The address to send tokens to.\r\n     *\r\n     * @return True if the transfer is allowed\r\n     */\r\n    function checkTransfer(address from, address to) external view returns (bool) {\r\n        return !_isAccountFrozen(from) \u0026\u0026 !_isAccountFrozen(to) \u0026\u0026 !paused();\r\n    }\r\n\r\n    /**\r\n    * @dev Check if specified account is frozen. Token issuer can\r\n    * freeze any account at any time and stop accounts making\r\n    * transfers.\r\n    *\r\n    * @return True if account is frozen.\r\n    */\r\n    function isAccountFrozen(address account) external view returns (bool) {\r\n        return _isAccountFrozen(account);\r\n    }\r\n\r\n    /**\r\n     * @dev Freezes account.\r\n     * Emits AccountFrozen event.\r\n     */\r\n    function freezeAccount(address account)\r\n    external\r\n    enabled(AccountFreezing)\r\n    onlyOwner\r\n    {\r\n        _freezeAccount(account);\r\n    }\r\n\r\n    /**\r\n     * @dev Unfreezes account.\r\n     * Emits AccountUnfrozen event.\r\n     */\r\n    function unfreezeAccount(address account)\r\n    external\r\n    enabled(AccountFreezing)\r\n    onlyOwner\r\n    {\r\n        _unfreezeAccount(account);\r\n    }\r\n\r\n    /**\r\n     * @dev Check if token is frozen. Token issuer can freeze token\r\n     * at any time and stop all accounts from making transfers. When\r\n     * token is frozen, isFrozen(account) returns true for every\r\n     * account.\r\n     *\r\n     * @return True if token is frozen.\r\n     */\r\n    function isTokenPaused() external view returns (bool) {\r\n        return paused();\r\n    }\r\n\r\n    /**\r\n     * @dev Pauses token.\r\n     * Emits TokenPaused event.\r\n     */\r\n    function pauseToken()\r\n    external\r\n    enabled(Pausable)\r\n    onlyOwner\r\n    {\r\n        _pause();\r\n    }\r\n\r\n    /**\r\n     * @dev Unpause token.\r\n     * Emits TokenUnPaused event.\r\n     */\r\n    function unPauseToken()\r\n    external\r\n    enabled(Pausable)\r\n    onlyOwner\r\n    {\r\n        _unpause();\r\n    }\r\n}","ABI":"[{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022isTokenPaused\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022pauseToken\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022Pausable\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint8\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022paused\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022feature\u0022,\u0022type\u0022:\u0022uint8\u0022}],\u0022name\u0022:\u0022isEnabled\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022renounceOwnership\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022AccountBurning\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint8\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022unfreezeAccount\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022AccountFreezing\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint8\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022_enabledFeatures\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint8\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022owner\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022isOwner\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022unPauseToken\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022ForceTransfer\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint8\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022from\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022to\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022checkTransfer\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022isAccountFrozen\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022freezeAccount\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022transferOwnership\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[{\u0022name\u0022:\u0022owner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022features\u0022,\u0022type\u0022:\u0022uint8\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022constructor\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022previousOwner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022OwnershipTransferred\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022AccountFrozen\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022AccountUnfrozen\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022TokenFrozen\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022TokenUnfrozen\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022Paused\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022Unpaused\u0022,\u0022type\u0022:\u0022event\u0022}]","ContractName":"Featured","CompilerVersion":"v0.5.10\u002Bcommit.5a6ea5b1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000003ec1440b81c55cb7646491a7187710512a7f4b190000000000000000000000000000000000000000000000000000000000000003","Library":"","SwarmSource":"bzzr://cb52481f2957db727c128d8d5d45e0698742f8d262f9f257459d76a70375e273"}]