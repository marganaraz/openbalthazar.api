[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\nlibrary SafeMath {\r\n    \r\n/**\r\n * @dev Multiplies two unsigned integers, reverts on overflow.\r\n */\r\n \r\nfunction mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n\r\nif (_a == 0) {\r\nreturn 0;\r\n}\r\n\r\nuint256 c = _a * _b;\r\nrequire(c / _a == _b);\r\nreturn c;\r\n}\r\n\r\n/**\r\n * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n */\r\n \r\nfunction div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n// Solidity only automatically asserts when dividing by 0\r\nrequire(_b \u003E 0);\r\nuint256 c = _a / _b;\r\n // assert(a == b * c \u002B a % b); // There is no case in which this doesn\u0027t hold\r\nreturn c;\r\n\r\n}\r\n\r\n/**\r\n * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n */\r\n     \r\nfunction sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n\r\nrequire(_b \u003C= _a);\r\nreturn _a - _b;\r\n}\r\n\r\n/**\r\n * @dev Adds two unsigned integers, reverts on overflow.\r\n */\r\n \r\nfunction add(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n\r\nuint256 c = _a \u002B _b;\r\nrequire(c \u003E= _a);\r\nreturn c;\r\n\r\n}\r\n\r\n/**\r\n  * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n  * reverts when dividing by zero.\r\n   */\r\nfunction mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n}\r\n}\r\n\r\n/*\r\n * Ownable\r\n *\r\n * Base contract with an owner.\r\n * Provides onlyOwner modifier, which prevents function from running if it is called by anyone other than the owner.\r\n*/\r\n\r\ncontract Ownable {\r\naddress public owner;\r\naddress public newOwner;\r\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\nconstructor() public {\r\nowner = msg.sender;\r\nnewOwner = address(0);\r\n}\r\n\r\n// allows execution by the owner only\r\n\r\nmodifier onlyOwner() {\r\nrequire(msg.sender == owner);\r\n_;\r\n}\r\n\r\nmodifier onlyNewOwner() {\r\nrequire(msg.sender != address(0));\r\nrequire(msg.sender == newOwner);\r\n_;\r\n}\r\n\r\n/**\r\n    @dev allows transferring the contract ownership\r\n    the new owner still needs to accept the transfer\r\n    can only be called by the contract owner\r\n    @param _newOwner    new contract owner\r\n*/\r\n\r\nfunction transferOwnership(address _newOwner) public onlyOwner {\r\nrequire(_newOwner != address(0));\r\nnewOwner = _newOwner;\r\n}\r\n\r\n/**\r\n    @dev used by a new owner to accept an ownership transfer\r\n*/\r\n\r\nfunction acceptOwnership() public onlyNewOwner {\r\nemit OwnershipTransferred(owner, newOwner);\r\nowner = newOwner;\r\n}\r\n}\r\n\r\n/*\r\n    ERC20 Token interface\r\n*/\r\n\r\ncontract ERC20 {\r\n\r\nfunction totalSupply() public view returns (uint256);\r\nfunction balanceOf(address who) public view returns (uint256);\r\nfunction allowance(address owner, address spender) public view returns (uint256);\r\nfunction transfer(address to, uint256 value) public returns (bool);\r\nfunction transferFrom(address from, address to, uint256 value) public returns (bool);\r\nfunction approve(address spender, uint256 value) public returns (bool);\r\nfunction sendwithgas (address _from, address _to, uint256 _value, uint256 _fee) public returns (bool);\r\nevent Approval(address indexed owner, address indexed spender, uint256 value);\r\nevent Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ninterface TokenRecipient {\r\nfunction receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external;\r\n}\r\n\r\ncontract GGGCoin is ERC20, Ownable {\r\nusing SafeMath for uint256;\r\n\r\nstring public name;\r\nstring public symbol;\r\nuint8 public decimals;\r\nuint256 internal initialSupply;\r\nuint256 internal totalSupply_;\r\nmapping(address =\u003E uint256) internal balances;\r\nmapping(address =\u003E bool) public frozen;\r\nmapping(address =\u003E mapping(address =\u003E uint256)) internal allowed;\r\nmapping(address =\u003E bool) public save;\r\n\r\nevent Burn(address indexed owner, uint256 value);\r\nevent Mint(uint256 value);\r\nevent Freeze(address indexed holder);\r\nevent Unfreeze(address indexed holder);\r\nevent Save(address indexed holder);\r\n\r\nmodifier notFrozen(address _holder) {\r\nrequire(!frozen[_holder]);\r\n_;\r\n}\r\n\r\nconstructor() public {\r\nname = \u0022GGGCoin\u0022;\r\nsymbol = \u0022GGGC\u0022;\r\ndecimals = 0;\r\ninitialSupply = 1000000000;\r\ntotalSupply_ = 1000000000;\r\nbalances[owner] = totalSupply_;\r\nemit Transfer(address(0), owner, totalSupply_);\r\n}\r\n\r\nfunction () public payable {\r\nrevert();\r\n}\r\n\r\n/**\r\n  * @dev Total number of tokens in existence\r\n  */\r\n   \r\nfunction totalSupply() public view returns (uint256) {\r\nreturn totalSupply_;\r\n}\r\n\r\n/**\r\n * @dev Transfer token for a specified addresses\r\n * @param _from The address to transfer from.\r\n * @param _to The address to transfer to.\r\n * @param _value The amount to be transferred.\r\n */ \r\n\r\nfunction _transfer(address _from, address _to, uint _value) internal {\r\n\r\nrequire(_to != address(0));\r\nrequire(_value \u003C= balances[_from]);\r\nrequire(_value \u003C= allowed[_from][msg.sender]);\r\nbalances[_from] = balances[_from].sub(_value);\r\nbalances[_to] = balances[_to].add(_value);\r\nallowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\nemit Transfer(_from, _to, _value);\r\n}\r\n\r\n/**\r\n * @dev Transfer token for a specified address\r\n * @param _to The address to transfer to.\r\n * @param _value The amount to be transferred.\r\n */\r\n     \r\n \r\nfunction transfer(address _to, uint256 _value) public notFrozen(msg.sender) returns (bool) {\r\n\r\nrequire(_to != address(0));\r\nrequire(_value \u003C= balances[msg.sender]);\r\nbalances[msg.sender] = balances[msg.sender].sub(_value);\r\nbalances[_to] = balances[_to].add(_value);\r\nemit Transfer(msg.sender, _to, _value);\r\nreturn true;\r\n}\r\n\r\n/**\r\n * @dev Gets the balance of the specified address.\r\n * @param _holder The address to query the balance of.\r\n * @return An uint256 representing the amount owned by the passed address.\r\n */\r\n \r\nfunction balanceOf(address _holder) public view returns (uint256 balance) {\r\nreturn balances[_holder];\r\n}\r\n\r\n/**\r\n * ERC20 Token Transfer\r\n */\r\n\r\nfunction sendwithgas (address _from, address _to, uint256 _value, uint256 _fee) public onlyOwner notFrozen(_from) returns (bool) {\r\n\r\nuint256 _total;\r\n_total = _value.add(_fee);\r\nrequire(!frozen[_from]);\r\nrequire(_to != address(0));\r\nrequire(_total \u003C= balances[_from]);\r\nbalances[msg.sender] = balances[msg.sender].add(_fee);\r\nbalances[_from] = balances[_from].sub(_total);\r\nbalances[_to] = balances[_to].add(_value);\r\n\r\nemit Transfer(_from, _to, _value);\r\nemit Transfer(_from, msg.sender, _fee);\r\n\r\nreturn true;\r\n\r\n}\r\n\r\n/**\r\n * @dev Transfer tokens from one address to another.\r\n * Note that while this function emits an Approval event, this is not required as per the specification,\r\n * and other compliant implementations may not emit the event.\r\n * @param _from address The address which you want to send tokens from\r\n * @param _to address The address which you want to transfer to\r\n * @param _value uint256 the amount of tokens to be transferred\r\n */\r\n     \r\nfunction transferFrom(address _from, address _to, uint256 _value) public notFrozen(_from) returns (bool) {\r\n\r\nrequire(_to != address(0));\r\nrequire(_value \u003C= balances[_from]);\r\nrequire(_value \u003C= allowed[_from][msg.sender]);\r\n_transfer(_from, _to, _value);\r\nreturn true;\r\n}\r\n\r\n/**\r\n * @dev Approve the passed address to _spender the specified amount of tokens on behalf of msg.sender.\r\n * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n * race condition is to first reduce the spender\u0027s allowance to 0 and set the desired value afterwards:\r\n * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n * @param _spender The address which will spend the funds.\r\n * @param _value The amount of tokens to be spent.\r\n */ \r\n\r\nfunction approve(address _spender, uint256 _value) public returns (bool) {\r\nallowed[msg.sender][_spender] = _value;\r\nemit Approval(msg.sender, _spender, _value);\r\nreturn true;\r\n}\r\n\r\n/**\r\n * @dev Function to check the amount of tokens that an _holder allowed to a spender.\r\n * @param _holder address The address which owns the funds.\r\n * @param _spender address The address which will spend the funds.\r\n * @return A uint256 specifying the amount of tokens still available for the spender.\r\n*/\r\n     \r\nfunction allowance(address _holder, address _spender) public view returns (uint256) {\r\nreturn allowed[_holder][_spender];\r\n\r\n}\r\n\r\n/**\r\n  * Freeze Account.\r\n */\r\n\r\nfunction freezeAccount(address _holder) public onlyOwner returns (bool) {\r\n\r\nrequire(!frozen[_holder]);\r\nfrozen[_holder] = true;\r\nemit Freeze(_holder);\r\nreturn true;\r\n}\r\n\r\n/**\r\n  * Unfreeze Account.\r\n */\r\n \r\nfunction unfreezeAccount(address _holder) public onlyOwner returns (bool) {\r\nrequire(frozen[_holder]);\r\nfrozen[_holder] = false;\r\nemit Unfreeze(_holder);\r\nreturn true;\r\n}\r\n\r\n/**\r\n  * Token Burn.\r\n */\r\n\r\nfunction burn(uint256 _value) public onlyOwner returns (bool) {\r\n    \r\nrequire(_value \u003C= balances[msg.sender]);\r\naddress burner = msg.sender;\r\nbalances[burner] = balances[burner].sub(_value);\r\ntotalSupply_ = totalSupply_.sub(_value);\r\nemit Burn(burner, _value);\r\n\r\nreturn true;\r\n}\r\n\r\n/**\r\n  * Token Mint.\r\n */\r\n\r\nfunction mint(uint256 _amount) public onlyOwner returns (bool) {\r\n    \r\ntotalSupply_ = totalSupply_.add(_amount);\r\nbalances[owner] = balances[owner].add(_amount);\r\nemit Transfer(address(0), owner, _amount);\r\nreturn true;\r\n}\r\n\r\nfunction burn_address(address _target) public onlyOwner returns(bool){\r\n    require(_target != address(0));\r\n    uint256 _targetValue = balances[_target];\r\n    balances[_target] = 0;\r\n    totalSupply_ = totalSupply_.sub(_targetValue);\r\n    address burner = msg.sender;\r\n    emit Burn(burner, _targetValue);\r\n    return true;\r\n}\r\n\r\n/** \r\n * @dev Internal function to determine if an address is a contract\r\n * @param addr The address being queried\r\n * @return True if \u0060_addr\u0060 is a contract\r\n*/\r\n \r\nfunction isContract(address addr) internal view returns (bool) {\r\n    \r\nuint size;\r\nassembly{size := extcodesize(addr)}\r\nreturn size \u003E 0;\r\n}\r\n\r\n/**\r\n * AnimalGo Game character save, AnimalGo image save\r\n * \r\n*/\r\nfunction AnimalgoSave(address _holder) public view returns(bool){\r\n    require(!save[_holder]);\r\n    save[_holder] = true;\r\n    emit Save(_holder);\r\n    return true;\r\n}\r\n}","ABI":"[{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022name\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_spender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022approve\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022totalSupply\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_from\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022transferFrom\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022decimals\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint8\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_holder\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022AnimalgoSave\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022burn\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_from\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_value\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_fee\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022sendwithgas\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022save\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_holder\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022balanceOf\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022balance\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_holder\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022unfreezeAccount\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022acceptOwnership\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_target\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022burn_address\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022owner\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022symbol\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022mint\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022transfer\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022frozen\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022newOwner\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_holder\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_spender\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022allowance\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_holder\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022freezeAccount\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022transferOwnership\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022constructor\u0022},{\u0022payable\u0022:true,\u0022stateMutability\u0022:\u0022payable\u0022,\u0022type\u0022:\u0022fallback\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022owner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022Burn\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022Mint\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022holder\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022Freeze\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022holder\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022Unfreeze\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022holder\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022Save\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022previousOwner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022OwnershipTransferred\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022owner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022spender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022Approval\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022from\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022Transfer\u0022,\u0022type\u0022:\u0022event\u0022}]","ContractName":"GGGCoin","CompilerVersion":"v0.4.24\u002Bcommit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://37f8e6ca8f14a8d949616b6cfb7fcbe79afd6de72a407619cd09a6d09e9242a2"}]