[{"SourceCode":"pragma solidity 0.4.25;\n\n// File: contracts/saga/interfaces/IReserveManager.sol\n\n/**\n * @title Reserve Manager Interface.\n */\ninterface IReserveManager {\n    /**\n     * @dev Get a deposit-recommendation.\n     * @param _balance The balance of the token-contract.\n     * @return The address of the wallet permitted to deposit ETH into the token-contract.\n     * @return The amount that should be deposited in order for the balance to reach \u0060mid\u0060 ETH.\n     */\n    function getDepositParams(uint256 _balance) external view returns (address, uint256);\n\n    /**\n     * @dev Get a withdraw-recommendation.\n     * @param _balance The balance of the token-contract.\n     * @return The address of the wallet permitted to withdraw ETH into the token-contract.\n     * @return The amount that should be withdrawn in order for the balance to reach \u0060mid\u0060 ETH.\n     */\n    function getWithdrawParams(uint256 _balance) external view returns (address, uint256);\n}\n\n// File: contracts/saga/interfaces/IPaymentManager.sol\n\n/**\n * @title Payment Manager Interface.\n */\ninterface IPaymentManager {\n    /**\n     * @dev Retrieve the current number of outstanding payments.\n     * @return The current number of outstanding payments.\n     */\n    function getNumOfPayments() external view returns (uint256);\n\n    /**\n     * @dev Retrieve the sum of all outstanding payments.\n     * @return The sum of all outstanding payments.\n     */\n    function getPaymentsSum() external view returns (uint256);\n\n    /**\n     * @dev Compute differ payment.\n     * @param _ethAmount The amount of ETH entitled by the client.\n     * @param _ethBalance The amount of ETH retained by the payment handler.\n     * @return The amount of differed ETH payment.\n     */\n    function computeDifferPayment(uint256 _ethAmount, uint256 _ethBalance) external view returns (uint256);\n\n    /**\n     * @dev Register a differed payment.\n     * @param _wallet The payment wallet address.\n     * @param _ethAmount The payment amount in ETH.\n     */\n    function registerDifferPayment(address _wallet, uint256 _ethAmount) external;\n}\n\n// File: contracts/saga/interfaces/IETHConverter.sol\n\n/**\n * @title ETH Converter Interface.\n */\ninterface IETHConverter {\n    /**\n     * @dev Get the current SDR worth of a given ETH amount.\n     * @param _ethAmount The amount of ETH to convert.\n     * @return The equivalent amount of SDR.\n     */\n    function toSdrAmount(uint256 _ethAmount) external view returns (uint256);\n\n    /**\n     * @dev Get the current ETH worth of a given SDR amount.\n     * @param _sdrAmount The amount of SDR to convert.\n     * @return The equivalent amount of ETH.\n     */\n    function toEthAmount(uint256 _sdrAmount) external view returns (uint256);\n\n    /**\n     * @dev Get the original SDR worth of a converted ETH amount.\n     * @param _ethAmount The amount of ETH converted.\n     * @return The original amount of SDR.\n     */\n    function fromEthAmount(uint256 _ethAmount) external view returns (uint256);\n}\n\n// File: contracts/contract_address_locator/interfaces/IContractAddressLocator.sol\n\n/**\n * @title Contract Address Locator Interface.\n */\ninterface IContractAddressLocator {\n    /**\n     * @dev Get the contract address mapped to a given identifier.\n     * @param _identifier The identifier.\n     * @return The contract address.\n     */\n    function getContractAddress(bytes32 _identifier) external view returns (address);\n\n    /**\n     * @dev Determine whether or not a contract address relates to one of the identifiers.\n     * @param _contractAddress The contract address to look for.\n     * @param _identifiers The identifiers.\n     * @return A boolean indicating if the contract address relates to one of the identifiers.\n     */\n    function isContractAddressRelates(address _contractAddress, bytes32[] _identifiers) external view returns (bool);\n}\n\n// File: contracts/contract_address_locator/ContractAddressLocatorHolder.sol\n\n/**\n * @title Contract Address Locator Holder.\n * @dev Hold a contract address locator, which maps a unique identifier to every contract address in the system.\n * @dev Any contract which inherits from this contract can retrieve the address of any contract in the system.\n * @dev Thus, any contract can remain \u0022oblivious\u0022 to the replacement of any other contract in the system.\n * @dev In addition to that, any function in any contract can be restricted to a specific caller.\n */\ncontract ContractAddressLocatorHolder {\n    bytes32 internal constant _IAuthorizationDataSource_ = \u0022IAuthorizationDataSource\u0022;\n    bytes32 internal constant _ISGNConversionManager_    = \u0022ISGNConversionManager\u0022      ;\n    bytes32 internal constant _IModelDataSource_         = \u0022IModelDataSource\u0022        ;\n    bytes32 internal constant _IPaymentHandler_          = \u0022IPaymentHandler\u0022            ;\n    bytes32 internal constant _IPaymentManager_          = \u0022IPaymentManager\u0022            ;\n    bytes32 internal constant _IPaymentQueue_            = \u0022IPaymentQueue\u0022              ;\n    bytes32 internal constant _IReconciliationAdjuster_  = \u0022IReconciliationAdjuster\u0022      ;\n    bytes32 internal constant _IIntervalIterator_        = \u0022IIntervalIterator\u0022       ;\n    bytes32 internal constant _IMintHandler_             = \u0022IMintHandler\u0022            ;\n    bytes32 internal constant _IMintListener_            = \u0022IMintListener\u0022           ;\n    bytes32 internal constant _IMintManager_             = \u0022IMintManager\u0022            ;\n    bytes32 internal constant _IPriceBandCalculator_     = \u0022IPriceBandCalculator\u0022       ;\n    bytes32 internal constant _IModelCalculator_         = \u0022IModelCalculator\u0022        ;\n    bytes32 internal constant _IRedButton_               = \u0022IRedButton\u0022              ;\n    bytes32 internal constant _IReserveManager_          = \u0022IReserveManager\u0022         ;\n    bytes32 internal constant _ISagaExchanger_           = \u0022ISagaExchanger\u0022          ;\n    bytes32 internal constant _IMonetaryModel_               = \u0022IMonetaryModel\u0022              ;\n    bytes32 internal constant _IMonetaryModelState_          = \u0022IMonetaryModelState\u0022         ;\n    bytes32 internal constant _ISGAAuthorizationManager_ = \u0022ISGAAuthorizationManager\u0022;\n    bytes32 internal constant _ISGAToken_                = \u0022ISGAToken\u0022               ;\n    bytes32 internal constant _ISGATokenManager_         = \u0022ISGATokenManager\u0022        ;\n    bytes32 internal constant _ISGNAuthorizationManager_ = \u0022ISGNAuthorizationManager\u0022;\n    bytes32 internal constant _ISGNToken_                = \u0022ISGNToken\u0022               ;\n    bytes32 internal constant _ISGNTokenManager_         = \u0022ISGNTokenManager\u0022        ;\n    bytes32 internal constant _IMintingPointTimersManager_             = \u0022IMintingPointTimersManager\u0022            ;\n    bytes32 internal constant _ITradingClasses_          = \u0022ITradingClasses\u0022         ;\n    bytes32 internal constant _IWalletsTradingLimiterValueConverter_        = \u0022IWalletsTLValueConverter\u0022       ;\n    bytes32 internal constant _IWalletsTradingDataSource_       = \u0022IWalletsTradingDataSource\u0022      ;\n    bytes32 internal constant _WalletsTradingLimiter_SGNTokenManager_          = \u0022WalletsTLSGNTokenManager\u0022         ;\n    bytes32 internal constant _WalletsTradingLimiter_SGATokenManager_          = \u0022WalletsTLSGATokenManager\u0022         ;\n    bytes32 internal constant _IETHConverter_             = \u0022IETHConverter\u0022   ;\n    bytes32 internal constant _ITransactionLimiter_      = \u0022ITransactionLimiter\u0022     ;\n    bytes32 internal constant _ITransactionManager_      = \u0022ITransactionManager\u0022     ;\n    bytes32 internal constant _IRateApprover_      = \u0022IRateApprover\u0022     ;\n\n    IContractAddressLocator private contractAddressLocator;\n\n    /**\n     * @dev Create the contract.\n     * @param _contractAddressLocator The contract address locator.\n     */\n    constructor(IContractAddressLocator _contractAddressLocator) internal {\n        require(_contractAddressLocator != address(0), \u0022locator is illegal\u0022);\n        contractAddressLocator = _contractAddressLocator;\n    }\n\n    /**\n     * @dev Get the contract address locator.\n     * @return The contract address locator.\n     */\n    function getContractAddressLocator() external view returns (IContractAddressLocator) {\n        return contractAddressLocator;\n    }\n\n    /**\n     * @dev Get the contract address mapped to a given identifier.\n     * @param _identifier The identifier.\n     * @return The contract address.\n     */\n    function getContractAddress(bytes32 _identifier) internal view returns (address) {\n        return contractAddressLocator.getContractAddress(_identifier);\n    }\n\n\n\n    /**\n     * @dev Determine whether or not the sender relates to one of the identifiers.\n     * @param _identifiers The identifiers.\n     * @return A boolean indicating if the sender relates to one of the identifiers.\n     */\n    function isSenderAddressRelates(bytes32[] _identifiers) internal view returns (bool) {\n        return contractAddressLocator.isContractAddressRelates(msg.sender, _identifiers);\n    }\n\n    /**\n     * @dev Verify that the caller is mapped to a given identifier.\n     * @param _identifier The identifier.\n     */\n    modifier only(bytes32 _identifier) {\n        require(msg.sender == getContractAddress(_identifier), \u0022caller is illegal\u0022);\n        _;\n    }\n\n}\n\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, reverts on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\n    // benefit is lost if \u0027b\u0027 is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    uint256 c = a * b;\n    require(c / a == b);\n\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b \u003E 0); // Solidity only automatically asserts when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c \u002B a % b); // There is no case in which this doesn\u0027t hold\n\n    return c;\n  }\n\n  /**\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b \u003C= a);\n    uint256 c = a - b;\n\n    return c;\n  }\n\n  /**\n  * @dev Adds two numbers, reverts on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a \u002B b;\n    require(c \u003E= a);\n\n    return c;\n  }\n\n  /**\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n  * reverts when dividing by zero.\n  */\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0);\n    return a % b;\n  }\n}\n\n// File: openzeppelin-solidity-v1.12.0/contracts/ownership/Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \u0022user permissions\u0022.\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original \u0060owner\u0060 of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the \u0060onlyOwner\u0060\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\n// File: openzeppelin-solidity-v1.12.0/contracts/ownership/Claimable.sol\n\n/**\n * @title Claimable\n * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\n * This allows the new owner to accept the transfer.\n */\ncontract Claimable is Ownable {\n  address public pendingOwner;\n\n  /**\n   * @dev Modifier throws if called by any account other than the pendingOwner.\n   */\n  modifier onlyPendingOwner() {\n    require(msg.sender == pendingOwner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to set the pendingOwner address.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    pendingOwner = newOwner;\n  }\n\n  /**\n   * @dev Allows the pendingOwner address to finalize the transfer.\n   */\n  function claimOwnership() public onlyPendingOwner {\n    emit OwnershipTransferred(owner, pendingOwner);\n    owner = pendingOwner;\n    pendingOwner = address(0);\n  }\n}\n\n// File: contracts/saga/ReserveManager.sol\n\n/**\n * Details of usage of licenced software see here: https://www.saga.org/software/readme_v1\n */\n\n/**\n * @title Reserve Manager.\n */\ncontract ReserveManager is IReserveManager, ContractAddressLocatorHolder, Claimable {\n    string public constant VERSION = \u00221.0.0\u0022;\n\n    using SafeMath for uint256;\n\n    struct Wallets {\n        address deposit;\n        address withdraw;\n    }\n\n    struct Thresholds {\n        uint256 min;\n        uint256 max;\n        uint256 mid;\n    }\n\n    Wallets public wallets;\n\n    Thresholds public thresholds;\n\n    uint256 public walletsSequenceNum = 0;\n    uint256 public thresholdsSequenceNum = 0;\n\n    event ReserveWalletsSaved(address _deposit, address _withdraw);\n    event ReserveWalletsNotSaved(address _deposit, address _withdraw);\n    event ReserveThresholdsSaved(uint256 _min, uint256 _max, uint256 _mid);\n    event ReserveThresholdsNotSaved(uint256 _min, uint256 _max, uint256 _mid);\n\n    /**\n     * @dev Create the contract.\n     * @param _contractAddressLocator The contract address locator.\n     */\n    constructor(IContractAddressLocator _contractAddressLocator) ContractAddressLocatorHolder(_contractAddressLocator) public {}\n\n    /**\n     * @dev Return the contract which implements the IETHConverter interface.\n     */\n    function getETHConverter() public view returns (IETHConverter) {\n        return IETHConverter(getContractAddress(_IETHConverter_));\n    }\n\n    /**\n     * @dev Return the contract which implements the IPaymentManager interface.\n     */\n    function getPaymentManager() public view returns (IPaymentManager) {\n        return IPaymentManager(getContractAddress(_IPaymentManager_));\n    }\n\n    /**\n     * @dev Set the reserve wallets.\n     * @param _walletsSequenceNum The sequence-number of the operation.\n     * @param _deposit The address of the wallet permitted to deposit ETH into the token-contract.\n     * @param _withdraw The address of the wallet permitted to withdraw ETH from the token-contract.\n     */\n    function setWallets(uint256 _walletsSequenceNum, address _deposit, address _withdraw) external onlyOwner {\n        require(_deposit != address(0), \u0022deposit-wallet is illegal\u0022);\n        require(_withdraw != address(0), \u0022withdraw-wallet is illegal\u0022);\n\n        if (walletsSequenceNum \u003C _walletsSequenceNum) {\n            walletsSequenceNum = _walletsSequenceNum;\n            wallets.deposit = _deposit;\n            wallets.withdraw = _withdraw;\n\n            emit ReserveWalletsSaved(_deposit, _withdraw);\n        }\n        else {\n            emit ReserveWalletsNotSaved(_deposit, _withdraw);\n        }\n    }\n\n    /**\n     * @dev Set the reserve thresholds.\n     * @param _thresholdsSequenceNum The sequence-number of the operation.\n     * @param _min The maximum balance which allows depositing ETH from the token-contract.\n     * @param _max The minimum balance which allows withdrawing ETH into the token-contract.\n     * @param _mid The balance that the deposit/withdraw recommendation functions will yield.\n     */\n    function setThresholds(uint256 _thresholdsSequenceNum, uint256 _min, uint256 _max, uint256 _mid) external onlyOwner {\n        require(_min \u003C= _mid, \u0022min-threshold is greater than mid-threshold\u0022);\n        require(_max \u003E= _mid, \u0022max-threshold is smaller than mid-threshold\u0022);\n\n        if (thresholdsSequenceNum \u003C _thresholdsSequenceNum) {\n            thresholdsSequenceNum = _thresholdsSequenceNum;\n            thresholds.min = _min;\n            thresholds.max = _max;\n            thresholds.mid = _mid;\n\n            emit ReserveThresholdsSaved(_min, _max, _mid);\n        }\n        else {\n            emit ReserveThresholdsNotSaved(_min, _max, _mid);\n        }\n    }\n\n    /**\n     * @dev Get a deposit-recommendation.\n     * @param _balance The balance of the token-contract.\n     * @return The address of the wallet permitted to deposit ETH into the token-contract.\n     * @return The amount that should be deposited in order for the balance to reach \u0060mid\u0060 ETH.\n     */\n    function getDepositParams(uint256 _balance) external view returns (address, uint256) {\n        uint256 depositRecommendation = 0;\n        uint256 sdrPaymentsSum = getPaymentManager().getPaymentsSum();\n        uint256 ethPaymentsSum = getETHConverter().toEthAmount(sdrPaymentsSum);\n        if (ethPaymentsSum \u003E= _balance || (_balance - ethPaymentsSum) \u003C= thresholds.min){// first part of the condition\n            // prevents underflow in the second part\n            depositRecommendation = (thresholds.mid).add(ethPaymentsSum) - _balance;// will never underflow\n        }\n        return (wallets.deposit, depositRecommendation);\n    }\n\n    /**\n     * @dev Get a withdraw-recommendation.\n     * @param _balance The balance of the token-contract.\n     * @return The address of the wallet permitted to withdraw ETH into the token-contract.\n     * @return The amount that should be withdrawn in order for the balance to reach \u0060mid\u0060 ETH.\n     */\n    function getWithdrawParams(uint256 _balance) external view returns (address, uint256) {\n        uint256 withdrawRecommendationAmount = 0;\n        if (_balance \u003E= thresholds.max \u0026\u0026 getPaymentManager().getNumOfPayments() == 0){// _balance \u003E= thresholds.max \u003E= thresholds.mid\n            withdrawRecommendationAmount = _balance - thresholds.mid; // will never underflow\n        }\n\n        return (wallets.withdraw, withdrawRecommendationAmount);\n    }\n}\n","ABI":"[{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022claimOwnership\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022getETHConverter\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022renounceOwnership\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022getContractAddressLocator\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_thresholdsSequenceNum\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_min\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_max\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_mid\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022setThresholds\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022owner\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022thresholdsSequenceNum\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_balance\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022getDepositParams\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022getPaymentManager\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022thresholds\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022min\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022max\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022mid\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022wallets\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022deposit\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022withdraw\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_balance\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022getWithdrawParams\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022walletsSequenceNum\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022pendingOwner\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022transferOwnership\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_walletsSequenceNum\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_deposit\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_withdraw\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022setWallets\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022VERSION\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[{\u0022name\u0022:\u0022_contractAddressLocator\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022constructor\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022_deposit\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022_withdraw\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022ReserveWalletsSaved\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022_deposit\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022_withdraw\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022ReserveWalletsNotSaved\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022_min\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022_max\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022_mid\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022ReserveThresholdsSaved\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022_min\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022_max\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022_mid\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022ReserveThresholdsNotSaved\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022previousOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022OwnershipRenounced\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022previousOwner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022OwnershipTransferred\u0022,\u0022type\u0022:\u0022event\u0022}]","ContractName":"ReserveManager","CompilerVersion":"v0.4.25\u002Bcommit.59dbf8f1","OptimizationUsed":"1","Runs":"6000","ConstructorArguments":"000000000000000000000000aabcd54faf94925adbe0df117c62961acecbacdb","Library":"","SwarmSource":"bzzr://09f67a8aedd0d5d09573ac20a817125fc59f5b0b9bfce5a823b677d752fd2ed6"}]