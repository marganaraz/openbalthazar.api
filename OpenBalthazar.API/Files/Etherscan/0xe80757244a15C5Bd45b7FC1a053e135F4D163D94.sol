[{"SourceCode":"pragma solidity ^0.5.2;\r\n\r\n/**\r\n * Copyright (c) 2018-present, Leap DAO (leapdao.org)\r\n *\r\n * This source code is licensed under the Mozilla Public License, version 2,\r\n * found in the LICENSE file in the root directory of this source tree.\r\n */\r\n\r\ncontract Initializable {\r\n\r\n  /**\r\n   * @dev Indicates that the contract has been initialized.\r\n   */\r\n  bool private initialized;\r\n\r\n  /**\r\n   * @dev Indicates that the contract is in the process of being initialized.\r\n   */\r\n  bool private initializing;\r\n\r\n  /**\r\n   * @dev Modifier to use in the initializer function of a contract.\r\n   */\r\n  modifier initializer() {\r\n    require(initializing || isConstructor() || !initialized, \u0022Contract instance has already been initialized\u0022);\r\n\r\n    bool wasInitializing = initializing;\r\n    initializing = true;\r\n    initialized = true;\r\n\r\n    _;\r\n\r\n    initializing = wasInitializing;\r\n  }\r\n\r\n  /// @dev Returns true if and only if the function is running in the constructor\r\n  function isConstructor() private view returns (bool) {\r\n    // extcodesize checks the size of the code stored in an address, and\r\n    // address returns the current address. Since the code is still not\r\n    // deployed when running a constructor, any checks on its code size will\r\n    // yield zero, making it an effective way to detect if a contract is\r\n    // under construction or not.\r\n    uint256 cs;\r\n    assembly { cs := extcodesize(address) }\r\n    return cs == 0;\r\n  }\r\n\r\n  // Reserved storage space to allow for layout changes in the future.\r\n  uint256[50] private ______gap;\r\n}\r\n\r\n\r\n/**\r\n * Copyright (c) 2018-present, Leap DAO (leapdao.org)\r\n *\r\n * This source code is licensed under the Mozilla Public License, version 2,\r\n * found in the LICENSE file in the root directory of this source tree.\r\n */\r\n\r\n\r\n\r\n/**\r\n * Copyright (c) 2018-present, Leap DAO (leapdao.org)\r\n *\r\n * This source code is licensed under the Mozilla Public License, version 2,\r\n * found in the LICENSE file in the root directory of this source tree.\r\n */\r\n\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n    * @dev Multiplies two unsigned integers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\r\n        // benefit is lost if \u0027b\u0027 is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b \u003E 0);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c \u002B a % b); // There is no case in which this doesn\u0027t hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b \u003C= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two unsigned integers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a \u002B b;\r\n        require(c \u003E= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0);\r\n        return a % b;\r\n    }\r\n}\r\n/**\r\n * Copyright (c) 2018-present, Leap DAO (leapdao.org)\r\n *\r\n * This source code is licensed under the Mozilla Public License, version 2,\r\n * found in the LICENSE file in the root directory of this source tree.\r\n */\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Adminable\r\n *\r\n * @dev Helper contract to support initializer functions. To use it, replace\r\n * the constructor with a function that has the \u0060initializer\u0060 modifier.\r\n * WARNING: Unlike constructors, initializer functions must be manually\r\n * invoked. This applies both to deploying an Initializable contract, as well\r\n * as extending an Initializable contract via inheritance.\r\n * WARNING: When used with inheritance, manual care must be taken to not invoke\r\n * a parent initializer twice, or ensure that all initializers are idempotent,\r\n * because this is not dealt with automatically as with constructors.\r\n */\r\ncontract Adminable is Initializable {\r\n\r\n  /**\r\n   * @dev Storage slot with the admin of the contract.\r\n   * This is the keccak-256 hash of \u0022org.zeppelinos.proxy.admin\u0022, and is\r\n   * validated in the constructor.\r\n   */\r\n  bytes32 private constant ADMIN_SLOT = 0x10d6a54a4754c8869d6886b5f5d7fbfa5b4522237ea5c60d11bc4e7a1ff9390b;\r\n\r\n  /**\r\n   * @dev Modifier to check whether the \u0060msg.sender\u0060 is the admin.\r\n   * If it is, it will run the function. Otherwise, fails.\r\n   */\r\n  modifier ifAdmin() {\r\n    require(msg.sender == _admin());\r\n    _;\r\n  }\r\n\r\n  function admin() external view returns (address) {\r\n    return _admin();\r\n  }\r\n\r\n  function implementation() external view returns (address impl) {\r\n    bytes32 slot = 0x7050c9e0f4ca769c69bd3a8ef740bc37934f8e2c036e5a723fd8ee048ed3f8c3;\r\n    assembly {\r\n      impl := sload(slot)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @return The admin slot.\r\n   */\r\n  function _admin() internal view returns (address adm) {\r\n    bytes32 slot = ADMIN_SLOT;\r\n    assembly {\r\n      adm := sload(slot)\r\n    }\r\n  }\r\n}\r\n\r\ncontract Bridge is Adminable {\r\n  using SafeMath for uint256;\r\n\r\n  modifier onlyOperator() {\r\n    require(msg.sender == operator, \u0022Tried to call a only-operator function from non-operator\u0022);\r\n    _;\r\n  }\r\n\r\n  event NewHeight(uint256 height, bytes32 indexed root);\r\n  event NewOperator(address operator);\r\n\r\n  struct Period {\r\n    uint32 height;            // the height of last block in period\r\n    uint32 timestamp;         // the block.timestamp at submission of period\r\n    uint32 parentBlockNumber; // the block.number at submission of period\r\n    bytes32 parentBlockHash;  // the blockhash(block.number -1) at submission of period\r\n  }\r\n\r\n  bytes32 constant GENESIS = 0x4920616d207665727920616e6772792c20627574206974207761732066756e21;\r\n\r\n  bytes32 public tipHash; // hash of first period that has extended chain to some height\r\n  uint256 public genesisBlockNumber;\r\n  uint256 parentBlockInterval; // how often epochs can be submitted max\r\n  uint256 public lastParentBlock; // last ethereum block when epoch was submitted\r\n  address public operator; // the operator contract\r\n\r\n  mapping(bytes32 =\u003E Period) public periods;\r\n\r\n  function initialize(uint256 _parentBlockInterval) public initializer {\r\n    // init genesis preiod\r\n    Period memory genesisPeriod = Period({\r\n      height: 1,\r\n      timestamp: uint32(block.timestamp),\r\n      parentBlockNumber: uint32(block.number),\r\n      parentBlockHash: blockhash(block.number-1)\r\n    });\r\n    tipHash = GENESIS;\r\n    periods[GENESIS] = genesisPeriod;\r\n    genesisBlockNumber = block.number;\r\n    parentBlockInterval = _parentBlockInterval;\r\n    operator = msg.sender;\r\n  }\r\n\r\n  function setOperator(address _operator) public ifAdmin {\r\n    operator = _operator;\r\n    emit NewOperator(_operator);\r\n  }\r\n\r\n  function getParentBlockInterval() public view returns (uint256) {\r\n    return parentBlockInterval;\r\n  }\r\n\r\n  function setParentBlockInterval(uint256 _parentBlockInterval) public ifAdmin {\r\n    parentBlockInterval = _parentBlockInterval;\r\n  }\r\n\r\n  function submitPeriod(\r\n    bytes32 _prevHash,\r\n    bytes32 _root)\r\n  public onlyOperator returns (uint256 newHeight) {\r\n\r\n    require(periods[_prevHash].timestamp \u003E 0, \u0022Parent node should exist\u0022);\r\n    require(periods[_root].timestamp == 0, \u0022Trying to submit the same root twice\u0022);\r\n\r\n    // calculate height\r\n    newHeight = periods[_prevHash].height \u002B 1;\r\n    // do some magic if chain extended\r\n    if (newHeight \u003E periods[tipHash].height) {\r\n      // new periods can only be submitted every x Ethereum blocks\r\n      require(\r\n        block.number \u003E= lastParentBlock \u002B parentBlockInterval,\r\n        \u0022Tried to submit new period too soon\u0022\r\n      );\r\n      tipHash = _root;\r\n      lastParentBlock = block.number;\r\n    }\r\n    // strictly speaking this event should be called \u0022New Period\u0022\r\n    // but we don\u0027t want to break interfaces for now.\r\n    emit NewHeight(newHeight, _root);\r\n    // store the period\r\n    Period memory newPeriod = Period({\r\n      height: uint32(newHeight),\r\n      timestamp: uint32(block.timestamp),\r\n      parentBlockNumber: uint32(block.number),\r\n      parentBlockHash: blockhash(block.number-1)\r\n    });\r\n    periods[_root] = newPeriod;\r\n  }\r\n}\r\n\r\n/**\r\n * Copyright (c) 2018-present, Leap DAO (leapdao.org)\r\n *\r\n * This source code is licensed under the Mozilla Public License, version 2,\r\n * found in the LICENSE file in the root directory of this source tree.\r\n */\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * @title Standard ERC20 token\r\n *\r\n * @dev Implementation of the basic standard token.\r\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\r\n * Originally based on code by FirstBlood:\r\n * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n *\r\n * This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for\r\n * all accounts just by listening to said events. Note that this isn\u0027t required by the specification, and other\r\n * compliant implementations may not do it.\r\n */\r\ncontract ERC20 is IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address =\u003E uint256) private _balances;\r\n\r\n    mapping (address =\u003E mapping (address =\u003E uint256)) private _allowed;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    /**\r\n    * @dev Total number of tokens in existence\r\n    */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n    * @dev Gets the balance of the specified address.\r\n    * @param owner The address to query the balance of.\r\n    * @return An uint256 representing the amount owned by the passed address.\r\n    */\r\n    function balanceOf(address owner) public view returns (uint256) {\r\n        return _balances[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n     * @param owner address The address which owns the funds.\r\n     * @param spender address The address which will spend the funds.\r\n     * @return A uint256 specifying the amount of tokens still available for the spender.\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowed[owner][spender];\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer token for a specified address\r\n    * @param to The address to transfer to.\r\n    * @param value The amount to be transferred.\r\n    */\r\n    function transfer(address to, uint256 value) public returns (bool) {\r\n        _transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n     * race condition is to first reduce the spender\u0027s allowance to 0 and set the desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     * @param spender The address which will spend the funds.\r\n     * @param value The amount of tokens to be spent.\r\n     */\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        require(spender != address(0));\r\n\r\n        _allowed[msg.sender][spender] = value;\r\n        emit Approval(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer tokens from one address to another.\r\n     * Note that while this function emits an Approval event, this is not required as per the specification,\r\n     * and other compliant implementations may not emit the event.\r\n     * @param from address The address which you want to send tokens from\r\n     * @param to address The address which you want to transfer to\r\n     * @param value uint256 the amount of tokens to be transferred\r\n     */\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\r\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\r\n        _transfer(from, to, value);\r\n        emit Approval(from, msg.sender, _allowed[from][msg.sender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n     * approve should be called when allowed_[_spender] == 0. To increment\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * Emits an Approval event.\r\n     * @param spender The address which will spend the funds.\r\n     * @param addedValue The amount of tokens to increase the allowance by.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        require(spender != address(0));\r\n\r\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].add(addedValue);\r\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n     * approve should be called when allowed_[_spender] == 0. To decrement\r\n     * allowed value is better to use this function to avoid 2 calls (and wait until\r\n     * the first transaction is mined)\r\n     * From MonolithDAO Token.sol\r\n     * Emits an Approval event.\r\n     * @param spender The address which will spend the funds.\r\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        require(spender != address(0));\r\n\r\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].sub(subtractedValue);\r\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev Transfer token for a specified addresses\r\n    * @param from The address to transfer from.\r\n    * @param to The address to transfer to.\r\n    * @param value The amount to be transferred.\r\n    */\r\n    function _transfer(address from, address to, uint256 value) internal {\r\n        require(to != address(0));\r\n\r\n        _balances[from] = _balances[from].sub(value);\r\n        _balances[to] = _balances[to].add(value);\r\n        emit Transfer(from, to, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that mints an amount of the token and assigns it to\r\n     * an account. This encapsulates the modification of balances such that the\r\n     * proper events are emitted.\r\n     * @param account The account that will receive the created tokens.\r\n     * @param value The amount that will be created.\r\n     */\r\n    function _mint(address account, uint256 value) internal {\r\n        require(account != address(0));\r\n\r\n        _totalSupply = _totalSupply.add(value);\r\n        _balances[account] = _balances[account].add(value);\r\n        emit Transfer(address(0), account, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that burns an amount of the token of a given\r\n     * account.\r\n     * @param account The account whose tokens will be burnt.\r\n     * @param value The amount that will be burnt.\r\n     */\r\n    function _burn(address account, uint256 value) internal {\r\n        require(account != address(0));\r\n\r\n        _totalSupply = _totalSupply.sub(value);\r\n        _balances[account] = _balances[account].sub(value);\r\n        emit Transfer(account, address(0), value);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function that burns an amount of the token of a given\r\n     * account, deducting from the sender\u0027s allowance for said account. Uses the\r\n     * internal burn function.\r\n     * Emits an Approval event (reflecting the reduced allowance).\r\n     * @param account The account whose tokens will be burnt.\r\n     * @param value The amount that will be burnt.\r\n     */\r\n    function _burnFrom(address account, uint256 value) internal {\r\n        _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(value);\r\n        _burn(account, value);\r\n        emit Approval(account, msg.sender, _allowed[account][msg.sender]);\r\n    }\r\n}\r\n/**\r\n * Copyright (c) 2018-present, Leap DAO (leapdao.org)\r\n *\r\n * This source code is licensed under the Mozilla Public License, version 2,\r\n * found in the LICENSE file in the root directory of this source tree.\r\n */\r\n\r\n\r\n\r\n/**\r\n * @title IERC165\r\n * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @notice Query if a contract implements an interface\r\n     * @param interfaceId The interface identifier, as specified in ERC-165\r\n     * @dev Interface identification is specified in ERC-165. This function\r\n     * uses less than 30,000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n/**\r\n * @title ERC165\r\n * @author Matt Condon (@shrugs)\r\n * @dev Implements ERC165 using a lookup table.\r\n */\r\ncontract ERC165 is IERC165 {\r\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\r\n    /**\r\n     * 0x01ffc9a7 ===\r\n     *     bytes4(keccak256(\u0027supportsInterface(bytes4)\u0027))\r\n     */\r\n\r\n    /**\r\n     * @dev a mapping of interface id to whether or not it\u0027s supported\r\n     */\r\n    mapping(bytes4 =\u003E bool) private _supportedInterfaces;\r\n\r\n    /**\r\n     * @dev A contract implementing SupportsInterfaceWithLookup\r\n     * implement ERC165 itself\r\n     */\r\n    constructor () internal {\r\n        _registerInterface(_INTERFACE_ID_ERC165);\r\n    }\r\n\r\n    /**\r\n     * @dev implement supportsInterface(bytes4) using a lookup table\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\r\n        return _supportedInterfaces[interfaceId];\r\n    }\r\n\r\n    /**\r\n     * @dev internal method for registering an interface\r\n     */\r\n    function _registerInterface(bytes4 interfaceId) internal {\r\n        require(interfaceId != 0xffffffff);\r\n        _supportedInterfaces[interfaceId] = true;\r\n    }\r\n}\r\n\r\n\r\ncontract TransferrableToken is ERC165 {\r\n  function transferFrom(address _from, address _to, uint256 _valueOrTokenId) public;\r\n  function approve(address _to, uint256 _value) public;\r\n}\r\n\r\n/**\r\n * @title PriorityQueue\r\n * @dev A priority queue implementation\r\n */\r\n\r\nlibrary PriorityQueue {\r\n  using SafeMath for uint256;\r\n\r\n  struct Token {\r\n    TransferrableToken addr;\r\n    uint256[] heapList;\r\n    uint256 currentSize;\r\n  }\r\n\r\n  function insert(Token storage self, uint256 k) internal {\r\n    self.heapList.push(k);\r\n    self.currentSize = self.currentSize.add(1);\r\n    percUp(self, self.currentSize);\r\n  }\r\n\r\n  function minChild(Token storage self, uint256 i) internal view returns (uint256) {\r\n    if (i.mul(2).add(1) \u003E self.currentSize) {\r\n      return i.mul(2);\r\n    } else {\r\n      if (self.heapList[i.mul(2)] \u003C self.heapList[i.mul(2).add(1)]) {\r\n        return i.mul(2);\r\n      } else {\r\n        return i.mul(2).add(1);\r\n      }\r\n    }\r\n  }\r\n\r\n  function getMin(Token storage self) internal view returns (uint256) {\r\n    return self.heapList[1];\r\n  }\r\n\r\n  function delMin(Token storage self) internal returns (uint256) {\r\n    uint256 retVal = self.heapList[1];\r\n    self.heapList[1] = self.heapList[self.currentSize];\r\n    delete self.heapList[self.currentSize];\r\n    self.currentSize = self.currentSize.sub(1);\r\n    percDown(self, 1);\r\n    self.heapList.length = self.heapList.length.sub(1);\r\n    return retVal;\r\n  }\r\n\r\n  // solium-disable-next-line security/no-assign-params\r\n  function percUp(Token storage self, uint256 i) private {\r\n    uint256 j = i;\r\n    uint256 newVal = self.heapList[i];\r\n    while (newVal \u003C self.heapList[i.div(2)]) {\r\n      self.heapList[i] = self.heapList[i.div(2)];\r\n      i = i.div(2);\r\n    }\r\n    if (i != j) self.heapList[i] = newVal;\r\n  }\r\n\r\n  // solium-disable-next-line security/no-assign-params\r\n  function percDown(Token storage self, uint256 i) private {\r\n    uint256 j = i;\r\n    uint256 newVal = self.heapList[i];\r\n    uint256 mc = minChild(self, i);\r\n    while (mc \u003C= self.currentSize \u0026\u0026 newVal \u003E self.heapList[mc]) {\r\n      self.heapList[i] = self.heapList[mc];\r\n      i = mc;\r\n      mc = minChild(self, i);\r\n    }\r\n    if (i != j) self.heapList[i] = newVal;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * Copyright (c) 2018-present, Leap DAO (leapdao.org)\r\n *\r\n * This source code is licensed under the Mozilla Public License, version 2,\r\n * found in the LICENSE file in the root directory of this source tree.\r\n */\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC1948 contract.\r\n */\r\ninterface IERC1948 {\r\n\r\n  /**\r\n   * @dev Emitted when \u0060oldData\u0060 is replaced with \u0060newData\u0060 in storage of \u0060tokenId\u0060.\r\n   *\r\n   * Note that \u0060oldData\u0060 or \u0060newData\u0060 may be empty bytes.\r\n   */\r\n  event DataUpdated(uint256 indexed tokenId, bytes32 oldData, bytes32 newData);\r\n\r\n  /**\r\n   * @dev Reads the data of a specified token. Returns the current data in\r\n   * storage of \u0060tokenId\u0060.\r\n   *\r\n   * @param tokenId The token to read the data off.\r\n   *\r\n   * @return A bytes32 representing the current data stored in the token.\r\n   */\r\n  function readData(uint256 tokenId) external view returns (bytes32);\r\n\r\n  /**\r\n   * @dev Updates the data of a specified token. Writes \u0060newData\u0060 into storage\r\n   * of \u0060tokenId\u0060.\r\n   *\r\n   * @param tokenId The token to write data to.\r\n   * @param newData The data to be written to the token.\r\n   *\r\n   * Emits a \u0060DataUpdated\u0060 event.\r\n   */\r\n  function writeData(uint256 tokenId, bytes32 newData) external;\r\n\r\n}\r\n\r\ncontract Vault is Adminable {\r\n  using PriorityQueue for PriorityQueue.Token;\r\n\r\n  // 2**15 \u002B 1\r\n  uint16 constant NFT_FIRST_COLOR = 32769;\r\n  // 2**15 \u002B 2**14 \u002B 1\r\n  uint16 constant NST_FIRST_COLOR = 49153;\r\n\r\n  event NewToken(address indexed tokenAddr, uint16 color);\r\n\r\n  Bridge public bridge;\r\n\r\n  uint16 public erc20TokenCount;\r\n  uint16 public nftTokenCount;\r\n  uint16 public nstTokenCount;\r\n\r\n  mapping(uint16 =\u003E PriorityQueue.Token) public tokens;\r\n  mapping(address =\u003E bool) public tokenColors;\r\n\r\n  function initialize(Bridge _bridge) public initializer {\r\n    bridge = _bridge;\r\n  } \r\n\r\n  function getTokenAddr(uint16 _color) public view returns (address) {\r\n    return address(tokens[_color].addr);\r\n  }\r\n\r\n  // token types: 0 = ERC20, 1 = ERC721, 2 = ERC1948\r\n  function registerToken(address _token, uint256 _type) public ifAdmin {\r\n    // make sure token is not 0x0 and that it has not been registered yet\r\n    require(_token != address(0), \u0022Tried to register 0x0 address\u0022);\r\n    require(!tokenColors[_token], \u0022Token already registered\u0022);\r\n    uint16 color;\r\n    if (_type == 0) {\r\n      require(ERC20(_token).totalSupply() \u003E= 0, \u0022Not an ERC20 token\u0022);\r\n      color = erc20TokenCount;\r\n      erc20TokenCount \u002B= 1;\r\n    } else if (_type == 1) {\r\n      // max nft count without being an NST is 16384\r\n      // color must be \u003C 49153\r\n      require(nftTokenCount \u003C 0x4000);\r\n      require(TransferrableToken(_token).supportsInterface(0x80ac58cd) == true, \u0022Not an ERC721 token\u0022);\r\n      color = NFT_FIRST_COLOR \u002B nftTokenCount; // NFT color namespace starts from 2^15 \u002B 1\r\n      nftTokenCount \u002B= 1;\r\n    } else {\r\n      require(nstTokenCount \u003C 0x3ffe);\r\n      require(TransferrableToken(_token).supportsInterface(0x80ac58cd) == true, \u0022Not an ERC721 token\u0022);\r\n      color = NST_FIRST_COLOR \u002B nstTokenCount; // NST color namespace starts from 2^15 \u002B 2^14 \u002B 1\r\n      nstTokenCount \u002B= 1;\r\n    }\r\n    uint256[] memory arr = new uint256[](1);\r\n    tokenColors[_token] = true;\r\n    tokens[color] = PriorityQueue.Token({\r\n      addr: TransferrableToken(_token),\r\n      heapList: arr,\r\n      currentSize: 0\r\n    });\r\n    emit NewToken(_token, color);\r\n  }\r\n\r\n  // solium-disable-next-line mixedcase\r\n  uint256[49] private ______gap;\r\n\r\n}\r\n\r\n\r\ncontract PoaOperator is Adminable {\r\n\r\n  event Epoch(uint256 epoch);\r\n  event EpochLength(uint256 epochLength);\r\n\r\n  event ValidatorJoin(\r\n    address indexed signerAddr,\r\n    uint256 indexed slotId,\r\n    bytes32 indexed tenderAddr,\r\n    uint256 eventCounter,\r\n    uint256 epoch\r\n  );\r\n\r\n  event ValidatorLogout(\r\n    address indexed signerAddr,\r\n    uint256 indexed slotId,\r\n    bytes32 indexed tenderAddr,\r\n    address newSigner,\r\n    uint256 eventCounter,\r\n    uint256 epoch\r\n  );\r\n\r\n  event ValidatorLeave(\r\n    address indexed signerAddr,\r\n    uint256 indexed slotId,\r\n    bytes32 indexed tenderAddr,\r\n    uint256 epoch\r\n  );\r\n\r\n  event ValidatorUpdate(\r\n    address indexed signerAddr,\r\n    uint256 indexed slotId,\r\n    bytes32 indexed tenderAddr,\r\n    uint256 eventCounter\r\n  );\r\n\r\n  struct Slot {\r\n    uint32 eventCounter;\r\n    address owner;\r\n    uint64 stake;\r\n    address signer;\r\n    bytes32 tendermint;\r\n    uint32 activationEpoch;\r\n    address newOwner;\r\n    uint64 newStake;\r\n    address newSigner;\r\n    bytes32 newTendermint;\r\n  }\r\n\r\n  Vault public vault;\r\n  Bridge public bridge;\r\n\r\n  uint256 public epochLength; // length of epoch in periods (32 blocks)\r\n  uint256 public lastCompleteEpoch; // height at which last epoch was completed\r\n  uint256 public lastEpochBlockHeight;\r\n\r\n  mapping(uint256 =\u003E Slot) public slots;\r\n\r\n\r\n  function initialize(Bridge _bridge, Vault _vault, uint256 _epochLength) public initializer {\r\n    vault = _vault;\r\n    bridge = _bridge;\r\n    epochLength = _epochLength;\r\n    emit EpochLength(epochLength);\r\n  }\r\n\r\n  function setEpochLength(uint256 _epochLength) public ifAdmin {\r\n    epochLength = _epochLength;\r\n    emit EpochLength(epochLength);\r\n  }\r\n\r\n  function setSlot(uint256 _slotId, address _signerAddr, bytes32 _tenderAddr) public ifAdmin {\r\n    require(_slotId \u003C epochLength, \u0022out of range slotId\u0022);\r\n    Slot storage slot = slots[_slotId];\r\n\r\n    // taking empty slot\r\n    if (slot.signer == address(0)) {\r\n      slot.owner = _signerAddr;\r\n      slot.signer = _signerAddr;\r\n      slot.tendermint = _tenderAddr;\r\n      slot.activationEpoch = 0;\r\n      slot.eventCounter\u002B\u002B;\r\n      emit ValidatorJoin(\r\n        slot.signer,\r\n        _slotId,\r\n        _tenderAddr,\r\n        slot.eventCounter,\r\n        lastCompleteEpoch \u002B 1\r\n      );\r\n      return;\r\n    }\r\n    // emptying slot\r\n    if (_signerAddr == address(0) \u0026\u0026 _tenderAddr == 0) {\r\n      slot.activationEpoch = uint32(lastCompleteEpoch \u002B 3);\r\n      slot.eventCounter\u002B\u002B;\r\n      emit ValidatorLogout(\r\n        slot.signer,\r\n        _slotId,\r\n        _tenderAddr,\r\n        address(0),\r\n        slot.eventCounter,\r\n        lastCompleteEpoch \u002B 3\r\n      );\r\n      return;\r\n    }\r\n  }\r\n\r\n  function activate(uint256 _slotId) public {\r\n    require(_slotId \u003C epochLength, \u0022out of range slotId\u0022);\r\n    Slot storage slot = slots[_slotId];\r\n    require(lastCompleteEpoch \u002B 1 \u003E= slot.activationEpoch, \u0022activation epoch not reached yet\u0022);\r\n    if (slot.signer != address(0)) {\r\n      emit ValidatorLeave(\r\n        slot.signer,\r\n        _slotId,\r\n        slot.tendermint,\r\n        lastCompleteEpoch \u002B 1\r\n      );\r\n    }\r\n    slot.owner = slot.newOwner;\r\n    slot.signer = slot.newSigner;\r\n    slot.tendermint = slot.newTendermint;\r\n    slot.activationEpoch = 0;\r\n    slot.newSigner = address(0);\r\n    slot.newTendermint = 0x0;\r\n    slot.eventCounter\u002B\u002B;\r\n    if (slot.signer != address(0)) {\r\n      emit ValidatorJoin(\r\n        slot.signer,\r\n        _slotId,\r\n        slot.tendermint,\r\n        slot.eventCounter,\r\n        lastCompleteEpoch \u002B 1\r\n      );\r\n    }\r\n  }\r\n\r\n  event Submission(\r\n    bytes32 indexed blocksRoot,\r\n    uint256 indexed slotId,\r\n    address indexed owner,\r\n    bytes32 casRoot,\r\n    bytes32 periodRoot\r\n  );\r\n\r\n  function countSigs(uint256 _sigs, uint256 _epochLength) internal pure returns (uint256 count) {\r\n    for (uint i = 256; i \u003E= 256 - _epochLength; i--) {\r\n      count \u002B= uint8(_sigs \u003E\u003E i) \u0026 0x01;\r\n    }\r\n  }\r\n\r\n  // an exact amount of sigs is needed, so that if one is proven to be invalid,\r\n  // then the amount of signatures drops below the 2/3 quorum =\u003E period is deleted\r\n  function neededSigs(uint256 _epochLength) internal pure returns (uint256 needed) {\r\n    // if the number of slots has a remainder, add 1\r\n    //   example: 5, remainder 1, =\u003E 3 \u002B 1\r\n    // if the number of slots has no remainder, use it\r\n    //   example: 9, remainder 0, =\u003E 6 \u002B 0\r\n    return (_epochLength * 2 / 3) \u002B ((_epochLength * 2 % 3) == 0 ? 0 : 1);\r\n  }\r\n\r\n  function _submitPeriod(uint256 _slotId, bytes32 _prevHash, bytes32 _blocksRoot, bytes32 _cas) internal {\r\n    require(_slotId \u003C epochLength, \u0022Incorrect slotId\u0022);\r\n    Slot storage slot = slots[_slotId];\r\n    require(slot.signer == msg.sender, \u0022not submitted by signerAddr\u0022);\r\n    // This is here so that I can submit in the same epoch I auction/logout but not after\r\n    if (slot.activationEpoch \u003E 0) {\r\n      // if slot not active, prevent submission\r\n      require(lastCompleteEpoch \u002B 2 \u003C slot.activationEpoch, \u0022slot not active\u0022);\r\n    }\r\n\r\n    // validator root\r\n    bytes32 hashRoot = bytes32(_slotId \u003C\u003C 160 | uint160(slot.owner));\r\n    assembly {\r\n      mstore(0, hashRoot)\r\n      mstore(0x20, 0x0000000000000000000000000000000000000000)\r\n      hashRoot := keccak256(0, 0x40)\r\n    }\r\n    // cas root\r\n    assembly {\r\n      mstore(0, _cas)\r\n      mstore(0x20, hashRoot)\r\n      hashRoot := keccak256(0, 0x40)\r\n    }\r\n\r\n    // consensus root\r\n    bytes32 consensusRoot;\r\n    assembly {\r\n      mstore(0, _blocksRoot)\r\n      mstore(0x20, 0x0000000000000000000000000000000000000000)\r\n      consensusRoot := keccak256(0, 0x40)\r\n    }\r\n\r\n    // period root\r\n    assembly {\r\n      mstore(0, consensusRoot)\r\n      mstore(0x20, hashRoot)\r\n      hashRoot := keccak256(0, 0x40)\r\n    }\r\n\r\n    uint256 newHeight = bridge.submitPeriod(_prevHash, hashRoot);\r\n    // check if epoch completed\r\n    if (newHeight \u003E= lastEpochBlockHeight \u002B epochLength) {\r\n      lastCompleteEpoch\u002B\u002B;\r\n      lastEpochBlockHeight = newHeight;\r\n      emit Epoch(lastCompleteEpoch);\r\n    }\r\n    emit Submission(\r\n      _blocksRoot,\r\n      _slotId,\r\n      slot.owner,\r\n      _cas,\r\n      hashRoot\r\n    );\r\n  }\r\n\r\n  function submitPeriodWithCas(uint256 _slotId, bytes32 _prevHash, bytes32 _blocksRoot, bytes32 _cas) public {\r\n    require(countSigs(uint256(_cas), epochLength) == neededSigs(epochLength), \u0022incorrect number of sigs\u0022);\r\n    _submitPeriod(_slotId, _prevHash, _blocksRoot, _cas);\r\n  }\r\n\r\n  function submitPeriod(uint256 _slotId, bytes32 _prevHash, bytes32 _blocksRoot) public {\r\n    _submitPeriod(_slotId, _prevHash, _blocksRoot, 0);\r\n  }\r\n}","ABI":"[{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_bridge\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_vault\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_epochLength\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022initialize\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022slots\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022eventCounter\u0022,\u0022type\u0022:\u0022uint32\u0022},{\u0022name\u0022:\u0022owner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022stake\u0022,\u0022type\u0022:\u0022uint64\u0022},{\u0022name\u0022:\u0022signer\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022tendermint\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022name\u0022:\u0022activationEpoch\u0022,\u0022type\u0022:\u0022uint32\u0022},{\u0022name\u0022:\u0022newOwner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022newStake\u0022,\u0022type\u0022:\u0022uint64\u0022},{\u0022name\u0022:\u0022newSigner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022newTendermint\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_epochLength\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022setEpochLength\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022lastCompleteEpoch\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022epochLength\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_slotId\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_prevHash\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022name\u0022:\u0022_blocksRoot\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022name\u0022:\u0022_cas\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022submitPeriodWithCas\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022implementation\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022impl\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022lastEpochBlockHeight\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_slotId\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_prevHash\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022name\u0022:\u0022_blocksRoot\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022submitPeriod\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_slotId\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022activate\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_slotId\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_signerAddr\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_tenderAddr\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022setSlot\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022bridge\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022admin\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022vault\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022epoch\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022Epoch\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022epochLength\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022EpochLength\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022signerAddr\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022slotId\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022tenderAddr\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022eventCounter\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022epoch\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022ValidatorJoin\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022signerAddr\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022slotId\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022tenderAddr\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022newSigner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022eventCounter\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022epoch\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022ValidatorLogout\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022signerAddr\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022slotId\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022tenderAddr\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022epoch\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022ValidatorLeave\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022signerAddr\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022slotId\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022tenderAddr\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022eventCounter\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022ValidatorUpdate\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022blocksRoot\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022slotId\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022owner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022casRoot\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022periodRoot\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022Submission\u0022,\u0022type\u0022:\u0022event\u0022}]","ContractName":"PoaOperator","CompilerVersion":"v0.5.2\u002Bcommit.1df8f40c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://7a4f68da7af5bf6938d5fe437b77595e0b33866cba8b016ee134105efb4e2c09"}]