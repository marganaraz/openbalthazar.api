[{"SourceCode":"// hevm: flattened sources of /nix/store/8xb41r4qd0cjb63wcrxf1qmfg88p0961-dss-6fd7de0/src/end.sol\r\npragma solidity =0.5.12;\r\n\r\n////// /nix/store/8xb41r4qd0cjb63wcrxf1qmfg88p0961-dss-6fd7de0/src/lib.sol\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see \u003Chttp://www.gnu.org/licenses/\u003E.\r\n\r\n/* pragma solidity 0.5.12; */\r\n\r\ncontract LibNote {\r\n    event LogNote(\r\n        bytes4   indexed  sig,\r\n        address  indexed  usr,\r\n        bytes32  indexed  arg1,\r\n        bytes32  indexed  arg2,\r\n        bytes             data\r\n    ) anonymous;\r\n\r\n    modifier note {\r\n        _;\r\n        assembly {\r\n            // log an \u0027anonymous\u0027 event with a constant 6 words of calldata\r\n            // and four indexed topics: selector, caller, arg1 and arg2\r\n            let mark := msize                         // end of memory ensures zero\r\n            mstore(0x40, add(mark, 288))              // update free memory pointer\r\n            mstore(mark, 0x20)                        // bytes type data offset\r\n            mstore(add(mark, 0x20), 224)              // bytes size (padded)\r\n            calldatacopy(add(mark, 0x40), 0, 224)     // bytes payload\r\n            log4(mark, 288,                           // calldata\r\n                 shl(224, shr(224, calldataload(0))), // msg.sig\r\n                 caller,                              // msg.sender\r\n                 calldataload(4),                     // arg1\r\n                 calldataload(36)                     // arg2\r\n                )\r\n        }\r\n    }\r\n}\r\n\r\n////// /nix/store/8xb41r4qd0cjb63wcrxf1qmfg88p0961-dss-6fd7de0/src/end.sol\r\n/// end.sol -- global settlement engine\r\n\r\n// Copyright (C) 2018 Rain \u003Crainbreak@riseup.net\u003E\r\n// Copyright (C) 2018 Lev Livnev \u003Clev@liv.nev.org.uk\u003E\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see \u003Chttps://www.gnu.org/licenses/\u003E.\r\n\r\n/* pragma solidity 0.5.12; */\r\n\r\n/* import \u0022./lib.sol\u0022; */\r\n\r\ncontract VatLike {\r\n    function dai(address) external view returns (uint256);\r\n    function ilks(bytes32 ilk) external returns (\r\n        uint256 Art,\r\n        uint256 rate,\r\n        uint256 spot,\r\n        uint256 line,\r\n        uint256 dust\r\n    );\r\n    function urns(bytes32 ilk, address urn) external returns (\r\n        uint256 ink,\r\n        uint256 art\r\n    );\r\n    function debt() external returns (uint256);\r\n    function move(address src, address dst, uint256 rad) external;\r\n    function hope(address) external;\r\n    function flux(bytes32 ilk, address src, address dst, uint256 rad) external;\r\n    function grab(bytes32 i, address u, address v, address w, int256 dink, int256 dart) external;\r\n    function suck(address u, address v, uint256 rad) external;\r\n    function cage() external;\r\n}\r\ncontract CatLike {\r\n    function ilks(bytes32) external returns (\r\n        address flip,  // Liquidator\r\n        uint256 chop,  // Liquidation Penalty   [ray]\r\n        uint256 lump   // Liquidation Quantity  [rad]\r\n    );\r\n    function cage() external;\r\n}\r\ncontract PotLike {\r\n    function cage() external;\r\n}\r\ncontract VowLike {\r\n    function cage() external;\r\n}\r\ncontract Flippy {\r\n    function bids(uint id) external view returns (\r\n        uint256 bid,\r\n        uint256 lot,\r\n        address guy,\r\n        uint48  tic,\r\n        uint48  end,\r\n        address usr,\r\n        address gal,\r\n        uint256 tab\r\n    );\r\n    function yank(uint id) external;\r\n}\r\n\r\ncontract PipLike {\r\n    function read() external view returns (bytes32);\r\n}\r\n\r\ncontract Spotty {\r\n    function par() external view returns (uint256);\r\n    function ilks(bytes32) external view returns (\r\n        PipLike pip,\r\n        uint256 mat\r\n    );\r\n    function cage() external;\r\n}\r\n\r\n/*\r\n    This is the \u0060End\u0060 and it coordinates Global Settlement. This is an\r\n    involved, stateful process that takes place over nine steps.\r\n\r\n    First we freeze the system and lock the prices for each ilk.\r\n\r\n    1. \u0060cage()\u0060:\r\n        - freezes user entrypoints\r\n        - cancels flop/flap auctions\r\n        - starts cooldown period\r\n        - stops pot drips\r\n\r\n    2. \u0060cage(ilk)\u0060:\r\n       - set the cage price for each \u0060ilk\u0060, reading off the price feed\r\n\r\n    We must process some system state before it is possible to calculate\r\n    the final dai / collateral price. In particular, we need to determine\r\n\r\n      a. \u0060gap\u0060, the collateral shortfall per collateral type by\r\n         considering under-collateralised CDPs.\r\n\r\n      b. \u0060debt\u0060, the outstanding dai supply after including system\r\n         surplus / deficit\r\n\r\n    We determine (a) by processing all under-collateralised CDPs with\r\n    \u0060skim\u0060:\r\n\r\n    3. \u0060skim(ilk, urn)\u0060:\r\n       - cancels CDP debt\r\n       - any excess collateral remains\r\n       - backing collateral taken\r\n\r\n    We determine (b) by processing ongoing dai generating processes,\r\n    i.e. auctions. We need to ensure that auctions will not generate any\r\n    further dai income. In the two-way auction model this occurs when\r\n    all auctions are in the reverse (\u0060dent\u0060) phase. There are two ways\r\n    of ensuring this:\r\n\r\n    4.  i) \u0060wait\u0060: set the cooldown period to be at least as long as the\r\n           longest auction duration, which needs to be determined by the\r\n           cage administrator.\r\n\r\n           This takes a fairly predictable time to occur but with altered\r\n           auction dynamics due to the now varying price of dai.\r\n\r\n       ii) \u0060skip\u0060: cancel all ongoing auctions and seize the collateral.\r\n\r\n           This allows for faster processing at the expense of more\r\n           processing calls. This option allows dai holders to retrieve\r\n           their collateral faster.\r\n\r\n           \u0060skip(ilk, id)\u0060:\r\n            - cancel individual flip auctions in the \u0060tend\u0060 (forward) phase\r\n            - retrieves collateral and returns dai to bidder\r\n            - \u0060dent\u0060 (reverse) phase auctions can continue normally\r\n\r\n    Option (i), \u0060wait\u0060, is sufficient for processing the system\r\n    settlement but option (ii), \u0060skip\u0060, will speed it up. Both options\r\n    are available in this implementation, with \u0060skip\u0060 being enabled on a\r\n    per-auction basis.\r\n\r\n    When a CDP has been processed and has no debt remaining, the\r\n    remaining collateral can be removed.\r\n\r\n    5. \u0060free(ilk)\u0060:\r\n        - remove collateral from the caller\u0027s CDP\r\n        - owner can call as needed\r\n\r\n    After the processing period has elapsed, we enable calculation of\r\n    the final price for each collateral type.\r\n\r\n    6. \u0060thaw()\u0060:\r\n       - only callable after processing time period elapsed\r\n       - assumption that all under-collateralised CDPs are processed\r\n       - fixes the total outstanding supply of dai\r\n       - may also require extra CDP processing to cover vow surplus\r\n\r\n    7. \u0060flow(ilk)\u0060:\r\n        - calculate the \u0060fix\u0060, the cash price for a given ilk\r\n        - adjusts the \u0060fix\u0060 in the case of deficit / surplus\r\n\r\n    At this point we have computed the final price for each collateral\r\n    type and dai holders can now turn their dai into collateral. Each\r\n    unit dai can claim a fixed basket of collateral.\r\n\r\n    Dai holders must first \u0060pack\u0060 some dai into a \u0060bag\u0060. Once packed,\r\n    dai cannot be unpacked and is not transferrable. More dai can be\r\n    added to a bag later.\r\n\r\n    8. \u0060pack(wad)\u0060:\r\n        - put some dai into a bag in preparation for \u0060cash\u0060\r\n\r\n    Finally, collateral can be obtained with \u0060cash\u0060. The bigger the bag,\r\n    the more collateral can be released.\r\n\r\n    9. \u0060cash(ilk, wad)\u0060:\r\n        - exchange some dai from your bag for gems from a specific ilk\r\n        - the number of gems is limited by how big your bag is\r\n*/\r\n\r\ncontract End is LibNote {\r\n    // --- Auth ---\r\n    mapping (address =\u003E uint) public wards;\r\n    function rely(address guy) external note auth { wards[guy] = 1; }\r\n    function deny(address guy) external note auth { wards[guy] = 0; }\r\n    modifier auth {\r\n        require(wards[msg.sender] == 1, \u0022End/not-authorized\u0022);\r\n        _;\r\n    }\r\n\r\n    // --- Data ---\r\n    VatLike  public vat;\r\n    CatLike  public cat;\r\n    VowLike  public vow;\r\n    PotLike  public pot;\r\n    Spotty   public spot;\r\n\r\n    uint256  public live;  // cage flag\r\n    uint256  public when;  // time of cage\r\n    uint256  public wait;  // processing cooldown length\r\n    uint256  public debt;  // total outstanding dai following processing [rad]\r\n\r\n    mapping (bytes32 =\u003E uint256) public tag;  // cage price           [ray]\r\n    mapping (bytes32 =\u003E uint256) public gap;  // collateral shortfall [wad]\r\n    mapping (bytes32 =\u003E uint256) public Art;  // total debt per ilk   [wad]\r\n    mapping (bytes32 =\u003E uint256) public fix;  // final cash price     [ray]\r\n\r\n    mapping (address =\u003E uint256)                      public bag;  // [wad]\r\n    mapping (bytes32 =\u003E mapping (address =\u003E uint256)) public out;  // [wad]\r\n\r\n    // --- Init ---\r\n    constructor() public {\r\n        wards[msg.sender] = 1;\r\n        live = 1;\r\n    }\r\n\r\n    // --- Math ---\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        z = x \u002B y;\r\n        require(z \u003E= x);\r\n    }\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) \u003C= x);\r\n    }\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x);\r\n    }\r\n    function min(uint x, uint y) internal pure returns (uint z) {\r\n        return x \u003C= y ? x : y;\r\n    }\r\n    uint constant WAD = 10 ** 18;\r\n    uint constant RAY = 10 ** 27;\r\n    function rmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = mul(x, y) / RAY;\r\n    }\r\n    function rdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = mul(x, RAY) / y;\r\n    }\r\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = mul(x, WAD) / y;\r\n    }\r\n\r\n    // --- Administration ---\r\n    function file(bytes32 what, address data) external note auth {\r\n        require(live == 1, \u0022End/not-live\u0022);\r\n        if (what == \u0022vat\u0022)  vat = VatLike(data);\r\n        else if (what == \u0022cat\u0022)  cat = CatLike(data);\r\n        else if (what == \u0022vow\u0022)  vow = VowLike(data);\r\n        else if (what == \u0022pot\u0022)  pot = PotLike(data);\r\n        else if (what == \u0022spot\u0022) spot = Spotty(data);\r\n        else revert(\u0022End/file-unrecognized-param\u0022);\r\n    }\r\n    function file(bytes32 what, uint256 data) external note auth {\r\n        require(live == 1, \u0022End/not-live\u0022);\r\n        if (what == \u0022wait\u0022) wait = data;\r\n        else revert(\u0022End/file-unrecognized-param\u0022);\r\n    }\r\n\r\n    // --- Settlement ---\r\n    function cage() external note auth {\r\n        require(live == 1, \u0022End/not-live\u0022);\r\n        live = 0;\r\n        when = now;\r\n        vat.cage();\r\n        cat.cage();\r\n        vow.cage();\r\n        spot.cage();\r\n        pot.cage();\r\n    }\r\n\r\n    function cage(bytes32 ilk) external note {\r\n        require(live == 0, \u0022End/still-live\u0022);\r\n        require(tag[ilk] == 0, \u0022End/tag-ilk-already-defined\u0022);\r\n        (Art[ilk],,,,) = vat.ilks(ilk);\r\n        (PipLike pip,) = spot.ilks(ilk);\r\n        // par is a ray, pip returns a wad\r\n        tag[ilk] = wdiv(spot.par(), uint(pip.read()));\r\n    }\r\n\r\n    function skip(bytes32 ilk, uint256 id) external note {\r\n        require(tag[ilk] != 0, \u0022End/tag-ilk-not-defined\u0022);\r\n\r\n        (address flipV,,) = cat.ilks(ilk);\r\n        Flippy flip = Flippy(flipV);\r\n        (, uint rate,,,) = vat.ilks(ilk);\r\n        (uint bid, uint lot,,,, address usr,, uint tab) = flip.bids(id);\r\n\r\n        vat.suck(address(vow), address(vow),  tab);\r\n        vat.suck(address(vow), address(this), bid);\r\n        vat.hope(address(flip));\r\n        flip.yank(id);\r\n\r\n        uint art = tab / rate;\r\n        Art[ilk] = add(Art[ilk], art);\r\n        require(int(lot) \u003E= 0 \u0026\u0026 int(art) \u003E= 0, \u0022End/overflow\u0022);\r\n        vat.grab(ilk, usr, address(this), address(vow), int(lot), int(art));\r\n    }\r\n\r\n    function skim(bytes32 ilk, address urn) external note {\r\n        require(tag[ilk] != 0, \u0022End/tag-ilk-not-defined\u0022);\r\n        (, uint rate,,,) = vat.ilks(ilk);\r\n        (uint ink, uint art) = vat.urns(ilk, urn);\r\n\r\n        uint owe = rmul(rmul(art, rate), tag[ilk]);\r\n        uint wad = min(ink, owe);\r\n        gap[ilk] = add(gap[ilk], sub(owe, wad));\r\n\r\n        require(wad \u003C= 2**255 \u0026\u0026 art \u003C= 2**255, \u0022End/overflow\u0022);\r\n        vat.grab(ilk, urn, address(this), address(vow), -int(wad), -int(art));\r\n    }\r\n\r\n    function free(bytes32 ilk) external note {\r\n        require(live == 0, \u0022End/still-live\u0022);\r\n        (uint ink, uint art) = vat.urns(ilk, msg.sender);\r\n        require(art == 0, \u0022End/art-not-zero\u0022);\r\n        require(ink \u003C= 2**255, \u0022End/overflow\u0022);\r\n        vat.grab(ilk, msg.sender, msg.sender, address(vow), -int(ink), 0);\r\n    }\r\n\r\n    function thaw() external note {\r\n        require(live == 0, \u0022End/still-live\u0022);\r\n        require(debt == 0, \u0022End/debt-not-zero\u0022);\r\n        require(vat.dai(address(vow)) == 0, \u0022End/surplus-not-zero\u0022);\r\n        require(now \u003E= add(when, wait), \u0022End/wait-not-finished\u0022);\r\n        debt = vat.debt();\r\n    }\r\n    function flow(bytes32 ilk) external note {\r\n        require(debt != 0, \u0022End/debt-zero\u0022);\r\n        require(fix[ilk] == 0, \u0022End/fix-ilk-already-defined\u0022);\r\n\r\n        (, uint rate,,,) = vat.ilks(ilk);\r\n        uint256 wad = rmul(rmul(Art[ilk], rate), tag[ilk]);\r\n        fix[ilk] = rdiv(mul(sub(wad, gap[ilk]), RAY), debt);\r\n    }\r\n\r\n    function pack(uint256 wad) external note {\r\n        require(debt != 0, \u0022End/debt-zero\u0022);\r\n        vat.move(msg.sender, address(vow), mul(wad, RAY));\r\n        bag[msg.sender] = add(bag[msg.sender], wad);\r\n    }\r\n    function cash(bytes32 ilk, uint wad) external note {\r\n        require(fix[ilk] != 0, \u0022End/fix-ilk-not-defined\u0022);\r\n        vat.flux(ilk, address(this), msg.sender, rmul(wad, fix[ilk]));\r\n        out[ilk][msg.sender] = add(out[ilk][msg.sender], wad);\r\n        require(out[ilk][msg.sender] \u003C= bag[msg.sender], \u0022End/insufficient-bag-balance\u0022);\r\n    }\r\n}","ABI":"[{\u0022inputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022constructor\u0022},{\u0022anonymous\u0022:true,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022bytes4\u0022,\u0022name\u0022:\u0022sig\u0022,\u0022type\u0022:\u0022bytes4\u0022},{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022usr\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022arg1\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022arg2\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022bytes\u0022,\u0022name\u0022:\u0022data\u0022,\u0022type\u0022:\u0022bytes\u0022}],\u0022name\u0022:\u0022LogNote\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022Art\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022bag\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022cage\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022ilk\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022cage\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022ilk\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022wad\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022cash\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022cat\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022contract CatLike\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022debt\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022guy\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022deny\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022what\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022data\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022file\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022what\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022data\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022file\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022fix\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022ilk\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022flow\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022ilk\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022free\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022gap\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022live\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022out\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022wad\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022pack\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022pot\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022contract PotLike\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022guy\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022rely\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022ilk\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022urn\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022skim\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022ilk\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022id\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022skip\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022spot\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022contract Spotty\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022tag\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022thaw\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022vat\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022contract VatLike\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022vow\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022contract VowLike\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022wait\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022wards\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022when\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022}]","ContractName":"End","CompilerVersion":"v0.5.12\u002Bcommit.7709ece9","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://83eb7e4603d27529380489cc2e9eae8c93e78f6883173654442c079532ab1389"}]