[{"SourceCode":"pragma solidity 0.5.2; /*\r\n\r\n___________________________________________________________________\r\n  _      _                                        ______           \r\n  |  |  /          /                                /              \r\n--|-/|-/-----__---/----__----__---_--_----__-------/-------__------\r\n  |/ |/    /___) /   /   \u0027 /   ) / /  ) /___)     /      /   )     \r\n__/__|____(___ _/___(___ _(___/_/_/__/_(___ _____/______(___/__o_o_\r\n\r\n// ----------------------------------------------------------------------------\r\n// \u0027CENT\u0027 Token contract with following features\r\n//      =\u003E ERC20 and ERC865 Compliance\r\n//      =\u003E Higher degree of control by owner\r\n//      =\u003E selfdestruct ability by owner\r\n//      =\u003E SafeMath implementation \r\n//      =\u003E Burnable and Minting\r\n//\r\n// Name        : Center Coin\r\n// Symbol      : CENT\r\n// Total supply: 0 (0 Billion)\r\n// Decimals    : 18\r\n//\r\n// Copyright (c) 2019 CENT TOKEN Inc. The MIT Licence.\r\n// ----------------------------------------------------------------------------\r\n*/ \r\n\r\n//*******************************************************************//\r\n//------------------------ SafeMath Library -------------------------//\r\n//*******************************************************************//\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b \u003E 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c \u002B a % b); // There is no case in which this doesn\u0027t hold\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b \u003C= a);\r\n    return a - b;\r\n  }\r\n\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a \u002B b;\r\n    assert(c \u003E= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n//*******************************************************************//\r\n//------------------ Contract to Manage Ownership -------------------//\r\n//*******************************************************************//\r\n    \r\ncontract owned {\r\n    address payable public owner;\r\n    \r\n     constructor () public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address payable newOwner) onlyOwner public {\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n\r\n//***************************************************************//\r\n//------------------ ERC20 Standard Template -------------------//\r\n//***************************************************************//\r\n    \r\ncontract TokenERC20 {\r\n    // Public variables of the token\r\n    using SafeMath for uint256;\r\n    string public name;\r\n    string public symbol;\r\n    uint256 public decimals = 18; // 18 decimals is the strongly suggested default, avoid changing it\r\n    uint256 public totalSupply;\r\n    bool public safeguard = false;  //putting safeguard on will halt all non-owner functions\r\n\r\n    // This creates an array with all balances\r\n    mapping (address =\u003E uint256) public balanceOf;\r\n    mapping (address =\u003E mapping (address =\u003E uint256)) public allowance;\r\n\r\n    // This generates a public event on the blockchain that will notify clients\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    // This notifies clients about the amount burnt\r\n    event Burn(address indexed from, uint256 value);\r\n    \r\n    // This notifies client about approval of the allowance for token transfer to third party\r\n    event Approval(address indexed from, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * Constrctor function\r\n     *\r\n     * Initializes contract with initial supply tokens to the creator of the contract\r\n     */\r\n    constructor (\r\n        uint256 initialSupply,\r\n        string memory tokenName,\r\n        string memory tokenSymbol\r\n    ) public {\r\n        totalSupply = initialSupply.mul(10**decimals);  // Update total supply with the decimal amount\r\n        balanceOf[msg.sender] = totalSupply;            // All the tokens will be sent to owner\r\n        name = tokenName;                               // Set the name for display purposes\r\n        symbol = tokenSymbol;                           // Set the symbol for display purposes\r\n        emit Transfer(address(0), msg.sender, totalSupply);// Emit event to log this transaction\r\n    }\r\n\r\n    /**\r\n     * Internal transfer, only can be called by this contract\r\n     */\r\n    function _transfer(address _from, address _to, uint _value) internal {\r\n        require(!safeguard);\r\n        // Prevent transfer to 0x0 address. Use burn() instead\r\n        require(_to != address(0x0));\r\n        // Check if the sender has enough\r\n        require(balanceOf[_from] \u003E= _value);\r\n        // Check for overflows\r\n        require(balanceOf[_to].add(_value) \u003E balanceOf[_to]);\r\n        // Save this for an assertion in the future\r\n        uint previousBalances = balanceOf[_from].add(balanceOf[_to]);\r\n        // Subtract from the sender\r\n        balanceOf[_from] = balanceOf[_from].sub(_value);\r\n        // Add the same to the recipient\r\n        balanceOf[_to] = balanceOf[_to].add(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        // Asserts are used to use static analysis to find bugs in your code. They should never fail\r\n        assert(balanceOf[_from].add(balanceOf[_to]) == previousBalances);\r\n    }\r\n\r\n    /**\r\n     * Transfer tokens\r\n     *\r\n     * Send \u0060_value\u0060 tokens to \u0060_to\u0060 from your account\r\n     *\r\n     * @param _to The address of the recipient\r\n     * @param _value the amount to send\r\n     */\r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n        _transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Transfer tokens from other address\r\n     *\r\n     * Send \u0060_value\u0060 tokens to \u0060_to\u0060 in behalf of \u0060_from\u0060\r\n     *\r\n     * @param _from The address of the sender\r\n     * @param _to The address of the recipient\r\n     * @param _value the amount to send\r\n     */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        require(!safeguard);\r\n        require(_value \u003C= allowance[_from][msg.sender]);     // Check allowance\r\n        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\r\n        _transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Set allowance for other address\r\n     *\r\n     * Allows \u0060_spender\u0060 to spend no more than \u0060_value\u0060 tokens in your behalf\r\n     *\r\n     * @param _spender The address authorized to spend\r\n     * @param _value the max amount they can spend\r\n     */\r\n    function approve(address _spender, uint256 _value) public\r\n        returns (bool success) {\r\n        require(!safeguard);\r\n        allowance[msg.sender][_spender] = _value;\r\n        return true;\r\n    }\r\n\r\n  \r\n    \r\n    \r\n    /**\r\n     * Destroy tokens\r\n     *\r\n     * Remove \u0060_value\u0060 tokens from the system irreversibly\r\n     *\r\n     * @param _value the amount of money to burn\r\n     */\r\n    function burn(uint256 _value) public returns (bool success) {\r\n        require(!safeguard);\r\n        require(balanceOf[msg.sender] \u003E= _value);                   // Check if the sender has enough\r\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);  // Subtract from the sender\r\n        totalSupply = totalSupply.sub(_value);                      // Updates totalSupply\r\n        emit Burn(msg.sender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Destroy tokens from other account\r\n     *\r\n     * Remove \u0060_value\u0060 tokens from the system irreversibly on behalf of \u0060_from\u0060.\r\n     *\r\n     * @param _from the address of the sender\r\n     * @param _value the amount of money to burn\r\n     */\r\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\r\n        require(!safeguard);\r\n        require(balanceOf[_from] \u003E= _value);                // Check if the targeted balance is enough\r\n        require(_value \u003C= allowance[_from][msg.sender]);    // Check allowance\r\n        balanceOf[_from] = balanceOf[_from].sub(_value);    // Subtract from the targeted balance\r\n        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value); // Subtract from the sender\u0027s allowance\r\n        totalSupply = totalSupply.sub(_value);              // Update totalSupply\r\n        emit  Burn(_from, _value);\r\n        return true;\r\n    }\r\n    \r\n}\r\n\r\n//****************************************************************************//\r\n//---------------------  CENT TOKEN MAIN CODE STARTS HERE ---------------------//\r\n//****************************************************************************//\r\n    \r\ncontract CENTTOKEN is owned, TokenERC20 {\r\n    \r\n    \r\n    /***************************************/\r\n    /* Custom Code for the ERC20 CENT TOKEN */\r\n    /***************************************/\r\n\r\n    /* Public variables of the token */\r\n    string private tokenName = \u0022Center Coin\u0022;\r\n    string private tokenSymbol = \u0022CENT\u0022;\r\n    uint256 private initialSupply = 0;  //0 Billion\r\n    \r\n    \r\n    /* Records for the fronzen accounts */\r\n    mapping (address =\u003E bool) public frozenAccount;\r\n    \r\n    /* This generates a public event on the blockchain that will notify clients */\r\n    event FrozenFunds(address target, bool frozen);\r\n    \r\n    /**\r\n    * Sell token is enabled\r\n    */\r\n    bool public SellTokenAllowed;\r\n    \r\n    /**\r\n    * Buy token is enabled\r\n    */\r\n    bool public BuyTokenAllowed;\r\n    \r\n    /**\r\n    * This notifies sell token status.\r\n    */\r\n    event SellTokenAllowedEvent(bool isAllowed);\r\n    \r\n    /**\r\n    * This notifies buy token status.\r\n    */\r\n    event BuyTokenAllowedEvent(bool isAllowed);\r\n\r\n    /* Initializes contract with initial supply tokens to the creator of the contract */\r\n    constructor () TokenERC20(initialSupply, tokenName, tokenSymbol) public {\r\n        \r\n    }\r\n\r\n    /* Internal transfer, only can be called by this contract */\r\n    function _transfer(address _from, address _to, uint _value) internal {\r\n        require(!safeguard);\r\n        require (_to != address(0x0));                      // Prevent transfer to 0x0 address. Use burn() instead\r\n        require (balanceOf[_from] \u003E= _value);               // Check if the sender has enough\r\n        require (balanceOf[_to].add(_value) \u003E= balanceOf[_to]); // Check for overflows\r\n        require(!frozenAccount[_from]);                     // Check if sender is frozen\r\n        require(!frozenAccount[_to]);                       // Check if recipient is frozen\r\n        balanceOf[_from] = balanceOf[_from].sub(_value);    // Subtract from the sender\r\n        balanceOf[_to] = balanceOf[_to].add(_value);        // Add the same to the recipient\r\n        emit Transfer(_from, _to, _value);\r\n    }\r\n    \r\n    /// @notice \u0060freeze? Prevent | Allow\u0060 \u0060target\u0060 from sending \u0026 receiving tokens\r\n    /// @param target Address to be frozen\r\n    /// @param freeze either to freeze it or not\r\n    function freezeAccount(address target, bool freeze) onlyOwner public {\r\n            frozenAccount[target] = freeze;\r\n        emit  FrozenFunds(target, freeze);\r\n    }\r\n\r\n\r\n    /****************************************/\r\n    /* Custom Code for the ERC865 CENT TOKEN */\r\n    /****************************************/\r\n\r\n     /* Nonces of transfers performed */\r\n    mapping(bytes32 =\u003E bool) transactionHashes;\r\n    event TransferPreSigned(address indexed from, address indexed to, address indexed delegate, uint256 amount, uint256 fee);\r\n    event ApprovalPreSigned(address indexed from, address indexed to, address indexed delegate, uint256 amount, uint256 fee);\r\n    \r\n    \r\n      /// @notice Create \u0060mintedAmount\u0060 tokens and send it to \u0060target\u0060\r\n    /// @param target Address to receive the tokens\r\n    /// @param mintedAmount the amount of tokens it will receive\r\n    function mintToken(address target, uint256 mintedAmount)  public onlyOwner  {\r\n        balanceOf[target] \u002B= mintedAmount;\r\n        totalSupply \u002B= mintedAmount;\r\n        emit Transfer(address(this), target, mintedAmount);\r\n    }\r\n    \r\n    /// @notice Create \u0060mintedAmount\u0060 tokens and send it to \u0060target\u0060\r\n    /// @param target Address to receive the tokens\r\n    /// @param mintedAmount the amount of tokens it will receive\r\n    function mintEthToken(address target, address owner,uint mintedAmount, uint256 nonce, uint8 v, bytes32 r, bytes32 s)  payable public onlyOwner  {\r\n        require(msg.value \u003E 0);\r\n        \r\n        bytes32 hashedTx = keccak256(abi.encodePacked(\u0027transferPreSigned\u0027, owner, mintedAmount,nonce));\r\n        require(transactionHashes[hashedTx] == false, \u0027transaction hash is already used\u0027);\r\n        address from = ecrecover(keccak256(abi.encodePacked(\u0022\\x19Ethereum Signed Message:\\n32\u0022, hashedTx)),v,r,s);\r\n        require(from == owner, \u0027Invalid _from address\u0027);\r\n\r\n        \r\n        balanceOf[target] \u002B= mintedAmount;\r\n        totalSupply \u002B= mintedAmount;\r\n        emit Transfer(address(this), target, mintedAmount);\r\n    }\r\n    \r\n     /**\r\n     * @notice Submit a presigned transfer\r\n     * @param _to address The address which you want to transfer to.\r\n     * @param _value uint256 The amount of tokens to be transferred.\r\n     * @param _fee uint256 The amount of tokens paid to msg.sender, by the owner.\r\n     * @param _nonce uint256 Presigned transaction number.\r\n     */\r\n    function transferPreSigned(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value,\r\n        uint256 _fee,\r\n        uint256 _nonce,\r\n        uint8 v, \r\n        bytes32 r, \r\n        bytes32 s\r\n    )\r\n        public\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        require(_to != address(0), \u0027Invalid _to address\u0027);\r\n        bytes32 hashedTx = keccak256(abi.encodePacked(\u0027transferPreSigned\u0027, address(this), _to, _value, _fee, _nonce));\r\n        require(transactionHashes[hashedTx] == false, \u0027transaction hash is already used\u0027);\r\n        address from = ecrecover(keccak256(abi.encodePacked(\u0022\\x19Ethereum Signed Message:\\n32\u0022, hashedTx)),v,r,s);\r\n        require(from == _from, \u0027Invalid _from address\u0027);\r\n\r\n        balanceOf[from] = balanceOf[from].sub(_value).sub(_fee);\r\n        balanceOf[_to] = balanceOf[_to].add(_value);\r\n        balanceOf[msg.sender] = balanceOf[msg.sender].add(_fee);\r\n        transactionHashes[hashedTx] = true;\r\n        emit Transfer(from, _to, _value);\r\n        emit Transfer(from, msg.sender, _fee);\r\n        emit TransferPreSigned(from, _to, msg.sender, _value, _fee);\r\n        return true;\r\n    }\r\n\t\r\n\t\r\n     /**\r\n     * @notice Submit a presigned approval\r\n     * @param _spender address The address which will spend the funds.\r\n     * @param _value uint256 The amount of tokens to allow.\r\n     * @param _fee uint256 The amount of tokens paid to msg.sender, by the owner.\r\n     * @param _nonce uint256 Presigned transaction number.\r\n     */\r\n    function approvePreSigned(\r\n        address _spender,\r\n        uint256 _value,\r\n        uint256 _fee,\r\n        uint256 _nonce,\r\n        uint8 v, \r\n        bytes32 r, \r\n        bytes32 s\r\n    )\r\n        public\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        require(_spender != address(0));\r\n        bytes32 hashedTx = keccak256(abi.encodePacked(\u0027approvePreSigned\u0027, address(this), _spender, _value, _fee, _nonce));\r\n        require(transactionHashes[hashedTx] == false, \u0027transaction hash is already used\u0027);\r\n        address from = ecrecover(keccak256(abi.encodePacked(\u0022\\x19Ethereum Signed Message:\\n32\u0022, hashedTx)),v,r,s);\r\n        require(from != address(0), \u0027Invalid _from address\u0027);\r\n        allowance[from][_spender] = _value;\r\n        balanceOf[from] = balanceOf[from].sub(_fee);\r\n        balanceOf[msg.sender] = balanceOf[msg.sender].add(_fee);\r\n        transactionHashes[hashedTx] = true;\r\n        emit Approval(from, _spender, _value);\r\n        emit Transfer(from, msg.sender, _fee);\r\n        emit ApprovalPreSigned(from, _spender, msg.sender, _value, _fee);\r\n        return true;\r\n    }\r\n    \r\n     /**\r\n     * @notice Increase the amount of tokens that an owner allowed to a spender.\r\n     * @param _spender address The address which will spend the funds.\r\n     * @param _addedValue uint256 The amount of tokens to increase the allowance by.\r\n     * @param _fee uint256 The amount of tokens paid to msg.sender, by the owner.\r\n     * @param _nonce uint256 Presigned transaction number.\r\n     */\r\n    function increaseApprovalPreSigned(\r\n        address _spender,\r\n        uint256 _addedValue,\r\n        uint256 _fee,\r\n        uint256 _nonce,\r\n        uint8 v, \r\n        bytes32 r, \r\n        bytes32 s\r\n    )\r\n        public\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        require(_spender != address(0));\r\n        bytes32 hashedTx = keccak256(abi.encodePacked(\u0027increaseApprovalPreSigned\u0027, address(this), _spender, _addedValue, _fee, _nonce));\r\n        require(transactionHashes[hashedTx] == false, \u0027transaction hash is already used\u0027);\r\n        address from = ecrecover(keccak256(abi.encodePacked(\u0022\\x19Ethereum Signed Message:\\n32\u0022, hashedTx)),v,r,s);\r\n        require(from != address(0), \u0027Invalid _from address\u0027);\r\n        allowance[from][_spender] = allowance[from][_spender].add(_addedValue);\r\n        balanceOf[from] = balanceOf[from].sub(_fee);\r\n        balanceOf[msg.sender] = balanceOf[msg.sender].add(_fee);\r\n        transactionHashes[hashedTx] = true;\r\n        emit Approval(from, _spender, allowance[from][_spender]);\r\n        emit Transfer(from, msg.sender, _fee);\r\n        emit ApprovalPreSigned(from, _spender, msg.sender, allowance[from][_spender], _fee);\r\n        return true;\r\n    }\r\n    \r\n     /**\r\n     * @notice Decrease the amount of tokens that an owner allowed to a spender.\r\n     * @param _spender address The address which will spend the funds.\r\n     * @param _subtractedValue uint256 The amount of tokens to decrease the allowance by.\r\n     * @param _fee uint256 The amount of tokens paid to msg.sender, by the owner.\r\n     * @param _nonce uint256 Presigned transaction number.\r\n     */\r\n    function decreaseApprovalPreSigned(\r\n        address _spender,\r\n        uint256 _subtractedValue,\r\n        uint256 _fee,\r\n        uint256 _nonce,\r\n        uint8 v, \r\n        bytes32 r, \r\n        bytes32 s\r\n    )\r\n        public\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        require(_spender != address(0));\r\n        bytes32 hashedTx = keccak256(abi.encodePacked(\u0027decreaseApprovalPreSigned\u0027, address(this), _spender, _subtractedValue, _fee, _nonce));\r\n        require(transactionHashes[hashedTx] == false, \u0027transaction hash is already used\u0027);\r\n        address from = ecrecover(keccak256(abi.encodePacked(\u0022\\x19Ethereum Signed Message:\\n32\u0022, hashedTx)),v,r,s);\r\n        require(from != address(0), \u0027Invalid _from address\u0027);\r\n        if (_subtractedValue \u003E allowance[from][_spender]) {\r\n            allowance[from][_spender] = 0;\r\n        } else {\r\n            allowance[from][_spender] = allowance[from][_spender].sub(_subtractedValue);\r\n        }\r\n        balanceOf[from] = balanceOf[from].sub(_fee);\r\n        balanceOf[msg.sender] = balanceOf[msg.sender].add(_fee);\r\n        transactionHashes[hashedTx] = true;\r\n        emit Approval(from, _spender, _subtractedValue);\r\n        emit Transfer(from, msg.sender, _fee);\r\n        emit ApprovalPreSigned(from, _spender, msg.sender, allowance[from][_spender], _fee);\r\n        return true;\r\n    }\r\n     /**\r\n     * @notice Transfer tokens from one address to another\r\n     * @param _from address The address which you want to send tokens from.\r\n     * @param _to address The address which you want to transfer to.\r\n     * @param _value uint256 The amount of tokens to be transferred.\r\n     * @param _fee uint256 The amount of tokens paid to msg.sender, by the spender.\r\n     * @param _nonce uint256 Presigned transaction number.\r\n     */\r\n    function transferFromPreSigned(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value,\r\n        uint256 _fee,\r\n        uint256 _nonce,\r\n        uint8 v, \r\n        bytes32 r, \r\n        bytes32 s\r\n    )\r\n        public\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        require(_to != address(0));\r\n        bytes32 hashedTx = keccak256(abi.encodePacked(\u0027transferFromPreSigned\u0027, address(this), _from, _to, _value, _fee, _nonce));\r\n        require(transactionHashes[hashedTx] == false, \u0027transaction hash is already used\u0027);\r\n        address spender = ecrecover(keccak256(abi.encodePacked(\u0022\\x19Ethereum Signed Message:\\n32\u0022, hashedTx)),v,r,s);\r\n        require(spender != address(0), \u0027Invalid _from address\u0027);\r\n        balanceOf[_from] = balanceOf[_from].sub(_value);\r\n        balanceOf[_to] = balanceOf[_to].add(_value);\r\n        allowance[_from][spender] = allowance[_from][spender].sub(_value);\r\n        balanceOf[spender] = balanceOf[spender].sub(_fee);\r\n        balanceOf[msg.sender] = balanceOf[msg.sender].add(_fee);\r\n        transactionHashes[hashedTx] = true;\r\n        emit Transfer(_from, _to, _value);\r\n        emit Transfer(spender, msg.sender, _fee);\r\n        return true;\r\n    }\r\n     \r\n     \r\n     /**\r\n    *  function for Buy Token\r\n    */\r\n    \r\n    function buy(uint tCount, uint256 nonce, uint8 v, bytes32 r, bytes32 s) payable public returns (uint amount){\r\n          require(BuyTokenAllowed, \u0022Buy Token is not allowed\u0022);   \r\n          require(msg.value \u003E 0, \u0022Must ether grater than 0\u0022);\r\n          require(balanceOf[address(this)] \u003E= tCount, \u0022Contract bablance greater or equal\u0022);\r\n          \r\n          bytes32 hashedTx = keccak256(abi.encodePacked(\u0027transferPreSigned\u0027,tCount,nonce));\r\n          require(transactionHashes[hashedTx] == false, \u0027transaction hash is already used\u0027);\r\n          address from = ecrecover(keccak256(abi.encodePacked(\u0022\\x19Ethereum Signed Message:\\n32\u0022, hashedTx)),v,r,s);\r\n          require(from == owner, \u0027Invalid _from address\u0027);\r\n\t      \r\n          amount = tCount;\r\n          balanceOf[address(this)] = balanceOf[address(this)].sub(amount);                        \r\n          balanceOf[msg.sender] = balanceOf[msg.sender].add(amount); \r\n          transactionHashes[hashedTx] = true;\r\n          emit Transfer(address(this), msg.sender ,amount);\r\n          return amount;\r\n    }\r\n    \r\n      \r\n    /**\r\n    *  function for Sell Token\r\n    */\r\n    function sell(uint tCount, uint etherAmount, uint256 nonce, uint8 v, bytes32 r, bytes32 s) public returns (uint amount){\r\n          require(SellTokenAllowed,\u0022Sell Token is not allowed\u0022);  \r\n              \r\n          require(balanceOf[msg.sender] \u003E 0, \u0022User balance must not be 0\u0022);\r\n          require(balanceOf[msg.sender] \u003E= tCount,\u0022Checks if the sender has enough to sell\u0022);    \r\n          require(address(this).balance \u003E= etherAmount, \u0022Contract ether must be grater or equal\u0022);\r\n          \r\n          \r\n          // Checking signer\r\n          bytes32 hashedTx = keccak256(abi.encodePacked(\u0027transferPreSigned\u0027, tCount, nonce));\r\n          require(transactionHashes[hashedTx] == false, \u0027transaction hash is already used\u0027);\r\n          address from = ecrecover(keccak256(abi.encodePacked(\u0022\\x19Ethereum Signed Message:\\n32\u0022, hashedTx)),v,r,s);\r\n          require(from == owner, \u0027Invalid _from address\u0027);\r\n          \r\n          balanceOf[address(this)] = balanceOf[address(this)].add(tCount);                          \r\n          balanceOf[msg.sender] = balanceOf[msg.sender].sub(tCount);                               \r\n        \r\n          transactionHashes[hashedTx] = true;\r\n          msg.sender.transfer(etherAmount);                                                        \r\n          emit Transfer(msg.sender, address(this), tCount);\r\n         \r\n          return etherAmount;\r\n    }\r\n    \r\n     /**\r\n    * Enable Sell Token\r\n    */\r\n    function enableSellToken() onlyOwner public {\r\n        SellTokenAllowed = true;\r\n        emit SellTokenAllowedEvent (true);\r\n    }\r\n\r\n    /**\r\n    * Disable Sell Token\r\n    */\r\n    function disableSellToken() onlyOwner public {\r\n        SellTokenAllowed = false;\r\n        emit SellTokenAllowedEvent (false);\r\n    }\r\n    \r\n    /**\r\n    * Enable Buy Token\r\n    */\r\n    function enableBuyToken() onlyOwner public {\r\n        BuyTokenAllowed = true;\r\n        emit BuyTokenAllowedEvent (true);\r\n    }\r\n\r\n    /**\r\n    * Disable Buy Token\r\n    */\r\n    function disableBuyToken() onlyOwner public {\r\n        BuyTokenAllowed = false;\r\n        emit BuyTokenAllowedEvent (false);\r\n    }\r\n\r\n    /********************************/\r\n    /*  Code for helper functions   */\r\n    /********************************/\r\n      \r\n    //Just in case, owner wants to transfer Ether from contract to owner address\r\n    function manualWithdrawEther() public onlyOwner{\r\n        address(owner).transfer(address(this).balance);\r\n    }\r\n    \r\n    //Just in case, owner wants to transfer Tokens from contract to owner address\r\n    //tokenAmount must be in WEI\r\n    function manualWithdrawTokens(uint256 tokenAmount) public onlyOwner{\r\n        _transfer(address(this), msg.sender, tokenAmount);\r\n    }\r\n    \r\n    //selfdestruct function. just in case owner decided to destruct this contract.\r\n    function destructContract() public onlyOwner{\r\n        selfdestruct(owner);\r\n    }\r\n    \r\n    /**\r\n     * Change safeguard status on or off\r\n     *\r\n     * When safeguard is true, then all the non-owner functions will stop working.\r\n     * When safeguard is false, then all the functions will resume working back again!\r\n     */\r\n    function changeSafeguardStatus() onlyOwner public{\r\n        if (safeguard == false){\r\n            safeguard = true;\r\n        }\r\n        else{\r\n            safeguard = false;    \r\n        }\r\n    }\r\n    \r\n\r\n\r\n}","ABI":"[{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022name\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_spender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022approve\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022success\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022BuyTokenAllowed\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_spender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_value\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_fee\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_nonce\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022v\u0022,\u0022type\u0022:\u0022uint8\u0022},{\u0022name\u0022:\u0022r\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022name\u0022:\u0022s\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022approvePreSigned\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022totalSupply\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_from\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_value\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_fee\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_nonce\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022v\u0022,\u0022type\u0022:\u0022uint8\u0022},{\u0022name\u0022:\u0022r\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022name\u0022:\u0022s\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022transferFromPreSigned\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_from\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022transferFrom\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022success\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022SellTokenAllowed\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022decimals\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022burn\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022success\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022tCount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022nonce\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022v\u0022,\u0022type\u0022:\u0022uint8\u0022},{\u0022name\u0022:\u0022r\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022name\u0022:\u0022s\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022buy\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:true,\u0022stateMutability\u0022:\u0022payable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022disableSellToken\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022changeSafeguardStatus\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022manualWithdrawEther\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022enableSellToken\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022balanceOf\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022target\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022owner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022mintedAmount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022nonce\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022v\u0022,\u0022type\u0022:\u0022uint8\u0022},{\u0022name\u0022:\u0022r\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022name\u0022:\u0022s\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022mintEthToken\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:true,\u0022stateMutability\u0022:\u0022payable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022disableBuyToken\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022target\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022mintedAmount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022mintToken\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_from\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022burnFrom\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022success\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022owner\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022enableBuyToken\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022destructContract\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022symbol\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022tCount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022etherAmount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022nonce\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022v\u0022,\u0022type\u0022:\u0022uint8\u0022},{\u0022name\u0022:\u0022r\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022name\u0022:\u0022s\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022sell\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022transfer\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022success\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022frozenAccount\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022safeguard\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_spender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_subtractedValue\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_fee\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_nonce\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022v\u0022,\u0022type\u0022:\u0022uint8\u0022},{\u0022name\u0022:\u0022r\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022name\u0022:\u0022s\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022decreaseApprovalPreSigned\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022allowance\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022target\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022freeze\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022name\u0022:\u0022freezeAccount\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_from\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_value\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_fee\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_nonce\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022v\u0022,\u0022type\u0022:\u0022uint8\u0022},{\u0022name\u0022:\u0022r\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022name\u0022:\u0022s\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022transferPreSigned\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_spender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_addedValue\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_fee\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_nonce\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022v\u0022,\u0022type\u0022:\u0022uint8\u0022},{\u0022name\u0022:\u0022r\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022name\u0022:\u0022s\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022increaseApprovalPreSigned\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022transferOwnership\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022tokenAmount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022manualWithdrawTokens\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022constructor\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022target\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022frozen\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022name\u0022:\u0022FrozenFunds\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022isAllowed\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022name\u0022:\u0022SellTokenAllowedEvent\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022isAllowed\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022name\u0022:\u0022BuyTokenAllowedEvent\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022from\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022delegate\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022fee\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022TransferPreSigned\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022from\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022delegate\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022fee\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022ApprovalPreSigned\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022from\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022Transfer\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022from\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022Burn\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022from\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022spender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022Approval\u0022,\u0022type\u0022:\u0022event\u0022}]","ContractName":"CENTTOKEN","CompilerVersion":"v0.5.2\u002Bcommit.1df8f40c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://a8fd9e4d6db07550d3f33ceb4fa322682cc46fb4eae38d0d5a6c234028077373"}]