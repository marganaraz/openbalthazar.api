[{"SourceCode":"/**\r\n * This smart contract code is Copyright 2018, 2019 TokenMarket Ltd. For more information see https://tokenmarket.net\r\n * Licensed under the Apache License, version 2.0: https://github.com/TokenMarketNet/ico/blob/master/LICENSE.txt\r\n */\r\n\r\ninterface SecurityTransferAgent {\r\n  function verify(address from, address to, uint256 value) external view returns (uint256 newValue);\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address who) public view returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public view returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface ERC677Receiver {\r\n  function tokenFallback(address from, uint256 amount, bytes data) returns (bool success);\r\n}\r\n\r\ninterface ERC677 {\r\n\r\n  // TODO: Have a different event name to make sure that tools with bad APIs do not mix this with ERC-20 Transfer() event that lacks data parameter\r\n  event ERC677Transfer(address from, address receiver, uint256 amount, bytes data);\r\n\r\n  function transferAndCall(ERC677Receiver receiver, uint amount, bytes data) returns (bool success);\r\n}\r\n\r\n\r\n\r\ncontract ERC677Token is ERC20, ERC677 {\r\n  function transferAndCall(ERC677Receiver receiver, uint amount, bytes data) returns (bool success) {\r\n    require(transfer(address(receiver), amount));\r\n\r\n    ERC677Transfer(msg.sender, address(receiver), amount, data);\r\n\r\n    require(receiver.tokenFallback(msg.sender, amount, data));\r\n  }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b \u003E 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c \u002B a % b); // There is no case in which this doesn\u0027t hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b \u003C= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a \u002B b;\r\n    assert(c \u003E= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @author TokenMarket /  Ville Sundell \u003Cville at tokenmarket.net\u003E\r\n */\r\ncontract CheckpointToken is ERC677Token {\r\n  using SafeMath for uint256; // We use only uint256 for safety reasons (no boxing)\r\n\r\n  /// @dev Name of the token, usually the company and/or series (like \u0022TokenMeerkat Ltd. Series A\u0022):\r\n  string public name;\r\n  /// @dev Ticker symbol, usually bases on the \u0022name\u0022 above (like \u0022MEER\u0022):\r\n  string public symbol;\r\n  /// @dev Decimals are usually set to 18 for EIP-20 tokens:\r\n  uint256 public decimals;\r\n  /// @dev If transactionVerifier is set, that contract will be queried upon every token transaction:\r\n  SecurityTransferAgent public transactionVerifier;\r\n\r\n  /// @dev Checkpoint is the fundamental unit for our internal accounting\r\n  ///      (who owns what, and at what moment in time)\r\n  struct Checkpoint {\r\n    uint256 blockNumber;\r\n    uint256 value;\r\n  }\r\n  /// @dev This mapping contains checkpoints for every address:\r\n  mapping (address =\u003E Checkpoint[]) public tokenBalances;\r\n  /// @dev This is a one dimensional Checkpoint mapping of the overall token supply:\r\n  Checkpoint[] public tokensTotal;\r\n\r\n  /// @dev This mapping keeps account for approve() -\u003E fransferFrom() pattern:\r\n  mapping (address =\u003E mapping (address =\u003E uint256)) public allowed;\r\n\r\n  /**\r\n   * @dev Constructor for CheckpointToken, initializing the token\r\n   *\r\n   * Here we define initial values for name, symbol and decimals.\r\n   *\r\n   * @param _name Initial name of the token\r\n   * @param _symbol Initial symbol of the token\r\n   * @param _decimals Number of decimals for the token, industry standard is 18\r\n   */\r\n  function CheckpointToken(string _name, string _symbol, uint256 _decimals) public {\r\n    name = _name;\r\n    symbol = _symbol;\r\n    decimals = _decimals;\r\n  }\r\n\r\n  /** PUBLIC FUNCTIONS\r\n   ****************************************/\r\n\r\n  /**\r\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\r\n   * @param owner address The address which owns the funds.\r\n   * @param spender address The address which will spend the funds.\r\n   * @return A uint256 specifying the amount of tokens still available for the spender.\r\n   */\r\n  function allowance(address owner, address spender) public view returns (uint256) {\r\n    return allowed[owner][spender];\r\n  }\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   *\r\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\r\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\r\n   * race condition is to first reduce the spender\u0027s allowance to 0 and set the desired value afterwards:\r\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n   * @param spender The address which will spend the funds.\r\n   * @param value The amount of tokens to be spent.\r\n   * @return true if the call function was executed successfully\r\n   */\r\n  function approve(address spender, uint256 value) public returns (bool) {\r\n    allowed[msg.sender][spender] = value;\r\n    Approval(msg.sender, spender, value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param from address The address which you want to send tokens from\r\n   * @param to address The address which you want to transfer to\r\n   * @param value uint256 the amount of tokens to be transferred\r\n   * @return true if the call function was executed successfully\r\n   */\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool) {\r\n    require(value \u003C= allowed[from][msg.sender]);\r\n\r\n    transferInternal(from, to, value);\r\n    Transfer(from, to, value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev transfer token for a specified address\r\n   * @param to The address to transfer to.\r\n   * @param value The amount to be transferred.\r\n   * @return true if the call function was executed successfully\r\n   */\r\n  function transfer(address to, uint256 value) public returns (bool) {\r\n    transferInternal(msg.sender, to, value);\r\n    Transfer(msg.sender, to, value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev total number of tokens in existence\r\n   * @return A uint256 specifying the total number of tokens in existence\r\n   */\r\n  function totalSupply() public view returns (uint256 tokenCount) {\r\n    tokenCount = balanceAtBlock(tokensTotal, block.number);\r\n  }\r\n\r\n  /**\r\n   * @dev total number of tokens in existence at the given block\r\n   * @param blockNumber The block number we want to query for the total supply\r\n   * @return A uint256 specifying the total number of tokens at a given block\r\n   */\r\n  function totalSupplyAt(uint256 blockNumber) public view returns (uint256 tokenCount) {\r\n    tokenCount = balanceAtBlock(tokensTotal, blockNumber);\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the balance of the specified address.\r\n   * @param owner The address to query the the balance of.\r\n   * @return An uint256 representing the amount owned by the passed address.\r\n   */\r\n  function balanceOf(address owner) public view returns (uint256 balance) {\r\n    balance = balanceAtBlock(tokenBalances[owner], block.number);\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the balance of the specified address.\r\n   * @param owner The address to query the the balance of.\r\n   * @param blockNumber The block number we want to query for the balance.\r\n   * @return An uint256 representing the amount owned by the passed address.\r\n   */\r\n  function balanceAt(address owner, uint256 blockNumber) public view returns (uint256 balance) {\r\n    balance = balanceAtBlock(tokenBalances[owner], blockNumber);\r\n  }\r\n\r\n  /**\r\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param spender The address which will spend the funds.\r\n   * @param addedValue The amount of tokens to increase the allowance by.\r\n   */\r\n  function increaseApproval(address spender, uint addedValue) public returns (bool) {\r\n    allowed[msg.sender][spender] = allowed[msg.sender][spender].add(addedValue);\r\n    Approval(msg.sender, spender, allowed[msg.sender][spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\r\n   *\r\n   * approve should be called when allowed[spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param spender The address which will spend the funds.\r\n   * @param subtractedValue The amount of tokens to decrease the allowance by.\r\n   */\r\n  function decreaseApproval(address spender, uint subtractedValue) public returns (bool) {\r\n    uint oldValue = allowed[msg.sender][spender];\r\n    if (subtractedValue \u003E oldValue) {\r\n      allowed[msg.sender][spender] = 0;\r\n    } else {\r\n      allowed[msg.sender][spender] = oldValue.sub(subtractedValue);\r\n    }\r\n    Approval(msg.sender, spender, allowed[msg.sender][spender]);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Addition to StandardToken methods. Increase the amount of tokens that\r\n   * an owner allowed to a spender and execute a call with the sent data.\r\n   *\r\n   * This is originally from OpenZeppelin.\r\n   *\r\n   * approve should be called when allowed[spender] == 0. To increment\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param spender The address which will spend the funds.\r\n   * @param addedValue The amount of tokens to increase the allowance by.\r\n   * @param data ABI-encoded contract call to call \u0060spender\u0060 address.\r\n   */\r\n  function increaseApproval(address spender, uint addedValue, bytes data) public returns (bool) {\r\n    require(spender != address(this));\r\n\r\n    increaseApproval(spender, addedValue);\r\n\r\n    require(spender.call(data));\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Addition to StandardToken methods. Decrease the amount of tokens that\r\n   * an owner allowed to a spender and execute a call with the sent data.\r\n   *\r\n   * This is originally from OpenZeppelin.\r\n   *\r\n   * approve should be called when allowed[spender] == 0. To decrement\r\n   * allowed value is better to use this function to avoid 2 calls (and wait until\r\n   * the first transaction is mined)\r\n   * From MonolithDAO Token.sol\r\n   * @param spender The address which will spend the funds.\r\n   * @param subtractedValue The amount of tokens to decrease the allowance by.\r\n   * @param data ABI-encoded contract call to call \u0060spender\u0060 address.\r\n   */\r\n  function decreaseApproval(address spender, uint subtractedValue, bytes data) public returns (bool) {\r\n    require(spender != address(this));\r\n\r\n    decreaseApproval(spender, subtractedValue);\r\n\r\n    require(spender.call(data));\r\n\r\n    return true;\r\n  }\r\n\r\n  /** INTERNALS\r\n   ****************************************/\r\n\r\n  function balanceAtBlock(Checkpoint[] storage checkpoints, uint256 blockNumber) internal returns (uint256 balance) {\r\n    uint256 currentBlockNumber;\r\n    (currentBlockNumber, balance) = getCheckpoint(checkpoints, blockNumber);\r\n  }\r\n\r\n  function transferInternal(address from, address to, uint256 value) internal {\r\n    uint256 fromBalance = balanceOf(from);\r\n    uint256 toBalance = balanceOf(to);\r\n\r\n    if (address(transactionVerifier) != address(0)) {\r\n      value = transactionVerifier.verify(from, to, value);\r\n      require(value \u003E 0);\r\n    }\r\n\r\n    setCheckpoint(tokenBalances[from], fromBalance.sub(value));\r\n    setCheckpoint(tokenBalances[to], toBalance.add(value));\r\n  }\r\n\r\n\r\n  /** CORE\r\n   ** The Magic happens below:\r\n   ***************************************/\r\n\r\n  function setCheckpoint(Checkpoint[] storage checkpoints, uint256 newValue) internal {\r\n    if ((checkpoints.length == 0) || (checkpoints[checkpoints.length.sub(1)].blockNumber \u003C block.number)) {\r\n      checkpoints.push(Checkpoint(block.number, newValue));\r\n    } else {\r\n       checkpoints[checkpoints.length.sub(1)] = Checkpoint(block.number, newValue);\r\n    }\r\n  }\r\n\r\n  function getCheckpoint(Checkpoint[] storage checkpoints, uint256 blockNumber) internal returns (uint256 blockNumber_, uint256 value) {\r\n    if (checkpoints.length == 0) {\r\n      return (0, 0);\r\n    }\r\n\r\n    // Shortcut for the actual value\r\n    if (blockNumber \u003E= checkpoints[checkpoints.length.sub(1)].blockNumber) {\r\n      return (checkpoints[checkpoints.length.sub(1)].blockNumber, checkpoints[checkpoints.length.sub(1)].value);\r\n    }\r\n\r\n    if (blockNumber \u003C checkpoints[0].blockNumber) {\r\n      return (0, 0);\r\n    }\r\n\r\n    // Binary search of the value in the array\r\n    uint256 min = 0;\r\n    uint256 max = checkpoints.length.sub(1);\r\n    while (max \u003E min) {\r\n      uint256 mid = (max.add(min.add(1))).div(2);\r\n      if (checkpoints[mid].blockNumber \u003C= blockNumber) {\r\n        min = mid;\r\n      } else {\r\n        max = mid.sub(1);\r\n      }\r\n    }\r\n\r\n    return (checkpoints[min].blockNumber, checkpoints[min].value);\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n/* Largely copied from https://github.com/OpenZeppelin/openzeppelin-solidity/pull/741/files */\r\n\r\ncontract ERC865 is CheckpointToken {\r\n  /** @dev This is used to prevent nonce reuse: */\r\n  mapping(bytes =\u003E bool) signatures;\r\n\r\n  event TransferPreSigned(address indexed from, address indexed to, address indexed delegate, uint256 amount, uint256 fee);\r\n  event Debug(address from, bytes32 hash);\r\n\r\n  /**\r\n    * @notice Submit a presigned transfer\r\n    * @param _signature bytes The signature, issued by the owner.\r\n    * @param _to address The address which you want to transfer to.\r\n    * @param _value uint256 The amount of tokens to be transferred.\r\n    * @param _fee uint256 The amount of tokens paid to msg.sender, by the person who used to own the tokens.\r\n    * @param _nonce uint256 Presigned transaction number\r\n    */\r\n  function transferPreSigned(\r\n    bytes _signature,\r\n    address _to,\r\n    uint256 _value,\r\n    uint256 _fee,\r\n    uint256 _nonce\r\n  )\r\n    public\r\n    returns (bool)\r\n  {\r\n    require(_to != address(0));\r\n    require(signatures[_signature] == false);\r\n    bytes32 hashedTx = transferPreSignedHashing(address(this), _to, _value, _fee, _nonce);\r\n    address from = recover(hashedTx, _signature);\r\n    require(from != address(0));\r\n\r\n    transferInternal(from, _to, _value);\r\n    transferInternal(from, msg.sender, _fee);\r\n\r\n    signatures[_signature] = true;\r\n    TransferPreSigned(from, _to, msg.sender, _value, _fee);\r\n    Transfer(from, _to, _value);\r\n    Transfer(from, msg.sender, _fee);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n    * @notice Hash (keccak256) of the payload used by transferPreSigned\r\n    * @param _token address The address of the token.\r\n    * @param _to address The address which you want to transfer to.\r\n    * @param _value uint256 The amount of tokens to be transferred.\r\n    * @param _fee uint256 The amount of tokens paid to msg.sender, by the owner.\r\n    * @param _nonce uint256 Presigned transaction number.\r\n    */\r\n  function transferPreSignedHashing(\r\n    address _token,\r\n    address _to,\r\n    uint256 _value,\r\n    uint256 _fee,\r\n    uint256 _nonce\r\n  )\r\n    public\r\n    pure\r\n    returns (bytes32)\r\n  {\r\n    /* \u002248664c16\u0022: transferPreSignedHashing(address,address,address,uint256,uint256,uint256) */\r\n    return keccak256(bytes4(0x48664c16), _token, _to, _value, _fee, _nonce);\r\n  }\r\n\r\n  /**\r\n    * @notice Recover signer address from a message by using his signature.\r\n    *         Signature is delivered as a byte array, hence need for this\r\n    *         implementation.\r\n    * @param hash bytes32 message, the hash is the signed message. What is recovered is the signer address.\r\n    * @param sig bytes signature, the signature is generated using web3.eth.sign()\r\n    */\r\n  function recover(bytes32 hash, bytes sig) public pure returns (address) {\r\n    bytes32 r;\r\n    bytes32 s;\r\n    uint8 v;\r\n\r\n    /* Check the signature length */\r\n    if (sig.length != 65) {\r\n      return (address(0));\r\n    }\r\n\r\n    /* Divide the signature in r, s and v variables */\r\n    assembly {\r\n      r := mload(add(sig, 32))\r\n      s := mload(add(sig, 64))\r\n      v := byte(0, mload(add(sig, 96)))\r\n    }\r\n\r\n    /* Version of signature should be 27 or 28, but 0 and 1 are also possible versions */\r\n    if (v \u003C 27) {\r\n      v \u002B= 27;\r\n    }\r\n\r\n    /* If the version is correct return the signer address */\r\n    if (v != 27 \u0026\u0026 v != 28) {\r\n      return (address(0));\r\n    } else {\r\n      return ecrecover(hash, v, r, s);\r\n    }\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @dev Interface for general announcements about the security.\r\n *\r\n * Announcements can be for instance for dividend sharing, voting, or\r\n * just for general announcements.\r\n */\r\n\r\ninterface Announcement {\r\n  function announcementName() public view returns (bytes32);\r\n  function announcementURI() public view returns (bytes32);\r\n  function announcementType() public view returns (uint256);\r\n  function announcementHash() public view returns (uint256);\r\n}\r\n\r\n\r\n/**\r\n * This smart contract code is Copyright 2017 TokenMarket Ltd. For more information see https://tokenmarket.net\r\n *\r\n * Licensed under the Apache License, version 2.0: https://github.com/TokenMarketNet/ico/blob/master/LICENSE.txt\r\n */\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \u0022user permissions\u0022.\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original \u0060owner\u0060 of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\ncontract Recoverable is Ownable {\r\n\r\n  /// @dev Empty constructor (for now)\r\n  function Recoverable() {\r\n  }\r\n\r\n  /// @dev This will be invoked by the owner, when owner wants to rescue tokens\r\n  /// @param token Token which will we rescue to the owner from the contract\r\n  function recoverTokens(ERC20Basic token) onlyOwner public {\r\n    token.transfer(owner, tokensToBeReturned(token));\r\n  }\r\n\r\n  /// @dev Interface function, can be overwritten by the superclass\r\n  /// @param token Token which balance we will check and return\r\n  /// @return The amount of tokens (in smallest denominator) the contract owns\r\n  function tokensToBeReturned(ERC20Basic token) public returns (uint) {\r\n    return token.balanceOf(this);\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Roles\r\n * @author Francisco Giordano (@frangio)\r\n * @dev Library for managing addresses assigned to a Role.\r\n *      See RBAC.sol for example usage.\r\n */\r\nlibrary Roles {\r\n  struct Role {\r\n    mapping (address =\u003E bool) bearer;\r\n  }\r\n\r\n  /**\r\n   * @dev give an address access to this role\r\n   */\r\n  function add(Role storage role, address addr)\r\n    internal\r\n  {\r\n    role.bearer[addr] = true;\r\n  }\r\n\r\n  /**\r\n   * @dev remove an address\u0027 access to this role\r\n   */\r\n  function remove(Role storage role, address addr)\r\n    internal\r\n  {\r\n    role.bearer[addr] = false;\r\n  }\r\n\r\n  /**\r\n   * @dev check if an address has this role\r\n   * // reverts\r\n   */\r\n  function check(Role storage role, address addr)\r\n    view\r\n    internal\r\n  {\r\n    require(has(role, addr));\r\n  }\r\n\r\n  /**\r\n   * @dev check if an address has this role\r\n   * @return bool\r\n   */\r\n  function has(Role storage role, address addr)\r\n    view\r\n    internal\r\n    returns (bool)\r\n  {\r\n    return role.bearer[addr];\r\n  }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title RBAC (Role-Based Access Control)\r\n * @author Matt Condon (@Shrugs)\r\n * @dev Stores and provides setters and getters for roles and addresses.\r\n *      Supports unlimited numbers of roles and addresses.\r\n *      See //contracts/mocks/RBACMock.sol for an example of usage.\r\n * This RBAC method uses strings to key roles. It may be beneficial\r\n *  for you to write your own implementation of this interface using Enums or similar.\r\n * It\u0027s also recommended that you define constants in the contract, like ROLE_ADMIN below,\r\n *  to avoid typos.\r\n */\r\ncontract RBAC {\r\n  using Roles for Roles.Role;\r\n\r\n  mapping (string =\u003E Roles.Role) private roles;\r\n\r\n  event RoleAdded(address addr, string roleName);\r\n  event RoleRemoved(address addr, string roleName);\r\n\r\n  /**\r\n   * A constant role name for indicating admins.\r\n   */\r\n  string public constant ROLE_ADMIN = \u0022admin\u0022;\r\n\r\n  /**\r\n   * @dev constructor. Sets msg.sender as admin by default\r\n   */\r\n  function RBAC()\r\n    public\r\n  {\r\n    addRole(msg.sender, ROLE_ADMIN);\r\n  }\r\n\r\n  /**\r\n   * @dev reverts if addr does not have role\r\n   * @param addr address\r\n   * @param roleName the name of the role\r\n   * // reverts\r\n   */\r\n  function checkRole(address addr, string roleName)\r\n    view\r\n    public\r\n  {\r\n    roles[roleName].check(addr);\r\n  }\r\n\r\n  /**\r\n   * @dev determine if addr has role\r\n   * @param addr address\r\n   * @param roleName the name of the role\r\n   * @return bool\r\n   */\r\n  function hasRole(address addr, string roleName)\r\n    view\r\n    public\r\n    returns (bool)\r\n  {\r\n    return roles[roleName].has(addr);\r\n  }\r\n\r\n  /**\r\n   * @dev add a role to an address\r\n   * @param addr address\r\n   * @param roleName the name of the role\r\n   */\r\n  function adminAddRole(address addr, string roleName)\r\n    onlyAdmin\r\n    public\r\n  {\r\n    addRole(addr, roleName);\r\n  }\r\n\r\n  /**\r\n   * @dev remove a role from an address\r\n   * @param addr address\r\n   * @param roleName the name of the role\r\n   */\r\n  function adminRemoveRole(address addr, string roleName)\r\n    onlyAdmin\r\n    public\r\n  {\r\n    removeRole(addr, roleName);\r\n  }\r\n\r\n  /**\r\n   * @dev add a role to an address\r\n   * @param addr address\r\n   * @param roleName the name of the role\r\n   */\r\n  function addRole(address addr, string roleName)\r\n    internal\r\n  {\r\n    roles[roleName].add(addr);\r\n    RoleAdded(addr, roleName);\r\n  }\r\n\r\n  /**\r\n   * @dev remove a role from an address\r\n   * @param addr address\r\n   * @param roleName the name of the role\r\n   */\r\n  function removeRole(address addr, string roleName)\r\n    internal\r\n  {\r\n    roles[roleName].remove(addr);\r\n    RoleRemoved(addr, roleName);\r\n  }\r\n\r\n  /**\r\n   * @dev modifier to scope access to a single role (uses msg.sender as addr)\r\n   * @param roleName the name of the role\r\n   * // reverts\r\n   */\r\n  modifier onlyRole(string roleName)\r\n  {\r\n    checkRole(msg.sender, roleName);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev modifier to scope access to admins\r\n   * // reverts\r\n   */\r\n  modifier onlyAdmin()\r\n  {\r\n    checkRole(msg.sender, ROLE_ADMIN);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev modifier to scope access to a set of roles (uses msg.sender as addr)\r\n   * @param roleNames the names of the roles to scope access to\r\n   * // reverts\r\n   *\r\n   * @TODO - when solidity supports dynamic arrays as arguments to modifiers, provide this\r\n   *  see: https://github.com/ethereum/solidity/issues/2467\r\n   */\r\n  // modifier onlyRoles(string[] roleNames) {\r\n  //     bool hasAnyRole = false;\r\n  //     for (uint8 i = 0; i \u003C roleNames.length; i\u002B\u002B) {\r\n  //         if (hasRole(msg.sender, roleNames[i])) {\r\n  //             hasAnyRole = true;\r\n  //             break;\r\n  //         }\r\n  //     }\r\n\r\n  //     require(hasAnyRole);\r\n\r\n  //     _;\r\n  // }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @author TokenMarket /  Ville Sundell \u003Cville at tokenmarket.net\u003E\r\n */\r\ncontract SecurityToken is CheckpointToken, RBAC, Recoverable, ERC865 {\r\n  using SafeMath for uint256; // We use only uint256 for safety reasons (no boxing)\r\n\r\n  string public constant ROLE_ANNOUNCE = \u0022announce()\u0022;\r\n  string public constant ROLE_FORCE = \u0022forceTransfer()\u0022;\r\n  string public constant ROLE_ISSUE = \u0022issueTokens()\u0022;\r\n  string public constant ROLE_BURN = \u0022burnTokens()\u0022;\r\n  string public constant ROLE_INFO = \u0022setTokenInformation()\u0022;\r\n  string public constant ROLE_SETVERIFIER = \u0022setTransactionVerifier()\u0022;\r\n\r\n  /// @dev Version string telling the token is TM-01, and its version:\r\n  string public version = \u0027TM-01 0.1\u0027;\r\n\r\n  /// @dev URL where you can get more information about the security\r\n  ///      (for example company website or investor interface):\r\n  string public url;\r\n\r\n  /** SecurityToken specific events **/\r\n  /// @dev This is emitted when new tokens are created:\r\n  event Issued(address indexed to, uint256 value);\r\n  /// @dev This is emitted when tokens are burned from token\u0027s own stash:\r\n  event Burned(address indexed burner, uint256 value);\r\n  /// @dev This is emitted upon forceful transfer of tokens by the Board:\r\n  event Forced(address indexed from, address indexed to, uint256 value);\r\n  /// @dev This is emitted when new announcements (like dividends, voting, etc.) are issued by the Board:\r\n  event Announced(address indexed announcement, uint256 indexed announcementType, bytes32 indexed announcementName, bytes32 announcementURI, uint256 announcementHash);\r\n  /// @dev This is emitted when token information is changed:\r\n  event UpdatedTokenInformation(string newName, string newSymbol, string newUrl);\r\n  /// @dev This is emitted when transaction verifier (the contract which would check KYC, etc.):\r\n  event UpdatedTransactionVerifier(address newVerifier);\r\n\r\n  /// @dev Address list of Announcements (see \u0022interface Announcement\u0022).\r\n  ///      Announcements are things like votings, dividends, or any kind of\r\n  ///      smart contract:\r\n  address[] public announcements;\r\n  /// @dev For performance reasons, we also maintain address based mapping of\r\n  ///      Announcements:\r\n  mapping(address =\u003E uint256) public announcementsByAddress;\r\n\r\n  /**\r\n   * @dev Contructor to create SecurityToken, and subsequent CheckpointToken.\r\n   *\r\n   * CheckpointToken will be created with hardcoded 18 decimals.\r\n   *\r\n   * @param _name Initial name of the token\r\n   * @param _symbol Initial symbol of the token\r\n   */\r\n  function SecurityToken(string _name, string _symbol, string _url) CheckpointToken(_name, _symbol, 18) public {\r\n    url = _url;\r\n\r\n    addRole(msg.sender, ROLE_ANNOUNCE);\r\n    addRole(msg.sender, ROLE_FORCE);\r\n    addRole(msg.sender, ROLE_ISSUE);\r\n    addRole(msg.sender, ROLE_BURN);\r\n    addRole(msg.sender, ROLE_INFO);\r\n    addRole(msg.sender, ROLE_SETVERIFIER);\r\n  }\r\n\r\n  /**\r\n   * @dev Function to announce Announcements.\r\n   *\r\n   * Announcements can be for instance for dividend sharing, voting, or\r\n   * just for general announcements.\r\n   *\r\n   * Instead of storing the announcement details, we just broadcast them as an\r\n   * event, and store only the address.\r\n   *\r\n   * @param announcement Address of the Announcement\r\n   */\r\n  function announce(Announcement announcement) external onlyRole(ROLE_ANNOUNCE) {\r\n    announcements.push(announcement);\r\n    announcementsByAddress[address(announcement)] = announcements.length;\r\n    Announced(address(announcement), announcement.announcementType(), announcement.announcementName(), announcement.announcementURI(), announcement.announcementHash());\r\n  }\r\n\r\n  /**\r\n   * @dev Function to forcefully transfer tokens from A to B by board decission\r\n   *\r\n   * This must be implemented carefully, since this is a very critical part\r\n   * to ensure investor safety.\r\n   *\r\n   * This is intended to be called by the BAC (The Board).\r\n   * The BAC must have the RBAC role ROLE_FORCE.\r\n   *\r\n   * @param from Address of the account to confisticate the tokens from\r\n   * @param to Address to deposit the confisticated token to\r\n   * @param value amount of tokens to be confisticated\r\n   */\r\n  function forceTransfer(address from, address to, uint256 value) external onlyRole(ROLE_FORCE) {\r\n    transferInternal(from, to, value);\r\n\r\n    Forced(from, to, value);\r\n  }\r\n\r\n  /**\r\n   * @dev Issue new tokens to the board by a board decission\r\n   *\r\n   * Issue new tokens. This is intended to be called by the BAC (The Board).\r\n   * The BAC must have the RBAC role ROLE_ISSUE.\r\n   *\r\n   * @param value Token amount to issue\r\n   */\r\n  function issueTokens(uint256 value) external onlyRole(ROLE_ISSUE) {\r\n    address issuer = msg.sender;\r\n    uint256 blackHoleBalance = balanceOf(address(0));\r\n    uint256 totalSupplyNow = totalSupply();\r\n\r\n    setCheckpoint(tokenBalances[address(0)], blackHoleBalance.add(value));\r\n    transferInternal(address(0), issuer, value);\r\n    setCheckpoint(tokensTotal, totalSupplyNow.add(value));\r\n\r\n    Issued(issuer, value);\r\n  }\r\n\r\n  /**\r\n   * @dev Burn tokens from contract\u0027s own balance by a board decission\r\n   *\r\n   * Burn tokens from contract\u0027s own balance to prevent accidental burnings.\r\n   * This is intended to be called by the BAC (The Board).\r\n   * The BAC must have the RBAC role ROLE_BURN.\r\n   *\r\n   * @param value Token amount to burn from this contract\u0027s balance\r\n   */\r\n  function burnTokens(uint256 value) external onlyRole(ROLE_BURN) {\r\n    address burner = address(this);\r\n    uint256 burnerBalance = balanceOf(burner);\r\n    uint256 totalSupplyNow = totalSupply();\r\n\r\n    transferInternal(burner, address(0), value);\r\n    setCheckpoint(tokenBalances[address(0)], burnerBalance.sub(value));\r\n    setCheckpoint(tokensTotal, totalSupplyNow.sub(value));\r\n\r\n    Burned(burner, value);\r\n  }\r\n\r\n  /**\r\n   * @dev Permissioned users (The Board, BAC) can update token information here.\r\n   *\r\n   * It is often useful to conceal the actual token association, until\r\n   * the token operations, like central issuance or reissuance have been completed.\r\n   *\r\n   * This function allows the token owner to rename the token after the operations\r\n   * have been completed and then point the audience to use the token contract.\r\n   *\r\n   * The BAC must have the RBAC role ROLE_INFO.\r\n   *\r\n   * @param _name New name of the token\r\n   * @param _symbol New symbol of the token\r\n   * @param _url New URL of the token\r\n   */\r\n  function setTokenInformation(string _name, string _symbol, string _url) external onlyRole(ROLE_INFO) {\r\n    name = _name;\r\n    symbol = _symbol;\r\n    url = _url;\r\n\r\n    UpdatedTokenInformation(name, symbol, url);\r\n  }\r\n\r\n  /**\r\n   * @dev Set transaction verifier\r\n   *\r\n   * This sets a SecurityTransferAgent to be used as a transaction verifier for\r\n   * each transfer. This is implemented for possible regulatory requirements.\r\n   *\r\n   * @param newVerifier Address of the SecurityTransferAgent used as verifier\r\n   */\r\n  function setTransactionVerifier(SecurityTransferAgent newVerifier) external onlyRole(ROLE_SETVERIFIER) {\r\n    transactionVerifier = newVerifier;\r\n\r\n    UpdatedTransactionVerifier(newVerifier);\r\n  }\r\n}","ABI":"[{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022name\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022spender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022approve\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022addr\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022roleName\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022name\u0022:\u0022checkRole\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_signature\u0022,\u0022type\u0022:\u0022bytes\u0022},{\u0022name\u0022:\u0022_to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_value\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_fee\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_nonce\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022transferPreSigned\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_token\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_value\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_fee\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_nonce\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022transferPreSignedHashing\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022pure\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022token\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022recoverTokens\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022spender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022addedValue\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022data\u0022,\u0022type\u0022:\u0022bytes\u0022}],\u0022name\u0022:\u0022increaseApproval\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022totalSupply\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022tokenCount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022announcement\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022announce\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022hash\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022name\u0022:\u0022sig\u0022,\u0022type\u0022:\u0022bytes\u0022}],\u0022name\u0022:\u0022recover\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022pure\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022announcements\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022addr\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022roleName\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022name\u0022:\u0022hasRole\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022ROLE_ISSUE\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022from\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022transferFrom\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022decimals\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022from\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022forceTransfer\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022owner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022blockNumber\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022balanceAt\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022balance\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022announcementsByAddress\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022receiver\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022data\u0022,\u0022type\u0022:\u0022bytes\u0022}],\u0022name\u0022:\u0022transferAndCall\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022success\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022tokenBalances\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022blockNumber\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022ROLE_INFO\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022tokensTotal\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022blockNumber\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022version\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022url\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022allowed\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_name\u0022,\u0022type\u0022:\u0022string\u0022},{\u0022name\u0022:\u0022_symbol\u0022,\u0022type\u0022:\u0022string\u0022},{\u0022name\u0022:\u0022_url\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022name\u0022:\u0022setTokenInformation\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022spender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022subtractedValue\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022decreaseApproval\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022burnTokens\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022owner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022balanceOf\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022balance\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022spender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022subtractedValue\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022data\u0022,\u0022type\u0022:\u0022bytes\u0022}],\u0022name\u0022:\u0022decreaseApproval\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022addr\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022roleName\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022name\u0022:\u0022adminRemoveRole\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022owner\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022ROLE_FORCE\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022symbol\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022blockNumber\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022totalSupplyAt\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022tokenCount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022ROLE_SETVERIFIER\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022transactionVerifier\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022issueTokens\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022transfer\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022addr\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022roleName\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022name\u0022:\u0022adminAddRole\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022ROLE_BURN\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022token\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022tokensToBeReturned\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022ROLE_ADMIN\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022spender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022addedValue\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022increaseApproval\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022owner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022spender\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022allowance\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022newVerifier\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022setTransactionVerifier\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022transferOwnership\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022ROLE_ANNOUNCE\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[{\u0022name\u0022:\u0022_name\u0022,\u0022type\u0022:\u0022string\u0022},{\u0022name\u0022:\u0022_symbol\u0022,\u0022type\u0022:\u0022string\u0022},{\u0022name\u0022:\u0022_url\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022constructor\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022Issued\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022burner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022Burned\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022from\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022Forced\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022announcement\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022announcementType\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022announcementName\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022announcementURI\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022announcementHash\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022Announced\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022newName\u0022,\u0022type\u0022:\u0022string\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022newSymbol\u0022,\u0022type\u0022:\u0022string\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022newUrl\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022name\u0022:\u0022UpdatedTokenInformation\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022newVerifier\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022UpdatedTransactionVerifier\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022from\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022delegate\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022fee\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022TransferPreSigned\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022from\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022hash\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022Debug\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022previousOwner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022OwnershipTransferred\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022addr\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022roleName\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022name\u0022:\u0022RoleAdded\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022addr\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022roleName\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022name\u0022:\u0022RoleRemoved\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022from\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022receiver\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022data\u0022,\u0022type\u0022:\u0022bytes\u0022}],\u0022name\u0022:\u0022ERC677Transfer\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022owner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022spender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022Approval\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022from\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022Transfer\u0022,\u0022type\u0022:\u0022event\u0022}]","ContractName":"SecurityToken","CompilerVersion":"v0.4.24\u002Bcommit.e67f0147","OptimizationUsed":"1","Runs":"500","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000019546f6b656e4d61726b6574204c74642e204120736861726573000000000000000000000000000000000000000000000000000000000000000000000000000002544d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001868747470733a2f2f746f6b656e6d61726b65742e6e65742f0000000000000000","Library":"","SwarmSource":"bzzr://1579eee8a75ce55eaa347a2e7d8a1928a66a6fdb5efeaf3e2387a94ff481d1b8"}]