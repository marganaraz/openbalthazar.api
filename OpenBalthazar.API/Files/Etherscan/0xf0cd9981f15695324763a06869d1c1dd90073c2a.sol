[{"SourceCode":"// Copyright (C) 2019, 2020 dipeshsukhani, nodarjonashi, suhailg\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 2 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// Visit \u003Chttps://www.gnu.org/licenses/\u003Efor a copy of the GNU Affero General Public License\r\n\r\n\r\n// File: localhost/defizap/node_modules/@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\r\n\r\n///@author DeFiZap\r\n///@notice this contract implements one click conversion from ERC20 to UniPoolZap\r\n\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by \u0060account\u0060.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves \u0060amount\u0060 tokens from the caller\u0027s account to \u0060recipient\u0060.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that \u0060spender\u0060 will be\r\n     * allowed to spend on behalf of \u0060owner\u0060 through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets \u0060amount\u0060 as the allowance of \u0060spender\u0060 over the caller\u0027s tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves \u0060amount\u0060 tokens from \u0060sender\u0060 to \u0060recipient\u0060 using the\r\n     * allowance mechanism. \u0060amount\u0060 is then deducted from the caller\u0027s\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when \u0060value\u0060 tokens are moved from one account (\u0060from\u0060) to\r\n     * another (\u0060to\u0060).\r\n     *\r\n     * Note that \u0060value\u0060 may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a \u0060spender\u0060 for an \u0060owner\u0060 is set by\r\n     * a call to {approve}. \u0060value\u0060 is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: localhost/defizap/node_modules/@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity\u0027s arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * \u0060SafeMath\u0060 restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it\u0027s recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060\u002B\u0060 operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a \u002B b;\r\n        require(c \u003E= a, \u0022SafeMath: addition overflow\u0022);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060-\u0060 operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \u0022SafeMath: subtraction overflow\u0022);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060-\u0060 operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b \u003C= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060*\u0060 operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\r\n        // benefit is lost if \u0027b\u0027 is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \u0022SafeMath: multiplication overflow\u0022);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060/\u0060 operator. Note: this function uses a\r\n     * \u0060revert\u0060 opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \u0022SafeMath: division by zero\u0022);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060/\u0060 operator. Note: this function uses a\r\n     * \u0060revert\u0060 opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b \u003E 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c \u002B a % b); // There is no case in which this doesn\u0027t hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060%\u0060 operator. This function uses a \u0060revert\u0060\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \u0022SafeMath: modulo by zero\u0022);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060%\u0060 operator. This function uses a \u0060revert\u0060\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: localhost/defizap/node_modules/@openzeppelin/upgrades/contracts/Initializable.sol\r\n\r\npragma solidity \u003E=0.4.24 \u003C0.7.0;\r\n\r\n\r\n/**\r\n * @title Initializable\r\n *\r\n * @dev Helper contract to support initializer functions. To use it, replace\r\n * the constructor with a function that has the \u0060initializer\u0060 modifier.\r\n * WARNING: Unlike constructors, initializer functions must be manually\r\n * invoked. This applies both to deploying an Initializable contract, as well\r\n * as extending an Initializable contract via inheritance.\r\n * WARNING: When used with inheritance, manual care must be taken to not invoke\r\n * a parent initializer twice, or ensure that all initializers are idempotent,\r\n * because this is not dealt with automatically as with constructors.\r\n */\r\ncontract Initializable {\r\n\r\n  /**\r\n   * @dev Indicates that the contract has been initialized.\r\n   */\r\n  bool private initialized;\r\n\r\n  /**\r\n   * @dev Indicates that the contract is in the process of being initialized.\r\n   */\r\n  bool private initializing;\r\n\r\n  /**\r\n   * @dev Modifier to use in the initializer function of a contract.\r\n   */\r\n  modifier initializer() {\r\n    require(initializing || isConstructor() || !initialized, \u0022Contract instance has already been initialized\u0022);\r\n\r\n    bool isTopLevelCall = !initializing;\r\n    if (isTopLevelCall) {\r\n      initializing = true;\r\n      initialized = true;\r\n    }\r\n\r\n    _;\r\n\r\n    if (isTopLevelCall) {\r\n      initializing = false;\r\n    }\r\n  }\r\n\r\n  /// @dev Returns true if and only if the function is running in the constructor\r\n  function isConstructor() private view returns (bool) {\r\n    // extcodesize checks the size of the code stored in an address, and\r\n    // address returns the current address. Since the code is still not\r\n    // deployed when running a constructor, any checks on its code size will\r\n    // yield zero, making it an effective way to detect if a contract is\r\n    // under construction or not.\r\n    address self = address(this);\r\n    uint256 cs;\r\n    assembly { cs := extcodesize(self) }\r\n    return cs == 0;\r\n  }\r\n\r\n  // Reserved storage space to allow for layout changes in the future.\r\n  uint256[50] private ______gap;\r\n}\r\n\r\n\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n// interface\r\ninterface IuniswapFactory_ERC20toUniPoolZapV1 {\r\n    function getExchange(address token)\r\n        external\r\n        view\r\n        returns (address exchange);\r\n}\r\n\r\ninterface IuniswapExchange_ERC20toUniPoolZapV1 {\r\n    function getEthToTokenInputPrice(uint256 eth_sold)\r\n        external\r\n        view\r\n        returns (uint256 tokens_bought);\r\n    function ethToTokenSwapInput(uint256 min_tokens, uint256 deadline)\r\n        external\r\n        payable\r\n        returns (uint256 tokens_bought);\r\n    function balanceOf(address _owner) external view returns (uint256);\r\n    function transfer(address _to, uint256 _value) external returns (bool);\r\n    function tokenToEthSwapInput(\r\n        uint256 tokens_sold,\r\n        uint256 min_eth,\r\n        uint256 deadline\r\n    ) external returns (uint256 eth_bought);\r\n    function tokenToEthTransferInput(\r\n        uint256 tokens_sold,\r\n        uint256 min_eth,\r\n        uint256 deadline,\r\n        address recipient\r\n    ) external returns (uint256 eth_bought);\r\n    function tokenToTokenSwapInput(\r\n        uint256 tokens_sold,\r\n        uint256 min_tokens_bought,\r\n        uint256 min_eth_bought,\r\n        uint256 deadline,\r\n        address token_addr\r\n    ) external returns (uint256 tokens_bought);\r\n    function addLiquidity(\r\n        uint256 min_liquidity,\r\n        uint256 max_tokens,\r\n        uint256 deadline\r\n    ) external payable returns (uint256);\r\n\r\n}\r\n\r\ncontract Ownable {\r\n    address payable public owner = 0x19627796b318E27C333530aD67c464Cfc37596ec;\r\n\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \u0022you are not authorised to call this function\u0022);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return true if \u0060msg.sender\u0060 is the owner of the contract.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (\u0060newOwner\u0060).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address payable newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (\u0060newOwner\u0060).\r\n     */\r\n    function _transferOwnership(address payable newOwner) internal {\r\n        require(\r\n            newOwner != address(0),\r\n            \u0022Ownable: new owner is the zero address\u0022\r\n        );\r\n        owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\ncontract ERC20toUniPoolZapV1_General is Initializable, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    // state variables\r\n\r\n    // - THESE MUST ALWAYS STAY IN THE SAME LAYOUT\r\n    bool private stopped = false;\r\n\r\n    IuniswapFactory_ERC20toUniPoolZapV1 public UniSwapFactoryAddress = IuniswapFactory_ERC20toUniPoolZapV1(\r\n        0xc0a47dFe034B400B47bDaD5FecDa2621de6c4d95\r\n    );\r\n\r\n    mapping(address =\u003E uint256) private userBalance;\r\n\r\n    // events\r\n    event details(\r\n        address indexed user,\r\n        address toWhomIssued,\r\n        address indexed IncomingTokenAddress,\r\n        address indexed UniPoolUnderlyingTokenAddressTokenAddress\r\n    );\r\n    event residualETH(uint256 residualETHtransferred);\r\n\r\n    // circuit breaker modifiers\r\n    modifier stopInEmergency {\r\n        if (stopped) {\r\n            revert(\u0022Temporarily Paused\u0022);\r\n        } else {\r\n            _;\r\n        }\r\n    }\r\n\r\n    constructor() public {}\r\n\r\n    function LetsInvest(\r\n        address _toWhomToIssue,\r\n        address _IncomingTokenContractAddress,\r\n        uint256 _IncomingTokenQty,\r\n        address _UniPoolsUnderlyingTokenAddress\r\n    )\r\n        public\r\n        stopInEmergency\r\n        returns (bool)\r\n    {\r\n        // checkingAllowance\r\n        require(\r\n            IERC20(_IncomingTokenContractAddress).balanceOf(msg.sender) \u003E\r\n                _IncomingTokenQty,\r\n            \u0022Ownership less than requested\u0022\r\n        );\r\n        require(\r\n            IERC20(_IncomingTokenContractAddress).allowance(\r\n                msg.sender,\r\n                address(this)\r\n            ) \u003E\r\n                _IncomingTokenQty,\r\n            \u0022Permission to DeFiZap is less than requested\u0022\r\n        );\r\n        uint256 investmentQTY = _IncomingTokenQty;\r\n        require(\r\n            IERC20(_IncomingTokenContractAddress).transferFrom(\r\n                msg.sender,\r\n                address(this),\r\n                investmentQTY\r\n            ),\r\n            \u0022Error in transferring token:1\u0022\r\n        );\r\n        require(\r\n            (\r\n                invest2UniPool(\r\n                    investmentQTY,\r\n                    _toWhomToIssue,\r\n                    _IncomingTokenContractAddress,\r\n                    _UniPoolsUnderlyingTokenAddress\r\n                )\r\n            ),\r\n            \u0022error in invest2UniPool\u0022\r\n        );\r\n        emit details(\r\n            msg.sender,\r\n            _toWhomToIssue,\r\n            _IncomingTokenContractAddress,\r\n            _UniPoolsUnderlyingTokenAddress\r\n        );\r\n        return (true);\r\n    }\r\n\r\n    function invest2UniPool(\r\n        uint256 _ERC20QTY,\r\n        address _toWhomToIssue,\r\n        address _IncomingTokenContractAddress,\r\n        address _UniPoolsUnderlyingTokenAddress\r\n    ) internal returns (bool) {\r\n        // setting some internal variables\r\n        uint256 EthOnConversion;\r\n        uint256 nonConvertiblePortion;\r\n        IuniswapExchange_ERC20toUniPoolZapV1 UniSwapExchangeContractAddress;\r\n        // computation\r\n        if (_IncomingTokenContractAddress == _UniPoolsUnderlyingTokenAddress) {\r\n            nonConvertiblePortion = SafeMath.div(\r\n                SafeMath.mul(_ERC20QTY, 503),\r\n                1000\r\n            );\r\n            uint256 convertiblePortion = SafeMath.sub(\r\n                _ERC20QTY,\r\n                nonConvertiblePortion\r\n            );\r\n            // finding the uniswap address\r\n            UniSwapExchangeContractAddress = IuniswapExchange_ERC20toUniPoolZapV1(\r\n                UniSwapFactoryAddress.getExchange(_IncomingTokenContractAddress)\r\n            );\r\n            // approving the address\r\n            IERC20(_IncomingTokenContractAddress).approve(\r\n                address(UniSwapExchangeContractAddress),\r\n                _ERC20QTY\r\n            );\r\n            // converting the required portion to ETH\r\n            EthOnConversion = UniSwapExchangeContractAddress\r\n                .tokenToEthSwapInput(\r\n                convertiblePortion,\r\n                1,\r\n                SafeMath.add(now, 1800)\r\n            );\r\n\r\n        } else {\r\n            // convert ERCs\r\n            IuniswapExchange_ERC20toUniPoolZapV1 UniSwapExchangeContractAddress_incomingToken = IuniswapExchange_ERC20toUniPoolZapV1(\r\n                UniSwapFactoryAddress.getExchange(_IncomingTokenContractAddress)\r\n            );\r\n\r\n            require(\r\n                (\r\n                    IERC20(_IncomingTokenContractAddress).approve(\r\n                        address(UniSwapExchangeContractAddress_incomingToken),\r\n                        _ERC20QTY\r\n                    )\r\n                ),\r\n                \u0022error in approval:3\u0022\r\n            );\r\n            uint256 nonConvertiblePortion_beforeConversion = SafeMath.div(\r\n                SafeMath.mul(_ERC20QTY, 503),\r\n                1000\r\n            );\r\n            nonConvertiblePortion = UniSwapExchangeContractAddress_incomingToken\r\n                .tokenToTokenSwapInput(\r\n                nonConvertiblePortion_beforeConversion,\r\n                1,\r\n                1,\r\n                SafeMath.add(now, 1800),\r\n                _UniPoolsUnderlyingTokenAddress\r\n            );\r\n\r\n            uint256 convertiblePortion = SafeMath.sub(\r\n                _ERC20QTY,\r\n                nonConvertiblePortion_beforeConversion\r\n            );\r\n\r\n            EthOnConversion = UniSwapExchangeContractAddress_incomingToken\r\n                .tokenToEthSwapInput(\r\n                convertiblePortion,\r\n                1,\r\n                SafeMath.add(now, 1800)\r\n            );\r\n\r\n            require(\r\n                (\r\n                    IERC20(_IncomingTokenContractAddress).approve(\r\n                        address(UniSwapExchangeContractAddress_incomingToken),\r\n                        0\r\n                    )\r\n                ),\r\n                \u0022error in setting approval back to zero\u0022\r\n            );\r\n            UniSwapExchangeContractAddress = IuniswapExchange_ERC20toUniPoolZapV1(\r\n                UniSwapFactoryAddress.getExchange(\r\n                    _UniPoolsUnderlyingTokenAddress\r\n                )\r\n            );\r\n\r\n        }\r\n        require(\r\n            (\r\n                addLiquidity(\r\n                    _toWhomToIssue,\r\n                    _UniPoolsUnderlyingTokenAddress,\r\n                    nonConvertiblePortion,\r\n                    UniSwapExchangeContractAddress,\r\n                    EthOnConversion\r\n                )\r\n            ),\r\n            \u0022issue in adding Liquidity\u0022\r\n        );\r\n        return (true);\r\n    }\r\n\r\n    function addLiquidity(\r\n        address _toWhomToIssue,\r\n        address _UniPoolsUnderlyingTokenAddress,\r\n        uint256 _UsableERC20,\r\n        IuniswapExchange_ERC20toUniPoolZapV1 _UniSwapExchangeContractAddress,\r\n        uint256 _valueinETH\r\n    ) internal returns (bool) {\r\n        uint256 max_tokens_ans = getMaxTokens(\r\n            address(_UniSwapExchangeContractAddress),\r\n            IERC20(_UniPoolsUnderlyingTokenAddress),\r\n            _valueinETH\r\n        );\r\n\r\n        require(\r\n            (\r\n                IERC20(_UniPoolsUnderlyingTokenAddress).approve(\r\n                    address(_UniSwapExchangeContractAddress),\r\n                    _UsableERC20\r\n                )\r\n            ),\r\n            \u0022error in approving the unicontract, addLiquidity\u0022\r\n        );\r\n        uint256 LiquidityTokens = _UniSwapExchangeContractAddress\r\n            .addLiquidity\r\n            .value(_valueinETH)(1, max_tokens_ans, SafeMath.add(now, 1800));\r\n        require(\r\n            LiquidityTokens ==\r\n                _UniSwapExchangeContractAddress.balanceOf(address(this)),\r\n            \u0022error3:DeFiZap\u0022\r\n        );\r\n        require(\r\n            _UniSwapExchangeContractAddress.transfer(\r\n                _toWhomToIssue,\r\n                LiquidityTokens\r\n            ),\r\n            \u0022error6:DeFiZap\u0022\r\n        );\r\n\r\n        // computing the remainder of the tokens\r\n        uint256 residual = IERC20(_UniPoolsUnderlyingTokenAddress).balanceOf(\r\n            address(this)\r\n        );\r\n        uint256 ETHfromResidual = _UniSwapExchangeContractAddress\r\n            .tokenToEthTransferInput(\r\n            residual,\r\n            1,\r\n            SafeMath.add(now, 1800),\r\n            _toWhomToIssue\r\n        );\r\n        emit residualETH(ETHfromResidual);\r\n        require(\r\n            (\r\n                IERC20(_UniPoolsUnderlyingTokenAddress).approve(\r\n                    address(_UniSwapExchangeContractAddress),\r\n                    0\r\n                )\r\n            ),\r\n            \u0022error in resetting the approval to zero\u0022\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function getMaxTokens(\r\n        address _UniSwapExchangeContractAddress,\r\n        IERC20 _ERC20TokenAddress,\r\n        uint256 _value\r\n    ) internal view returns (uint256) {\r\n        uint256 contractBalance = address(_UniSwapExchangeContractAddress)\r\n            .balance;\r\n        uint256 eth_reserve = SafeMath.sub(contractBalance, _value);\r\n        uint256 token_reserve = _ERC20TokenAddress.balanceOf(\r\n            _UniSwapExchangeContractAddress\r\n        );\r\n        uint256 token_amount = SafeMath.div(\r\n            SafeMath.mul(_value, token_reserve),\r\n            eth_reserve\r\n        ) \u002B\r\n            1;\r\n        return token_amount;\r\n    }\r\n\r\n    function inCaseTokengetsStuck(IERC20 _TokenAddress) public onlyOwner {\r\n        uint256 qty = _TokenAddress.balanceOf(address(this));\r\n        _TokenAddress.transfer(owner, qty);\r\n    }\r\n\r\n    // - to Pause the contract\r\n    function toggleContractActive() public onlyOwner {\r\n        stopped = !stopped;\r\n    }\r\n\r\n    // - to withdraw any ETH balance sitting in the contract\r\n    function withdraw() public onlyOwner {\r\n        owner.transfer(address(this).balance);\r\n    }\r\n\r\n    // - fallback function let you / anyone send ETH to this wallet without the need to call any function\r\n    function() external payable {\r\n    }\r\n}","ABI":"[{\u0022inputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022constructor\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022user\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022toWhomIssued\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022IncomingTokenAddress\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022UniPoolUnderlyingTokenAddressTokenAddress\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022details\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022residualETHtransferred\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022residualETH\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022payable\u0022:true,\u0022stateMutability\u0022:\u0022payable\u0022,\u0022type\u0022:\u0022fallback\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_toWhomToIssue\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_IncomingTokenContractAddress\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_IncomingTokenQty\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_UniPoolsUnderlyingTokenAddress\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022LetsInvest\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022UniSwapFactoryAddress\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022contract IuniswapFactory_ERC20toUniPoolZapV1\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022contract IERC20\u0022,\u0022name\u0022:\u0022_TokenAddress\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022inCaseTokengetsStuck\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022isOwner\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022owner\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022address payable\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022toggleContractActive\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address payable\u0022,\u0022name\u0022:\u0022newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022transferOwnership\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022withdraw\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022}]","ContractName":"ERC20toUniPoolZapV1_General","CompilerVersion":"v0.5.16\u002Bcommit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://7d03ccef2da9bbb367b955991c66e625c04b91da075397fcf3f80cbbf651a96e"}]