[{"SourceCode":"pragma solidity ^0.5.7;\r\ncontract MarginParent {\r\n  bytes constant _margin_swap_compiled = hex\u0022608060405234801561001057600080fd5b506040516102963803806102968339818101604052604081101561003357600080fd5b81019080805190602001909291908051906020019092919050505081600155806002556001600355505061022a8061006c6000396000f3fe60806040526004361061003f5760003560e01c80633b1ca3b51461006657806380f76021146100b7578063893d20e81461010e578063ea87963414610165575b366000803760008036600080545af43d6000803e8060008114610061573d6000f35b3d6000fd5b34801561007257600080fd5b506100b56004803603602081101561008957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506101bc565b005b3480156100c357600080fd5b506100cc6101d8565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561011a57600080fd5b506101236101e2565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561017157600080fd5b5061017a6101ec565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6002543318156101d15760016020526001603ffd5b8060005550565b6000600254905090565b6000600154905090565b6000805490509056fea265627a7a72305820c1c7f4c7bd26890e7f00477b3ef68b6d45b2399e0b5eb13676dec4ad4737583e64736f6c634300050a0032\u0022;\r\n  address _manager_address;\r\n  address _manager_proposed;\r\n  address _default_code;\r\n  uint256[2**160] _white_listed_addresses;\r\n  uint256[2**160] _approved_margin_code;\r\n  event MarginSetup(\r\n    address indexed owner,\r\n    address margin_address\r\n  );\r\n  \r\n  constructor(address default_code) public payable  {\r\n    assembly {\r\n      sstore(_manager_address_slot, caller)\r\n      sstore(_default_code_slot, default_code)\r\n      sstore(add(_white_listed_addresses_slot, caller), 1)\r\n    }\r\n  }\r\n  \r\n  function () external payable  {}\r\n  \r\n  function approveMarginCode(address margin_code_address, bool approved) external  {\r\n    assembly {\r\n      if xor(caller, sload(_manager_address_slot)) {\r\n        mstore(32, 1)\r\n        revert(63, 1)\r\n      }\r\n      sstore(add(_approved_margin_code_slot, margin_code_address), approved)\r\n    }\r\n  }\r\n  \r\n  function setDefautlMarginCode(address default_code) external  {\r\n    assembly {\r\n      if xor(caller, sload(_manager_address_slot)) {\r\n        mstore(32, 1)\r\n        revert(63, 1)\r\n      }\r\n      sstore(add(_approved_margin_code_slot, default_code), 1)\r\n      sstore(_default_code_slot, default_code)\r\n    }\r\n  }\r\n  \r\n  function setMarginCode(address margin_code_address) external  {\r\n    address margin_contract = getMarginAddress(address(msg.sender));\r\n    \r\n    uint256[2] memory m_in;\r\n    assembly {\r\n      if iszero(extcodesize(margin_contract)) {\r\n        mstore(32, 1)\r\n        revert(63, 1)\r\n      }\r\n      let approved := sload(add(_approved_margin_code_slot, margin_code_address))\r\n      sstore(add(_white_listed_addresses_slot, margin_contract), approved)\r\n      {\r\n        mstore(m_in, /* fn_hash(\u0022setCode(address)\u0022) */ 0x3b1ca3b500000000000000000000000000000000000000000000000000000000)\r\n        mstore(add(m_in, 0x04), margin_code_address)\r\n        let res := call(gas, margin_contract, 0, m_in, 0x24, 0x00, 0x00)\r\n        if iszero(res) {\r\n          mstore(32, 2)\r\n          revert(63, 1)\r\n        }\r\n      }\r\n    }\r\n  }\r\n  \r\n  function managerPropose(address new_manager) external  {\r\n    assembly {\r\n      if xor(caller, sload(_manager_address_slot)) {\r\n        mstore(32, 1)\r\n        revert(63, 1)\r\n      }\r\n      sstore(_manager_proposed_slot, new_manager)\r\n    }\r\n  }\r\n  \r\n  function managerSet() external  {\r\n    assembly {\r\n      let proposed := sload(_manager_proposed_slot)\r\n      if xor(caller, proposed) {\r\n        mstore(32, 1)\r\n        revert(63, 1)\r\n      }\r\n      sstore(add(_white_listed_addresses_slot, sload(_manager_address_slot)), 0)\r\n      sstore(add(_white_listed_addresses_slot, proposed), 1)\r\n      sstore(_manager_address_slot, proposed)\r\n    }\r\n  }\r\n  \r\n  function setupMargin() external \r\n  returns (address margin_contract) {\r\n    bytes memory margin_swap_compiled = _margin_swap_compiled;\r\n    \r\n    uint256[2] memory m_in;\r\n    assembly {\r\n      let compiled_bytes := mload(margin_swap_compiled)\r\n      let contract_start := add(margin_swap_compiled, 0x20)\r\n      let cursor := add(contract_start, compiled_bytes)\r\n      mstore(cursor, caller)\r\n      cursor := add(cursor, 0x20)\r\n      mstore(cursor, address)\r\n      cursor := add(cursor, 0x20)\r\n      mstore(0x40, cursor)\r\n      let contract_size := sub(cursor, contract_start)\r\n      margin_contract := create2(0, contract_start, contract_size, caller)\r\n      if iszero(margin_contract) {\r\n        mstore(32, 1)\r\n        revert(63, 1)\r\n      }\r\n      sstore(add(_white_listed_addresses_slot, margin_contract), 1)\r\n      {\r\n        mstore(m_in, /* fn_hash(\u0022setCode(address)\u0022) */ 0x3b1ca3b500000000000000000000000000000000000000000000000000000000)\r\n        mstore(add(m_in, 0x04), sload(_default_code_slot))\r\n        let res := call(gas, margin_contract, 0, m_in, 0x24, 0x0, 0x0)\r\n        if iszero(res) {\r\n          mstore(32, 2)\r\n          revert(63, 1)\r\n        }\r\n      }\r\n      \r\n      /* Log event: MarginSetup */\r\n      mstore(m_in, margin_contract)\r\n      log2(m_in, 32, /* MarginSetup */ 0xd1915076529a929900f0bed2467292f2d10fdeda6f13a14d8d793a45d7916eaf, caller)\r\n    }\r\n  }\r\n  \r\n  function isMarginSetup(address owner) public view \r\n  returns (address margin_contract, bool enabled) {\r\n    margin_contract = getMarginAddress(owner);\r\n    assembly {\r\n      enabled := sload(add(_white_listed_addresses_slot, margin_contract))\r\n    }\r\n  }\r\n  \r\n  function getMarginAddress(address owner) public view \r\n  returns (address margin_contract) {\r\n    bytes memory margin_swap_compiled = _margin_swap_compiled;\r\n    assembly {\r\n      let compiled_bytes := mload(margin_swap_compiled)\r\n      let contract_start := add(margin_swap_compiled, 0x20)\r\n      let cursor := add(contract_start, compiled_bytes)\r\n      mstore(cursor, owner)\r\n      cursor := add(cursor, 0x20)\r\n      mstore(cursor, address)\r\n      cursor := add(cursor, 0x20)\r\n      mstore(0x40, cursor)\r\n      let contract_size := sub(cursor, contract_start)\r\n      let contract_hash := keccak256(contract_start, contract_size)\r\n      mstore(margin_swap_compiled, or(shl(0xa0, 0xff), address))\r\n      mstore(add(margin_swap_compiled, 0x20), owner)\r\n      mstore(add(margin_swap_compiled, 0x40), contract_hash)\r\n      let address_hash := keccak256(add(margin_swap_compiled, 11), 85)\r\n      margin_contract := and(address_hash, 0xffffffffffffffffffffffffffffffffffffffff)\r\n    }\r\n  }\r\n  \r\n  function getCapital(address asset, uint256 amount) external  {\r\n    \r\n    uint256[3] memory m_in;\r\n    \r\n    uint256[1] memory m_out;\r\n    assembly {\r\n      if iszero(sload(add(_white_listed_addresses_slot, caller))) {\r\n        mstore(32, 1)\r\n        revert(63, 1)\r\n      }\r\n      let m_in_size := 0\r\n      let wei_to_send := amount\r\n      let dest := caller\r\n      if asset {\r\n        mstore(m_in, /* fn_hash(\u0022transfer(address,uint256)\u0022) */ 0xa9059cbb00000000000000000000000000000000000000000000000000000000)\r\n        mstore(add(m_in, 4), caller)\r\n        mstore(add(m_in, 0x24), amount)\r\n        dest := asset\r\n        m_in_size := 0x44\r\n        wei_to_send := 0\r\n      }\r\n      let result := call(gas, dest, wei_to_send, m_in, m_in_size, m_out, 32)\r\n      if iszero(result) {\r\n        mstore(32, 2)\r\n        revert(63, 1)\r\n      }\r\n      if asset {\r\n        if iszero(mload(m_out)) {\r\n          mstore(32, 3)\r\n          revert(63, 1)\r\n        }\r\n      }\r\n    }\r\n  }\r\n}","ABI":"[{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022owner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022isMarginSetup\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022margin_contract\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022enabled\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022setupMargin\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022margin_contract\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022asset\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022getCapital\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022margin_code_address\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022setMarginCode\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022owner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022getMarginAddress\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022margin_contract\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022new_manager\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022managerPropose\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022managerSet\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022margin_code_address\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022approved\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022name\u0022:\u0022approveMarginCode\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022default_code\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022setDefautlMarginCode\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[{\u0022name\u0022:\u0022default_code\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:true,\u0022stateMutability\u0022:\u0022payable\u0022,\u0022type\u0022:\u0022constructor\u0022},{\u0022payable\u0022:true,\u0022stateMutability\u0022:\u0022payable\u0022,\u0022type\u0022:\u0022fallback\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022owner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022margin_address\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022MarginSetup\u0022,\u0022type\u0022:\u0022event\u0022}]","ContractName":"MarginParent","CompilerVersion":"v0.5.10\u002Bcommit.5a6ea5b1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000d6a59016d2463ebe97e2156f5b87090b5648614a","Library":"","SwarmSource":"bzzr://9940541d23f600c1165591dae54d9963836e5f869577bf64a1b7b71a67cb3a90"}]