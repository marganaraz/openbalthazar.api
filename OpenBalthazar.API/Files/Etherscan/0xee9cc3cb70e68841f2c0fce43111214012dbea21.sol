[{"SourceCode":"pragma solidity 0.4.25;\n\n// File: contracts/saga/interfaces/IMonetaryModel.sol\n\n/**\n * @title Monetary Model Interface.\n */\ninterface IMonetaryModel {\n    /**\n     * @dev Buy SGA in exchange for SDR.\n     * @param _sdrAmount The amount of SDR received from the buyer.\n     * @return The amount of SGA that the buyer is entitled to receive.\n     */\n    function buy(uint256 _sdrAmount) external returns (uint256);\n\n    /**\n     * @dev Sell SGA in exchange for SDR.\n     * @param _sgaAmount The amount of SGA received from the seller.\n     * @return The amount of SDR that the seller is entitled to receive.\n     */\n    function sell(uint256 _sgaAmount) external returns (uint256);\n}\n\n// File: contracts/saga/interfaces/IReconciliationAdjuster.sol\n\n/**\n * @title Reconciliation Adjuster Interface.\n */\ninterface IReconciliationAdjuster {\n    /**\n     * @dev Get the buy-adjusted value of a given SDR amount.\n     * @param _sdrAmount The amount of SDR to adjust.\n     * @return The adjusted amount of SDR.\n     */\n    function adjustBuy(uint256 _sdrAmount) external view returns (uint256);\n\n    /**\n     * @dev Get the sell-adjusted value of a given SDR amount.\n     * @param _sdrAmount The amount of SDR to adjust.\n     * @return The adjusted amount of SDR.\n     */\n    function adjustSell(uint256 _sdrAmount) external view returns (uint256);\n}\n\n// File: contracts/saga/interfaces/ITransactionManager.sol\n\n/**\n * @title Transaction Manager Interface.\n */\ninterface ITransactionManager {\n    /**\n     * @dev Buy SGA in exchange for ETH.\n     * @param _ethAmount The amount of ETH received from the buyer.\n     * @return The amount of SGA that the buyer is entitled to receive.\n     */\n    function buy(uint256 _ethAmount) external returns (uint256);\n\n    /**\n     * @dev Sell SGA in exchange for ETH.\n     * @param _sgaAmount The amount of SGA received from the seller.\n     * @return The amount of ETH that the seller is entitled to receive.\n     */\n    function sell(uint256 _sgaAmount) external returns (uint256);\n}\n\n// File: contracts/saga/interfaces/ITransactionLimiter.sol\n\n/**\n * @title Transaction Limiter Interface.\n */\ninterface ITransactionLimiter {\n    /**\n     * @dev Reset the total buy-amount and the total sell-amount.\n     */\n    function resetTotal() external;\n\n    /**\n     * @dev Increment the total buy-amount.\n     * @param _amount The amount to increment by.\n     */\n    function incTotalBuy(uint256 _amount) external;\n\n    /**\n     * @dev Increment the total sell-amount.\n     * @param _amount The amount to increment by.\n     */\n    function incTotalSell(uint256 _amount) external;\n}\n\n// File: contracts/saga/interfaces/IETHConverter.sol\n\n/**\n * @title ETH Converter Interface.\n */\ninterface IETHConverter {\n    /**\n     * @dev Get the current SDR worth of a given ETH amount.\n     * @param _ethAmount The amount of ETH to convert.\n     * @return The equivalent amount of SDR.\n     */\n    function toSdrAmount(uint256 _ethAmount) external view returns (uint256);\n\n    /**\n     * @dev Get the current ETH worth of a given SDR amount.\n     * @param _sdrAmount The amount of SDR to convert.\n     * @return The equivalent amount of ETH.\n     */\n    function toEthAmount(uint256 _sdrAmount) external view returns (uint256);\n\n    /**\n     * @dev Get the original SDR worth of a converted ETH amount.\n     * @param _ethAmount The amount of ETH converted.\n     * @return The original amount of SDR.\n     */\n    function fromEthAmount(uint256 _ethAmount) external view returns (uint256);\n}\n\n// File: contracts/contract_address_locator/interfaces/IContractAddressLocator.sol\n\n/**\n * @title Contract Address Locator Interface.\n */\ninterface IContractAddressLocator {\n    /**\n     * @dev Get the contract address mapped to a given identifier.\n     * @param _identifier The identifier.\n     * @return The contract address.\n     */\n    function getContractAddress(bytes32 _identifier) external view returns (address);\n\n    /**\n     * @dev Determine whether or not a contract address relates to one of the identifiers.\n     * @param _contractAddress The contract address to look for.\n     * @param _identifiers The identifiers.\n     * @return A boolean indicating if the contract address relates to one of the identifiers.\n     */\n    function isContractAddressRelates(address _contractAddress, bytes32[] _identifiers) external view returns (bool);\n}\n\n// File: contracts/contract_address_locator/ContractAddressLocatorHolder.sol\n\n/**\n * @title Contract Address Locator Holder.\n * @dev Hold a contract address locator, which maps a unique identifier to every contract address in the system.\n * @dev Any contract which inherits from this contract can retrieve the address of any contract in the system.\n * @dev Thus, any contract can remain \u0022oblivious\u0022 to the replacement of any other contract in the system.\n * @dev In addition to that, any function in any contract can be restricted to a specific caller.\n */\ncontract ContractAddressLocatorHolder {\n    bytes32 internal constant _IAuthorizationDataSource_ = \u0022IAuthorizationDataSource\u0022;\n    bytes32 internal constant _ISGNConversionManager_    = \u0022ISGNConversionManager\u0022      ;\n    bytes32 internal constant _IModelDataSource_         = \u0022IModelDataSource\u0022        ;\n    bytes32 internal constant _IPaymentHandler_          = \u0022IPaymentHandler\u0022            ;\n    bytes32 internal constant _IPaymentManager_          = \u0022IPaymentManager\u0022            ;\n    bytes32 internal constant _IPaymentQueue_            = \u0022IPaymentQueue\u0022              ;\n    bytes32 internal constant _IReconciliationAdjuster_  = \u0022IReconciliationAdjuster\u0022      ;\n    bytes32 internal constant _IIntervalIterator_        = \u0022IIntervalIterator\u0022       ;\n    bytes32 internal constant _IMintHandler_             = \u0022IMintHandler\u0022            ;\n    bytes32 internal constant _IMintListener_            = \u0022IMintListener\u0022           ;\n    bytes32 internal constant _IMintManager_             = \u0022IMintManager\u0022            ;\n    bytes32 internal constant _IPriceBandCalculator_     = \u0022IPriceBandCalculator\u0022       ;\n    bytes32 internal constant _IModelCalculator_         = \u0022IModelCalculator\u0022        ;\n    bytes32 internal constant _IRedButton_               = \u0022IRedButton\u0022              ;\n    bytes32 internal constant _IReserveManager_          = \u0022IReserveManager\u0022         ;\n    bytes32 internal constant _ISagaExchanger_           = \u0022ISagaExchanger\u0022          ;\n    bytes32 internal constant _IMonetaryModel_               = \u0022IMonetaryModel\u0022              ;\n    bytes32 internal constant _IMonetaryModelState_          = \u0022IMonetaryModelState\u0022         ;\n    bytes32 internal constant _ISGAAuthorizationManager_ = \u0022ISGAAuthorizationManager\u0022;\n    bytes32 internal constant _ISGAToken_                = \u0022ISGAToken\u0022               ;\n    bytes32 internal constant _ISGATokenManager_         = \u0022ISGATokenManager\u0022        ;\n    bytes32 internal constant _ISGNAuthorizationManager_ = \u0022ISGNAuthorizationManager\u0022;\n    bytes32 internal constant _ISGNToken_                = \u0022ISGNToken\u0022               ;\n    bytes32 internal constant _ISGNTokenManager_         = \u0022ISGNTokenManager\u0022        ;\n    bytes32 internal constant _IMintingPointTimersManager_             = \u0022IMintingPointTimersManager\u0022            ;\n    bytes32 internal constant _ITradingClasses_          = \u0022ITradingClasses\u0022         ;\n    bytes32 internal constant _IWalletsTradingLimiterValueConverter_        = \u0022IWalletsTLValueConverter\u0022       ;\n    bytes32 internal constant _IWalletsTradingDataSource_       = \u0022IWalletsTradingDataSource\u0022      ;\n    bytes32 internal constant _WalletsTradingLimiter_SGNTokenManager_          = \u0022WalletsTLSGNTokenManager\u0022         ;\n    bytes32 internal constant _WalletsTradingLimiter_SGATokenManager_          = \u0022WalletsTLSGATokenManager\u0022         ;\n    bytes32 internal constant _IETHConverter_             = \u0022IETHConverter\u0022   ;\n    bytes32 internal constant _ITransactionLimiter_      = \u0022ITransactionLimiter\u0022     ;\n    bytes32 internal constant _ITransactionManager_      = \u0022ITransactionManager\u0022     ;\n    bytes32 internal constant _IRateApprover_      = \u0022IRateApprover\u0022     ;\n\n    IContractAddressLocator private contractAddressLocator;\n\n    /**\n     * @dev Create the contract.\n     * @param _contractAddressLocator The contract address locator.\n     */\n    constructor(IContractAddressLocator _contractAddressLocator) internal {\n        require(_contractAddressLocator != address(0), \u0022locator is illegal\u0022);\n        contractAddressLocator = _contractAddressLocator;\n    }\n\n    /**\n     * @dev Get the contract address locator.\n     * @return The contract address locator.\n     */\n    function getContractAddressLocator() external view returns (IContractAddressLocator) {\n        return contractAddressLocator;\n    }\n\n    /**\n     * @dev Get the contract address mapped to a given identifier.\n     * @param _identifier The identifier.\n     * @return The contract address.\n     */\n    function getContractAddress(bytes32 _identifier) internal view returns (address) {\n        return contractAddressLocator.getContractAddress(_identifier);\n    }\n\n\n\n    /**\n     * @dev Determine whether or not the sender relates to one of the identifiers.\n     * @param _identifiers The identifiers.\n     * @return A boolean indicating if the sender relates to one of the identifiers.\n     */\n    function isSenderAddressRelates(bytes32[] _identifiers) internal view returns (bool) {\n        return contractAddressLocator.isContractAddressRelates(msg.sender, _identifiers);\n    }\n\n    /**\n     * @dev Verify that the caller is mapped to a given identifier.\n     * @param _identifier The identifier.\n     */\n    modifier only(bytes32 _identifier) {\n        require(msg.sender == getContractAddress(_identifier), \u0022caller is illegal\u0022);\n        _;\n    }\n\n}\n\n// File: contracts/saga/TransactionManager.sol\n\n/**\n * Details of usage of licenced software see here: https://www.saga.org/software/readme_v1\n */\n\n/**\n * @title Transaction Manager.\n */\ncontract TransactionManager is ITransactionManager, ContractAddressLocatorHolder {\n    string public constant VERSION = \u00221.0.0\u0022;\n\n    event TransactionManagerBuyCompleted(uint256 _amount);\n    event TransactionManagerSellCompleted(uint256 _amount);\n\n    /**\n     * @dev Create the contract.\n     * @param _contractAddressLocator The contract address locator.\n     */\n    constructor(IContractAddressLocator _contractAddressLocator) ContractAddressLocatorHolder(_contractAddressLocator) public {}\n\n    /**\n     * @dev Return the contract which implements the IMonetaryModel interface.\n     */\n    function getMonetaryModel() public view returns (IMonetaryModel) {\n        return IMonetaryModel(getContractAddress(_IMonetaryModel_));\n    }\n\n    /**\n     * @dev Return the contract which implements the IReconciliationAdjuster interface.\n     */\n    function getReconciliationAdjuster() public view returns (IReconciliationAdjuster) {\n        return IReconciliationAdjuster(getContractAddress(_IReconciliationAdjuster_));\n    }\n\n    /**\n     * @dev Return the contract which implements the ITransactionLimiter interface.\n     */\n    function getTransactionLimiter() public view returns (ITransactionLimiter) {\n        return ITransactionLimiter(getContractAddress(_ITransactionLimiter_));\n    }\n\n    /**\n     * @dev Return the contract which implements the IETHConverter interface.\n     */\n    function getETHConverter() public view returns (IETHConverter) {\n        return IETHConverter(getContractAddress(_IETHConverter_));\n    }\n\n    /**\n     * @dev Buy SGA in exchange for ETH.\n     * @param _ethAmount The amount of ETH received from the buyer.\n     * @return The amount of SGA that the buyer is entitled to receive.\n     */\n    function buy(uint256 _ethAmount) external only(_ISGATokenManager_) returns (uint256) {\n        uint256 sdrAmount = getETHConverter().toSdrAmount(_ethAmount);\n        uint256 newAmount = getReconciliationAdjuster().adjustBuy(sdrAmount);\n        uint256 sgaAmount = getMonetaryModel().buy(newAmount);\n        getTransactionLimiter().incTotalBuy(sdrAmount);\n        emit TransactionManagerBuyCompleted(sdrAmount);\n        return sgaAmount;\n    }\n\n    /**\n     * @dev Sell SGA in exchange for ETH.\n     * @param _sgaAmount The amount of SGA received from the seller.\n     * @return The amount of ETH that the seller is entitled to receive.\n     */\n    function sell(uint256 _sgaAmount) external only(_ISGATokenManager_) returns (uint256) {\n        uint256 sdrAmount = getMonetaryModel().sell(_sgaAmount);\n        uint256 newAmount = getReconciliationAdjuster().adjustSell(sdrAmount);\n        uint256 ethAmount = getETHConverter().toEthAmount(newAmount);\n        getTransactionLimiter().incTotalSell(sdrAmount);\n        emit TransactionManagerSellCompleted(newAmount);\n        return ethAmount;\n    }\n}\n","ABI":"[{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022getMonetaryModel\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022getReconciliationAdjuster\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022getETHConverter\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022getContractAddressLocator\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_ethAmount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022buy\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_sgaAmount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022sell\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022getTransactionLimiter\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022VERSION\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[{\u0022name\u0022:\u0022_contractAddressLocator\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022constructor\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022_amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022TransactionManagerBuyCompleted\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022_amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022TransactionManagerSellCompleted\u0022,\u0022type\u0022:\u0022event\u0022}]","ContractName":"TransactionManager","CompilerVersion":"v0.4.25\u002Bcommit.59dbf8f1","OptimizationUsed":"1","Runs":"6000","ConstructorArguments":"000000000000000000000000aabcd54faf94925adbe0df117c62961acecbacdb","Library":"","SwarmSource":"bzzr://fc8c70dbde0aeb88c494061fd87d5710ba99e41f544403ffd3810aaf26613ffb"}]