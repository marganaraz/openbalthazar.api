[{"SourceCode":"pragma solidity 0.6.1;\r\npragma experimental ABIEncoderV2;\r\n\r\n\r\ninterface Proxy {\r\n\r\n  \r\n  function execute(\r\n    address _target,\r\n    address _a,\r\n    address _b,\r\n    uint256 _c\r\n  )\r\n    external;\r\n    \r\n}\r\n\r\ninterface Xcert {\r\n\r\n  \r\n  function create(\r\n    address _to,\r\n    uint256 _id,\r\n    bytes32 _imprint\r\n  )\r\n    external;\r\n\r\n  \r\n  function setUri(\r\n    string calldata _uriPrefix,\r\n    string calldata _uriPostfix\r\n  )\r\n    external;\r\n\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n  \r\n  string constant OVERFLOW = \u0022008001\u0022;\r\n  string constant SUBTRAHEND_GREATER_THEN_MINUEND = \u0022008002\u0022;\r\n  string constant DIVISION_BY_ZERO = \u0022008003\u0022;\r\n\r\n  \r\n  function mul(\r\n    uint256 _factor1,\r\n    uint256 _factor2\r\n  )\r\n    internal\r\n    pure\r\n    returns (uint256 product)\r\n  {\r\n    \r\n    \r\n    \r\n    if (_factor1 == 0)\r\n    {\r\n      return 0;\r\n    }\r\n\r\n    product = _factor1 * _factor2;\r\n    require(product / _factor1 == _factor2, OVERFLOW);\r\n  }\r\n\r\n  \r\n  function div(\r\n    uint256 _dividend,\r\n    uint256 _divisor\r\n  )\r\n    internal\r\n    pure\r\n    returns (uint256 quotient)\r\n  {\r\n    \r\n    require(_divisor \u003E 0, DIVISION_BY_ZERO);\r\n    quotient = _dividend / _divisor;\r\n    \r\n  }\r\n\r\n  \r\n  function sub(\r\n    uint256 _minuend,\r\n    uint256 _subtrahend\r\n  )\r\n    internal\r\n    pure\r\n    returns (uint256 difference)\r\n  {\r\n    require(_subtrahend \u003C= _minuend, SUBTRAHEND_GREATER_THEN_MINUEND);\r\n    difference = _minuend - _subtrahend;\r\n  }\r\n\r\n  \r\n  function add(\r\n    uint256 _addend1,\r\n    uint256 _addend2\r\n  )\r\n    internal\r\n    pure\r\n    returns (uint256 sum)\r\n  {\r\n    sum = _addend1 \u002B _addend2;\r\n    require(sum \u003E= _addend1, OVERFLOW);\r\n  }\r\n\r\n  \r\n  function mod(\r\n    uint256 _dividend,\r\n    uint256 _divisor\r\n  )\r\n    internal\r\n    pure\r\n    returns (uint256 remainder)\r\n  {\r\n    require(_divisor != 0, DIVISION_BY_ZERO);\r\n    remainder = _dividend % _divisor;\r\n  }\r\n\r\n}\r\n\r\ncontract Abilitable {\r\n  using SafeMath for uint;\r\n\r\n  \r\n  string constant NOT_AUTHORIZED = \u0022017001\u0022;\r\n  string constant INVALID_INPUT = \u0022017002\u0022;\r\n\r\n  \r\n  uint8 constant SUPER_ABILITY = 1;\r\n\r\n  \r\n  uint8 constant ALLOW_SUPER_ABILITY = 2;\r\n\r\n  \r\n  uint8 constant EMPTY_SLOT_1 = 4;\r\n\r\n  \r\n  uint8 constant EMPTY_SLOT_2 = 8;\r\n\r\n  \r\n  uint8 constant ALL_DEFAULT_ABILITIES = 15;\r\n\r\n  \r\n  mapping(address =\u003E uint256) public addressToAbility;\r\n\r\n  \r\n  event SetAbilities(\r\n    address indexed _target,\r\n    uint256 indexed _abilities\r\n  );\r\n\r\n  \r\n  modifier hasAbilities(\r\n    uint256 _abilities\r\n  )\r\n  {\r\n    require(_abilities \u003E 0, INVALID_INPUT);\r\n    require(\r\n      addressToAbility[msg.sender] \u0026 _abilities == _abilities,\r\n      NOT_AUTHORIZED\r\n    );\r\n    _;\r\n  }\r\n\r\n  \r\n  constructor()\r\n    public\r\n  {\r\n    addressToAbility[msg.sender] = ALL_DEFAULT_ABILITIES;\r\n  }\r\n\r\n  \r\n  function grantAbilities(\r\n    address _target,\r\n    uint256 _abilities\r\n  )\r\n    external\r\n    hasAbilities(SUPER_ABILITY)\r\n  {\r\n    addressToAbility[_target] |= _abilities;\r\n    emit SetAbilities(_target, addressToAbility[_target]);\r\n  }\r\n\r\n  \r\n  function revokeAbilities(\r\n    address _target,\r\n    uint256 _abilities\r\n  )\r\n    external\r\n    hasAbilities(SUPER_ABILITY)\r\n  {\r\n    addressToAbility[_target] \u0026= ~_abilities;\r\n    emit SetAbilities(_target, addressToAbility[_target]);\r\n  }\r\n\r\n  \r\n  function setAbilities(\r\n    address _target,\r\n    uint256 _abilities\r\n  )\r\n    external\r\n    hasAbilities(SUPER_ABILITY)\r\n  {\r\n    addressToAbility[_target] = _abilities;\r\n    emit SetAbilities(_target, _abilities);\r\n  }\r\n\r\n  \r\n  function isAble(\r\n    address _target,\r\n    uint256 _abilities\r\n  )\r\n    external\r\n    view\r\n    returns (bool)\r\n  {\r\n    require(_abilities \u003E 0, INVALID_INPUT);\r\n    return (addressToAbility[_target] \u0026 _abilities) == _abilities;\r\n  }\r\n\r\n}\r\n\r\ncontract XcertCreateProxy is\r\n  Abilitable\r\n{\r\n\r\n  \r\n  uint8 constant ABILITY_TO_EXECUTE = 16;\r\n\r\n  \r\n  function create(\r\n    address _xcert,\r\n    address _to,\r\n    uint256 _id,\r\n    bytes32 _tokenURIIntegrityDigest\r\n  )\r\n    external\r\n    hasAbilities(ABILITY_TO_EXECUTE)\r\n  {\r\n    Xcert(_xcert).create(_to, _id, _tokenURIIntegrityDigest);\r\n  }\r\n\r\n}\r\n\r\ninterface XcertBurnable {\r\n\r\n  \r\n  function destroy(\r\n    uint256 _tokenId\r\n  )\r\n    external;\r\n\r\n}\r\n\r\ncontract XcertBurnProxy is\r\n  Abilitable\r\n{\r\n\r\n  \r\n  uint8 constant ABILITY_TO_EXECUTE = 16;\r\n\r\n  \r\n  function destroy(\r\n    address _xcert,\r\n    uint256 _id\r\n  )\r\n    external\r\n    hasAbilities(ABILITY_TO_EXECUTE)\r\n  {\r\n    XcertBurnable(_xcert).destroy(_id);\r\n  }\r\n\r\n}\r\n\r\ninterface XcertMutable {\r\n\r\n  \r\n  function updateTokenURIIntegrityDigest(\r\n    uint256 _tokenId,\r\n    bytes32 _tokenURIIntegrityDigest\r\n  )\r\n    external;\r\n\r\n}\r\n\r\ncontract XcertUpdateProxy is\r\n  Abilitable\r\n{\r\n\r\n  \r\n  uint8 constant ABILITY_TO_EXECUTE = 16;\r\n\r\n  \r\n  function update(\r\n    address _xcert,\r\n    uint256 _id,\r\n    bytes32 _tokenURIIntegrityDigest\r\n  )\r\n    external\r\n    hasAbilities(ABILITY_TO_EXECUTE)\r\n  {\r\n    XcertMutable(_xcert).updateTokenURIIntegrityDigest(_id, _tokenURIIntegrityDigest);\r\n  }\r\n\r\n}\r\n\r\ncontract AbilitableManageProxy is\r\n  Abilitable\r\n{\r\n\r\n  \r\n  uint8 constant ABILITY_TO_EXECUTE = 16;\r\n\r\n  \r\n  function set(\r\n    address _target,\r\n    address _to,\r\n    uint256 _abilities\r\n  )\r\n    public\r\n    hasAbilities(ABILITY_TO_EXECUTE)\r\n  {\r\n    Abilitable(_target).setAbilities(_to, _abilities);\r\n  }\r\n\r\n}\r\n\r\nlibrary BytesType {\r\n  \r\n  function toAddress(\r\n    uint _offst,\r\n    bytes memory _input\r\n  )\r\n    internal\r\n    pure\r\n  returns (address _output)\r\n  {\r\n    assembly { _output := mload(add(_input, _offst)) } \r\n  }\r\n\r\n  \r\n  function toBool(\r\n    uint _offst,\r\n    bytes memory _input\r\n  )\r\n    internal\r\n    pure\r\n    returns (bool _output)\r\n  {\r\n    uint8 x;\r\n    assembly { x := mload(add(_input, _offst)) } \r\n    if (x == 0) {\r\n      _output = false;\r\n    } else {\r\n      _output = true;\r\n    }\r\n  }\r\n\r\n  \r\n  function toBytes32(\r\n    uint _offst,\r\n    bytes memory _input\r\n  )\r\n    internal\r\n    pure\r\n    returns (bytes32 _output)\r\n  {\r\n    assembly { _output := mload(add(_input, _offst)) } \r\n  }\r\n\r\n  \r\n  function toUint8(\r\n    uint _offst,\r\n    bytes memory _input\r\n  )\r\n    internal\r\n    pure\r\n    returns (uint8 _output)\r\n  {\r\n    assembly { _output := mload(add(_input, _offst)) } \r\n  }\r\n\r\n  \r\n  function toUint16(\r\n    uint _offst,\r\n    bytes memory _input\r\n  )\r\n    internal\r\n    pure\r\n    returns (uint16 _output)\r\n  {\r\n    assembly { _output := mload(add(_input, _offst)) } \r\n  }\r\n\r\n  \r\n  function toUint256(\r\n    uint _offst,\r\n    bytes memory _input\r\n  )\r\n    internal\r\n    pure\r\n    returns (uint256 _output)\r\n  {\r\n    assembly { _output := mload(add(_input, _offst)) } \r\n  }\r\n}\r\n\r\ninterface ERC721 {\r\n\r\n  \r\n  event Transfer(\r\n    address indexed _from,\r\n    address indexed _to,\r\n    uint256 indexed _tokenId\r\n  );\r\n\r\n  \r\n  event Approval(\r\n    address indexed _owner,\r\n    address indexed _approved,\r\n    uint256 indexed _tokenId\r\n  );\r\n\r\n  \r\n  event ApprovalForAll(\r\n    address indexed _owner,\r\n    address indexed _operator,\r\n    bool _approved\r\n  );\r\n\r\n  \r\n  function safeTransferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId,\r\n    bytes calldata _data\r\n  )\r\n    external;\r\n\r\n  \r\n  function safeTransferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId\r\n  )\r\n    external;\r\n\r\n  \r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId\r\n  )\r\n    external;\r\n\r\n  \r\n  function approve(\r\n    address _approved,\r\n    uint256 _tokenId\r\n  )\r\n    external;\r\n\r\n  \r\n  function setApprovalForAll(\r\n    address _operator,\r\n    bool _approved\r\n  )\r\n    external;\r\n\r\n  \r\n  function balanceOf(\r\n    address _owner\r\n  )\r\n    external\r\n    view\r\n    returns (uint256);\r\n\r\n  \r\n  function ownerOf(\r\n    uint256 _tokenId\r\n  )\r\n    external\r\n    view\r\n    returns (address);\r\n\r\n  \r\n  function getApproved(\r\n    uint256 _tokenId\r\n  )\r\n    external\r\n    view\r\n    returns (address);\r\n\r\n  \r\n  function isApprovedForAll(\r\n    address _owner,\r\n    address _operator\r\n  )\r\n    external\r\n    view\r\n    returns (bool);\r\n\r\n}\r\n\r\ncontract ActionsGateway is\r\n  Abilitable\r\n{\r\n\r\n  \r\n  uint8 constant ABILITY_TO_SET_PROXIES = 16;\r\n\r\n  \r\n  uint8 constant ABILITY_ALLOW_MANAGE_ABILITIES = 2;\r\n  uint16 constant ABILITY_ALLOW_CREATE_ASSET = 512;\r\n  uint16 constant ABILITY_ALLOW_UPDATE_ASSET = 1024;\r\n\r\n  \r\n  string constant INVALID_SIGNATURE_KIND = \u0022015001\u0022;\r\n  string constant INVALID_PROXY = \u0022015002\u0022;\r\n  string constant SENDER_NOT_A_SIGNER = \u0022015003\u0022;\r\n  string constant CLAIM_EXPIRED = \u0022015004\u0022;\r\n  string constant INVALID_SIGNATURE = \u0022015005\u0022;\r\n  string constant ORDER_CANCELED = \u0022015006\u0022;\r\n  string constant ORDER_ALREADY_PERFORMED = \u0022015007\u0022;\r\n  string constant SIGNERS_DOES_NOT_INCLUDE_SENDER = \u0022015008\u0022;\r\n  string constant SIGNER_DOES_NOT_HAVE_ALLOW_CREATE_ASSET_ABILITY = \u0022015009\u0022;\r\n  string constant SIGNER_DOES_NOT_HAVE_ALLOW_UPDATE_ASSET_ABILITY = \u0022015010\u0022;\r\n  string constant SIGNER_DOES_NOT_HAVE_ALLOW_MANAGE_ABILITIES_ABILITY = \u0022015011\u0022;\r\n  string constant SIGNER_IS_NOT_DESTROY_ASSET_OWNER = \u0022015012\u0022;\r\n\r\n  \r\n  uint8 constant ACTION_CREATE_BYTES_FROM_INDEX = 85;\r\n  uint8 constant ACTION_CREATE_BYTES_RECEIVER = 84;\r\n  uint8 constant ACTION_CREATE_BYTES_ID = 64;\r\n  uint8 constant ACTION_CREATE_BYTES_IMPRINT = 32;\r\n  uint8 constant ACTION_TRANSFER_BYTES_FROM_INDEX = 53;\r\n  uint8 constant ACTION_TRANSFER_BYTES_RECEIVER = 52;\r\n  uint8 constant ACTION_TRANSFER_BYTES_ID = 32;\r\n  uint8 constant ACTION_UPDATE_BYTES_FROM_INDEX = 65;\r\n  uint8 constant ACTION_UPDATE_BYTES_ID = 64;\r\n  uint8 constant ACTION_UPDATE_BYTES_IMPRINT = 32;\r\n  uint8 constant ACTION_MANAGE_ABILITIES_BYTES_FROM_INDEX = 53;\r\n  uint8 constant ACTION_MANAGE_ABILITIES_BYTES_RECEIVER = 52;\r\n  uint8 constant ACTION_MANAGE_ABILITIES_BYTES_ABILITIES = 32;\r\n  uint8 constant ACTION_BURN_BYTES_FROM_INDEX = 33;\r\n  uint8 constant ACTION_BURN_BYTES_ID = 32;\r\n\r\n  \r\n  enum SignatureKind\r\n  {\r\n    eth_sign,\r\n    trezor,\r\n    no_prefix\r\n  }\r\n\r\n  \r\n  enum ActionKind\r\n  {\r\n    create,\r\n    transfer,\r\n    update,\r\n    manage_abilities,\r\n    burn\r\n  }\r\n\r\n  \r\n  struct ProxyData\r\n  {\r\n    address proxyAddress;\r\n    ActionKind kind;\r\n  }\r\n\r\n  \r\n  struct ActionData\r\n  {\r\n    uint32 proxyId;\r\n    address contractAddress;\r\n    bytes params;\r\n  }\r\n\r\n  \r\n  struct SignatureData\r\n  {\r\n    bytes32 r;\r\n    bytes32 s;\r\n    uint8 v;\r\n    SignatureKind kind;\r\n  }\r\n\r\n  \r\n  struct OrderData\r\n  {\r\n    address[] signers;\r\n    ActionData[] actions;\r\n    uint256 seed;\r\n    uint256 expiration;\r\n  }\r\n\r\n  \r\n  ProxyData[] public proxies;\r\n\r\n  \r\n  mapping(bytes32 =\u003E bool) public orderCancelled;\r\n\r\n  \r\n  mapping(bytes32 =\u003E bool) public orderPerformed;\r\n\r\n  \r\n  event Perform(\r\n    bytes32 indexed _claim\r\n  );\r\n\r\n  \r\n  event Cancel(\r\n    bytes32 indexed _claim\r\n  );\r\n\r\n  \r\n  event ProxyChange(\r\n    uint256 indexed _index,\r\n    address _proxy\r\n  );\r\n\r\n  \r\n  function addProxy(\r\n    address _proxy,\r\n    ActionKind _kind\r\n  )\r\n    external\r\n    hasAbilities(ABILITY_TO_SET_PROXIES)\r\n  {\r\n    proxies.push(ProxyData(_proxy, _kind));\r\n    emit ProxyChange(proxies.length - 1, _proxy);\r\n  }\r\n\r\n  \r\n  function removeProxy(\r\n    uint256 _index\r\n  )\r\n    external\r\n    hasAbilities(ABILITY_TO_SET_PROXIES)\r\n  {\r\n    proxies[_index].proxyAddress = address(0);\r\n    emit ProxyChange(_index, address(0));\r\n  }\r\n\r\n  \r\n  function perform(\r\n    OrderData memory _data,\r\n    SignatureData[] memory _signatures\r\n  )\r\n    public\r\n  {\r\n    require(_data.expiration \u003E now, CLAIM_EXPIRED);\r\n    bytes32 claim = getOrderDataClaim(_data);\r\n    \r\n    \r\n    \r\n    \r\n    uint256 signersLength = _data.signers.length - 1;\r\n    \r\n    address anyAddress;\r\n    \r\n    \r\n    if (_data.signers[signersLength] == address(0))\r\n    {\r\n      \r\n      \r\n      if (signersLength == _signatures.length) {\r\n        anyAddress = msg.sender;\r\n      } else {\r\n        anyAddress = recoverSigner(claim, _signatures[signersLength]);\r\n      }\r\n      _data.signers[signersLength] = anyAddress;\r\n      \r\n      \r\n    } else if (signersLength == _signatures.length) {\r\n      require(_data.signers[signersLength] == msg.sender, SENDER_NOT_A_SIGNER);\r\n      \r\n    } else { \r\n      signersLength \u002B= 1;\r\n    }\r\n\r\n    for (uint8 i = 0; i \u003C signersLength; i\u002B\u002B)\r\n    {\r\n      require(\r\n        isValidSignature(\r\n          _data.signers[i],\r\n          claim,\r\n          _signatures[i]\r\n        ),\r\n        INVALID_SIGNATURE\r\n      );\r\n    }\r\n\r\n    require(!orderCancelled[claim], ORDER_CANCELED);\r\n    require(!orderPerformed[claim], ORDER_ALREADY_PERFORMED);\r\n\r\n    orderPerformed[claim] = true;\r\n    _doActionsReplaceZeroAddress(_data, anyAddress);\r\n\r\n    emit Perform(claim);\r\n  }\r\n\r\n  \r\n  function cancel(\r\n    OrderData memory _data\r\n  )\r\n    public\r\n  {\r\n    bool present = false;\r\n    for (uint8 i = 0; i \u003C _data.signers.length; i\u002B\u002B) {\r\n      if (_data.signers[i] == msg.sender) {\r\n        present = true;\r\n        break;\r\n      }\r\n    }\r\n    require(present, SIGNERS_DOES_NOT_INCLUDE_SENDER);\r\n\r\n    bytes32 claim = getOrderDataClaim(_data);\r\n    require(!orderPerformed[claim], ORDER_ALREADY_PERFORMED);\r\n\r\n    orderCancelled[claim] = true;\r\n    emit Cancel(claim);\r\n  }\r\n\r\n  \r\n  function getOrderDataClaim(\r\n    OrderData memory _orderData\r\n  )\r\n    public\r\n    view\r\n    returns (bytes32)\r\n  {\r\n    bytes32 actionsHash = 0x0;\r\n\r\n    for(uint256 i = 0; i \u003C _orderData.actions.length; i\u002B\u002B)\r\n    {\r\n      actionsHash = keccak256(\r\n        abi.encodePacked(\r\n          actionsHash,\r\n          _orderData.actions[i].proxyId,\r\n          _orderData.actions[i].contractAddress,\r\n          _orderData.actions[i].params\r\n        )\r\n      );\r\n    }\r\n\r\n    return keccak256(\r\n      abi.encodePacked(\r\n        address(this),\r\n        _orderData.signers,\r\n        actionsHash,\r\n        _orderData.seed,\r\n        _orderData.expiration\r\n      )\r\n    );\r\n  }\r\n\r\n  \r\n  function isValidSignature(\r\n    address _signer,\r\n    bytes32 _claim,\r\n    SignatureData memory _signature\r\n  )\r\n    public\r\n    pure\r\n    returns (bool)\r\n  {\r\n    return _signer == recoverSigner(_claim, _signature);\r\n  }\r\n\r\n  \r\n  function recoverSigner(\r\n    bytes32 _claim,\r\n    SignatureData memory _signature\r\n  )\r\n    public\r\n    pure\r\n    returns (address)\r\n  {\r\n    if (_signature.kind == SignatureKind.eth_sign)\r\n    {\r\n      return ecrecover(\r\n        keccak256(\r\n          abi.encodePacked(\r\n            \u0022\\x19Ethereum Signed Message:\\n32\u0022,\r\n            _claim\r\n          )\r\n        ),\r\n        _signature.v,\r\n        _signature.r,\r\n        _signature.s\r\n      );\r\n    } else if (_signature.kind == SignatureKind.trezor)\r\n    {\r\n      return ecrecover(\r\n        keccak256(\r\n          abi.encodePacked(\r\n            \u0022\\x19Ethereum Signed Message:\\n\\x20\u0022,\r\n            _claim\r\n          )\r\n        ),\r\n        _signature.v,\r\n        _signature.r,\r\n        _signature.s\r\n      );\r\n    } else if (_signature.kind == SignatureKind.no_prefix)\r\n    {\r\n      return ecrecover(\r\n        _claim,\r\n        _signature.v,\r\n        _signature.r,\r\n        _signature.s\r\n      );\r\n    }\r\n\r\n    revert(INVALID_SIGNATURE_KIND);\r\n  }\r\n\r\n  \r\n  function _doActionsReplaceZeroAddress(\r\n    OrderData memory _order,\r\n    address _anyAddress\r\n  )\r\n    private\r\n  {\r\n    for(uint256 i = 0; i \u003C _order.actions.length; i\u002B\u002B)\r\n    {\r\n      require(\r\n        proxies[_order.actions[i].proxyId].proxyAddress != address(0),\r\n        INVALID_PROXY\r\n      );\r\n\r\n      if (proxies[_order.actions[i].proxyId].kind == ActionKind.create)\r\n      {\r\n        require(\r\n          Abilitable(_order.actions[i].contractAddress).isAble(\r\n            _order.signers[\r\n              BytesType.toUint8(ACTION_CREATE_BYTES_FROM_INDEX, _order.actions[i].params)\r\n            ],\r\n            ABILITY_ALLOW_CREATE_ASSET\r\n          ),\r\n          SIGNER_DOES_NOT_HAVE_ALLOW_CREATE_ASSET_ABILITY\r\n        );\r\n\r\n        address to = BytesType.toAddress(ACTION_CREATE_BYTES_RECEIVER, _order.actions[i].params);\r\n        if (to == address(0)) {\r\n          to = _anyAddress;\r\n        }\r\n\r\n        XcertCreateProxy(proxies[_order.actions[i].proxyId].proxyAddress).create(\r\n          _order.actions[i].contractAddress,\r\n          to,\r\n          BytesType.toUint256(ACTION_CREATE_BYTES_ID, _order.actions[i].params),\r\n          BytesType.toBytes32(ACTION_CREATE_BYTES_IMPRINT, _order.actions[i].params)\r\n        );\r\n      }\r\n      else if (proxies[_order.actions[i].proxyId].kind == ActionKind.transfer)\r\n      {\r\n        address from = _order.signers[\r\n          BytesType.toUint8(ACTION_TRANSFER_BYTES_FROM_INDEX, _order.actions[i].params)\r\n        ];\r\n        address to = BytesType.toAddress(ACTION_TRANSFER_BYTES_RECEIVER, _order.actions[i].params);\r\n        if (to == address(0)) {\r\n          to = _anyAddress;\r\n        }\r\n\r\n        Proxy(proxies[_order.actions[i].proxyId].proxyAddress).execute(\r\n          _order.actions[i].contractAddress,\r\n          from,\r\n          to,\r\n          BytesType.toUint256(ACTION_TRANSFER_BYTES_ID, _order.actions[i].params)\r\n        );\r\n      }\r\n      else if (proxies[_order.actions[i].proxyId].kind == ActionKind.update)\r\n      {\r\n        require(\r\n          Abilitable(_order.actions[i].contractAddress).isAble(\r\n            _order.signers[\r\n              BytesType.toUint8(ACTION_UPDATE_BYTES_FROM_INDEX, _order.actions[i].params)\r\n            ],\r\n            ABILITY_ALLOW_UPDATE_ASSET\r\n          ),\r\n          SIGNER_DOES_NOT_HAVE_ALLOW_UPDATE_ASSET_ABILITY\r\n        );\r\n\r\n        XcertUpdateProxy(proxies[_order.actions[i].proxyId].proxyAddress).update(\r\n          _order.actions[i].contractAddress,\r\n          BytesType.toUint256(ACTION_UPDATE_BYTES_ID, _order.actions[i].params),\r\n          BytesType.toBytes32(ACTION_UPDATE_BYTES_IMPRINT, _order.actions[i].params)\r\n        );\r\n      }\r\n      else if (proxies[_order.actions[i].proxyId].kind == ActionKind.manage_abilities)\r\n      {\r\n        require(\r\n          Abilitable(_order.actions[i].contractAddress).isAble(\r\n            _order.signers[\r\n              BytesType.toUint8(ACTION_MANAGE_ABILITIES_BYTES_FROM_INDEX, _order.actions[i].params)\r\n            ],\r\n            ABILITY_ALLOW_MANAGE_ABILITIES\r\n          ),\r\n          SIGNER_DOES_NOT_HAVE_ALLOW_MANAGE_ABILITIES_ABILITY\r\n        );\r\n\r\n        address to = BytesType.toAddress(\r\n          ACTION_MANAGE_ABILITIES_BYTES_RECEIVER,\r\n          _order.actions[i].params\r\n        );\r\n\r\n        if (to == address(0)) {\r\n          to = _anyAddress;\r\n        }\r\n\r\n        AbilitableManageProxy(proxies[_order.actions[i].proxyId].proxyAddress).set(\r\n          _order.actions[i].contractAddress,\r\n          to,\r\n          BytesType.toUint256(ACTION_MANAGE_ABILITIES_BYTES_ABILITIES, _order.actions[i].params)\r\n        );\r\n      } else if (proxies[_order.actions[i].proxyId].kind == ActionKind.burn)\r\n      {\r\n        uint256 id = BytesType.toUint256(ACTION_BURN_BYTES_ID, _order.actions[i].params);\r\n        require(\r\n          _order.signers[\r\n            BytesType.toUint8(ACTION_BURN_BYTES_FROM_INDEX, _order.actions[i].params)\r\n          ] == ERC721(_order.actions[i].contractAddress).ownerOf(id),\r\n          SIGNER_IS_NOT_DESTROY_ASSET_OWNER\r\n        );\r\n\r\n        XcertBurnProxy(proxies[_order.actions[i].proxyId].proxyAddress).destroy(\r\n          _order.actions[i].contractAddress,\r\n          id\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n}","ABI":"[{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022_claim\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022Cancel\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022_claim\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022Perform\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_index\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_proxy\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022ProxyChange\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_target\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_abilities\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022SetAbilities\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_proxy\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022enum ActionsGateway.ActionKind\u0022,\u0022name\u0022:\u0022_kind\u0022,\u0022type\u0022:\u0022uint8\u0022}],\u0022name\u0022:\u0022addProxy\u0022,\u0022outputs\u0022:[],\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022addressToAbility\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[{\u0022components\u0022:[{\u0022internalType\u0022:\u0022address[]\u0022,\u0022name\u0022:\u0022signers\u0022,\u0022type\u0022:\u0022address[]\u0022},{\u0022components\u0022:[{\u0022internalType\u0022:\u0022uint32\u0022,\u0022name\u0022:\u0022proxyId\u0022,\u0022type\u0022:\u0022uint32\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022contractAddress\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022bytes\u0022,\u0022name\u0022:\u0022params\u0022,\u0022type\u0022:\u0022bytes\u0022}],\u0022internalType\u0022:\u0022struct ActionsGateway.ActionData[]\u0022,\u0022name\u0022:\u0022actions\u0022,\u0022type\u0022:\u0022tuple[]\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022seed\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022expiration\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022internalType\u0022:\u0022struct ActionsGateway.OrderData\u0022,\u0022name\u0022:\u0022_data\u0022,\u0022type\u0022:\u0022tuple\u0022}],\u0022name\u0022:\u0022cancel\u0022,\u0022outputs\u0022:[],\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[{\u0022components\u0022:[{\u0022internalType\u0022:\u0022address[]\u0022,\u0022name\u0022:\u0022signers\u0022,\u0022type\u0022:\u0022address[]\u0022},{\u0022components\u0022:[{\u0022internalType\u0022:\u0022uint32\u0022,\u0022name\u0022:\u0022proxyId\u0022,\u0022type\u0022:\u0022uint32\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022contractAddress\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022bytes\u0022,\u0022name\u0022:\u0022params\u0022,\u0022type\u0022:\u0022bytes\u0022}],\u0022internalType\u0022:\u0022struct ActionsGateway.ActionData[]\u0022,\u0022name\u0022:\u0022actions\u0022,\u0022type\u0022:\u0022tuple[]\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022seed\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022expiration\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022internalType\u0022:\u0022struct ActionsGateway.OrderData\u0022,\u0022name\u0022:\u0022_orderData\u0022,\u0022type\u0022:\u0022tuple\u0022}],\u0022name\u0022:\u0022getOrderDataClaim\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_target\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_abilities\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022grantAbilities\u0022,\u0022outputs\u0022:[],\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_target\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_abilities\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022isAble\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_signer\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022_claim\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022components\u0022:[{\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022r\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022s\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022internalType\u0022:\u0022uint8\u0022,\u0022name\u0022:\u0022v\u0022,\u0022type\u0022:\u0022uint8\u0022},{\u0022internalType\u0022:\u0022enum ActionsGateway.SignatureKind\u0022,\u0022name\u0022:\u0022kind\u0022,\u0022type\u0022:\u0022uint8\u0022}],\u0022internalType\u0022:\u0022struct ActionsGateway.SignatureData\u0022,\u0022name\u0022:\u0022_signature\u0022,\u0022type\u0022:\u0022tuple\u0022}],\u0022name\u0022:\u0022isValidSignature\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022stateMutability\u0022:\u0022pure\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022orderCancelled\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022orderPerformed\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[{\u0022components\u0022:[{\u0022internalType\u0022:\u0022address[]\u0022,\u0022name\u0022:\u0022signers\u0022,\u0022type\u0022:\u0022address[]\u0022},{\u0022components\u0022:[{\u0022internalType\u0022:\u0022uint32\u0022,\u0022name\u0022:\u0022proxyId\u0022,\u0022type\u0022:\u0022uint32\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022contractAddress\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022bytes\u0022,\u0022name\u0022:\u0022params\u0022,\u0022type\u0022:\u0022bytes\u0022}],\u0022internalType\u0022:\u0022struct ActionsGateway.ActionData[]\u0022,\u0022name\u0022:\u0022actions\u0022,\u0022type\u0022:\u0022tuple[]\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022seed\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022expiration\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022internalType\u0022:\u0022struct ActionsGateway.OrderData\u0022,\u0022name\u0022:\u0022_data\u0022,\u0022type\u0022:\u0022tuple\u0022},{\u0022components\u0022:[{\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022r\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022s\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022internalType\u0022:\u0022uint8\u0022,\u0022name\u0022:\u0022v\u0022,\u0022type\u0022:\u0022uint8\u0022},{\u0022internalType\u0022:\u0022enum ActionsGateway.SignatureKind\u0022,\u0022name\u0022:\u0022kind\u0022,\u0022type\u0022:\u0022uint8\u0022}],\u0022internalType\u0022:\u0022struct ActionsGateway.SignatureData[]\u0022,\u0022name\u0022:\u0022_signatures\u0022,\u0022type\u0022:\u0022tuple[]\u0022}],\u0022name\u0022:\u0022perform\u0022,\u0022outputs\u0022:[],\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022proxies\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022proxyAddress\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022enum ActionsGateway.ActionKind\u0022,\u0022name\u0022:\u0022kind\u0022,\u0022type\u0022:\u0022uint8\u0022}],\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022_claim\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022components\u0022:[{\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022r\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022s\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022internalType\u0022:\u0022uint8\u0022,\u0022name\u0022:\u0022v\u0022,\u0022type\u0022:\u0022uint8\u0022},{\u0022internalType\u0022:\u0022enum ActionsGateway.SignatureKind\u0022,\u0022name\u0022:\u0022kind\u0022,\u0022type\u0022:\u0022uint8\u0022}],\u0022internalType\u0022:\u0022struct ActionsGateway.SignatureData\u0022,\u0022name\u0022:\u0022_signature\u0022,\u0022type\u0022:\u0022tuple\u0022}],\u0022name\u0022:\u0022recoverSigner\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022stateMutability\u0022:\u0022pure\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_index\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022removeProxy\u0022,\u0022outputs\u0022:[],\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_target\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_abilities\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022revokeAbilities\u0022,\u0022outputs\u0022:[],\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_target\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_abilities\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022setAbilities\u0022,\u0022outputs\u0022:[],\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022}]","ContractName":"ActionsGateway","CompilerVersion":"v0.6.1\u002Bcommit.e6f7d5a4","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"ipfs://ae62effa4ed4377964d04a7e641df69cee144444cd9d9b392339f26b9f664797"}]