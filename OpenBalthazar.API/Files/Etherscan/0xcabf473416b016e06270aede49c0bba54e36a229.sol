[{"SourceCode":"pragma solidity 0.4.25;\n\n// File: contracts/saga/interfaces/IRedButton.sol\n\n/**\n * @title Red Button Interface.\n */\ninterface IRedButton {\n    /**\n     * @dev Get the state of the red-button.\n     * @return The state of the red-button.\n     */\n    function isEnabled() external view returns (bool);\n}\n\n// File: contracts/saga/interfaces/IPaymentManager.sol\n\n/**\n * @title Payment Manager Interface.\n */\ninterface IPaymentManager {\n    /**\n     * @dev Retrieve the current number of outstanding payments.\n     * @return The current number of outstanding payments.\n     */\n    function getNumOfPayments() external view returns (uint256);\n\n    /**\n     * @dev Retrieve the sum of all outstanding payments.\n     * @return The sum of all outstanding payments.\n     */\n    function getPaymentsSum() external view returns (uint256);\n\n    /**\n     * @dev Compute differ payment.\n     * @param _ethAmount The amount of ETH entitled by the client.\n     * @param _ethBalance The amount of ETH retained by the payment handler.\n     * @return The amount of differed ETH payment.\n     */\n    function computeDifferPayment(uint256 _ethAmount, uint256 _ethBalance) external view returns (uint256);\n\n    /**\n     * @dev Register a differed payment.\n     * @param _wallet The payment wallet address.\n     * @param _ethAmount The payment amount in ETH.\n     */\n    function registerDifferPayment(address _wallet, uint256 _ethAmount) external;\n}\n\n// File: contracts/saga/interfaces/IReserveManager.sol\n\n/**\n * @title Reserve Manager Interface.\n */\ninterface IReserveManager {\n    /**\n     * @dev Get a deposit-recommendation.\n     * @param _balance The balance of the token-contract.\n     * @return The address of the wallet permitted to deposit ETH into the token-contract.\n     * @return The amount that should be deposited in order for the balance to reach \u0060mid\u0060 ETH.\n     */\n    function getDepositParams(uint256 _balance) external view returns (address, uint256);\n\n    /**\n     * @dev Get a withdraw-recommendation.\n     * @param _balance The balance of the token-contract.\n     * @return The address of the wallet permitted to withdraw ETH into the token-contract.\n     * @return The amount that should be withdrawn in order for the balance to reach \u0060mid\u0060 ETH.\n     */\n    function getWithdrawParams(uint256 _balance) external view returns (address, uint256);\n}\n\n// File: contracts/saga/interfaces/ISGATokenManager.sol\n\n/**\n * @title SGA Token Manager Interface.\n */\ninterface ISGATokenManager {\n    /**\n     * @dev Exchange ETH for SGA.\n     * @param _sender The address of the sender.\n     * @param _ethAmount The amount of ETH received.\n     * @return The amount of SGA that the sender is entitled to.\n     */\n    function exchangeEthForSga(address _sender, uint256 _ethAmount) external returns (uint256);\n\n    /**\n     * @dev Exchange SGA for ETH.\n     * @param _sender The address of the sender.\n     * @param _sgaAmount The amount of SGA received.\n     * @return The amount of ETH that the sender is entitled to.\n     */\n    function exchangeSgaForEth(address _sender, uint256 _sgaAmount) external returns (uint256);\n\n    /**\n     * @dev Handle direct SGA transfer.\n     * @param _sender The address of the sender.\n     * @param _to The address of the destination account.\n     * @param _value The amount of SGA to be transferred.\n     */\n    function uponTransfer(address _sender, address _to, uint256 _value) external;\n\n    /**\n     * @dev Handle custodian SGA transfer.\n     * @param _sender The address of the sender.\n     * @param _from The address of the source account.\n     * @param _to The address of the destination account.\n     * @param _value The amount of SGA to be transferred.\n     */\n    function uponTransferFrom(address _sender, address _from, address _to, uint256 _value) external;\n\n    /**\n     * @dev Handle the operation of ETH deposit into the SGAToken contract.\n     * @param _sender The address of the account which has issued the operation.\n     * @param _balance The amount of ETH in the SGAToken contract.\n     * @param _amount The deposited ETH amount.\n     * @return The address of the reserve-wallet and the deficient amount of ETH in the SGAToken contract.\n     */\n    function uponDeposit(address _sender, uint256 _balance, uint256 _amount) external returns (address, uint256);\n\n    /**\n     * @dev Handle the operation of ETH withdrawal from the SGAToken contract.\n     * @param _sender The address of the account which has issued the operation.\n     * @param _balance The amount of ETH in the SGAToken contract prior the withdrawal.\n     * @return The address of the reserve-wallet and the excessive amount of ETH in the SGAToken contract.\n     */\n    function uponWithdraw(address _sender, uint256 _balance) external returns (address, uint256);\n\n    /** \n     * @dev Upon SGA mint for SGN holders.\n     * @param _value The amount of SGA to mint.\n     */\n    function uponMintSgaForSgnHolders(uint256 _value) external;\n\n    /**\n     * @dev Upon SGA transfer to an SGN holder.\n     * @param _to The address of the SGN holder.\n     * @param _value The amount of SGA to transfer.\n     */\n    function uponTransferSgaToSgnHolder(address _to, uint256 _value) external;\n\n    /**\n     * @dev Upon ETH transfer to an SGA holder.\n     * @param _to The address of the SGA holder.\n     * @param _value The amount of ETH to transfer.\n     * @param _status The operation\u0027s completion-status.\n     */\n    function postTransferEthToSgaHolder(address _to, uint256 _value, bool _status) external;\n\n    /**\n     * @dev Get the address of the reserve-wallet and the deficient amount of ETH in the SGAToken contract.\n     * @return The address of the reserve-wallet and the deficient amount of ETH in the SGAToken contract.\n     */\n    function getDepositParams() external view returns (address, uint256);\n\n    /**\n     * @dev Get the address of the reserve-wallet and the excessive amount of ETH in the SGAToken contract.\n     * @return The address of the reserve-wallet and the excessive amount of ETH in the SGAToken contract.\n     */\n    function getWithdrawParams() external view returns (address, uint256);\n}\n\n// File: contracts/saga/interfaces/ITransactionManager.sol\n\n/**\n * @title Transaction Manager Interface.\n */\ninterface ITransactionManager {\n    /**\n     * @dev Buy SGA in exchange for ETH.\n     * @param _ethAmount The amount of ETH received from the buyer.\n     * @return The amount of SGA that the buyer is entitled to receive.\n     */\n    function buy(uint256 _ethAmount) external returns (uint256);\n\n    /**\n     * @dev Sell SGA in exchange for ETH.\n     * @param _sgaAmount The amount of SGA received from the seller.\n     * @return The amount of ETH that the seller is entitled to receive.\n     */\n    function sell(uint256 _sgaAmount) external returns (uint256);\n}\n\n// File: contracts/saga/interfaces/ISGAAuthorizationManager.sol\n\n/**\n * @title SGA Authorization Manager Interface.\n */\ninterface ISGAAuthorizationManager {\n    /**\n     * @dev Determine whether or not a user is authorized to buy SGA.\n     * @param _sender The address of the user.\n     * @return Authorization status.\n     */\n    function isAuthorizedToBuy(address _sender) external view returns (bool);\n\n    /**\n     * @dev Determine whether or not a user is authorized to sell SGA.\n     * @param _sender The address of the user.\n     * @return Authorization status.\n     */\n    function isAuthorizedToSell(address _sender) external view returns (bool);\n\n    /**\n     * @dev Determine whether or not a user is authorized to transfer SGA to another user.\n     * @param _sender The address of the source user.\n     * @param _target The address of the target user.\n     * @return Authorization status.\n     */\n    function isAuthorizedToTransfer(address _sender, address _target) external view returns (bool);\n\n    /**\n     * @dev Determine whether or not a user is authorized to transfer SGA from one user to another user.\n     * @param _sender The address of the custodian user.\n     * @param _source The address of the source user.\n     * @param _target The address of the target user.\n     * @return Authorization status.\n     */\n    function isAuthorizedToTransferFrom(address _sender, address _source, address _target) external view returns (bool);\n\n    /**\n     * @dev Determine whether or not a user is authorized for public operation.\n     * @param _sender The address of the user.\n     * @return Authorization status.\n     */\n    function isAuthorizedForPublicOperation(address _sender) external view returns (bool);\n}\n\n// File: contracts/contract_address_locator/interfaces/IContractAddressLocator.sol\n\n/**\n * @title Contract Address Locator Interface.\n */\ninterface IContractAddressLocator {\n    /**\n     * @dev Get the contract address mapped to a given identifier.\n     * @param _identifier The identifier.\n     * @return The contract address.\n     */\n    function getContractAddress(bytes32 _identifier) external view returns (address);\n\n    /**\n     * @dev Determine whether or not a contract address relates to one of the identifiers.\n     * @param _contractAddress The contract address to look for.\n     * @param _identifiers The identifiers.\n     * @return A boolean indicating if the contract address relates to one of the identifiers.\n     */\n    function isContractAddressRelates(address _contractAddress, bytes32[] _identifiers) external view returns (bool);\n}\n\n// File: contracts/contract_address_locator/ContractAddressLocatorHolder.sol\n\n/**\n * @title Contract Address Locator Holder.\n * @dev Hold a contract address locator, which maps a unique identifier to every contract address in the system.\n * @dev Any contract which inherits from this contract can retrieve the address of any contract in the system.\n * @dev Thus, any contract can remain \u0022oblivious\u0022 to the replacement of any other contract in the system.\n * @dev In addition to that, any function in any contract can be restricted to a specific caller.\n */\ncontract ContractAddressLocatorHolder {\n    bytes32 internal constant _IAuthorizationDataSource_ = \u0022IAuthorizationDataSource\u0022;\n    bytes32 internal constant _ISGNConversionManager_    = \u0022ISGNConversionManager\u0022      ;\n    bytes32 internal constant _IModelDataSource_         = \u0022IModelDataSource\u0022        ;\n    bytes32 internal constant _IPaymentHandler_          = \u0022IPaymentHandler\u0022            ;\n    bytes32 internal constant _IPaymentManager_          = \u0022IPaymentManager\u0022            ;\n    bytes32 internal constant _IPaymentQueue_            = \u0022IPaymentQueue\u0022              ;\n    bytes32 internal constant _IReconciliationAdjuster_  = \u0022IReconciliationAdjuster\u0022      ;\n    bytes32 internal constant _IIntervalIterator_        = \u0022IIntervalIterator\u0022       ;\n    bytes32 internal constant _IMintHandler_             = \u0022IMintHandler\u0022            ;\n    bytes32 internal constant _IMintListener_            = \u0022IMintListener\u0022           ;\n    bytes32 internal constant _IMintManager_             = \u0022IMintManager\u0022            ;\n    bytes32 internal constant _IPriceBandCalculator_     = \u0022IPriceBandCalculator\u0022       ;\n    bytes32 internal constant _IModelCalculator_         = \u0022IModelCalculator\u0022        ;\n    bytes32 internal constant _IRedButton_               = \u0022IRedButton\u0022              ;\n    bytes32 internal constant _IReserveManager_          = \u0022IReserveManager\u0022         ;\n    bytes32 internal constant _ISagaExchanger_           = \u0022ISagaExchanger\u0022          ;\n    bytes32 internal constant _IMonetaryModel_               = \u0022IMonetaryModel\u0022              ;\n    bytes32 internal constant _IMonetaryModelState_          = \u0022IMonetaryModelState\u0022         ;\n    bytes32 internal constant _ISGAAuthorizationManager_ = \u0022ISGAAuthorizationManager\u0022;\n    bytes32 internal constant _ISGAToken_                = \u0022ISGAToken\u0022               ;\n    bytes32 internal constant _ISGATokenManager_         = \u0022ISGATokenManager\u0022        ;\n    bytes32 internal constant _ISGNAuthorizationManager_ = \u0022ISGNAuthorizationManager\u0022;\n    bytes32 internal constant _ISGNToken_                = \u0022ISGNToken\u0022               ;\n    bytes32 internal constant _ISGNTokenManager_         = \u0022ISGNTokenManager\u0022        ;\n    bytes32 internal constant _IMintingPointTimersManager_             = \u0022IMintingPointTimersManager\u0022            ;\n    bytes32 internal constant _ITradingClasses_          = \u0022ITradingClasses\u0022         ;\n    bytes32 internal constant _IWalletsTradingLimiterValueConverter_        = \u0022IWalletsTLValueConverter\u0022       ;\n    bytes32 internal constant _IWalletsTradingDataSource_       = \u0022IWalletsTradingDataSource\u0022      ;\n    bytes32 internal constant _WalletsTradingLimiter_SGNTokenManager_          = \u0022WalletsTLSGNTokenManager\u0022         ;\n    bytes32 internal constant _WalletsTradingLimiter_SGATokenManager_          = \u0022WalletsTLSGATokenManager\u0022         ;\n    bytes32 internal constant _IETHConverter_             = \u0022IETHConverter\u0022   ;\n    bytes32 internal constant _ITransactionLimiter_      = \u0022ITransactionLimiter\u0022     ;\n    bytes32 internal constant _ITransactionManager_      = \u0022ITransactionManager\u0022     ;\n    bytes32 internal constant _IRateApprover_      = \u0022IRateApprover\u0022     ;\n\n    IContractAddressLocator private contractAddressLocator;\n\n    /**\n     * @dev Create the contract.\n     * @param _contractAddressLocator The contract address locator.\n     */\n    constructor(IContractAddressLocator _contractAddressLocator) internal {\n        require(_contractAddressLocator != address(0), \u0022locator is illegal\u0022);\n        contractAddressLocator = _contractAddressLocator;\n    }\n\n    /**\n     * @dev Get the contract address locator.\n     * @return The contract address locator.\n     */\n    function getContractAddressLocator() external view returns (IContractAddressLocator) {\n        return contractAddressLocator;\n    }\n\n    /**\n     * @dev Get the contract address mapped to a given identifier.\n     * @param _identifier The identifier.\n     * @return The contract address.\n     */\n    function getContractAddress(bytes32 _identifier) internal view returns (address) {\n        return contractAddressLocator.getContractAddress(_identifier);\n    }\n\n\n\n    /**\n     * @dev Determine whether or not the sender relates to one of the identifiers.\n     * @param _identifiers The identifiers.\n     * @return A boolean indicating if the sender relates to one of the identifiers.\n     */\n    function isSenderAddressRelates(bytes32[] _identifiers) internal view returns (bool) {\n        return contractAddressLocator.isContractAddressRelates(msg.sender, _identifiers);\n    }\n\n    /**\n     * @dev Verify that the caller is mapped to a given identifier.\n     * @param _identifier The identifier.\n     */\n    modifier only(bytes32 _identifier) {\n        require(msg.sender == getContractAddress(_identifier), \u0022caller is illegal\u0022);\n        _;\n    }\n\n}\n\n// File: contracts/wallet_trading_limiter/interfaces/IWalletsTradingLimiter.sol\n\n/**\n * @title Wallets Trading Limiter Interface.\n */\ninterface IWalletsTradingLimiter {\n    /**\n     * @dev Increment the limiter value of a wallet.\n     * @param _wallet The address of the wallet.\n     * @param _value The amount to be updated.\n     */\n    function updateWallet(address _wallet, uint256 _value) external;\n}\n\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, reverts on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\n    // benefit is lost if \u0027b\u0027 is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    uint256 c = a * b;\n    require(c / a == b);\n\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b \u003E 0); // Solidity only automatically asserts when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c \u002B a % b); // There is no case in which this doesn\u0027t hold\n\n    return c;\n  }\n\n  /**\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b \u003C= a);\n    uint256 c = a - b;\n\n    return c;\n  }\n\n  /**\n  * @dev Adds two numbers, reverts on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a \u002B b;\n    require(c \u003E= a);\n\n    return c;\n  }\n\n  /**\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n  * reverts when dividing by zero.\n  */\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0);\n    return a % b;\n  }\n}\n\n// File: contracts/saga/SGATokenManager.sol\n\n/**\n * Details of usage of licenced software see here: https://www.saga.org/software/readme_v1\n */\n\n/**\n * @title SGA Token Manager.\n */\ncontract SGATokenManager is ISGATokenManager, ContractAddressLocatorHolder {\n    string public constant VERSION = \u00221.0.0\u0022;\n\n    using SafeMath for uint256;\n\n    event ExchangeEthForSgaCompleted(address indexed _user, uint256 _input, uint256 _output);\n    event ExchangeSgaForEthCompleted(address indexed _user, uint256 _input, uint256 _output);\n    event MintSgaForSgnHoldersCompleted(uint256 _value);\n    event TransferSgaToSgnHolderCompleted(address indexed _to, uint256 _value);\n    event TransferEthToSgaHolderCompleted(address indexed _to, uint256 _value, bool _status);\n    event DepositCompleted(address indexed _sender, uint256 _balance, uint256 _amount);\n    event WithdrawCompleted(address indexed _sender, uint256 _balance, uint256 _amount);\n\n    /**\n     * @dev Create the contract.\n     * @param _contractAddressLocator The contract address locator.\n     */\n    constructor(IContractAddressLocator _contractAddressLocator) ContractAddressLocatorHolder(_contractAddressLocator) public {}\n\n    /**\n     * @dev Return the contract which implements the ISGAAuthorizationManager interface.\n     */\n    function getSGAAuthorizationManager() public view returns (ISGAAuthorizationManager) {\n        return ISGAAuthorizationManager(getContractAddress(_ISGAAuthorizationManager_));\n    }\n\n    /**\n     * @dev Return the contract which implements the ITransactionManager interface.\n     */\n    function getTransactionManager() public view returns (ITransactionManager) {\n        return ITransactionManager(getContractAddress(_ITransactionManager_));\n    }\n\n    /**\n     * @dev Return the contract which implements the IWalletsTradingLimiter interface.\n     */\n    function getWalletsTradingLimiter() public view returns (IWalletsTradingLimiter) {\n        return IWalletsTradingLimiter(getContractAddress(_WalletsTradingLimiter_SGATokenManager_));\n    }\n\n    /**\n     * @dev Return the contract which implements the IReserveManager interface.\n     */\n    function getReserveManager() public view returns (IReserveManager) {\n        return IReserveManager(getContractAddress(_IReserveManager_));\n    }\n\n    /**\n     * @dev Return the contract which implements the IPaymentManager interface.\n     */\n    function getPaymentManager() public view returns (IPaymentManager) {\n        return IPaymentManager(getContractAddress(_IPaymentManager_));\n    }\n\n    /**\n     * @dev Return the contract which implements the IRedButton interface.\n     */\n    function getRedButton() public view returns (IRedButton) {\n        return IRedButton(getContractAddress(_IRedButton_));\n    }\n\n    /**\n     * @dev Reverts if called when the red button is enabled.\n     */\n    modifier onlyIfRedButtonIsNotEnabled() {\n        require(!getRedButton().isEnabled(), \u0022red button is enabled\u0022);\n        _;\n    }\n\n    /**\n     * @dev Exchange ETH for SGA.\n     * @param _sender The address of the sender.\n     * @param _ethAmount The amount of ETH received.\n     * @return The amount of SGA that the sender is entitled to.\n     */\n    function exchangeEthForSga(address _sender, uint256 _ethAmount) external only(_ISGAToken_) onlyIfRedButtonIsNotEnabled returns (uint256) {\n        require(getSGAAuthorizationManager().isAuthorizedToBuy(_sender), \u0022exchanging ETH for SGA is not authorized\u0022);\n        uint256 sgaAmount = getTransactionManager().buy(_ethAmount);\n        emit ExchangeEthForSgaCompleted(_sender, _ethAmount, sgaAmount);\n        getWalletsTradingLimiter().updateWallet(_sender, sgaAmount);\n        return sgaAmount;\n    }\n\n    /**\n     * @dev Exchange SGA for ETH.\n     * @param _sender The address of the sender.\n     * @param _sgaAmount The amount of SGA received.\n     * @return The amount of ETH that the sender is entitled to.\n     */\n    function exchangeSgaForEth(address _sender, uint256 _sgaAmount) external only(_ISGAToken_) onlyIfRedButtonIsNotEnabled returns (uint256) {\n        require(getSGAAuthorizationManager().isAuthorizedToSell(_sender), \u0022exchanging SGA for ETH is not authorized\u0022);\n        uint256 ethAmount = getTransactionManager().sell(_sgaAmount);\n        emit ExchangeSgaForEthCompleted(_sender, _sgaAmount, ethAmount);\n        IPaymentManager paymentManager = getPaymentManager();\n        uint256 paymentETHAmount = paymentManager.computeDifferPayment(ethAmount, msg.sender.balance);\n        if (paymentETHAmount \u003E 0)\n            paymentManager.registerDifferPayment(_sender, paymentETHAmount);\n        assert(ethAmount \u003E= paymentETHAmount);\n        return ethAmount - paymentETHAmount;\n    }\n\n    /**\n     * @dev Handle direct SGA transfer.\n     * @param _sender The address of the sender.\n     * @param _to The address of the destination account.\n     * @param _value The amount of SGA to be transferred.\n     */\n    function uponTransfer(address _sender, address _to, uint256 _value) external only(_ISGAToken_) {\n        require(getSGAAuthorizationManager().isAuthorizedToTransfer(_sender, _to), \u0022direct-transfer of SGA is not authorized\u0022);\n        getWalletsTradingLimiter().updateWallet(_to, _value);\n    }\n\n    /**\n     * @dev Handle custodian SGA transfer.\n     * @param _sender The address of the sender.\n     * @param _from The address of the source account.\n     * @param _to The address of the destination account.\n     * @param _value The amount of SGA to be transferred.\n     */\n    function uponTransferFrom(address _sender, address _from, address _to, uint256 _value) external only(_ISGAToken_) {\n        require(getSGAAuthorizationManager().isAuthorizedToTransferFrom(_sender, _from, _to), \u0022custodian-transfer of SGA is not authorized\u0022);\n        getWalletsTradingLimiter().updateWallet(_to, _value);\n    }\n\n    /**\n     * @dev Handle the operation of ETH deposit into the SGAToken contract.\n     * @param _sender The address of the account which has issued the operation.\n     * @param _balance The amount of ETH in the SGAToken contract.\n     * @param _amount The deposited ETH amount.\n     * @return The address of the reserve-wallet and the deficient amount of ETH in the SGAToken contract.\n     */\n    function uponDeposit(address _sender, uint256 _balance, uint256 _amount) external only(_ISGAToken_) returns (address, uint256) {\n        uint256 ethBalancePriorToDeposit = _balance.sub(_amount);\n        (address wallet, uint256 recommendationAmount) = getReserveManager().getDepositParams(ethBalancePriorToDeposit);\n        require(wallet == _sender, \u0022caller is illegal\u0022);\n        require(recommendationAmount \u003E 0, \u0022operation is not required\u0022);\n        emit DepositCompleted(_sender, ethBalancePriorToDeposit, _amount);\n        return (wallet, recommendationAmount);\n    }\n\n    /**\n     * @dev Handle the operation of ETH withdrawal from the SGAToken contract.\n     * @param _sender The address of the account which has issued the operation.\n     * @param _balance The amount of ETH in the SGAToken contract prior the withdrawal.\n     * @return The address of the reserve-wallet and the excessive amount of ETH in the SGAToken contract.\n     */\n    function uponWithdraw(address _sender, uint256 _balance) external only(_ISGAToken_) returns (address, uint256) {\n        require(getSGAAuthorizationManager().isAuthorizedForPublicOperation(_sender), \u0022withdraw is not authorized\u0022);\n        (address wallet, uint256 amount) = getReserveManager().getWithdrawParams(_balance);\n        require(wallet != address(0), \u0022caller is illegal\u0022);\n        require(amount \u003E 0, \u0022operation is not required\u0022);\n        emit WithdrawCompleted(_sender, _balance, amount);\n        return (wallet, amount);\n    }\n\n    /** \n     * @dev Upon SGA mint for SGN holders.\n     * @param _value The amount of SGA to mint.\n     */\n    function uponMintSgaForSgnHolders(uint256 _value) external only(_ISGAToken_) {\n        emit MintSgaForSgnHoldersCompleted(_value);\n    }\n\n    /**\n     * @dev Upon SGA transfer to an SGN holder.\n     * @param _to The address of the SGN holder.\n     * @param _value The amount of SGA to transfer.\n     */\n    function uponTransferSgaToSgnHolder(address _to, uint256 _value) external only(_ISGAToken_) onlyIfRedButtonIsNotEnabled {\n        emit TransferSgaToSgnHolderCompleted(_to, _value);\n    }\n\n    /**\n     * @dev Upon ETH transfer to an SGA holder.\n     * @param _to The address of the SGA holder.\n     * @param _value The amount of ETH to transfer.\n     * @param _status The operation\u0027s completion-status.\n     */\n    function postTransferEthToSgaHolder(address _to, uint256 _value, bool _status) external only(_ISGAToken_) {\n        emit TransferEthToSgaHolderCompleted(_to, _value, _status);\n    }\n\n    /**\n     * @dev Get the address of the reserve-wallet and the deficient amount of ETH in the SGAToken contract.\n     * @return The address of the reserve-wallet and the deficient amount of ETH in the SGAToken contract.\n     */\n    function getDepositParams() external view only(_ISGAToken_) returns (address, uint256) {\n        return getReserveManager().getDepositParams(msg.sender.balance);\n    }\n\n    /**\n     * @dev Get the address of the reserve-wallet and the excessive amount of ETH in the SGAToken contract.\n     * @return The address of the reserve-wallet and the excessive amount of ETH in the SGAToken contract.\n     */\n    function getWithdrawParams() external view only(_ISGAToken_) returns (address, uint256) {\n        return getReserveManager().getWithdrawParams(msg.sender.balance);\n    }\n}\n","ABI":"[{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022getSGAAuthorizationManager\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_sender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_ethAmount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022exchangeEthForSga\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_value\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_status\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022name\u0022:\u0022postTransferEthToSgaHolder\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022uponMintSgaForSgnHolders\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_sender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_from\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022uponTransferFrom\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022getRedButton\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022getContractAddressLocator\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022getReserveManager\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022getWalletsTradingLimiter\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022getDepositParams\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022getTransactionManager\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_sender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_balance\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022uponWithdraw\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_sender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_sgaAmount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022exchangeSgaForEth\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022getPaymentManager\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_sender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022uponTransfer\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022getWithdrawParams\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022uponTransferSgaToSgnHolder\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_sender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_balance\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022uponDeposit\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022VERSION\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[{\u0022name\u0022:\u0022_contractAddressLocator\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022constructor\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022_user\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022_input\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022_output\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022ExchangeEthForSgaCompleted\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022_user\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022_input\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022_output\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022ExchangeSgaForEthCompleted\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022_value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022MintSgaForSgnHoldersCompleted\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022_to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022_value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022TransferSgaToSgnHolderCompleted\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022_to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022_value\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022_status\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022name\u0022:\u0022TransferEthToSgaHolderCompleted\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022_sender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022_balance\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022_amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022DepositCompleted\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022_sender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022_balance\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022_amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022WithdrawCompleted\u0022,\u0022type\u0022:\u0022event\u0022}]","ContractName":"SGATokenManager","CompilerVersion":"v0.4.25\u002Bcommit.59dbf8f1","OptimizationUsed":"1","Runs":"6000","ConstructorArguments":"000000000000000000000000aabcd54faf94925adbe0df117c62961acecbacdb","Library":"","SwarmSource":"bzzr://94d214adab746eb5b1164d4267dd082d6bfa236d703dd323ed893d8fb26b4c92"}]