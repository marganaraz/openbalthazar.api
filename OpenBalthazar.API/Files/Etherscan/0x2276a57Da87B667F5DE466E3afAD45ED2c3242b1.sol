[{"SourceCode":"// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * \u0060onlyOwner\u0060, which can be aplied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \u0022Ownable: caller is not the owner\u0022);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * \u0060onlyOwner\u0060 functions anymore. Can only be called by the current owner.\r\n     *\r\n     * \u003E Note: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (\u0060newOwner\u0060).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (\u0060newOwner\u0060).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \u0022Ownable: new owner is the zero address\u0022);\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: @daostack/infra/contracts/Reputation.sol\r\n\r\npragma solidity ^0.5.11;\r\n\r\n\r\n\r\n/**\r\n * @title Reputation system\r\n * @dev A DAO has Reputation System which allows peers to rate other peers in order to build trust .\r\n * A reputation is use to assign influence measure to a DAO\u0027S peers.\r\n * Reputation is similar to regular tokens but with one crucial difference: It is non-transferable.\r\n * The Reputation contract maintain a map of address to reputation value.\r\n * It provides an onlyOwner functions to mint and burn reputation _to (or _from) a specific address.\r\n */\r\n\r\ncontract Reputation is Ownable {\r\n\r\n    uint8 public decimals = 18;             //Number of decimals of the smallest unit\r\n    // Event indicating minting of reputation to an address.\r\n    event Mint(address indexed _to, uint256 _amount);\r\n    // Event indicating burning of reputation for an address.\r\n    event Burn(address indexed _from, uint256 _amount);\r\n\r\n      /// @dev \u0060Checkpoint\u0060 is the structure that attaches a block number to a\r\n      ///  given value, the block number attached is the one that last changed the\r\n      ///  value\r\n    struct Checkpoint {\r\n\r\n    // \u0060fromBlock\u0060 is the block number that the value was generated from\r\n        uint128 fromBlock;\r\n\r\n          // \u0060value\u0060 is the amount of reputation at a specific block number\r\n        uint128 value;\r\n    }\r\n\r\n      // \u0060balances\u0060 is the map that tracks the balance of each address, in this\r\n      //  contract when the balance changes the block number that the change\r\n      //  occurred is also included in the map\r\n    mapping (address =\u003E Checkpoint[]) balances;\r\n\r\n      // Tracks the history of the \u0060totalSupply\u0060 of the reputation\r\n    Checkpoint[] totalSupplyHistory;\r\n\r\n    /// @notice Constructor to create a Reputation\r\n    constructor(\r\n    ) public\r\n    {\r\n    }\r\n\r\n    /// @dev This function makes it easy to get the total number of reputation\r\n    /// @return The total number of reputation\r\n    function totalSupply() public view returns (uint256) {\r\n        return totalSupplyAt(block.number);\r\n    }\r\n\r\n  ////////////////\r\n  // Query balance and totalSupply in History\r\n  ////////////////\r\n    /**\r\n    * @dev return the reputation amount of a given owner\r\n    * @param _owner an address of the owner which we want to get his reputation\r\n    */\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return balanceOfAt(_owner, block.number);\r\n    }\r\n\r\n      /// @dev Queries the balance of \u0060_owner\u0060 at a specific \u0060_blockNumber\u0060\r\n      /// @param _owner The address from which the balance will be retrieved\r\n      /// @param _blockNumber The block number when the balance is queried\r\n      /// @return The balance at \u0060_blockNumber\u0060\r\n    function balanceOfAt(address _owner, uint256 _blockNumber)\r\n    public view returns (uint256)\r\n    {\r\n        if ((balances[_owner].length == 0) || (balances[_owner][0].fromBlock \u003E _blockNumber)) {\r\n            return 0;\r\n          // This will return the expected balance during normal situations\r\n        } else {\r\n            return getValueAt(balances[_owner], _blockNumber);\r\n        }\r\n    }\r\n\r\n      /// @notice Total amount of reputation at a specific \u0060_blockNumber\u0060.\r\n      /// @param _blockNumber The block number when the totalSupply is queried\r\n      /// @return The total amount of reputation at \u0060_blockNumber\u0060\r\n    function totalSupplyAt(uint256 _blockNumber) public view returns(uint256) {\r\n        if ((totalSupplyHistory.length == 0) || (totalSupplyHistory[0].fromBlock \u003E _blockNumber)) {\r\n            return 0;\r\n          // This will return the expected totalSupply during normal situations\r\n        } else {\r\n            return getValueAt(totalSupplyHistory, _blockNumber);\r\n        }\r\n    }\r\n\r\n      /// @notice Generates \u0060_amount\u0060 reputation that are assigned to \u0060_owner\u0060\r\n      /// @param _user The address that will be assigned the new reputation\r\n      /// @param _amount The quantity of reputation generated\r\n      /// @return True if the reputation are generated correctly\r\n    function mint(address _user, uint256 _amount) public onlyOwner returns (bool) {\r\n        uint256 curTotalSupply = totalSupply();\r\n        require(curTotalSupply \u002B _amount \u003E= curTotalSupply); // Check for overflow\r\n        uint256 previousBalanceTo = balanceOf(_user);\r\n        require(previousBalanceTo \u002B _amount \u003E= previousBalanceTo); // Check for overflow\r\n        updateValueAtNow(totalSupplyHistory, curTotalSupply \u002B _amount);\r\n        updateValueAtNow(balances[_user], previousBalanceTo \u002B _amount);\r\n        emit Mint(_user, _amount);\r\n        return true;\r\n    }\r\n\r\n      /// @notice Burns \u0060_amount\u0060 reputation from \u0060_owner\u0060\r\n      /// @param _user The address that will lose the reputation\r\n      /// @param _amount The quantity of reputation to burn\r\n      /// @return True if the reputation are burned correctly\r\n    function burn(address _user, uint256 _amount) public onlyOwner returns (bool) {\r\n        uint256 curTotalSupply = totalSupply();\r\n        uint256 amountBurned = _amount;\r\n        uint256 previousBalanceFrom = balanceOf(_user);\r\n        if (previousBalanceFrom \u003C amountBurned) {\r\n            amountBurned = previousBalanceFrom;\r\n        }\r\n        updateValueAtNow(totalSupplyHistory, curTotalSupply - amountBurned);\r\n        updateValueAtNow(balances[_user], previousBalanceFrom - amountBurned);\r\n        emit Burn(_user, amountBurned);\r\n        return true;\r\n    }\r\n\r\n  ////////////////\r\n  // Internal helper functions to query and set a value in a snapshot array\r\n  ////////////////\r\n\r\n      /// @dev \u0060getValueAt\u0060 retrieves the number of reputation at a given block number\r\n      /// @param checkpoints The history of values being queried\r\n      /// @param _block The block number to retrieve the value at\r\n      /// @return The number of reputation being queried\r\n    function getValueAt(Checkpoint[] storage checkpoints, uint256 _block) internal view returns (uint256) {\r\n        if (checkpoints.length == 0) {\r\n            return 0;\r\n        }\r\n\r\n          // Shortcut for the actual value\r\n        if (_block \u003E= checkpoints[checkpoints.length-1].fromBlock) {\r\n            return checkpoints[checkpoints.length-1].value;\r\n        }\r\n        if (_block \u003C checkpoints[0].fromBlock) {\r\n            return 0;\r\n        }\r\n\r\n          // Binary search of the value in the array\r\n        uint256 min = 0;\r\n        uint256 max = checkpoints.length-1;\r\n        while (max \u003E min) {\r\n            uint256 mid = (max \u002B min \u002B 1) / 2;\r\n            if (checkpoints[mid].fromBlock\u003C=_block) {\r\n                min = mid;\r\n            } else {\r\n                max = mid-1;\r\n            }\r\n        }\r\n        return checkpoints[min].value;\r\n    }\r\n\r\n      /// @dev \u0060updateValueAtNow\u0060 used to update the \u0060balances\u0060 map and the\r\n      ///  \u0060totalSupplyHistory\u0060\r\n      /// @param checkpoints The history of data being updated\r\n      /// @param _value The new number of reputation\r\n    function updateValueAtNow(Checkpoint[] storage checkpoints, uint256 _value) internal {\r\n        require(uint128(_value) == _value); //check value is in the 128 bits bounderies\r\n        if ((checkpoints.length == 0) || (checkpoints[checkpoints.length - 1].fromBlock \u003C block.number)) {\r\n            Checkpoint storage newCheckPoint = checkpoints[checkpoints.length\u002B\u002B];\r\n            newCheckPoint.fromBlock = uint128(block.number);\r\n            newCheckPoint.value = uint128(_value);\r\n        } else {\r\n            Checkpoint storage oldCheckPoint = checkpoints[checkpoints.length-1];\r\n            oldCheckPoint.value = uint128(_value);\r\n        }\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see \u0060ERC20Detailed\u0060.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by \u0060account\u0060.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves \u0060amount\u0060 tokens from the caller\u0027s account to \u0060recipient\u0060.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a \u0060Transfer\u0060 event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that \u0060spender\u0060 will be\r\n     * allowed to spend on behalf of \u0060owner\u0060 through \u0060transferFrom\u0060. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when \u0060approve\u0060 or \u0060transferFrom\u0060 are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets \u0060amount\u0060 as the allowance of \u0060spender\u0060 over the caller\u0027s tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * \u003E Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an \u0060Approval\u0060 event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves \u0060amount\u0060 tokens from \u0060sender\u0060 to \u0060recipient\u0060 using the\r\n     * allowance mechanism. \u0060amount\u0060 is then deducted from the caller\u0027s\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a \u0060Transfer\u0060 event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when \u0060value\u0060 tokens are moved from one account (\u0060from\u0060) to\r\n     * another (\u0060to\u0060).\r\n     *\r\n     * Note that \u0060value\u0060 may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a \u0060spender\u0060 for an \u0060owner\u0060 is set by\r\n     * a call to \u0060approve\u0060. \u0060value\u0060 is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity\u0027s arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * \u0060SafeMath\u0060 restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it\u0027s recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060\u002B\u0060 operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a \u002B b;\r\n        require(c \u003E= a, \u0022SafeMath: addition overflow\u0022);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060-\u0060 operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b \u003C= a, \u0022SafeMath: subtraction overflow\u0022);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060*\u0060 operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\r\n        // benefit is lost if \u0027b\u0027 is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \u0022SafeMath: multiplication overflow\u0022);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060/\u0060 operator. Note: this function uses a\r\n     * \u0060revert\u0060 opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b \u003E 0, \u0022SafeMath: division by zero\u0022);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c \u002B a % b); // There is no case in which this doesn\u0027t hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060%\u0060 operator. This function uses a \u0060revert\u0060\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \u0022SafeMath: modulo by zero\u0022);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n/**\r\n * @dev Implementation of the \u0060IERC20\u0060 interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using \u0060_mint\u0060.\r\n * For a generic mechanism see \u0060ERC20Mintable\u0060.\r\n *\r\n * *For a detailed writeup see our guide [How to implement supply\r\n * mechanisms](https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226).*\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning \u0060false\u0060 on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an \u0060Approval\u0060 event is emitted on calls to \u0060transferFrom\u0060.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn\u0027t required by the specification.\r\n *\r\n * Finally, the non-standard \u0060decreaseAllowance\u0060 and \u0060increaseAllowance\u0060\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See \u0060IERC20.approve\u0060.\r\n */\r\ncontract ERC20 is IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address =\u003E uint256) private _balances;\r\n\r\n    mapping (address =\u003E mapping (address =\u003E uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    /**\r\n     * @dev See \u0060IERC20.totalSupply\u0060.\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See \u0060IERC20.balanceOf\u0060.\r\n     */\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See \u0060IERC20.transfer\u0060.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - \u0060recipient\u0060 cannot be the zero address.\r\n     * - the caller must have a balance of at least \u0060amount\u0060.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See \u0060IERC20.allowance\u0060.\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See \u0060IERC20.approve\u0060.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - \u0060spender\u0060 cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 value) public returns (bool) {\r\n        _approve(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See \u0060IERC20.transferFrom\u0060.\r\n     *\r\n     * Emits an \u0060Approval\u0060 event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of \u0060ERC20\u0060;\r\n     *\r\n     * Requirements:\r\n     * - \u0060sender\u0060 and \u0060recipient\u0060 cannot be the zero address.\r\n     * - \u0060sender\u0060 must have a balance of at least \u0060value\u0060.\r\n     * - the caller must have allowance for \u0060sender\u0060\u0027s tokens of at least\r\n     * \u0060amount\u0060.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to \u0060spender\u0060 by the caller.\r\n     *\r\n     * This is an alternative to \u0060approve\u0060 that can be used as a mitigation for\r\n     * problems described in \u0060IERC20.approve\u0060.\r\n     *\r\n     * Emits an \u0060Approval\u0060 event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - \u0060spender\u0060 cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to \u0060spender\u0060 by the caller.\r\n     *\r\n     * This is an alternative to \u0060approve\u0060 that can be used as a mitigation for\r\n     * problems described in \u0060IERC20.approve\u0060.\r\n     *\r\n     * Emits an \u0060Approval\u0060 event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - \u0060spender\u0060 cannot be the zero address.\r\n     * - \u0060spender\u0060 must have allowance for the caller of at least\r\n     * \u0060subtractedValue\u0060.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens \u0060amount\u0060 from \u0060sender\u0060 to \u0060recipient\u0060.\r\n     *\r\n     * This is internal function is equivalent to \u0060transfer\u0060, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a \u0060Transfer\u0060 event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - \u0060sender\u0060 cannot be the zero address.\r\n     * - \u0060recipient\u0060 cannot be the zero address.\r\n     * - \u0060sender\u0060 must have a balance of at least \u0060amount\u0060.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \u0022ERC20: transfer from the zero address\u0022);\r\n        require(recipient != address(0), \u0022ERC20: transfer to the zero address\u0022);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount);\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates \u0060amount\u0060 tokens and assigns them to \u0060account\u0060, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a \u0060Transfer\u0060 event with \u0060from\u0060 set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - \u0060to\u0060 cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \u0022ERC20: mint to the zero address\u0022);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n     /**\r\n     * @dev Destoys \u0060amount\u0060 tokens from \u0060account\u0060, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a \u0060Transfer\u0060 event with \u0060to\u0060 set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - \u0060account\u0060 cannot be the zero address.\r\n     * - \u0060account\u0060 must have at least \u0060amount\u0060 tokens.\r\n     */\r\n    function _burn(address account, uint256 value) internal {\r\n        require(account != address(0), \u0022ERC20: burn from the zero address\u0022);\r\n\r\n        _totalSupply = _totalSupply.sub(value);\r\n        _balances[account] = _balances[account].sub(value);\r\n        emit Transfer(account, address(0), value);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets \u0060amount\u0060 as the allowance of \u0060spender\u0060 over the \u0060owner\u0060s tokens.\r\n     *\r\n     * This is internal function is equivalent to \u0060approve\u0060, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an \u0060Approval\u0060 event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - \u0060owner\u0060 cannot be the zero address.\r\n     * - \u0060spender\u0060 cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 value) internal {\r\n        require(owner != address(0), \u0022ERC20: approve from the zero address\u0022);\r\n        require(spender != address(0), \u0022ERC20: approve to the zero address\u0022);\r\n\r\n        _allowances[owner][spender] = value;\r\n        emit Approval(owner, spender, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Destoys \u0060amount\u0060 tokens from \u0060account\u0060.\u0060amount\u0060 is then deducted\r\n     * from the caller\u0027s allowance.\r\n     *\r\n     * See \u0060_burn\u0060 and \u0060_approve\u0060.\r\n     */\r\n    function _burnFrom(address account, uint256 amount) internal {\r\n        _burn(account, amount);\r\n        _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount));\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Burnable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n/**\r\n * @dev Extension of \u0060ERC20\u0060 that allows token holders to destroy both their own\r\n * tokens and those that they have an allowance for, in a way that can be\r\n * recognized off-chain (via event analysis).\r\n */\r\ncontract ERC20Burnable is ERC20 {\r\n    /**\r\n     * @dev Destoys \u0060amount\u0060 tokens from the caller.\r\n     *\r\n     * See \u0060ERC20._burn\u0060.\r\n     */\r\n    function burn(uint256 amount) public {\r\n        _burn(msg.sender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev See \u0060ERC20._burnFrom\u0060.\r\n     */\r\n    function burnFrom(address account, uint256 amount) public {\r\n        _burnFrom(account, amount);\r\n    }\r\n}\r\n\r\n// File: contracts/controller/DAOToken.sol\r\n\r\npragma solidity ^0.5.11;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title DAOToken, base on zeppelin contract.\r\n * @dev ERC20 compatible token. It is a mintable, burnable token.\r\n */\r\n\r\ncontract DAOToken is ERC20, ERC20Burnable, Ownable {\r\n\r\n    string public name;\r\n    string public symbol;\r\n    // solhint-disable-next-line const-name-snakecase\r\n    uint8 public constant decimals = 18;\r\n    uint256 public cap;\r\n\r\n    /**\r\n    * @dev Constructor\r\n    * @param _name - token name\r\n    * @param _symbol - token symbol\r\n    * @param _cap - token cap - 0 value means no cap\r\n    */\r\n    constructor(string memory _name, string memory _symbol, uint256 _cap)\r\n    public {\r\n        name = _name;\r\n        symbol = _symbol;\r\n        cap = _cap;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to mint tokens\r\n     * @param _to The address that will receive the minted tokens.\r\n     * @param _amount The amount of tokens to mint.\r\n     */\r\n    function mint(address _to, uint256 _amount) public onlyOwner returns (bool) {\r\n        if (cap \u003E 0)\r\n            require(totalSupply().add(_amount) \u003C= cap);\r\n        _mint(_to, _amount);\r\n        return true;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/utils/Address.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type,\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if \u0060account\u0060 is a contract.\r\n     *\r\n     * This test is non-exhaustive, and there may be false-negatives: during the\r\n     * execution of a contract\u0027s constructor, its address will be reported as\r\n     * not containing a contract.\r\n     *\r\n     * \u003E It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size \u003E 0;\r\n    }\r\n}\r\n\r\n// File: contracts/libs/SafeERC20.sol\r\n\r\n/*\r\n\r\nSafeERC20 by daostack.\r\nThe code is based on a fix by SECBIT Team.\r\n\r\nUSE WITH CAUTION \u0026 NO WARRANTY\r\n\r\nREFERENCE \u0026 RELATED READING\r\n- https://github.com/ethereum/solidity/issues/4116\r\n- https://medium.com/@chris_77367/explaining-unexpected-reverts-starting-with-solidity-0-4-22-3ada6e82308c\r\n- https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\r\n- https://gist.github.com/BrendanChou/88a2eeb80947ff00bcf58ffdafeaeb61\r\n\r\n*/\r\npragma solidity ^0.5.11;\r\n\r\n\r\n\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    bytes4 constant private TRANSFER_SELECTOR = bytes4(keccak256(bytes(\u0022transfer(address,uint256)\u0022)));\r\n    bytes4 constant private TRANSFERFROM_SELECTOR = bytes4(keccak256(bytes(\u0022transferFrom(address,address,uint256)\u0022)));\r\n    bytes4 constant private APPROVE_SELECTOR = bytes4(keccak256(bytes(\u0022approve(address,uint256)\u0022)));\r\n\r\n    function safeTransfer(address _erc20Addr, address _to, uint256 _value) internal {\r\n\r\n        // Must be a contract addr first!\r\n        require(_erc20Addr.isContract());\r\n\r\n        (bool success, bytes memory returnValue) =\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        _erc20Addr.call(abi.encodeWithSelector(TRANSFER_SELECTOR, _to, _value));\r\n        // call return false when something wrong\r\n        require(success);\r\n        //check return value\r\n        require(returnValue.length == 0 || (returnValue.length == 32 \u0026\u0026 (returnValue[31] != 0)));\r\n    }\r\n\r\n    function safeTransferFrom(address _erc20Addr, address _from, address _to, uint256 _value) internal {\r\n\r\n        // Must be a contract addr first!\r\n        require(_erc20Addr.isContract());\r\n\r\n        (bool success, bytes memory returnValue) =\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        _erc20Addr.call(abi.encodeWithSelector(TRANSFERFROM_SELECTOR, _from, _to, _value));\r\n        // call return false when something wrong\r\n        require(success);\r\n        //check return value\r\n        require(returnValue.length == 0 || (returnValue.length == 32 \u0026\u0026 (returnValue[31] != 0)));\r\n    }\r\n\r\n    function safeApprove(address _erc20Addr, address _spender, uint256 _value) internal {\r\n\r\n        // Must be a contract addr first!\r\n        require(_erc20Addr.isContract());\r\n\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero.\r\n        require((_value == 0) || (IERC20(_erc20Addr).allowance(address(this), _spender) == 0));\r\n\r\n        (bool success, bytes memory returnValue) =\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        _erc20Addr.call(abi.encodeWithSelector(APPROVE_SELECTOR, _spender, _value));\r\n        // call return false when something wrong\r\n        require(success);\r\n        //check return value\r\n        require(returnValue.length == 0 || (returnValue.length == 32 \u0026\u0026 (returnValue[31] != 0)));\r\n    }\r\n}\r\n\r\n// File: contracts/controller/Avatar.sol\r\n\r\npragma solidity ^0.5.11;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title An Avatar holds tokens, reputation and ether for a controller\r\n */\r\ncontract Avatar is Ownable {\r\n    using SafeERC20 for address;\r\n\r\n    string public orgName;\r\n    DAOToken public nativeToken;\r\n    Reputation public nativeReputation;\r\n\r\n    event GenericCall(address indexed _contract, bytes _data, uint _value, bool _success);\r\n    event SendEther(uint256 _amountInWei, address indexed _to);\r\n    event ExternalTokenTransfer(address indexed _externalToken, address indexed _to, uint256 _value);\r\n    event ExternalTokenTransferFrom(address indexed _externalToken, address _from, address _to, uint256 _value);\r\n    event ExternalTokenApproval(address indexed _externalToken, address _spender, uint256 _value);\r\n    event ReceiveEther(address indexed _sender, uint256 _value);\r\n    event MetaData(string _metaData);\r\n\r\n    /**\r\n    * @dev the constructor takes organization name, native token and reputation system\r\n    and creates an avatar for a controller\r\n    */\r\n    constructor(string memory _orgName, DAOToken _nativeToken, Reputation _nativeReputation) public {\r\n        orgName = _orgName;\r\n        nativeToken = _nativeToken;\r\n        nativeReputation = _nativeReputation;\r\n    }\r\n\r\n    /**\r\n    * @dev enables an avatar to receive ethers\r\n    */\r\n    function() external payable {\r\n        emit ReceiveEther(msg.sender, msg.value);\r\n    }\r\n\r\n    /**\r\n    * @dev perform a generic call to an arbitrary contract\r\n    * @param _contract  the contract\u0027s address to call\r\n    * @param _data ABI-encoded contract call to call \u0060_contract\u0060 address.\r\n    * @param _value value (ETH) to transfer with the transaction\r\n    * @return bool    success or fail\r\n    *         bytes - the return bytes of the called contract\u0027s function.\r\n    */\r\n    function genericCall(address _contract, bytes memory _data, uint256 _value)\r\n    public\r\n    onlyOwner\r\n    returns(bool success, bytes memory returnValue) {\r\n      // solhint-disable-next-line avoid-call-value\r\n        (success, returnValue) = _contract.call.value(_value)(_data);\r\n        emit GenericCall(_contract, _data, _value, success);\r\n    }\r\n\r\n    /**\r\n    * @dev send ethers from the avatar\u0027s wallet\r\n    * @param _amountInWei amount to send in Wei units\r\n    * @param _to send the ethers to this address\r\n    * @return bool which represents success\r\n    */\r\n    function sendEther(uint256 _amountInWei, address payable _to) public onlyOwner returns(bool) {\r\n        _to.transfer(_amountInWei);\r\n        emit SendEther(_amountInWei, _to);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev external token transfer\r\n    * @param _externalToken the token contract\r\n    * @param _to the destination address\r\n    * @param _value the amount of tokens to transfer\r\n    * @return bool which represents success\r\n    */\r\n    function externalTokenTransfer(IERC20 _externalToken, address _to, uint256 _value)\r\n    public onlyOwner returns(bool)\r\n    {\r\n        address(_externalToken).safeTransfer(_to, _value);\r\n        emit ExternalTokenTransfer(address(_externalToken), _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev external token transfer from a specific account\r\n    * @param _externalToken the token contract\r\n    * @param _from the account to spend token from\r\n    * @param _to the destination address\r\n    * @param _value the amount of tokens to transfer\r\n    * @return bool which represents success\r\n    */\r\n    function externalTokenTransferFrom(\r\n        IERC20 _externalToken,\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    )\r\n    public onlyOwner returns(bool)\r\n    {\r\n        address(_externalToken).safeTransferFrom(_from, _to, _value);\r\n        emit ExternalTokenTransferFrom(address(_externalToken), _from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev externalTokenApproval approve the spender address to spend a specified amount of tokens\r\n    *      on behalf of msg.sender.\r\n    * @param _externalToken the address of the Token Contract\r\n    * @param _spender address\r\n    * @param _value the amount of ether (in Wei) which the approval is referring to.\r\n    * @return bool which represents a success\r\n    */\r\n    function externalTokenApproval(IERC20 _externalToken, address _spender, uint256 _value)\r\n    public onlyOwner returns(bool)\r\n    {\r\n        address(_externalToken).safeApprove(_spender, _value);\r\n        emit ExternalTokenApproval(address(_externalToken), _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev metaData emits an event with a string, should contain the hash of some meta data.\r\n    * @param _metaData a string representing a hash of the meta data\r\n    * @return bool which represents a success\r\n    */\r\n    function metaData(string memory _metaData) public onlyOwner returns(bool) {\r\n        emit MetaData(_metaData);\r\n        return true;\r\n    }\r\n\r\n\r\n}\r\n\r\n// File: contracts/globalConstraints/GlobalConstraintInterface.sol\r\n\r\npragma solidity ^0.5.11;\r\n\r\n\r\ncontract GlobalConstraintInterface {\r\n\r\n    enum CallPhase { Pre, Post, PreAndPost }\r\n\r\n    function pre( address _scheme, bytes32 _params, bytes32 _method ) public returns(bool);\r\n    function post( address _scheme, bytes32 _params, bytes32 _method ) public returns(bool);\r\n    /**\r\n     * @dev when return if this globalConstraints is pre, post or both.\r\n     * @return CallPhase enum indication  Pre, Post or PreAndPost.\r\n     */\r\n    function when() public returns(CallPhase);\r\n}\r\n\r\n// File: contracts/controller/ControllerInterface.sol\r\n\r\npragma solidity ^0.5.11;\r\n\r\n\r\n\r\n/**\r\n * @title Controller contract\r\n * @dev A controller controls the organizations tokens ,reputation and avatar.\r\n * It is subject to a set of schemes and constraints that determine its behavior.\r\n * Each scheme has it own parameters and operation permissions.\r\n */\r\ninterface ControllerInterface {\r\n\r\n    /**\r\n     * @dev Mint \u0060_amount\u0060 of reputation that are assigned to \u0060_to\u0060 .\r\n     * @param  _amount amount of reputation to mint\r\n     * @param _to beneficiary address\r\n     * @return bool which represents a success\r\n    */\r\n    function mintReputation(uint256 _amount, address _to, address _avatar)\r\n    external\r\n    returns(bool);\r\n\r\n    /**\r\n     * @dev Burns \u0060_amount\u0060 of reputation from \u0060_from\u0060\r\n     * @param _amount amount of reputation to burn\r\n     * @param _from The address that will lose the reputation\r\n     * @return bool which represents a success\r\n     */\r\n    function burnReputation(uint256 _amount, address _from, address _avatar)\r\n    external\r\n    returns(bool);\r\n\r\n    /**\r\n     * @dev mint tokens .\r\n     * @param  _amount amount of token to mint\r\n     * @param _beneficiary beneficiary address\r\n     * @param _avatar address\r\n     * @return bool which represents a success\r\n     */\r\n    function mintTokens(uint256 _amount, address _beneficiary, address _avatar)\r\n    external\r\n    returns(bool);\r\n\r\n  /**\r\n   * @dev register or update a scheme\r\n   * @param _scheme the address of the scheme\r\n   * @param _paramsHash a hashed configuration of the usage of the scheme\r\n   * @param _permissions the permissions the new scheme will have\r\n   * @param _avatar address\r\n   * @return bool which represents a success\r\n   */\r\n    function registerScheme(address _scheme, bytes32 _paramsHash, bytes4 _permissions, address _avatar)\r\n    external\r\n    returns(bool);\r\n\r\n    /**\r\n     * @dev unregister a scheme\r\n     * @param _avatar address\r\n     * @param _scheme the address of the scheme\r\n     * @return bool which represents a success\r\n     */\r\n    function unregisterScheme(address _scheme, address _avatar)\r\n    external\r\n    returns(bool);\r\n\r\n    /**\r\n     * @dev unregister the caller\u0027s scheme\r\n     * @param _avatar address\r\n     * @return bool which represents a success\r\n     */\r\n    function unregisterSelf(address _avatar) external returns(bool);\r\n\r\n    /**\r\n     * @dev add or update Global Constraint\r\n     * @param _globalConstraint the address of the global constraint to be added.\r\n     * @param _params the constraint parameters hash.\r\n     * @param _avatar the avatar of the organization\r\n     * @return bool which represents a success\r\n     */\r\n    function addGlobalConstraint(address _globalConstraint, bytes32 _params, address _avatar)\r\n    external returns(bool);\r\n\r\n    /**\r\n     * @dev remove Global Constraint\r\n     * @param _globalConstraint the address of the global constraint to be remove.\r\n     * @param _avatar the organization avatar.\r\n     * @return bool which represents a success\r\n     */\r\n    function removeGlobalConstraint (address _globalConstraint, address _avatar)\r\n    external  returns(bool);\r\n\r\n  /**\r\n    * @dev upgrade the Controller\r\n    *      The function will trigger an event \u0027UpgradeController\u0027.\r\n    * @param  _newController the address of the new controller.\r\n    * @param _avatar address\r\n    * @return bool which represents a success\r\n    */\r\n    function upgradeController(address _newController, Avatar _avatar)\r\n    external returns(bool);\r\n\r\n    /**\r\n    * @dev perform a generic call to an arbitrary contract\r\n    * @param _contract  the contract\u0027s address to call\r\n    * @param _data ABI-encoded contract call to call \u0060_contract\u0060 address.\r\n    * @param _avatar the controller\u0027s avatar address\r\n    * @param _value value (ETH) to transfer with the transaction\r\n    * @return bool -success\r\n    *         bytes  - the return value of the called _contract\u0027s function.\r\n    */\r\n    function genericCall(address _contract, bytes calldata _data, Avatar _avatar, uint256 _value)\r\n    external\r\n    returns(bool, bytes memory);\r\n\r\n  /**\r\n   * @dev send some ether\r\n   * @param _amountInWei the amount of ether (in Wei) to send\r\n   * @param _to address of the beneficiary\r\n   * @param _avatar address\r\n   * @return bool which represents a success\r\n   */\r\n    function sendEther(uint256 _amountInWei, address payable _to, Avatar _avatar)\r\n    external returns(bool);\r\n\r\n    /**\r\n    * @dev send some amount of arbitrary ERC20 Tokens\r\n    * @param _externalToken the address of the Token Contract\r\n    * @param _to address of the beneficiary\r\n    * @param _value the amount of ether (in Wei) to send\r\n    * @param _avatar address\r\n    * @return bool which represents a success\r\n    */\r\n    function externalTokenTransfer(IERC20 _externalToken, address _to, uint256 _value, Avatar _avatar)\r\n    external\r\n    returns(bool);\r\n\r\n    /**\r\n    * @dev transfer token \u0022from\u0022 address \u0022to\u0022 address\r\n    *      One must to approve the amount of tokens which can be spend from the\r\n    *      \u0022from\u0022 account.This can be done using externalTokenApprove.\r\n    * @param _externalToken the address of the Token Contract\r\n    * @param _from address of the account to send from\r\n    * @param _to address of the beneficiary\r\n    * @param _value the amount of ether (in Wei) to send\r\n    * @param _avatar address\r\n    * @return bool which represents a success\r\n    */\r\n    function externalTokenTransferFrom(\r\n    IERC20 _externalToken,\r\n    address _from,\r\n    address _to,\r\n    uint256 _value,\r\n    Avatar _avatar)\r\n    external\r\n    returns(bool);\r\n\r\n    /**\r\n    * @dev externalTokenApproval approve the spender address to spend a specified amount of tokens\r\n    *      on behalf of msg.sender.\r\n    * @param _externalToken the address of the Token Contract\r\n    * @param _spender address\r\n    * @param _value the amount of ether (in Wei) which the approval is referring to.\r\n    * @return bool which represents a success\r\n    */\r\n    function externalTokenApproval(IERC20 _externalToken, address _spender, uint256 _value, Avatar _avatar)\r\n    external\r\n    returns(bool);\r\n\r\n    /**\r\n    * @dev metaData emits an event with a string, should contain the hash of some meta data.\r\n    * @param _metaData a string representing a hash of the meta data\r\n    * @param _avatar Avatar\r\n    * @return bool which represents a success\r\n    */\r\n    function metaData(string calldata _metaData, Avatar _avatar) external returns(bool);\r\n\r\n    /**\r\n     * @dev getNativeReputation\r\n     * @param _avatar the organization avatar.\r\n     * @return organization native reputation\r\n     */\r\n    function getNativeReputation(address _avatar)\r\n    external\r\n    view\r\n    returns(address);\r\n\r\n    function isSchemeRegistered( address _scheme, address _avatar) external view returns(bool);\r\n\r\n    function getSchemeParameters(address _scheme, address _avatar) external view returns(bytes32);\r\n\r\n    function getGlobalConstraintParameters(address _globalConstraint, address _avatar) external view returns(bytes32);\r\n\r\n    function getSchemePermissions(address _scheme, address _avatar) external view returns(bytes4);\r\n\r\n    /**\r\n     * @dev globalConstraintsCount return the global constraint pre and post count\r\n     * @return uint256 globalConstraintsPre count.\r\n     * @return uint256 globalConstraintsPost count.\r\n     */\r\n    function globalConstraintsCount(address _avatar) external view returns(uint, uint);\r\n\r\n    function isGlobalConstraintRegistered(address _globalConstraint, address _avatar) external view returns(bool);\r\n}\r\n\r\n// File: contracts/controller/Controller.sol\r\n\r\npragma solidity ^0.5.11;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Controller contract\r\n * @dev A controller controls the organizations tokens, reputation and avatar.\r\n * It is subject to a set of schemes and constraints that determine its behavior.\r\n * Each scheme has it own parameters and operation permissions.\r\n */\r\ncontract Controller is ControllerInterface {\r\n\r\n    struct Scheme {\r\n        bytes32 paramsHash;  // a hash \u0022configuration\u0022 of the scheme\r\n        bytes4  permissions; // A bitwise flags of permissions,\r\n                             // All 0: Not registered,\r\n                             // 1st bit: Flag if the scheme is registered,\r\n                             // 2nd bit: Scheme can register other schemes\r\n                             // 3rd bit: Scheme can add/remove global constraints\r\n                             // 4th bit: Scheme can upgrade the controller\r\n                             // 5th bit: Scheme can call genericCall on behalf of\r\n                             //          the organization avatar\r\n    }\r\n\r\n    struct GlobalConstraint {\r\n        address gcAddress;\r\n        bytes32 params;\r\n    }\r\n\r\n    struct GlobalConstraintRegister {\r\n        bool isRegistered; //is registered\r\n        uint256 index;    //index at globalConstraints\r\n    }\r\n\r\n    mapping(address=\u003EScheme) public schemes;\r\n\r\n    Avatar public avatar;\r\n    DAOToken public nativeToken;\r\n    Reputation public nativeReputation;\r\n  // newController will point to the new controller after the present controller is upgraded\r\n    address public newController;\r\n  // globalConstraintsPre that determine pre conditions for all actions on the controller\r\n\r\n    GlobalConstraint[] public globalConstraintsPre;\r\n  // globalConstraintsPost that determine post conditions for all actions on the controller\r\n    GlobalConstraint[] public globalConstraintsPost;\r\n  // globalConstraintsRegisterPre indicate if a globalConstraints is registered as a pre global constraint\r\n    mapping(address=\u003EGlobalConstraintRegister) public globalConstraintsRegisterPre;\r\n  // globalConstraintsRegisterPost indicate if a globalConstraints is registered as a post global constraint\r\n    mapping(address=\u003EGlobalConstraintRegister) public globalConstraintsRegisterPost;\r\n\r\n    event MintReputation (address indexed _sender, address indexed _to, uint256 _amount);\r\n    event BurnReputation (address indexed _sender, address indexed _from, uint256 _amount);\r\n    event MintTokens (address indexed _sender, address indexed _beneficiary, uint256 _amount);\r\n    event RegisterScheme (address indexed _sender, address indexed _scheme);\r\n    event UnregisterScheme (address indexed _sender, address indexed _scheme);\r\n    event UpgradeController(address indexed _oldController, address _newController);\r\n\r\n    event AddGlobalConstraint(\r\n        address indexed _globalConstraint,\r\n        bytes32 _params,\r\n        GlobalConstraintInterface.CallPhase _when);\r\n\r\n    event RemoveGlobalConstraint(address indexed _globalConstraint, uint256 _index, bool _isPre);\r\n\r\n    constructor( Avatar _avatar) public {\r\n        avatar = _avatar;\r\n        nativeToken = avatar.nativeToken();\r\n        nativeReputation = avatar.nativeReputation();\r\n        schemes[msg.sender] = Scheme({paramsHash: bytes32(0), permissions: bytes4(0x0000001F)});\r\n        emit RegisterScheme (msg.sender, msg.sender);\r\n    }\r\n\r\n  // Do not allow mistaken calls:\r\n   // solhint-disable-next-line payable-fallback\r\n    function() external {\r\n        revert();\r\n    }\r\n\r\n  // Modifiers:\r\n    modifier onlyRegisteredScheme() {\r\n        require(schemes[msg.sender].permissions\u0026bytes4(0x00000001) == bytes4(0x00000001));\r\n        _;\r\n    }\r\n\r\n    modifier onlyRegisteringSchemes() {\r\n        require(schemes[msg.sender].permissions\u0026bytes4(0x00000002) == bytes4(0x00000002));\r\n        _;\r\n    }\r\n\r\n    modifier onlyGlobalConstraintsScheme() {\r\n        require(schemes[msg.sender].permissions\u0026bytes4(0x00000004) == bytes4(0x00000004));\r\n        _;\r\n    }\r\n\r\n    modifier onlyUpgradingScheme() {\r\n        require(schemes[msg.sender].permissions\u0026bytes4(0x00000008) == bytes4(0x00000008));\r\n        _;\r\n    }\r\n\r\n    modifier onlyGenericCallScheme() {\r\n        require(schemes[msg.sender].permissions\u0026bytes4(0x00000010) == bytes4(0x00000010));\r\n        _;\r\n    }\r\n\r\n    modifier onlyMetaDataScheme() {\r\n        require(schemes[msg.sender].permissions\u0026bytes4(0x00000010) == bytes4(0x00000010));\r\n        _;\r\n    }\r\n\r\n    modifier onlySubjectToConstraint(bytes32 func) {\r\n        uint256 idx;\r\n        for (idx = 0; idx \u003C globalConstraintsPre.length; idx\u002B\u002B) {\r\n            require(\r\n            (GlobalConstraintInterface(globalConstraintsPre[idx].gcAddress))\r\n            .pre(msg.sender, globalConstraintsPre[idx].params, func));\r\n        }\r\n        _;\r\n        for (idx = 0; idx \u003C globalConstraintsPost.length; idx\u002B\u002B) {\r\n            require(\r\n            (GlobalConstraintInterface(globalConstraintsPost[idx].gcAddress))\r\n            .post(msg.sender, globalConstraintsPost[idx].params, func));\r\n        }\r\n    }\r\n\r\n    modifier isAvatarValid(address _avatar) {\r\n        require(_avatar == address(avatar));\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Mint \u0060_amount\u0060 of reputation that are assigned to \u0060_to\u0060 .\r\n     * @param  _amount amount of reputation to mint\r\n     * @param _to beneficiary address\r\n     * @return bool which represents a success\r\n     */\r\n    function mintReputation(uint256 _amount, address _to, address _avatar)\r\n    external\r\n    onlyRegisteredScheme\r\n    onlySubjectToConstraint(\u0022mintReputation\u0022)\r\n    isAvatarValid(_avatar)\r\n    returns(bool)\r\n    {\r\n        emit MintReputation(msg.sender, _to, _amount);\r\n        return nativeReputation.mint(_to, _amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Burns \u0060_amount\u0060 of reputation from \u0060_from\u0060\r\n     * @param _amount amount of reputation to burn\r\n     * @param _from The address that will lose the reputation\r\n     * @return bool which represents a success\r\n     */\r\n    function burnReputation(uint256 _amount, address _from, address _avatar)\r\n    external\r\n    onlyRegisteredScheme\r\n    onlySubjectToConstraint(\u0022burnReputation\u0022)\r\n    isAvatarValid(_avatar)\r\n    returns(bool)\r\n    {\r\n        emit BurnReputation(msg.sender, _from, _amount);\r\n        return nativeReputation.burn(_from, _amount);\r\n    }\r\n\r\n    /**\r\n     * @dev mint tokens .\r\n     * @param  _amount amount of token to mint\r\n     * @param _beneficiary beneficiary address\r\n     * @return bool which represents a success\r\n     */\r\n    function mintTokens(uint256 _amount, address _beneficiary, address _avatar)\r\n    external\r\n    onlyRegisteredScheme\r\n    onlySubjectToConstraint(\u0022mintTokens\u0022)\r\n    isAvatarValid(_avatar)\r\n    returns(bool)\r\n    {\r\n        emit MintTokens(msg.sender, _beneficiary, _amount);\r\n        return nativeToken.mint(_beneficiary, _amount);\r\n    }\r\n\r\n  /**\r\n   * @dev register a scheme\r\n   * @param _scheme the address of the scheme\r\n   * @param _paramsHash a hashed configuration of the usage of the scheme\r\n   * @param _permissions the permissions the new scheme will have\r\n   * @return bool which represents a success\r\n   */\r\n    function registerScheme(address _scheme, bytes32 _paramsHash, bytes4 _permissions, address _avatar)\r\n    external\r\n    onlyRegisteringSchemes\r\n    onlySubjectToConstraint(\u0022registerScheme\u0022)\r\n    isAvatarValid(_avatar)\r\n    returns(bool)\r\n    {\r\n\r\n        Scheme memory scheme = schemes[_scheme];\r\n\r\n    // Check scheme has at least the permissions it is changing, and at least the current permissions:\r\n    // Implementation is a bit messy. One must recall logic-circuits ^^\r\n\r\n    // produces non-zero if sender does not have all of the perms that are changing between old and new\r\n        require(bytes4(0x0000001f)\u0026(_permissions^scheme.permissions)\u0026(~schemes[msg.sender].permissions) == bytes4(0));\r\n\r\n    // produces non-zero if sender does not have all of the perms in the old scheme\r\n        require(bytes4(0x0000001f)\u0026(scheme.permissions\u0026(~schemes[msg.sender].permissions)) == bytes4(0));\r\n\r\n    // Add or change the scheme:\r\n        schemes[_scheme].paramsHash = _paramsHash;\r\n        schemes[_scheme].permissions = _permissions|bytes4(0x00000001);\r\n        emit RegisterScheme(msg.sender, _scheme);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev unregister a scheme\r\n     * @param _scheme the address of the scheme\r\n     * @return bool which represents a success\r\n     */\r\n    function unregisterScheme( address _scheme, address _avatar)\r\n    external\r\n    onlyRegisteringSchemes\r\n    onlySubjectToConstraint(\u0022unregisterScheme\u0022)\r\n    isAvatarValid(_avatar)\r\n    returns(bool)\r\n    {\r\n    //check if the scheme is registered\r\n        if (_isSchemeRegistered(_scheme) == false) {\r\n            return false;\r\n        }\r\n    // Check the unregistering scheme has enough permissions:\r\n        require(bytes4(0x0000001f)\u0026(schemes[_scheme].permissions\u0026(~schemes[msg.sender].permissions)) == bytes4(0));\r\n\r\n    // Unregister:\r\n        emit UnregisterScheme(msg.sender, _scheme);\r\n        delete schemes[_scheme];\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev unregister the caller\u0027s scheme\r\n     * @return bool which represents a success\r\n     */\r\n    function unregisterSelf(address _avatar) external isAvatarValid(_avatar) returns(bool) {\r\n        if (_isSchemeRegistered(msg.sender) == false) {\r\n            return false;\r\n        }\r\n        delete schemes[msg.sender];\r\n        emit UnregisterScheme(msg.sender, msg.sender);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev add or update Global Constraint\r\n     * @param _globalConstraint the address of the global constraint to be added.\r\n     * @param _params the constraint parameters hash.\r\n     * @return bool which represents a success\r\n     */\r\n    function addGlobalConstraint(address _globalConstraint, bytes32 _params, address _avatar)\r\n    external\r\n    onlyGlobalConstraintsScheme\r\n    isAvatarValid(_avatar)\r\n    returns(bool)\r\n    {\r\n        GlobalConstraintInterface.CallPhase when = GlobalConstraintInterface(_globalConstraint).when();\r\n        if ((when == GlobalConstraintInterface.CallPhase.Pre)||\r\n            (when == GlobalConstraintInterface.CallPhase.PreAndPost)) {\r\n            if (!globalConstraintsRegisterPre[_globalConstraint].isRegistered) {\r\n                globalConstraintsPre.push(GlobalConstraint(_globalConstraint, _params));\r\n                globalConstraintsRegisterPre[_globalConstraint] =\r\n                GlobalConstraintRegister(true, globalConstraintsPre.length-1);\r\n            }else {\r\n                globalConstraintsPre[globalConstraintsRegisterPre[_globalConstraint].index].params = _params;\r\n            }\r\n        }\r\n        if ((when == GlobalConstraintInterface.CallPhase.Post)||\r\n            (when == GlobalConstraintInterface.CallPhase.PreAndPost)) {\r\n            if (!globalConstraintsRegisterPost[_globalConstraint].isRegistered) {\r\n                globalConstraintsPost.push(GlobalConstraint(_globalConstraint, _params));\r\n                globalConstraintsRegisterPost[_globalConstraint] =\r\n                GlobalConstraintRegister(true, globalConstraintsPost.length-1);\r\n            }else {\r\n                globalConstraintsPost[globalConstraintsRegisterPost[_globalConstraint].index].params = _params;\r\n            }\r\n        }\r\n        emit AddGlobalConstraint(_globalConstraint, _params, when);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev remove Global Constraint\r\n     * @param _globalConstraint the address of the global constraint to be remove.\r\n     * @return bool which represents a success\r\n     */\r\n     // solhint-disable-next-line code-complexity\r\n    function removeGlobalConstraint (address _globalConstraint, address _avatar)\r\n    external\r\n    onlyGlobalConstraintsScheme\r\n    isAvatarValid(_avatar)\r\n    returns(bool)\r\n    {\r\n        GlobalConstraintRegister memory globalConstraintRegister;\r\n        GlobalConstraint memory globalConstraint;\r\n        GlobalConstraintInterface.CallPhase when = GlobalConstraintInterface(_globalConstraint).when();\r\n        bool retVal = false;\r\n\r\n        if ((when == GlobalConstraintInterface.CallPhase.Pre)||\r\n            (when == GlobalConstraintInterface.CallPhase.PreAndPost)) {\r\n            globalConstraintRegister = globalConstraintsRegisterPre[_globalConstraint];\r\n            if (globalConstraintRegister.isRegistered) {\r\n                if (globalConstraintRegister.index \u003C globalConstraintsPre.length-1) {\r\n                    globalConstraint = globalConstraintsPre[globalConstraintsPre.length-1];\r\n                    globalConstraintsPre[globalConstraintRegister.index] = globalConstraint;\r\n                    globalConstraintsRegisterPre[globalConstraint.gcAddress].index = globalConstraintRegister.index;\r\n                }\r\n                globalConstraintsPre.length--;\r\n                delete globalConstraintsRegisterPre[_globalConstraint];\r\n                retVal = true;\r\n            }\r\n        }\r\n        if ((when == GlobalConstraintInterface.CallPhase.Post)||\r\n            (when == GlobalConstraintInterface.CallPhase.PreAndPost)) {\r\n            globalConstraintRegister = globalConstraintsRegisterPost[_globalConstraint];\r\n            if (globalConstraintRegister.isRegistered) {\r\n                if (globalConstraintRegister.index \u003C globalConstraintsPost.length-1) {\r\n                    globalConstraint = globalConstraintsPost[globalConstraintsPost.length-1];\r\n                    globalConstraintsPost[globalConstraintRegister.index] = globalConstraint;\r\n                    globalConstraintsRegisterPost[globalConstraint.gcAddress].index = globalConstraintRegister.index;\r\n                }\r\n                globalConstraintsPost.length--;\r\n                delete globalConstraintsRegisterPost[_globalConstraint];\r\n                retVal = true;\r\n            }\r\n        }\r\n        if (retVal) {\r\n            emit RemoveGlobalConstraint(\r\n            _globalConstraint,\r\n            globalConstraintRegister.index,\r\n            when == GlobalConstraintInterface.CallPhase.Pre\r\n            );\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n  /**\r\n    * @dev upgrade the Controller\r\n    *      The function will trigger an event \u0027UpgradeController\u0027.\r\n    * @param  _newController the address of the new controller.\r\n    * @return bool which represents a success\r\n    */\r\n    function upgradeController(address _newController, Avatar _avatar)\r\n    external\r\n    onlyUpgradingScheme\r\n    isAvatarValid(address(_avatar))\r\n    returns(bool)\r\n    {\r\n        require(newController == address(0));   // so the upgrade could be done once for a contract.\r\n        require(_newController != address(0));\r\n        newController = _newController;\r\n        avatar.transferOwnership(_newController);\r\n        require(avatar.owner() == _newController);\r\n        if (nativeToken.owner() == address(this)) {\r\n            nativeToken.transferOwnership(_newController);\r\n            require(nativeToken.owner() == _newController);\r\n        }\r\n        if (nativeReputation.owner() == address(this)) {\r\n            nativeReputation.transferOwnership(_newController);\r\n            require(nativeReputation.owner() == _newController);\r\n        }\r\n        emit UpgradeController(address(this), newController);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n    * @dev perform a generic call to an arbitrary contract\r\n    * @param _contract  the contract\u0027s address to call\r\n    * @param _data ABI-encoded contract call to call \u0060_contract\u0060 address.\r\n    * @param _avatar the controller\u0027s avatar address\r\n    * @param _value value (ETH) to transfer with the transaction\r\n    * @return bool -success\r\n    *         bytes  - the return value of the called _contract\u0027s function.\r\n    */\r\n    function genericCall(address _contract, bytes calldata _data, Avatar _avatar, uint256 _value)\r\n    external\r\n    onlyGenericCallScheme\r\n    onlySubjectToConstraint(\u0022genericCall\u0022)\r\n    isAvatarValid(address(_avatar))\r\n    returns (bool, bytes memory)\r\n    {\r\n        return avatar.genericCall(_contract, _data, _value);\r\n    }\r\n\r\n  /**\r\n   * @dev send some ether\r\n   * @param _amountInWei the amount of ether (in Wei) to send\r\n   * @param _to address of the beneficiary\r\n   * @return bool which represents a success\r\n   */\r\n    function sendEther(uint256 _amountInWei, address payable _to, Avatar _avatar)\r\n    external\r\n    onlyRegisteredScheme\r\n    onlySubjectToConstraint(\u0022sendEther\u0022)\r\n    isAvatarValid(address(_avatar))\r\n    returns(bool)\r\n    {\r\n        return avatar.sendEther(_amountInWei, _to);\r\n    }\r\n\r\n    /**\r\n    * @dev send some amount of arbitrary ERC20 Tokens\r\n    * @param _externalToken the address of the Token Contract\r\n    * @param _to address of the beneficiary\r\n    * @param _value the amount of ether (in Wei) to send\r\n    * @return bool which represents a success\r\n    */\r\n    function externalTokenTransfer(IERC20 _externalToken, address _to, uint256 _value, Avatar _avatar)\r\n    external\r\n    onlyRegisteredScheme\r\n    onlySubjectToConstraint(\u0022externalTokenTransfer\u0022)\r\n    isAvatarValid(address(_avatar))\r\n    returns(bool)\r\n    {\r\n        return avatar.externalTokenTransfer(_externalToken, _to, _value);\r\n    }\r\n\r\n    /**\r\n    * @dev transfer token \u0022from\u0022 address \u0022to\u0022 address\r\n    *      One must to approve the amount of tokens which can be spend from the\r\n    *      \u0022from\u0022 account.This can be done using externalTokenApprove.\r\n    * @param _externalToken the address of the Token Contract\r\n    * @param _from address of the account to send from\r\n    * @param _to address of the beneficiary\r\n    * @param _value the amount of ether (in Wei) to send\r\n    * @return bool which represents a success\r\n    */\r\n    function externalTokenTransferFrom(\r\n    IERC20 _externalToken,\r\n    address _from,\r\n    address _to,\r\n    uint256 _value,\r\n    Avatar _avatar)\r\n    external\r\n    onlyRegisteredScheme\r\n    onlySubjectToConstraint(\u0022externalTokenTransferFrom\u0022)\r\n    isAvatarValid(address(_avatar))\r\n    returns(bool)\r\n    {\r\n        return avatar.externalTokenTransferFrom(_externalToken, _from, _to, _value);\r\n    }\r\n\r\n    /**\r\n    * @dev externalTokenApproval approve the spender address to spend a specified amount of tokens\r\n    *      on behalf of msg.sender.\r\n    * @param _externalToken the address of the Token Contract\r\n    * @param _spender address\r\n    * @param _value the amount of ether (in Wei) which the approval is referring to.\r\n    * @return bool which represents a success\r\n    */\r\n    function externalTokenApproval(IERC20 _externalToken, address _spender, uint256 _value, Avatar _avatar)\r\n    external\r\n    onlyRegisteredScheme\r\n    onlySubjectToConstraint(\u0022externalTokenIncreaseApproval\u0022)\r\n    isAvatarValid(address(_avatar))\r\n    returns(bool)\r\n    {\r\n        return avatar.externalTokenApproval(_externalToken, _spender, _value);\r\n    }\r\n\r\n    /**\r\n    * @dev metaData emits an event with a string, should contain the hash of some meta data.\r\n    * @param _metaData a string representing a hash of the meta data\r\n    * @param _avatar Avatar\r\n    * @return bool which represents a success\r\n    */\r\n    function metaData(string calldata _metaData, Avatar _avatar)\r\n        external\r\n        onlyMetaDataScheme\r\n        isAvatarValid(address(_avatar))\r\n        returns(bool)\r\n        {\r\n        return avatar.metaData(_metaData);\r\n    }\r\n\r\n    /**\r\n     * @dev getNativeReputation\r\n     * @param _avatar the organization avatar.\r\n     * @return organization native reputation\r\n     */\r\n    function getNativeReputation(address _avatar) external isAvatarValid(_avatar) view returns(address) {\r\n        return address(nativeReputation);\r\n    }\r\n\r\n    function isSchemeRegistered(address _scheme, address _avatar) external isAvatarValid(_avatar) view returns(bool) {\r\n        return _isSchemeRegistered(_scheme);\r\n    }\r\n\r\n    function getSchemeParameters(address _scheme, address _avatar)\r\n    external\r\n    isAvatarValid(_avatar)\r\n    view\r\n    returns(bytes32)\r\n    {\r\n        return schemes[_scheme].paramsHash;\r\n    }\r\n\r\n    function getSchemePermissions(address _scheme, address _avatar)\r\n    external\r\n    isAvatarValid(_avatar)\r\n    view\r\n    returns(bytes4)\r\n    {\r\n        return schemes[_scheme].permissions;\r\n    }\r\n\r\n    function getGlobalConstraintParameters(address _globalConstraint, address) external view returns(bytes32) {\r\n\r\n        GlobalConstraintRegister memory register = globalConstraintsRegisterPre[_globalConstraint];\r\n\r\n        if (register.isRegistered) {\r\n            return globalConstraintsPre[register.index].params;\r\n        }\r\n\r\n        register = globalConstraintsRegisterPost[_globalConstraint];\r\n\r\n        if (register.isRegistered) {\r\n            return globalConstraintsPost[register.index].params;\r\n        }\r\n    }\r\n\r\n   /**\r\n    * @dev globalConstraintsCount return the global constraint pre and post count\r\n    * @return uint256 globalConstraintsPre count.\r\n    * @return uint256 globalConstraintsPost count.\r\n    */\r\n    function globalConstraintsCount(address _avatar)\r\n        external\r\n        isAvatarValid(_avatar)\r\n        view\r\n        returns(uint, uint)\r\n        {\r\n        return (globalConstraintsPre.length, globalConstraintsPost.length);\r\n    }\r\n\r\n    function isGlobalConstraintRegistered(address _globalConstraint, address _avatar)\r\n        external\r\n        isAvatarValid(_avatar)\r\n        view\r\n        returns(bool)\r\n        {\r\n        return (globalConstraintsRegisterPre[_globalConstraint].isRegistered ||\r\n                globalConstraintsRegisterPost[_globalConstraint].isRegistered);\r\n    }\r\n\r\n    function _isSchemeRegistered(address _scheme) private view returns(bool) {\r\n        return (schemes[_scheme].permissions\u0026bytes4(0x00000001) != bytes4(0));\r\n    }\r\n}","ABI":"[{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_scheme\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_avatar\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022unregisterScheme\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022globalConstraintsRegisterPre\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022isRegistered\u0022,\u0022type\u0022:\u0022bool\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022index\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_scheme\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_avatar\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022getSchemeParameters\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022newController\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_newController\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022contract Avatar\u0022,\u0022name\u0022:\u0022_avatar\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022upgradeController\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022globalConstraintsPre\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022gcAddress\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022params\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_globalConstraint\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_avatar\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022removeGlobalConstraint\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022contract IERC20\u0022,\u0022name\u0022:\u0022_externalToken\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_spender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_value\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022contract Avatar\u0022,\u0022name\u0022:\u0022_avatar\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022externalTokenApproval\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022avatar\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022contract Avatar\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_amountInWei\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022address payable\u0022,\u0022name\u0022:\u0022_to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022contract Avatar\u0022,\u0022name\u0022:\u0022_avatar\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022sendEther\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_amount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_beneficiary\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_avatar\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022mintTokens\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_avatar\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022unregisterSelf\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_amount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_from\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_avatar\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022burnReputation\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022globalConstraintsRegisterPost\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022isRegistered\u0022,\u0022type\u0022:\u0022bool\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022index\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_avatar\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022globalConstraintsCount\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022nativeReputation\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022contract Reputation\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_avatar\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022getNativeReputation\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_scheme\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_avatar\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022getSchemePermissions\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bytes4\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bytes4\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_scheme\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_avatar\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022isSchemeRegistered\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022contract IERC20\u0022,\u0022name\u0022:\u0022_externalToken\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_value\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022contract Avatar\u0022,\u0022name\u0022:\u0022_avatar\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022externalTokenTransfer\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022string\u0022,\u0022name\u0022:\u0022_metaData\u0022,\u0022type\u0022:\u0022string\u0022},{\u0022internalType\u0022:\u0022contract Avatar\u0022,\u0022name\u0022:\u0022_avatar\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022metaData\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_contract\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022bytes\u0022,\u0022name\u0022:\u0022_data\u0022,\u0022type\u0022:\u0022bytes\u0022},{\u0022internalType\u0022:\u0022contract Avatar\u0022,\u0022name\u0022:\u0022_avatar\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022genericCall\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022},{\u0022internalType\u0022:\u0022bytes\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bytes\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022schemes\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022paramsHash\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022internalType\u0022:\u0022bytes4\u0022,\u0022name\u0022:\u0022permissions\u0022,\u0022type\u0022:\u0022bytes4\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_globalConstraint\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022getGlobalConstraintParameters\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022nativeToken\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022contract DAOToken\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_globalConstraint\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022_params\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_avatar\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022addGlobalConstraint\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_scheme\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022_paramsHash\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022internalType\u0022:\u0022bytes4\u0022,\u0022name\u0022:\u0022_permissions\u0022,\u0022type\u0022:\u0022bytes4\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_avatar\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022registerScheme\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022globalConstraintsPost\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022gcAddress\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022params\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_amount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_avatar\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022mintReputation\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_globalConstraint\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_avatar\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022isGlobalConstraintRegistered\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022contract IERC20\u0022,\u0022name\u0022:\u0022_externalToken\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_from\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_value\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022contract Avatar\u0022,\u0022name\u0022:\u0022_avatar\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022externalTokenTransferFrom\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022contract Avatar\u0022,\u0022name\u0022:\u0022_avatar\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022constructor\u0022},{\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022fallback\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_sender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022MintReputation\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_sender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_from\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022BurnReputation\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_sender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_beneficiary\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022MintTokens\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_sender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_scheme\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022RegisterScheme\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_sender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_scheme\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022UnregisterScheme\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_oldController\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_newController\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022UpgradeController\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_globalConstraint\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022_params\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022enum GlobalConstraintInterface.CallPhase\u0022,\u0022name\u0022:\u0022_when\u0022,\u0022type\u0022:\u0022uint8\u0022}],\u0022name\u0022:\u0022AddGlobalConstraint\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_globalConstraint\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_index\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022_isPre\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022name\u0022:\u0022RemoveGlobalConstraint\u0022,\u0022type\u0022:\u0022event\u0022}]","ContractName":"Controller","CompilerVersion":"v0.5.11\u002Bcommit.c082d0b4","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000011a96d13789179524104dd1e832bf59c930a9042","Library":"","SwarmSource":"bzzr://253f7c3f73ff924a944808e871059d8d8662e2201802bf81153516bd08117d12"}]