[{"SourceCode":"// hevm: flattened sources of src/2019-11-07_5.5_to_5_and_cap_120M.t.sol\r\npragma solidity \u003E=0.5.10;\r\n\r\n////// lib/ds-exec/src/exec.sol\r\n// exec.sol - base contract used by anything that wants to do \u0022untyped\u0022 calls\r\n\r\n// Copyright (C) 2017  DappHub, LLC\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see \u003Chttp://www.gnu.org/licenses/\u003E.\r\n\r\n/* pragma solidity \u003E=0.4.23; */\r\n\r\ncontract DSExec {\r\n    function tryExec( address target, bytes memory data, uint value)\r\n             internal\r\n             returns (bool ok)\r\n    {\r\n        assembly {\r\n            ok := call(gas, target, value, add(data, 0x20), mload(data), 0, 0)\r\n        }\r\n    }\r\n    function exec( address target, bytes memory data, uint value)\r\n             internal\r\n    {\r\n        if(!tryExec(target, data, value)) {\r\n            revert(\u0022ds-exec-call-failed\u0022);\r\n        }\r\n    }\r\n\r\n    // Convenience aliases\r\n    function exec( address t, bytes memory c )\r\n        internal\r\n    {\r\n        exec(t, c, 0);\r\n    }\r\n    function exec( address t, uint256 v )\r\n        internal\r\n    {\r\n        bytes memory c; exec(t, c, v);\r\n    }\r\n    function tryExec( address t, bytes memory c )\r\n        internal\r\n        returns (bool)\r\n    {\r\n        return tryExec(t, c, 0);\r\n    }\r\n    function tryExec( address t, uint256 v )\r\n        internal\r\n        returns (bool)\r\n    {\r\n        bytes memory c; return tryExec(t, c, v);\r\n    }\r\n}\r\n\r\n////// lib/ds-note/src/note.sol\r\n/// note.sol -- the \u0060note\u0027 modifier, for logging calls as events\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program.  If not, see \u003Chttp://www.gnu.org/licenses/\u003E.\r\n\r\n/* pragma solidity \u003E=0.4.23; */\r\n\r\ncontract DSNote {\r\n    event LogNote(\r\n        bytes4   indexed  sig,\r\n        address  indexed  guy,\r\n        bytes32  indexed  foo,\r\n        bytes32  indexed  bar,\r\n        uint256           wad,\r\n        bytes             fax\r\n    ) anonymous;\r\n\r\n    modifier note {\r\n        bytes32 foo;\r\n        bytes32 bar;\r\n        uint256 wad;\r\n\r\n        assembly {\r\n            foo := calldataload(4)\r\n            bar := calldataload(36)\r\n            wad := callvalue\r\n        }\r\n\r\n        emit LogNote(msg.sig, msg.sender, foo, bar, wad, msg.data);\r\n\r\n        _;\r\n    }\r\n}\r\n\r\n////// src/2019-11-07_5.5_to_5_and_cap_120M.t.sol\r\n// 2019-11-07_5.5_to_5_and_cap_120M.t.sol\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program. If not, see \u003Chttp://www.gnu.org/licenses/\u003E.\r\n\r\n/* pragma solidity \u003E=0.5.10; */\r\n\r\n/* import \u0022ds-test/test.sol\u0022; */\r\n/* import \u0022ds-exec/exec.sol\u0022; */\r\n/* import \u0022ds-note/note.sol\u0022; */\r\n\r\ninterface SaiTub {\r\n    function fee() external view returns (uint256);\r\n    function cap() external view returns (uint256);\r\n    function mat() external view returns (uint256);\r\n    function drip() external;\r\n}\r\n\r\ninterface ERC20 {\r\n    function allowance(address,address) external view returns (uint256);\r\n    function balanceOf(address) external view returns (uint256);\r\n    function totalSupply() external view returns (uint256);\r\n    function approve(address,uint256) external returns (bool);\r\n}\r\n\r\ninterface DSChief {\r\n    function hat() external view returns (address);\r\n    function GOV() external view returns (address);\r\n    function IOU() external view returns (address);\r\n    function approvals(address) external view returns (uint256);\r\n    function lock(uint wad) external;\r\n    function free(uint wad) external;\r\n    function vote(address[] calldata yays) external returns (bytes32);\r\n    function vote(bytes32 slate) external;\r\n    function lift(address whom) external;\r\n}\r\n\r\ncontract RaiseCeilingLowerSF is DSExec, DSNote {\r\n\r\n    uint256 constant public CAP  = 120000000 * 10 ** 18; // 120,000,000 DAI\r\n    uint256 constant public FEE  = 1000000001547125957863212448;\r\n    address constant public MOM  = 0xF2C5369cFFb8Ea6284452b0326e326DbFdCb867C; // SaiMom\r\n\r\n    bool public done;\r\n\r\n    function cast() public note {\r\n        require(!done);\r\n        done = true;\r\n\r\n        // increase cap to 120,000,000\r\n        exec(MOM, abi.encodeWithSignature(\u0022setCap(uint256)\u0022, CAP), 0);\r\n\r\n        // decrease fee to 5.0\r\n        exec(MOM, abi.encodeWithSignature(\u0022setFee(uint256)\u0022, FEE), 0);\r\n\r\n    }\r\n}","ABI":"[{\u0022anonymous\u0022:true,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022bytes4\u0022,\u0022name\u0022:\u0022sig\u0022,\u0022type\u0022:\u0022bytes4\u0022},{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022guy\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022foo\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022bar\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022wad\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022bytes\u0022,\u0022name\u0022:\u0022fax\u0022,\u0022type\u0022:\u0022bytes\u0022}],\u0022name\u0022:\u0022LogNote\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022CAP\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022FEE\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022MOM\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022cast\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022done\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022}]","ContractName":"RaiseCeilingLowerSF","CompilerVersion":"v0.5.12\u002Bcommit.7709ece9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://d72c16a49a1813de2ccf63c47b4b52fe3a240af138684e88a63082d33eff7d8c"}]