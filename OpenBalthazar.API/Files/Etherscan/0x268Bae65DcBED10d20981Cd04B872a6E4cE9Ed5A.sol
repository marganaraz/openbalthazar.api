[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\ninterface ConflictResolutionInterface {\r\n    function minHouseStake(uint activeGames) external view returns(uint);\r\n\r\n    function maxBalance() external view returns(int);\r\n\r\n    function conflictEndFine() external pure returns(int);\r\n\r\n    function isValidBet(uint8 _gameType, uint _betNum, uint _betValue) external view returns(bool);\r\n\r\n    function endGameConflict(\r\n        uint8 _gameType,\r\n        uint _betNum,\r\n        uint _betValue,\r\n        int _balance,\r\n        uint _stake,\r\n        bytes32 _serverSeed,\r\n        bytes32 _userSeed\r\n    )\r\n        external\r\n        view\r\n        returns(int);\r\n\r\n    function serverForceGameEnd(\r\n        uint8 gameType,\r\n        uint _betNum,\r\n        uint _betValue,\r\n        int _balance,\r\n        uint _stake,\r\n        bytes32 _serverSeed,\r\n        bytes32 _userSeed,\r\n        uint _endInitiatedTime\r\n    )\r\n        external\r\n        view\r\n        returns(int);\r\n\r\n    function userForceGameEnd(\r\n        uint8 _gameType,\r\n        uint _betNum,\r\n        uint _betValue,\r\n        int _balance,\r\n        uint _stake,\r\n        uint _endInitiatedTime\r\n    )\r\n        external\r\n        view\r\n        returns(int);\r\n}\r\n\r\nlibrary MathUtil {\r\n    /**\r\n     * @dev Returns the absolute value of _val.\r\n     * @param _val value\r\n     * @return The absolute value of _val.\r\n     */\r\n    function abs(int _val) internal pure returns(uint) {\r\n        if (_val \u003C 0) {\r\n            return uint(-_val);\r\n        } else {\r\n            return uint(_val);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Calculate maximum.\r\n     */\r\n    function max(uint _val1, uint _val2) internal pure returns(uint) {\r\n        return _val1 \u003E= _val2 ? _val1 : _val2;\r\n    }\r\n\r\n    /**\r\n     * @dev Calculate minimum.\r\n     */\r\n    function min(uint _val1, uint _val2) internal pure returns(uint) {\r\n        return _val1 \u003C= _val2 ? _val1 : _val2;\r\n    }\r\n}\r\n\r\nlibrary SafeCast {\r\n    /**\r\n     * Cast unsigned a to signed a.\r\n     */\r\n    function castToInt(uint a) internal pure returns(int) {\r\n        assert(a \u003C (1 \u003C\u003C 255));\r\n        return int(a);\r\n    }\r\n\r\n    /**\r\n     * Cast signed a to unsigned a.\r\n     */\r\n    function castToUint(int a) internal pure returns(uint) {\r\n        assert(a \u003E= 0);\r\n        return uint(a);\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two unsigned integers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        // Gas optimization: this is cheaper than asserting \u0027a\u0027 not being zero, but the\r\n        // benefit is lost if \u0027b\u0027 is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Multiplies two signed integers, throws on overflow.\r\n    */\r\n    function mul(int256 a, int256 b) internal pure returns (int256) {\r\n        // Gas optimization: this is cheaper than asserting \u0027a\u0027 not being zero, but the\r\n        // benefit is lost if \u0027b\u0027 is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        int256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two unsigned integers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b \u003E 0); // Solidity automatically throws when dividing by 0\r\n        // uint256 c = a / b;\r\n        // assert(a == b * c \u002B a % b); // There is no case in which this doesn\u0027t hold\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two signed integers, truncating the quotient.\r\n    */\r\n    function div(int256 a, int256 b) internal pure returns (int256) {\r\n        // assert(b \u003E 0); // Solidity automatically throws when dividing by 0\r\n        // Overflow only happens when the smallest negative int is multiplied by -1.\r\n        int256 INT256_MIN = int256((uint256(1) \u003C\u003C 255));\r\n        assert(a != INT256_MIN || b != - 1);\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two unsigned integers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b \u003C= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two signed integers, throws on overflow.\r\n    */\r\n    function sub(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a - b;\r\n        assert((b \u003E= 0 \u0026\u0026 c \u003C= a) || (b \u003C 0 \u0026\u0026 c \u003E a));\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two unsigned integers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a \u002B b;\r\n        assert(c \u003E= a);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two signed integers, throws on overflow.\r\n    */\r\n    function add(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a \u002B b;\r\n        assert((b \u003E= 0 \u0026\u0026 c \u003E= a) || (b \u003C 0 \u0026\u0026 c \u003C a));\r\n        return c;\r\n    }\r\n}\r\n\r\ninterface GameInterface {\r\n    function maxBet(uint _num, uint _bankRoll) external view returns(uint);\r\n\r\n    function resultNumber(bytes32 _serverSeed, bytes32 _userSeed, uint _num) external view returns(uint);\r\n\r\n    function userProfit(uint _num, uint _betValue, uint _resultNum) external view returns(int);\r\n\r\n    function maxUserProfit(uint _num, uint _betValue) external view returns(int);\r\n}\r\n\r\ncontract Games {\r\n    using SafeMath for int;\r\n    using SafeMath for uint;\r\n\r\n    mapping (uint =\u003E GameInterface) public games;\r\n\r\n    /**\r\n     * @dev constructor\r\n     * @param gameContracts addresses of different game implementations.\r\n     */\r\n    constructor(address[] memory gameContracts) public {\r\n        for (uint i = 0; i \u003C gameContracts.length; i\u002B\u002B) {\r\n            // set first GameInterface to 0 0 =\u003E start with i \u002B 1\r\n            games[i \u002B 1] = GameInterface(gameContracts[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the max allowed bet for a specific game.\r\n     * @param _gameType game identifier.\r\n     * @param _num game specific bet number.\r\n     * @param _bankRoll bank roll size.\r\n     * @return max allowed bet.\r\n     */\r\n    function maxBet(uint8 _gameType, uint _num, uint _bankRoll) public view returns(uint) {\r\n        uint maxBetVal = getGameImplementation(_gameType).maxBet(_num, _bankRoll);\r\n        return maxBetVal.add(5e14).div(1e15).mul(1e15); // round to multiple of 0.001 Ether\r\n    }\r\n\r\n    /**\r\n     * @dev Calculates the result of the bet.\r\n     * @param _gameType game identifier.\r\n     * @param _serverSeed server seed.\r\n     * @param _userSeed user seed.\r\n     * @param _num game specific bet number.\r\n     * @return result number.\r\n     */\r\n    function resultNumber(uint8 _gameType, bytes32 _serverSeed, bytes32 _userSeed, uint _num) public view returns(uint) {\r\n        return getGameImplementation(_gameType).resultNumber(_serverSeed, _userSeed, _num);\r\n    }\r\n\r\n    /**\r\n     * @dev Calculates the user profit for the bet.\r\n     * @param _gameType game identifier.\r\n     * @param _num game specific bet number.\r\n     * @param _betValue bet value.\r\n     * @param _resultNum bet result.\r\n     * @return user profit.\r\n     */\r\n    function userProfit(uint8 _gameType, uint _num, uint _betValue, uint _resultNum) public view returns(int) {\r\n        uint betValue = _betValue / 1e9; // convert to gwei\r\n\r\n        int res = getGameImplementation(_gameType).userProfit(_num, betValue, _resultNum);\r\n\r\n        return res.mul(1e9); // convert to wei\r\n    }\r\n\r\n    /**\r\n     * @dev Calculates the maximal posible user profit for the given bet.\r\n     * @param _gameType game identifier.\r\n     * @param _num game specific bet number e.g. 0 or 1 for RollADice.\r\n     * @param _betValue bet value.\r\n     * @return max user profit.\r\n     */\r\n    function maxUserProfit(uint8 _gameType, uint _num, uint _betValue) public view returns(int) {\r\n        uint betValue = _betValue / 1e9; // convert to gwei\r\n\r\n        int res = getGameImplementation(_gameType).maxUserProfit(_num, betValue);\r\n\r\n        return res.mul(1e9); // convert to wei\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the game implementation contract for the given game type.\r\n     * @param _gameType game identifier.\r\n     * @return game implementation contract.\r\n     */\r\n    function getGameImplementation(uint8 _gameType) private view returns(GameInterface) {\r\n        require(games[_gameType] != GameInterface(0), \u0022Invalid game type\u0022);\r\n        return games[_gameType];\r\n\r\n    }\r\n}\r\n\r\ncontract ConflictResolution is ConflictResolutionInterface, Games {\r\n    using SafeCast for int;\r\n    using SafeCast for uint;\r\n    using SafeMath for int;\r\n    using SafeMath for uint;\r\n\r\n    uint public constant SERVER_TIMEOUT = 6 hours;\r\n    uint public constant USER_TIMEOUT = 6 hours;\r\n\r\n    uint public constant MIN_BET_VALUE = 1e13; /// min 0.00001 ether bet\r\n    uint public constant MIN_BANKROLL = 40e18;\r\n\r\n    int public constant NOT_ENDED_FINE = 1e15; /// 0.001 ether\r\n\r\n    int public constant CONFLICT_END_FINE = 1e15; /// 0.001 ether\r\n\r\n    int public constant MAX_BALANCE = int(MIN_BANKROLL / 2);\r\n\r\n    modifier onlyValidBet(uint8 _gameType, uint _betNum, uint _betValue) {\r\n        require(isValidBet(_gameType, _betNum, _betValue), \u0022inv bet\u0022);\r\n        _;\r\n    }\r\n\r\n    modifier onlyValidBalance(int _balance, uint _gameStake) {\r\n        require(-_gameStake.castToInt() \u003C= _balance \u0026\u0026 _balance \u003C= MAX_BALANCE, \u0022inv balance\u0022);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev constructor\r\n     * @param games the games specific contracts.\r\n     */\r\n    constructor(address[] memory games) Games(games) public {\r\n        // Nothing to do\r\n    }\r\n\r\n    /**\r\n     * @return Conflict end fine.\r\n     */\r\n    function conflictEndFine() public pure returns(int) {\r\n        return CONFLICT_END_FINE;\r\n    }\r\n\r\n    /**\r\n     * @return Max balance.\r\n     */\r\n    function maxBalance() public view returns(int) {\r\n        return MAX_BALANCE;\r\n    }\r\n\r\n    /**\r\n     * Calculate minimum needed house stake.\r\n     */\r\n    function minHouseStake(uint activeGames) public view returns(uint) {\r\n        return  MathUtil.min(activeGames, 1) * MIN_BANKROLL;\r\n    }\r\n\r\n    /**\r\n     * @dev Check if bet is valid.\r\n     * @param _gameType Game type.\r\n     * @param _betNum Number of bet.\r\n     * @param _betValue Value of bet.\r\n     * @return True if bet is valid false otherwise.\r\n     */\r\n    function isValidBet(uint8 _gameType, uint _betNum, uint _betValue) public view returns(bool) {\r\n        bool validMinBetValue = MIN_BET_VALUE \u003C= _betValue;\r\n        bool validMaxBetValue = _betValue \u003C= Games.maxBet(_gameType, _betNum, MIN_BANKROLL);\r\n        return validMinBetValue \u0026\u0026 validMaxBetValue;\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Calculates game result and returns new balance.\r\n     * @param _gameType Type of game.\r\n     * @param _betNum Bet number.\r\n     * @param _betValue Value of bet.\r\n     * @param _balance Current balance.\r\n     * @param _serverSeed Server\u0027s seed of current round.\r\n     * @param _userSeed User\u0027s seed of current round.\r\n     * @return New game session balance.\r\n     */\r\n    function endGameConflict(\r\n        uint8 _gameType,\r\n        uint _betNum,\r\n        uint _betValue,\r\n        int _balance,\r\n        uint _stake,\r\n        bytes32 _serverSeed,\r\n        bytes32 _userSeed\r\n    )\r\n        public\r\n        view\r\n        onlyValidBet(_gameType, _betNum, _betValue)\r\n        onlyValidBalance(_balance, _stake)\r\n        returns(int)\r\n    {\r\n        require(_serverSeed != 0 \u0026\u0026 _userSeed != 0, \u0022inv seeds\u0022);\r\n\r\n        int newBalance =  processBet(_gameType, _betNum, _betValue, _balance, _serverSeed, _userSeed);\r\n\r\n        // user need to pay a fee when conflict ended.\r\n        // this ensures a malicious, rich user can not just generate game sessions and then wait\r\n        // for us to end the game session and then confirm the session status, so\r\n        // we would have to pay a high gas fee without profit.\r\n        newBalance = newBalance.sub(CONFLICT_END_FINE);\r\n\r\n        // do not allow balance below user stake\r\n        int stake = _stake.castToInt();\r\n        if (newBalance \u003C -stake) {\r\n            newBalance = -stake;\r\n        }\r\n\r\n        return newBalance;\r\n    }\r\n\r\n    /**\r\n     * @dev Force end of game if user does not respond. Only possible after a time period.\r\n     * to give the user a chance to respond.\r\n     * @param _gameType Game type.\r\n     * @param _betNum Bet number.\r\n     * @param _betValue Bet value.\r\n     * @param _balance Current balance.\r\n     * @param _stake User stake.\r\n     * @param _endInitiatedTime Time server initiated end.\r\n     * @return New game session balance.\r\n     */\r\n    function serverForceGameEnd(\r\n        uint8 _gameType,\r\n        uint _betNum,\r\n        uint _betValue,\r\n        int _balance,\r\n        uint _stake,\r\n        bytes32 _serverSeed,\r\n        bytes32 _userSeed,\r\n        uint _endInitiatedTime\r\n    )\r\n        public\r\n        view\r\n        onlyValidBalance(_balance, _stake)\r\n        returns(int)\r\n    {\r\n        require(_endInitiatedTime \u002B SERVER_TIMEOUT \u003C= block.timestamp, \u0022too low timeout\u0022);\r\n        require((_gameType == 0 \u0026\u0026 _betNum == 0 \u0026\u0026 _betValue == 0 \u0026\u0026 _balance == 0)\r\n                || isValidBet(_gameType, _betNum, _betValue), \u0022inv bet\u0022);\r\n\r\n\r\n        // if no bet was placed (cancelActiveGame) set new balance to 0\r\n        int newBalance = 0;\r\n\r\n        // a bet was placed calculate new balance\r\n        if (_gameType != 0) {\r\n            newBalance = processBet(_gameType, _betNum, _betValue, _balance, _serverSeed, _userSeed);\r\n        }\r\n\r\n        // penalize user as he didn\u0027t end game\r\n        newBalance = newBalance.sub(NOT_ENDED_FINE);\r\n\r\n        // do not allow balance below user stake\r\n        int stake = _stake.castToInt();\r\n        if (newBalance \u003C -stake) {\r\n            newBalance = -stake;\r\n        }\r\n\r\n        return newBalance;\r\n    }\r\n\r\n    /**\r\n     * @dev Force end of game if server does not respond. Only possible after a time period\r\n     * to give the server a chance to respond.\r\n     * @param _gameType Game type.\r\n     * @param _betNum Bet number.\r\n     * @param _betValue Value of bet.\r\n     * @param _balance Current balance.\r\n     * @param _endInitiatedTime Time server initiated end.\r\n     * @return New game session balance.\r\n     */\r\n    function userForceGameEnd(\r\n        uint8 _gameType,\r\n        uint _betNum,\r\n        uint _betValue,\r\n        int _balance,\r\n        uint  _stake,\r\n        uint _endInitiatedTime\r\n    )\r\n        public\r\n        view\r\n        onlyValidBalance(_balance, _stake)\r\n        returns(int)\r\n    {\r\n        require(_endInitiatedTime \u002B USER_TIMEOUT \u003C= block.timestamp, \u0022too low timeout\u0022);\r\n        require((_gameType == 0 \u0026\u0026 _betNum == 0 \u0026\u0026 _betValue == 0 \u0026\u0026 _balance == 0)\r\n                || isValidBet(_gameType, _betNum, _betValue), \u0022inv bet\u0022);\r\n\r\n        int profit = 0;\r\n        if (_gameType == 0 \u0026\u0026 _betNum == 0 \u0026\u0026 _betValue == 0 \u0026\u0026 _balance == 0) {\r\n            // user cancelled game without playing\r\n            profit = 0;\r\n        } else {\r\n            profit = Games.maxUserProfit(_gameType, _betNum, _betValue);\r\n        }\r\n\r\n        // penalize server as it didn\u0027t end game\r\n        profit = profit.add(NOT_ENDED_FINE);\r\n\r\n        return _balance.add(profit);\r\n    }\r\n\r\n    /**\r\n     * @dev Calculate new balance after executing bet.\r\n     * @param _gameType game type.\r\n     * @param _betNum Bet Number.\r\n     * @param _betValue Value of bet.\r\n     * @param _balance Current balance.\r\n     * @param _serverSeed Server\u0027s seed\r\n     * @param _userSeed User\u0027s seed\r\n     * return new balance.\r\n     */\r\n    function processBet(\r\n        uint8 _gameType,\r\n        uint _betNum,\r\n        uint _betValue,\r\n        int _balance,\r\n        bytes32 _serverSeed,\r\n        bytes32 _userSeed\r\n    )\r\n        public\r\n        view\r\n        returns (int)\r\n    {\r\n        uint resNum = Games.resultNumber(_gameType, _serverSeed, _userSeed, _betNum);\r\n        int profit = Games.userProfit(_gameType, _betNum, _betValue, resNum);\r\n        return _balance.add(profit);\r\n    }\r\n}","ABI":"[{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_gameType\u0022,\u0022type\u0022:\u0022uint8\u0022},{\u0022name\u0022:\u0022_betNum\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_betValue\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022isValidBet\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_gameType\u0022,\u0022type\u0022:\u0022uint8\u0022},{\u0022name\u0022:\u0022_betNum\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_betValue\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_balance\u0022,\u0022type\u0022:\u0022int256\u0022},{\u0022name\u0022:\u0022_stake\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_endInitiatedTime\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022userForceGameEnd\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022int256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022games\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_gameType\u0022,\u0022type\u0022:\u0022uint8\u0022},{\u0022name\u0022:\u0022_betNum\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_betValue\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_balance\u0022,\u0022type\u0022:\u0022int256\u0022},{\u0022name\u0022:\u0022_stake\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_serverSeed\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022name\u0022:\u0022_userSeed\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022endGameConflict\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022int256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_gameType\u0022,\u0022type\u0022:\u0022uint8\u0022},{\u0022name\u0022:\u0022_num\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_betValue\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022maxUserProfit\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022int256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022MIN_BET_VALUE\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022CONFLICT_END_FINE\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022int256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022maxBalance\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022int256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022activeGames\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022minHouseStake\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_gameType\u0022,\u0022type\u0022:\u0022uint8\u0022},{\u0022name\u0022:\u0022_betNum\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_betValue\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_balance\u0022,\u0022type\u0022:\u0022int256\u0022},{\u0022name\u0022:\u0022_stake\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_serverSeed\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022name\u0022:\u0022_userSeed\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022name\u0022:\u0022_endInitiatedTime\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022serverForceGameEnd\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022int256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022NOT_ENDED_FINE\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022int256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_gameType\u0022,\u0022type\u0022:\u0022uint8\u0022},{\u0022name\u0022:\u0022_betNum\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_betValue\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_balance\u0022,\u0022type\u0022:\u0022int256\u0022},{\u0022name\u0022:\u0022_serverSeed\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022name\u0022:\u0022_userSeed\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022processBet\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022int256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022MIN_BANKROLL\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022USER_TIMEOUT\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022SERVER_TIMEOUT\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_gameType\u0022,\u0022type\u0022:\u0022uint8\u0022},{\u0022name\u0022:\u0022_num\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_betValue\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_resultNum\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022userProfit\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022int256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_gameType\u0022,\u0022type\u0022:\u0022uint8\u0022},{\u0022name\u0022:\u0022_serverSeed\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022name\u0022:\u0022_userSeed\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022name\u0022:\u0022_num\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022resultNumber\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022MAX_BALANCE\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022int256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_gameType\u0022,\u0022type\u0022:\u0022uint8\u0022},{\u0022name\u0022:\u0022_num\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_bankRoll\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022maxBet\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022conflictEndFine\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022int256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022pure\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[{\u0022name\u0022:\u0022games\u0022,\u0022type\u0022:\u0022address[]\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022constructor\u0022}]","ContractName":"ConflictResolution","CompilerVersion":"v0.5.0\u002Bcommit.1d4f565a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000060000000000000000000000000210cdefd7f06cd44d93d054b5f597d834cfaed70000000000000000000000007502ebf9c736fbc72a2492cd515660dce14dab5a0000000000000000000000005db7b2ca5ee413d78960a1ae62ba053a3aeb1d790000000000000000000000000d0af3ddd5fdabae72859bfb6a2135a7349cb820000000000000000000000000db7b25bc934d815af76aba0beb9b047f36e891c2000000000000000000000000efca63a6e6fb1d9e7d1e04be8949efbc999f17b7","Library":"","SwarmSource":"bzzr://07c093fbfbba1ab62e1c107765b846d6f8628c55e63419a2c899e6a5889ab3da"}]