[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2018-10-30\r\n*/\r\n\r\npragma solidity ^0.4.24;\r\n\r\n// File: SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting \u0027a\u0027 not being zero, but the\r\n    // benefit is lost if \u0027b\u0027 is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (_a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    c = _a * _b;\r\n    assert(c / _a == _b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    // assert(_b \u003E 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = _a / _b;\r\n    // assert(_a == _b * c \u002B _a % _b); // There is no case in which this doesn\u0027t hold\r\n    return _a / _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\n    assert(_b \u003C= _a);\r\n    return _a - _b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\r\n    c = _a \u002B _b;\r\n    assert(c \u003E= _a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: FrozenChecker.sol\r\n\r\n/**\r\n * @title FrozenChecker\r\n * @dev Check account by frozen rules\r\n */\r\nlibrary FrozenChecker {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    /**\r\n     * Rule for each address\r\n     */\r\n    struct Rule {\r\n        uint256 timeT;\r\n        uint8 initPercent;\r\n        uint256[] periods;\r\n        uint8[] percents;\r\n    }\r\n\r\n    function check(Rule storage self, uint256 totalFrozenValue) internal view returns (uint256) {\r\n        if (totalFrozenValue == uint256(0)) {\r\n            return 0;\r\n        }\r\n        //uint8 temp = self.initPercent;\r\n        if (self.timeT == uint256(0) || self.timeT \u003E now) {\r\n            return totalFrozenValue.sub(totalFrozenValue.mul(self.initPercent).div(100));\r\n        }\r\n        for (uint256 i = 0; i \u003C self.periods.length.sub(1); i = i.add(1)) {\r\n            if (now \u003E= self.timeT.add(self.periods[i]) \u0026\u0026 now \u003C self.timeT.add(self.periods[i.add(1)])) {\r\n                return totalFrozenValue.sub(totalFrozenValue.mul(self.percents[i]).div(100));\r\n            }\r\n        }\r\n        if (now \u003E= self.timeT.add(self.periods[self.periods.length.sub(1)])) {\r\n            return totalFrozenValue.sub(totalFrozenValue.mul(self.percents[self.periods.length.sub(1)]).div(100));\r\n        }\r\n    }\r\n\r\n}\r\n\r\n// File: FrozenValidator.sol\r\n\r\nlibrary FrozenValidator {\r\n    \r\n    using SafeMath for uint256;\r\n    using FrozenChecker for FrozenChecker.Rule;\r\n\r\n    struct Validator {\r\n        mapping(address =\u003E IndexValue) data;\r\n        KeyFlag[] keys;\r\n        uint256 size;\r\n    }\r\n\r\n    struct IndexValue {\r\n        uint256 keyIndex; \r\n        FrozenChecker.Rule rule;\r\n        mapping (address =\u003E uint256) frozenBalances;\r\n    }\r\n\r\n    struct KeyFlag { \r\n        address key; \r\n        bool deleted; \r\n    }\r\n\r\n    function addRule(Validator storage self, address key, uint8 initPercent, uint256[] periods, uint8[] percents) internal returns (bool replaced) {\r\n        //require(self.size \u003C= 10);\r\n        require(key != address(0));\r\n        require(periods.length == percents.length);\r\n        require(periods.length \u003E 0);\r\n        require(periods[0] == uint256(0));\r\n        require(initPercent \u003C= percents[0]);\r\n        for (uint256 i = 1; i \u003C periods.length; i = i.add(1)) {\r\n            require(periods[i.sub(1)] \u003C periods[i]);\r\n            require(percents[i.sub(1)] \u003C= percents[i]);\r\n        }\r\n        require(percents[percents.length.sub(1)] == 100);\r\n        FrozenChecker.Rule memory rule = FrozenChecker.Rule(0, initPercent, periods, percents);\r\n        uint256 keyIndex = self.data[key].keyIndex;\r\n        self.data[key].rule = rule;\r\n        if (keyIndex \u003E 0) {\r\n            return true;\r\n        } else {\r\n            keyIndex = self.keys.length\u002B\u002B;\r\n            self.data[key].keyIndex = keyIndex.add(1);\r\n            self.keys[keyIndex].key = key;\r\n            self.size\u002B\u002B;\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function removeRule(Validator storage self, address key) internal returns (bool success) {\r\n        uint256 keyIndex = self.data[key].keyIndex;\r\n        if (keyIndex == 0) {\r\n            return false;\r\n        }\r\n        delete self.data[key];\r\n        self.keys[keyIndex.sub(1)].deleted = true;\r\n        self.size--;\r\n        return true;\r\n    }\r\n\r\n    function containRule(Validator storage self, address key) internal view returns (bool) {\r\n        return self.data[key].keyIndex \u003E 0;\r\n    }\r\n\r\n    function addTimeT(Validator storage self, address addr, uint256 timeT) internal returns (bool) {\r\n        require(timeT \u003E now);\r\n        self.data[addr].rule.timeT = timeT;\r\n        return true;\r\n    }\r\n\r\n    function addFrozenBalance(Validator storage self, address from, address to, uint256 value) internal returns (uint256) {\r\n        self.data[from].frozenBalances[to] = self.data[from].frozenBalances[to].add(value);\r\n        return self.data[from].frozenBalances[to];\r\n    }\r\n\r\n    function validate(Validator storage self, address addr) internal view returns (uint256) {\r\n        uint256 frozenTotal = 0;\r\n        for (uint256 i = iterateStart(self); iterateValid(self, i); i = iterateNext(self, i)) {\r\n            address ruleaddr = iterateGet(self, i);\r\n            FrozenChecker.Rule storage rule = self.data[ruleaddr].rule;\r\n            frozenTotal = frozenTotal.add(rule.check(self.data[ruleaddr].frozenBalances[addr]));\r\n        }\r\n        return frozenTotal;\r\n    }\r\n\r\n\r\n    function iterateStart(Validator storage self) internal view returns (uint256 keyIndex) {\r\n        return iterateNext(self, uint256(-1));\r\n    }\r\n\r\n    function iterateValid(Validator storage self, uint256 keyIndex) internal view returns (bool) {\r\n        return keyIndex \u003C self.keys.length;\r\n    }\r\n\r\n    function iterateNext(Validator storage self, uint256 keyIndex) internal view returns (uint256) {\r\n        keyIndex\u002B\u002B;\r\n        while (keyIndex \u003C self.keys.length \u0026\u0026 self.keys[keyIndex].deleted) {\r\n            keyIndex\u002B\u002B;\r\n        }\r\n        return keyIndex;\r\n    }\r\n\r\n    function iterateGet(Validator storage self, uint256 keyIndex) internal view returns (address) {\r\n        return self.keys[keyIndex].key;\r\n    }\r\n}\r\n\r\n// File: YottaCoin.sol\r\n\r\ncontract YottaCoin {\r\n\r\n    using SafeMath for uint256;\r\n    using FrozenValidator for FrozenValidator.Validator;\r\n\r\n    mapping (address =\u003E uint256) internal balances;\r\n    mapping (address =\u003E mapping (address =\u003E uint256)) internal allowed;\r\n\r\n    //--------------------------------  Basic Info  -------------------------------------//\r\n\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n    uint256 public totalSupply;\r\n\r\n    //--------------------------------  Basic Info  -------------------------------------//\r\n\r\n\r\n    //--------------------------------  Admin Info  -------------------------------------//\r\n\r\n    address internal admin;  //Admin address\r\n\r\n    /**\r\n     * @dev Change admin address\r\n     * @param newAdmin New admin address\r\n     */\r\n    function changeAdmin(address newAdmin) public returns (bool)  {\r\n        require(msg.sender == admin);\r\n        require(newAdmin != address(0));\r\n        uint256 balAdmin = balances[admin];\r\n        balances[newAdmin] = balances[newAdmin].add(balAdmin);\r\n        balances[admin] = 0;\r\n        admin = newAdmin;\r\n        emit Transfer(admin, newAdmin, balAdmin);\r\n        return true;\r\n    }\r\n\r\n    //--------------------------------  Admin Info  -------------------------------------//\r\n\r\n\r\n    //--------------------------  Events \u0026 Constructor  ------------------------------//\r\n    \r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    // constructor\r\n    constructor(string tokenName, string tokenSymbol, uint8 tokenDecimals, uint256 totalTokenSupply ) public {\r\n        name = tokenName;\r\n        symbol = tokenSymbol;\r\n        decimals = tokenDecimals;\r\n        totalSupply = totalTokenSupply;\r\n        admin = msg.sender;\r\n        balances[msg.sender] = totalTokenSupply;\r\n        emit Transfer(0x0, msg.sender, totalTokenSupply);\r\n\r\n    }\r\n\r\n    //--------------------------  Events \u0026 Constructor  ------------------------------//\r\n\r\n\r\n\r\n    //------------------------------ Account lock  -----------------------------------//\r\n\r\n    // \u540C\u4E00\u4E2A\u8D26\u6237\u6EE1\u8DB3\u4EFB\u610F\u51BB\u7ED3\u6761\u4EF6\u5747\u88AB\u51BB\u7ED3\r\n    mapping (address =\u003E bool) frozenAccount; //\u65E0\u9650\u671F\u51BB\u7ED3\u7684\u8D26\u6237\r\n    mapping (address =\u003E uint256) frozenTimestamp; // \u6709\u9650\u671F\u51BB\u7ED3\u7684\u8D26\u6237\r\n\r\n    /**\r\n     * \u67E5\u8BE2\u8D26\u6237\u662F\u5426\u5B58\u5728\u9501\u5B9A\u65F6\u95F4\u6233\r\n     */\r\n    function getFrozenTimestamp(address _target) public view returns (uint256) {\r\n        return frozenTimestamp[_target];\r\n    }\r\n\r\n    /**\r\n     * \u67E5\u8BE2\u8D26\u6237\u662F\u5426\u88AB\u9501\u5B9A\r\n     */\r\n    function getFrozenAccount(address _target) public view returns (bool) {\r\n        return frozenAccount[_target];\r\n    }\r\n\r\n    /**\r\n     * \u9501\u5B9A\u8D26\u6237\r\n     */\r\n    function freeze(address _target, bool _freeze) public returns (bool) {\r\n        require(msg.sender == admin);\r\n        require(_target != admin);\r\n        frozenAccount[_target] = _freeze;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * \u901A\u8FC7\u65F6\u95F4\u6233\u9501\u5B9A\u8D26\u6237\r\n     */\r\n    function freezeWithTimestamp(address _target, uint256 _timestamp) public returns (bool) {\r\n        require(msg.sender == admin);\r\n        require(_target != admin);\r\n        frozenTimestamp[_target] = _timestamp;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * \u6279\u91CF\u9501\u5B9A\u8D26\u6237\r\n     */\r\n    function multiFreeze(address[] _targets, bool[] _freezes) public returns (bool) {\r\n        require(msg.sender == admin);\r\n        require(_targets.length == _freezes.length);\r\n        uint256 len = _targets.length;\r\n        require(len \u003E 0);\r\n        for (uint256 i = 0; i \u003C len; i = i.add(1)) {\r\n            address _target = _targets[i];\r\n            require(_target != admin);\r\n            bool _freeze = _freezes[i];\r\n            frozenAccount[_target] = _freeze;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * \u6279\u91CF\u901A\u8FC7\u65F6\u95F4\u6233\u9501\u5B9A\u8D26\u6237\r\n     */\r\n    function multiFreezeWithTimestamp(address[] _targets, uint256[] _timestamps) public returns (bool) {\r\n        require(msg.sender == admin);\r\n        require(_targets.length == _timestamps.length);\r\n        uint256 len = _targets.length;\r\n        require(len \u003E 0);\r\n        for (uint256 i = 0; i \u003C len; i = i.add(1)) {\r\n            address _target = _targets[i];\r\n            require(_target != admin);\r\n            uint256 _timestamp = _timestamps[i];\r\n            frozenTimestamp[_target] = _timestamp;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    //------------------------------  Account lock  -----------------------------------//\r\n\r\n\r\n\r\n\r\n    //--------------------------      Frozen rules      ------------------------------//\r\n\r\n    FrozenValidator.Validator validator;\r\n\r\n    function addRule(address addr, uint8 initPercent, uint256[] periods, uint8[] percents) public returns (bool) {\r\n        require(msg.sender == admin);\r\n        return validator.addRule(addr, initPercent, periods, percents);\r\n    }\r\n\r\n    function addTimeT(address addr, uint256 timeT) public returns (bool) {\r\n        require(msg.sender == admin);\r\n        return validator.addTimeT(addr, timeT);\r\n    }\r\n\r\n    function removeRule(address addr) public returns (bool) {\r\n        require(msg.sender == admin);\r\n        return validator.removeRule(addr);\r\n    }\r\n\r\n    //--------------------------      Frozen rules      ------------------------------//\r\n\r\n\r\n\r\n\r\n    //-------------------------  Standard ERC20 Interfaces  --------------------------//\r\n\r\n    function multiTransfer(address[] _tos, uint256[] _values) public returns (bool) {\r\n        require(!frozenAccount[msg.sender]);\r\n        require(now \u003E frozenTimestamp[msg.sender]);\r\n        require(_tos.length == _values.length);\r\n        uint256 len = _tos.length;\r\n        require(len \u003E 0);\r\n        uint256 amount = 0;\r\n        for (uint256 i = 0; i \u003C len; i = i.add(1)) {\r\n            amount = amount.add(_values[i]);\r\n        }\r\n        require(amount \u003C= balances[msg.sender].sub(validator.validate(msg.sender)));\r\n        for (uint256 j = 0; j \u003C len; j = j.add(1)) {\r\n            address _to = _tos[j];\r\n            if (validator.containRule(msg.sender) \u0026\u0026 msg.sender != _to) {\r\n                validator.addFrozenBalance(msg.sender, _to, _values[j]);\r\n            }\r\n            balances[_to] = balances[_to].add(_values[j]);\r\n            balances[msg.sender] = balances[msg.sender].sub(_values[j]);\r\n            emit Transfer(msg.sender, _to, _values[j]);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        transferfix(_to, _value);\r\n        return true;\r\n    }\r\n\r\n    function transferfix(address _to, uint256 _value) public {\r\n        require(!frozenAccount[msg.sender]);\r\n        require(now \u003E frozenTimestamp[msg.sender]);\r\n        require(balances[msg.sender].sub(_value) \u003E= validator.validate(msg.sender));\r\n\r\n        if (validator.containRule(msg.sender) \u0026\u0026 msg.sender != _to) {\r\n            validator.addFrozenBalance(msg.sender, _to, _value);\r\n        }\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n\r\n        emit Transfer(msg.sender, _to, _value);\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        require(!frozenAccount[_from]);\r\n        require(now \u003E frozenTimestamp[_from]);\r\n        require(_value \u003C= balances[_from].sub(validator.validate(_from)));\r\n        require(_value \u003C= allowed[_from][msg.sender]);\r\n\r\n        if (validator.containRule(_from) \u0026\u0026 _from != _to) {\r\n            validator.addFrozenBalance(_from, _to, _value);\r\n        }\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public view returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    /**\r\n     * @dev Gets the balance of the specified address.\r\n     * @param _owner The address to query the the balance of.\r\n     * @return An uint256 representing the amount owned by the passed address.\r\n     */\r\n    function balanceOf(address _owner) public view returns (uint256) {\r\n        return balances[_owner]; //.sub(validator.validate(_owner));\r\n    }\r\n\r\n    //-------------------------  Standard ERC20 Interfaces  --------------------------//\r\n\r\n    function kill() public {\r\n        require(msg.sender == admin);\r\n        selfdestruct(admin);\r\n    }\r\n\r\n}","ABI":"[{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022name\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_spender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022approve\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022totalSupply\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_tos\u0022,\u0022type\u0022:\u0022address[]\u0022},{\u0022name\u0022:\u0022_values\u0022,\u0022type\u0022:\u0022uint256[]\u0022}],\u0022name\u0022:\u0022multiTransfer\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_from\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022transferFrom\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022decimals\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint8\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022kill\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_owner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022balanceOf\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022newAdmin\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022changeAdmin\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022symbol\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022addr\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022initPercent\u0022,\u0022type\u0022:\u0022uint8\u0022},{\u0022name\u0022:\u0022periods\u0022,\u0022type\u0022:\u0022uint256[]\u0022},{\u0022name\u0022:\u0022percents\u0022,\u0022type\u0022:\u0022uint8[]\u0022}],\u0022name\u0022:\u0022addRule\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022addr\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022timeT\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022addTimeT\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022transfer\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_target\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_freeze\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022name\u0022:\u0022freeze\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_target\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022getFrozenAccount\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_targets\u0022,\u0022type\u0022:\u0022address[]\u0022},{\u0022name\u0022:\u0022_freezes\u0022,\u0022type\u0022:\u0022bool[]\u0022}],\u0022name\u0022:\u0022multiFreeze\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022transferfix\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_target\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_timestamp\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022freezeWithTimestamp\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_targets\u0022,\u0022type\u0022:\u0022address[]\u0022},{\u0022name\u0022:\u0022_timestamps\u0022,\u0022type\u0022:\u0022uint256[]\u0022}],\u0022name\u0022:\u0022multiFreezeWithTimestamp\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_owner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_spender\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022allowance\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022addr\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022removeRule\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_target\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022getFrozenTimestamp\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[{\u0022name\u0022:\u0022tokenName\u0022,\u0022type\u0022:\u0022string\u0022},{\u0022name\u0022:\u0022tokenSymbol\u0022,\u0022type\u0022:\u0022string\u0022},{\u0022name\u0022:\u0022tokenDecimals\u0022,\u0022type\u0022:\u0022uint8\u0022},{\u0022name\u0022:\u0022totalTokenSupply\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022constructor\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022owner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022spender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022Approval\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022from\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022Transfer\u0022,\u0022type\u0022:\u0022event\u0022}]","ContractName":"YottaCoin","CompilerVersion":"v0.4.24\u002Bcommit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000001f04ef12cb04cf158000000000000000000000000000000000000000000000000000000000000000000000e47616c617879506f6f6c43696f6e000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000347504f0000000000000000000000000000000000000000000000000000000000","Library":"","SwarmSource":"bzzr://a173961f4405496d38591c60c92807322611b9305b6e322eb13d7671626dbecd"}]