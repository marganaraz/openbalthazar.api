[{"SourceCode":"pragma solidity ^0.5.7;\r\n\r\ninterface CTokenInterface {\r\n    function redeem(uint redeemTokens) external returns (uint);\r\n    function redeemUnderlying(uint redeemAmount) external returns (uint);\r\n    function borrow(uint borrowAmount) external returns (uint);\r\n    function liquidateBorrow(address borrower, uint repayAmount, address cTokenCollateral) external returns (uint);\r\n    function liquidateBorrow(address borrower, address cTokenCollateral) external payable;\r\n    function exchangeRateCurrent() external returns (uint);\r\n    function getCash() external view returns (uint);\r\n    function totalBorrowsCurrent() external returns (uint);\r\n    function borrowRatePerBlock() external view returns (uint);\r\n    function supplyRatePerBlock() external view returns (uint);\r\n    function totalReserves() external view returns (uint);\r\n    function reserveFactorMantissa() external view returns (uint);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n    function allowance(address, address) external view returns (uint);\r\n    function approve(address, uint) external;\r\n    function transfer(address, uint) external returns (bool);\r\n    function transferFrom(address, address, uint) external returns (bool);\r\n}\r\n\r\ninterface CERC20Interface {\r\n    function mint(uint mintAmount) external returns (uint); // For ERC20\r\n    function repayBorrow(uint repayAmount) external returns (uint); // For ERC20\r\n    function repayBorrowBehalf(address borrower, uint repayAmount) external returns (uint); // For ERC20\r\n    function borrowBalanceCurrent(address account) external returns (uint);\r\n}\r\n\r\ninterface CETHInterface {\r\n    function mint() external payable; // For ETH\r\n    function repayBorrow() external payable; // For ETH\r\n    function repayBorrowBehalf(address borrower) external payable; // For ETH\r\n    function borrowBalanceCurrent(address account) external returns (uint);\r\n}\r\n\r\ninterface ERC20Interface {\r\n    function allowance(address, address) external view returns (uint);\r\n    function balanceOf(address) external view returns (uint);\r\n    function approve(address, uint) external;\r\n    function transfer(address, uint) external returns (bool);\r\n    function transferFrom(address, address, uint) external returns (bool);\r\n}\r\n\r\ninterface ComptrollerInterface {\r\n    function enterMarkets(address[] calldata cTokens) external returns (uint[] memory);\r\n    function exitMarket(address cTokenAddress) external returns (uint);\r\n    function getAssetsIn(address account) external view returns (address[] memory);\r\n    function getAccountLiquidity(address account) external view returns (uint, uint, uint);\r\n}\r\n\r\n\r\ncontract DSMath {\r\n\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x \u002B y) \u003E= x, \u0022math-not-safe\u0022);\r\n    }\r\n\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, \u0022math-not-safe\u0022);\r\n    }\r\n\r\n    uint constant WAD = 10 ** 18;\r\n\r\n    function wmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, y), WAD / 2) / WAD;\r\n    }\r\n\r\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, WAD), y / 2) / y;\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract Helpers is DSMath {\r\n\r\n    /**\r\n     * @dev get ethereum address for trade\r\n     */\r\n    function getAddressETH() public pure returns (address eth) {\r\n        eth = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n    }\r\n\r\n    /**\r\n     * @dev get Compound Comptroller Address\r\n     */\r\n    function getComptrollerAddress() public pure returns (address troller) {\r\n        troller = 0x3d9819210A31b4961b30EF54bE2aeD79B9c9Cd3B;\r\n        // troller = 0x2EAa9D77AE4D8f9cdD9FAAcd44016E746485bddb; // Rinkeby\r\n        // troller = 0x3CA5a0E85aD80305c2d2c4982B2f2756f1e747a5; // Kovan\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer ETH/ERC20 to user\r\n     */\r\n    function transferToken(address erc20) internal {\r\n        if (erc20 == getAddressETH()) {\r\n            msg.sender.transfer(address(this).balance);\r\n        } else {\r\n            ERC20Interface erc20Contract = ERC20Interface(erc20);\r\n            uint srcBal = erc20Contract.balanceOf(address(this));\r\n            if (srcBal \u003E 0) {\r\n                erc20Contract.transfer(msg.sender, srcBal);\r\n            }\r\n        }\r\n    }\r\n\r\n    function enterMarket(address cErc20) internal {\r\n        ComptrollerInterface troller = ComptrollerInterface(getComptrollerAddress());\r\n        address[] memory markets = troller.getAssetsIn(address(this));\r\n        bool isEntered = false;\r\n        for (uint i = 0; i \u003C markets.length; i\u002B\u002B) {\r\n            if (markets[i] == cErc20) {\r\n                isEntered = true;\r\n            }\r\n        }\r\n        if (!isEntered) {\r\n            address[] memory toEnter = new address[](1);\r\n            toEnter[0] = cErc20;\r\n            troller.enterMarkets(toEnter);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev setting allowance to compound for the \u0022user proxy\u0022 if required\r\n     */\r\n    function setApproval(address erc20, uint srcAmt, address to) internal {\r\n        ERC20Interface erc20Contract = ERC20Interface(erc20);\r\n        uint tokenAllowance = erc20Contract.allowance(address(this), to);\r\n        if (srcAmt \u003E tokenAllowance) {\r\n            erc20Contract.approve(to, 2**255);\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract CompoundResolver is Helpers {\r\n\r\n    event LogMint(address erc20, address cErc20, uint tokenAmt, address owner);\r\n    event LogRedeem(address erc20, address cErc20, uint tokenAmt, address owner);\r\n    event LogBorrow(address erc20, address cErc20, uint tokenAmt, address owner);\r\n    event LogRepay(address erc20, address cErc20, uint tokenAmt, address owner);\r\n    event LogRepayBehalf(address borrower, address erc20, address cErc20, uint tokenAmt, address owner);\r\n\r\n    /**\r\n     * @dev Deposit ETH/ERC20 and mint Compound Tokens\r\n     */\r\n    function mintCToken(address erc20, address cErc20, uint tokenAmt) external payable {\r\n        enterMarket(cErc20);\r\n        if (erc20 == getAddressETH()) {\r\n            CETHInterface cToken = CETHInterface(cErc20);\r\n            cToken.mint.value(msg.value)();\r\n        } else {\r\n            ERC20Interface token = ERC20Interface(erc20);\r\n            uint toDeposit = token.balanceOf(msg.sender);\r\n            if (toDeposit \u003E tokenAmt) {\r\n                toDeposit = tokenAmt;\r\n            }\r\n            token.transferFrom(msg.sender, address(this), toDeposit);\r\n            CERC20Interface cToken = CERC20Interface(cErc20);\r\n            setApproval(erc20, toDeposit, cErc20);\r\n            assert(cToken.mint(toDeposit) == 0);\r\n        }\r\n        emit LogMint(\r\n            erc20,\r\n            cErc20,\r\n            tokenAmt,\r\n            address(this)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Redeem ETH/ERC20 and burn Compound Tokens\r\n     * @param cTokenAmt Amount of CToken To burn\r\n     */\r\n    function redeemCToken(address erc20, address cErc20, uint cTokenAmt) external {\r\n        CTokenInterface cToken = CTokenInterface(cErc20);\r\n        uint toBurn = cToken.balanceOf(address(this));\r\n        if (toBurn \u003E cTokenAmt) {\r\n            toBurn = cTokenAmt;\r\n        }\r\n        setApproval(cErc20, toBurn, cErc20);\r\n        require(cToken.redeem(toBurn) == 0, \u0022something went wrong\u0022);\r\n        transferToken(erc20);\r\n        uint tokenReturned = wmul(toBurn, cToken.exchangeRateCurrent());\r\n        emit LogRedeem(\r\n            erc20,\r\n            cErc20,\r\n            tokenReturned,\r\n            address(this)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Redeem ETH/ERC20 and mint Compound Tokens\r\n     * @param tokenAmt Amount of token To Redeem\r\n     */\r\n    function redeemUnderlying(address erc20, address cErc20, uint tokenAmt) external {\r\n        CTokenInterface cToken = CTokenInterface(cErc20);\r\n        setApproval(cErc20, 10**50, cErc20);\r\n        uint toBurn = cToken.balanceOf(address(this));\r\n        uint tokenToReturn = wmul(toBurn, cToken.exchangeRateCurrent());\r\n        if (tokenToReturn \u003E tokenAmt) {\r\n            tokenToReturn = tokenAmt;\r\n        }\r\n        require(cToken.redeemUnderlying(tokenToReturn) == 0, \u0022something went wrong\u0022);\r\n        transferToken(erc20);\r\n        emit LogRedeem(\r\n            erc20,\r\n            cErc20,\r\n            tokenToReturn,\r\n            address(this)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev borrow ETH/ERC20\r\n     */\r\n    function borrow(address erc20, address cErc20, uint tokenAmt) external {\r\n        enterMarket(cErc20);\r\n        require(CTokenInterface(cErc20).borrow(tokenAmt) == 0, \u0022got collateral?\u0022);\r\n        transferToken(erc20);\r\n        emit LogBorrow(\r\n            erc20,\r\n            cErc20,\r\n            tokenAmt,\r\n            address(this)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Pay Debt ETH/ERC20\r\n     */\r\n    function repayToken(address erc20, address cErc20, uint tokenAmt) external payable {\r\n        if (erc20 == getAddressETH()) {\r\n            CETHInterface cToken = CETHInterface(cErc20);\r\n            uint toRepay = msg.value;\r\n            uint borrows = cToken.borrowBalanceCurrent(address(this));\r\n            if (toRepay \u003E borrows) {\r\n                toRepay = borrows;\r\n                msg.sender.transfer(msg.value - toRepay);\r\n            }\r\n            cToken.repayBorrow.value(toRepay)();\r\n            emit LogRepay(\r\n                erc20,\r\n                cErc20,\r\n                toRepay,\r\n                address(this)\r\n            );\r\n        } else {\r\n            CERC20Interface cToken = CERC20Interface(cErc20);\r\n            ERC20Interface token = ERC20Interface(erc20);\r\n            uint toRepay = token.balanceOf(msg.sender);\r\n            uint borrows = cToken.borrowBalanceCurrent(address(this));\r\n            if (toRepay \u003E tokenAmt) {\r\n                toRepay = tokenAmt;\r\n            }\r\n            if (toRepay \u003E borrows) {\r\n                toRepay = borrows;\r\n            }\r\n            setApproval(erc20, toRepay, cErc20);\r\n            token.transferFrom(msg.sender, address(this), toRepay);\r\n            require(cToken.repayBorrow(toRepay) == 0, \u0022transfer approved?\u0022);\r\n            emit LogRepay(\r\n                erc20,\r\n                cErc20,\r\n                toRepay,\r\n                address(this)\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Pay Debt for someone else\r\n     */\r\n    function repaytokenBehalf(\r\n        address borrower,\r\n        address erc20,\r\n        address cErc20,\r\n        uint tokenAmt\r\n    ) external payable\r\n    {\r\n        if (erc20 == getAddressETH()) {\r\n            CETHInterface cToken = CETHInterface(cErc20);\r\n            uint toRepay = msg.value;\r\n            uint borrows = cToken.borrowBalanceCurrent(borrower);\r\n            if (toRepay \u003E borrows) {\r\n                toRepay = borrows;\r\n                msg.sender.transfer(msg.value - toRepay);\r\n            }\r\n            cToken.repayBorrowBehalf.value(toRepay)(borrower);\r\n            emit LogRepayBehalf(\r\n                borrower,\r\n                erc20,\r\n                cErc20,\r\n                toRepay,\r\n                address(this)\r\n            );\r\n        } else {\r\n            CERC20Interface cToken = CERC20Interface(cErc20);\r\n            ERC20Interface token = ERC20Interface(erc20);\r\n            uint toRepay = token.balanceOf(msg.sender);\r\n            uint borrows = cToken.borrowBalanceCurrent(borrower);\r\n            if (toRepay \u003E tokenAmt) {\r\n                toRepay = tokenAmt;\r\n            }\r\n            if (toRepay \u003E borrows) {\r\n                toRepay = borrows;\r\n            }\r\n            setApproval(erc20, toRepay, cErc20);\r\n            token.transferFrom(msg.sender, address(this), toRepay);\r\n            require(cToken.repayBorrowBehalf(borrower, toRepay) == 0, \u0022transfer approved?\u0022);\r\n            emit LogRepayBehalf(\r\n                borrower,\r\n                erc20,\r\n                cErc20,\r\n                toRepay,\r\n                address(this)\r\n            );\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract InstaCompound is CompoundResolver {\r\n\r\n    function() external payable {}\r\n\r\n}","ABI":"[{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022erc20\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022cErc20\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022tokenAmt\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022mintCToken\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:true,\u0022stateMutability\u0022:\u0022payable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022getComptrollerAddress\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022troller\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022pure\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022erc20\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022cErc20\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022tokenAmt\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022borrow\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022erc20\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022cErc20\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022tokenAmt\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022repayToken\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:true,\u0022stateMutability\u0022:\u0022payable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022erc20\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022cErc20\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022tokenAmt\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022redeemUnderlying\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022erc20\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022cErc20\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022cTokenAmt\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022redeemCToken\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022getAddressETH\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022eth\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022pure\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022borrower\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022erc20\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022cErc20\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022tokenAmt\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022repaytokenBehalf\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:true,\u0022stateMutability\u0022:\u0022payable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022payable\u0022:true,\u0022stateMutability\u0022:\u0022payable\u0022,\u0022type\u0022:\u0022fallback\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022erc20\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022cErc20\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022tokenAmt\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022owner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022LogMint\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022erc20\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022cErc20\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022tokenAmt\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022owner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022LogRedeem\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022erc20\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022cErc20\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022tokenAmt\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022owner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022LogBorrow\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022erc20\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022cErc20\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022tokenAmt\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022owner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022LogRepay\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022borrower\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022erc20\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022cErc20\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022tokenAmt\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022owner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022LogRepayBehalf\u0022,\u0022type\u0022:\u0022event\u0022}]","ContractName":"InstaCompound","CompilerVersion":"v0.5.8\u002Bcommit.23d335f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://8b1b9c1ec2cf05aad01a83891ec5d3e01586b7f7af554a3eaa1d1b1e14fdd829"}]