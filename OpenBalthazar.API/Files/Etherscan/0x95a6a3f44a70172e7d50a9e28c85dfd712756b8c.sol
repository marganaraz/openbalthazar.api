[{"SourceCode":"pragma solidity 0.4.25;\r\ncontract ISynth {\r\n    bytes32 public currencyKey;\r\n    function balanceOf(address owner) external view returns (uint);\r\n}\r\ncontract ISynthetix {\r\n    ISynth[] public availableSynths;\r\n    function availableSynthCount() public view returns (uint);\r\n    function availableCurrencyKeys()\r\n        public\r\n        view\r\n        returns (bytes32[]);\r\n}\r\n\r\ncontract IExchangeRates {\r\n    function rateIsFrozen(bytes32 currencyKey) external view returns (bool);\r\n    function ratesForCurrencies(bytes32[] currencyKeys) external view returns (uint[] memory);\r\n    function effectiveValue(bytes32 sourceCurrencyKey, uint sourceAmount, bytes32 destinationCurrencyKey)\r\n    public\r\n    view\r\n    returns (uint);\r\n}\r\n\r\ncontract SynthSummaryUtil {\r\n    ISynthetix public synthetix;\r\n    IExchangeRates public exchangeRates;\r\n    constructor(address _synthetix, address _exchangeRates) public {\r\n        synthetix = ISynthetix(_synthetix);    \r\n        exchangeRates = IExchangeRates(_exchangeRates);\r\n    }\r\n    \r\n    function totalSynthsInKey(address account, bytes32 currencyKey) external view returns (uint total) {\r\n        uint numSynths = synthetix.availableSynthCount();\r\n        for (uint i = 0; i \u003C numSynths; i\u002B\u002B) {\r\n            ISynth synth = synthetix.availableSynths(i);\r\n            total \u002B= exchangeRates.effectiveValue(synth.currencyKey(), synth.balanceOf(account), currencyKey);\r\n        }\r\n        return total;\r\n    }\r\n    \r\n    function synthsBalances(address account) external view returns (bytes32[], uint[],  uint[]) {\r\n        uint numSynths = synthetix.availableSynthCount();\r\n        bytes32[] memory currencyKeys = new bytes32[](numSynths);\r\n        uint[] memory balances = new uint[](numSynths);\r\n        uint[] memory sUSDBalances = new uint[](numSynths);\r\n        for (uint i = 0; i \u003C numSynths; i\u002B\u002B) {\r\n            ISynth synth = synthetix.availableSynths(i);\r\n            currencyKeys[i] = synth.currencyKey();\r\n            balances[i] = synth.balanceOf(account);\r\n            sUSDBalances[i] = exchangeRates.effectiveValue(synth.currencyKey(), synth.balanceOf(account), \u0027sUSD\u0027);\r\n        }\r\n        return (currencyKeys, balances, sUSDBalances);\r\n    }\r\n    \r\n    function frozenSynths() external view returns (bytes32[]) {\r\n        uint numSynths = synthetix.availableSynthCount();\r\n        bytes32[] memory frozenSynthsKeys = new bytes32[](numSynths);\r\n        for (uint i = 0; i \u003C numSynths; i\u002B\u002B) {\r\n            ISynth synth = synthetix.availableSynths(i);\r\n            if (exchangeRates.rateIsFrozen(synth.currencyKey())) {\r\n                frozenSynthsKeys[i] = synth.currencyKey();\r\n            }\r\n            \r\n        }\r\n        return frozenSynthsKeys;\r\n    }\r\n    \r\n    function synthsRates() external view returns (bytes32[], uint[]) {\r\n        bytes32[] memory currencyKeys = synthetix.availableCurrencyKeys();\r\n        return (currencyKeys, exchangeRates.ratesForCurrencies(currencyKeys));\r\n    }\r\n}","ABI":"[{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022currencyKey\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022totalSynthsInKey\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022total\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022synthsRates\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bytes32[]\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256[]\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022exchangeRates\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022synthetix\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022synthsBalances\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bytes32[]\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256[]\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256[]\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022frozenSynths\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bytes32[]\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[{\u0022name\u0022:\u0022_synthetix\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_exchangeRates\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022constructor\u0022}]","ContractName":"SynthSummaryUtil","CompilerVersion":"v0.4.25\u002Bcommit.59dbf8f1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"000000000000000000000000c011a73ee8576fb46f5e1c5751ca3b9fe0af2a6f0000000000000000000000009d7f70af5df5d5cc79780032d47a34615d1f1d77","Library":"","SwarmSource":"bzzr://15d5d9f63f861718fbf8554c29ca81122080f95bd376fc08c21f705c5b32cc88"}]