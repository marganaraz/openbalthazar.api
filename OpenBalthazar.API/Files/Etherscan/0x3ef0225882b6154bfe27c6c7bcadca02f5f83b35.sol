[{"SourceCode":"pragma solidity 0.5.13;\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor () internal { }\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by \u0060account\u0060.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves \u0060amount\u0060 tokens from the caller\u0027s account to \u0060recipient\u0060.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that \u0060spender\u0060 will be\r\n     * allowed to spend on behalf of \u0060owner\u0060 through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets \u0060amount\u0060 as the allowance of \u0060spender\u0060 over the caller\u0027s tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves \u0060amount\u0060 tokens from \u0060sender\u0060 to \u0060recipient\u0060 using the\r\n     * allowance mechanism. \u0060amount\u0060 is then deducted from the caller\u0027s\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when \u0060value\u0060 tokens are moved from one account (\u0060from\u0060) to\r\n     * another (\u0060to\u0060).\r\n     *\r\n     * Note that \u0060value\u0060 may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a \u0060spender\u0060 for an \u0060owner\u0060 is set by\r\n     * a call to {approve}. \u0060value\u0060 is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/**\r\n * @dev Wrappers over Solidity\u0027s arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * \u0060SafeMath\u0060 restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it\u0027s recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060\u002B\u0060 operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a \u002B b;\r\n        require(c \u003E= a, \u0022SafeMath: addition overflow\u0022);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060-\u0060 operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \u0022SafeMath: subtraction overflow\u0022);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060-\u0060 operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b \u003C= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060*\u0060 operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\r\n        // benefit is lost if \u0027b\u0027 is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \u0022SafeMath: multiplication overflow\u0022);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060/\u0060 operator. Note: this function uses a\r\n     * \u0060revert\u0060 opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \u0022SafeMath: division by zero\u0022);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060/\u0060 operator. Note: this function uses a\r\n     * \u0060revert\u0060 opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b \u003E 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c \u002B a % b); // There is no case in which this doesn\u0027t hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060%\u0060 operator. This function uses a \u0060revert\u0060\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \u0022SafeMath: modulo by zero\u0022);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060%\u0060 operator. This function uses a \u0060revert\u0060\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20Mintable}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning \u0060false\u0060 on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn\u0027t required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address =\u003E uint256) private _balances;\r\n\r\n    mapping (address =\u003E mapping (address =\u003E uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - \u0060recipient\u0060 cannot be the zero address.\r\n     * - the caller must have a balance of at least \u0060amount\u0060.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - \u0060spender\u0060 cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20};\r\n     *\r\n     * Requirements:\r\n     * - \u0060sender\u0060 and \u0060recipient\u0060 cannot be the zero address.\r\n     * - \u0060sender\u0060 must have a balance of at least \u0060amount\u0060.\r\n     * - the caller must have allowance for \u0060sender\u0060\u0027s tokens of at least\r\n     * \u0060amount\u0060.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \u0022ERC20: transfer amount exceeds allowance\u0022));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to \u0060spender\u0060 by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - \u0060spender\u0060 cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to \u0060spender\u0060 by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - \u0060spender\u0060 cannot be the zero address.\r\n     * - \u0060spender\u0060 must have allowance for the caller of at least\r\n     * \u0060subtractedValue\u0060.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \u0022ERC20: decreased allowance below zero\u0022));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens \u0060amount\u0060 from \u0060sender\u0060 to \u0060recipient\u0060.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - \u0060sender\u0060 cannot be the zero address.\r\n     * - \u0060recipient\u0060 cannot be the zero address.\r\n     * - \u0060sender\u0060 must have a balance of at least \u0060amount\u0060.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal {\r\n        require(sender != address(0), \u0022ERC20: transfer from the zero address\u0022);\r\n        require(recipient != address(0), \u0022ERC20: transfer to the zero address\u0022);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \u0022ERC20: transfer amount exceeds balance\u0022);\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates \u0060amount\u0060 tokens and assigns them to \u0060account\u0060, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with \u0060from\u0060 set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - \u0060to\u0060 cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal {\r\n        require(account != address(0), \u0022ERC20: mint to the zero address\u0022);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n     /**\r\n     * @dev Destroys \u0060amount\u0060 tokens from \u0060account\u0060, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with \u0060to\u0060 set to the zero address.\r\n     *\r\n     * Requirements\r\n     *\r\n     * - \u0060account\u0060 cannot be the zero address.\r\n     * - \u0060account\u0060 must have at least \u0060amount\u0060 tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal {\r\n        require(account != address(0), \u0022ERC20: burn from the zero address\u0022);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \u0022ERC20: burn amount exceeds balance\u0022);\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets \u0060amount\u0060 as the allowance of \u0060spender\u0060 over the \u0060owner\u0060s tokens.\r\n     *\r\n     * This is internal function is equivalent to \u0060approve\u0060, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - \u0060owner\u0060 cannot be the zero address.\r\n     * - \u0060spender\u0060 cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal {\r\n        require(owner != address(0), \u0022ERC20: approve from the zero address\u0022);\r\n        require(spender != address(0), \u0022ERC20: approve to the zero address\u0022);\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys \u0060amount\u0060 tokens from \u0060account\u0060.\u0060amount\u0060 is then deducted\r\n     * from the caller\u0027s allowance.\r\n     *\r\n     * See {_burn} and {_approve}.\r\n     */\r\n    function _burnFrom(address account, uint256 amount) internal {\r\n        _burn(account, amount);\r\n        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \u0022ERC20: burn amount exceeds allowance\u0022));\r\n    }\r\n}\r\n\r\ncontract GlobalsAndUtility is ERC20 {\r\n    /*  XfLobbyEnter      (auto-generated event)\r\n\r\n        uint40            timestamp       --\u003E  data0 [ 39:  0]\r\n        address  indexed  memberAddr\r\n        uint256  indexed  entryId\r\n        uint96            rawAmount       --\u003E  data0 [135: 40]\r\n        address  indexed  referrerAddr\r\n    */\r\n    event XfLobbyEnter(\r\n        uint256 data0,\r\n        address indexed memberAddr,\r\n        uint256 indexed entryId,\r\n        address indexed referrerAddr\r\n    );\r\n\r\n    /*  XfLobbyExit       (auto-generated event)\r\n\r\n        uint40            timestamp       --\u003E  data0 [ 39:  0]\r\n        address  indexed  memberAddr\r\n        uint256  indexed  entryId\r\n        uint72            xfAmount        --\u003E  data0 [111: 40]\r\n        address  indexed  referrerAddr\r\n    */\r\n    event XfLobbyExit(\r\n        uint256 data0,\r\n        address indexed memberAddr,\r\n        uint256 indexed entryId,\r\n        address indexed referrerAddr\r\n    );\r\n\r\n    /*  DailyDataUpdate   (auto-generated event)\r\n\r\n        uint40            timestamp       --\u003E  data0 [ 39:  0]\r\n        uint16            beginDay        --\u003E  data0 [ 55: 40]\r\n        uint16            endDay          --\u003E  data0 [ 71: 56]\r\n        bool              isAutoUpdate    --\u003E  data0 [ 79: 72]\r\n        address  indexed  updaterAddr\r\n    */\r\n    event DailyDataUpdate(\r\n        uint256 data0,\r\n        address indexed updaterAddr\r\n    );\r\n\r\n    /*  Claim             (auto-generated event)\r\n\r\n        uint40            timestamp       --\u003E  data0 [ 39:  0]\r\n        bytes20  indexed  btcAddr\r\n        uint56            rawSatoshis     --\u003E  data0 [ 95: 40]\r\n        uint56            adjSatoshis     --\u003E  data0 [151: 96]\r\n        address  indexed  claimToAddr\r\n        uint8             claimFlags      --\u003E  data0 [159:152]\r\n        uint72            claimedHearts   --\u003E  data0 [231:160]\r\n        address  indexed  referrerAddr\r\n        address           senderAddr      --\u003E  data1 [159:  0]\r\n    */\r\n    event Claim(\r\n        uint256 data0,\r\n        uint256 data1,\r\n        bytes20 indexed btcAddr,\r\n        address indexed claimToAddr,\r\n        address indexed referrerAddr\r\n    );\r\n\r\n    /*  ClaimAssist       (auto-generated event)\r\n\r\n        uint40            timestamp       --\u003E  data0 [ 39:  0]\r\n        bytes20           btcAddr         --\u003E  data0 [199: 40]\r\n        uint56            rawSatoshis     --\u003E  data0 [255:200]\r\n        uint56            adjSatoshis     --\u003E  data1 [ 55:  0]\r\n        address           claimToAddr     --\u003E  data1 [215: 56]\r\n        uint8             claimFlags      --\u003E  data1 [223:216]\r\n        uint72            claimedHearts   --\u003E  data2 [ 71:  0]\r\n        address           referrerAddr    --\u003E  data2 [231: 72]\r\n        address  indexed  senderAddr\r\n    */\r\n    event ClaimAssist(\r\n        uint256 data0,\r\n        uint256 data1,\r\n        uint256 data2,\r\n        address indexed senderAddr\r\n    );\r\n\r\n    /*  StakeStart        (auto-generated event)\r\n\r\n        uint40            timestamp       --\u003E  data0 [ 39:  0]\r\n        address  indexed  stakerAddr\r\n        uint40   indexed  stakeId\r\n        uint72            stakedHearts    --\u003E  data0 [111: 40]\r\n        uint72            stakeShares     --\u003E  data0 [183:112]\r\n        uint16            stakedDays      --\u003E  data0 [199:184]\r\n        bool              isAutoStake     --\u003E  data0 [207:200]\r\n    */\r\n    event StakeStart(\r\n        uint256 data0,\r\n        address indexed stakerAddr,\r\n        uint40 indexed stakeId\r\n    );\r\n\r\n    /*  StakeGoodAccounting(auto-generated event)\r\n\r\n        uint40            timestamp       --\u003E  data0 [ 39:  0]\r\n        address  indexed  stakerAddr\r\n        uint40   indexed  stakeId\r\n        uint72            stakedHearts    --\u003E  data0 [111: 40]\r\n        uint72            stakeShares     --\u003E  data0 [183:112]\r\n        uint72            payout          --\u003E  data0 [255:184]\r\n        uint72            penalty         --\u003E  data1 [ 71:  0]\r\n        address  indexed  senderAddr\r\n    */\r\n    event StakeGoodAccounting(\r\n        uint256 data0,\r\n        uint256 data1,\r\n        address indexed stakerAddr,\r\n        uint40 indexed stakeId,\r\n        address indexed senderAddr\r\n    );\r\n\r\n    /*  StakeEnd          (auto-generated event)\r\n\r\n        uint40            timestamp       --\u003E  data0 [ 39:  0]\r\n        address  indexed  stakerAddr\r\n        uint40   indexed  stakeId\r\n        uint72            stakedHearts    --\u003E  data0 [111: 40]\r\n        uint72            stakeShares     --\u003E  data0 [183:112]\r\n        uint72            payout          --\u003E  data0 [255:184]\r\n        uint72            penalty         --\u003E  data1 [ 71:  0]\r\n        uint16            servedDays      --\u003E  data1 [ 87: 72]\r\n        bool              prevUnlocked    --\u003E  data1 [ 95: 88]\r\n    */\r\n    event StakeEnd(\r\n        uint256 data0,\r\n        uint256 data1,\r\n        address indexed stakerAddr,\r\n        uint40 indexed stakeId\r\n    );\r\n\r\n    /*  ShareRateChange   (auto-generated event)\r\n\r\n        uint40            timestamp       --\u003E  data0 [ 39:  0]\r\n        uint40            shareRate       --\u003E  data0 [ 79: 40]\r\n        uint40   indexed  stakeId\r\n    */\r\n    event ShareRateChange(\r\n        uint256 data0,\r\n        uint40 indexed stakeId\r\n    );\r\n\r\n    /* Origin address */\r\n    address internal constant ORIGIN_ADDR = 0x9A6a414D6F3497c05E3b1De90520765fA1E07c03;\r\n\r\n    /* Flush address */\r\n    address payable internal constant FLUSH_ADDR = 0x1028132da0B246F5FdDE135fB8B27166766f9c30;\r\n\r\n    /* ERC20 constants */\r\n    string public constant name = \u0022HEX TOKEN\u0022;\r\n    string public constant symbol = \u0022HEXTKN\u0022;\r\n    uint8 public constant decimals = 8;\r\n\r\n    /* Hearts per Satoshi = 10,000 * 1e8 / 1e8 = 1e4 */\r\n    uint256 private constant HEARTS_PER_HEX = 10 ** uint256(decimals); // 1e8\r\n    uint256 private constant HEX_PER_BTC = 1e4;\r\n    uint256 private constant SATOSHIS_PER_BTC = 1e8;\r\n    uint256 internal constant HEARTS_PER_SATOSHI = HEARTS_PER_HEX / SATOSHIS_PER_BTC * HEX_PER_BTC;\r\n\r\n    /* Time of contract launch (2019-12-03T00:00:00Z) */\r\n    uint256 internal constant LAUNCH_TIME = 1575331200;\r\n\r\n    /* Size of a Hearts or Shares uint */\r\n    uint256 internal constant HEART_UINT_SIZE = 72;\r\n\r\n    /* Size of a transform lobby entry index uint */\r\n    uint256 internal constant XF_LOBBY_ENTRY_INDEX_SIZE = 40;\r\n    uint256 internal constant XF_LOBBY_ENTRY_INDEX_MASK = (1 \u003C\u003C XF_LOBBY_ENTRY_INDEX_SIZE) - 1;\r\n\r\n    /* Seed for WAAS Lobby */\r\n    uint256 internal constant WAAS_LOBBY_SEED_HEX = 1e9;\r\n    uint256 internal constant WAAS_LOBBY_SEED_HEARTS = WAAS_LOBBY_SEED_HEX * HEARTS_PER_HEX;\r\n\r\n    /* Start of claim phase */\r\n    uint256 internal constant PRE_CLAIM_DAYS = 1;\r\n    uint256 internal constant CLAIM_PHASE_START_DAY = PRE_CLAIM_DAYS;\r\n\r\n    /* Length of claim phase */\r\n    uint256 private constant CLAIM_PHASE_WEEKS = 50;\r\n    uint256 internal constant CLAIM_PHASE_DAYS = CLAIM_PHASE_WEEKS * 7;\r\n\r\n    /* End of claim phase */\r\n    uint256 internal constant CLAIM_PHASE_END_DAY = CLAIM_PHASE_START_DAY \u002B CLAIM_PHASE_DAYS;\r\n\r\n    /* Number of words to hold 1 bit for each transform lobby day */\r\n    uint256 internal constant XF_LOBBY_DAY_WORDS = (CLAIM_PHASE_END_DAY \u002B 255) \u003E\u003E 8;\r\n\r\n    /* BigPayDay */\r\n    uint256 internal constant BIG_PAY_DAY = CLAIM_PHASE_END_DAY \u002B 1;\r\n\r\n    /* Root hash of the UTXO Merkle tree */\r\n    bytes32 internal constant MERKLE_TREE_ROOT = 0x4e831acb4223b66de3b3d2e54a2edeefb0de3d7916e2886a4b134d9764d41bec;\r\n\r\n    /* Size of a Satoshi claim uint in a Merkle leaf */\r\n    uint256 internal constant MERKLE_LEAF_SATOSHI_SIZE = 45;\r\n\r\n    /* Zero-fill between BTC address and Satoshis in a Merkle leaf */\r\n    uint256 internal constant MERKLE_LEAF_FILL_SIZE = 256 - 160 - MERKLE_LEAF_SATOSHI_SIZE;\r\n    uint256 internal constant MERKLE_LEAF_FILL_BASE = (1 \u003C\u003C MERKLE_LEAF_FILL_SIZE) - 1;\r\n    uint256 internal constant MERKLE_LEAF_FILL_MASK = MERKLE_LEAF_FILL_BASE \u003C\u003C MERKLE_LEAF_SATOSHI_SIZE;\r\n\r\n    /* Size of a Satoshi total uint */\r\n    uint256 internal constant SATOSHI_UINT_SIZE = 51;\r\n    uint256 internal constant SATOSHI_UINT_MASK = (1 \u003C\u003C SATOSHI_UINT_SIZE) - 1;\r\n\r\n    /* Total Satoshis from all BTC addresses in UTXO snapshot */\r\n    uint256 internal constant FULL_SATOSHIS_TOTAL = 1807766732160668;\r\n\r\n    /* Total Satoshis from supported BTC addresses in UTXO snapshot after applying Silly Whale */\r\n    uint256 internal constant CLAIMABLE_SATOSHIS_TOTAL = 910087996911001;\r\n\r\n    /* Number of claimable BTC addresses in UTXO snapshot */\r\n    uint256 internal constant CLAIMABLE_BTC_ADDR_COUNT = 27997742;\r\n\r\n    /* Largest BTC address Satoshis balance in UTXO snapshot (sanity check) */\r\n    uint256 internal constant MAX_BTC_ADDR_BALANCE_SATOSHIS = 25550214098481;\r\n\r\n    /* Percentage of total claimed Hearts that will be auto-staked from a claim */\r\n    uint256 internal constant AUTO_STAKE_CLAIM_PERCENT = 90;\r\n\r\n    /* Stake timing parameters */\r\n    uint256 internal constant MIN_STAKE_DAYS = 1;\r\n    uint256 internal constant MIN_AUTO_STAKE_DAYS = 350;\r\n\r\n    uint256 internal constant MAX_STAKE_DAYS = 5555; // Approx 15 years\r\n\r\n    uint256 internal constant EARLY_PENALTY_MIN_DAYS = 90;\r\n\r\n    uint256 private constant LATE_PENALTY_GRACE_WEEKS = 2;\r\n    uint256 internal constant LATE_PENALTY_GRACE_DAYS = LATE_PENALTY_GRACE_WEEKS * 7;\r\n\r\n    uint256 private constant LATE_PENALTY_SCALE_WEEKS = 100;\r\n    uint256 internal constant LATE_PENALTY_SCALE_DAYS = LATE_PENALTY_SCALE_WEEKS * 7;\r\n\r\n    /* Stake shares Longer Pays Better bonus constants used by _stakeStartBonusHearts() */\r\n    uint256 private constant LPB_BONUS_PERCENT = 20;\r\n    uint256 private constant LPB_BONUS_MAX_PERCENT = 200;\r\n    uint256 internal constant LPB = 364 * 100 / LPB_BONUS_PERCENT;\r\n    uint256 internal constant LPB_MAX_DAYS = LPB * LPB_BONUS_MAX_PERCENT / 100;\r\n\r\n    /* Stake shares Bigger Pays Better bonus constants used by _stakeStartBonusHearts() */\r\n    uint256 private constant BPB_BONUS_PERCENT = 10;\r\n    uint256 private constant BPB_MAX_HEX = 150 * 1e6;\r\n    uint256 internal constant BPB_MAX_HEARTS = BPB_MAX_HEX * HEARTS_PER_HEX;\r\n    uint256 internal constant BPB = BPB_MAX_HEARTS * 100 / BPB_BONUS_PERCENT;\r\n\r\n    /* Share rate is scaled to increase precision */\r\n    uint256 internal constant SHARE_RATE_SCALE = 1e5;\r\n\r\n    /* Share rate max (after scaling) */\r\n    uint256 internal constant SHARE_RATE_UINT_SIZE = 40;\r\n    uint256 internal constant SHARE_RATE_MAX = (1 \u003C\u003C SHARE_RATE_UINT_SIZE) - 1;\r\n\r\n    /* Constants for preparing the claim message text */\r\n    uint8 internal constant ETH_ADDRESS_BYTE_LEN = 20;\r\n    uint8 internal constant ETH_ADDRESS_HEX_LEN = ETH_ADDRESS_BYTE_LEN * 2;\r\n\r\n    uint8 internal constant CLAIM_PARAM_HASH_BYTE_LEN = 12;\r\n    uint8 internal constant CLAIM_PARAM_HASH_HEX_LEN = CLAIM_PARAM_HASH_BYTE_LEN * 2;\r\n\r\n    uint8 internal constant BITCOIN_SIG_PREFIX_LEN = 24;\r\n    bytes24 internal constant BITCOIN_SIG_PREFIX_STR = \u0022Bitcoin Signed Message:\\n\u0022;\r\n\r\n    bytes internal constant STD_CLAIM_PREFIX_STR = \u0022Claim_HEX_to_0x\u0022;\r\n    bytes internal constant OLD_CLAIM_PREFIX_STR = \u0022Claim_BitcoinHEX_to_0x\u0022;\r\n\r\n    bytes16 internal constant HEX_DIGITS = \u00220123456789abcdef\u0022;\r\n\r\n    /* Claim flags passed to btcAddressClaim()  */\r\n    uint8 internal constant CLAIM_FLAG_MSG_PREFIX_OLD = 1 \u003C\u003C 0;\r\n    uint8 internal constant CLAIM_FLAG_BTC_ADDR_COMPRESSED = 1 \u003C\u003C 1;\r\n    uint8 internal constant CLAIM_FLAG_BTC_ADDR_P2WPKH_IN_P2SH = 1 \u003C\u003C 2;\r\n    uint8 internal constant CLAIM_FLAG_BTC_ADDR_BECH32 = 1 \u003C\u003C 3;\r\n    uint8 internal constant CLAIM_FLAG_ETH_ADDR_LOWERCASE = 1 \u003C\u003C 4;\r\n\r\n    /* Globals expanded for memory (except _latestStakeId) and compact for storage */\r\n    struct GlobalsCache {\r\n        // 1\r\n        uint256 _lockedHeartsTotal;\r\n        uint256 _nextStakeSharesTotal;\r\n        uint256 _shareRate;\r\n        uint256 _stakePenaltyTotal;\r\n        // 2\r\n        uint256 _dailyDataCount;\r\n        uint256 _stakeSharesTotal;\r\n        uint40 _latestStakeId;\r\n        uint256 _unclaimedSatoshisTotal;\r\n        uint256 _claimedSatoshisTotal;\r\n        uint256 _claimedBtcAddrCount;\r\n        //\r\n        uint256 _currentDay;\r\n    }\r\n\r\n    struct GlobalsStore {\r\n        // 1\r\n        uint72 lockedHeartsTotal;\r\n        uint72 nextStakeSharesTotal;\r\n        uint40 shareRate;\r\n        uint72 stakePenaltyTotal;\r\n        // 2\r\n        uint16 dailyDataCount;\r\n        uint72 stakeSharesTotal;\r\n        uint40 latestStakeId;\r\n        uint128 claimStats;\r\n    }\r\n\r\n    GlobalsStore public globals;\r\n\r\n    /* Claimed BTC addresses */\r\n    mapping(bytes20 =\u003E bool) public btcAddressClaims;\r\n\r\n    /* Daily data */\r\n    struct DailyDataStore {\r\n        uint72 dayPayoutTotal;\r\n        uint72 dayStakeSharesTotal;\r\n        uint56 dayUnclaimedSatoshisTotal;\r\n    }\r\n\r\n    mapping(uint256 =\u003E DailyDataStore) public dailyData;\r\n\r\n    /* Stake expanded for memory (except _stakeId) and compact for storage */\r\n    struct StakeCache {\r\n        uint40 _stakeId;\r\n        uint256 _stakedHearts;\r\n        uint256 _stakeShares;\r\n        uint256 _lockedDay;\r\n        uint256 _stakedDays;\r\n        uint256 _unlockedDay;\r\n        bool _isAutoStake;\r\n    }\r\n\r\n    struct StakeStore {\r\n        uint40 stakeId;\r\n        uint72 stakedHearts;\r\n        uint72 stakeShares;\r\n        uint16 lockedDay;\r\n        uint16 stakedDays;\r\n        uint16 unlockedDay;\r\n        bool isAutoStake;\r\n    }\r\n\r\n    mapping(address =\u003E StakeStore[]) public stakeLists;\r\n\r\n    /* Temporary state for calculating daily rounds */\r\n    struct DailyRoundState {\r\n        uint256 _allocSupplyCached;\r\n        uint256 _mintOriginBatch;\r\n        uint256 _payoutTotal;\r\n    }\r\n\r\n    struct XfLobbyEntryStore {\r\n        uint96 rawAmount;\r\n        address referrerAddr;\r\n    }\r\n\r\n    struct XfLobbyQueueStore {\r\n        uint40 headIndex;\r\n        uint40 tailIndex;\r\n        mapping(uint256 =\u003E XfLobbyEntryStore) entries;\r\n    }\r\n\r\n    mapping(uint256 =\u003E uint256) public xfLobby;\r\n    mapping(uint256 =\u003E mapping(address =\u003E XfLobbyQueueStore)) public xfLobbyMembers;\r\n\r\n    /**\r\n     * @dev PUBLIC FACING: Optionally update daily data for a smaller\r\n     * range to reduce gas cost for a subsequent operation\r\n     * @param beforeDay Only update days before this day number (optional; 0 for current day)\r\n     */\r\n    function dailyDataUpdate(uint256 beforeDay)\r\n        external\r\n    {\r\n        GlobalsCache memory g;\r\n        GlobalsCache memory gSnapshot;\r\n        _globalsLoad(g, gSnapshot);\r\n\r\n        /* Skip pre-claim period */\r\n        require(g._currentDay \u003E CLAIM_PHASE_START_DAY, \u0022HEX: Too early\u0022);\r\n\r\n        if (beforeDay != 0) {\r\n            require(beforeDay \u003C= g._currentDay, \u0022HEX: beforeDay cannot be in the future\u0022);\r\n\r\n            _dailyDataUpdate(g, beforeDay, false);\r\n        } else {\r\n            /* Default to updating before current day */\r\n            _dailyDataUpdate(g, g._currentDay, false);\r\n        }\r\n\r\n        _globalsSync(g, gSnapshot);\r\n    }\r\n\r\n    /**\r\n     * @dev PUBLIC FACING: External helper to return multiple values of daily data with\r\n     * a single call. Ugly implementation due to limitations of the standard ABI encoder.\r\n     * @param beginDay First day of data range\r\n     * @param endDay Last day (non-inclusive) of data range\r\n     * @return Fixed array of packed values\r\n     */\r\n    function dailyDataRange(uint256 beginDay, uint256 endDay)\r\n        external\r\n        view\r\n        returns (uint256[] memory list)\r\n    {\r\n        require(beginDay \u003C endDay \u0026\u0026 endDay \u003C= globals.dailyDataCount, \u0022HEX: range invalid\u0022);\r\n\r\n        list = new uint256[](endDay - beginDay);\r\n\r\n        uint256 src = beginDay;\r\n        uint256 dst = 0;\r\n        uint256 v;\r\n        do {\r\n            v = uint256(dailyData[src].dayUnclaimedSatoshisTotal) \u003C\u003C (HEART_UINT_SIZE * 2);\r\n            v |= uint256(dailyData[src].dayStakeSharesTotal) \u003C\u003C HEART_UINT_SIZE;\r\n            v |= uint256(dailyData[src].dayPayoutTotal);\r\n\r\n            list[dst\u002B\u002B] = v;\r\n        } while (\u002B\u002Bsrc \u003C endDay);\r\n\r\n        return list;\r\n    }\r\n\r\n    /**\r\n     * @dev PUBLIC FACING: External helper to return most global info with a single call.\r\n     * Ugly implementation due to limitations of the standard ABI encoder.\r\n     * @return Fixed array of values\r\n     */\r\n    function globalInfo()\r\n        external\r\n        view\r\n        returns (uint256[13] memory)\r\n    {\r\n        uint256 _claimedBtcAddrCount;\r\n        uint256 _claimedSatoshisTotal;\r\n        uint256 _unclaimedSatoshisTotal;\r\n\r\n        (_claimedBtcAddrCount, _claimedSatoshisTotal, _unclaimedSatoshisTotal) = _claimStatsDecode(\r\n            globals.claimStats\r\n        );\r\n\r\n        return [\r\n            // 1\r\n            globals.lockedHeartsTotal,\r\n            globals.nextStakeSharesTotal,\r\n            globals.shareRate,\r\n            globals.stakePenaltyTotal,\r\n            // 2\r\n            globals.dailyDataCount,\r\n            globals.stakeSharesTotal,\r\n            globals.latestStakeId,\r\n            _unclaimedSatoshisTotal,\r\n            _claimedSatoshisTotal,\r\n            _claimedBtcAddrCount,\r\n            //\r\n            block.timestamp,\r\n            totalSupply(),\r\n            xfLobby[_currentDay()]\r\n        ];\r\n    }\r\n\r\n    /**\r\n     * @dev PUBLIC FACING: ERC20 totalSupply() is the circulating supply and does not include any\r\n     * staked Hearts. allocatedSupply() includes both.\r\n     * @return Allocated Supply in Hearts\r\n     */\r\n    function allocatedSupply()\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return totalSupply() \u002B globals.lockedHeartsTotal;\r\n    }\r\n\r\n    /**\r\n     * @dev PUBLIC FACING: External helper for the current day number since launch time\r\n     * @return Current day number (zero-based)\r\n     */\r\n    function currentDay()\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _currentDay();\r\n    }\r\n\r\n    function _currentDay()\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return (block.timestamp - LAUNCH_TIME) / 1 days;\r\n    }\r\n\r\n    function _dailyDataUpdateAuto(GlobalsCache memory g)\r\n        internal\r\n    {\r\n        _dailyDataUpdate(g, g._currentDay, true);\r\n    }\r\n\r\n    function _globalsLoad(GlobalsCache memory g, GlobalsCache memory gSnapshot)\r\n        internal\r\n        view\r\n    {\r\n        // 1\r\n        g._lockedHeartsTotal = globals.lockedHeartsTotal;\r\n        g._nextStakeSharesTotal = globals.nextStakeSharesTotal;\r\n        g._shareRate = globals.shareRate;\r\n        g._stakePenaltyTotal = globals.stakePenaltyTotal;\r\n        // 2\r\n        g._dailyDataCount = globals.dailyDataCount;\r\n        g._stakeSharesTotal = globals.stakeSharesTotal;\r\n        g._latestStakeId = globals.latestStakeId;\r\n        (g._claimedBtcAddrCount, g._claimedSatoshisTotal, g._unclaimedSatoshisTotal) = _claimStatsDecode(\r\n            globals.claimStats\r\n        );\r\n        //\r\n        g._currentDay = _currentDay();\r\n\r\n        _globalsCacheSnapshot(g, gSnapshot);\r\n    }\r\n\r\n    function _globalsCacheSnapshot(GlobalsCache memory g, GlobalsCache memory gSnapshot)\r\n        internal\r\n        pure\r\n    {\r\n        // 1\r\n        gSnapshot._lockedHeartsTotal = g._lockedHeartsTotal;\r\n        gSnapshot._nextStakeSharesTotal = g._nextStakeSharesTotal;\r\n        gSnapshot._shareRate = g._shareRate;\r\n        gSnapshot._stakePenaltyTotal = g._stakePenaltyTotal;\r\n        // 2\r\n        gSnapshot._dailyDataCount = g._dailyDataCount;\r\n        gSnapshot._stakeSharesTotal = g._stakeSharesTotal;\r\n        gSnapshot._latestStakeId = g._latestStakeId;\r\n        gSnapshot._unclaimedSatoshisTotal = g._unclaimedSatoshisTotal;\r\n        gSnapshot._claimedSatoshisTotal = g._claimedSatoshisTotal;\r\n        gSnapshot._claimedBtcAddrCount = g._claimedBtcAddrCount;\r\n    }\r\n\r\n    function _globalsSync(GlobalsCache memory g, GlobalsCache memory gSnapshot)\r\n        internal\r\n    {\r\n        if (g._lockedHeartsTotal != gSnapshot._lockedHeartsTotal\r\n            || g._nextStakeSharesTotal != gSnapshot._nextStakeSharesTotal\r\n            || g._shareRate != gSnapshot._shareRate\r\n            || g._stakePenaltyTotal != gSnapshot._stakePenaltyTotal) {\r\n            // 1\r\n            globals.lockedHeartsTotal = uint72(g._lockedHeartsTotal);\r\n            globals.nextStakeSharesTotal = uint72(g._nextStakeSharesTotal);\r\n            globals.shareRate = uint40(g._shareRate);\r\n            globals.stakePenaltyTotal = uint72(g._stakePenaltyTotal);\r\n        }\r\n        if (g._dailyDataCount != gSnapshot._dailyDataCount\r\n            || g._stakeSharesTotal != gSnapshot._stakeSharesTotal\r\n            || g._latestStakeId != gSnapshot._latestStakeId\r\n            || g._unclaimedSatoshisTotal != gSnapshot._unclaimedSatoshisTotal\r\n            || g._claimedSatoshisTotal != gSnapshot._claimedSatoshisTotal\r\n            || g._claimedBtcAddrCount != gSnapshot._claimedBtcAddrCount) {\r\n            // 2\r\n            globals.dailyDataCount = uint16(g._dailyDataCount);\r\n            globals.stakeSharesTotal = uint72(g._stakeSharesTotal);\r\n            globals.latestStakeId = g._latestStakeId;\r\n            globals.claimStats = _claimStatsEncode(\r\n                g._claimedBtcAddrCount,\r\n                g._claimedSatoshisTotal,\r\n                g._unclaimedSatoshisTotal\r\n            );\r\n        }\r\n    }\r\n\r\n    function _stakeLoad(StakeStore storage stRef, uint40 stakeIdParam, StakeCache memory st)\r\n        internal\r\n        view\r\n    {\r\n        /* Ensure caller\u0027s stakeIndex is still current */\r\n        require(stakeIdParam == stRef.stakeId, \u0022HEX: stakeIdParam not in stake\u0022);\r\n\r\n        st._stakeId = stRef.stakeId;\r\n        st._stakedHearts = stRef.stakedHearts;\r\n        st._stakeShares = stRef.stakeShares;\r\n        st._lockedDay = stRef.lockedDay;\r\n        st._stakedDays = stRef.stakedDays;\r\n        st._unlockedDay = stRef.unlockedDay;\r\n        st._isAutoStake = stRef.isAutoStake;\r\n    }\r\n\r\n    function _stakeUpdate(StakeStore storage stRef, StakeCache memory st)\r\n        internal\r\n    {\r\n        stRef.stakeId = st._stakeId;\r\n        stRef.stakedHearts = uint72(st._stakedHearts);\r\n        stRef.stakeShares = uint72(st._stakeShares);\r\n        stRef.lockedDay = uint16(st._lockedDay);\r\n        stRef.stakedDays = uint16(st._stakedDays);\r\n        stRef.unlockedDay = uint16(st._unlockedDay);\r\n        stRef.isAutoStake = st._isAutoStake;\r\n    }\r\n\r\n    function _stakeAdd(\r\n        StakeStore[] storage stakeListRef,\r\n        uint40 newStakeId,\r\n        uint256 newStakedHearts,\r\n        uint256 newStakeShares,\r\n        uint256 newLockedDay,\r\n        uint256 newStakedDays,\r\n        bool newAutoStake\r\n    )\r\n        internal\r\n    {\r\n        stakeListRef.push(\r\n            StakeStore(\r\n                newStakeId,\r\n                uint72(newStakedHearts),\r\n                uint72(newStakeShares),\r\n                uint16(newLockedDay),\r\n                uint16(newStakedDays),\r\n                uint16(0), // unlockedDay\r\n                newAutoStake\r\n            )\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Efficiently delete from an unordered array by moving the last element\r\n     * to the \u0022hole\u0022 and reducing the array length. Can change the order of the list\r\n     * and invalidate previously held indexes.\r\n     * @notice stakeListRef length and stakeIndex are already ensured valid in stakeEnd()\r\n     * @param stakeListRef Reference to stakeLists[stakerAddr] array in storage\r\n     * @param stakeIndex Index of the element to delete\r\n     */\r\n    function _stakeRemove(StakeStore[] storage stakeListRef, uint256 stakeIndex)\r\n        internal\r\n    {\r\n        uint256 lastIndex = stakeListRef.length - 1;\r\n\r\n        /* Skip the copy if element to be removed is already the last element */\r\n        if (stakeIndex != lastIndex) {\r\n            /* Copy last element to the requested element\u0027s \u0022hole\u0022 */\r\n            stakeListRef[stakeIndex] = stakeListRef[lastIndex];\r\n        }\r\n\r\n        /*\r\n            Reduce the array length now that the array is contiguous.\r\n            Surprisingly, \u0027pop()\u0027 uses less gas than \u0027stakeListRef.length = lastIndex\u0027\r\n        */\r\n        stakeListRef.pop();\r\n    }\r\n\r\n    function _claimStatsEncode(\r\n        uint256 _claimedBtcAddrCount,\r\n        uint256 _claimedSatoshisTotal,\r\n        uint256 _unclaimedSatoshisTotal\r\n    )\r\n        internal\r\n        pure\r\n        returns (uint128)\r\n    {\r\n        uint256 v = _claimedBtcAddrCount \u003C\u003C (SATOSHI_UINT_SIZE * 2);\r\n        v |= _claimedSatoshisTotal \u003C\u003C SATOSHI_UINT_SIZE;\r\n        v |= _unclaimedSatoshisTotal;\r\n\r\n        return uint128(v);\r\n    }\r\n\r\n    function _claimStatsDecode(uint128 v)\r\n        internal\r\n        pure\r\n        returns (uint256 _claimedBtcAddrCount, uint256 _claimedSatoshisTotal, uint256 _unclaimedSatoshisTotal)\r\n    {\r\n        _claimedBtcAddrCount = v \u003E\u003E (SATOSHI_UINT_SIZE * 2);\r\n        _claimedSatoshisTotal = (v \u003E\u003E SATOSHI_UINT_SIZE) \u0026 SATOSHI_UINT_MASK;\r\n        _unclaimedSatoshisTotal = v \u0026 SATOSHI_UINT_MASK;\r\n\r\n        return (_claimedBtcAddrCount, _claimedSatoshisTotal, _unclaimedSatoshisTotal);\r\n    }\r\n\r\n    /**\r\n     * @dev Estimate the stake payout for an incomplete day\r\n     * @param g Cache of stored globals\r\n     * @param stakeSharesParam Param from stake to calculate bonuses for\r\n     * @param day Day to calculate bonuses for\r\n     * @return Payout in Hearts\r\n     */\r\n    function _estimatePayoutRewardsDay(GlobalsCache memory g, uint256 stakeSharesParam, uint256 day)\r\n        internal\r\n        view\r\n        returns (uint256 payout)\r\n    {\r\n        /* Prevent updating state for this estimation */\r\n        GlobalsCache memory gTmp;\r\n        _globalsCacheSnapshot(g, gTmp);\r\n\r\n        DailyRoundState memory rs;\r\n        rs._allocSupplyCached = totalSupply() \u002B g._lockedHeartsTotal;\r\n\r\n        _dailyRoundCalc(gTmp, rs, day);\r\n\r\n        /* Stake is no longer locked so it must be added to total as if it were */\r\n        gTmp._stakeSharesTotal \u002B= stakeSharesParam;\r\n\r\n        payout = rs._payoutTotal * stakeSharesParam / gTmp._stakeSharesTotal;\r\n\r\n        if (day == BIG_PAY_DAY) {\r\n            uint256 bigPaySlice = gTmp._unclaimedSatoshisTotal * HEARTS_PER_SATOSHI * stakeSharesParam\r\n                / gTmp._stakeSharesTotal;\r\n            payout \u002B= bigPaySlice \u002B _calcAdoptionBonus(gTmp, bigPaySlice);\r\n        }\r\n\r\n        return payout;\r\n    }\r\n\r\n    function _calcAdoptionBonus(GlobalsCache memory g, uint256 payout)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        /*\r\n            VIRAL REWARDS: Add adoption percentage bonus to payout\r\n\r\n            viral = payout * (claimedBtcAddrCount / CLAIMABLE_BTC_ADDR_COUNT)\r\n        */\r\n        uint256 viral = payout * g._claimedBtcAddrCount / CLAIMABLE_BTC_ADDR_COUNT;\r\n\r\n        /*\r\n            CRIT MASS REWARDS: Add adoption percentage bonus to payout\r\n\r\n            crit  = payout * (claimedSatoshisTotal / CLAIMABLE_SATOSHIS_TOTAL)\r\n        */\r\n        uint256 crit = payout * g._claimedSatoshisTotal / CLAIMABLE_SATOSHIS_TOTAL;\r\n\r\n        return viral \u002B crit;\r\n    }\r\n\r\n    function _dailyRoundCalc(GlobalsCache memory g, DailyRoundState memory rs, uint256 day)\r\n        private\r\n        pure\r\n    {\r\n        /*\r\n            Calculate payout round\r\n\r\n            Inflation of 3.69% inflation per 364 days             (approx 1 year)\r\n            dailyInterestRate   = exp(log(1 \u002B 3.69%)  / 364) - 1\r\n                                = exp(log(1 \u002B 0.0369) / 364) - 1\r\n                                = exp(log(1.0369) / 364) - 1\r\n                                = 0.000099553011616349            (approx)\r\n\r\n            payout  = allocSupply * dailyInterestRate\r\n                    = allocSupply / (1 / dailyInterestRate)\r\n                    = allocSupply / (1 / 0.000099553011616349)\r\n                    = allocSupply / 10044.899534066692            (approx)\r\n                    = allocSupply * 10000 / 100448995             (* 10000/10000 for int precision)\r\n        */\r\n        rs._payoutTotal = rs._allocSupplyCached * 10000 / 100448995;\r\n\r\n        if (day \u003C CLAIM_PHASE_END_DAY) {\r\n            uint256 bigPaySlice = g._unclaimedSatoshisTotal * HEARTS_PER_SATOSHI / CLAIM_PHASE_DAYS;\r\n\r\n            uint256 originBonus = bigPaySlice \u002B _calcAdoptionBonus(g, rs._payoutTotal \u002B bigPaySlice);\r\n            rs._mintOriginBatch \u002B= originBonus;\r\n            rs._allocSupplyCached \u002B= originBonus;\r\n\r\n            rs._payoutTotal \u002B= _calcAdoptionBonus(g, rs._payoutTotal);\r\n        }\r\n\r\n        if (g._stakePenaltyTotal != 0) {\r\n            rs._payoutTotal \u002B= g._stakePenaltyTotal;\r\n            g._stakePenaltyTotal = 0;\r\n        }\r\n    }\r\n\r\n    function _dailyRoundCalcAndStore(GlobalsCache memory g, DailyRoundState memory rs, uint256 day)\r\n        private\r\n    {\r\n        _dailyRoundCalc(g, rs, day);\r\n\r\n        dailyData[day].dayPayoutTotal = uint72(rs._payoutTotal);\r\n        dailyData[day].dayStakeSharesTotal = uint72(g._stakeSharesTotal);\r\n        dailyData[day].dayUnclaimedSatoshisTotal = uint56(g._unclaimedSatoshisTotal);\r\n    }\r\n\r\n    function _dailyDataUpdate(GlobalsCache memory g, uint256 beforeDay, bool isAutoUpdate)\r\n        private\r\n    {\r\n        if (g._dailyDataCount \u003E= beforeDay) {\r\n            /* Already up-to-date */\r\n            return;\r\n        }\r\n\r\n        DailyRoundState memory rs;\r\n        rs._allocSupplyCached = totalSupply() \u002B g._lockedHeartsTotal;\r\n\r\n        uint256 day = g._dailyDataCount;\r\n\r\n        _dailyRoundCalcAndStore(g, rs, day);\r\n\r\n        /* Stakes started during this day are added to the total the next day */\r\n        if (g._nextStakeSharesTotal != 0) {\r\n            g._stakeSharesTotal \u002B= g._nextStakeSharesTotal;\r\n            g._nextStakeSharesTotal = 0;\r\n        }\r\n\r\n        while (\u002B\u002Bday \u003C beforeDay) {\r\n            _dailyRoundCalcAndStore(g, rs, day);\r\n        }\r\n\r\n        _emitDailyDataUpdate(g._dailyDataCount, day, isAutoUpdate);\r\n        g._dailyDataCount = day;\r\n\r\n        if (rs._mintOriginBatch != 0) {\r\n            _mint(ORIGIN_ADDR, rs._mintOriginBatch);\r\n        }\r\n    }\r\n\r\n    function _emitDailyDataUpdate(uint256 beginDay, uint256 endDay, bool isAutoUpdate)\r\n        private\r\n    {\r\n        emit DailyDataUpdate( // (auto-generated event)\r\n            uint256(uint40(block.timestamp))\r\n                | (uint256(uint16(beginDay)) \u003C\u003C 40)\r\n                | (uint256(uint16(endDay)) \u003C\u003C 56)\r\n                | (isAutoUpdate ? (1 \u003C\u003C 72) : 0),\r\n            msg.sender\r\n        );\r\n    }\r\n}\r\n\r\ncontract StakeableToken is GlobalsAndUtility {\r\n    /**\r\n     * @dev PUBLIC FACING: Open a stake.\r\n     * @param newStakedHearts Number of Hearts to stake\r\n     * @param newStakedDays Number of days to stake\r\n     */\r\n    function stakeStart(uint256 newStakedHearts, uint256 newStakedDays)\r\n        external\r\n    {\r\n        GlobalsCache memory g;\r\n        GlobalsCache memory gSnapshot;\r\n        _globalsLoad(g, gSnapshot);\r\n\r\n        /* Enforce the minimum stake time */\r\n        require(newStakedDays \u003E= MIN_STAKE_DAYS, \u0022HEX: newStakedDays lower than minimum\u0022);\r\n\r\n        /* Check if log data needs to be updated */\r\n        _dailyDataUpdateAuto(g);\r\n\r\n        _stakeStart(g, newStakedHearts, newStakedDays, false);\r\n\r\n        /* Remove staked Hearts from balance of staker */\r\n        _burn(msg.sender, newStakedHearts);\r\n\r\n        _globalsSync(g, gSnapshot);\r\n    }\r\n\r\n    /**\r\n     * @dev PUBLIC FACING: Unlocks a completed stake, distributing the proceeds of any penalty\r\n     * immediately. The staker must still call stakeEnd() to retrieve their stake return (if any).\r\n     * @param stakerAddr Address of staker\r\n     * @param stakeIndex Index of stake within stake list\r\n     * @param stakeIdParam The stake\u0027s id\r\n     */\r\n    function stakeGoodAccounting(address stakerAddr, uint256 stakeIndex, uint40 stakeIdParam)\r\n        external\r\n    {\r\n        GlobalsCache memory g;\r\n        GlobalsCache memory gSnapshot;\r\n        _globalsLoad(g, gSnapshot);\r\n\r\n        /* require() is more informative than the default assert() */\r\n        require(stakeLists[stakerAddr].length != 0, \u0022HEX: Empty stake list\u0022);\r\n        require(stakeIndex \u003C stakeLists[stakerAddr].length, \u0022HEX: stakeIndex invalid\u0022);\r\n\r\n        StakeStore storage stRef = stakeLists[stakerAddr][stakeIndex];\r\n\r\n        /* Get stake copy */\r\n        StakeCache memory st;\r\n        _stakeLoad(stRef, stakeIdParam, st);\r\n\r\n        /* Stake must have served full term */\r\n        require(g._currentDay \u003E= st._lockedDay \u002B st._stakedDays, \u0022HEX: Stake not fully served\u0022);\r\n\r\n        /* Stake must still be locked */\r\n        require(st._unlockedDay == 0, \u0022HEX: Stake already unlocked\u0022);\r\n\r\n        /* Check if log data needs to be updated */\r\n        _dailyDataUpdateAuto(g);\r\n\r\n        /* Unlock the completed stake */\r\n        _stakeUnlock(g, st);\r\n\r\n        /* stakeReturn value is unused here */\r\n        (, uint256 payout, uint256 penalty, uint256 cappedPenalty) = _stakePerformance(\r\n            g,\r\n            st,\r\n            st._stakedDays\r\n        );\r\n\r\n        _emitStakeGoodAccounting(\r\n            stakerAddr,\r\n            stakeIdParam,\r\n            st._stakedHearts,\r\n            st._stakeShares,\r\n            payout,\r\n            penalty\r\n        );\r\n\r\n        if (cappedPenalty != 0) {\r\n            _splitPenaltyProceeds(g, cappedPenalty);\r\n        }\r\n\r\n        /* st._unlockedDay has changed */\r\n        _stakeUpdate(stRef, st);\r\n\r\n        _globalsSync(g, gSnapshot);\r\n    }\r\n\r\n    /**\r\n     * @dev PUBLIC FACING: Closes a stake. The order of the stake list can change so\r\n     * a stake id is used to reject stale indexes.\r\n     * @param stakeIndex Index of stake within stake list\r\n     * @param stakeIdParam The stake\u0027s id\r\n     */\r\n    function stakeEnd(uint256 stakeIndex, uint40 stakeIdParam)\r\n        external\r\n    {\r\n        GlobalsCache memory g;\r\n        GlobalsCache memory gSnapshot;\r\n        _globalsLoad(g, gSnapshot);\r\n\r\n        StakeStore[] storage stakeListRef = stakeLists[msg.sender];\r\n\r\n        /* require() is more informative than the default assert() */\r\n        require(stakeListRef.length != 0, \u0022HEX: Empty stake list\u0022);\r\n        require(stakeIndex \u003C stakeListRef.length, \u0022HEX: stakeIndex invalid\u0022);\r\n\r\n        /* Get stake copy */\r\n        StakeCache memory st;\r\n        _stakeLoad(stakeListRef[stakeIndex], stakeIdParam, st);\r\n\r\n        /* Check if log data needs to be updated */\r\n        _dailyDataUpdateAuto(g);\r\n\r\n        uint256 servedDays = 0;\r\n\r\n        bool prevUnlocked = (st._unlockedDay != 0);\r\n        uint256 stakeReturn;\r\n        uint256 payout = 0;\r\n        uint256 penalty = 0;\r\n        uint256 cappedPenalty = 0;\r\n\r\n        if (g._currentDay \u003E= st._lockedDay) {\r\n            if (prevUnlocked) {\r\n                /* Previously unlocked in stakeGoodAccounting(), so must have served full term */\r\n                servedDays = st._stakedDays;\r\n            } else {\r\n                _stakeUnlock(g, st);\r\n\r\n                servedDays = g._currentDay - st._lockedDay;\r\n                if (servedDays \u003E st._stakedDays) {\r\n                    servedDays = st._stakedDays;\r\n                } else {\r\n                    /* Deny early-unstake before an auto-stake minimum has been served */\r\n                    if (servedDays \u003C MIN_AUTO_STAKE_DAYS) {\r\n                        require(!st._isAutoStake, \u0022HEX: Auto-stake still locked\u0022);\r\n                    }\r\n                }\r\n            }\r\n\r\n            (stakeReturn, payout, penalty, cappedPenalty) = _stakePerformance(g, st, servedDays);\r\n        } else {\r\n            /* Deny early-unstake before an auto-stake minimum has been served */\r\n            require(!st._isAutoStake, \u0022HEX: Auto-stake still locked\u0022);\r\n\r\n            /* Stake hasn\u0027t been added to the total yet, so no penalties or rewards apply */\r\n            g._nextStakeSharesTotal -= st._stakeShares;\r\n\r\n            stakeReturn = st._stakedHearts;\r\n        }\r\n\r\n        _emitStakeEnd(\r\n            stakeIdParam,\r\n            st._stakedHearts,\r\n            st._stakeShares,\r\n            payout,\r\n            penalty,\r\n            servedDays,\r\n            prevUnlocked\r\n        );\r\n\r\n        if (cappedPenalty != 0 \u0026\u0026 !prevUnlocked) {\r\n            /* Split penalty proceeds only if not previously unlocked by stakeGoodAccounting() */\r\n            _splitPenaltyProceeds(g, cappedPenalty);\r\n        }\r\n\r\n        /* Pay the stake return, if any, to the staker */\r\n        if (stakeReturn != 0) {\r\n            _mint(msg.sender, stakeReturn);\r\n\r\n            /* Update the share rate if necessary */\r\n            _shareRateUpdate(g, st, stakeReturn);\r\n        }\r\n        g._lockedHeartsTotal -= st._stakedHearts;\r\n\r\n        _stakeRemove(stakeListRef, stakeIndex);\r\n\r\n        _globalsSync(g, gSnapshot);\r\n    }\r\n\r\n    /**\r\n     * @dev PUBLIC FACING: Return the current stake count for a staker address\r\n     * @param stakerAddr Address of staker\r\n     */\r\n    function stakeCount(address stakerAddr)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return stakeLists[stakerAddr].length;\r\n    }\r\n\r\n    /**\r\n     * @dev Open a stake.\r\n     * @param g Cache of stored globals\r\n     * @param newStakedHearts Number of Hearts to stake\r\n     * @param newStakedDays Number of days to stake\r\n     * @param newAutoStake Stake is automatic directly from a new claim\r\n     */\r\n    function _stakeStart(\r\n        GlobalsCache memory g,\r\n        uint256 newStakedHearts,\r\n        uint256 newStakedDays,\r\n        bool newAutoStake\r\n    )\r\n        internal\r\n    {\r\n        /* Enforce the maximum stake time */\r\n        require(newStakedDays \u003C= MAX_STAKE_DAYS, \u0022HEX: newStakedDays higher than maximum\u0022);\r\n\r\n        uint256 bonusHearts = _stakeStartBonusHearts(newStakedHearts, newStakedDays);\r\n        uint256 newStakeShares = (newStakedHearts \u002B bonusHearts) * SHARE_RATE_SCALE / g._shareRate;\r\n\r\n        /* Ensure newStakedHearts is enough for at least one stake share */\r\n        require(newStakeShares != 0, \u0022HEX: newStakedHearts must be at least minimum shareRate\u0022);\r\n\r\n        /*\r\n            The stakeStart timestamp will always be part-way through the current\r\n            day, so it needs to be rounded-up to the next day to ensure all\r\n            stakes align with the same fixed calendar days. The current day is\r\n            already rounded-down, so rounded-up is current day \u002B 1.\r\n        */\r\n        uint256 newLockedDay = g._currentDay \u003C CLAIM_PHASE_START_DAY\r\n            ? CLAIM_PHASE_START_DAY \u002B 1\r\n            : g._currentDay \u002B 1;\r\n\r\n        /* Create Stake */\r\n        uint40 newStakeId = \u002B\u002Bg._latestStakeId;\r\n        _stakeAdd(\r\n            stakeLists[msg.sender],\r\n            newStakeId,\r\n            newStakedHearts,\r\n            newStakeShares,\r\n            newLockedDay,\r\n            newStakedDays,\r\n            newAutoStake\r\n        );\r\n\r\n        _emitStakeStart(newStakeId, newStakedHearts, newStakeShares, newStakedDays, newAutoStake);\r\n\r\n        /* Stake is added to total in the next round, not the current round */\r\n        g._nextStakeSharesTotal \u002B= newStakeShares;\r\n\r\n        /* Track total staked Hearts for inflation calculations */\r\n        g._lockedHeartsTotal \u002B= newStakedHearts;\r\n    }\r\n\r\n    /**\r\n     * @dev Calculates total stake payout including rewards for a multi-day range\r\n     * @param g Cache of stored globals\r\n     * @param stakeSharesParam Param from stake to calculate bonuses for\r\n     * @param beginDay First day to calculate bonuses for\r\n     * @param endDay Last day (non-inclusive) of range to calculate bonuses for\r\n     * @return Payout in Hearts\r\n     */\r\n    function _calcPayoutRewards(\r\n        GlobalsCache memory g,\r\n        uint256 stakeSharesParam,\r\n        uint256 beginDay,\r\n        uint256 endDay\r\n    )\r\n        private\r\n        view\r\n        returns (uint256 payout)\r\n    {\r\n        for (uint256 day = beginDay; day \u003C endDay; day\u002B\u002B) {\r\n            payout \u002B= dailyData[day].dayPayoutTotal * stakeSharesParam\r\n                / dailyData[day].dayStakeSharesTotal;\r\n        }\r\n\r\n        /* Less expensive to re-read storage than to have the condition inside the loop */\r\n        if (beginDay \u003C= BIG_PAY_DAY \u0026\u0026 endDay \u003E BIG_PAY_DAY) {\r\n            uint256 bigPaySlice = g._unclaimedSatoshisTotal * HEARTS_PER_SATOSHI * stakeSharesParam\r\n                / dailyData[BIG_PAY_DAY].dayStakeSharesTotal;\r\n\r\n            payout \u002B= bigPaySlice \u002B _calcAdoptionBonus(g, bigPaySlice);\r\n        }\r\n        return payout;\r\n    }\r\n\r\n    /**\r\n     * @dev Calculate bonus Hearts for a new stake, if any\r\n     * @param newStakedHearts Number of Hearts to stake\r\n     * @param newStakedDays Number of days to stake\r\n     */\r\n    function _stakeStartBonusHearts(uint256 newStakedHearts, uint256 newStakedDays)\r\n        private\r\n        pure\r\n        returns (uint256 bonusHearts)\r\n    {\r\n        /*\r\n            LONGER PAYS BETTER:\r\n\r\n            If longer than 1 day stake is committed to, each extra day\r\n            gives bonus shares of approximately 0.0548%, which is approximately 20%\r\n            extra per year of increased stake length committed to, but capped to a\r\n            maximum of 200% extra.\r\n\r\n            extraDays       =  stakedDays - 1\r\n\r\n            longerBonus%    = (extraDays / 364) * 20%\r\n                            = (extraDays / 364) / 5\r\n                            =  extraDays / 1820\r\n                            =  extraDays / LPB\r\n\r\n            extraDays       =  longerBonus% * 1820\r\n            extraDaysMax    =  longerBonusMax% * 1820\r\n                            =  200% * 1820\r\n                            =  3640\r\n                            =  LPB_MAX_DAYS\r\n\r\n            BIGGER PAYS BETTER:\r\n\r\n            Bonus percentage scaled 0% to 10% for the first 150M HEX of stake.\r\n\r\n            biggerBonus%    = (cappedHearts /  BPB_MAX_HEARTS) * 10%\r\n                            = (cappedHearts /  BPB_MAX_HEARTS) / 10\r\n                            =  cappedHearts / (BPB_MAX_HEARTS * 10)\r\n                            =  cappedHearts /  BPB\r\n\r\n            COMBINED:\r\n\r\n            combinedBonus%  =            longerBonus%  \u002B  biggerBonus%\r\n\r\n                                      cappedExtraDays     cappedHearts\r\n                            =         ---------------  \u002B  ------------\r\n                                            LPB               BPB\r\n\r\n                                cappedExtraDays * BPB     cappedHearts * LPB\r\n                            =   ---------------------  \u002B  ------------------\r\n                                      LPB * BPB               LPB * BPB\r\n\r\n                                cappedExtraDays * BPB  \u002B  cappedHearts * LPB\r\n                            =   --------------------------------------------\r\n                                                  LPB  *  BPB\r\n\r\n            bonusHearts     = hearts * combinedBonus%\r\n                            = hearts * (cappedExtraDays * BPB  \u002B  cappedHearts * LPB) / (LPB * BPB)\r\n        */\r\n        uint256 cappedExtraDays = 0;\r\n\r\n        /* Must be more than 1 day for Longer-Pays-Better */\r\n        if (newStakedDays \u003E 1) {\r\n            cappedExtraDays = newStakedDays \u003C= LPB_MAX_DAYS ? newStakedDays - 1 : LPB_MAX_DAYS;\r\n        }\r\n\r\n        uint256 cappedStakedHearts = newStakedHearts \u003C= BPB_MAX_HEARTS\r\n            ? newStakedHearts\r\n            : BPB_MAX_HEARTS;\r\n\r\n        bonusHearts = cappedExtraDays * BPB \u002B cappedStakedHearts * LPB;\r\n        bonusHearts = newStakedHearts * bonusHearts / (LPB * BPB);\r\n\r\n        return bonusHearts;\r\n    }\r\n\r\n    function _stakeUnlock(GlobalsCache memory g, StakeCache memory st)\r\n        private\r\n        pure\r\n    {\r\n        g._stakeSharesTotal -= st._stakeShares;\r\n        st._unlockedDay = g._currentDay;\r\n    }\r\n\r\n    function _stakePerformance(GlobalsCache memory g, StakeCache memory st, uint256 servedDays)\r\n        private\r\n        view\r\n        returns (uint256 stakeReturn, uint256 payout, uint256 penalty, uint256 cappedPenalty)\r\n    {\r\n        if (servedDays \u003C st._stakedDays) {\r\n            (payout, penalty) = _calcPayoutAndEarlyPenalty(\r\n                g,\r\n                st._lockedDay,\r\n                st._stakedDays,\r\n                servedDays,\r\n                st._stakeShares\r\n            );\r\n            stakeReturn = st._stakedHearts \u002B payout;\r\n        } else {\r\n            // servedDays must == stakedDays here\r\n            payout = _calcPayoutRewards(\r\n                g,\r\n                st._stakeShares,\r\n                st._lockedDay,\r\n                st._lockedDay \u002B servedDays\r\n            );\r\n            stakeReturn = st._stakedHearts \u002B payout;\r\n\r\n            penalty = _calcLatePenalty(st._lockedDay, st._stakedDays, st._unlockedDay, stakeReturn);\r\n        }\r\n        if (penalty != 0) {\r\n            if (penalty \u003E stakeReturn) {\r\n                /* Cannot have a negative stake return */\r\n                cappedPenalty = stakeReturn;\r\n                stakeReturn = 0;\r\n            } else {\r\n                /* Remove penalty from the stake return */\r\n                cappedPenalty = penalty;\r\n                stakeReturn -= cappedPenalty;\r\n            }\r\n        }\r\n        return (stakeReturn, payout, penalty, cappedPenalty);\r\n    }\r\n\r\n    function _calcPayoutAndEarlyPenalty(\r\n        GlobalsCache memory g,\r\n        uint256 lockedDayParam,\r\n        uint256 stakedDaysParam,\r\n        uint256 servedDays,\r\n        uint256 stakeSharesParam\r\n    )\r\n        private\r\n        view\r\n        returns (uint256 payout, uint256 penalty)\r\n    {\r\n        uint256 servedEndDay = lockedDayParam \u002B servedDays;\r\n\r\n        /* 50% of stakedDays (rounded up) with a minimum applied */\r\n        uint256 penaltyDays = (stakedDaysParam \u002B 1) / 2;\r\n        if (penaltyDays \u003C EARLY_PENALTY_MIN_DAYS) {\r\n            penaltyDays = EARLY_PENALTY_MIN_DAYS;\r\n        }\r\n\r\n        if (servedDays == 0) {\r\n            /* Fill penalty days with the estimated average payout */\r\n            uint256 expected = _estimatePayoutRewardsDay(g, stakeSharesParam, lockedDayParam);\r\n            penalty = expected * penaltyDays;\r\n            return (payout, penalty); // Actual payout was 0\r\n        }\r\n\r\n        if (penaltyDays \u003C servedDays) {\r\n            /*\r\n                Simplified explanation of intervals where end-day is non-inclusive:\r\n\r\n                penalty:    [lockedDay  ...  penaltyEndDay)\r\n                delta:                      [penaltyEndDay  ...  servedEndDay)\r\n                payout:     [lockedDay  .......................  servedEndDay)\r\n            */\r\n            uint256 penaltyEndDay = lockedDayParam \u002B penaltyDays;\r\n            penalty = _calcPayoutRewards(g, stakeSharesParam, lockedDayParam, penaltyEndDay);\r\n\r\n            uint256 delta = _calcPayoutRewards(g, stakeSharesParam, penaltyEndDay, servedEndDay);\r\n            payout = penalty \u002B delta;\r\n            return (payout, penalty);\r\n        }\r\n\r\n        /* penaltyDays \u003E= servedDays  */\r\n        payout = _calcPayoutRewards(g, stakeSharesParam, lockedDayParam, servedEndDay);\r\n\r\n        if (penaltyDays == servedDays) {\r\n            penalty = payout;\r\n        } else {\r\n            /*\r\n                (penaltyDays \u003E servedDays) means not enough days served, so fill the\r\n                penalty days with the average payout from only the days that were served.\r\n            */\r\n            penalty = payout * penaltyDays / servedDays;\r\n        }\r\n        return (payout, penalty);\r\n    }\r\n\r\n    function _calcLatePenalty(\r\n        uint256 lockedDayParam,\r\n        uint256 stakedDaysParam,\r\n        uint256 unlockedDayParam,\r\n        uint256 rawStakeReturn\r\n    )\r\n        private\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        /* Allow grace time before penalties accrue */\r\n        uint256 maxUnlockedDay = lockedDayParam \u002B stakedDaysParam \u002B LATE_PENALTY_GRACE_DAYS;\r\n        if (unlockedDayParam \u003C= maxUnlockedDay) {\r\n            return 0;\r\n        }\r\n\r\n        /* Calculate penalty as a percentage of stake return based on time */\r\n        return rawStakeReturn * (unlockedDayParam - maxUnlockedDay) / LATE_PENALTY_SCALE_DAYS;\r\n    }\r\n\r\n    function _splitPenaltyProceeds(GlobalsCache memory g, uint256 penalty)\r\n        private\r\n    {\r\n        /* Split a penalty 50:50 between Origin and stakePenaltyTotal */\r\n        uint256 splitPenalty = penalty / 2;\r\n\r\n        if (splitPenalty != 0) {\r\n            _mint(ORIGIN_ADDR, splitPenalty);\r\n        }\r\n\r\n        /* Use the other half of the penalty to account for an odd-numbered penalty */\r\n        splitPenalty = penalty - splitPenalty;\r\n        g._stakePenaltyTotal \u002B= splitPenalty;\r\n    }\r\n\r\n    function _shareRateUpdate(GlobalsCache memory g, StakeCache memory st, uint256 stakeReturn)\r\n        private\r\n    {\r\n        if (stakeReturn \u003E st._stakedHearts) {\r\n            /*\r\n                Calculate the new shareRate that would yield the same number of shares if\r\n                the user re-staked this stakeReturn, factoring in any bonuses they would\r\n                receive in stakeStart().\r\n            */\r\n            uint256 bonusHearts = _stakeStartBonusHearts(stakeReturn, st._stakedDays);\r\n            uint256 newShareRate = (stakeReturn \u002B bonusHearts) * SHARE_RATE_SCALE / st._stakeShares;\r\n\r\n            if (newShareRate \u003E SHARE_RATE_MAX) {\r\n                /*\r\n                    Realistically this can\u0027t happen, but there are contrived theoretical\r\n                    scenarios that can lead to extreme values of newShareRate, so it is\r\n                    capped to prevent them anyway.\r\n                */\r\n                newShareRate = SHARE_RATE_MAX;\r\n            }\r\n\r\n            if (newShareRate \u003E g._shareRate) {\r\n                g._shareRate = newShareRate;\r\n\r\n                _emitShareRateChange(newShareRate, st._stakeId);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _emitStakeStart(\r\n        uint40 stakeId,\r\n        uint256 stakedHearts,\r\n        uint256 stakeShares,\r\n        uint256 stakedDays,\r\n        bool isAutoStake\r\n    )\r\n        private\r\n    {\r\n        emit StakeStart( // (auto-generated event)\r\n            uint256(uint40(block.timestamp))\r\n                | (uint256(uint72(stakedHearts)) \u003C\u003C 40)\r\n                | (uint256(uint72(stakeShares)) \u003C\u003C 112)\r\n                | (uint256(uint16(stakedDays)) \u003C\u003C 184)\r\n                | (isAutoStake ? (1 \u003C\u003C 200) : 0),\r\n            msg.sender,\r\n            stakeId\r\n        );\r\n    }\r\n\r\n    function _emitStakeGoodAccounting(\r\n        address stakerAddr,\r\n        uint40 stakeId,\r\n        uint256 stakedHearts,\r\n        uint256 stakeShares,\r\n        uint256 payout,\r\n        uint256 penalty\r\n    )\r\n        private\r\n    {\r\n        emit StakeGoodAccounting( // (auto-generated event)\r\n            uint256(uint40(block.timestamp))\r\n                | (uint256(uint72(stakedHearts)) \u003C\u003C 40)\r\n                | (uint256(uint72(stakeShares)) \u003C\u003C 112)\r\n                | (uint256(uint72(payout)) \u003C\u003C 184),\r\n            uint256(uint72(penalty)),\r\n            stakerAddr,\r\n            stakeId,\r\n            msg.sender\r\n        );\r\n    }\r\n\r\n    function _emitStakeEnd(\r\n        uint40 stakeId,\r\n        uint256 stakedHearts,\r\n        uint256 stakeShares,\r\n        uint256 payout,\r\n        uint256 penalty,\r\n        uint256 servedDays,\r\n        bool prevUnlocked\r\n    )\r\n        private\r\n    {\r\n        emit StakeEnd( // (auto-generated event)\r\n            uint256(uint40(block.timestamp))\r\n                | (uint256(uint72(stakedHearts)) \u003C\u003C 40)\r\n                | (uint256(uint72(stakeShares)) \u003C\u003C 112)\r\n                | (uint256(uint72(payout)) \u003C\u003C 184),\r\n            uint256(uint72(penalty))\r\n                | (uint256(uint16(servedDays)) \u003C\u003C 72)\r\n                | (prevUnlocked ? (1 \u003C\u003C 88) : 0),\r\n            msg.sender,\r\n            stakeId\r\n        );\r\n    }\r\n\r\n    function _emitShareRateChange(uint256 shareRate, uint40 stakeId)\r\n        private\r\n    {\r\n        emit ShareRateChange( // (auto-generated event)\r\n            uint256(uint40(block.timestamp))\r\n                | (uint256(uint40(shareRate)) \u003C\u003C 40),\r\n            stakeId\r\n        );\r\n    }\r\n}\r\n\r\n/**\r\n * @dev These functions deal with verification of Merkle trees (hash trees),\r\n */\r\nlibrary MerkleProof {\r\n    /**\r\n     * @dev Returns true if a \u0060leaf\u0060 can be proved to be a part of a Merkle tree\r\n     * defined by \u0060root\u0060. For this, a \u0060proof\u0060 must be provided, containing\r\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\r\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\r\n     */\r\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\r\n        bytes32 computedHash = leaf;\r\n\r\n        for (uint256 i = 0; i \u003C proof.length; i\u002B\u002B) {\r\n            bytes32 proofElement = proof[i];\r\n\r\n            if (computedHash \u003C proofElement) {\r\n                // Hash(current computed hash \u002B current element of the proof)\r\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\r\n            } else {\r\n                // Hash(current element of the proof \u002B current computed hash)\r\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\r\n            }\r\n        }\r\n\r\n        // Check if the computed hash (root) is equal to the provided root\r\n        return computedHash == root;\r\n    }\r\n}\r\n\r\ncontract UTXOClaimValidation is StakeableToken {\r\n    /**\r\n     * @dev PUBLIC FACING: Verify a BTC address and balance are unclaimed and part of the Merkle tree\r\n     * @param btcAddr Bitcoin address (binary; no base58-check encoding)\r\n     * @param rawSatoshis Raw BTC address balance in Satoshis\r\n     * @param proof Merkle tree proof\r\n     * @return True if can be claimed\r\n     */\r\n    function btcAddressIsClaimable(bytes20 btcAddr, uint256 rawSatoshis, bytes32[] calldata proof)\r\n        external\r\n        view\r\n        returns (bool)\r\n    {\r\n        uint256 day = _currentDay();\r\n\r\n        require(day \u003E= CLAIM_PHASE_START_DAY, \u0022HEX: Claim phase has not yet started\u0022);\r\n        require(day \u003C CLAIM_PHASE_END_DAY, \u0022HEX: Claim phase has ended\u0022);\r\n\r\n        /* Don\u0027t need to check Merkle proof if UTXO BTC address has already been claimed    */\r\n        if (btcAddressClaims[btcAddr]) {\r\n            return false;\r\n        }\r\n\r\n        /* Verify the Merkle tree proof */\r\n        return _btcAddressIsValid(btcAddr, rawSatoshis, proof);\r\n    }\r\n\r\n    /**\r\n     * @dev PUBLIC FACING: Verify a BTC address and balance are part of the Merkle tree\r\n     * @param btcAddr Bitcoin address (binary; no base58-check encoding)\r\n     * @param rawSatoshis Raw BTC address balance in Satoshis\r\n     * @param proof Merkle tree proof\r\n     * @return True if valid\r\n     */\r\n    function btcAddressIsValid(bytes20 btcAddr, uint256 rawSatoshis, bytes32[] calldata proof)\r\n        external\r\n        pure\r\n        returns (bool)\r\n    {\r\n        return _btcAddressIsValid(btcAddr, rawSatoshis, proof);\r\n    }\r\n\r\n    /**\r\n     * @dev PUBLIC FACING: Verify a Merkle proof using the UTXO Merkle tree\r\n     * @param merkleLeaf Leaf asserted to be present in the Merkle tree\r\n     * @param proof Generated Merkle tree proof\r\n     * @return True if valid\r\n     */\r\n    function merkleProofIsValid(bytes32 merkleLeaf, bytes32[] calldata proof)\r\n        external\r\n        pure\r\n        returns (bool)\r\n    {\r\n        return _merkleProofIsValid(merkleLeaf, proof);\r\n    }\r\n\r\n    /**\r\n     * @dev PUBLIC FACING: Verify that a Bitcoin signature matches the claim message containing\r\n     * the Ethereum address and claim param hash\r\n     * @param claimToAddr Eth address within the signed claim message\r\n     * @param claimParamHash Param hash within the signed claim message\r\n     * @param pubKeyX First  half of uncompressed ECDSA public key\r\n     * @param pubKeyY Second half of uncompressed ECDSA public key\r\n     * @param claimFlags Claim flags specifying address and message formats\r\n     * @param v v parameter of ECDSA signature\r\n     * @param r r parameter of ECDSA signature\r\n     * @param s s parameter of ECDSA signature\r\n     * @return True if matching\r\n     */\r\n    function claimMessageMatchesSignature(\r\n        address claimToAddr,\r\n        bytes32 claimParamHash,\r\n        bytes32 pubKeyX,\r\n        bytes32 pubKeyY,\r\n        uint8 claimFlags,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    )\r\n        public\r\n        pure\r\n        returns (bool)\r\n    {\r\n        require(v \u003E= 27 \u0026\u0026 v \u003C= 30, \u0022HEX: v invalid\u0022);\r\n\r\n        /*\r\n            ecrecover() returns an Eth address rather than a public key, so\r\n            we must do the same to compare.\r\n        */\r\n        address pubKeyEthAddr = pubKeyToEthAddress(pubKeyX, pubKeyY);\r\n\r\n        /* Create and hash the claim message text */\r\n        bytes32 messageHash = _hash256(\r\n            _claimMessageCreate(claimToAddr, claimParamHash, claimFlags)\r\n        );\r\n\r\n        /* Verify the public key */\r\n        return ecrecover(messageHash, v, r, s) == pubKeyEthAddr;\r\n    }\r\n\r\n    /**\r\n     * @dev PUBLIC FACING: Derive an Ethereum address from an ECDSA public key\r\n     * @param pubKeyX First  half of uncompressed ECDSA public key\r\n     * @param pubKeyY Second half of uncompressed ECDSA public key\r\n     * @return Derived Eth address\r\n     */\r\n    function pubKeyToEthAddress(bytes32 pubKeyX, bytes32 pubKeyY)\r\n        public\r\n        pure\r\n        returns (address)\r\n    {\r\n        return address(uint160(uint256(keccak256(abi.encodePacked(pubKeyX, pubKeyY)))));\r\n    }\r\n\r\n    /**\r\n     * @dev PUBLIC FACING: Derive a Bitcoin address from an ECDSA public key\r\n     * @param pubKeyX First  half of uncompressed ECDSA public key\r\n     * @param pubKeyY Second half of uncompressed ECDSA public key\r\n     * @param claimFlags Claim flags specifying address and message formats\r\n     * @return Derived Bitcoin address (binary; no base58-check encoding)\r\n     */\r\n    function pubKeyToBtcAddress(bytes32 pubKeyX, bytes32 pubKeyY, uint8 claimFlags)\r\n        public\r\n        pure\r\n        returns (bytes20)\r\n    {\r\n        /*\r\n            Helpful references:\r\n             - https://en.bitcoin.it/wiki/Technical_background_of_version_1_Bitcoin_addresses\r\n             - https://github.com/cryptocoinjs/ecurve/blob/master/lib/point.js\r\n        */\r\n        uint8 startingByte;\r\n        bytes memory pubKey;\r\n        bool compressed = (claimFlags \u0026 CLAIM_FLAG_BTC_ADDR_COMPRESSED) != 0;\r\n        bool nested = (claimFlags \u0026 CLAIM_FLAG_BTC_ADDR_P2WPKH_IN_P2SH) != 0;\r\n        bool bech32 = (claimFlags \u0026 CLAIM_FLAG_BTC_ADDR_BECH32) != 0;\r\n\r\n        if (compressed) {\r\n            /* Compressed public key format */\r\n            require(!(nested \u0026\u0026 bech32), \u0022HEX: claimFlags invalid\u0022);\r\n\r\n            startingByte = (pubKeyY[31] \u0026 0x01) == 0 ? 0x02 : 0x03;\r\n            pubKey = abi.encodePacked(startingByte, pubKeyX);\r\n        } else {\r\n            /* Uncompressed public key format */\r\n            require(!nested \u0026\u0026 !bech32, \u0022HEX: claimFlags invalid\u0022);\r\n\r\n            startingByte = 0x04;\r\n            pubKey = abi.encodePacked(startingByte, pubKeyX, pubKeyY);\r\n        }\r\n\r\n        bytes20 pubKeyHash = _hash160(pubKey);\r\n        if (nested) {\r\n            return _hash160(abi.encodePacked(hex\u00220014\u0022, pubKeyHash));\r\n        }\r\n        return pubKeyHash;\r\n    }\r\n\r\n    /**\r\n     * @dev Verify a BTC address and balance are part of the Merkle tree\r\n     * @param btcAddr Bitcoin address (binary; no base58-check encoding)\r\n     * @param rawSatoshis Raw BTC address balance in Satoshis\r\n     * @param proof Merkle tree proof\r\n     * @return True if valid\r\n     */\r\n    function _btcAddressIsValid(bytes20 btcAddr, uint256 rawSatoshis, bytes32[] memory proof)\r\n        internal\r\n        pure\r\n        returns (bool)\r\n    {\r\n        /*\r\n            Ensure the proof does not attempt to treat a Merkle leaf as if it were an\r\n            internal Merkle tree node. A leaf will always have the zero-fill. An\r\n            internal node will never have the zero-fill, as guaranteed by HEX\u0027s Merkle\r\n            tree construction.\r\n\r\n            The first element, proof[0], will always be a leaf because it is the pair\r\n            of the leaf being validated. The rest of the elements, proof[1..length-1],\r\n            must be internal nodes.\r\n\r\n            The number of leaves (CLAIMABLE_BTC_ADDR_COUNT) is even, as guaranteed by\r\n            HEX\u0027s Merkle tree construction, which eliminates the only edge-case where\r\n            this validation would not apply.\r\n        */\r\n        require((uint256(proof[0]) \u0026 MERKLE_LEAF_FILL_MASK) == 0, \u0022HEX: proof invalid\u0022);\r\n        for (uint256 i = 1; i \u003C proof.length; i\u002B\u002B) {\r\n            require((uint256(proof[i]) \u0026 MERKLE_LEAF_FILL_MASK) != 0, \u0022HEX: proof invalid\u0022);\r\n        }\r\n\r\n        /*\r\n            Calculate the 32 byte Merkle leaf associated with this BTC address and balance\r\n                160 bits: BTC address\r\n                 52 bits: Zero-fill\r\n                 45 bits: Satoshis (limited by MAX_BTC_ADDR_BALANCE_SATOSHIS)\r\n        */\r\n        bytes32 merkleLeaf = bytes32(btcAddr) | bytes32(rawSatoshis);\r\n\r\n        /* Verify the Merkle tree proof */\r\n        return _merkleProofIsValid(merkleLeaf, proof);\r\n    }\r\n\r\n    /**\r\n     * @dev Verify a Merkle proof using the UTXO Merkle tree\r\n     * @param merkleLeaf Leaf asserted to be present in the Merkle tree\r\n     * @param proof Generated Merkle tree proof\r\n     * @return True if valid\r\n     */\r\n    function _merkleProofIsValid(bytes32 merkleLeaf, bytes32[] memory proof)\r\n        private\r\n        pure\r\n        returns (bool)\r\n    {\r\n        return MerkleProof.verify(proof, MERKLE_TREE_ROOT, merkleLeaf);\r\n    }\r\n\r\n    function _claimMessageCreate(address claimToAddr, bytes32 claimParamHash, uint8 claimFlags)\r\n        private\r\n        pure\r\n        returns (bytes memory)\r\n    {\r\n        bytes memory prefixStr = (claimFlags \u0026 CLAIM_FLAG_MSG_PREFIX_OLD) != 0\r\n            ? OLD_CLAIM_PREFIX_STR\r\n            : STD_CLAIM_PREFIX_STR;\r\n\r\n        bool includeAddrChecksum = (claimFlags \u0026 CLAIM_FLAG_ETH_ADDR_LOWERCASE) == 0;\r\n\r\n        bytes memory addrStr = _addressStringCreate(claimToAddr, includeAddrChecksum);\r\n\r\n        if (claimParamHash == 0) {\r\n            return abi.encodePacked(\r\n                BITCOIN_SIG_PREFIX_LEN,\r\n                BITCOIN_SIG_PREFIX_STR,\r\n                uint8(prefixStr.length) \u002B ETH_ADDRESS_HEX_LEN,\r\n                prefixStr,\r\n                addrStr\r\n            );\r\n        }\r\n\r\n        bytes memory claimParamHashStr = new bytes(CLAIM_PARAM_HASH_HEX_LEN);\r\n\r\n        _hexStringFromData(claimParamHashStr, claimParamHash, CLAIM_PARAM_HASH_BYTE_LEN);\r\n\r\n        return abi.encodePacked(\r\n            BITCOIN_SIG_PREFIX_LEN,\r\n            BITCOIN_SIG_PREFIX_STR,\r\n            uint8(prefixStr.length) \u002B ETH_ADDRESS_HEX_LEN \u002B 1 \u002B CLAIM_PARAM_HASH_HEX_LEN,\r\n            prefixStr,\r\n            addrStr,\r\n            \u0022_\u0022,\r\n            claimParamHashStr\r\n        );\r\n    }\r\n\r\n    function _addressStringCreate(address addr, bool includeAddrChecksum)\r\n        private\r\n        pure\r\n        returns (bytes memory addrStr)\r\n    {\r\n        addrStr = new bytes(ETH_ADDRESS_HEX_LEN);\r\n        _hexStringFromData(addrStr, bytes32(bytes20(addr)), ETH_ADDRESS_BYTE_LEN);\r\n\r\n        if (includeAddrChecksum) {\r\n            bytes32 addrStrHash = keccak256(addrStr);\r\n\r\n            uint256 offset = 0;\r\n\r\n            for (uint256 i = 0; i \u003C ETH_ADDRESS_BYTE_LEN; i\u002B\u002B) {\r\n                uint8 b = uint8(addrStrHash[i]);\r\n\r\n                _addressStringChecksumChar(addrStr, offset\u002B\u002B, b \u003E\u003E 4);\r\n                _addressStringChecksumChar(addrStr, offset\u002B\u002B, b \u0026 0x0f);\r\n            }\r\n        }\r\n\r\n        return addrStr;\r\n    }\r\n\r\n    function _addressStringChecksumChar(bytes memory addrStr, uint256 offset, uint8 hashNybble)\r\n        private\r\n        pure\r\n    {\r\n        bytes1 ch = addrStr[offset];\r\n\r\n        if (ch \u003E= \u0022a\u0022 \u0026\u0026 hashNybble \u003E= 8) {\r\n            addrStr[offset] = ch ^ 0x20;\r\n        }\r\n    }\r\n\r\n    function _hexStringFromData(bytes memory hexStr, bytes32 data, uint256 dataLen)\r\n        private\r\n        pure\r\n    {\r\n        uint256 offset = 0;\r\n\r\n        for (uint256 i = 0; i \u003C dataLen; i\u002B\u002B) {\r\n            uint8 b = uint8(data[i]);\r\n\r\n            hexStr[offset\u002B\u002B] = HEX_DIGITS[b \u003E\u003E 4];\r\n            hexStr[offset\u002B\u002B] = HEX_DIGITS[b \u0026 0x0f];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev sha256(sha256(data))\r\n     * @param data Data to be hashed\r\n     * @return 32-byte hash\r\n     */\r\n    function _hash256(bytes memory data)\r\n        private\r\n        pure\r\n        returns (bytes32)\r\n    {\r\n        return sha256(abi.encodePacked(sha256(data)));\r\n    }\r\n\r\n    /**\r\n     * @dev ripemd160(sha256(data))\r\n     * @param data Data to be hashed\r\n     * @return 20-byte hash\r\n     */\r\n    function _hash160(bytes memory data)\r\n        private\r\n        pure\r\n        returns (bytes20)\r\n    {\r\n        return ripemd160(abi.encodePacked(sha256(data)));\r\n    }\r\n}\r\n\r\ncontract UTXORedeemableToken is UTXOClaimValidation {\r\n    /**\r\n     * @dev PUBLIC FACING: Claim a BTC address and its Satoshi balance in Hearts\r\n     * crediting the appropriate amount to a specified Eth address. Bitcoin ECDSA\r\n     * signature must be from that BTC address and must match the claim message\r\n     * for the Eth address.\r\n     * @param rawSatoshis Raw BTC address balance in Satoshis\r\n     * @param proof Merkle tree proof\r\n     * @param claimToAddr Destination Eth address to credit Hearts to\r\n     * @param pubKeyX First  half of uncompressed ECDSA public key for the BTC address\r\n     * @param pubKeyY Second half of uncompressed ECDSA public key for the BTC address\r\n     * @param claimFlags Claim flags specifying address and message formats\r\n     * @param v v parameter of ECDSA signature\r\n     * @param r r parameter of ECDSA signature\r\n     * @param s s parameter of ECDSA signature\r\n     * @param autoStakeDays Number of days to auto-stake, subject to minimum auto-stake days\r\n     * @param referrerAddr Eth address of referring user (optional; 0x0 for no referrer)\r\n     * @return Total number of Hearts credited, if successful\r\n     */\r\n    function btcAddressClaim(\r\n        uint256 rawSatoshis,\r\n        bytes32[] calldata proof,\r\n        address claimToAddr,\r\n        bytes32 pubKeyX,\r\n        bytes32 pubKeyY,\r\n        uint8 claimFlags,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s,\r\n        uint256 autoStakeDays,\r\n        address referrerAddr\r\n    )\r\n        external\r\n        returns (uint256)\r\n    {\r\n        /* Sanity check */\r\n        require(rawSatoshis \u003C= MAX_BTC_ADDR_BALANCE_SATOSHIS, \u0022HEX: CHK: rawSatoshis\u0022);\r\n\r\n        /* Enforce the minimum stake time for the auto-stake from this claim */\r\n        require(autoStakeDays \u003E= MIN_AUTO_STAKE_DAYS, \u0022HEX: autoStakeDays lower than minimum\u0022);\r\n\r\n        /* Ensure signature matches the claim message containing the Eth address and claimParamHash */\r\n        {\r\n            bytes32 claimParamHash = 0;\r\n\r\n            if (claimToAddr != msg.sender) {\r\n                /* Claimer did not send this, so claim params must be signed */\r\n                claimParamHash = keccak256(\r\n                    abi.encodePacked(MERKLE_TREE_ROOT, autoStakeDays, referrerAddr)\r\n                );\r\n            }\r\n\r\n            require(\r\n                claimMessageMatchesSignature(\r\n                    claimToAddr,\r\n                    claimParamHash,\r\n                    pubKeyX,\r\n                    pubKeyY,\r\n                    claimFlags,\r\n                    v,\r\n                    r,\r\n                    s\r\n                ),\r\n                \u0022HEX: Signature mismatch\u0022\r\n            );\r\n        }\r\n\r\n        /* Derive BTC address from public key */\r\n        bytes20 btcAddr = pubKeyToBtcAddress(pubKeyX, pubKeyY, claimFlags);\r\n\r\n        /* Ensure BTC address has not yet been claimed */\r\n        require(!btcAddressClaims[btcAddr], \u0022HEX: BTC address balance already claimed\u0022);\r\n\r\n        /* Ensure BTC address is part of the Merkle tree */\r\n        require(\r\n            _btcAddressIsValid(btcAddr, rawSatoshis, proof),\r\n            \u0022HEX: BTC address or balance unknown\u0022\r\n        );\r\n\r\n        /* Mark BTC address as claimed */\r\n        btcAddressClaims[btcAddr] = true;\r\n\r\n        return _satoshisClaimSync(\r\n            rawSatoshis,\r\n            claimToAddr,\r\n            btcAddr,\r\n            claimFlags,\r\n            autoStakeDays,\r\n            referrerAddr\r\n        );\r\n    }\r\n\r\n    function _satoshisClaimSync(\r\n        uint256 rawSatoshis,\r\n        address claimToAddr,\r\n        bytes20 btcAddr,\r\n        uint8 claimFlags,\r\n        uint256 autoStakeDays,\r\n        address referrerAddr\r\n    )\r\n        private\r\n        returns (uint256 totalClaimedHearts)\r\n    {\r\n        GlobalsCache memory g;\r\n        GlobalsCache memory gSnapshot;\r\n        _globalsLoad(g, gSnapshot);\r\n\r\n        totalClaimedHearts = _satoshisClaim(\r\n            g,\r\n            rawSatoshis,\r\n            claimToAddr,\r\n            btcAddr,\r\n            claimFlags,\r\n            autoStakeDays,\r\n            referrerAddr\r\n        );\r\n\r\n        _globalsSync(g, gSnapshot);\r\n\r\n        return totalClaimedHearts;\r\n    }\r\n\r\n    /**\r\n     * @dev Credit an Eth address with the Hearts value of a raw Satoshis balance\r\n     * @param g Cache of stored globals\r\n     * @param rawSatoshis Raw BTC address balance in Satoshis\r\n     * @param claimToAddr Destination Eth address for the claimed Hearts to be sent\r\n     * @param btcAddr Bitcoin address (binary; no base58-check encoding)\r\n     * @param autoStakeDays Number of days to auto-stake, subject to minimum auto-stake days\r\n     * @param referrerAddr Eth address of referring user (optional; 0x0 for no referrer)\r\n     * @return Total number of Hearts credited, if successful\r\n     */\r\n    function _satoshisClaim(\r\n        GlobalsCache memory g,\r\n        uint256 rawSatoshis,\r\n        address claimToAddr,\r\n        bytes20 btcAddr,\r\n        uint8 claimFlags,\r\n        uint256 autoStakeDays,\r\n        address referrerAddr\r\n    )\r\n        private\r\n        returns (uint256 totalClaimedHearts)\r\n    {\r\n        /* Allowed only during the claim phase */\r\n        require(g._currentDay \u003E= CLAIM_PHASE_START_DAY, \u0022HEX: Claim phase has not yet started\u0022);\r\n        require(g._currentDay \u003C CLAIM_PHASE_END_DAY, \u0022HEX: Claim phase has ended\u0022);\r\n\r\n        /* Check if log data needs to be updated */\r\n        _dailyDataUpdateAuto(g);\r\n\r\n        /* Sanity check */\r\n        require(\r\n            g._claimedBtcAddrCount \u003C CLAIMABLE_BTC_ADDR_COUNT,\r\n            \u0022HEX: CHK: _claimedBtcAddrCount\u0022\r\n        );\r\n\r\n        (uint256 adjSatoshis, uint256 claimedHearts, uint256 claimBonusHearts) = _calcClaimValues(\r\n            g,\r\n            rawSatoshis\r\n        );\r\n\r\n        /* Increment claim count to track viral rewards */\r\n        g._claimedBtcAddrCount\u002B\u002B;\r\n\r\n        totalClaimedHearts = _remitBonuses(\r\n            claimToAddr,\r\n            btcAddr,\r\n            claimFlags,\r\n            rawSatoshis,\r\n            adjSatoshis,\r\n            claimedHearts,\r\n            claimBonusHearts,\r\n            referrerAddr\r\n        );\r\n\r\n        /* Auto-stake a percentage of the successful claim */\r\n        uint256 autoStakeHearts = totalClaimedHearts * AUTO_STAKE_CLAIM_PERCENT / 100;\r\n        _stakeStart(g, autoStakeHearts, autoStakeDays, true);\r\n\r\n        /* Mint remaining claimed Hearts to claim address */\r\n        _mint(claimToAddr, totalClaimedHearts - autoStakeHearts);\r\n\r\n        return totalClaimedHearts;\r\n    }\r\n\r\n    function _remitBonuses(\r\n        address claimToAddr,\r\n        bytes20 btcAddr,\r\n        uint8 claimFlags,\r\n        uint256 rawSatoshis,\r\n        uint256 adjSatoshis,\r\n        uint256 claimedHearts,\r\n        uint256 claimBonusHearts,\r\n        address referrerAddr\r\n    )\r\n        private\r\n        returns (uint256 totalClaimedHearts)\r\n    {\r\n        totalClaimedHearts = claimedHearts \u002B claimBonusHearts;\r\n\r\n        uint256 originBonusHearts = claimBonusHearts;\r\n\r\n        if (referrerAddr == address(0)) {\r\n            /* No referrer */\r\n            _emitClaim(\r\n                claimToAddr,\r\n                btcAddr,\r\n                claimFlags,\r\n                rawSatoshis,\r\n                adjSatoshis,\r\n                totalClaimedHearts,\r\n                referrerAddr\r\n            );\r\n        } else {\r\n            /* Referral bonus of 10% of total claimed Hearts to claimer */\r\n            uint256 referralBonusHearts = totalClaimedHearts / 10;\r\n\r\n            totalClaimedHearts \u002B= referralBonusHearts;\r\n\r\n            /* Then a cumulative referrer bonus of 20% to referrer */\r\n            uint256 referrerBonusHearts = totalClaimedHearts / 5;\r\n\r\n            originBonusHearts \u002B= referralBonusHearts \u002B referrerBonusHearts;\r\n\r\n            if (referrerAddr == claimToAddr) {\r\n                /* Self-referred */\r\n                totalClaimedHearts \u002B= referrerBonusHearts;\r\n                _emitClaim(\r\n                    claimToAddr,\r\n                    btcAddr,\r\n                    claimFlags,\r\n                    rawSatoshis,\r\n                    adjSatoshis,\r\n                    totalClaimedHearts,\r\n                    referrerAddr\r\n                );\r\n            } else {\r\n                /* Referred by different address */\r\n                _emitClaim(\r\n                    claimToAddr,\r\n                    btcAddr,\r\n                    claimFlags,\r\n                    rawSatoshis,\r\n                    adjSatoshis,\r\n                    totalClaimedHearts,\r\n                    referrerAddr\r\n                );\r\n                _mint(referrerAddr, referrerBonusHearts);\r\n            }\r\n        }\r\n\r\n        _mint(ORIGIN_ADDR, originBonusHearts);\r\n\r\n        return totalClaimedHearts;\r\n    }\r\n\r\n    function _emitClaim(\r\n        address claimToAddr,\r\n        bytes20 btcAddr,\r\n        uint8 claimFlags,\r\n        uint256 rawSatoshis,\r\n        uint256 adjSatoshis,\r\n        uint256 claimedHearts,\r\n        address referrerAddr\r\n    )\r\n        private\r\n    {\r\n        emit Claim( // (auto-generated event)\r\n            uint256(uint40(block.timestamp))\r\n                | (uint256(uint56(rawSatoshis)) \u003C\u003C 40)\r\n                | (uint256(uint56(adjSatoshis)) \u003C\u003C 96)\r\n                | (uint256(claimFlags) \u003C\u003C 152)\r\n                | (uint256(uint72(claimedHearts)) \u003C\u003C 160),\r\n            uint256(uint160(msg.sender)),\r\n            btcAddr,\r\n            claimToAddr,\r\n            referrerAddr\r\n        );\r\n\r\n        if (claimToAddr == msg.sender) {\r\n            return;\r\n        }\r\n\r\n        emit ClaimAssist( // (auto-generated event)\r\n            uint256(uint40(block.timestamp))\r\n                | (uint256(uint160(btcAddr)) \u003C\u003C 40)\r\n                | (uint256(uint56(rawSatoshis)) \u003C\u003C 200),\r\n            uint256(uint56(adjSatoshis))\r\n                | (uint256(uint160(claimToAddr)) \u003C\u003C 56)\r\n                | (uint256(claimFlags) \u003C\u003C 216),\r\n            uint256(uint72(claimedHearts))\r\n                | (uint256(uint160(referrerAddr)) \u003C\u003C 72),\r\n            msg.sender\r\n        );\r\n    }\r\n\r\n    function _calcClaimValues(GlobalsCache memory g, uint256 rawSatoshis)\r\n        private\r\n        pure\r\n        returns (uint256 adjSatoshis, uint256 claimedHearts, uint256 claimBonusHearts)\r\n    {\r\n        /* Apply Silly Whale reduction */\r\n        adjSatoshis = _adjustSillyWhale(rawSatoshis);\r\n        require(\r\n            g._claimedSatoshisTotal \u002B adjSatoshis \u003C= CLAIMABLE_SATOSHIS_TOTAL,\r\n            \u0022HEX: CHK: _claimedSatoshisTotal\u0022\r\n        );\r\n        g._claimedSatoshisTotal \u002B= adjSatoshis;\r\n\r\n        uint256 daysRemaining = CLAIM_PHASE_END_DAY - g._currentDay;\r\n\r\n        /* Apply late-claim reduction */\r\n        adjSatoshis = _adjustLateClaim(adjSatoshis, daysRemaining);\r\n        g._unclaimedSatoshisTotal -= adjSatoshis;\r\n\r\n        /* Convert to Hearts and calculate speed bonus */\r\n        claimedHearts = adjSatoshis * HEARTS_PER_SATOSHI;\r\n        claimBonusHearts = _calcSpeedBonus(claimedHearts, daysRemaining);\r\n\r\n        return (adjSatoshis, claimedHearts, claimBonusHearts);\r\n    }\r\n\r\n    /**\r\n     * @dev Apply Silly Whale adjustment\r\n     * @param rawSatoshis Raw BTC address balance in Satoshis\r\n     * @return Adjusted BTC address balance in Satoshis\r\n     */\r\n    function _adjustSillyWhale(uint256 rawSatoshis)\r\n        private\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        if (rawSatoshis \u003C 1000e8) {\r\n            /* For \u003C 1,000 BTC: no penalty */\r\n            return rawSatoshis;\r\n        }\r\n        if (rawSatoshis \u003E= 10000e8) {\r\n            /* For \u003E= 10,000 BTC: penalty is 75%, leaving 25% */\r\n            return rawSatoshis / 4;\r\n        }\r\n        /*\r\n            For 1,000 \u003C= BTC \u003C 10,000: penalty scales linearly from 50% to 75%\r\n\r\n            penaltyPercent  = (btc - 1000) / (10000 - 1000) * (75 - 50) \u002B 50\r\n                            = (btc - 1000) / 9000 * 25 \u002B 50\r\n                            = (btc - 1000) / 360 \u002B 50\r\n\r\n            appliedPercent  = 100 - penaltyPercent\r\n                            = 100 - ((btc - 1000) / 360 \u002B 50)\r\n                            = 100 - (btc - 1000) / 360 - 50\r\n                            = 50 - (btc - 1000) / 360\r\n                            = (18000 - (btc - 1000)) / 360\r\n                            = (18000 - btc \u002B 1000) / 360\r\n                            = (19000 - btc) / 360\r\n\r\n            adjustedBtc     = btc * appliedPercent / 100\r\n                            = btc * ((19000 - btc) / 360) / 100\r\n                            = btc * (19000 - btc) / 36000\r\n\r\n            adjustedSat     = 1e8 * adjustedBtc\r\n                            = 1e8 * (btc * (19000 - btc) / 36000)\r\n                            = 1e8 * ((sat / 1e8) * (19000 - (sat / 1e8)) / 36000)\r\n                            = 1e8 * (sat / 1e8) * (19000 - (sat / 1e8)) / 36000\r\n                            = (sat / 1e8) * 1e8 * (19000 - (sat / 1e8)) / 36000\r\n                            = (sat / 1e8) * (19000e8 - sat) / 36000\r\n                            = sat * (19000e8 - sat) / 36000e8\r\n        */\r\n        return rawSatoshis * (19000e8 - rawSatoshis) / 36000e8;\r\n    }\r\n\r\n    /**\r\n     * @dev Apply late-claim adjustment to scale claim to zero by end of claim phase\r\n     * @param adjSatoshis Adjusted BTC address balance in Satoshis (after Silly Whale)\r\n     * @param daysRemaining Number of reward days remaining in claim phase\r\n     * @return Adjusted BTC address balance in Satoshis (after Silly Whale and Late-Claim)\r\n     */\r\n    function _adjustLateClaim(uint256 adjSatoshis, uint256 daysRemaining)\r\n        private\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        /*\r\n            Only valid from CLAIM_PHASE_DAYS to 1, and only used during that time.\r\n\r\n            adjustedSat = sat * (daysRemaining / CLAIM_PHASE_DAYS) * 100%\r\n                        = sat *  daysRemaining / CLAIM_PHASE_DAYS\r\n        */\r\n        return adjSatoshis * daysRemaining / CLAIM_PHASE_DAYS;\r\n    }\r\n\r\n    /**\r\n     * @dev Calculates speed bonus for claiming earlier in the claim phase\r\n     * @param claimedHearts Hearts claimed from adjusted BTC address balance Satoshis\r\n     * @param daysRemaining Number of claim days remaining in claim phase\r\n     * @return Speed bonus in Hearts\r\n     */\r\n    function _calcSpeedBonus(uint256 claimedHearts, uint256 daysRemaining)\r\n        private\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        /*\r\n            Only valid from CLAIM_PHASE_DAYS to 1, and only used during that time.\r\n            Speed bonus is 20% ... 0% inclusive.\r\n\r\n            bonusHearts = claimedHearts  * ((daysRemaining - 1)  /  (CLAIM_PHASE_DAYS - 1)) * 20%\r\n                        = claimedHearts  * ((daysRemaining - 1)  /  (CLAIM_PHASE_DAYS - 1)) * 20/100\r\n                        = claimedHearts  * ((daysRemaining - 1)  /  (CLAIM_PHASE_DAYS - 1)) / 5\r\n                        = claimedHearts  *  (daysRemaining - 1)  / ((CLAIM_PHASE_DAYS - 1)  * 5)\r\n        */\r\n        return claimedHearts * (daysRemaining - 1) / ((CLAIM_PHASE_DAYS - 1) * 5);\r\n    }\r\n}\r\n\r\ncontract TransformableToken is UTXORedeemableToken {\r\n    /**\r\n     * @dev PUBLIC FACING: Enter the tranform lobby for the current round\r\n     * @param referrerAddr Eth address of referring user (optional; 0x0 for no referrer)\r\n     */\r\n    function xfLobbyEnter(address referrerAddr)\r\n        external\r\n        payable\r\n    {\r\n        uint256 enterDay = _currentDay();\r\n        require(enterDay \u003C CLAIM_PHASE_END_DAY, \u0022HEX: Lobbies have ended\u0022);\r\n\r\n        uint256 rawAmount = msg.value;\r\n        require(rawAmount != 0, \u0022HEX: Amount required\u0022);\r\n\r\n        XfLobbyQueueStore storage qRef = xfLobbyMembers[enterDay][msg.sender];\r\n\r\n        uint256 entryIndex = qRef.tailIndex\u002B\u002B;\r\n\r\n        qRef.entries[entryIndex] = XfLobbyEntryStore(uint96(rawAmount), referrerAddr);\r\n\r\n        xfLobby[enterDay] \u002B= rawAmount;\r\n\r\n        _emitXfLobbyEnter(enterDay, entryIndex, rawAmount, referrerAddr);\r\n    }\r\n\r\n    /**\r\n     * @dev PUBLIC FACING: Leave the transform lobby after the round is complete\r\n     * @param enterDay Day number when the member entered\r\n     * @param count Number of queued-enters to exit (optional; 0 for all)\r\n     */\r\n    function xfLobbyExit(uint256 enterDay, uint256 count)\r\n        external\r\n    {\r\n        require(enterDay \u003C _currentDay(), \u0022HEX: Round is not complete\u0022);\r\n\r\n        XfLobbyQueueStore storage qRef = xfLobbyMembers[enterDay][msg.sender];\r\n\r\n        uint256 headIndex = qRef.headIndex;\r\n        uint256 endIndex;\r\n\r\n        if (count != 0) {\r\n            require(count \u003C= qRef.tailIndex - headIndex, \u0022HEX: count invalid\u0022);\r\n            endIndex = headIndex \u002B count;\r\n        } else {\r\n            endIndex = qRef.tailIndex;\r\n            require(headIndex \u003C endIndex, \u0022HEX: count invalid\u0022);\r\n        }\r\n\r\n        uint256 waasLobby = _waasLobby(enterDay);\r\n        uint256 _xfLobby = xfLobby[enterDay];\r\n        uint256 totalXfAmount = 0;\r\n        uint256 originBonusHearts = 0;\r\n\r\n        do {\r\n            uint256 rawAmount = qRef.entries[headIndex].rawAmount;\r\n            address referrerAddr = qRef.entries[headIndex].referrerAddr;\r\n\r\n            delete qRef.entries[headIndex];\r\n\r\n            uint256 xfAmount = waasLobby * rawAmount / _xfLobby;\r\n\r\n            if (referrerAddr == address(0)) {\r\n                /* No referrer */\r\n                _emitXfLobbyExit(enterDay, headIndex, xfAmount, referrerAddr);\r\n            } else {\r\n                /* Referral bonus of 10% of xfAmount to member */\r\n                uint256 referralBonusHearts = xfAmount / 10;\r\n\r\n                xfAmount \u002B= referralBonusHearts;\r\n\r\n                /* Then a cumulative referrer bonus of 20% to referrer */\r\n                uint256 referrerBonusHearts = xfAmount / 5;\r\n\r\n                if (referrerAddr == msg.sender) {\r\n                    /* Self-referred */\r\n                    xfAmount \u002B= referrerBonusHearts;\r\n                    _emitXfLobbyExit(enterDay, headIndex, xfAmount, referrerAddr);\r\n                } else {\r\n                    /* Referred by different address */\r\n                    _emitXfLobbyExit(enterDay, headIndex, xfAmount, referrerAddr);\r\n                    _mint(referrerAddr, referrerBonusHearts);\r\n                }\r\n                originBonusHearts \u002B= referralBonusHearts \u002B referrerBonusHearts;\r\n            }\r\n\r\n            totalXfAmount \u002B= xfAmount;\r\n        } while (\u002B\u002BheadIndex \u003C endIndex);\r\n\r\n        qRef.headIndex = uint40(headIndex);\r\n\r\n        if (originBonusHearts != 0) {\r\n            _mint(ORIGIN_ADDR, originBonusHearts);\r\n        }\r\n        if (totalXfAmount != 0) {\r\n            _mint(msg.sender, totalXfAmount);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev PUBLIC FACING: Release any value that has been sent to the contract\r\n     */\r\n    function xfLobbyFlush()\r\n        external\r\n    {\r\n        require(address(this).balance != 0, \u0022HEX: No value\u0022);\r\n\r\n        FLUSH_ADDR.transfer(address(this).balance);\r\n    }\r\n\r\n    /**\r\n     * @dev PUBLIC FACING: External helper to return multiple values of xfLobby[] with\r\n     * a single call\r\n     * @param beginDay First day of data range\r\n     * @param endDay Last day (non-inclusive) of data range\r\n     * @return Fixed array of values\r\n     */\r\n    function xfLobbyRange(uint256 beginDay, uint256 endDay)\r\n        external\r\n        view\r\n        returns (uint256[] memory list)\r\n    {\r\n        require(\r\n            beginDay \u003C endDay \u0026\u0026 endDay \u003C= CLAIM_PHASE_END_DAY \u0026\u0026 endDay \u003C= _currentDay(),\r\n            \u0022HEX: invalid range\u0022\r\n        );\r\n\r\n        list = new uint256[](endDay - beginDay);\r\n\r\n        uint256 src = beginDay;\r\n        uint256 dst = 0;\r\n        do {\r\n            list[dst\u002B\u002B] = uint256(xfLobby[src\u002B\u002B]);\r\n        } while (src \u003C endDay);\r\n\r\n        return list;\r\n    }\r\n\r\n    /**\r\n     * @dev PUBLIC FACING: Return a current lobby member queue entry.\r\n     * Only needed due to limitations of the standard ABI encoder.\r\n     * @param memberAddr Eth address of the lobby member\r\n     * @param entryId 49 bit compound value. Top 9 bits: enterDay, Bottom 40 bits: entryIndex\r\n     * @return 1: Raw amount that was entered with; 2: Referring Eth addr (optional; 0x0 for no referrer)\r\n     */\r\n    function xfLobbyEntry(address memberAddr, uint256 entryId)\r\n        external\r\n        view\r\n        returns (uint256 rawAmount, address referrerAddr)\r\n    {\r\n        uint256 enterDay = entryId \u003E\u003E XF_LOBBY_ENTRY_INDEX_SIZE;\r\n        uint256 entryIndex = entryId \u0026 XF_LOBBY_ENTRY_INDEX_MASK;\r\n\r\n        XfLobbyEntryStore storage entry = xfLobbyMembers[enterDay][memberAddr].entries[entryIndex];\r\n\r\n        require(entry.rawAmount != 0, \u0022HEX: Param invalid\u0022);\r\n\r\n        return (entry.rawAmount, entry.referrerAddr);\r\n    }\r\n\r\n    /**\r\n     * @dev PUBLIC FACING: Return the lobby days that a user is in with a single call\r\n     * @param memberAddr Eth address of the user\r\n     * @return Bit vector of lobby day numbers\r\n     */\r\n    function xfLobbyPendingDays(address memberAddr)\r\n        external\r\n        view\r\n        returns (uint256[XF_LOBBY_DAY_WORDS] memory words)\r\n    {\r\n        uint256 day = _currentDay() \u002B 1;\r\n\r\n        if (day \u003E CLAIM_PHASE_END_DAY) {\r\n            day = CLAIM_PHASE_END_DAY;\r\n        }\r\n\r\n        while (day-- != 0) {\r\n            if (xfLobbyMembers[day][memberAddr].tailIndex \u003E xfLobbyMembers[day][memberAddr].headIndex) {\r\n                words[day \u003E\u003E 8] |= 1 \u003C\u003C (day \u0026 255);\r\n            }\r\n        }\r\n\r\n        return words;\r\n    }\r\n\r\n    function _waasLobby(uint256 enterDay)\r\n        private\r\n        returns (uint256 waasLobby)\r\n    {\r\n        if (enterDay \u003E= CLAIM_PHASE_START_DAY) {\r\n            GlobalsCache memory g;\r\n            GlobalsCache memory gSnapshot;\r\n            _globalsLoad(g, gSnapshot);\r\n\r\n            _dailyDataUpdateAuto(g);\r\n\r\n            uint256 unclaimed = dailyData[enterDay].dayUnclaimedSatoshisTotal;\r\n            waasLobby = unclaimed * HEARTS_PER_SATOSHI / CLAIM_PHASE_DAYS;\r\n\r\n            _globalsSync(g, gSnapshot);\r\n        } else {\r\n            waasLobby = WAAS_LOBBY_SEED_HEARTS;\r\n        }\r\n        return waasLobby;\r\n    }\r\n\r\n    function _emitXfLobbyEnter(\r\n        uint256 enterDay,\r\n        uint256 entryIndex,\r\n        uint256 rawAmount,\r\n        address referrerAddr\r\n    )\r\n        private\r\n    {\r\n        emit XfLobbyEnter( // (auto-generated event)\r\n            uint256(uint40(block.timestamp))\r\n                | (uint256(uint96(rawAmount)) \u003C\u003C 40),\r\n            msg.sender,\r\n            (enterDay \u003C\u003C XF_LOBBY_ENTRY_INDEX_SIZE) | entryIndex,\r\n            referrerAddr\r\n        );\r\n    }\r\n\r\n    function _emitXfLobbyExit(\r\n        uint256 enterDay,\r\n        uint256 entryIndex,\r\n        uint256 xfAmount,\r\n        address referrerAddr\r\n    )\r\n        private\r\n    {\r\n        emit XfLobbyExit( // (auto-generated event)\r\n            uint256(uint40(block.timestamp))\r\n                | (uint256(uint72(xfAmount)) \u003C\u003C 40),\r\n            msg.sender,\r\n            (enterDay \u003C\u003C XF_LOBBY_ENTRY_INDEX_SIZE) | entryIndex,\r\n            referrerAddr\r\n        );\r\n    }\r\n}\r\n\r\ncontract HEX_TOKEN is TransformableToken {\r\n    constructor()\r\n        public\r\n    {\r\n        /* Initialize global shareRate to 1 */\r\n        globals.shareRate = uint40(1 * SHARE_RATE_SCALE);\r\n\r\n        /* Initialize dailyDataCount to skip pre-claim period */\r\n        globals.dailyDataCount = uint16(PRE_CLAIM_DAYS);\r\n\r\n        /* Add all Satoshis from UTXO snapshot to contract */\r\n        globals.claimStats = _claimStatsEncode(\r\n            0, // _claimedBtcAddrCount\r\n            0, // _claimedSatoshisTotal\r\n            FULL_SATOSHIS_TOTAL // _unclaimedSatoshisTotal\r\n        );\r\n    }\r\n\r\n    function() external payable {}\r\n}","ABI":"[{\u0022inputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022constructor\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022owner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022spender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022Approval\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022data0\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022data1\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022bytes20\u0022,\u0022name\u0022:\u0022btcAddr\u0022,\u0022type\u0022:\u0022bytes20\u0022},{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022claimToAddr\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022referrerAddr\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022Claim\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022data0\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022data1\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022data2\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022senderAddr\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022ClaimAssist\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022data0\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022updaterAddr\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022DailyDataUpdate\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022data0\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022uint40\u0022,\u0022name\u0022:\u0022stakeId\u0022,\u0022type\u0022:\u0022uint40\u0022}],\u0022name\u0022:\u0022ShareRateChange\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022data0\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022data1\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022stakerAddr\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022uint40\u0022,\u0022name\u0022:\u0022stakeId\u0022,\u0022type\u0022:\u0022uint40\u0022}],\u0022name\u0022:\u0022StakeEnd\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022data0\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022data1\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022stakerAddr\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022uint40\u0022,\u0022name\u0022:\u0022stakeId\u0022,\u0022type\u0022:\u0022uint40\u0022},{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022senderAddr\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022StakeGoodAccounting\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022data0\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022stakerAddr\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022uint40\u0022,\u0022name\u0022:\u0022stakeId\u0022,\u0022type\u0022:\u0022uint40\u0022}],\u0022name\u0022:\u0022StakeStart\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022from\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022Transfer\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022data0\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022memberAddr\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022entryId\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022referrerAddr\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022XfLobbyEnter\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022data0\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022memberAddr\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022entryId\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022referrerAddr\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022XfLobbyExit\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022payable\u0022:true,\u0022stateMutability\u0022:\u0022payable\u0022,\u0022type\u0022:\u0022fallback\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022allocatedSupply\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022owner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022spender\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022allowance\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022spender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022approve\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022balanceOf\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022rawSatoshis\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022bytes32[]\u0022,\u0022name\u0022:\u0022proof\u0022,\u0022type\u0022:\u0022bytes32[]\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022claimToAddr\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022pubKeyX\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022pubKeyY\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022internalType\u0022:\u0022uint8\u0022,\u0022name\u0022:\u0022claimFlags\u0022,\u0022type\u0022:\u0022uint8\u0022},{\u0022internalType\u0022:\u0022uint8\u0022,\u0022name\u0022:\u0022v\u0022,\u0022type\u0022:\u0022uint8\u0022},{\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022r\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022s\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022autoStakeDays\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022referrerAddr\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022btcAddressClaim\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022bytes20\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bytes20\u0022}],\u0022name\u0022:\u0022btcAddressClaims\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022bytes20\u0022,\u0022name\u0022:\u0022btcAddr\u0022,\u0022type\u0022:\u0022bytes20\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022rawSatoshis\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022bytes32[]\u0022,\u0022name\u0022:\u0022proof\u0022,\u0022type\u0022:\u0022bytes32[]\u0022}],\u0022name\u0022:\u0022btcAddressIsClaimable\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022bytes20\u0022,\u0022name\u0022:\u0022btcAddr\u0022,\u0022type\u0022:\u0022bytes20\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022rawSatoshis\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022bytes32[]\u0022,\u0022name\u0022:\u0022proof\u0022,\u0022type\u0022:\u0022bytes32[]\u0022}],\u0022name\u0022:\u0022btcAddressIsValid\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022pure\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022claimToAddr\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022claimParamHash\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022pubKeyX\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022pubKeyY\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022internalType\u0022:\u0022uint8\u0022,\u0022name\u0022:\u0022claimFlags\u0022,\u0022type\u0022:\u0022uint8\u0022},{\u0022internalType\u0022:\u0022uint8\u0022,\u0022name\u0022:\u0022v\u0022,\u0022type\u0022:\u0022uint8\u0022},{\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022r\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022s\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022claimMessageMatchesSignature\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022pure\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022currentDay\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022dailyData\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint72\u0022,\u0022name\u0022:\u0022dayPayoutTotal\u0022,\u0022type\u0022:\u0022uint72\u0022},{\u0022internalType\u0022:\u0022uint72\u0022,\u0022name\u0022:\u0022dayStakeSharesTotal\u0022,\u0022type\u0022:\u0022uint72\u0022},{\u0022internalType\u0022:\u0022uint56\u0022,\u0022name\u0022:\u0022dayUnclaimedSatoshisTotal\u0022,\u0022type\u0022:\u0022uint56\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022beginDay\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022endDay\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022dailyDataRange\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256[]\u0022,\u0022name\u0022:\u0022list\u0022,\u0022type\u0022:\u0022uint256[]\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022beforeDay\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022dailyDataUpdate\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022decimals\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint8\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint8\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022spender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022subtractedValue\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022decreaseAllowance\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022globalInfo\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256[13]\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256[13]\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022globals\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint72\u0022,\u0022name\u0022:\u0022lockedHeartsTotal\u0022,\u0022type\u0022:\u0022uint72\u0022},{\u0022internalType\u0022:\u0022uint72\u0022,\u0022name\u0022:\u0022nextStakeSharesTotal\u0022,\u0022type\u0022:\u0022uint72\u0022},{\u0022internalType\u0022:\u0022uint40\u0022,\u0022name\u0022:\u0022shareRate\u0022,\u0022type\u0022:\u0022uint40\u0022},{\u0022internalType\u0022:\u0022uint72\u0022,\u0022name\u0022:\u0022stakePenaltyTotal\u0022,\u0022type\u0022:\u0022uint72\u0022},{\u0022internalType\u0022:\u0022uint16\u0022,\u0022name\u0022:\u0022dailyDataCount\u0022,\u0022type\u0022:\u0022uint16\u0022},{\u0022internalType\u0022:\u0022uint72\u0022,\u0022name\u0022:\u0022stakeSharesTotal\u0022,\u0022type\u0022:\u0022uint72\u0022},{\u0022internalType\u0022:\u0022uint40\u0022,\u0022name\u0022:\u0022latestStakeId\u0022,\u0022type\u0022:\u0022uint40\u0022},{\u0022internalType\u0022:\u0022uint128\u0022,\u0022name\u0022:\u0022claimStats\u0022,\u0022type\u0022:\u0022uint128\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022spender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022addedValue\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022increaseAllowance\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022merkleLeaf\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022internalType\u0022:\u0022bytes32[]\u0022,\u0022name\u0022:\u0022proof\u0022,\u0022type\u0022:\u0022bytes32[]\u0022}],\u0022name\u0022:\u0022merkleProofIsValid\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022pure\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022name\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022string\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022pubKeyX\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022pubKeyY\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022internalType\u0022:\u0022uint8\u0022,\u0022name\u0022:\u0022claimFlags\u0022,\u0022type\u0022:\u0022uint8\u0022}],\u0022name\u0022:\u0022pubKeyToBtcAddress\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bytes20\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bytes20\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022pure\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022pubKeyX\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022pubKeyY\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022pubKeyToEthAddress\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022pure\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022stakerAddr\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022stakeCount\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022stakeIndex\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint40\u0022,\u0022name\u0022:\u0022stakeIdParam\u0022,\u0022type\u0022:\u0022uint40\u0022}],\u0022name\u0022:\u0022stakeEnd\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022stakerAddr\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022stakeIndex\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint40\u0022,\u0022name\u0022:\u0022stakeIdParam\u0022,\u0022type\u0022:\u0022uint40\u0022}],\u0022name\u0022:\u0022stakeGoodAccounting\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022stakeLists\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint40\u0022,\u0022name\u0022:\u0022stakeId\u0022,\u0022type\u0022:\u0022uint40\u0022},{\u0022internalType\u0022:\u0022uint72\u0022,\u0022name\u0022:\u0022stakedHearts\u0022,\u0022type\u0022:\u0022uint72\u0022},{\u0022internalType\u0022:\u0022uint72\u0022,\u0022name\u0022:\u0022stakeShares\u0022,\u0022type\u0022:\u0022uint72\u0022},{\u0022internalType\u0022:\u0022uint16\u0022,\u0022name\u0022:\u0022lockedDay\u0022,\u0022type\u0022:\u0022uint16\u0022},{\u0022internalType\u0022:\u0022uint16\u0022,\u0022name\u0022:\u0022stakedDays\u0022,\u0022type\u0022:\u0022uint16\u0022},{\u0022internalType\u0022:\u0022uint16\u0022,\u0022name\u0022:\u0022unlockedDay\u0022,\u0022type\u0022:\u0022uint16\u0022},{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022isAutoStake\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022newStakedHearts\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022newStakedDays\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022stakeStart\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022symbol\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022string\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022totalSupply\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022recipient\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022transfer\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022sender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022recipient\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022transferFrom\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022xfLobby\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022referrerAddr\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022xfLobbyEnter\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:true,\u0022stateMutability\u0022:\u0022payable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022memberAddr\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022entryId\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022xfLobbyEntry\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022rawAmount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022referrerAddr\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022enterDay\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022count\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022xfLobbyExit\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022xfLobbyFlush\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022xfLobbyMembers\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint40\u0022,\u0022name\u0022:\u0022headIndex\u0022,\u0022type\u0022:\u0022uint40\u0022},{\u0022internalType\u0022:\u0022uint40\u0022,\u0022name\u0022:\u0022tailIndex\u0022,\u0022type\u0022:\u0022uint40\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022memberAddr\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022xfLobbyPendingDays\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256[2]\u0022,\u0022name\u0022:\u0022words\u0022,\u0022type\u0022:\u0022uint256[2]\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022beginDay\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022endDay\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022xfLobbyRange\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256[]\u0022,\u0022name\u0022:\u0022list\u0022,\u0022type\u0022:\u0022uint256[]\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022}]","ContractName":"HEX_TOKEN","CompilerVersion":"v0.5.13\u002Bcommit.5b0b510c","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://008978dbdc29a3adf12eb55658d6cff070a48b691a11338be28fbd629ecd1394"}]