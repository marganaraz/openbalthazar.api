[{"SourceCode":"{\u0022store.sol\u0022:{\u0022content\u0022:\u0022pragma solidity \\u003e=0.4.24;\\ncontract LUKTokenStore {\\n    /** \u7CBE\u5EA6\uFF0C\u63A8\u8350\u662F 8 */\\n    uint8 public decimals = 8;\\n    /** \u4EE3\u5E01\u603B\u91CF */\\n    uint256 public totalSupply;\\n    /** \u67E5\u770B\u67D0\u4E00\u5730\u5740\u4EE3\u5E01\u4F59\u989D */\\n    mapping (address =\\u003e uint256) private tokenAmount;\\n    /** \u4EE3\u5E01\u4EA4\u6613\u4EE3\u7406\u4EBA\u6388\u6743\u5217\u8868 */\\n    mapping (address =\\u003e mapping (address =\\u003e uint256)) private allowanceMapping;\\n    //\u5408\u7EA6\u6240\u6709\u8005\\n    address private owner;\\n    //\u5199\u6388\u6743\\n    mapping (address =\\u003e bool) private authorization;\\n    \\n    /**\\n     * Constructor function\\n     * \\n     * \u521D\u59CB\u5408\u7EA6\\n     * @param initialSupply \u4EE3\u5E01\u603B\u91CF\\n     */\\n    constructor (uint256 initialSupply) public {\\n        //** \u662F\u5E42\u8FD0\u7B97\\n        totalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount\\n        tokenAmount[msg.sender] = totalSupply;                // Give the creator all initial tokens\\n        owner = msg.sender;\\n    }\\n    \\n    //\u5B9A\u4E49\u51FD\u6570\u4FEE\u9970\u7B26\uFF0C\u5224\u65AD\u6D88\u606F\u53D1\u9001\u8005\u662F\u5426\u662F\u5408\u7EA6\u6240\u6709\u8005\\n    modifier onlyOwner() {\\n        require(msg.sender == owner,\\\u0022Illegal operation.\\\u0022);\\n        _;\\n    }\\n    \\n    modifier checkWrite() {\\n        require(authorization[msg.sender] == true,\\\u0022Illegal operation.\\\u0022);\\n        _;\\n    }\\n    \\n    //\u5199\u6388\u6743\uFF0C\u5408\u7EA6\u8C03\u7528\u5408\u7EA6\u65F6\u8C03\u7528\u8005\u4E3A\u7236\u5408\u7EA6\u5730\u5740\\n    function writeGrant(address _address) public onlyOwner {\\n        authorization[_address] = true;\\n    }\\n    function writeRevoke(address _address) public onlyOwner {\\n        authorization[_address] = false;\\n    }\\n    \\n    /**\\n     * \u8BBE\u7F6E\u4EE3\u5E01\u6D88\u8D39\u4EE3\u7406\u4EBA\uFF0C\u4EE3\u7406\u4EBA\u53EF\u4EE5\u5728\u6700\u5927\u53EF\u4F7F\u7528\u91D1\u989D\u5185\u6D88\u8D39\u4EE3\u5E01\\n     *\\n     * @param _from \u8D44\u91D1\u6240\u6709\u8005\u5730\u5740\\n     * @param _spender \u4EE3\u7406\u4EBA\u5730\u5740\\n     * @param _value \u6700\u5927\u53EF\u4F7F\u7528\u91D1\u989D\\n     */\\n    function approve(address _from,address _spender, uint256 _value) public checkWrite returns (bool) {\\n        allowanceMapping[_from][_spender] = _value;\\n        return true;\\n    }\\n    \\n    function allowance(address _from, address _spender) public view returns (uint256) {\\n        return allowanceMapping[_from][_spender];\\n    }\\n    \\n    /**\\n     * Internal transfer, only can be called by this contract\\n     */\\n    function transfer(address _from, address _to, uint256 _value) public checkWrite returns (bool) {\\n        // Prevent transfer to 0x0 address. Use burn() instead\\n        require(_to != address(0x0),\\\u0022Invalid address\\\u0022);\\n        // Check if the sender has enough\\n        require(tokenAmount[_from] \\u003e= _value,\\\u0022Not enough balance.\\\u0022);\\n        // Check for overflows\\n        require(tokenAmount[_to] \u002B _value \\u003e tokenAmount[_to],\\\u0022Target account cannot be received.\\\u0022);\\n\\n        // \u8F6C\u8D26\\n        // Subtract from the sender\\n        tokenAmount[_from] -= _value;\\n        // Add the same to the recipient\\n        tokenAmount[_to] \u002B= _value;\\n\\n        return true;\\n    }\\n    \\n    function transferFrom(address _from,address _spender, address _to, uint256 _value) public checkWrite returns (bool) {\\n        // Prevent transfer to 0x0 address. Use burn() instead\\n        require(_from != address(0x0),\\\u0022Invalid address\\\u0022);\\n        // Prevent transfer to 0x0 address. Use burn() instead\\n        require(_to != address(0x0),\\\u0022Invalid address\\\u0022);\\n        \\n        // Check if the sender has enough\\n        require(allowanceMapping[_from][_spender] \\u003e= _value,\\\u0022Insufficient credit limit.\\\u0022);\\n        // Check if the sender has enough\\n        require(tokenAmount[_from] \\u003e= _value,\\\u0022Not enough balance.\\\u0022);\\n        // Check for overflows\\n        require(tokenAmount[_to] \u002B _value \\u003e tokenAmount[_to],\\\u0022Target account cannot be received.\\\u0022);\\n        \\n        // \u8F6C\u8D26\\n        // Subtract from the sender\\n        tokenAmount[_from] -= _value;\\n        // Add the same to the recipient\\n        tokenAmount[_to] \u002B= _value;\\n        \\n        allowanceMapping[_from][_spender] -= _value; \\n    }\\n    \\n    function balanceOf(address _owner) public view returns (uint256){\\n        require(_owner != address(0x0),\\\u0022Address can\\u0027t is zero.\\\u0022);\\n        return tokenAmount[_owner] ;\\n    }\\n}\u0022},\u0022token.sol\u0022:{\u0022content\u0022:\u0022pragma solidity \\u003e=0.4.24;\\n//ERC20 \u6807\u51C6\u4EE3\u5E01 https://eips.ethereum.org/EIPS/eip-20\\nimport \\\u0022./store.sol\\\u0022;\\n\\ncontract LUKToken {\\n    /** ERC20 \u4EE3\u5E01\u540D\u5B57 */\\n    string public name = \\\u0022Lucky Coin\\\u0022;\\n    /** ERC20 \u4EE3\u5E01\u7B26\u53F7 */\\n    string public symbol = \\\u0022LUK\\\u0022;\\n    \\n    //MUST trigger when tokens are transferred, including zero value transfers.\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    //MUST trigger on any successful call to approve(address _spender, uint256 _value).\\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\\n\\n    //\u5408\u7EA6\u6240\u6709\u8005\\n    address private owner;\\n    //\u4EE3\u5E01\u4ED3\u5E93\\n    LUKTokenStore private tokenStore;\\n    /** \u9ED1\u540D\u5355\u5217\u8868 */\\n    mapping (address =\\u003e bool) private blackList;\\n\\n    //\u5B9A\u4E49\u51FD\u6570\u4FEE\u9970\u7B26\uFF0C\u5224\u65AD\u6D88\u606F\u53D1\u9001\u8005\u662F\u5426\u662F\u5408\u7EA6\u6240\u6709\u8005\\n    modifier onlyOwner() {\\n        require(msg.sender == owner,\\\u0022Illegal operation.\\\u0022);\\n        _;\\n    }\\n    \\n    /**\\n     * Constructor function\\n     * @param storeAddr HITokenStore \u5E03\u7F72\u5730\u5740\\n     */\\n    constructor (address storeAddr) public {\\n        owner = msg.sender;\\n        tokenStore = LUKTokenStore(storeAddr);\\n    }\\n\\n    /**\u5408\u7EA6\u9ED8\u8BA4\u56DE\u9000\u51FD\u6570\uFF0C\u5F53\u6CA1\u914D\u914D\u7684\u51FD\u6570\u65F6\u4F1A\u8C03\u7528\u6B64\u51FD\u6570\uFF0C\u5F53\u53D1\u9001\u6CA1\u6709\u9644\u52A0\u6570\u636E\u7684\u4EE5\u592A\u65F6\u4F1A\u8C03\u7528\u6B64\u51FD\u6570 */\\n    function () external payable{\\n    }\\n    \\n    /** ERC20 \u7CBE\u5EA6\uFF0C\u63A8\u8350\u662F 8 */\\n    function decimals() public view returns (uint8){\\n        return tokenStore.decimals();\\n    }\\n    /** ERC20 \u4EE3\u5E01\u603B\u91CF */\\n    function totalSupply() public view returns (uint256){\\n        return tokenStore.totalSupply();\\n    }\\n\\n    function balanceOf(address _owner) public view returns (uint256 balance) {\\n        balance = tokenStore.balanceOf(_owner);\\n    }\\n\\n    /**\\n     * Transfer tokens\\n     *\\n     * Send \u0060_value\u0060 tokens to \u0060_to\u0060 from your account\\n     *\\n     * @param _to The address of the recipient\\n     * @param _value the amount to send\\n     */\\n    function transfer(address _to, uint256 _value) public returns (bool success) {\\n        //\u88AB\u5217\u5165\u9ED1\u540D\u5355\u7684\u4E0D\u80FD\u4EA4\u6613\\n        require(!blackList[msg.sender],\\\u0022Prohibit trading.\\\u0022);\\n        require(!blackList[_to],\\\u0022Prohibit trading.\\\u0022);\\n\\n        tokenStore.transfer(msg.sender,_to,_value);\\n        emit Transfer(msg.sender, _to, _value);\\n        \\n        success = true;\\n    }\\n\\n    /**\\n     * Transfer tokens from other address\\n     *\\n     * Send \u0060_value\u0060 tokens to \u0060_to\u0060 on behalf of \u0060_from\u0060\\n     *\\n     * @param _from The address of the sender\\n     * @param _to The address of the recipient\\n     * @param _value the amount to send\\n     */\\n    function transferFrom (address _from, address _to, uint256 _value) public returns (bool success) {\\n        //\u88AB\u5217\u5165\u9ED1\u540D\u5355\u7684\u4E0D\u80FD\u4EA4\u6613\\n        require(!blackList[_from],\\\u0022Prohibit trading.\\\u0022);\\n        require(!blackList[msg.sender],\\\u0022Prohibit trading.\\\u0022);\\n        require(!blackList[_to],\\\u0022Prohibit trading.\\\u0022);\\n\\n        tokenStore.transferFrom(_from,msg.sender,_to,_value);\\n        emit Transfer(_from, _to, _value);\\n\\n        success = true;\\n    }\\n\\n    /**\\n     * Set allowance for other address\\n     *\\n     * Allows \u0060_spender\u0060 to spend no more than \u0060_value\u0060 tokens on your behalf\\n     *\\n     * @param _spender The address authorized to spend\\n     * @param _value the max amount they can spend\\n     */\\n    function approve(address _spender, uint256 _value) public returns (bool success) {\\n        if (tokenStore.approve(msg.sender,_spender,_value)){\\n            emit Approval(msg.sender,_spender,_value); \\n            success = true;\\n        } else {\\n            success = false;\\n        }\\n    }\\n\\n    function allowance(address _from, address _spender) public view returns (uint256 remaining) {\\n        remaining = tokenStore.allowance(_from,_spender);\\n    }\\n    \\n    /**\\n      * \u5C06\u4E00\u4E2A\u5730\u5740\u6DFB\u52A0\u5230\u9ED1\u540D\u5355\uFF0C\u88AB\u6DFB\u52A0\u5230\u9ED1\u540D\u5355\u7684\u5730\u5740\u5C06\u4E0D\u80FD\u591F\u8F6C\u51FA\\n      * @param _addr \u4EE3\u5E01\u63A5\u6536\u8005.\\n      * @return success \u662F\u5426\u4EA4\u6613\u6210\u529F\\n      */\\n    function addToBlackList(address _addr) public onlyOwner returns (bool success) {\\n        require(_addr != address(0x0),\\\u0022Invalid address\\\u0022);\\n\\n        blackList[_addr] = true;\\n        success = true;\\n    }\\n\\n    /**\\n      * \u4ECE\u9ED1\u540D\u5355\u4E2D\u79FB\u51FA\u4E00\u4E2A\u5730\u5740\\n      * @param _addr \u4EE3\u5E01\u63A5\u6536\u8005.\\n      * @return success \u662F\u5426\u4EA4\u6613\u6210\u529F\\n      */\\n    function removeFromBlackList(address _addr) public onlyOwner returns (bool success) {\\n        require(_addr != address(0x0),\\\u0022Invalid address\\\u0022);\\n\\n        blackList[_addr] = false;\\n        success = true;\\n    }\\n}\u0022}}","ABI":"[{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022name\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022string\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_spender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022approve\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022success\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022totalSupply\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_from\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022transferFrom\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022success\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022decimals\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint8\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint8\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_addr\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022addToBlackList\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022success\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_addr\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022removeFromBlackList\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022success\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_owner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022balanceOf\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022balance\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022symbol\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022string\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022transfer\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022success\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_from\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_spender\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022allowance\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022remaining\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022storeAddr\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022constructor\u0022},{\u0022payable\u0022:true,\u0022stateMutability\u0022:\u0022payable\u0022,\u0022type\u0022:\u0022fallback\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022from\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022Transfer\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_owner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_spender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022Approval\u0022,\u0022type\u0022:\u0022event\u0022}]","ContractName":"LUKToken","CompilerVersion":"v0.5.11\u002Bcommit.c082d0b4","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000005f4cf44ec4a514f3963309bf82505bc390d8dfce","Library":"","SwarmSource":"bzzr://5c9b508b1f7338a987348e369d91f1eb5ee9477aaccae70234b78fffe591fcee"}]