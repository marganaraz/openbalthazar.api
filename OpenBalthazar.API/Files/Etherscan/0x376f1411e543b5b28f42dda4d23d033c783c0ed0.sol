[{"SourceCode":"// File: openzeppelin-solidity-v1.12.0/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \u0022user permissions\u0022.\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original \u0060owner\u0060 of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the \u0060onlyOwner\u0060\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity-v1.12.0/contracts/ownership/Claimable.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n/**\r\n * @title Claimable\r\n * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\r\n * This allows the new owner to accept the transfer.\r\n */\r\ncontract Claimable is Ownable {\r\n  address public pendingOwner;\r\n\r\n  /**\r\n   * @dev Modifier throws if called by any account other than the pendingOwner.\r\n   */\r\n  modifier onlyPendingOwner() {\r\n    require(msg.sender == pendingOwner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to set the pendingOwner address.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    pendingOwner = newOwner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the pendingOwner address to finalize the transfer.\r\n   */\r\n  function claimOwnership() public onlyPendingOwner {\r\n    emit OwnershipTransferred(owner, pendingOwner);\r\n    owner = pendingOwner;\r\n    pendingOwner = address(0);\r\n  }\r\n}\r\n\r\n// File: contracts/utils/Adminable.sol\r\n\r\npragma solidity 0.4.25;\r\n\r\n\r\n/**\r\n * @title Adminable.\r\n */\r\ncontract Adminable is Claimable {\r\n    address[] public adminArray;\r\n\r\n    struct AdminInfo {\r\n        bool valid;\r\n        uint256 index;\r\n    }\r\n\r\n    mapping(address =\u003E AdminInfo) public adminTable;\r\n\r\n    event AdminAccepted(address indexed _admin);\r\n    event AdminRejected(address indexed _admin);\r\n\r\n    /**\r\n     * @dev Reverts if called by any account other than one of the administrators.\r\n     */\r\n    modifier onlyAdmin() {\r\n        require(adminTable[msg.sender].valid, \u0022caller is illegal\u0022);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Accept a new administrator.\r\n     * @param _admin The administrator\u0027s address.\r\n     */\r\n    function accept(address _admin) external onlyOwner {\r\n        require(_admin != address(0), \u0022administrator is illegal\u0022);\r\n        AdminInfo storage adminInfo = adminTable[_admin];\r\n        require(!adminInfo.valid, \u0022administrator is already accepted\u0022);\r\n        adminInfo.valid = true;\r\n        adminInfo.index = adminArray.length;\r\n        adminArray.push(_admin);\r\n        emit AdminAccepted(_admin);\r\n    }\r\n\r\n    /**\r\n     * @dev Reject an existing administrator.\r\n     * @param _admin The administrator\u0027s address.\r\n     */\r\n    function reject(address _admin) external onlyOwner {\r\n        AdminInfo storage adminInfo = adminTable[_admin];\r\n        require(adminArray.length \u003E adminInfo.index, \u0022administrator is already rejected\u0022);\r\n        require(_admin == adminArray[adminInfo.index], \u0022administrator is already rejected\u0022);\r\n        // at this point we know that adminArray.length \u003E adminInfo.index \u003E= 0\r\n        address lastAdmin = adminArray[adminArray.length - 1]; // will never underflow\r\n        adminTable[lastAdmin].index = adminInfo.index;\r\n        adminArray[adminInfo.index] = lastAdmin;\r\n        adminArray.length -= 1; // will never underflow\r\n        delete adminTable[_admin];\r\n        emit AdminRejected(_admin);\r\n    }\r\n\r\n    /**\r\n     * @dev Get an array of all the administrators.\r\n     * @return An array of all the administrators.\r\n     */\r\n    function getAdminArray() external view returns (address[] memory) {\r\n        return adminArray;\r\n    }\r\n\r\n    /**\r\n     * @dev Get the total number of administrators.\r\n     * @return The total number of administrators.\r\n     */\r\n    function getAdminCount() external view returns (uint256) {\r\n        return adminArray.length;\r\n    }\r\n}\r\n\r\n// File: contracts/wallet_trading_limiter/interfaces/IWalletsTradingDataSource.sol\r\n\r\npragma solidity 0.4.25;\r\n\r\n/**\r\n * @title Wallets Trading Data Source Interface.\r\n */\r\ninterface IWalletsTradingDataSource {\r\n    /**\r\n     * @dev Increment the value of a given wallet.\r\n     * @param _wallet The address of the wallet.\r\n     * @param _value The value to increment by.\r\n     * @param _limit The limit of the wallet.\r\n     */\r\n    function updateWallet(address _wallet, uint256 _value, uint256 _limit) external;\r\n}\r\n\r\n// File: contracts/contract_address_locator/interfaces/IContractAddressLocator.sol\r\n\r\npragma solidity 0.4.25;\r\n\r\n/**\r\n * @title Contract Address Locator Interface.\r\n */\r\ninterface IContractAddressLocator {\r\n    /**\r\n     * @dev Get the contract address mapped to a given identifier.\r\n     * @param _identifier The identifier.\r\n     * @return The contract address.\r\n     */\r\n    function getContractAddress(bytes32 _identifier) external view returns (address);\r\n\r\n    /**\r\n     * @dev Determine whether or not a contract address is relates to one of the given identifiers.\r\n     * @param _contractAddress The contract address to look for.\r\n     * @param _identifiers The identifiers.\r\n     * @return Is the contract address relates to one of the identifiers.\r\n     */\r\n    function isContractAddressRelates(address _contractAddress, bytes32[] _identifiers) external view returns (bool);\r\n}\r\n\r\n// File: contracts/contract_address_locator/ContractAddressLocatorHolder.sol\r\n\r\npragma solidity 0.4.25;\r\n\r\n\r\n/**\r\n * @title Contract Address Locator Holder.\r\n * @dev Hold a contract address locator, which maps a unique identifier to every contract address in the system.\r\n * @dev Any contract which inherits from this contract can retrieve the address of any contract in the system.\r\n * @dev Thus, any contract can remain \u0022oblivious\u0022 to the replacement of any other contract in the system.\r\n * @dev In addition to that, any function in any contract can be restricted to a specific caller.\r\n */\r\ncontract ContractAddressLocatorHolder {\r\n    bytes32 internal constant _IAuthorizationDataSource_ = \u0022IAuthorizationDataSource\u0022;\r\n    bytes32 internal constant _ISGNConversionManager_    = \u0022ISGNConversionManager\u0022      ;\r\n    bytes32 internal constant _IModelDataSource_         = \u0022IModelDataSource\u0022        ;\r\n    bytes32 internal constant _IPaymentHandler_          = \u0022IPaymentHandler\u0022            ;\r\n    bytes32 internal constant _IPaymentManager_          = \u0022IPaymentManager\u0022            ;\r\n    bytes32 internal constant _IPaymentQueue_            = \u0022IPaymentQueue\u0022              ;\r\n    bytes32 internal constant _IReconciliationAdjuster_  = \u0022IReconciliationAdjuster\u0022      ;\r\n    bytes32 internal constant _IIntervalIterator_        = \u0022IIntervalIterator\u0022       ;\r\n    bytes32 internal constant _IMintHandler_             = \u0022IMintHandler\u0022            ;\r\n    bytes32 internal constant _IMintListener_            = \u0022IMintListener\u0022           ;\r\n    bytes32 internal constant _IMintManager_             = \u0022IMintManager\u0022            ;\r\n    bytes32 internal constant _IPriceBandCalculator_     = \u0022IPriceBandCalculator\u0022       ;\r\n    bytes32 internal constant _IModelCalculator_         = \u0022IModelCalculator\u0022        ;\r\n    bytes32 internal constant _IRedButton_               = \u0022IRedButton\u0022              ;\r\n    bytes32 internal constant _IReserveManager_          = \u0022IReserveManager\u0022         ;\r\n    bytes32 internal constant _ISagaExchanger_           = \u0022ISagaExchanger\u0022          ;\r\n    bytes32 internal constant _IMonetaryModel_               = \u0022IMonetaryModel\u0022              ;\r\n    bytes32 internal constant _IMonetaryModelState_          = \u0022IMonetaryModelState\u0022         ;\r\n    bytes32 internal constant _ISGAAuthorizationManager_ = \u0022ISGAAuthorizationManager\u0022;\r\n    bytes32 internal constant _ISGAToken_                = \u0022ISGAToken\u0022               ;\r\n    bytes32 internal constant _ISGATokenManager_         = \u0022ISGATokenManager\u0022        ;\r\n    bytes32 internal constant _ISGNAuthorizationManager_ = \u0022ISGNAuthorizationManager\u0022;\r\n    bytes32 internal constant _ISGNToken_                = \u0022ISGNToken\u0022               ;\r\n    bytes32 internal constant _ISGNTokenManager_         = \u0022ISGNTokenManager\u0022        ;\r\n    bytes32 internal constant _IMintingPointTimersManager_             = \u0022IMintingPointTimersManager\u0022            ;\r\n    bytes32 internal constant _ITradingClasses_          = \u0022ITradingClasses\u0022         ;\r\n    bytes32 internal constant _IWalletsTradingLimiterValueConverter_        = \u0022IWalletsTLValueConverter\u0022       ;\r\n    bytes32 internal constant _IWalletsTradingDataSource_       = \u0022IWalletsTradingDataSource\u0022      ;\r\n    bytes32 internal constant _WalletsTradingLimiter_SGNTokenManager_          = \u0022WalletsTLSGNTokenManager\u0022         ;\r\n    bytes32 internal constant _WalletsTradingLimiter_SGATokenManager_          = \u0022WalletsTLSGATokenManager\u0022         ;\r\n    bytes32 internal constant _IETHConverter_             = \u0022IETHConverter\u0022   ;\r\n    bytes32 internal constant _ITransactionLimiter_      = \u0022ITransactionLimiter\u0022     ;\r\n    bytes32 internal constant _ITransactionManager_      = \u0022ITransactionManager\u0022     ;\r\n    bytes32 internal constant _IRateApprover_      = \u0022IRateApprover\u0022     ;\r\n\r\n    IContractAddressLocator private contractAddressLocator;\r\n\r\n    /**\r\n     * @dev Create the contract.\r\n     * @param _contractAddressLocator The contract address locator.\r\n     */\r\n    constructor(IContractAddressLocator _contractAddressLocator) internal {\r\n        require(_contractAddressLocator != address(0), \u0022locator is illegal\u0022);\r\n        contractAddressLocator = _contractAddressLocator;\r\n    }\r\n\r\n    /**\r\n     * @dev Get the contract address locator.\r\n     * @return The contract address locator.\r\n     */\r\n    function getContractAddressLocator() external view returns (IContractAddressLocator) {\r\n        return contractAddressLocator;\r\n    }\r\n\r\n    /**\r\n     * @dev Get the contract address mapped to a given identifier.\r\n     * @param _identifier The identifier.\r\n     * @return The contract address.\r\n     */\r\n    function getContractAddress(bytes32 _identifier) internal view returns (address) {\r\n        return contractAddressLocator.getContractAddress(_identifier);\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * @dev Determine whether or not the sender is relates to one of the identifiers.\r\n     * @param _identifiers The identifiers.\r\n     * @return Is the sender relates to one of the identifiers.\r\n     */\r\n    function isSenderAddressRelates(bytes32[] _identifiers) internal view returns (bool) {\r\n        return contractAddressLocator.isContractAddressRelates(msg.sender, _identifiers);\r\n    }\r\n\r\n    /**\r\n     * @dev Verify that the caller is mapped to a given identifier.\r\n     * @param _identifier The identifier.\r\n     */\r\n    modifier only(bytes32 _identifier) {\r\n        require(msg.sender == getContractAddress(_identifier), \u0022caller is illegal\u0022);\r\n        _;\r\n    }\r\n\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, reverts on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\r\n    // benefit is lost if \u0027b\u0027 is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b \u003E 0); // Solidity only automatically asserts when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c \u002B a % b); // There is no case in which this doesn\u0027t hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b \u003C= a);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, reverts on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a \u002B b;\r\n    require(c \u003E= a);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n  * reverts when dividing by zero.\r\n  */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}\r\n\r\n// File: contracts/wallet_trading_limiter/WalletsTradingDataSource.sol\r\n\r\npragma solidity 0.4.25;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * Details of usage of licenced software see here: https://www.saga.org/software/readme_v1\r\n */\r\n\r\n/**\r\n * @title Wallets Trading Data Source.\r\n */\r\ncontract WalletsTradingDataSource is IWalletsTradingDataSource, ContractAddressLocatorHolder, Adminable {\r\n    string public constant VERSION = \u00221.0.0\u0022;\r\n\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address =\u003E uint256) public values;\r\n\r\n    bytes32[] public walletTradingLimitersContractLocatorIdentifier;\r\n\r\n    /**\r\n     * @dev Create the contract.\r\n     * @param _contractAddressLocator The contract address locator.\r\n     */\r\n    constructor(IContractAddressLocator _contractAddressLocator) ContractAddressLocatorHolder(_contractAddressLocator) public {\r\n        bytes32[] memory _walletTradingLimitersContractLocatorIdentifier = new bytes32[](2);\r\n        _walletTradingLimitersContractLocatorIdentifier[0] = _WalletsTradingLimiter_SGNTokenManager_;\r\n        _walletTradingLimitersContractLocatorIdentifier[1] = _WalletsTradingLimiter_SGATokenManager_;\r\n        walletTradingLimitersContractLocatorIdentifier = _walletTradingLimitersContractLocatorIdentifier;\r\n    }\r\n\r\n    /**\r\n     * @dev Reverts if called by any address other than one of the wallet trading limiters.\r\n     */\r\n    modifier onlyWalletsTradingLimiters {\r\n        require(isSenderAddressRelates(walletTradingLimitersContractLocatorIdentifier), \u0022caller is illegal\u0022);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Increment the value of a given wallet.\r\n     * @param _wallet The address of the wallet.\r\n     * @param _value The value to increment by.\r\n     * @param _limit The limit of the wallet.\r\n     */\r\n    function updateWallet(address _wallet, uint256 _value, uint256 _limit) external onlyWalletsTradingLimiters {\r\n        uint256 value = values[_wallet].add(_value);\r\n        require(value \u003C= _limit, \u0022trade-limit has been reached\u0022);\r\n        values[_wallet] = value;\r\n    }\r\n\r\n    /**\r\n     * @dev Reset the values of given wallets.\r\n     * @param _wallets The addresses of the wallets.\r\n     */\r\n    function resetWallets(address[] _wallets) external onlyAdmin {\r\n        for (uint256 i = 0; i \u003C _wallets.length; i\u002B\u002B)\r\n            values[_wallets[i]] = 0;\r\n    }\r\n}","ABI":"[{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022adminTable\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022valid\u0022,\u0022type\u0022:\u0022bool\u0022},{\u0022name\u0022:\u0022index\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022claimOwnership\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022values\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022renounceOwnership\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022getContractAddressLocator\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022getAdminArray\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address[]\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_wallets\u0022,\u0022type\u0022:\u0022address[]\u0022}],\u0022name\u0022:\u0022resetWallets\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022getAdminCount\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022owner\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022adminArray\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_admin\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022accept\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_admin\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022reject\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022pendingOwner\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022walletTradingLimitersContractLocatorIdentifier\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022transferOwnership\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_wallet\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_value\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_limit\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022updateWallet\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022VERSION\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[{\u0022name\u0022:\u0022_contractAddressLocator\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022constructor\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022_admin\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022AdminAccepted\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022_admin\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022AdminRejected\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022previousOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022OwnershipRenounced\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022previousOwner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022OwnershipTransferred\u0022,\u0022type\u0022:\u0022event\u0022}]","ContractName":"WalletsTradingDataSource","CompilerVersion":"v0.4.25\u002Bcommit.59dbf8f1","OptimizationUsed":"1","Runs":"6000","ConstructorArguments":"000000000000000000000000aabcd54faf94925adbe0df117c62961acecbacdb","Library":"","SwarmSource":"bzzr://dfbdf897ecaf9952f31e568c9bedc5320a05ab668418290e1f33877d4f9b6792"}]