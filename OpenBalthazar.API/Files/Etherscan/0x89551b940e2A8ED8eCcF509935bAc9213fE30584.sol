[{"SourceCode":"{\u0022BasicToken.sol\u0022:{\u0022content\u0022:\u0022pragma solidity ^0.5.5;\\r\\n\\r\\n\\r\\nimport \\\u0022./ERC20Basic.sol\\\u0022;\\r\\nimport \\\u0022./SafeMath.sol\\\u0022;\\r\\n\\r\\n\\r\\n/**\\r\\n * @title Basic token\\r\\n * @dev Basic version of StandardToken, with no allowances.\\r\\n */\\r\\ncontract BasicToken is ERC20Basic {\\r\\n  using SafeMath for uint256;\\r\\n\\r\\n  mapping(address =\\u003e uint256) internal balances;\\r\\n\\r\\n  uint256 internal totalSupply_;\\r\\n\\r\\n  /**\\r\\n  * @dev Total number of tokens in existence\\r\\n  */\\r\\n  function totalSupply() public view returns (uint256) {\\r\\n    return totalSupply_;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  * @dev Transfer token for a specified address\\r\\n  * @param _to The address to transfer to.\\r\\n  * @param _value The amount to be transferred.\\r\\n  */\\r\\n  function transfer(address _to, uint256 _value) public returns (bool) {\\r\\n    require(_value \\u003c= balances[msg.sender], \\\u0022The balance of account is insufficient.\\\u0022);\\r\\n    require(_to != address(0), \\\u0022Recipient address is zero address(0). Check the address again.\\\u0022);\\r\\n\\r\\n    balances[msg.sender] = balances[msg.sender].sub(_value);\\r\\n    balances[_to] = balances[_to].add(_value);\\r\\n    emit Transfer(msg.sender, _to, _value);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  * @dev Gets the balance of the specified address.\\r\\n  * @param _owner The address to query the the balance of.\\r\\n  * @return An uint256 representing the amount owned by the passed address.\\r\\n  */\\r\\n  function balanceOf(address _owner) public view returns (uint256) {\\r\\n    return balances[_owner];\\r\\n  }\\r\\n\\r\\n}\u0022},\u0022DoDreamChain.sol\u0022:{\u0022content\u0022:\u0022pragma solidity ^0.5.5;\\r\\n\\r\\nimport \\\u0022./DoDreamChainBase.sol\\\u0022;\\r\\n\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if \u0060account\u0060 is a contract.\\r\\n     *\\r\\n     * This test is non-exhaustive, and there may be false-negatives: during the\\r\\n     * execution of a contract\\u0027s constructor, its address will be reported as\\r\\n     * not containing a contract.\\r\\n     *\\r\\n     * IMPORTANT: It is unsafe to assume that an address for which this\\r\\n     * function returns false is an externally-owned account (EOA) and not a\\r\\n     * contract.\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies in extcodesize, which returns 0 for contracts in\\r\\n        // construction, since the code is only stored at the end of the\\r\\n        // constructor execution.\\r\\n\\r\\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\r\\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\r\\n        // for accounts without code, i.e. \u0060keccak256(\\u0027\\u0027)\u0060\\r\\n        bytes32 codehash;\\r\\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly { codehash := extcodehash(account) }\\r\\n        return (codehash != 0x0 \\u0026\\u0026 codehash != accountHash);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts an \u0060address\u0060 into \u0060address payable\u0060. Note that this is\\r\\n     * simply a type cast: the actual underlying value is not changed.\\r\\n     *\\r\\n     * _Available since v2.4.0._\\r\\n     */\\r\\n    function toPayable(address account) internal pure returns (address payable) {\\r\\n        return address(uint160(account));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity\\u0027s \u0060transfer\u0060: sends \u0060amount\u0060 wei to\\r\\n     * \u0060recipient\u0060, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by \u0060transfer\u0060, making them unable to receive funds via\\r\\n     * \u0060transfer\u0060. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to \u0060recipient\u0060, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     *\\r\\n     * _Available since v2.4.0._\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance \\u003e= amount, \\\u0022Address: insufficient balance\\\u0022);\\r\\n\\r\\n        // solhint-disable-next-line avoid-call-value\\r\\n        (bool success, ) = recipient.call.value(amount)(\\\u0022\\\u0022);\\r\\n        require(success, \\\u0022Address: unable to send value, recipient may have reverted\\\u0022);\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title DoDreamChain\\r\\n */\\r\\ncontract DoDreamChain is DoDreamChainBase {\\r\\n\\r\\n  event TransferedToDRMDapp(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        address indexed to, uint256 value, DRMReceiver.DRMReceiveType receiveType);\\r\\n\\r\\n  string public constant name = \\\u0022DoDreamChain\\\u0022;\\r\\n  string public constant symbol = \\\u0022DRM\\\u0022;\\r\\n  uint8 public constant decimals = 18;\\r\\n\\r\\n  uint256 public constant INITIAL_SUPPLY = 250 * 1000 * 1000 * (10 ** uint256(decimals)); // 250,000,000 DRM\\r\\n\\r\\n  /**\\r\\n   * @dev Constructor \uC0DD\uC131\uC790\uC5D0\uAC8C DRM\uD1A0\uD070\uC744 \uBCF4\uB0C5\uB2C8\uB2E4.\\r\\n   */\\r\\n  constructor() public {\\r\\n    totalSupply_ = INITIAL_SUPPLY;\\r\\n    balances[msg.sender] = INITIAL_SUPPLY;\\r\\n    emit Transfer(address(0), msg.sender, INITIAL_SUPPLY);\\r\\n  }\\r\\n\\r\\n  function drmTransfer(address _to, uint256 _value, string memory  _note) public returns (bool ret) {\\r\\n      ret = super.drmTransfer(_to, _value, _note);\\r\\n      postTransfer(msg.sender, msg.sender, _to, _value, DRMReceiver.DRMReceiveType.DRM_TRANSFER);\\r\\n  }\\r\\n\\r\\n  function drmTransferFrom(address _from, address _to, uint256 _value, string memory _note) public returns (bool ret) {\\r\\n      ret = super.drmTransferFrom(_from, _to, _value, _note);\\r\\n      postTransfer(_from, msg.sender, _to, _value, DRMReceiver.DRMReceiveType.DRM_TRANSFER);\\r\\n  }\\r\\n\\r\\n  function postTransfer(address owner, address spender, address to, uint256 value,\\r\\n   DRMReceiver.DRMReceiveType receiveType) internal returns (bool) {\\r\\n        if (Address.isContract(to)) {\\r\\n            \\r\\n            (bool callOk, bytes memory data) = address(to).call(abi.encodeWithSignature(\\\u0022onDRMReceived(address,address,uint256,uint8)\\\u0022, owner, spender, value, receiveType));\\r\\n            if (callOk) {\\r\\n                emit TransferedToDRMDapp(owner, spender, to, value, receiveType);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n  function drmMintTo(address to, uint256 amount, string memory note) public onlyOwner returns (bool ret) {\\r\\n        ret = super.drmMintTo(to, amount, note);\\r\\n        postTransfer(address(0), msg.sender, to, amount, DRMReceiver.DRMReceiveType.DRM_MINT);\\r\\n    }\\r\\n\\r\\n    function drmBurnFrom(address from, uint256 value, string memory note) public onlyOwner returns (bool ret) {\\r\\n        ret = super.drmBurnFrom(from, value, note);\\r\\n        postTransfer(address(0), msg.sender, from, value, DRMReceiver.DRMReceiveType.DRM_BURN);\\r\\n    }\\r\\n\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title DRM Receiver\\r\\n */\\r\\ncontract DRMReceiver {\\r\\n    enum DRMReceiveType { DRM_TRANSFER, DRM_MINT, DRM_BURN }\\r\\n    function onDRMReceived(address owner, address spender, uint256 value, DRMReceiveType receiveType) public returns (bool);\\r\\n}\u0022},\u0022DoDreamChainBase.sol\u0022:{\u0022content\u0022:\u0022pragma solidity ^0.5.5;\\r\\n\\r\\nimport \\\u0022./LockableToken.sol\\\u0022;\\r\\n\\r\\n/**\\r\\n * @title DRMBaseToken\\r\\n * dev \uD2B8\uB79C\uC7AD\uC158 \uC2E4\uD589 \uC2DC \uBA54\uBAA8\uB97C \uB0A8\uAE38 \uC218 \uC788\uB2E4.\\r\\n */\\r\\ncontract DoDreamChainBase is LockableToken   {\\r\\n    event DRMTransfer(address indexed from, address indexed to, uint256 value, string note);\\r\\n    event DRMTransferFrom(address indexed owner, address indexed spender, address indexed to, uint256 value, string note);\\r\\n    event DRMApproval(address indexed owner, address indexed spender, uint256 value, string note);\\r\\n\\r\\n    event DRMMintTo(address indexed controller, address indexed to, uint256 amount, string note);\\r\\n    event DRMBurnFrom(address indexed controller, address indexed from, uint256 value, string note);\\r\\n\\r\\n    event DRMTransferToTeam(address indexed owner, address indexed spender, address indexed to, uint256 value, string note);\\r\\n    event DRMTransferToPartner(address indexed owner, address indexed spender, address indexed to, uint256 value, string note);\\r\\n\\r\\n    event DRMTransferToEcosystem(address indexed owner, address indexed spender, address indexed to\\r\\n    , uint256 value, uint256 processIdHash, uint256 userIdHash, string note);\\r\\n\\r\\n    // ERC20 \uD568\uC218\uB4E4\uC744 \uC624\uBC84\uB77C\uC774\uB529 \uC791\uC5C5 \\u003e drm~ \uD568\uC218\uB97C \uD0C0\uAC8C \uD55C\uB2E4.\\r\\n    function transfer(address to, uint256 value) public returns (bool ret) {\\r\\n        return drmTransfer(to, value, \\\u0022transfer\\\u0022);\\r\\n    }\\r\\n\\r\\n    function drmTransfer(address to, uint256 value, string memory note) public returns (bool ret) {\\r\\n        require(to != address(this), \\\u0022The receive address is the Contact Address of DoDreamChain.\\\u0022);\\r\\n\\r\\n        ret = super.transfer(to, value);\\r\\n        emit DRMTransfer(msg.sender, to, value, note);\\r\\n    }\\r\\n\\r\\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\\r\\n        return drmTransferFrom(from, to, value, \\\u0022\\\u0022);\\r\\n    }\\r\\n             \\r\\n     function drmTransferFrom(address from, address to, uint256 value, string memory note) public returns (bool ret) {\\r\\n        require(to != address(this), \\\u0022The receive address is the Contact Address of DoDreamChain.\\\u0022);\\r\\n\\r\\n        ret = super.transferFrom(from, to, value);\\r\\n        emit DRMTransferFrom(from, msg.sender, to, value, note);\\r\\n    }\\r\\n\\r\\n    function approve(address spender, uint256 value) public returns (bool) {\\r\\n        return drmApprove(spender, value, \\\u0022\\\u0022);\\r\\n    }\\r\\n\\r\\n    function drmApprove(address spender, uint256 value, string memory note) public returns (bool ret) {\\r\\n        ret = super.approve(spender, value);\\r\\n        emit DRMApproval(msg.sender, spender, value, note);\\r\\n    }\\r\\n\\r\\n    function increaseApproval(address spender, uint256 addedValue) public returns (bool) {\\r\\n        return drmIncreaseApproval(spender, addedValue, \\\u0022\\\u0022);\\r\\n    }\\r\\n\\r\\n    function drmIncreaseApproval(address spender, uint256 addedValue, string memory note) public returns (bool ret) {\\r\\n        ret = super.increaseApproval(spender, addedValue);\\r\\n        emit DRMApproval(msg.sender, spender, allowed[msg.sender][spender], note);\\r\\n    }\\r\\n\\r\\n    function decreaseApproval(address spender, uint256 subtractedValue) public returns (bool) {\\r\\n        return drmDecreaseApproval(spender, subtractedValue, \\\u0022\\\u0022);\\r\\n    }\\r\\n\\r\\n    function drmDecreaseApproval(address spender, uint256 subtractedValue, string memory note) public returns (bool ret) {\\r\\n        ret = super.decreaseApproval(spender, subtractedValue);\\r\\n        emit DRMApproval(msg.sender, spender, allowed[msg.sender][spender], note);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * dev \uC2E0\uADDC \uBC1C\uD589\uC2DC \uBC18\uB4DC\uC2DC \uC8FC\uC11D\uC744 \uB0A8\uAE38\uC218 \uC788\uB3C4\uB85D\uD55C\uB2E4.\\r\\n     */\\r\\n    function mintTo(address to, uint256 amount) internal returns (bool) {\\r\\n        require(to != address(0x0), \\\u0022This address to be set is zero address(0). Check the input address.\\\u0022);\\r\\n    \\r\\n        totalSupply_ = totalSupply_.add(amount);\\r\\n        balances[to] = balances[to].add(amount);\\r\\n\\r\\n        emit Transfer(address(0), to, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function drmMintTo(address to, uint256 amount, string memory note) public onlyOwner returns (bool ret) {\\r\\n        ret = mintTo(to, amount);\\r\\n        emit DRMMintTo(msg.sender, to, amount, note);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * dev \uD654\uD3D0 \uC18C\uAC01\uC2DC \uBC18\uB4DC\uC2DC \uC8FC\uC11D\uC744 \uB0A8\uAE38\uC218 \uC788\uB3C4\uB85D\uD55C\uB2E4.\\r\\n     */\\r\\n    function burnFrom(address from, uint256 value) internal returns (bool) {\\r\\n        require(value \\u003c= balances[from], \\\u0022Your balance is insufficient.\\\u0022);\\r\\n\\r\\n        balances[from] = balances[from].sub(value);\\r\\n        totalSupply_ = totalSupply_.sub(value);\\r\\n\\r\\n        emit Transfer(from, address(0), value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function drmBurnFrom(address from, uint256 value, string memory note) public onlyOwner returns (bool ret) {\\r\\n        ret = burnFrom(from, value);\\r\\n        emit DRMBurnFrom(msg.sender, from, value, note);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * dev DRM \uD300\uC5D0\uAC8C \uC804\uC1A1\uD558\uB294 \uACBD\uC6B0\\r\\n     */\\r\\n    function drmTransferToTeam(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value,\\r\\n        string memory note\\r\\n    ) public onlyOwner returns (bool ret) {\\r\\n        require(to != address(this), \\\u0022The receive address is the Contact Address of DoDreamChain.\\\u0022);\\r\\n\\r\\n        ret = super.transferFrom(from, to, value);\\r\\n        emit DRMTransferToTeam(from, msg.sender, to, value, note);\\r\\n        return ret;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * dev \uD30C\uD2B8\uB108(\uC5B4\uB4DC\uBC14\uC774\uC800)\uC5D0\uAC8C \uC804\uC1A1\uD558\uB294 \uACBD\uC6B0\\r\\n     */\\r\\n    function drmTransferToPartner(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value,\\r\\n        string memory note\\r\\n    ) public onlyOwner returns (bool ret) {\\r\\n        require(to != address(this), \\\u0022The receive address is the Contact Address of DoDreamChain.\\\u0022);\\r\\n\\r\\n        ret = super.transferFrom(from, to, value);\\r\\n        emit DRMTransferToPartner(from, msg.sender, to, value, note);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * dev \uBCF4\uC0C1\uC744 DRM \uC9C0\uAE09\\r\\n     * dev EOA\uAC00 \uD2B8\uB79C\uC7AD\uC158\uC744 \uC77C\uC73C\uCF1C\uC11C \uCC98\uB9AC * \uC5EC\uB7EC\uAC1C \uACC4\uC88C\uB97C \uAE30\uC900\uC73C\uB85C \uD55C\uB2E4. (\uAC00\uC2A4\uBE44 \uC544\uB07C\uAE30 \uC704\uD568)\\r\\n     */\\r\\n    function drmBatchTransferToEcosystem(\\r\\n        address from, address[] memory to,\\r\\n        uint256[] memory values,\\r\\n        uint256 processIdHash,\\r\\n        uint256[] memory userIdHash,\\r\\n        string memory note\\r\\n    ) public onlyOwner returns (bool ret) {\\r\\n        uint256 length = to.length;\\r\\n        require(length == values.length, \\\u0022The sizes of \\\\\\u0027to\\\\\\u0027 and \\\\\\u0027values\\\\\\u0027 arrays are different.\\\u0022);\\r\\n        require(length == userIdHash.length, \\\u0022The sizes of \\\\\\u0027to\\\\\\u0027 and \\\\\\u0027userIdHash\\\\\\u0027 arrays are different.\\\u0022);\\r\\n\\r\\n        ret = true;\\r\\n        for (uint256 i = 0; i \\u003c length; i\u002B\u002B) {\\r\\n            require(to[i] != address(this), \\\u0022The receive address is the Contact Address of DoDreamChain.\\\u0022);\\r\\n\\r\\n            ret = ret \\u0026\\u0026 super.transferFrom(from, to[i], values[i]);\\r\\n            emit DRMTransferToEcosystem(from, msg.sender, to[i], values[i], processIdHash, userIdHash[i], note);\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    function destroy() public onlyRoot {\\r\\n        selfdestruct(msg.sender);\\r\\n    }\\r\\n   \\r\\n}\u0022},\u0022ERC20.sol\u0022:{\u0022content\u0022:\u0022pragma solidity ^0.5.5;\\r\\n\\r\\nimport \\\u0022./ERC20Basic.sol\\\u0022;\\r\\n\\r\\n\\r\\n/**\\r\\n * @title ERC20 interface\\r\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\r\\n */\\r\\ncontract ERC20 is ERC20Basic {\\r\\n  function allowance(address _owner, address _spender)\\r\\n    public view returns (uint256);\\r\\n\\r\\n  function transferFrom(address _from, address _to, uint256 _value)\\r\\n    public returns (bool);\\r\\n\\r\\n  function approve(address _spender, uint256 _value) public returns (bool);\\r\\n  event Approval(\\r\\n    address indexed owner,\\r\\n    address indexed spender,\\r\\n    uint256 value\\r\\n  );\\r\\n}\u0022},\u0022ERC20Basic.sol\u0022:{\u0022content\u0022:\u0022pragma solidity ^0.5.5;\\r\\n\\r\\n\\r\\n/**\\r\\n * @title ERC20Basic\\r\\n * @dev Simpler version of ERC20 interface\\r\\n * See https://github.com/ethereum/EIPs/issues/179\\r\\n */\\r\\ncontract ERC20Basic {\\r\\n  function totalSupply() public view returns (uint256);\\r\\n  function balanceOf(address _who) public view returns (uint256);\\r\\n  function transfer(address _to, uint256 _value) public returns (bool);\\r\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n}\u0022},\u0022LockableToken.sol\u0022:{\u0022content\u0022:\u0022pragma solidity ^0.5.5;\\r\\n\\r\\nimport \\\u0022./StandardToken.sol\\\u0022;\\r\\nimport \\\u0022./MultiOwnable.sol\\\u0022;\\r\\n/**\\r\\n * @title Lockable token\\r\\n */\\r\\ncontract LockableToken is StandardToken, MultiOwnable {\\r\\n    bool public locked = true;\\r\\n\\r\\n    /**\\r\\n     * dev \uB77D = TRUE  \uC774\uC5EC\uB3C4  \uAC70\uB798 \uAC00\uB2A5\uD55C \uC5B8\uB77D \uACC4\uC815\\r\\n     */\\r\\n    mapping(address =\\u003e bool) public unlockAddrs;\\r\\n\\r\\n    /**\\r\\n     * dev - \uACC4\uC815\uB9C8\uB2E4 lockValue\uB9CC\uD07C \uB77D\uC774 \uAC78\uB9B0\uB2E4.\\r\\n     * dev - lockValue = 0 \\u003e limit\uC774 \uC5C6\uC74C\\r\\n     */\\r\\n    mapping(address =\\u003e uint256) public lockValues;\\r\\n\\r\\n    event Locked(bool locked, string note);\\r\\n    event LockedTo(address indexed addr, bool locked, string note);\\r\\n    event SetLockValue(address indexed addr, uint256 value, string note);\\r\\n\\r\\n    constructor() public {\\r\\n        unlockTo(msg.sender,  \\\u0022\\\u0022);\\r\\n    }\\r\\n\\r\\n    modifier checkUnlock (address addr, uint256 value) {\\r\\n        require(!locked || unlockAddrs[addr], \\\u0022The account is currently locked.\\\u0022);\\r\\n        require(balances[addr].sub(value) \\u003e= lockValues[addr], \\\u0022Transferable limit exceeded. Check the status of the lock value.\\\u0022);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function lock(string memory note) public onlyOwner {\\r\\n        locked = true;\\r\\n        emit Locked(locked, note);\\r\\n    }\\r\\n\\r\\n    function unlock(string memory note) public onlyOwner {\\r\\n        locked = false;\\r\\n        emit Locked(locked, note);\\r\\n    }\\r\\n\\r\\n    function lockTo(address addr, string memory note) public onlyOwner {\\r\\n        setLockValue(addr, balanceOf(addr), note);\\r\\n        unlockAddrs[addr] = false;\\r\\n\\r\\n        emit LockedTo(addr, true, note);\\r\\n    }\\r\\n\\r\\n    function unlockTo(address addr, string memory note) public onlyOwner {\\r\\n        setLockValue(addr, 0, note);\\r\\n        unlockAddrs[addr] = true;\\r\\n\\r\\n        emit LockedTo(addr, false, note);\\r\\n    }\\r\\n\\r\\n    function setLockValue(address addr, uint256 value, string memory note) public onlyOwner {\\r\\n        lockValues[addr] = value;\\r\\n        if(value == 0){\\r\\n            unlockAddrs[addr] = true;    \\r\\n        }else{\\r\\n            unlockAddrs[addr] = false;\\r\\n        }\\r\\n\\r\\n        emit SetLockValue(addr, value, note);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * dev \uC774\uCCB4 \uAC00\uB2A5 \uAE08\uC561 \uCCB4\uD06C\\r\\n     */\\r\\n    function getMyUnlockValue() public view returns (uint256) {\\r\\n        address addr = msg.sender;\\r\\n        if ((!locked || unlockAddrs[addr]) )\\r\\n            return balances[addr].sub(lockValues[addr]);\\r\\n        else\\r\\n            return 0;\\r\\n    }\\r\\n\\r\\n    function transfer(address to, uint256 value) public checkUnlock(msg.sender, value) returns (bool) {\\r\\n        return super.transfer(to, value);\\r\\n    }\\r\\n\\r\\n    function transferFrom(address from, address to, uint256 value) public checkUnlock(from, value) returns (bool) {\\r\\n        return super.transferFrom(from, to, value);\\r\\n    }\\r\\n}\u0022},\u0022MultiOwnable.sol\u0022:{\u0022content\u0022:\u0022pragma solidity ^0.5.5;\\r\\n\\r\\n/**\\r\\n * @title MultiOwnable\\r\\n */\\r\\ncontract MultiOwnable {\\r\\n  address public root;\\r\\n  mapping (address =\\u003e address) public owners;\\r\\n\\r\\n  /**\\r\\n  * @dev The Ownable constructor sets the original \u0060owner\u0060 of the contract to the sender\\r\\n  * account.\\r\\n  */\\r\\n  constructor() public {\\r\\n    root = msg.sender;\\r\\n    owners[root] = root;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  * @dev check owner\\r\\n  */\\r\\n  modifier onlyOwner() {\\r\\n    require(owners[msg.sender] != address(0), \\\u0022permission error[onlyOwner]\\\u0022);\\r\\n    _;\\r\\n  }\\r\\n\\r\\n   modifier onlyRoot() {\\r\\n    require(msg.sender == root, \\\u0022permission error[onlyRoot]\\\u0022);\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n  * @dev add new owner\\r\\n  */\\r\\n  function newOwner(address _owner) external onlyOwner returns (bool) {\\r\\n    require(_owner != address(0), \\\u0022Invalid address.\\\u0022);\\r\\n    require(owners[_owner] == address(0), \\\u0022permission error[onlyOwner]\\\u0022);\\r\\n    owners[_owner] = msg.sender;\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n    * @dev delete owner\\r\\n    */\\r\\n  function deleteOwner(address _owner) external onlyOwner returns (bool) {\\r\\n    owners[_owner] = address(0);\\r\\n    return true;\\r\\n  }\\r\\n}\u0022},\u0022SafeMath.sol\u0022:{\u0022content\u0022:\u0022pragma solidity ^0.5.5;\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity\\u0027s arithmetic operations with added overflow\\r\\n * checks.\\r\\n *\\r\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\r\\n * in bugs, because programmers usually assume that an overflow raises an\\r\\n * error, which is the standard behavior in high level programming languages.\\r\\n * \u0060SafeMath\u0060 restores this intuition by reverting the transaction when an\\r\\n * operation overflows.\\r\\n *\\r\\n * Using this library instead of the unchecked operations eliminates an entire\\r\\n * class of bugs, so it\\u0027s recommended to use it always.\\r\\n */\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s \u0060\u002B\u0060 operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a \u002B b;\\r\\n        require(c \\u003e= a, \\\u0022SafeMath: addition overflow\\\u0022);\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s \u0060-\u0060 operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, \\\u0022SafeMath: subtraction overflow\\\u0022);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s \u0060-\u0060 operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Subtraction cannot overflow.\\r\\n     *\\r\\n     * _Available since v2.4.0._\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b \\u003c= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s \u0060*\u0060 operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring \\u0027a\\u0027 not being zero, but the\\r\\n        // benefit is lost if \\u0027b\\u0027 is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\u0022SafeMath: multiplication overflow\\\u0022);\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s \u0060/\u0060 operator. Note: this function uses a\\r\\n     * \u0060revert\u0060 opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(a, b, \\\u0022SafeMath: division by zero\\\u0022);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s \u0060/\u0060 operator. Note: this function uses a\\r\\n     * \u0060revert\u0060 opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     *\\r\\n     * _Available since v2.4.0._\\r\\n     */\\r\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        // Solidity only automatically asserts when dividing by 0\\r\\n        require(b \\u003e 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n        // assert(a == b * c \u002B a % b); // There is no case in which this doesn\\u0027t hold\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s \u0060%\u0060 operator. This function uses a \u0060revert\u0060\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mod(a, b, \\\u0022SafeMath: modulo by zero\\\u0022);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts with custom message when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity\\u0027s \u0060%\u0060 operator. This function uses a \u0060revert\u0060\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     *\\r\\n     * _Available since v2.4.0._\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b != 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n}\u0022},\u0022StandardToken.sol\u0022:{\u0022content\u0022:\u0022pragma solidity ^0.5.5;\\r\\n\\r\\nimport \\\u0022./BasicToken.sol\\\u0022;\\r\\nimport \\\u0022./ERC20.sol\\\u0022;\\r\\n\\r\\n\\r\\n/**\\r\\n * @title Standard ERC20 token\\r\\n *\\r\\n * @dev Implementation of the basic standard token.\\r\\n * https://github.com/ethereum/EIPs/issues/20\\r\\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\r\\n */\\r\\ncontract StandardToken is ERC20, BasicToken {\\r\\n\\r\\n  mapping (address =\\u003e mapping (address =\\u003e uint256)) internal allowed;\\r\\n\\r\\n\\r\\n  /**\\r\\n   * @dev Transfer tokens from one address to another\\r\\n   * @param _from address The address which you want to send tokens from\\r\\n   * @param _to address The address which you want to transfer to\\r\\n   * @param _value uint256 the amount of tokens to be transferred\\r\\n   */\\r\\n  function transferFrom(\\r\\n    address _from,\\r\\n    address _to,\\r\\n    uint256 _value\\r\\n  )\\r\\n    public\\r\\n    returns (bool)\\r\\n  {\\r\\n    require(_value \\u003c= balances[_from], \\\u0022Not enough balance.\\\u0022);\\r\\n    require(_value \\u003c= allowed[_from][msg.sender], \\\u0022Not allowed.\\\u0022);\\r\\n    require(_to != address(0), \\\u0022Invalid address.\\\u0022);\\r\\n\\r\\n    balances[_from] = balances[_from].sub(_value);\\r\\n    balances[_to] = balances[_to].add(_value);\\r\\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\\r\\n    emit Transfer(_from, _to, _value);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\r\\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\\r\\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\\r\\n   * race condition is to first reduce the spender\\u0027s allowance to 0 and set the desired value afterwards:\\r\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n   * @param _spender The address which will spend the funds.\\r\\n   * @param _value The amount of tokens to be spent.\\r\\n   */\\r\\n  function approve(address _spender, uint256 _value) public returns (bool) {\\r\\n    allowed[msg.sender][_spender] = _value;\\r\\n    emit Approval(msg.sender, _spender, _value);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\\r\\n   * @param _owner address The address which owns the funds.\\r\\n   * @param _spender address The address which will spend the funds.\\r\\n   * @return A uint256 specifying the amount of tokens still available for the spender.\\r\\n   */\\r\\n  function allowance(\\r\\n    address _owner,\\r\\n    address _spender\\r\\n   )\\r\\n    public\\r\\n    view\\r\\n    returns (uint256)\\r\\n  {\\r\\n    return allowed[_owner][_spender];\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\\r\\n   * approve should be called when allowed[_spender] == 0. To increment\\r\\n   * allowed value is better to use this function to avoid 2 calls (and wait until\\r\\n   * the first transaction is mined)\\r\\n   * From MonolithDAO Token.sol\\r\\n   * @param _spender The address which will spend the funds.\\r\\n   * @param _addedValue The amount of tokens to increase the allowance by.\\r\\n   */\\r\\n  function increaseApproval(\\r\\n    address _spender,\\r\\n    uint256 _addedValue\\r\\n  )\\r\\n    public\\r\\n    returns (bool)\\r\\n  {\\r\\n    allowed[msg.sender][_spender] = (\\r\\n      allowed[msg.sender][_spender].add(_addedValue));\\r\\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\\r\\n   * approve should be called when allowed[_spender] == 0. To decrement\\r\\n   * allowed value is better to use this function to avoid 2 calls (and wait until\\r\\n   * the first transaction is mined)\\r\\n   * From MonolithDAO Token.sol\\r\\n   * @param _spender The address which will spend the funds.\\r\\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\\r\\n   */\\r\\n  function decreaseApproval(\\r\\n    address _spender,\\r\\n    uint256 _subtractedValue\\r\\n  )\\r\\n    public\\r\\n    returns (bool)\\r\\n  {\\r\\n    uint256 oldValue = allowed[msg.sender][_spender];\\r\\n    if (_subtractedValue \\u003e= oldValue) {\\r\\n      allowed[msg.sender][_spender] = 0;\\r\\n    } else {\\r\\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\\r\\n    }\\r\\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\\r\\n    return true;\\r\\n  }\\r\\n\\r\\n}\u0022}}","ABI":"[{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022addr\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022note\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022name\u0022:\u0022unlockTo\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022owners\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022name\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022spender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022approve\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022totalSupply\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022from\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022note\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022name\u0022:\u0022drmBurnFrom\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022ret\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022from\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022transferFrom\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022INITIAL_SUPPLY\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022decimals\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint8\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022note\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022name\u0022:\u0022lock\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022from\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022note\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022name\u0022:\u0022drmTransferToTeam\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022ret\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022getMyUnlockValue\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_value\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_note\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022name\u0022:\u0022drmTransfer\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022ret\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022unlockAddrs\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022spender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022subtractedValue\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022note\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022name\u0022:\u0022drmDecreaseApproval\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022ret\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022spender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022subtractedValue\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022decreaseApproval\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022addr\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022note\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022name\u0022:\u0022lockTo\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_owner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022balanceOf\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022destroy\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_owner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022newOwner\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022note\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022name\u0022:\u0022drmMintTo\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022ret\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022symbol\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022from\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022note\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022name\u0022:\u0022drmTransferToPartner\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022ret\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_from\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_value\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_note\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022name\u0022:\u0022drmTransferFrom\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022ret\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022transfer\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022ret\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022note\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022name\u0022:\u0022unlock\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022spender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022addedValue\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022note\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022name\u0022:\u0022drmIncreaseApproval\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022ret\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022spender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022note\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022name\u0022:\u0022drmApprove\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022ret\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022from\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022to\u0022,\u0022type\u0022:\u0022address[]\u0022},{\u0022name\u0022:\u0022values\u0022,\u0022type\u0022:\u0022uint256[]\u0022},{\u0022name\u0022:\u0022processIdHash\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022userIdHash\u0022,\u0022type\u0022:\u0022uint256[]\u0022},{\u0022name\u0022:\u0022note\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022name\u0022:\u0022drmBatchTransferToEcosystem\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022ret\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022lockValues\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_owner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022deleteOwner\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022locked\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022addr\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022note\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022name\u0022:\u0022setLockValue\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022spender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022addedValue\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022increaseApproval\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_owner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_spender\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022allowance\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022root\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022constructor\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022owner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022spender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022receiveType\u0022,\u0022type\u0022:\u0022uint8\u0022}],\u0022name\u0022:\u0022TransferedToDRMDapp\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022from\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022note\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022name\u0022:\u0022DRMTransfer\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022owner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022spender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022note\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022name\u0022:\u0022DRMTransferFrom\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022owner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022spender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022note\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022name\u0022:\u0022DRMApproval\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022controller\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022note\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022name\u0022:\u0022DRMMintTo\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022controller\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022from\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022note\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022name\u0022:\u0022DRMBurnFrom\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022owner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022spender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022note\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022name\u0022:\u0022DRMTransferToTeam\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022owner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022spender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022note\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022name\u0022:\u0022DRMTransferToPartner\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022owner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022spender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022processIdHash\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022userIdHash\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022note\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022name\u0022:\u0022DRMTransferToEcosystem\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022locked\u0022,\u0022type\u0022:\u0022bool\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022note\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022name\u0022:\u0022Locked\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022addr\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022locked\u0022,\u0022type\u0022:\u0022bool\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022note\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022name\u0022:\u0022LockedTo\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022addr\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022note\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022name\u0022:\u0022SetLockValue\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022owner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022spender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022Approval\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022from\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022Transfer\u0022,\u0022type\u0022:\u0022event\u0022}]","ContractName":"DoDreamChain","CompilerVersion":"v0.5.5\u002Bcommit.47a71e8f","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://985148aadbd0198d75894343f5157364982fc3c0733a4582b67b2f4188d1df19"}]