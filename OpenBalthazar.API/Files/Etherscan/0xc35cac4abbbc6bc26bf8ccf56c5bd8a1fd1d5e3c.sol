[{"SourceCode":"pragma solidity \u003E=0.4.22 \u003C0.7.0;\r\n\r\ncontract MyEthDice {\r\n    struct Bet {\r\n        uint amount; // wei\r\n        bytes32 seedHash; // seed hash. Shown to player before they make a bet to prove we can\u0027t change result\r\n        string randomSeed;\r\n        bytes32 playerSeed; // seed provided by player to combine with random seed to calculate result\r\n        uint roll;  // result of roll\r\n        uint target; // target the player was trying to roll under\r\n        address payable player; \r\n        bool settled; \r\n    }\r\n    \r\n    uint constant public MIN_BET = 0.01 ether;\r\n    \r\n    address public owner;\r\n    address public settler;\r\n    \r\n    mapping (uint =\u003E Bet) bets;\r\n    \r\n    uint public maxProfit;\r\n    uint128 private lockedFunds;\r\n    uint private leverage = 3;\r\n    \r\n    event BetResult(address indexed player, uint winAmount, bytes32 playerSeed, bytes32 seedHash, uint target, string randomSeed, uint roll);\r\n    event BetPlaced(bytes32 hash);\r\n    event FailedPayment(address indexed player, uint amount, bytes32 seedHash);\r\n    \r\n    constructor () public {\r\n      owner = msg.sender;\r\n      settler = msg.sender;\r\n    }\r\n    \r\n    function () external payable {\r\n        updateMaxProfit(); //TODO too much gas warning?\r\n    }\r\n    \r\n    modifier onlyOwner {\r\n        require (msg.sender == owner, \u0022Only the owner can call this method.\u0022);\r\n        _;\r\n    }\r\n    \r\n    modifier onlySettler {\r\n        require (msg.sender == settler, \u0022Must be the settler to call this method.\u0022);\r\n        _;\r\n    }\r\n\r\n    function setSettler(address newSettler) external onlyOwner {\r\n        settler = newSettler;\r\n    }\r\n\r\n    function updateMaxProfit() private {\r\n      maxProfit = ((address(this).balance - lockedFunds) / 100) * leverage;\r\n    }\r\n    \r\n    function setLeverage(uint _leverage) public onlyOwner {\r\n        leverage = _leverage;\r\n        updateMaxProfit();\r\n    }\r\n\r\n    function withdrawFunds(address payable receiver, uint withdrawAmount) external onlyOwner {\r\n        require (withdrawAmount \u003C= address(this).balance, \u0022amount larger than balance.\u0022);\r\n        require (lockedFunds \u002B withdrawAmount \u003C= address(this).balance, \u0022Too much locked up\u0022);\r\n        receiver.send(withdrawAmount);\r\n        updateMaxProfit();\r\n    }\r\n\r\n    function kill() public onlyOwner {\r\n        require (lockedFunds == 0, \u0022Still bets locked up.\u0022);\r\n        selfdestruct(msg.sender);\r\n    }\r\n    \r\n    function placeBet(bytes32 playerSeed, bytes32 seedHash, uint target) external payable {\r\n        require(target \u003E 0 \u0026\u0026 target \u003C= 100, \u0022target out of range\u0022); \r\n      \r\n        uint betAmount = msg.value;\r\n        require(betAmount \u003E= MIN_BET, \u0022betAmount too small\u0022);\r\n\r\n        uint payout = (betAmount - (betAmount / 100)) * 100 / target;  //TODO this is different from dice2win\r\n        require (payout \u003C= betAmount \u002B maxProfit, \u0022Payout is more than max allowed profit.\u0022);\r\n\r\n        lockedFunds \u002B= uint128(payout);\r\n        require (lockedFunds \u003C= address(this).balance, \u0022Cannot take bet.\u0022);\r\n      \r\n        Bet storage bet = bets[uint(seedHash)];\r\n        \r\n        //check bet doesnt exist with hash\r\n        require(bet.seedHash != seedHash, \u0022Bet with hash already exists\u0022);\r\n    \r\n        bet.seedHash = seedHash;\r\n        bet.amount = betAmount;\r\n        bet.player = msg.sender;\r\n        bet.playerSeed = playerSeed;\r\n        bet.target = target;\r\n        bet.settled = false;\r\n        \r\n        updateMaxProfit();\r\n        emit BetPlaced(seedHash);\r\n    }\r\n    \r\n    function settleBet(string calldata randomSeed) external onlySettler {\r\n         bytes32 seedHash = keccak256(abi.encodePacked(randomSeed));\r\n         Bet storage bet = bets[uint(seedHash)];\r\n\r\n         require(bet.seedHash == seedHash, \u0022No bet found with server seed\u0022);\r\n         require(bet.settled == false, \u0022Bet already settled\u0022);\r\n         \r\n         uint amount = bet.amount;\r\n         uint target = bet.target;\r\n         uint payout = (amount - (amount / 100)) * 100 / target;\r\n         \r\n         bytes32 combinedHash = keccak256(abi.encodePacked(randomSeed, bet.playerSeed));\r\n         bet.roll = uint(combinedHash) % 100;\r\n         \r\n         if(bet.roll \u003C bet.target) {\r\n          if (!bet.player.send(payout)) {\r\n            emit FailedPayment(bet.player, payout, bet.seedHash);\r\n          }\r\n          emit BetResult(bet.player, payout, bet.playerSeed, bet.seedHash, target, randomSeed, bet.roll);\r\n        } else {\r\n            emit BetResult(bet.player, 0, bet.playerSeed, bet.seedHash, target, randomSeed, bet.roll);\r\n        }\r\n\r\n         lockedFunds -= uint128(payout);\r\n         bet.settled = true;\r\n         bet.randomSeed = randomSeed;\r\n\r\n         updateMaxProfit();\r\n    }\r\n}","ABI":"[{\u0022inputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022constructor\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022hash\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022BetPlaced\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022player\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022winAmount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022playerSeed\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022seedHash\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022target\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022string\u0022,\u0022name\u0022:\u0022randomSeed\u0022,\u0022type\u0022:\u0022string\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022roll\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022BetResult\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022player\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022seedHash\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022FailedPayment\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022payable\u0022:true,\u0022stateMutability\u0022:\u0022payable\u0022,\u0022type\u0022:\u0022fallback\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022MIN_BET\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022kill\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022maxProfit\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022owner\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022playerSeed\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022seedHash\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022target\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022placeBet\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:true,\u0022stateMutability\u0022:\u0022payable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_leverage\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022setLeverage\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022newSettler\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022setSettler\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022string\u0022,\u0022name\u0022:\u0022randomSeed\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022name\u0022:\u0022settleBet\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022settler\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address payable\u0022,\u0022name\u0022:\u0022receiver\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022withdrawAmount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022withdrawFunds\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022}]","ContractName":"MyEthDice","CompilerVersion":"v0.5.12\u002Bcommit.7709ece9","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://20d8662ace16b1c6824b174d5211b02c61f4f2d6bb71ad1b9193ef7855a02f4d"}]