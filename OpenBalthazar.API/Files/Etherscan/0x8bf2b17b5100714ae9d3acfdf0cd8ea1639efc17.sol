[{"SourceCode":"pragma solidity \u003E= 0.5.0 \u003C 0.6.0;\r\n\r\nlibrary SafeMath {\r\n  function add(uint a, uint b) internal pure returns (uint c) {\r\n    c = a \u002B b;\r\n    require(c \u003E= a);\r\n  }\r\n  function sub(uint a, uint b) internal pure returns (uint c) {\r\n    require(b \u003C= a);\r\n    c = a - b;\r\n  }\r\n  function mul(uint a, uint b) internal pure returns (uint c) {\r\n    c = a * b;\r\n    require(a == 0 || c / a == b);\r\n  }\r\n  function div(uint a, uint b) internal pure returns (uint c) {\r\n    require(b \u003E 0);\r\n    c = a / b;\r\n  }\r\n}\r\n\r\nlibrary NameFilter {\r\n\r\n    function nameFilter(string memory _input)\r\n        internal\r\n        pure\r\n        returns(bytes32)\r\n    {\r\n        bytes memory _temp = bytes(_input);\r\n        uint256 _length = _temp.length;\r\n\r\n        //sorry limited to 16 characters\r\n        require (_length \u003C= 16 \u0026\u0026 _length \u003E 0, \u0022string must be between 1 and 32 characters\u0022);\r\n        // make sure it doesnt start with or end with space\r\n        require(_temp[0] != 0x20 \u0026\u0026 _temp[_length-1] != 0x20, \u0022string cannot start or end with space\u0022);\r\n        // make sure first two characters are not 0x\r\n        if (_temp[0] == 0x30)\r\n        {\r\n            require(_temp[1] != 0x78, \u0022string cannot start with 0x\u0022);\r\n            require(_temp[1] != 0x58, \u0022string cannot start with 0X\u0022);\r\n        }\r\n\r\n        // create a bool to track if we have a non number character\r\n        bool _hasNonNumber;\r\n\r\n        // convert \u0026 check\r\n        for (uint256 i = 0; i \u003C _length; i\u002B\u002B)\r\n        {\r\n            // if its uppercase A-Z\r\n            if (_temp[i] \u003E 0x40 \u0026\u0026 _temp[i] \u003C 0x5b)\r\n            {\r\n                // convert to lower case a-z\r\n                _temp[i] = byte(uint8(_temp[i]) \u002B 32);\r\n\r\n                // we have a non number\r\n                if (_hasNonNumber == false)\r\n                    _hasNonNumber = true;\r\n            } else {\r\n                require\r\n                (\r\n                    // require character is a space\r\n                    _temp[i] == 0x20 ||\r\n                    // OR lowercase a-z\r\n                    (_temp[i] \u003E 0x60 \u0026\u0026 _temp[i] \u003C 0x7b) ||\r\n                    // or 0-9\r\n                    (_temp[i] \u003E 0x2f \u0026\u0026 _temp[i] \u003C 0x3a),\r\n                    \u0022string contains invalid characters\u0022\r\n                );\r\n                // make sure theres not 2x spaces in a row\r\n                if (_temp[i] == 0x20)\r\n                    require( _temp[i\u002B1] != 0x20, \u0022string cannot contain consecutive spaces\u0022);\r\n\r\n                // see if we have a character other than a number\r\n                if (_hasNonNumber == false \u0026\u0026 (_temp[i] \u003C 0x30 || _temp[i] \u003E 0x39))\r\n                    _hasNonNumber = true;\r\n            }\r\n        }\r\n\r\n        require(_hasNonNumber == true, \u0022string cannot be only numbers\u0022);\r\n\r\n        bytes32 _ret;\r\n        assembly {\r\n            _ret := mload(add(_temp, 32))\r\n        }\r\n        return (_ret);\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n  function totalSupply() external view returns (uint256);\r\n  function balanceOf(address account) external view returns (uint256);\r\n  function transfer(address recipient, uint256 amount) external returns (bool);\r\n  function allowance(address owner, address spender) external view returns (uint256);\r\n  function approve(address spender, uint256 amount) external returns (bool);\r\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\ncontract Owned {\r\n  address public owner;\r\n  address public newOwner;\r\n\r\n  event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  modifier onlyOwner {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    newOwner = _newOwner;\r\n  }\r\n  function acceptOwnership() public {\r\n    require(msg.sender == newOwner);\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n    newOwner = address(0);\r\n  }\r\n}\r\n\r\ncontract ERCBOOKS is Owned {\r\n  using SafeMath for uint;\r\n  using NameFilter for string;\r\n\r\n  event tokenregister(address token, string name, string symbol);\r\n  event playernameregister(bytes32 playername, address playeraddress);\r\n\r\n  constructor() public {\r\n    regtokens[0x0000000000000000000000000000000000000000].name = \u0022Ether\u0022;\r\n    regtokens[0x0000000000000000000000000000000000000000].symbol = \u0022ETH\u0022;\r\n    regtokens[0x0000000000000000000000000000000000000000].reg = true;\r\n    emit tokenregister(0x0000000000000000000000000000000000000000, \u0022Ether\u0022, \u0022ETH\u0022);\r\n\r\n    regtokens[0x514910771AF9Ca656af840dff83E8264EcF986CA].name = \u0022ChainLink\u0022;\r\n    regtokens[0x514910771AF9Ca656af840dff83E8264EcF986CA].symbol = \u0022LINK\u0022;\r\n    regtokens[0x514910771AF9Ca656af840dff83E8264EcF986CA].reg = true;\r\n    emit tokenregister(0x514910771AF9Ca656af840dff83E8264EcF986CA, \u0022ChainLink\u0022, \u0022LINK\u0022);\r\n\r\n    regtokens[0x0D8775F648430679A709E98d2b0Cb6250d2887EF].name = \u0022BAT\u0022;\r\n    regtokens[0x0D8775F648430679A709E98d2b0Cb6250d2887EF].symbol = \u0022BAT\u0022;\r\n    regtokens[0x0D8775F648430679A709E98d2b0Cb6250d2887EF].reg = true;\r\n    emit tokenregister(0x0D8775F648430679A709E98d2b0Cb6250d2887EF, \u0022BAT\u0022, \u0022BAT\u0022);\r\n\r\n    regtkncount = 3;\r\n  }\r\n\r\n  struct stkn {\r\n    string name;\r\n    string symbol;\r\n    bool reg;\r\n  }\r\n\r\n\r\n  uint256 public tknregcost = 100000000000000000;\r\n  mapping(address =\u003E stkn) public regtokens;\r\n  uint256 public regtkncount;\r\n\r\n  uint256 public nameregcost = 100000000000000000;\r\n  mapping(address =\u003E bytes32) public playernames;\r\n  mapping(bytes32 =\u003E address) public playernamelookup;\r\n\r\n\r\n  //FALLBACK FUNCTION\r\n  function() external payable {\r\n  }\r\n\r\n  //PLAYER FUNCTIONS\r\n  function registertoken(address token, string memory name, string memory symbol) public payable {\r\n    require(msg.value \u003E= tknregcost);\r\n    require(regtokens[token].reg == false);\r\n    regtokens[token].name = name;\r\n    regtokens[token].symbol = symbol;\r\n    regtokens[token].reg = true;\r\n    regtkncount = regtkncount.add(1);\r\n    emit tokenregister(token, name, symbol);\r\n  }\r\n\r\n  function registerplayername(string memory name) public payable {\r\n    bytes32 fname = name.nameFilter();\r\n    require(msg.value \u003E= nameregcost);\r\n    require(playernamelookup[fname] == 0x0000000000000000000000000000000000000000);\r\n    if (keccak256(abi.encodePacked((playernames[msg.sender]))) != keccak256(abi.encodePacked((\u0022\u0022)))) {\r\n      playernamelookup[playernames[msg.sender]] = 0x0000000000000000000000000000000000000000;\r\n    }\r\n    playernames[msg.sender] = fname;\r\n    playernamelookup[fname] = msg.sender;\r\n    emit playernameregister(fname, msg.sender);\r\n  }\r\n\r\n\r\n  //ADMIN ONLY FUNCTIONS\r\n  function settknregcost(uint256 cost) public onlyOwner() {\r\n    tknregcost = cost;\r\n  }\r\n  function setnameregcost(uint256 cost) public onlyOwner() {\r\n    nameregcost = cost;\r\n  }\r\n\r\n  function adminwithdrawal(IERC20 token, uint256 amount) public onlyOwner() {\r\n  token.transfer(msg.sender, amount);\r\n  }\r\n  function clearETH() public onlyOwner() {\r\n    address payable _owner = msg.sender;\r\n    _owner.transfer(address(this).balance);\r\n  }\r\n\r\n}","ABI":"[{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022cost\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022settknregcost\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022playernamelookup\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022token\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022string\u0022,\u0022name\u0022:\u0022name\u0022,\u0022type\u0022:\u0022string\u0022},{\u0022internalType\u0022:\u0022string\u0022,\u0022name\u0022:\u0022symbol\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022name\u0022:\u0022registertoken\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:true,\u0022stateMutability\u0022:\u0022payable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022clearETH\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022string\u0022,\u0022name\u0022:\u0022name\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022name\u0022:\u0022registerplayername\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:true,\u0022stateMutability\u0022:\u0022payable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022acceptOwnership\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022regtkncount\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022owner\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022cost\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022setnameregcost\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022contract IERC20\u0022,\u0022name\u0022:\u0022token\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022adminwithdrawal\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022nameregcost\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022newOwner\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022regtokens\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022string\u0022,\u0022name\u0022:\u0022name\u0022,\u0022type\u0022:\u0022string\u0022},{\u0022internalType\u0022:\u0022string\u0022,\u0022name\u0022:\u0022symbol\u0022,\u0022type\u0022:\u0022string\u0022},{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022reg\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022tknregcost\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022playernames\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022transferOwnership\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022constructor\u0022},{\u0022payable\u0022:true,\u0022stateMutability\u0022:\u0022payable\u0022,\u0022type\u0022:\u0022fallback\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022token\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022string\u0022,\u0022name\u0022:\u0022name\u0022,\u0022type\u0022:\u0022string\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022string\u0022,\u0022name\u0022:\u0022symbol\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022name\u0022:\u0022tokenregister\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022playername\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022playeraddress\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022playernameregister\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_from\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_to\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022OwnershipTransferred\u0022,\u0022type\u0022:\u0022event\u0022}]","ContractName":"ERCBOOKS","CompilerVersion":"v0.5.11\u002Bcommit.c082d0b4","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://38685dded8e5b0994ca9b70efd0761f95144c3a2ff9c4df847df93f693f27acb"}]