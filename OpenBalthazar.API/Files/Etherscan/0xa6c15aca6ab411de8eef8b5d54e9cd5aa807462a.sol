[{"SourceCode":"// File: openzeppelin-solidity-v1.12.0/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \u0022user permissions\u0022.\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original \u0060owner\u0060 of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the \u0060onlyOwner\u0060\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n// File: openzeppelin-solidity-v1.12.0/contracts/ownership/Claimable.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n\r\n\r\n/**\r\n * @title Claimable\r\n * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\r\n * This allows the new owner to accept the transfer.\r\n */\r\ncontract Claimable is Ownable {\r\n  address public pendingOwner;\r\n\r\n  /**\r\n   * @dev Modifier throws if called by any account other than the pendingOwner.\r\n   */\r\n  modifier onlyPendingOwner() {\r\n    require(msg.sender == pendingOwner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to set the pendingOwner address.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    pendingOwner = newOwner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the pendingOwner address to finalize the transfer.\r\n   */\r\n  function claimOwnership() public onlyPendingOwner {\r\n    emit OwnershipTransferred(owner, pendingOwner);\r\n    owner = pendingOwner;\r\n    pendingOwner = address(0);\r\n  }\r\n}\r\n\r\n// File: contracts/utils/Adminable.sol\r\n\r\npragma solidity 0.4.25;\r\n\r\n\r\n/**\r\n * @title Adminable.\r\n */\r\ncontract Adminable is Claimable {\r\n    address[] public adminArray;\r\n\r\n    struct AdminInfo {\r\n        bool valid;\r\n        uint256 index;\r\n    }\r\n\r\n    mapping(address =\u003E AdminInfo) public adminTable;\r\n\r\n    event AdminAccepted(address indexed _admin);\r\n    event AdminRejected(address indexed _admin);\r\n\r\n    /**\r\n     * @dev Reverts if called by any account other than one of the administrators.\r\n     */\r\n    modifier onlyAdmin() {\r\n        require(adminTable[msg.sender].valid, \u0022caller is illegal\u0022);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Accept a new administrator.\r\n     * @param _admin The administrator\u0027s address.\r\n     */\r\n    function accept(address _admin) external onlyOwner {\r\n        require(_admin != address(0), \u0022administrator is illegal\u0022);\r\n        AdminInfo storage adminInfo = adminTable[_admin];\r\n        require(!adminInfo.valid, \u0022administrator is already accepted\u0022);\r\n        adminInfo.valid = true;\r\n        adminInfo.index = adminArray.length;\r\n        adminArray.push(_admin);\r\n        emit AdminAccepted(_admin);\r\n    }\r\n\r\n    /**\r\n     * @dev Reject an existing administrator.\r\n     * @param _admin The administrator\u0027s address.\r\n     */\r\n    function reject(address _admin) external onlyOwner {\r\n        AdminInfo storage adminInfo = adminTable[_admin];\r\n        require(adminArray.length \u003E adminInfo.index, \u0022administrator is already rejected\u0022);\r\n        require(_admin == adminArray[adminInfo.index], \u0022administrator is already rejected\u0022);\r\n        // at this point we know that adminArray.length \u003E adminInfo.index \u003E= 0\r\n        address lastAdmin = adminArray[adminArray.length - 1]; // will never underflow\r\n        adminTable[lastAdmin].index = adminInfo.index;\r\n        adminArray[adminInfo.index] = lastAdmin;\r\n        adminArray.length -= 1; // will never underflow\r\n        delete adminTable[_admin];\r\n        emit AdminRejected(_admin);\r\n    }\r\n\r\n    /**\r\n     * @dev Get an array of all the administrators.\r\n     * @return An array of all the administrators.\r\n     */\r\n    function getAdminArray() external view returns (address[] memory) {\r\n        return adminArray;\r\n    }\r\n\r\n    /**\r\n     * @dev Get the total number of administrators.\r\n     * @return The total number of administrators.\r\n     */\r\n    function getAdminCount() external view returns (uint256) {\r\n        return adminArray.length;\r\n    }\r\n}\r\n\r\n// File: contracts/wallet_trading_limiter/interfaces/IWalletsTradingLimiterValueConverter.sol\r\n\r\npragma solidity 0.4.25;\r\n\r\n/**\r\n * @title Wallets Trading Limiter Value Converter Interface.\r\n */\r\ninterface IWalletsTradingLimiterValueConverter {\r\n    /**\r\n     * @dev Get the current limiter currency worth of a given SGA amount.\r\n     * @param _sgaAmount The amount of SGA to convert.\r\n     * @return The equivalent amount of the limiter currency.\r\n     */\r\n    function toLimiterValue(uint256 _sgaAmount) external view returns (uint256);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, reverts on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\r\n    // benefit is lost if \u0027b\u0027 is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b \u003E 0); // Solidity only automatically asserts when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c \u002B a % b); // There is no case in which this doesn\u0027t hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b \u003C= a);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, reverts on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a \u002B b;\r\n    require(c \u003E= a);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n  * reverts when dividing by zero.\r\n  */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}\r\n\r\n// File: contracts/wallet_trading_limiter/WalletsTradingLimiterValueConverter.sol\r\n\r\npragma solidity 0.4.25;\r\n\r\n\r\n\r\n\r\n/**\r\n * Details of usage of licenced software see here: https://www.saga.org/software/readme_v1\r\n */\r\n\r\n/**\r\n * @title Wallets Trading Limiter Value Converter.\r\n */\r\ncontract WalletsTradingLimiterValueConverter is IWalletsTradingLimiterValueConverter, Adminable {\r\n    string public constant VERSION = \u00221.0.0\u0022;\r\n\r\n    using SafeMath for uint256;\r\n\r\n    /**\r\n     * @dev price maximum resolution.\r\n     * @notice Allow for sufficiently-high resolution.\r\n     * @notice Prevents multiplication-overflow.\r\n     */\r\n    uint256 public constant MAX_RESOLUTION = 0x10000000000000000;\r\n\r\n    uint256 public sequenceNum = 0;\r\n    uint256 public priceN = 0;\r\n    uint256 public priceD = 0;\r\n\r\n    event PriceSaved(uint256 _priceN, uint256 _priceD);\r\n    event PriceNotSaved(uint256 _priceN, uint256 _priceD);\r\n\r\n    /**\r\n     * @dev Set the price.\r\n     * @param _sequenceNum The sequence-number of the operation.\r\n     * @param _priceN The numerator of the price.\r\n     * @param _priceD The denominator of the price.\r\n     */\r\n    function setPrice(uint256 _sequenceNum, uint256 _priceN, uint256 _priceD) external onlyAdmin {\r\n        require(1 \u003C= _priceN \u0026\u0026 _priceN \u003C= MAX_RESOLUTION, \u0022price numerator is out of range\u0022);\r\n        require(1 \u003C= _priceD \u0026\u0026 _priceD \u003C= MAX_RESOLUTION, \u0022price denominator is out of range\u0022);\r\n\r\n        if (sequenceNum \u003C _sequenceNum) {\r\n            sequenceNum = _sequenceNum;\r\n            priceN = _priceN;\r\n            priceD = _priceD;\r\n            emit PriceSaved(_priceN, _priceD);\r\n        }\r\n        else {\r\n            emit PriceNotSaved(_priceN, _priceD);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Get the current limiter worth of a given SGA amount.\r\n     * @param _sgaAmount The amount of SGA to convert.\r\n     * @return The equivalent limiter amount.\r\n     */\r\n    function toLimiterValue(uint256 _sgaAmount) external view returns (uint256) {\r\n        assert(priceN \u003E 0 \u0026\u0026 priceD \u003E 0);\r\n        return _sgaAmount.mul(priceN) / priceD;\r\n    }\r\n}","ABI":"[{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022adminTable\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022valid\u0022,\u0022type\u0022:\u0022bool\u0022},{\u0022name\u0022:\u0022index\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022sequenceNum\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022claimOwnership\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022renounceOwnership\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_sgaAmount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022toLimiterValue\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022getAdminArray\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address[]\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022getAdminCount\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022owner\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022adminArray\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_admin\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022accept\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_sequenceNum\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_priceN\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_priceD\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022setPrice\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_admin\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022reject\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022priceD\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022priceN\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022pendingOwner\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022MAX_RESOLUTION\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022transferOwnership\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022VERSION\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022_priceN\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022_priceD\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022PriceSaved\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022_priceN\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022_priceD\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022PriceNotSaved\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022_admin\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022AdminAccepted\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022_admin\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022AdminRejected\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022previousOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022OwnershipRenounced\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022previousOwner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022OwnershipTransferred\u0022,\u0022type\u0022:\u0022event\u0022}]","ContractName":"WalletsTradingLimiterValueConverter","CompilerVersion":"v0.4.25\u002Bcommit.59dbf8f1","OptimizationUsed":"1","Runs":"6000","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://d02133b5d0e29e13eedd5179947816ca72a46e8b7c8a64b1eadd3665f9795c28"}]