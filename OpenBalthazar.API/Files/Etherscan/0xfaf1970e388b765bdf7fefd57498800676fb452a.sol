[{"SourceCode":"/**\r\n *Submitted for verification at Etherscan.io on 2018-02-27\r\n*/\r\n\r\n// File: contracts/EternalStorage.sol\r\n\r\npragma solidity 0.4.20;\r\n\r\n\r\n/**\r\n * @title EternalStorage\r\n * @dev This contract holds all the necessary state variables to carry out the storage of any contract.\r\n */\r\ncontract EternalStorage {\r\n\r\n    mapping(bytes32 =\u003E uint256) internal uintStorage;\r\n    mapping(bytes32 =\u003E string) internal stringStorage;\r\n    mapping(bytes32 =\u003E address) internal addressStorage;\r\n    mapping(bytes32 =\u003E bytes) internal bytesStorage;\r\n    mapping(bytes32 =\u003E bool) internal boolStorage;\r\n    mapping(bytes32 =\u003E int256) internal intStorage;\r\n\r\n}\r\n\r\n// File: contracts/UpgradeabilityOwnerStorage.sol\r\n\r\n//  Multi Sender\r\n// To Use this Dapp: https://coinmatic.app\r\npragma solidity 0.4.20;\r\n\r\n\r\n/**\r\n * @title UpgradeabilityOwnerStorage\r\n * @dev This contract keeps track of the upgradeability owner\r\n */\r\ncontract UpgradeabilityOwnerStorage {\r\n  // Owner of the contract\r\n    address private _upgradeabilityOwner;\r\n\r\n    /**\r\n    * @dev Tells the address of the owner\r\n    * @return the address of the owner\r\n    */\r\n    function upgradeabilityOwner() public view returns (address) {\r\n        return _upgradeabilityOwner;\r\n    }\r\n\r\n    /**\r\n    * @dev Sets the address of the owner\r\n    */\r\n    function setUpgradeabilityOwner(address newUpgradeabilityOwner) internal {\r\n        _upgradeabilityOwner = newUpgradeabilityOwner;\r\n    }\r\n\r\n}\r\n\r\n// File: contracts/UpgradeabilityStorage.sol\r\n\r\n//  Multi Sender\r\n// To Use this Dapp: https://coinmatic.app\r\npragma solidity 0.4.20;\r\n\r\n\r\n/**\r\n * @title UpgradeabilityStorage\r\n * @dev This contract holds all the necessary state variables to support the upgrade functionality\r\n */\r\ncontract UpgradeabilityStorage {\r\n  // Version name of the current implementation\r\n    string internal _version;\r\n\r\n    // Address of the current implementation\r\n    address internal _implementation;\r\n\r\n    /**\r\n    * @dev Tells the version name of the current implementation\r\n    * @return string representing the name of the current version\r\n    */\r\n    function version() public view returns (string) {\r\n        return _version;\r\n    }\r\n\r\n    /**\r\n    * @dev Tells the address of the current implementation\r\n    * @return address of the current implementation\r\n    */\r\n    function implementation() public view returns (address) {\r\n        return _implementation;\r\n    }\r\n}\r\n\r\n// File: contracts/OwnedUpgradeabilityStorage.sol\r\n\r\n//  Multi Sender\r\n// To Use this Dapp: https://coinmatic.app\r\npragma solidity 0.4.20;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title OwnedUpgradeabilityStorage\r\n * @dev This is the storage necessary to perform upgradeable contracts.\r\n * This means, required state variables for upgradeability purpose and eternal storage per se.\r\n */\r\ncontract OwnedUpgradeabilityStorage is UpgradeabilityOwnerStorage, UpgradeabilityStorage, EternalStorage {}\r\n\r\n// File: contracts/SafeMath.sol\r\n\r\n//  Multi Sender\r\n// To Use this Dapp: https://coinmatic.app\r\npragma solidity 0.4.20;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b \u003E 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c \u002B a % b); // There is no case in which this doesn\u0027t hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b \u003C= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a \u002B b;\r\n    assert(c \u003E= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: contracts/multisender/Ownable.sol\r\n\r\n//  Multi Sender\r\n// To Use this Dapp: https://coinmatic.app\r\npragma solidity 0.4.20;\r\n\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev This contract has an owner address providing basic authorization control\r\n */\r\ncontract Ownable is EternalStorage {\r\n    /**\r\n    * @dev Event to show ownership has been transferred\r\n    * @param previousOwner representing the address of the previous owner\r\n    * @param newOwner representing the address of the new owner\r\n    */\r\n    event OwnershipTransferred(address previousOwner, address newOwner);\r\n\r\n    /**\r\n    * @dev Throws if called by any account other than the owner.\r\n    */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner());\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Tells the address of the owner\r\n    * @return the address of the owner\r\n    */\r\n    function owner() public view returns (address) {\r\n        return addressStorage[keccak256(\u0022owner\u0022)];\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n    * @param newOwner the address to transfer ownership to.\r\n    */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        setOwner(newOwner);\r\n    }\r\n\r\n    /**\r\n    * @dev Sets a new owner address\r\n    */\r\n    function setOwner(address newOwner) internal {\r\n        OwnershipTransferred(owner(), newOwner);\r\n        addressStorage[keccak256(\u0022owner\u0022)] = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/multisender/Claimable.sol\r\n\r\n//  Multi Sender\r\n// To Use this Dapp: https://coinmatic.app\r\npragma solidity 0.4.20;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title Claimable\r\n * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\r\n * This allows the new owner to accept the transfer.\r\n */\r\ncontract Claimable is EternalStorage, Ownable {\r\n    function pendingOwner() public view returns (address) {\r\n        return addressStorage[keccak256(\u0022pendingOwner\u0022)];\r\n    }\r\n\r\n    /**\r\n    * @dev Modifier throws if called by any account other than the pendingOwner.\r\n    */\r\n    modifier onlyPendingOwner() {\r\n        require(msg.sender == pendingOwner());\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the current owner to set the pendingOwner address.\r\n    * @param newOwner The address to transfer ownership to.\r\n    */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        addressStorage[keccak256(\u0022pendingOwner\u0022)] = newOwner;\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the pendingOwner address to finalize the transfer.\r\n    */\r\n    function claimOwnership() public onlyPendingOwner {\r\n        OwnershipTransferred(owner(), pendingOwner());\r\n        addressStorage[keccak256(\u0022owner\u0022)] = addressStorage[keccak256(\u0022pendingOwner\u0022)];\r\n        addressStorage[keccak256(\u0022pendingOwner\u0022)] = address(0);\r\n    }\r\n}\r\n\r\n// File: contracts/multisender/UpgradebleStormSender.sol\r\n\r\n//  Multi Sender\r\n// To Use this Dapp: https://coinmatic.app\r\npragma solidity 0.4.20;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\ncontract ERC20 is ERC20Basic {\r\n\r\n\tfunction name (  ) public view returns ( string );\r\n    function decimals (  ) public view returns ( uint8 );\r\n    function symbol (  ) public view returns ( string );\r\n    \r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n  \r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\ncontract UpgradebleStormSender is OwnedUpgradeabilityStorage, Claimable {\r\n    using SafeMath for uint256;\r\n\r\n    //event Multisended(uint256 total, address tokenAddress);\r\n    event ClaimedTokens(address token, address owner, uint256 balance);\r\n\r\n    modifier hasFee() {\r\n        if (currentFee(msg.sender) \u003E 0) {\r\n            require(msg.value \u003E= currentFee(msg.sender));\r\n        }\r\n        _;\r\n    }\r\n    \r\n    function () public payable { \r\n      revert();\r\n    }\r\n\r\n    function initialize(address _owner) public {\r\n        require(!initialized());\r\n        setOwner(_owner);\r\n        setArrayLimit(200);\r\n        setDiscountStep(0.00005 ether);\r\n        setFee(0.05 ether);\r\n        boolStorage[keccak256(\u0022rs_multisender_initialized\u0022)] = true;\r\n    }\r\n\r\n    function initialized() public view returns (bool) {\r\n        return boolStorage[keccak256(\u0022rs_multisender_initialized\u0022)];\r\n    }\r\n \r\n    function txCount(address customer) public view returns(uint256) {\r\n        return uintStorage[keccak256(\u0022txCount\u0022, customer)];\r\n    }\r\n\r\n    function arrayLimit() public view returns(uint256) {\r\n        return uintStorage[keccak256(\u0022arrayLimit\u0022)];\r\n    }\r\n\r\n    function setArrayLimit(uint256 _newLimit) public onlyOwner {\r\n        require(_newLimit != 0);\r\n        uintStorage[keccak256(\u0022arrayLimit\u0022)] = _newLimit;\r\n    }\r\n\r\n    function discountStep() public view returns(uint256) {\r\n        return uintStorage[keccak256(\u0022discountStep\u0022)];\r\n    }\r\n\r\n    function setDiscountStep(uint256 _newStep) public onlyOwner {\r\n        require(_newStep != 0);\r\n        uintStorage[keccak256(\u0022discountStep\u0022)] = _newStep;\r\n    }\r\n\r\n    function fee() public view returns(uint256) {\r\n        return uintStorage[keccak256(\u0022fee\u0022)];\r\n    }\r\n\r\n    function currentFee(address _customer) public view returns(uint256) {\r\n        if (fee() \u003E discountRate(msg.sender)) {\r\n            return fee().sub(discountRate(_customer));\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    function setFee(uint256 _newStep) public onlyOwner {\r\n        require(_newStep != 0);\r\n        uintStorage[keccak256(\u0022fee\u0022)] = _newStep;\r\n    }\r\n\r\n    function discountRate(address _customer) public view returns(uint256) {\r\n        uint256 count = txCount(_customer);\r\n        return count.mul(discountStep());\r\n    }\r\n\r\n    function multisendToken(address token, address[] _contributors, uint256[] _balances) public payable {\r\n        if (token == 0x000000000000000000000000000000000000bEEF){\r\n            multisendEther(_contributors, _balances);\r\n        } else {\r\n          ERC20 erc20token = ERC20(token);\r\n          uint8 i = 0;\r\n          for (i; i \u003C _contributors.length; i\u002B\u002B) {\r\n              erc20token.transferFrom(msg.sender, _contributors[i], _balances[i]);\r\n              //total \u002B= _balances[i];\r\n          }\r\n        }\r\n    }\r\n\r\n\r\n    function multisendEther(address[] _contributors, uint256[] _balances) public payable {\r\n        uint256 i = 0;\r\n        for (i; i \u003C _contributors.length; i\u002B\u002B) {\r\n            //require(total \u003E= _balances[i]);\r\n            //total = total.sub(_balances[i]);\r\n            _contributors[i].transfer(_balances[i]);\r\n        }\r\n    }\r\n    \r\n    function claimTokens(address _token) public onlyOwner {\r\n        if (_token == 0x0) {\r\n            owner().transfer(this.balance);\r\n            return;\r\n        }\r\n        ERC20 erc20token = ERC20(_token);\r\n        uint256 balance = erc20token.balanceOf(this);\r\n        erc20token.transfer(owner(), balance);\r\n        ClaimedTokens(_token, owner(), balance);\r\n    }\r\n    \r\n    function setTxCount(address customer, uint256 _txCount) private {\r\n        uintStorage[keccak256(\u0022txCount\u0022, customer)] = _txCount;\r\n    }\r\n\r\n}","ABI":"[{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022token\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_contributors\u0022,\u0022type\u0022:\u0022address[]\u0022},{\u0022name\u0022:\u0022_balances\u0022,\u0022type\u0022:\u0022uint256[]\u0022}],\u0022name\u0022:\u0022multisendToken\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:true,\u0022stateMutability\u0022:\u0022payable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022initialized\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_newStep\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022setDiscountStep\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022claimOwnership\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022version\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_customer\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022currentFee\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022implementation\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_newStep\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022setFee\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022upgradeabilityOwner\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022owner\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_contributors\u0022,\u0022type\u0022:\u0022address[]\u0022},{\u0022name\u0022:\u0022_balances\u0022,\u0022type\u0022:\u0022uint256[]\u0022}],\u0022name\u0022:\u0022multisendEther\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:true,\u0022stateMutability\u0022:\u0022payable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022arrayLimit\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022customer\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022txCount\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_owner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022initialize\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022fee\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_token\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022claimTokens\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022pendingOwner\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022discountStep\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_newLimit\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022setArrayLimit\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_customer\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022discountRate\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022transferOwnership\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022payable\u0022:true,\u0022stateMutability\u0022:\u0022payable\u0022,\u0022type\u0022:\u0022fallback\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022token\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022owner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022balance\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022ClaimedTokens\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022previousOwner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022OwnershipTransferred\u0022,\u0022type\u0022:\u0022event\u0022}]","ContractName":"UpgradebleStormSender","CompilerVersion":"v0.4.20\u002Bcommit.3155dd80","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://e3eb531abf73833417373f0f0fcc1e5b3200f7642f4675675772af8dfc1bc809"}]