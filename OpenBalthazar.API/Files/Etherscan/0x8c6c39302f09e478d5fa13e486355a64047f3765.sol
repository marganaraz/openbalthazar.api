[{"SourceCode":"pragma solidity \u003E=0.5.1;\r\n\r\n\r\ncontract owned {\r\n    address public owner;\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) onlyOwner public {\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\ncontract tokenRecipient {\r\n    event receivedEther(address sender, uint amount);\r\n    event receivedTokens(address _from, uint256 _value, address _token, bytes _extraData);\r\n\r\n    function receiveApproval(address _from, uint256 _value, address _token, bytes memory _extraData) public {\r\n        Token t = Token(_token);\r\n        require(t.transferFrom(_from, address(this), _value));\r\n        emit receivedTokens(_from, _value, _token, _extraData);\r\n    }\r\n\r\n    function () payable external {\r\n        emit receivedEther(msg.sender, msg.value);\r\n    }\r\n}\r\n\r\n\r\ncontract Token {\r\n    function totalSupply() public view returns (uint256);\r\n    function actualBalanceOf(address _owner) public view returns (uint256 balance);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n    function renounceOwnership() public;\r\n    function transferOwnership(address _newOwner) public;\r\n    function pause() public;\r\n    function unpause() public;\r\n}\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Unsigned math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n    * @dev Multiplies two unsigned integers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\r\n        // benefit is lost if \u0027b\u0027 is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \u0022Safe mul error\u0022);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b \u003E 0, \u0022Safe div error\u0022);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c \u002B a % b); // There is no case in which this doesn\u0027t hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b \u003C= a, \u0022Safe sub error\u0022);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two unsigned integers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a \u002B b;\r\n        require(c \u003E= a, \u0022Safe add error\u0022);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \u0022Safe mod error\u0022);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * The Mindsync Platform contract\r\n */\r\ncontract MindsyncPlatform is owned, tokenRecipient {\r\n    using SafeMath for uint256;\r\n\r\n    uint public minimumQuorum;\r\n    uint public minimumTokensToVote;\r\n    uint public debatingPeriodInMinutes;\r\n    Proposal[] public proposals;\r\n    uint public numProposals;\r\n    Token public tokenAddress;\r\n    address chairmanAddress;\r\n\r\n    bool public initialized = false;\r\n\r\n    event Initialized();\r\n    event ProposalAdded(uint proposalID, address recipient, uint amount, string description);\r\n    event Voted(uint proposalID, bool position, address voter);\r\n    event ProposalTallied(uint proposalID, uint result, uint quorum, bool active);\r\n    event ChangeOfRules(uint newMinimumTokensToVote, uint newMinimumQuorum, uint newDebatingPeriodInMinutes, address newTokenAddress, address newChairmanAddress);\r\n    event ProposalSignedByChairman(uint proposalNumber,  bool sign, address chairman);\r\n    \r\n    struct Proposal {\r\n        address recipient;\r\n        uint amount;\r\n        string description;\r\n        bool signedByChairman;\r\n        uint minExecutionDate;\r\n        bool executed;\r\n        bool proposalPassed;\r\n        uint numberOfVotes;\r\n        bytes32 proposalHash;\r\n        Vote[] votes;\r\n        mapping (address =\u003E bool) voted;\r\n    }\r\n\r\n    struct Vote {\r\n        bool inSupport;\r\n        address voter;\r\n    }\r\n\r\n    // Modifier that allows only tokenholders with at least minimumTokensToVote tokens to vote and create new proposals\r\n    modifier onlyTokenholders {\r\n        require(tokenAddress.actualBalanceOf(msg.sender) \u003E minimumTokensToVote);\r\n        _;\r\n    }\r\n\r\n    // Modifier that allows only chairman execute function\r\n    modifier onlyChairman {\r\n        require(msg.sender == chairmanAddress);\r\n        _;\r\n    }\r\n\r\n\r\n    /**\r\n     * Constructor\r\n     *\r\n     * First time rules setup \r\n     */\r\n    constructor() payable public {\r\n    }\r\n\r\n\r\n    /**\r\n     * Initialize contract\r\n     *\r\n     * @param _tokenAddress token address\r\n     * @param _minimumTokensToVote address can vote only if the number of tokens held by address exceed this number\r\n     * @param _minimumPercentToPassAVote proposal can vote only if the sum of tokens held by all voters exceed this number divided by 100 and muliplied by token total supply\r\n     * @param _minutesForDebate the minimum amount of delay between when a proposal is made and when it can be executed\r\n     */\r\n    function init(Token _tokenAddress, address _chairmanAddress, uint _minimumTokensToVote, uint _minimumPercentToPassAVote, uint _minutesForDebate) onlyOwner public {\r\n        require(!initialized);\r\n        initialized = true;\r\n        changeVotingRules(_tokenAddress, _chairmanAddress, _minimumTokensToVote, _minimumPercentToPassAVote, _minutesForDebate);\r\n        emit Initialized();\r\n    }\r\n\r\n\r\n    /**\r\n     * Change voting rules\r\n     *\r\n     * Make so that proposals need to be discussed for at least \u0060minutesForDebate/60\u0060 hours\r\n     * and all voters combined must own more than \u0060minimumPercentToPassAVote\u0060 multiplied by total supply tokens of \u0060tokenAddress\u0060 to be executed\r\n     *\r\n     * @param _tokenAddress token address\r\n     * @param _minimumTokensToVote address can vote only if the number of tokens held by address exceed this number\r\n     * @param _minimumPercentToPassAVote proposal can vote only if the sum of tokens held by all voters exceed this number divided by 100 and muliplied by token total supply\r\n     * @param _minutesForDebate the minimum amount of delay between when a proposal is made and when it can be executed\r\n     */\r\n    function changeVotingRules(Token _tokenAddress, address _chairmanAddress, uint _minimumTokensToVote, uint _minimumPercentToPassAVote, uint _minutesForDebate) onlyOwner public {\r\n        require(_chairmanAddress != address(0));\r\n        require(_minimumPercentToPassAVote \u003C= 51);\r\n        tokenAddress = Token(_tokenAddress);\r\n        chairmanAddress = _chairmanAddress;\r\n        if (_minimumTokensToVote == 0 ) _minimumTokensToVote = 1;\r\n        minimumTokensToVote = _minimumTokensToVote;\r\n        if (_minimumPercentToPassAVote == 0 ) _minimumPercentToPassAVote = 51;\r\n        minimumQuorum = _minimumPercentToPassAVote;\r\n        debatingPeriodInMinutes = _minutesForDebate;\r\n        emit ChangeOfRules(_minimumTokensToVote, minimumQuorum, debatingPeriodInMinutes, address(tokenAddress), chairmanAddress);\r\n    }\r\n\r\n\r\n    /**\r\n     * Add Proposal\r\n     *\r\n     * Propose to execute transaction\r\n     *\r\n     * @param destination is a transaction destination address\r\n     * @param weiAmount amount of wei\r\n     * @param transactionDescription Description of transaction\r\n     * @param transactionBytecode bytecode of transaction\r\n     */\r\n    function newProposal(\r\n        address destination,\r\n        uint weiAmount,\r\n        string memory transactionDescription,\r\n        bytes memory transactionBytecode\r\n    )\r\n        onlyTokenholders public\r\n        returns (uint proposalID)\r\n    {\r\n        proposalID = proposals.length\u002B\u002B;\r\n        Proposal storage p = proposals[proposalID];\r\n        p.recipient = destination;\r\n        p.signedByChairman = false;\r\n        p.amount = weiAmount;\r\n        p.description = transactionDescription;\r\n        p.proposalHash = keccak256(abi.encodePacked(destination, weiAmount, transactionBytecode));\r\n        p.minExecutionDate = now \u002B debatingPeriodInMinutes * 1 minutes;\r\n        p.executed = false;\r\n        p.proposalPassed = false;\r\n        p.numberOfVotes = 0;\r\n        emit ProposalAdded(proposalID, destination, weiAmount, transactionDescription);\r\n        numProposals = proposalID\u002B1;\r\n\r\n        return proposalID;\r\n    }\r\n\r\n\r\n    /**\r\n     * Check if a proposal code matches\r\n     *\r\n     * @param proposalNumber ID number of the proposal to query\r\n     * @param destination is a transaction destination address\r\n     * @param weiAmount amount of wei\r\n     * @param transactionBytecode bytecode of transaction\r\n     */\r\n    function checkProposalCode(\r\n        uint proposalNumber,\r\n        address destination,\r\n        uint weiAmount,\r\n        bytes memory transactionBytecode\r\n    )\r\n        view public\r\n        returns (bool codeChecksOut)\r\n    {\r\n        Proposal storage p = proposals[proposalNumber];\r\n        return p.proposalHash == keccak256(abi.encodePacked(destination, weiAmount, transactionBytecode));\r\n    }\r\n\r\n\r\n    /**\r\n     * Sign a proposal\r\n     *\r\n     * Vote \u0060supportsProposal? in support of : against\u0060 proposal #\u0060proposalNumber\u0060\r\n     *\r\n     * @param proposalNumber number of proposal\r\n     * @param signProposal true for sign\r\n     */\r\n    function sign(\r\n        uint proposalNumber,\r\n        bool signProposal\r\n    )\r\n        onlyTokenholders public\r\n        returns (uint voteID)\r\n    {\r\n        require(initialized);\r\n        Proposal storage p = proposals[proposalNumber];\r\n        require(msg.sender == chairmanAddress);\r\n        require(signProposal == true);\r\n\r\n        p.signedByChairman = signProposal;\r\n        emit ProposalSignedByChairman(proposalNumber,  signProposal, msg.sender);\r\n        return proposalNumber;\r\n    }\r\n\r\n\r\n    /**\r\n     * Log a vote for a proposal\r\n     *\r\n     * Vote \u0060supportsProposal? in support of : against\u0060 proposal #\u0060proposalNumber\u0060\r\n     *\r\n     * @param proposalNumber number of proposal\r\n     * @param supportsProposal either in favor or against it\r\n     */\r\n    function vote(\r\n        uint proposalNumber,\r\n        bool supportsProposal\r\n    )\r\n        onlyTokenholders public\r\n        returns (uint voteID)\r\n    {\r\n        Proposal storage p = proposals[proposalNumber];\r\n        require(p.voted[msg.sender] != true);\r\n\r\n        voteID = p.votes.length\u002B\u002B;\r\n        p.votes[voteID] = Vote({inSupport: supportsProposal, voter: msg.sender});\r\n        p.voted[msg.sender] = true;\r\n        p.numberOfVotes = voteID \u002B1;\r\n        emit Voted(proposalNumber,  supportsProposal, msg.sender);\r\n        return voteID;\r\n    }\r\n\r\n    /**\r\n     * Finish vote\r\n     *\r\n     * Count the votes proposal #\u0060proposalNumber\u0060 and execute it if approved\r\n     *\r\n     * @param proposalNumber proposal number\r\n     * @param transactionBytecode optional: if the transaction contained a bytecode, you need to send it\r\n     */\r\n    function executeProposal(uint proposalNumber, bytes memory transactionBytecode) public {\r\n        Proposal storage p = proposals[proposalNumber];\r\n\r\n        require(initialized);\r\n        require(now \u003E p.minExecutionDate                                             // If it is past the voting deadline\r\n            \u0026\u0026 !p.executed                                                          // and it has not already been executed\r\n            \u0026\u0026 p.proposalHash == keccak256(abi.encodePacked(p.recipient, p.amount, transactionBytecode))); // and the supplied code matches the proposal...\r\n\r\n\r\n        // ...then tally the results\r\n        uint quorum = 0;\r\n        uint yea = 0;\r\n        uint nay = 0;\r\n\r\n        for (uint i = 0; i \u003C  p.votes.length; \u002B\u002Bi) {\r\n            Vote storage v = p.votes[i];\r\n            uint voteWeight = tokenAddress.actualBalanceOf(v.voter);\r\n            quorum \u002B= voteWeight;\r\n            if (v.inSupport) {\r\n                yea \u002B= voteWeight;\r\n            } else {\r\n                nay \u002B= voteWeight;\r\n            }\r\n        }\r\n\r\n        Token t = Token(tokenAddress);\r\n        require(quorum \u003E= t.totalSupply().mul(minimumQuorum).div(100)); // Check if a minimum quorum has been reached\r\n\r\n        if (yea \u003E nay ) {\r\n            // Proposal passed; execute the transaction\r\n\r\n            p.executed = true;\r\n            \r\n            (bool success, ) = p.recipient.call.value(p.amount)(transactionBytecode);\r\n            require(success);\r\n\r\n            p.proposalPassed = true;\r\n        } else {\r\n            // Proposal failed\r\n            p.proposalPassed = false;\r\n        }\r\n\r\n        // Fire Events\r\n        emit ProposalTallied(proposalNumber, yea - nay, quorum, p.proposalPassed);\r\n    }\r\n}","ABI":"[{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022minimumTokensToVote\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022proposals\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022recipient\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022string\u0022,\u0022name\u0022:\u0022description\u0022,\u0022type\u0022:\u0022string\u0022},{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022signedByChairman\u0022,\u0022type\u0022:\u0022bool\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022minExecutionDate\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022executed\u0022,\u0022type\u0022:\u0022bool\u0022},{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022proposalPassed\u0022,\u0022type\u0022:\u0022bool\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022numberOfVotes\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022proposalHash\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022initialized\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022proposalNumber\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022bytes\u0022,\u0022name\u0022:\u0022transactionBytecode\u0022,\u0022type\u0022:\u0022bytes\u0022}],\u0022name\u0022:\u0022executeProposal\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022numProposals\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022contract Token\u0022,\u0022name\u0022:\u0022_tokenAddress\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_chairmanAddress\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_minimumTokensToVote\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_minimumPercentToPassAVote\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_minutesForDebate\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022changeVotingRules\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022debatingPeriodInMinutes\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022minimumQuorum\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022owner\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_from\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_value\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_token\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022bytes\u0022,\u0022name\u0022:\u0022_extraData\u0022,\u0022type\u0022:\u0022bytes\u0022}],\u0022name\u0022:\u0022receiveApproval\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022tokenAddress\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022contract Token\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022destination\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022weiAmount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022string\u0022,\u0022name\u0022:\u0022transactionDescription\u0022,\u0022type\u0022:\u0022string\u0022},{\u0022internalType\u0022:\u0022bytes\u0022,\u0022name\u0022:\u0022transactionBytecode\u0022,\u0022type\u0022:\u0022bytes\u0022}],\u0022name\u0022:\u0022newProposal\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022proposalID\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022proposalNumber\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022supportsProposal\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022name\u0022:\u0022vote\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022voteID\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022proposalNumber\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022signProposal\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022name\u0022:\u0022sign\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022voteID\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022proposalNumber\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022destination\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022weiAmount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022bytes\u0022,\u0022name\u0022:\u0022transactionBytecode\u0022,\u0022type\u0022:\u0022bytes\u0022}],\u0022name\u0022:\u0022checkProposalCode\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022codeChecksOut\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022transferOwnership\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022contract Token\u0022,\u0022name\u0022:\u0022_tokenAddress\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_chairmanAddress\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_minimumTokensToVote\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_minimumPercentToPassAVote\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_minutesForDebate\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022init\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[],\u0022payable\u0022:true,\u0022stateMutability\u0022:\u0022payable\u0022,\u0022type\u0022:\u0022constructor\u0022},{\u0022payable\u0022:true,\u0022stateMutability\u0022:\u0022payable\u0022,\u0022type\u0022:\u0022fallback\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022Initialized\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022proposalID\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022recipient\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022string\u0022,\u0022name\u0022:\u0022description\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022name\u0022:\u0022ProposalAdded\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022proposalID\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022position\u0022,\u0022type\u0022:\u0022bool\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022voter\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022Voted\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022proposalID\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022result\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022quorum\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022active\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022name\u0022:\u0022ProposalTallied\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022newMinimumTokensToVote\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022newMinimumQuorum\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022newDebatingPeriodInMinutes\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022newTokenAddress\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022newChairmanAddress\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022ChangeOfRules\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022proposalNumber\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022sign\u0022,\u0022type\u0022:\u0022bool\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022chairman\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022ProposalSignedByChairman\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022sender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022receivedEther\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_from\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_value\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_token\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022bytes\u0022,\u0022name\u0022:\u0022_extraData\u0022,\u0022type\u0022:\u0022bytes\u0022}],\u0022name\u0022:\u0022receivedTokens\u0022,\u0022type\u0022:\u0022event\u0022}]","ContractName":"MindsyncPlatform","CompilerVersion":"v0.5.11\u002Bcommit.c082d0b4","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://ac1cf4a4ac14b191fbb82d393bef3f3fdca552324ecb3aae57041e182ac45f5b"}]