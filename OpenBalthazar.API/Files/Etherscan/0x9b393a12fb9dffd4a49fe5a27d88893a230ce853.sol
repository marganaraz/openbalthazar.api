[{"SourceCode":"pragma solidity ^0.4.24;\r\n\r\n\r\n\r\ninterface ControllerInterface {\r\n    function mint(address to, uint amount) external returns (bool);\r\n    function burn(uint value) external returns (bool);\r\n    function isCustodian(address addr) external view returns (bool);\r\n    function isMerchant(address addr) external view returns (bool);\r\n    function getToken() external view returns (ERC20);\r\n}\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * See https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function balanceOf(address _who) public view returns (uint256);\r\n  function transfer(address _to, uint256 _value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address _owner, address _spender)\r\n    public view returns (uint256);\r\n\r\n  function transferFrom(address _from, address _to, uint256 _value)\r\n    public returns (bool);\r\n\r\n  function approve(address _spender, uint256 _value) public returns (bool);\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure.\r\n * To use this library you can add a \u0060using SafeERC20 for ERC20;\u0060 statement to your contract,\r\n * which allows you to call the safe operations as \u0060token.safeTransfer(...)\u0060, etc.\r\n */\r\nlibrary SafeERC20 {\r\n  function safeTransfer(\r\n    ERC20Basic _token,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    internal\r\n  {\r\n    require(_token.transfer(_to, _value));\r\n  }\r\n\r\n  function safeTransferFrom(\r\n    ERC20 _token,\r\n    address _from,\r\n    address _to,\r\n    uint256 _value\r\n  )\r\n    internal\r\n  {\r\n    require(_token.transferFrom(_from, _to, _value));\r\n  }\r\n\r\n  function safeApprove(\r\n    ERC20 _token,\r\n    address _spender,\r\n    uint256 _value\r\n  )\r\n    internal\r\n  {\r\n    require(_token.approve(_spender, _value));\r\n  }\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \u0022user permissions\u0022.\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original \u0060owner\u0060 of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the \u0060onlyOwner\u0060\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title Claimable\r\n * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\r\n * This allows the new owner to accept the transfer.\r\n */\r\ncontract Claimable is Ownable {\r\n  address public pendingOwner;\r\n\r\n  /**\r\n   * @dev Modifier throws if called by any account other than the pendingOwner.\r\n   */\r\n  modifier onlyPendingOwner() {\r\n    require(msg.sender == pendingOwner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to set the pendingOwner address.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    pendingOwner = newOwner;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the pendingOwner address to finalize the transfer.\r\n   */\r\n  function claimOwnership() public onlyPendingOwner {\r\n    emit OwnershipTransferred(owner, pendingOwner);\r\n    owner = pendingOwner;\r\n    pendingOwner = address(0);\r\n  }\r\n}\r\n\r\n/**\r\n * @title Contracts that should be able to recover tokens\r\n * @author SylTi\r\n * @dev This allow a contract to recover any ERC20 token received in a contract by transferring the balance to the contract owner.\r\n * This will prevent any accidental loss of tokens.\r\n */\r\ncontract CanReclaimToken is Ownable {\r\n  using SafeERC20 for ERC20Basic;\r\n\r\n  /**\r\n   * @dev Reclaim all ERC20Basic compatible tokens\r\n   * @param _token ERC20Basic The address of the token contract\r\n   */\r\n  function reclaimToken(ERC20Basic _token) external onlyOwner {\r\n    uint256 balance = _token.balanceOf(this);\r\n    _token.safeTransfer(owner, balance);\r\n  }\r\n\r\n}\r\n\r\n\r\n// empty block is used as this contract just inherits others.\r\ncontract OwnableContract is CanReclaimToken, Claimable { } /* solhint-disable-line no-empty-blocks */\r\n\r\n\r\ncontract Factory is OwnableContract {\r\n\r\n    enum RequestStatus {PENDING, CANCELED, APPROVED, REJECTED}\r\n\r\n    struct Request {\r\n        address requester; // sender of the request.\r\n        uint amount; // amount of token to mint/burn.\r\n        string depositAddress; // custodian\u0027s asset address in mint, merchant\u0027s asset address in burn.\r\n        string txid; // asset txid for sending/redeeming asset in the mint/burn process.\r\n        uint nonce; // serial number allocated for each request.\r\n        uint timestamp; // time of the request creation.\r\n        RequestStatus status; // status of the request.\r\n    }\r\n\r\n    ControllerInterface public controller;\r\n\r\n    // mapping between merchant to the corresponding custodian deposit address, used in the minting process.\r\n    // by using a different deposit address per merchant the custodian can identify which merchant deposited.\r\n    mapping(address=\u003Estring) public custodianDepositAddress;\r\n\r\n    // mapping between merchant to the its deposit address where the asset should be moved to, used in the burning process.\r\n    mapping(address=\u003Estring) public merchantDepositAddress;\r\n\r\n    // mapping between a mint request hash and the corresponding request nonce. \r\n    mapping(bytes32=\u003Euint) public mintRequestNonce;\r\n\r\n    // mapping between a burn request hash and the corresponding request nonce.\r\n    mapping(bytes32=\u003Euint) public burnRequestNonce;\r\n\r\n    Request[] public mintRequests;\r\n    Request[] public burnRequests;\r\n\r\n    constructor(ControllerInterface _controller) public {\r\n        require(_controller != address(0), \u0022invalid _controller address\u0022);\r\n        controller = _controller;\r\n        owner = _controller;\r\n    }\r\n\r\n    modifier onlyMerchant() {\r\n        require(controller.isMerchant(msg.sender), \u0022sender not a merchant.\u0022);\r\n        _;\r\n    }\r\n\r\n    modifier onlyCustodian() {\r\n        require(controller.isCustodian(msg.sender), \u0022sender not a custodian.\u0022);\r\n        _;\r\n    }\r\n\r\n    event CustodianDepositAddressSet(address indexed merchant, address indexed sender, string depositAddress);\r\n\r\n    function setCustodianDepositAddress(\r\n        address merchant,\r\n        string depositAddress\r\n    )\r\n        external\r\n        onlyCustodian\r\n        returns (bool) \r\n    {\r\n        require(merchant != 0, \u0022invalid merchant address\u0022);\r\n        require(controller.isMerchant(merchant), \u0022merchant address is not a real merchant.\u0022);\r\n        require(!isEmptyString(depositAddress), \u0022invalid asset deposit address\u0022);\r\n\r\n        custodianDepositAddress[merchant] = depositAddress;\r\n        emit CustodianDepositAddressSet(merchant, msg.sender, depositAddress);\r\n        return true;\r\n    }\r\n\r\n    event MerchantDepositAddressSet(address indexed merchant, string depositAddress);\r\n\r\n    function setMerchantDepositAddress(string depositAddress) external onlyMerchant returns (bool) {\r\n        require(!isEmptyString(depositAddress), \u0022invalid asset deposit address\u0022);\r\n\r\n        merchantDepositAddress[msg.sender] = depositAddress;\r\n        emit MerchantDepositAddressSet(msg.sender, depositAddress);\r\n        return true; \r\n    }\r\n\r\n    event MintRequestAdd(\r\n        uint indexed nonce,\r\n        address indexed requester,\r\n        uint amount,\r\n        string depositAddress,\r\n        string txid,\r\n        uint timestamp,\r\n        bytes32 requestHash\r\n    );\r\n\r\n    function addMintRequest(\r\n        uint amount,\r\n        string txid,\r\n        string depositAddress\r\n    )\r\n        external\r\n        onlyMerchant\r\n        returns (bool)\r\n    {\r\n        require(!isEmptyString(depositAddress), \u0022invalid asset deposit address\u0022); \r\n        require(compareStrings(depositAddress, custodianDepositAddress[msg.sender]), \u0022wrong asset deposit address\u0022);\r\n\r\n        uint nonce = mintRequests.length;\r\n        uint timestamp = getTimestamp();\r\n\r\n        Request memory request = Request({\r\n            requester: msg.sender,\r\n            amount: amount,\r\n            depositAddress: depositAddress,\r\n            txid: txid,\r\n            nonce: nonce,\r\n            timestamp: timestamp,\r\n            status: RequestStatus.PENDING\r\n        });\r\n\r\n        bytes32 requestHash = calcRequestHash(request);\r\n        mintRequestNonce[requestHash] = nonce; \r\n        mintRequests.push(request);\r\n\r\n        emit MintRequestAdd(nonce, msg.sender, amount, depositAddress, txid, timestamp, requestHash);\r\n        return true;\r\n    }\r\n\r\n    event MintRequestCancel(uint indexed nonce, address indexed requester, bytes32 requestHash);\r\n\r\n    function cancelMintRequest(bytes32 requestHash) external onlyMerchant returns (bool) {\r\n        uint nonce;\r\n        Request memory request;\r\n\r\n        (nonce, request) = getPendingMintRequest(requestHash);\r\n\r\n        require(msg.sender == request.requester, \u0022cancel sender is different than pending request initiator\u0022);\r\n        mintRequests[nonce].status = RequestStatus.CANCELED;\r\n\r\n        emit MintRequestCancel(nonce, msg.sender, requestHash);\r\n        return true;\r\n    }\r\n\r\n    event MintConfirmed(\r\n        uint indexed nonce,\r\n        address indexed requester,\r\n        uint amount,\r\n        string depositAddress,\r\n        string txid,\r\n        uint timestamp,\r\n        bytes32 requestHash\r\n    );\r\n\r\n    function confirmMintRequest(bytes32 requestHash) external onlyCustodian returns (bool) {\r\n        uint nonce;\r\n        Request memory request;\r\n\r\n        (nonce, request) = getPendingMintRequest(requestHash);\r\n\r\n        mintRequests[nonce].status = RequestStatus.APPROVED;\r\n        require(controller.mint(request.requester, request.amount), \u0022mint failed\u0022);\r\n\r\n        emit MintConfirmed(\r\n            request.nonce,\r\n            request.requester,\r\n            request.amount,\r\n            request.depositAddress,\r\n            request.txid,\r\n            request.timestamp,\r\n            requestHash\r\n        );\r\n        return true;\r\n    }\r\n\r\n    event MintRejected(\r\n        uint indexed nonce,\r\n        address indexed requester,\r\n        uint amount,\r\n        string depositAddress,\r\n        string txid,\r\n        uint timestamp,\r\n        bytes32 requestHash\r\n    );\r\n\r\n    function rejectMintRequest(bytes32 requestHash) external onlyCustodian returns (bool) {\r\n        uint nonce;\r\n        Request memory request;\r\n\r\n        (nonce, request) = getPendingMintRequest(requestHash);\r\n\r\n        mintRequests[nonce].status = RequestStatus.REJECTED;\r\n\r\n        emit MintRejected(\r\n            request.nonce,\r\n            request.requester,\r\n            request.amount,\r\n            request.depositAddress,\r\n            request.txid,\r\n            request.timestamp,\r\n            requestHash\r\n        );\r\n        return true;\r\n    }\r\n\r\n    event Burned(\r\n        uint indexed nonce,\r\n        address indexed requester,\r\n        uint amount,\r\n        string depositAddress,\r\n        uint timestamp,\r\n        bytes32 requestHash\r\n    );\r\n\r\n    function burn(uint amount) external onlyMerchant returns (bool) {\r\n        string memory depositAddress = merchantDepositAddress[msg.sender];\r\n        require(!isEmptyString(depositAddress), \u0022merchant asset deposit address was not set\u0022); \r\n\r\n        uint nonce = burnRequests.length;\r\n        uint timestamp = getTimestamp();\r\n\r\n        // set txid as empty since it is not known yet.\r\n        string memory txid = \u0022\u0022;\r\n\r\n        Request memory request = Request({\r\n            requester: msg.sender,\r\n            amount: amount,\r\n            depositAddress: depositAddress,\r\n            txid: txid,\r\n            nonce: nonce,\r\n            timestamp: timestamp,\r\n            status: RequestStatus.PENDING\r\n        });\r\n\r\n        bytes32 requestHash = calcRequestHash(request);\r\n        burnRequestNonce[requestHash] = nonce; \r\n        burnRequests.push(request);\r\n\r\n        require(controller.getToken().transferFrom(msg.sender, controller, amount), \u0022transfer tokens to burn failed\u0022);\r\n        require(controller.burn(amount), \u0022burn failed\u0022);\r\n\r\n        emit Burned(nonce, msg.sender, amount, depositAddress, timestamp, requestHash);\r\n        return true;\r\n    }\r\n\r\n    event BurnConfirmed(\r\n        uint indexed nonce,\r\n        address indexed requester,\r\n        uint amount,\r\n        string depositAddress,\r\n        string txid,\r\n        uint timestamp,\r\n        bytes32 inputRequestHash\r\n    );\r\n\r\n    function confirmBurnRequest(bytes32 requestHash, string txid) external onlyCustodian returns (bool) {\r\n        uint nonce;\r\n        Request memory request;\r\n\r\n        (nonce, request) = getPendingBurnRequest(requestHash);\r\n\r\n        burnRequests[nonce].txid = txid;\r\n        burnRequests[nonce].status = RequestStatus.APPROVED;\r\n        burnRequestNonce[calcRequestHash(burnRequests[nonce])] = nonce;\r\n\r\n        emit BurnConfirmed(\r\n            request.nonce,\r\n            request.requester,\r\n            request.amount,\r\n            request.depositAddress,\r\n            txid,\r\n            request.timestamp,\r\n            requestHash\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function getMintRequest(uint nonce)\r\n        external\r\n        view\r\n        returns (\r\n            uint requestNonce,\r\n            address requester,\r\n            uint amount,\r\n            string depositAddress,\r\n            string txid,\r\n            uint timestamp,\r\n            string status,\r\n            bytes32 requestHash\r\n        )\r\n    {\r\n        Request memory request = mintRequests[nonce];\r\n        string memory statusString = getStatusString(request.status); \r\n\r\n        requestNonce = request.nonce;\r\n        requester = request.requester;\r\n        amount = request.amount;\r\n        depositAddress = request.depositAddress;\r\n        txid = request.txid;\r\n        timestamp = request.timestamp;\r\n        status = statusString;\r\n        requestHash = calcRequestHash(request);\r\n    }\r\n\r\n    function getMintRequestsLength() external view returns (uint length) {\r\n        return mintRequests.length;\r\n    }\r\n\r\n    function getBurnRequest(uint nonce)\r\n        external\r\n        view\r\n        returns (\r\n            uint requestNonce,\r\n            address requester,\r\n            uint amount,\r\n            string depositAddress,\r\n            string txid,\r\n            uint timestamp,\r\n            string status,\r\n            bytes32 requestHash\r\n        )\r\n    {\r\n        Request storage request = burnRequests[nonce];\r\n        string memory statusString = getStatusString(request.status); \r\n\r\n        requestNonce = request.nonce;\r\n        requester = request.requester;\r\n        amount = request.amount;\r\n        depositAddress = request.depositAddress;\r\n        txid = request.txid;\r\n        timestamp = request.timestamp;\r\n        status = statusString;\r\n        requestHash = calcRequestHash(request);\r\n    }\r\n\r\n    function getBurnRequestsLength() external view returns (uint length) {\r\n        return burnRequests.length;\r\n    }\r\n\r\n    function getTimestamp() internal view returns (uint) {\r\n        // timestamp is only used for data maintaining purpose, it is not relied on for critical logic.\r\n        return block.timestamp; // solhint-disable-line not-rely-on-time\r\n    }\r\n\r\n    function getPendingMintRequest(bytes32 requestHash) internal view returns (uint nonce, Request memory request) {\r\n        require(requestHash != 0, \u0022request hash is 0\u0022);\r\n        nonce = mintRequestNonce[requestHash];\r\n        request = mintRequests[nonce];\r\n        validatePendingRequest(request, requestHash);\r\n    }\r\n\r\n    function getPendingBurnRequest(bytes32 requestHash) internal view returns (uint nonce, Request memory request) {\r\n        require(requestHash != 0, \u0022request hash is 0\u0022);\r\n        nonce = burnRequestNonce[requestHash];\r\n        request = burnRequests[nonce];\r\n        validatePendingRequest(request, requestHash);\r\n    }\r\n\r\n    function validatePendingRequest(Request memory request, bytes32 requestHash) internal pure {\r\n        require(request.status == RequestStatus.PENDING, \u0022request is not pending\u0022);\r\n        require(requestHash == calcRequestHash(request), \u0022given request hash does not match a pending request\u0022);\r\n    }\r\n\r\n    function calcRequestHash(Request request) internal pure returns (bytes32) {\r\n        return keccak256(abi.encode(\r\n            request.requester,\r\n            request.amount,\r\n            request.depositAddress,\r\n            request.txid,\r\n            request.nonce,\r\n            request.timestamp\r\n        ));\r\n    }\r\n\r\n    function compareStrings (string a, string b) internal pure returns (bool) {\r\n        return (keccak256(abi.encodePacked(a)) == keccak256(abi.encodePacked(b)));\r\n    }\r\n\r\n    function isEmptyString (string a) internal pure returns (bool) {\r\n        return (compareStrings(a, \u0022\u0022));\r\n    }\r\n\r\n    function getStatusString(RequestStatus status) internal pure returns (string) {\r\n        if (status == RequestStatus.PENDING) {\r\n            return \u0022pending\u0022;\r\n        } else if (status == RequestStatus.CANCELED) {\r\n            return \u0022canceled\u0022;\r\n        } else if (status == RequestStatus.APPROVED) {\r\n            return \u0022approved\u0022;\r\n        } else if (status == RequestStatus.REJECTED) {\r\n            return \u0022rejected\u0022;\r\n        } else {\r\n            // this fallback can never be reached.\r\n            return \u0022unknown\u0022;\r\n        }\r\n    }\r\n}","ABI":"[{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022custodianDepositAddress\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_token\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022reclaimToken\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022requestHash\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022confirmMintRequest\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022getMintRequestsLength\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022length\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022depositAddress\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022name\u0022:\u0022setMerchantDepositAddress\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022mintRequests\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022requester\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022depositAddress\u0022,\u0022type\u0022:\u0022string\u0022},{\u0022name\u0022:\u0022txid\u0022,\u0022type\u0022:\u0022string\u0022},{\u0022name\u0022:\u0022nonce\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022timestamp\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022status\u0022,\u0022type\u0022:\u0022uint8\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022burn\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022claimOwnership\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022merchantDepositAddress\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022burnRequests\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022requester\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022depositAddress\u0022,\u0022type\u0022:\u0022string\u0022},{\u0022name\u0022:\u0022txid\u0022,\u0022type\u0022:\u0022string\u0022},{\u0022name\u0022:\u0022nonce\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022timestamp\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022status\u0022,\u0022type\u0022:\u0022uint8\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022renounceOwnership\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022getBurnRequestsLength\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022length\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022merchant\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022depositAddress\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022name\u0022:\u0022setCustodianDepositAddress\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022requestHash\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022rejectMintRequest\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022owner\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022txid\u0022,\u0022type\u0022:\u0022string\u0022},{\u0022name\u0022:\u0022depositAddress\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022name\u0022:\u0022addMintRequest\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022requestHash\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022name\u0022:\u0022txid\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022name\u0022:\u0022confirmBurnRequest\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022mintRequestNonce\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022nonce\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022getMintRequest\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022requestNonce\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022requester\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022depositAddress\u0022,\u0022type\u0022:\u0022string\u0022},{\u0022name\u0022:\u0022txid\u0022,\u0022type\u0022:\u0022string\u0022},{\u0022name\u0022:\u0022timestamp\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022status\u0022,\u0022type\u0022:\u0022string\u0022},{\u0022name\u0022:\u0022requestHash\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022requestHash\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022cancelMintRequest\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022burnRequestNonce\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022nonce\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022getBurnRequest\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022requestNonce\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022requester\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022depositAddress\u0022,\u0022type\u0022:\u0022string\u0022},{\u0022name\u0022:\u0022txid\u0022,\u0022type\u0022:\u0022string\u0022},{\u0022name\u0022:\u0022timestamp\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022status\u0022,\u0022type\u0022:\u0022string\u0022},{\u0022name\u0022:\u0022requestHash\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022pendingOwner\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022transferOwnership\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022controller\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[{\u0022name\u0022:\u0022_controller\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022constructor\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022merchant\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022sender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022depositAddress\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022name\u0022:\u0022CustodianDepositAddressSet\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022merchant\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022depositAddress\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022name\u0022:\u0022MerchantDepositAddressSet\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022nonce\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022requester\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022depositAddress\u0022,\u0022type\u0022:\u0022string\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022txid\u0022,\u0022type\u0022:\u0022string\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022timestamp\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022requestHash\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022MintRequestAdd\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022nonce\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022requester\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022requestHash\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022MintRequestCancel\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022nonce\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022requester\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022depositAddress\u0022,\u0022type\u0022:\u0022string\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022txid\u0022,\u0022type\u0022:\u0022string\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022timestamp\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022requestHash\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022MintConfirmed\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022nonce\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022requester\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022depositAddress\u0022,\u0022type\u0022:\u0022string\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022txid\u0022,\u0022type\u0022:\u0022string\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022timestamp\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022requestHash\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022MintRejected\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022nonce\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022requester\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022depositAddress\u0022,\u0022type\u0022:\u0022string\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022timestamp\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022requestHash\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022Burned\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022nonce\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022requester\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022depositAddress\u0022,\u0022type\u0022:\u0022string\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022txid\u0022,\u0022type\u0022:\u0022string\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022timestamp\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022inputRequestHash\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022BurnConfirmed\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022previousOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022OwnershipRenounced\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022previousOwner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022OwnershipTransferred\u0022,\u0022type\u0022:\u0022event\u0022}]","ContractName":"Factory","CompilerVersion":"v0.4.24\u002Bcommit.e67f0147","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000004bd22737812e4412879aacf0b400131e1ee0a4a5","Library":"","SwarmSource":"bzzr://40e57875c22cf7219c20234e6f86eee10de53c065b42356e13e7a2776a938c4b"}]