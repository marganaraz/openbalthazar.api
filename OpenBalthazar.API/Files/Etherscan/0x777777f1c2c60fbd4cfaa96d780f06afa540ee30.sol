[{"SourceCode":"pragma solidity ^0.5.16;\r\n\r\n/*\r\n    Marketing plan cube, works on VOMER technology, terms of service\r\n    1 line 50%\r\n    2 line 20%\r\n    bonus marketing up to 12 lines of 1%.\r\n    rules 1 connection opens 1 line additionally.\r\n    12/12/12\r\n*/\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060\u002B\u0060 operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a \u002B b;\r\n        require(c \u003E= a, \u0022SafeMath: addition overflow\u0022);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060-\u0060 operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b \u003C= a, \u0022SafeMath: subtraction overflow\u0022);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060*\u0060 operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\r\n        // benefit is lost if \u0027b\u0027 is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \u0022SafeMath: multiplication overflow\u0022);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060/\u0060 operator. Note: this function uses a\r\n     * \u0060revert\u0060 opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b \u003E 0, \u0022SafeMath: division by zero\u0022);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c \u002B a % b); // There is no case in which this doesn\u0027t hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060%\u0060 operator. This function uses a \u0060revert\u0060\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \u0022SafeMath: modulo by zero\u0022);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract ERC20 {\r\n    uint public decimals;\r\n    function allowance(address, address) public view returns (uint);\r\n    function balanceOf(address) public view returns (uint);\r\n    function approve(address, uint) public;\r\n    function transfer(address, uint) public returns (bool);\r\n    function transferFrom(address, address, uint) public returns (bool);\r\n}\r\n\r\n/**\r\n * @dev Collection of functions related to the address type,\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if \u0060account\u0060 is a contract.\r\n     *\r\n     * This test is non-exhaustive, and there may be false-negatives: during the\r\n     * execution of a contract\u0027s constructor, its address will be reported as\r\n     * not containing a contract.\r\n     *\r\n     * \u003E It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies in extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size \u003E 0;\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a \u0060using SafeERC20 for ERC20;\u0060 statement to your contract,\r\n * which allows you to call the safe operations as \u0060token.safeTransfer(...)\u0060, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    \r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(ERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(ERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // \u0027safeIncreaseAllowance\u0027 and \u0027safeDecreaseAllowance\u0027\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \u0022SafeERC20: approve from non-zero to non-zero allowance\u0022\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(ERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(ERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(ERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity\u0027s return data size checking mechanism, since\r\n        // we\u0027re implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(address(token).isContract(), \u0022SafeERC20: call to non-contract\u0022);\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \u0022SafeERC20: low-level call failed\u0022);\r\n\r\n        if (returndata.length \u003E 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \u0022SafeERC20: ERC20 operation did not succeed\u0022);\r\n        }\r\n    }\r\n}\r\n\r\nlibrary UniversalERC20 {\r\n\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for ERC20;\r\n\r\n    ERC20 private constant ZERO_ADDRESS = ERC20(0x0000000000000000000000000000000000000000);\r\n    ERC20 private constant ETH_ADDRESS = ERC20(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\r\n\r\n    function universalTransfer(ERC20 token, address to, uint256 amount) internal {\r\n        universalTransfer(token, to, amount, false);\r\n    }\r\n\r\n    function universalTransfer(ERC20 token, address to, uint256 amount, bool mayFail) internal returns(bool) {\r\n        if (amount == 0) {\r\n            return true;\r\n        }\r\n\r\n        if (token == ZERO_ADDRESS || token == ETH_ADDRESS) {\r\n            if (mayFail) {\r\n                return address(uint160(to)).send(amount);\r\n            } else {\r\n                address(uint160(to)).transfer(amount);\r\n                return true;\r\n            }\r\n        } else {\r\n            token.safeTransfer(to, amount);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    function universalApprove(ERC20 token, address to, uint256 amount) internal {\r\n        if (token != ZERO_ADDRESS \u0026\u0026 token != ETH_ADDRESS) {\r\n            token.safeApprove(to, amount);\r\n        }\r\n    }\r\n\r\n    function universalTransferFrom(ERC20 token, address from, address to, uint256 amount) internal {\r\n        if (amount == 0) {\r\n            return;\r\n        }\r\n\r\n        if (token == ZERO_ADDRESS || token == ETH_ADDRESS) {\r\n            require(from == msg.sender \u0026\u0026 msg.value \u003E= amount, \u0022msg.value is zero\u0022);\r\n            if (to != address(this)) {\r\n                address(uint160(to)).transfer(amount);\r\n            }\r\n            if (msg.value \u003E amount) {\r\n                msg.sender.transfer(uint256(msg.value).sub(amount));\r\n            }\r\n        } else {\r\n            token.safeTransferFrom(from, to, amount);\r\n        }\r\n    }\r\n\r\n    function universalBalanceOf(ERC20 token, address who) internal view returns (uint256) {\r\n        if (token == ZERO_ADDRESS || token == ETH_ADDRESS) {\r\n            return who.balance;\r\n        } else {\r\n            return token.balanceOf(who);\r\n        }\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n    address payable public owner = msg.sender;\r\n    address payable public newOwnerCandidate;\r\n    \r\n    modifier onlyOwner()\r\n    {\r\n        assert(msg.sender == owner);\r\n        _;\r\n    }\r\n    \r\n    function changeOwnerCandidate(address payable newOwner) public onlyOwner {\r\n        newOwnerCandidate = newOwner;\r\n    }\r\n    \r\n    function acceptOwner() public {\r\n        require(msg.sender == newOwnerCandidate);\r\n        owner = newOwnerCandidate;\r\n    }\r\n}\r\n\r\ncontract Cube is Ownable\r\n{\r\n    using SafeMath for uint256;\r\n    using UniversalERC20 for ERC20;\r\n    \r\n    uint256 minAmountOfEthToBeEffectiveRefferal = 0.25 ether;\r\n    \r\n    function changeMinAmountOfEthToBeEffectiveRefferal(uint256 minAmount) onlyOwner public {\r\n        minAmountOfEthToBeEffectiveRefferal = minAmount;\r\n    }\r\n    \r\n    // Withdraw and lock funds\r\n    uint256 public fundsLockedtoWithdraw;\r\n    uint256 public dateUntilFundsLocked;\r\n    \r\n    function lockFunds(uint256 amount) public onlyOwner {\r\n        // funds lock is active\r\n        if (dateUntilFundsLocked \u003E now) {\r\n            require(amount \u003E fundsLockedtoWithdraw);\r\n        }\r\n        fundsLockedtoWithdraw = amount;\r\n        dateUntilFundsLocked = now \u002B 30 days;\r\n    }\r\n    \r\n    function bytesToAddress(bytes memory bys) private pure returns (address payable addr) {\r\n        assembly {\r\n          addr := mload(add(bys,20))\r\n        } \r\n    }\r\n    \r\n    ERC20 private constant ZERO_ADDRESS = ERC20(0x0000000000000000000000000000000000000000);\r\n    ERC20 private constant ETH_ADDRESS = ERC20(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\r\n    \r\n    // function for transfer any token from contract\r\n    function transferTokens(ERC20 token, address target, uint256 amount) onlyOwner public\r\n    {\r\n        if (target == address(0x0)) target = owner;\r\n        \r\n        if (token == ZERO_ADDRESS || token == ETH_ADDRESS) {\r\n            if (dateUntilFundsLocked \u003E now) require(address(this).balance.sub(amount) \u003E fundsLockedtoWithdraw);\r\n        }\r\n        ERC20(token).universalTransfer(target, amount);\r\n    }\r\n    \r\n\r\n    mapping(address =\u003E address) refList;\r\n    \r\n    struct UserData {\r\n        uint256 invested;    \r\n        uint256[12] pendingReward;\r\n        uint256 receivedReward;\r\n        uint128 refUserCount;\r\n        uint128 effectiveRefUserCount;\r\n        uint256 createdAt;\r\n        bool partnerRewardActivated;\r\n    }\r\n    mapping(address =\u003E UserData) users;\r\n    \r\n    function getRefByUser(address addr) view public returns (address) {\r\n        return refList[addr];\r\n    }\r\n    \r\n    function getUserInfo(address addr) view public returns (uint256 invested, uint256[12] memory pendingReward, uint256 receivedReward, uint256 refUserCount, uint128 effectiveRefUserCount, uint256 createdAt, bool partnerRewardActivated) {\r\n        invested = users[addr].invested;\r\n        pendingReward = users[addr].pendingReward;\r\n        receivedReward = users[addr].receivedReward;\r\n        refUserCount = users[addr].refUserCount;\r\n        effectiveRefUserCount = users[addr].effectiveRefUserCount;\r\n        createdAt = users[addr].createdAt;\r\n        partnerRewardActivated = users[addr].partnerRewardActivated;\r\n    }\r\n    \r\n    function getLevelReward(uint8 level) pure internal returns(uint256 rewardLevel, uint128 minUsersRequired) {\r\n        if (level == 0) \r\n            return (50, 0); \r\n        else if (level == 1)\r\n            return (20, 0); \r\n        else if (level \u003C 12)\r\n            return (1, level);\r\n        else             \r\n            return (0,0);\r\n    }\r\n    \r\n    event Reward(address indexed userAddress, uint256 amount);\r\n    \r\n    function withdrawReward() public {\r\n        UserData storage user = users[msg.sender];\r\n        address payable userAddress = msg.sender;\r\n        \r\n        require(user.invested \u003E= minAmountOfEthToBeEffectiveRefferal);\r\n        \r\n        uint256 reward = 0;\r\n        \r\n        bool isUserUnactive = ((user.createdAt \u003E 0 \u0026\u0026 (block.timestamp - user.createdAt) \u003E= 365 days) \u0026\u0026 (user.effectiveRefUserCount \u003C 12));\r\n        \r\n        for(uint8 i = 0; i \u003C 12;i\u002B\u002B) {\r\n            // user can\u0027t get reward after level 2\r\n            if (i \u003E= 2 \u0026\u0026 isUserUnactive) break;\r\n            \r\n            uint128 minUsersRequired;\r\n            (, minUsersRequired) = getLevelReward(i);\r\n            \r\n            if (user.effectiveRefUserCount \u003E= minUsersRequired) {\r\n                if (user.pendingReward[i] \u003E 0) {\r\n                    reward = reward.add(user.pendingReward[i]);\r\n                    user.pendingReward[i] = 0;\r\n                }\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n                    \r\n        emit Reward(msg.sender, reward);\r\n        user.receivedReward = user.receivedReward.add(reward);\r\n        userAddress.transfer(reward);\r\n    }\r\n    \r\n    function isUnactiveUser(UserData memory user ) view internal returns (bool) {\r\n        return  (user.createdAt \u003E 0 \u0026\u0026 (block.timestamp - user.createdAt) \u003E= 365 days) \u0026\u0026 (user.effectiveRefUserCount \u003C 12);\r\n    }\r\n    \r\n    address payable addressSupportProject = 0x598f9A85483641F0A4c18d02cC1210f4C81eF1e0;\r\n    address payable addressAdv = 0xbcA88515dBE20fa9F8FAB6718e8C1A40C876Cfd4;\r\n    address payable addressRes = 0x2b192b50AfE554023A71762101e3aF044783Bf10;\r\n    \r\n    function () payable external\r\n    {\r\n        assert(msg.sender == tx.origin); // prevent bots to interact with contract\r\n        \r\n        if (msg.sender == owner) return; \r\n        \r\n        if (msg.value == 0) {\r\n            withdrawReward();\r\n            return;\r\n        }\r\n        \r\n        require(msg.value \u003E= 0.01 ether); \r\n        \r\n        address payable ref;\r\n        if (refList[msg.sender] != address(0))\r\n        {\r\n            ref = address(uint160(refList[msg.sender]));\r\n        } else {\r\n            require(msg.data.length == 20);\r\n            ref = bytesToAddress(msg.data);\r\n            assert(ref != msg.sender);\r\n        \r\n            refList[msg.sender] = ref;\r\n        }\r\n        \r\n        \r\n        uint256 ethAmountRest = msg.value;\r\n        \r\n        UserData storage user = users[msg.sender];\r\n        \r\n        // \u0435\u0441\u043B\u0438 \u043D\u043E\u0432\u044B\u0439 \u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u0435\u043B\u044C - \u0443\u0432\u0435\u043B\u0438\u0447\u0438\u0432\u0430\u0435\u043C \u0443 \u043F\u0430\u0440\u0442\u043D\u0451\u0440\u0430 \u043A\u043E\u043B-\u0432\u043E \u043F\u0440\u0438\u0432\u043B\u0435\u0447\u0451\u043D\u043D\u044B\u0445 \u043B\u044E\u0434\u0435\u0439\r\n        bool isNewUser = user.createdAt == 0;\r\n        if (isNewUser)  {\r\n            users[ref].refUserCount\u002B\u002B;\r\n            user.createdAt = block.timestamp;\r\n        }\r\n        \r\n        user.invested = user.invested.add(msg.value);\r\n        if (!user.partnerRewardActivated \u0026\u0026 user.invested \u003E minAmountOfEthToBeEffectiveRefferal) {\r\n            user.partnerRewardActivated = true;\r\n            users[ref].effectiveRefUserCount\u002B\u002B;\r\n        }\r\n        \r\n        \r\n        for(uint8 i = 0;i \u003C 12;i\u002B\u002B) {\r\n            uint256 rewardAmount;\r\n            uint128 minUsersRequired;\r\n            (rewardAmount, minUsersRequired) = getLevelReward(i);\r\n            \r\n            uint256 rewardForRef = msg.value * rewardAmount / 100;\r\n            ethAmountRest = ethAmountRest.sub(rewardForRef);\r\n\r\n            users[ref].pendingReward[minUsersRequired] \u002B= rewardForRef;    \r\n            \r\n            ref = address(uint160(refList[address(ref)]));\r\n            if (ref == address(0)) break;\r\n        }\r\n        \r\n        addressSupportProject.transfer(ethAmountRest * 5 / 100);\r\n        addressAdv.transfer(ethAmountRest * 5 / 100);\r\n        addressRes.transfer(ethAmountRest * 10 / 100);\r\n    }\r\n}","ABI":"[{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022userAddress\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022Reward\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022payable\u0022:true,\u0022stateMutability\u0022:\u0022payable\u0022,\u0022type\u0022:\u0022fallback\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022acceptOwner\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022minAmount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022changeMinAmountOfEthToBeEffectiveRefferal\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address payable\u0022,\u0022name\u0022:\u0022newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022changeOwnerCandidate\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022dateUntilFundsLocked\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022fundsLockedtoWithdraw\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022addr\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022getRefByUser\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022addr\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022getUserInfo\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022invested\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256[12]\u0022,\u0022name\u0022:\u0022pendingReward\u0022,\u0022type\u0022:\u0022uint256[12]\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022receivedReward\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022refUserCount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint128\u0022,\u0022name\u0022:\u0022effectiveRefUserCount\u0022,\u0022type\u0022:\u0022uint128\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022createdAt\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022partnerRewardActivated\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022lockFunds\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022newOwnerCandidate\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022address payable\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022owner\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022address payable\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022contract ERC20\u0022,\u0022name\u0022:\u0022token\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022target\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022transferTokens\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022withdrawReward\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022}]","ContractName":"Cube","CompilerVersion":"v0.5.16\u002Bcommit.9c3226ce","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://5be074f2ca963a62766a10e2d8cd6a21ac9aa75f916efbb69a0bc044f5a10d70"}]