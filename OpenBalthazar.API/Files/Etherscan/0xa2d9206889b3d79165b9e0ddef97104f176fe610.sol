[{"SourceCode":"/*\r\n\r\n***The Shuffle Raffle***\r\n\r\nhttps://shuffle-raffle.com/\r\n\r\nThe shuffle raffle is a game built on top of the Shuffle Monster token (https://shuffle.monster/).\r\nPlayers can buy tickets with SHUF tokens. Each week a winner is randomly picked. \r\n\r\n*/\r\n\r\npragma solidity ^0.5.8;\r\n\r\ncontract ERC20Token {\r\n  function totalSupply() public view returns(uint);\r\n  function balanceOf(address tokenOwner) public view returns(uint balance);\r\n  function allowance(address tokenOwner, address spender) public view returns(uint remaining);\r\n  function transfer(address to, uint tokens) public returns(bool success);\r\n  function approve(address spender, uint tokens) public returns(bool success);\r\n  function transferFrom(address from, address to, uint tokens) public returns(bool success);\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a \u002B b;\r\n        require(c \u003E= a, \u0022SafeMath: addition overflow\u0022);\r\n\r\n        return c;\r\n    }\r\n    \r\n     function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \u0022SafeMath: subtraction overflow\u0022);\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b \u003C= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \u0022SafeMath: multiplication overflow\u0022);\r\n\r\n        return c;\r\n    }\r\n\r\n     function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \u0022SafeMath: division by zero\u0022);\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b \u003E 0, errorMessage);\r\n        uint256 c = a / b;\r\n \r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() public {\r\n      owner = msg.sender;\r\n    }\r\n    \r\n    modifier onlyOwner() {\r\n      require(msg.sender == owner);\r\n      _;\r\n    }\r\n    \r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n      require(newOwner != address(0));\r\n      emit OwnershipTransferred(owner, newOwner);\r\n      owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract ShuffleRaffle is Ownable {\r\n    using SafeMath for uint256;\r\n    \r\n    struct Order {\r\n        uint48 position;\r\n        uint48 size;\r\n        address owner;\r\n    }\r\n    \r\n    mapping(uint256 =\u003E Order[]) TicketBook;\r\n    ERC20Token public shuf = ERC20Token(0x3A9FfF453d50D4Ac52A6890647b823379ba36B9E);\r\n    uint256 public RaffleNo = 1;\r\n    uint256 public TicketPrice = 5*10**18;\r\n    uint256 public PickerReward = 5*10**18;\r\n    uint256 public minTickets = 9;\r\n    uint256 public nextTicketPrice = 5*10**18;\r\n    uint256 public nextPickerReward = 5*10**18;\r\n    uint256 public nextminTickets = 9;\r\n    uint256 public NextRaffle = 1574197200;\r\n    uint256 public random_seed = 0;\r\n    bool    public raffle_closed = false;\r\n\r\n    event Ticket(uint256 raffle, address indexed addr, uint256 amount);\r\n    event Winner(uint256 raffle, address indexed addr, uint256 amount, uint256 win_ticket);\r\n    event RaffleClosed(uint256 raffle, uint256 block_number);\r\n    event TicketPriceChanged(uint256 previousticketprice, uint256 newticketprice);\r\n    event PickerRewardChanged(uint256 previouspickerReward, uint256 newpickerreward);\r\n    event minTicketsChanged(uint256 previousminTickets,uint256 newmintickets);\r\n\r\n    function TicketsOfAddress(address addr) public view returns (uint256 total_tickets) {\r\n        uint256 _tt=0;\r\n        for(uint256 i = 0; i\u003CTicketBook[RaffleNo].length; i\u002B\u002B){\r\n            if (TicketBook[RaffleNo][i].owner == addr)\r\n                _tt=_tt.add(TicketBook[RaffleNo][i].size);\r\n        }\r\n        return _tt;\r\n    }\r\n\r\n    function Stats() public view returns (uint256 raffle_number, uint48 total_tickets, uint256 balance, uint256 next_raffle, uint256 ticket_price, bool must_pick_winner, uint256 picker_reward, uint256 min_tickets,uint256 next_ticket_price,uint256 next_picker_reward,uint256 next_min_tickets, bool is_raffle_closed){\r\n        bool mustPickWinner;\r\n        uint48 TotalTickets= _find_curr_position();\r\n        if (now\u003ENextRaffle \u0026\u0026 TotalTickets\u003EminTickets)\r\n            mustPickWinner = true;\r\n        else\r\n            mustPickWinner = false;\r\n        return (RaffleNo, TotalTickets, shuf.balanceOf(address(this)), NextRaffle, TicketPrice, mustPickWinner, PickerReward, minTickets, nextTicketPrice, nextPickerReward, nextminTickets, raffle_closed);\r\n    }\r\n    \r\n    function BuyTicket(uint48 tickets) external returns(bool success){\r\n        uint256 bill = uint256(tickets).mul(TicketPrice);\r\n        uint48 TotalTickets= _find_curr_position();\r\n        require(tickets\u003E0);\r\n        require(shuf.allowance(msg.sender, address(this))\u003E=bill, \u0022Contract not approved\u0022);\r\n        require(shuf.balanceOf(msg.sender)\u003E=bill , \u0022Not enough SHUF balance.\u0022);\r\n        if (now\u003ENextRaffle){\r\n            //requires to pick a winner or extends duration if not enough participants\r\n            require(TotalTickets\u003C=minTickets,\u0022A winner has to be picked first\u0022);\r\n            NextRaffle = NextRaffle.add((((now.sub(NextRaffle)).div(60)).add(1)).mul(60));\r\n        }\r\n        shuf.transferFrom(msg.sender, address(this), bill);\r\n\r\n        Order memory t;\r\n        t.size=tickets;\r\n        t.owner=msg.sender;\r\n        t.position=TotalTickets\u002Btickets;\r\n        require(t.position\u003E=TotalTickets);\r\n        TicketBook[RaffleNo].push(t);\r\n        \r\n        emit Ticket(RaffleNo, msg.sender, tickets);\r\n        return true;\r\n    }\r\n    \r\n   \r\n    function pickWinner() external returns(bool success) {\r\n        require(now\u003ENextRaffle, \u0022It\u0027s not time to pick a winner yet\u0022);\r\n        uint256 Totaltickets =_find_curr_position(); \r\n        require(Totaltickets\u003EminTickets,  \u0022Not enough tickets to pick a winner\u0022);\r\n        \r\n        //Close the Raffle\r\n        if (raffle_closed == false){\r\n            raffle_closed = true;\r\n            random_seed = block.number;\r\n            emit RaffleClosed(RaffleNo, random_seed);\r\n            shuf.transfer(msg.sender, PickerReward);\r\n            return true;\r\n        }\r\n\r\n        uint256 winningticket = _random(Totaltickets);\r\n        address winner = _find_winner(winningticket);\r\n     \r\n        //reward caller\r\n        shuf.transfer(msg.sender, PickerReward);\r\n    \r\n        //reward winner \r\n        uint256 reward = shuf.balanceOf(address(this));\r\n        shuf.transfer(winner,reward);\r\n        emit Winner(RaffleNo, winner, reward, winningticket);\r\n        \r\n        //reset Raffle\r\n        RaffleNo=RaffleNo.add(1);\r\n        NextRaffle = NextRaffle.add((((now.sub(NextRaffle)).div(5 days \u002B 12 hours)).add(1)).mul(5 days \u002B 12 hours));\r\n        raffle_closed = false;\r\n        \r\n        //check for changes\r\n        if(nextTicketPrice!=TicketPrice){\r\n            uint256 oldticketPrice=TicketPrice;\r\n            TicketPrice = nextTicketPrice;\r\n            emit TicketPriceChanged(oldticketPrice, TicketPrice);\r\n        }\r\n        if(nextPickerReward!=PickerReward){\r\n            uint256 oldpickerReward=PickerReward;\r\n            PickerReward = nextPickerReward;\r\n            emit PickerRewardChanged(oldpickerReward, PickerReward);\r\n        }\r\n        if(nextminTickets!=minTickets){\r\n            uint256 oldminTickets=minTickets;\r\n            minTickets = nextminTickets;\r\n            emit minTicketsChanged(oldminTickets, minTickets);\r\n        }\r\n        \r\n        return true;\r\n    }\r\n    \r\n    function _find_curr_position() internal view returns(uint48 curr_position){\r\n        uint256 TotalOrders= TicketBook[RaffleNo].length;\r\n        uint48 Totaltickets=(TotalOrders\u003E0)?TicketBook[RaffleNo][TotalOrders.sub(1)].position:0;\r\n        return Totaltickets;\r\n    }\r\n    \r\n     function _find_winner(uint256 winning_ticket)  internal view returns(address winner){\r\n    //search for the winner using binary search\r\n        uint256 L=0;\r\n        uint256 R=TicketBook[RaffleNo].length.sub(1);\r\n        uint256 raffleno=RaffleNo;\r\n        \r\n        while(L \u003C= R){\r\n            uint256 m = (L.add(R)).div(2);\r\n            Order memory Am = TicketBook[raffleno][m];\r\n            if(Am.position\u003Cwinning_ticket)\r\n                L=m.add(1);\r\n            else if(Am.position-Am.size\u003E=winning_ticket)\r\n                R=m.sub(1);\r\n            else\r\n                return Am.owner;\r\n        }\r\n        return address(this);\r\n    }\r\n    \r\n    function setTicketPrice(uint256 newticketprice) external onlyOwner {\r\n        nextTicketPrice= newticketprice;\r\n    }\r\n    \r\n    function setPickerReward(uint256 newpickerreward) external onlyOwner {\r\n        nextPickerReward = newpickerreward;\r\n    }\r\n    \r\n    function setminTickets(uint256 newmintickets) external onlyOwner {\r\n        nextminTickets = newmintickets;\r\n    }\r\n  \r\n    function _random(uint256 Totaltickets) internal view returns (uint256) {\r\n        return uint256(uint256(keccak256(abi.encodePacked(blockhash(random_seed), RaffleNo)))%Totaltickets).add(1);\r\n    }\r\n}","ABI":"[{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022nextminTickets\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022newticketprice\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022setTicketPrice\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022nextTicketPrice\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022newmintickets\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022setminTickets\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022TicketPrice\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022RaffleNo\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022pickWinner\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022success\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022NextRaffle\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022nextPickerReward\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022owner\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022random_seed\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022Stats\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022raffle_number\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022total_tickets\u0022,\u0022type\u0022:\u0022uint48\u0022},{\u0022name\u0022:\u0022balance\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022next_raffle\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022ticket_price\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022must_pick_winner\u0022,\u0022type\u0022:\u0022bool\u0022},{\u0022name\u0022:\u0022picker_reward\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022min_tickets\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022next_ticket_price\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022next_picker_reward\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022next_min_tickets\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022is_raffle_closed\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022addr\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022TicketsOfAddress\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022total_tickets\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022PickerReward\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022newpickerreward\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022setPickerReward\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022shuf\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022raffle_closed\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022minTickets\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022tickets\u0022,\u0022type\u0022:\u0022uint48\u0022}],\u0022name\u0022:\u0022BuyTicket\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022success\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022transferOwnership\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022raffle\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022addr\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022Ticket\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022raffle\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022addr\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022win_ticket\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022Winner\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022raffle\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022block_number\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022RaffleClosed\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022previousticketprice\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022newticketprice\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022TicketPriceChanged\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022previouspickerReward\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022newpickerreward\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022PickerRewardChanged\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022previousminTickets\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022newmintickets\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022minTicketsChanged\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022previousOwner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022OwnershipTransferred\u0022,\u0022type\u0022:\u0022event\u0022}]","ContractName":"ShuffleRaffle","CompilerVersion":"v0.5.8\u002Bcommit.23d335f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://aec6d4c1d5e4fb91ead8d0d73a719ccad1166fb0bfe652065f87353a7bf954f5"}]