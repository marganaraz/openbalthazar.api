[{"SourceCode":"// median.sol - Medianizer v2\r\n\r\n// Copyright (C) 2019 Maker Foundation\r\n\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n\r\n// You should have received a copy of the GNU General Public License\r\n// along with this program. If not, see \u003Chttp://www.gnu.org/licenses/\u003E.\r\n\r\npragma solidity \u003E=0.5.10;\r\n\r\ncontract LibNote {\r\n    event LogNote(\r\n        bytes4   indexed  sig,\r\n        address  indexed  usr,\r\n        bytes32  indexed  arg1,\r\n        bytes32  indexed  arg2,\r\n        bytes             data\r\n    ) anonymous;\r\n\r\n    modifier note {\r\n        _;\r\n        assembly {\r\n            // log an \u0027anonymous\u0027 event with a constant 6 words of calldata\r\n            // and four indexed topics: selector, caller, arg1 and arg2\r\n            let mark := msize                         // end of memory ensures zero\r\n            mstore(0x40, add(mark, 288))              // update free memory pointer\r\n            mstore(mark, 0x20)                        // bytes type data offset\r\n            mstore(add(mark, 0x20), 224)              // bytes size (padded)\r\n            calldatacopy(add(mark, 0x40), 0, 224)     // bytes payload\r\n            log4(mark, 288,                           // calldata\r\n                 shl(224, shr(224, calldataload(0))), // msg.sig\r\n                 caller,                              // msg.sender\r\n                 calldataload(4),                     // arg1\r\n                 calldataload(36)                     // arg2\r\n                )\r\n        }\r\n    }\r\n}\r\n\r\ncontract Median is LibNote {\r\n\r\n    // --- Auth ---\r\n    mapping (address =\u003E uint) public wards;\r\n    function rely(address usr) external note auth { wards[usr] = 1; }\r\n    function deny(address usr) external note auth { wards[usr] = 0; }\r\n    modifier auth {\r\n        require(wards[msg.sender] == 1, \u0022Median/not-authorized\u0022);\r\n        _;\r\n    }\r\n\r\n    uint128        val;\r\n    uint32  public age;\r\n    bytes32 public constant wat = \u0022ethusd\u0022; // You want to change this every deploy\r\n    uint256 public bar = 1;\r\n\r\n    // Authorized oracles, set by an auth\r\n    mapping (address =\u003E uint256) public orcl;\r\n\r\n    // Whitelisted contracts, set by an auth\r\n    mapping (address =\u003E uint256) public bud;\r\n\r\n    // Mapping for at most 256 oracles\r\n    mapping (uint8 =\u003E address) public slot;\r\n\r\n    modifier toll { require(bud[msg.sender] == 1, \u0022Median/contract-not-whitelisted\u0022); _;}\r\n\r\n    event LogMedianPrice(uint256 val, uint256 age);\r\n\r\n    //Set type of Oracle\r\n    constructor() public {\r\n        wards[msg.sender] = 1;\r\n    }\r\n\r\n    function read() external view toll returns (uint256) {\r\n        require(val \u003E 0, \u0022Median/invalid-price-feed\u0022);\r\n        return val;\r\n    }\r\n\r\n    function peek() external view toll returns (uint256,bool) {\r\n        return (val, val \u003E 0);\r\n    }\r\n\r\n    function recover(uint256 val_, uint256 age_, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\r\n        return ecrecover(\r\n            keccak256(abi.encodePacked(\u0022\\x19Ethereum Signed Message:\\n32\u0022, keccak256(abi.encodePacked(val_, age_, wat)))),\r\n            v, r, s\r\n        );\r\n    }\r\n\r\n    function poke(\r\n        uint256[] calldata val_, uint256[] calldata age_,\r\n        uint8[] calldata v, bytes32[] calldata r, bytes32[] calldata s) external\r\n    {\r\n        require(val_.length == bar, \u0022Median/bar-too-low\u0022);\r\n\r\n        uint256 bloom = 0;\r\n        uint256 last = 0;\r\n        uint256 zzz = age;\r\n\r\n        for (uint i = 0; i \u003C val_.length; i\u002B\u002B) {\r\n            // Validate the values were signed by an authorized oracle\r\n            address signer = recover(val_[i], age_[i], v[i], r[i], s[i]);\r\n            // Check that signer is an oracle\r\n            require(orcl[signer] == 1, \u0022Median/invalid-oracle\u0022);\r\n            // Price feed age greater than last medianizer age\r\n            require(age_[i] \u003E zzz, \u0022Median/stale-message\u0022);\r\n            // Check for ordered values\r\n            require(val_[i] \u003E= last, \u0022Median/messages-not-in-order\u0022);\r\n            last = val_[i];\r\n            // Bloom filter for signer uniqueness\r\n            uint8 sl = uint8(uint256(signer) \u003E\u003E 152);\r\n            require((bloom \u003E\u003E sl) % 2 == 0, \u0022Median/oracle-already-signed\u0022);\r\n            bloom \u002B= uint256(2) ** sl;\r\n        }\r\n\r\n        val = uint128(val_[val_.length \u003E\u003E 1]);\r\n        age = uint32(block.timestamp);\r\n\r\n        emit LogMedianPrice(val, age);\r\n    }\r\n\r\n    function lift(address[] calldata a) external note auth {\r\n        for (uint i = 0; i \u003C a.length; i\u002B\u002B) {\r\n            require(a[i] != address(0), \u0022Median/no-oracle-0\u0022);\r\n            uint8 s = uint8(uint256(a[i]) \u003E\u003E 152);\r\n            require(slot[s] == address(0), \u0022Median/signer-already-exists\u0022);\r\n            orcl[a[i]] = 1;\r\n            slot[s] = a[i];\r\n        }\r\n    }\r\n\r\n    function drop(address[] calldata a) external note auth {\r\n       for (uint i = 0; i \u003C a.length; i\u002B\u002B) {\r\n            orcl[a[i]] = 0;\r\n            slot[uint8(uint256(a[i]) \u003E\u003E 152)] = address(0);\r\n       }\r\n    }\r\n\r\n    function setBar(uint256 bar_) external note auth {\r\n        require(bar_ \u003E 0, \u0022Median/quorum-is-zero\u0022);\r\n        require(bar_ % 2 != 0, \u0022Median/quorum-not-odd-number\u0022);\r\n        bar = bar_;\r\n    }\r\n\r\n    function kiss(address a) external note auth {\r\n        require(a != address(0), \u0022Median/no-contract-0\u0022);\r\n        bud[a] = 1;\r\n    }\r\n\r\n    function diss(address a) external note auth {\r\n        bud[a] = 0;\r\n    }\r\n\r\n    function kiss(address[] calldata a) external note auth {\r\n        for(uint i = 0; i \u003C a.length; i\u002B\u002B) {\r\n            require(a[i] != address(0), \u0022Median/no-contract-0\u0022);\r\n            bud[a[i]] = 1;\r\n        }\r\n    }\r\n\r\n    function diss(address[] calldata a) external note auth {\r\n        for(uint i = 0; i \u003C a.length; i\u002B\u002B) {\r\n            bud[a[i]] = 0;\r\n        }\r\n    }\r\n}\r\n\r\ncontract MedianBTCUSD is Median {\r\n    bytes32 public constant wat = \u0022BTCUSD\u0022;\r\n\r\n    function recover(uint256 val_, uint256 age_, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\r\n        return ecrecover(\r\n            keccak256(abi.encodePacked(\u0022\\x19Ethereum Signed Message:\\n32\u0022, keccak256(abi.encodePacked(val_, age_, wat)))),\r\n            v, r, s\r\n        );\r\n    }\r\n}","ABI":"[{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022val\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022age\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022LogMedianPrice\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:true,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022bytes4\u0022,\u0022name\u0022:\u0022sig\u0022,\u0022type\u0022:\u0022bytes4\u0022},{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022usr\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022arg1\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022arg2\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022bytes\u0022,\u0022name\u0022:\u0022data\u0022,\u0022type\u0022:\u0022bytes\u0022}],\u0022name\u0022:\u0022LogNote\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022age\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint32\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint32\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022bar\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022bud\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022usr\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022deny\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address[]\u0022,\u0022name\u0022:\u0022a\u0022,\u0022type\u0022:\u0022address[]\u0022}],\u0022name\u0022:\u0022diss\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022a\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022diss\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address[]\u0022,\u0022name\u0022:\u0022a\u0022,\u0022type\u0022:\u0022address[]\u0022}],\u0022name\u0022:\u0022drop\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address[]\u0022,\u0022name\u0022:\u0022a\u0022,\u0022type\u0022:\u0022address[]\u0022}],\u0022name\u0022:\u0022kiss\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022a\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022kiss\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address[]\u0022,\u0022name\u0022:\u0022a\u0022,\u0022type\u0022:\u0022address[]\u0022}],\u0022name\u0022:\u0022lift\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022orcl\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022peek\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256[]\u0022,\u0022name\u0022:\u0022val_\u0022,\u0022type\u0022:\u0022uint256[]\u0022},{\u0022internalType\u0022:\u0022uint256[]\u0022,\u0022name\u0022:\u0022age_\u0022,\u0022type\u0022:\u0022uint256[]\u0022},{\u0022internalType\u0022:\u0022uint8[]\u0022,\u0022name\u0022:\u0022v\u0022,\u0022type\u0022:\u0022uint8[]\u0022},{\u0022internalType\u0022:\u0022bytes32[]\u0022,\u0022name\u0022:\u0022r\u0022,\u0022type\u0022:\u0022bytes32[]\u0022},{\u0022internalType\u0022:\u0022bytes32[]\u0022,\u0022name\u0022:\u0022s\u0022,\u0022type\u0022:\u0022bytes32[]\u0022}],\u0022name\u0022:\u0022poke\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022read\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022usr\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022rely\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022bar_\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022setBar\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint8\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint8\u0022}],\u0022name\u0022:\u0022slot\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022wards\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022wat\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022}]","ContractName":"MedianBTCUSD","CompilerVersion":"v0.5.12\u002Bcommit.7709ece9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://b141a67fbdef09d9275138eaeb0a7ad503039036dbb75f01d592a203d0518d13"}]