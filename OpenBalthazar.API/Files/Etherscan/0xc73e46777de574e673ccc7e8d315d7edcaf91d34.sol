[{"SourceCode":"// File: contracts/IERC20.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ninterface IERC20 {\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  function balanceOf(address who) external view returns (uint256);\r\n\r\n  function allowance(address owner, address spender)\r\n    external view returns (uint256);\r\n\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n\r\n  function approve(address spender, uint256 value)\r\n    external returns (bool);\r\n\r\n  function transferFrom(address from, address to, uint256 value)\r\n    external returns (bool);\r\n\r\n  event Transfer(\r\n    address indexed from,\r\n    address indexed to,\r\n    uint256 value\r\n  );\r\n\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 value\r\n  );\r\n}\r\n\r\n// File: contracts/SafeMath.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, reverts on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\r\n    // benefit is lost if \u0027b\u0027 is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b \u003E 0); // Solidity only automatically asserts when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c \u002B a % b); // There is no case in which this doesn\u0027t hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b \u003C= a);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, reverts on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a \u002B b;\r\n    require(c \u003E= a);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n  * reverts when dividing by zero.\r\n  */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}\r\n\r\n// File: contracts/XDCSHARESStandard.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n/**\r\n * @title XDCSHARESStandard\r\n * @dev the interface of XDCSHARESStandard\r\n */\r\n \r\ncontract XDCSHARESStandard {\r\n    uint256 public stakeStartTime;\r\n    uint256 public stakeMinAge;\r\n    uint256 public stakeMaxAge;\r\n    function mint() public returns (bool);\r\n    function coinAge() constant public returns (uint256);\r\n    function annualInterest() constant public returns (uint256);\r\n    event Mint(address indexed _address, uint _reward);\r\n}\r\n\r\n// File: contracts/Ownable.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \u0022user permissions\u0022.\r\n */\r\ncontract Ownable {\r\naddress private _owner;\r\n\r\n\r\nevent OwnershipRenounced(address indexed previousOwner);\r\nevent OwnershipTransferred(\r\n  address indexed previousOwner,\r\n  address indexed newOwner\r\n);\r\n\r\n\r\n/**\r\n  * @dev The Ownable constructor sets the original \u0060owner\u0060 of the contract to the sender\r\n  * account.\r\n  */\r\nconstructor() public {\r\n  _owner = msg.sender;\r\n}\r\n\r\n/**\r\n  * @return the address of the owner.\r\n  */\r\nfunction owner() public view returns(address) {\r\n  return _owner;\r\n}\r\n\r\n/**\r\n  * @dev Throws if called by any account other than the owner.\r\n  */\r\nmodifier onlyOwner() {\r\n  require(isOwner());\r\n  _;\r\n}\r\n\r\n/**\r\n  * @return true if \u0060msg.sender\u0060 is the owner of the contract.\r\n  */\r\nfunction isOwner() public view returns(bool) {\r\n  return msg.sender == _owner;\r\n}\r\n\r\n/**\r\n  * @dev Allows the current owner to relinquish control of the contract.\r\n  * @notice Renouncing to ownership will leave the contract without an owner.\r\n  * It will not be possible to call the functions with the \u0060onlyOwner\u0060\r\n  * modifier anymore.\r\n  */\r\nfunction renounceOwnership() public onlyOwner {\r\n  emit OwnershipRenounced(_owner);\r\n  _owner = address(0);\r\n}\r\n\r\n/**\r\n  * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n  * @param newOwner The address to transfer ownership to.\r\n  */\r\nfunction transferOwnership(address newOwner) public onlyOwner {\r\n  _transferOwnership(newOwner);\r\n}\r\n\r\n/**\r\n  * @dev Transfers control of the contract to a newOwner.\r\n  * @param newOwner The address to transfer ownership to.\r\n  */\r\nfunction _transferOwnership(address newOwner) internal {\r\n  require(newOwner != address(0));\r\n  emit OwnershipTransferred(_owner, newOwner);\r\n  _owner = newOwner;\r\n}\r\n}\r\n\r\n// File: contracts/XDCSHARES.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract XDCSHARES is IERC20, XDCSHARESStandard, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    string public name = \u0022XDCSHARES\u0022;\r\n    string public symbol = \u0022XDC\u0022;\r\n    uint public decimals = 18;\r\n\r\n    uint public chainStartTime; //chain start time\r\n    uint public chainStartBlockNumber; //chain start block number\r\n    uint public stakeStartTime; //stake start time\r\n    uint public stakeMinAge = 1 days; // minimum age for coin age: 1D\r\n    uint public stakeMaxAge = 180 days; // stake age of full weight: 180D\r\n\r\n    uint public totalSupply;\r\n    uint public maxTotalSupply;\r\n    uint public totalInitialSupply;\r\n\r\n    uint constant MIN_STAKING = 1;  // minium amount of token to stake\r\n    uint constant STAKE_START_TIME = 1576108800;  // 12.12.2019\r\n    uint constant STEP1_ENDTIME = 1591833600;  //  11.06.2020\r\n    uint constant STEP2_ENDTIME = 1607731200;  // 12.12.2020\r\n    uint constant STEP3_ENDTIME = 1623369600;  // 11.06.2021\r\n    uint constant STEP4_ENDTIME = 1639267200; // 12.12.2021\r\n    uint constant STEP5_ENDTIME = 1923264000; // 12.12.2050\r\n\r\n    struct Period {\r\n        uint start;\r\n        uint end;\r\n        uint interest;\r\n    }\r\n\r\n    mapping (uint =\u003E Period) periods;\r\n\r\n    mapping(address =\u003E bool) public noPOSRewards;\r\n\r\n    struct transferInStruct {\r\n        uint128 amount;\r\n        uint64 time;\r\n    }\r\n\r\n    mapping(address =\u003E uint256) balances;\r\n    mapping(address =\u003E mapping (address =\u003E uint256)) allowed;\r\n    mapping(address =\u003E transferInStruct[]) transferIns;\r\n\r\n    event Burn(address indexed burner, uint256 value);\r\n\r\n    /**\r\n     * @dev Fix for the ERC20 short address attack.\r\n     */\r\n    modifier onlyPayloadSize(uint size) {\r\n        require(msg.data.length \u003E= size \u002B 4);\r\n        _;\r\n    }\r\n\r\n    modifier canPoSMint() {\r\n        require(totalSupply \u003C maxTotalSupply);\r\n        _;\r\n    }\r\n\r\n    constructor() public {\r\n        // 50 mil is reserved for POS rewards\r\n        maxTotalSupply = 1500 * 10**23; // 150 Mil.\r\n        totalInitialSupply = 1000 * 10**23; // 100 Mil.\r\n\r\n        chainStartTime = now;\r\n        chainStartBlockNumber = block.number;\r\n\r\n        balances[msg.sender] = totalInitialSupply;\r\n        totalSupply = totalInitialSupply;\r\n\r\n        // 4 periods for 2 years\r\n        stakeStartTime = 1576108800;\r\n        \r\n        periods[0] = Period(STAKE_START_TIME, STEP1_ENDTIME, 65 * 10 ** 18);\r\n        periods[1] = Period(STEP1_ENDTIME, STEP2_ENDTIME, 34 * 10 ** 18);\r\n        periods[2] = Period(STEP2_ENDTIME, STEP3_ENDTIME, 20 * 10 ** 18);\r\n        periods[3] = Period(STEP3_ENDTIME, STEP4_ENDTIME, 134 * 10 ** 16);\r\n        periods[4] = Period(STEP4_ENDTIME, STEP5_ENDTIME, 134 * 10 ** 16);\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) onlyPayloadSize(2 * 32) public returns (bool) {\r\n        if (msg.sender == _to)\r\n            return mint();\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        emit Transfer(msg.sender, _to, _value);\r\n        if (transferIns[msg.sender].length \u003E 0)\r\n            delete transferIns[msg.sender];\r\n        uint64 _now = uint64(now);\r\n        transferIns[msg.sender].push(transferInStruct(uint128(balances[msg.sender]),_now));\r\n        transferIns[_to].push(transferInStruct(uint128(_value),_now));\r\n        return true;\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return totalSupply;\r\n    }\r\n\r\n    function balanceOf(address _owner) constant public returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) onlyPayloadSize(3 * 32) public returns (bool) {\r\n        require(_to != address(0));\r\n\r\n        uint256 _allowance = allowed[_from][msg.sender];\r\n\r\n        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\r\n        // require (_value \u003C= _allowance);\r\n\r\n        balances[_from] = balances[_from].sub(_value);\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = _allowance.sub(_value);\r\n        emit Transfer(_from, _to, _value);\r\n        if (transferIns[_from].length \u003E 0)\r\n            delete transferIns[_from];\r\n        uint64 _now = uint64(now);\r\n        transferIns[_from].push(transferInStruct(uint128(balances[_from]),_now));\r\n        transferIns[_to].push(transferInStruct(uint128(_value),_now));\r\n        return true;\r\n    }\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\r\n\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) constant public returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n    function mint() canPoSMint public returns (bool) {\r\n        // minimum stake of 1 MYR is required to earn staking.\r\n        if (balances[msg.sender] \u003C MIN_STAKING.mul(1 ether))\r\n            return false;\r\n        if (transferIns[msg.sender].length \u003C= 0)\r\n            return false;\r\n\r\n        uint reward = getProofOfStakeReward(msg.sender);\r\n        if (reward \u003C= 0)\r\n            return false;\r\n       \r\n        totalSupply = totalSupply.add(reward);\r\n        balances[msg.sender] = balances[msg.sender].add(reward);\r\n        delete transferIns[msg.sender];\r\n        transferIns[msg.sender].push(transferInStruct(uint128(balances[msg.sender]),uint64(now)));\r\n\r\n        emit Transfer(address(0), msg.sender, reward);\r\n        emit Mint(msg.sender, reward);\r\n        return true;\r\n    }\r\n\r\n    function getBlockNumber() view public returns (uint blockNumber) {\r\n        blockNumber = block.number.sub(chainStartBlockNumber);\r\n    }\r\n\r\n    function coinAge() constant public returns (uint myCoinAge) {\r\n        myCoinAge = getCoinAge(msg.sender,now);\r\n    }\r\n\r\n    function annualInterest() constant public returns (uint interest) {        \r\n        uint _now = now;\r\n        interest = periods[getPeriodNumber(_now)].interest;\r\n    }\r\n\r\n    function getProofOfStakeReward(address _address) public view returns (uint totalReward) {\r\n        require((now \u003E= stakeStartTime) \u0026\u0026 (stakeStartTime \u003E 0));\r\n        require(!noPOSRewards[_address]);\r\n\r\n        uint _now = now;\r\n\r\n        totalReward = 0;\r\n        for (uint i=0; i \u003C getPeriodNumber(_now) \u002B 1; i \u002B\u002B) {\r\n            totalReward \u002B= (getCoinAgeofPeriod(_address, i, _now)).mul(periods[i].interest).div(100).div(365);\r\n        }\r\n    }\r\n\r\n    function getPeriodNumber(uint _now) public view returns (uint periodNumber) {\r\n        for (uint i = 4; i \u003E= 0; i --) {\r\n            if( _now \u003E= periods[i].start){\r\n                return i;\r\n            }\r\n        }\r\n    }\r\n\r\n    function getCoinAgeofPeriod(address _address, uint _pid, uint _now) public view returns (uint _coinAge) {        \r\n        if (transferIns[_address].length \u003C= 0)\r\n            return 0;\r\n\r\n        if (_pid \u003C 0 || _pid \u003E 4)\r\n            return 0;\r\n\r\n        _coinAge = 0;\r\n        uint nCoinSeconds;\r\n        uint i;\r\n\r\n        if (periods[_pid].start \u003C _now \u0026\u0026 \r\n            periods[_pid].end \u003E= _now) {\r\n            // calculate the current period\r\n            for (i = 0; i \u003C transferIns[_address].length; i \u002B\u002B) {\r\n                if (uint(periods[_pid].start) \u003E uint(transferIns[_address][i].time) || \r\n                    uint(periods[_pid].end) \u003C= uint(transferIns[_address][i].time))\r\n                    continue;\r\n                \r\n                nCoinSeconds = _now.sub(uint(transferIns[_address][i].time));\r\n                \r\n                if (nCoinSeconds \u003C stakeMinAge)\r\n                    continue;\r\n\r\n                if ( nCoinSeconds \u003E stakeMaxAge )\r\n                    nCoinSeconds = stakeMaxAge;    \r\n                \r\n                nCoinSeconds = nCoinSeconds.sub(stakeMinAge);\r\n                _coinAge = _coinAge.add(uint(transferIns[_address][i].amount) * nCoinSeconds.div(1 days));\r\n            }\r\n\r\n        }else{\r\n            // calculate for the ended preriods which user did not claimed\r\n            for (i = 0; i \u003C transferIns[_address].length; i\u002B\u002B) {\r\n                if (uint(periods[_pid].start) \u003E uint(transferIns[_address][i].time) || \r\n                    uint(periods[_pid].end) \u003C= uint(transferIns[_address][i].time))\r\n                    continue;\r\n\r\n                nCoinSeconds = (uint(periods[_pid].end)).sub(uint(transferIns[_address][i].time));\r\n                \r\n                if (nCoinSeconds \u003C stakeMinAge)\r\n                    continue;\r\n\r\n                if ( nCoinSeconds \u003E stakeMaxAge )\r\n                    nCoinSeconds = stakeMaxAge;\r\n\r\n                nCoinSeconds = nCoinSeconds.sub(stakeMinAge);\r\n                _coinAge = _coinAge.add(uint(transferIns[_address][i].amount) * nCoinSeconds.div(1 days));\r\n            }\r\n        }\r\n\r\n        _coinAge = _coinAge.div(1 ether);\r\n    }\r\n\r\n\r\n    function getCoinAge(address _address, uint _now) internal view returns (uint _coinAge) {\r\n        if (transferIns[_address].length \u003C= 0)\r\n            return 0;\r\n\r\n        for (uint i = 0; i \u003C transferIns[_address].length; i\u002B\u002B) {\r\n            if (_now \u003C uint(transferIns[_address][i].time).add(stakeMinAge))\r\n                continue;\r\n\r\n            uint nCoinSeconds = _now.sub(uint(transferIns[_address][i].time));\r\n            if ( nCoinSeconds \u003E stakeMaxAge )\r\n                nCoinSeconds = stakeMaxAge;\r\n            \r\n            nCoinSeconds = nCoinSeconds.sub(stakeMinAge);\r\n            _coinAge = _coinAge.add(uint(transferIns[_address][i].amount) * nCoinSeconds.div(1 days));\r\n        }\r\n        _coinAge = _coinAge.div(1 ether);\r\n        // return _coinAge;\r\n    }\r\n\r\n    // function ownerSetStakeStartTime(uint timestamp) onlyOwner public {\r\n    //     require((stakeStartTime \u003C= 0) \u0026\u0026 (timestamp \u003E= chainStartTime));\r\n    //     //stakeStartTime = timestamp;\r\n    //     stakeStartTime = 1537228800\r\n    // }\r\n\r\n    function burn(uint256 _value) public {\r\n        require(_value \u003C= balances[msg.sender]);\r\n        // no need to require value \u003C= totalSupply, since that would imply the\r\n        // sender\u0027s balance is greater than the totalSupply, which *should* be an assertion failure\r\n\r\n        address burner = msg.sender;\r\n        balances[burner] = balances[burner].sub(_value);\r\n        delete transferIns[msg.sender];\r\n        transferIns[msg.sender].push(transferInStruct(uint128(balances[msg.sender]),uint64(now)));\r\n        totalSupply = totalSupply.sub(_value);\r\n        emit Burn(burner, _value);\r\n    }\r\n\r\n    /**\r\n    * @dev Burns a specific amount of tokens.\r\n    * @param _value The amount of token to be burned.\r\n    */\r\n    function ownerBurnToken(uint _value) public onlyOwner {\r\n        require(_value \u003E 0);\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        delete transferIns[msg.sender];\r\n        transferIns[msg.sender].push(transferInStruct(uint128(balances[msg.sender]),uint64(now)));\r\n\r\n        totalSupply = totalSupply.sub(_value);\r\n        totalInitialSupply = totalInitialSupply.sub(_value);\r\n        maxTotalSupply = maxTotalSupply.sub(_value*10);\r\n\r\n        emit Burn(msg.sender, _value);\r\n    }\r\n\r\n    /* Batch token transfer. Used by contract creator to distribute initial tokens to holders */\r\n    function batchTransfer(address[] _recipients, uint[] _values) onlyOwner public returns (bool) {\r\n        require(_recipients.length \u003E 0 \u0026\u0026 _recipients.length == _values.length);\r\n\r\n        uint total = 0;\r\n        for (uint i = 0; i \u003C _values.length; i\u002B\u002B) {\r\n            total = total.add(_values[i]);\r\n        }\r\n        require(total \u003C= balances[msg.sender]);\r\n\r\n        uint64 _now = uint64(now);\r\n        for (uint j = 0; j \u003C _recipients.length; j\u002B\u002B) {\r\n            balances[_recipients[j]] = balances[_recipients[j]].add(_values[j]);\r\n            transferIns[_recipients[j]].push(transferInStruct(uint128(_values[j]),_now));\r\n            emit Transfer(msg.sender, _recipients[j], _values[j]);\r\n        }\r\n\r\n        balances[msg.sender] = balances[msg.sender].sub(total);\r\n        if (transferIns[msg.sender].length \u003E 0)\r\n            delete transferIns[msg.sender];\r\n        if (balances[msg.sender] \u003E 0)\r\n            transferIns[msg.sender].push(transferInStruct(uint128(balances[msg.sender]),_now));\r\n\r\n        return true;\r\n    }\r\n\r\n    function disablePOSReward(address _account, bool _enabled) onlyOwner public {\r\n        noPOSRewards[_account] = _enabled;\r\n    }\r\n}","ABI":"[{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_now\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022getPeriodNumber\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022periodNumber\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022name\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_spender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022approve\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_address\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022getProofOfStakeReward\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022totalReward\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_account\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_enabled\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022name\u0022:\u0022disablePOSReward\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022mint\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022totalSupply\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022coinAge\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022myCoinAge\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_from\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022transferFrom\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022maxTotalSupply\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022decimals\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022burn\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022getBlockNumber\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022blockNumber\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022chainStartTime\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_owner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022balanceOf\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022balance\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022renounceOwnership\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022stakeStartTime\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_recipients\u0022,\u0022type\u0022:\u0022address[]\u0022},{\u0022name\u0022:\u0022_values\u0022,\u0022type\u0022:\u0022uint256[]\u0022}],\u0022name\u0022:\u0022batchTransfer\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022owner\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022isOwner\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022ownerBurnToken\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022symbol\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022totalInitialSupply\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022transfer\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022annualInterest\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022interest\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_address\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_pid\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_now\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022getCoinAgeofPeriod\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022_coinAge\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022noPOSRewards\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022stakeMinAge\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022chainStartBlockNumber\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_owner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_spender\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022allowance\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022remaining\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022stakeMaxAge\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022transferOwnership\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022constructor\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022burner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022Burn\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022previousOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022OwnershipRenounced\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022previousOwner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022OwnershipTransferred\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022_address\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022_reward\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022Mint\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022from\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022Transfer\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022owner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022spender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022Approval\u0022,\u0022type\u0022:\u0022event\u0022}]","ContractName":"XDCSHARES","CompilerVersion":"v0.4.24\u002Bcommit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://bb12e9621d1516eecb16e49021eed9005eab8773405999d3388532f82c440ea3"}]