[{"SourceCode":"pragma solidity ^0.4.23;\r\n\r\ncontract IERC223Token {\r\n    function name() public view returns (string);\r\n    function symbol() public view returns (string);\r\n    function decimals() public view returns (uint8);\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address _holder) public view returns (uint256);\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n    function transfer(address _to, uint _value, bytes _data) public returns (bool success);\r\n    function transfer(address _to, uint _value, bytes _data, string _custom_fallback) public returns (bool success);\r\n    \r\n    event Transfer(address indexed _from, address indexed _to, uint _value, bytes _data);\r\n}\r\n\r\ncontract IERC223Receiver {\r\n  \r\n   /**\r\n * @dev Standard ERC223 function that will handle incoming token transfers.\r\n *\r\n * @param _from  Token sender address.\r\n * @param _value Amount of tokens.\r\n * @param _data  Transaction metadata.\r\n */\r\n    function tokenFallback(address _from, uint _value, bytes _data) public returns(bool);\r\n}\r\n\r\ncontract IOwned {\r\n    // this function isn\u0027t abstract since the compiler emits automatically generated getter functions as external\r\n    function owner() public pure returns (address) {}\r\n\r\n    event OwnerUpdate(address _prevOwner, address _newOwner);\r\n\r\n    function transferOwnership(address _newOwner) public;\r\n    function acceptOwnership() public;\r\n}\r\n\r\ncontract ICalled is IOwned {\r\n    // this function isn\u0027t abstract since the compiler emits automatically generated getter functions as external\r\n    function callers(address) public pure returns (bool) { }\r\n\r\n    function appendCaller(address _caller) public;  // ownerOnly\r\n    function removeCaller(address _caller) public;  // ownerOnly\r\n    \r\n    event AppendCaller(ICaller _caller);\r\n    event RemoveCaller(ICaller _caller);\r\n}\r\n\r\ncontract ICaller{\r\n\tfunction calledUpdate(address _oldCalled, address _newCalled) public;  // ownerOnly\r\n\t\r\n\tevent CalledUpdate(address _oldCalled, address _newCalled);\r\n}\r\n\r\ncontract IERC20Token {\r\n    function name() public view returns (string);\r\n    function symbol() public view returns (string);\r\n    function decimals() public view returns (uint8);\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address _holder) public view returns (uint256);\r\n    function allowance(address _from, address _spender) public view returns (uint256);\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool success);\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\r\n    function approve(address _spender, uint256 _value) public returns (bool success);\r\n    \r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(address indexed _holder, address indexed _spender, uint256 _value);\r\n}\r\n\r\ncontract IDummyToken is IERC20Token, IERC223Token, IERC223Receiver, ICaller, IOwned{\r\n    // these function isn\u0027t abstract since the compiler emits automatically generated getter functions as external\r\n    function operator() public pure returns(ITokenOperator) {}\r\n    //ITokenOperator public operator;\r\n}\r\n\r\ncontract ISmartToken{\r\n    function disableTransfers(bool _disable) public;\r\n    function issue(address _to, uint256 _amount) public;\r\n    function destroy(address _from, uint256 _amount) public;\r\n\t//function() public payable;\r\n}\r\n\r\ncontract ITokenOperator is ISmartToken, ICalled, ICaller {\r\n    // this function isn\u0027t abstract since the compiler emits automatically generated getter functions as external\r\n    function dummy() public pure returns (IDummyToken) {}\r\n    \r\n\tfunction emitEventTransfer(address _from, address _to, uint256 _amount) public;\r\n\r\n    function updateChanges(address) public;\r\n    function updateChangesByBrother(address, uint256, uint256) public;\r\n    \r\n    function token_name() public view returns (string);\r\n    function token_symbol() public view returns (string);\r\n    function token_decimals() public view returns (uint8);\r\n    \r\n    function token_totalSupply() public view returns (uint256);\r\n    function token_balanceOf(address _owner) public view returns (uint256);\r\n    function token_allowance(address _from, address _spender) public view returns (uint256);\r\n\r\n    function token_transfer(address _from, address _to, uint256 _value) public returns (bool success);\r\n    function token_transfer(address _from, address _to, uint _value, bytes _data) public returns (bool success);\r\n    function token_transfer(address _from, address _to, uint _value, bytes _data, string _custom_fallback) public returns (bool success);\r\n    function token_transferFrom(address _spender, address _from, address _to, uint256 _value) public returns (bool success);\r\n    function token_approve(address _from, address _spender, uint256 _value) public returns (bool success);\r\n    \r\n    function fallback(address _from, bytes _data) public payable;                      \t\t// eth input\r\n    function token_fallback(address _token, address _from, uint _value, bytes _data) public returns(bool);    // token input from IERC233\r\n}\r\n\r\ncontract IsContract {\r\n\t//assemble the given address bytecode. If bytecode exists then the _addr is a contract.\r\n    function isContract(address _addr) internal view returns (bool is_contract) {\r\n        uint length;\r\n        assembly {\r\n              //retrieve the size of the code on target address, this needs assembly\r\n              length := extcodesize(_addr)\r\n        }\r\n        return (length\u003E0);\r\n    }\r\n}\r\n\r\ncontract Owned is IOwned {\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    /**\r\n        @dev constructor\r\n    */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    // allows execution by the owner only\r\n    modifier ownerOnly {\r\n        assert(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n        @dev allows transferring the contract ownership\r\n        the new owner still needs to accept the transfer\r\n        can only be called by the contract owner\r\n\r\n        @param _newOwner    new contract owner\r\n    */\r\n    function transferOwnership(address _newOwner) public ownerOnly {\r\n        require(_newOwner != owner);\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    /**\r\n        @dev used by a new owner to accept an ownership transfer\r\n    */\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        emit OwnerUpdate(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0x0);\r\n    }\r\n}\r\n\r\ncontract Constant {\r\n\tbytes32 internal constant _$FM_\t\t\t\t\t\t\t= \u0022$FM\u0022;\r\n\tbytes32 internal constant _$FM2_\t\t\t\t\t\t= \u0022$FM2\u0022;\r\n\tbytes32 internal constant _$FI_\t\t\t\t\t\t\t= \u0022$FI\u0022;\r\n\tbytes32 internal constant _$FO_\t\t\t\t\t\t\t= \u0022$FO\u0022;\r\n\tbytes32 internal constant _$FD_\t\t\t\t\t\t\t= \u0022$FD\u0022;\r\n\tbytes32 internal constant _$FD2_\t\t\t\t\t\t= \u0022$FD2\u0022;\r\n\tbytes32 internal constant _$F_\t\t\t\t\t\t\t= \u0022$F\u0022;\r\n\tbytes32 internal constant _$F2R_\t\t\t\t\t\t= \u0022$F2R\u0022;\r\n\tbytes32 internal constant _$FR_\t\t\t\t\t\t\t= \u0022$FR\u0022;\r\n\tbytes32 internal constant _ETHER_\t\t\t\t\t\t= \u0022ETHER\u0022;//EtherToken will be registered to Data in XCoin.js =\u003E registerContract\r\n\tbytes32 internal constant _Eventer_\t\t\t\t\t\t= \u0022Eventer\u0022;//Eventer will be registered to Data in XCoin.js =\u003E registerContract\r\n\t\r\n\tbytes32 internal constant _$FOD_\t\t\t\t\t\t= \u0022$FOD\u0022;\r\n\tbytes32 internal constant _totalSupply_\t\t\t\t\t= \u0022totalSupply\u0022;\r\n\tbytes32 internal constant _balanceOf_\t\t\t\t\t= \u0022balanceOf\u0022;\r\n\tbytes32 internal constant _lastTime_\t\t\t\t\t= \u0022lastTime\u0022;\r\n\tbytes32 internal constant _factorDrawLots_\t\t\t\t= \u0022factorDrawLots\u0022;\r\n\tbytes32 internal constant _eraDrawLots_\t\t\t\t\t= \u0022eraDrawLots\u0022;\r\n\t//bytes32 internal constant _drawLots_\t\t\t\t\t= \u0022drawLots\u0022;\r\n\t\r\n\tbytes32 internal constant _weightIssue_\t\t\t\t\t= \u0022weightIssue\u0022;\r\n\tbytes32 internal constant _privatePlacing_\t\t\t\t= \u0022privatePlacing\u0022;\r\n\tbytes32 internal constant _priceInit_\t\t\t\t\t= \u0022priceInit\u0022;\r\n\tbytes32 internal constant _softCap_\t\t\t\t\t\t= \u0022softCap\u0022;\r\n\tbytes32 internal constant _ratioGiftMax_\t\t\t\t= \u0022ratioGiftMax\u0022;\r\n\tbytes32 internal constant _weightOfReserve_\t\t\t\t= \u0022weightOfReserve\u0022;\r\n\tbytes32 internal constant _weightOfTarget_\t\t\t\t= \u0022weightOfTarget\u0022;\r\n\tbytes32 internal constant _decelerationRatioDividend_\t= \u0022decelerationRatioDividend\u0022;\r\n\tbytes32 internal constant _ratioDividend_\t\t\t\t= \u0022ratioDividend\u0022;\r\n\tbytes32 internal constant _investmentSF_\t\t\t\t= \u0022investmentSF\u0022;\r\n\tbytes32 internal constant _investmentEth_\t\t\t\t= \u0022investmentEth\u0022;\r\n\tbytes32 internal constant _profitSF_\t\t\t\t\t= \u0022profitSF\u0022;\r\n\tbytes32 internal constant _profitEth_\t\t\t\t\t= \u0022profitEth\u0022;\r\n\tbytes32 internal constant _returnSF_\t\t\t\t\t= \u0022returnSF\u0022;\r\n\tbytes32 internal constant _returnEth_\t\t\t\t\t= \u0022returnEth\u0022;\r\n\tbytes32 internal constant _emaDailyYieldSF_\t\t\t\t= \u0022emaDailyYieldSF\u0022;\r\n\tbytes32 internal constant _emaDailyYield_\t\t\t\t= \u0022emaDailyYield\u0022;\r\n\tbytes32 internal constant _timeLastMiningSF_\t\t\t= \u0022timeLastMiningSF\u0022;\r\n\tbytes32 internal constant _timeLastMining_\t\t\t\t= \u0022timeLastMining\u0022;\r\n\tbytes32 internal constant _factorMining_\t\t\t\t= \u0022factorMining\u0022;\r\n\tbytes32 internal constant _projectStatus_\t\t\t\t= \u0022projectStatus\u0022;\r\n\tbytes32 internal constant _projectAddr_\t\t\t\t\t= \u0022projectAddr\u0022;\r\n\tbytes32 internal constant _projectID_\t\t\t\t\t= \u0022projectID\u0022;\r\n\tbytes32 internal constant _proposeID_\t\t\t\t\t= \u0022proposeID\u0022;\r\n\tbytes32 internal constant _disproposeID_\t\t\t\t= \u0022disproposeID\u0022;\r\n\tbytes32 internal constant _projects_\t\t\t\t\t= \u0022projects\u0022;\r\n\tbytes32 internal constant _projectsVoting_\t\t\t\t= \u0022projectsVoting\u0022;\r\n\tbytes32 internal constant _thresholdPropose_\t\t\t= \u0022thresholdPropose\u0022;\r\n\tbytes32 internal constant _divisorAbsent_\t\t\t\t= \u0022divisorAbsent\u0022;\r\n\tbytes32 internal constant _timePropose_\t\t\t\t\t= \u0022timePropose\u0022;\r\n\tbytes32 internal constant _votes_\t\t\t\t\t\t= \u0022votes\u0022;\r\n\tbytes32 internal constant _factorDividend_\t\t\t\t= \u0022factorDividend\u0022;\r\n\tbytes32 internal constant _projectIdCount_\t\t\t\t= \u0022projectIdCount\u0022;\r\n\tbytes32 internal constant _projectInfo_\t\t\t\t\t= \u0022projectInfo\u0022;\r\n\tbytes32 internal constant _recommenders_\t\t\t\t= \u0022recommenders\u0022;\r\n\tbytes32 internal constant _recommendations_\t\t\t\t= \u0022recommendations\u0022;\r\n\tbytes32 internal constant _rewardRecommend_\t\t\t\t= \u0022rewardRecommend\u0022;\r\n\tbytes32 internal constant _halfRewardBalanceOfRecommender_ = \u0022halfRewardBalanceOfRecommender\u0022;\r\n\tbytes32 internal constant _agents_\t\t\t\t\t\t= \u0022agents\u0022;\r\n\tbytes32 internal constant _factorInvitationOfAgent_\t\t= \u0022factorInvitationOfAgent\u0022;\r\n\tbytes32 internal constant _factorPerformanceOfAgent_\t=\t\u0022factorPerformanceOfAgent\u0022;\r\n\tbytes32 internal constant _performanceOfAgent_\t\t\t= \u0022performanceOfAgent\u0022;\r\n\tbytes32 internal constant _lastPerformanceOfAgent_\t\t= \u0022lastPerformanceOfAgent\u0022;\r\n\t//bytes32 internal constant _invitationOfAgentLock_\t\t= \u0022invitationOfAgentLock\u0022;\r\n\tbytes32 internal constant _invitationOfAgent_\t\t\t= \u0022invitationOfAgent\u0022;\r\n\t//bytes32 internal constant _lockedOfAgent_\t\t\t\t= \u0022lockedOfAgent\u0022;\r\n\tbytes32 internal constant _unlockedOfAgent_\t\t\t\t= \u0022unlockedOfAgent\u0022;\r\n    bytes32 internal constant _agentIssuable_\t\t\t\t= \u0022agentIssuable\u0022;\r\n    bytes32 internal constant _agentThreshold_              = \u0022agentThreshold\u0022;\r\n    bytes32 internal constant _rewardAgent_                 = \u0022rewardAgent\u0022;\r\n\tbytes32 internal constant _$FP_\t\t\t\t\t\t    = \u0022$FP\u0022;\r\n\tbytes32 internal constant _invitation_\t\t\t\t\t= \u0022invitation\u0022;\r\n    bytes32 internal constant _agent_\t\t\t\t\t\t= \u0022agent\u0022;\r\n\tbytes32 internal constant _channel_\t\t\t\t\t    = \u0022channel\u0022;\r\n\tbytes32 internal constant _channels_\t\t\t\t\t= \u0022channels\u0022;\r\n\tbytes32 internal constant _rewardChannel_\t\t\t\t= \u0022rewardChannel\u0022;\r\n\tbytes32 internal constant _rate0DrawLotsOrder_\t\t\t= \u0022rate0DrawLotsOrder\u0022;\r\n\tbytes32 internal constant _thresholdAccelDequeueOrder_\t= \u0022thresholdAccelDequeueOrder\u0022;\r\n\tbytes32 internal constant _periodQuotaOrder_\t\t\t= \u0022periodQuotaOrder\u0022;\r\n\tbytes32 internal constant _project$f_\t\t\t        = \u0022project$f\u0022;\r\n\tbytes32 internal constant _projectEth_\t\t\t        = \u0022projectEth\u0022;\r\n\tbytes32 internal constant _etherAmount_\t\t\t        = \u0022etherAmount\u0022;\r\n\tbytes32 internal constant _Recommend_\t\t\t        = \u0022Recommend\u0022;\r\n\t\r\n\tbytes32 internal constant _Price_\t\t\t\t\t\t= 0xdedeab50b97b0ea258580c72638be71c84db2913f449665c5275cdb7f93c0409;\t//keccak256(\u0022Price(bytes32,uint256,int256,uint256,uint256,uint256,uint256,uint256)\u0022);\t\r\n\t// bytes32 internal constant _Weight_\t\t\t\t\t\t= 0x3656cc39179451c68688a96cd746a26d3368cf97102e851c0c60a0bad65bfaf4;\t//keccak256(\u0022Weight(bytes32,uint256,uint256,uint256,uint256,uint256,uint256,uint256)\u0022);\r\n\t// bytes32 internal constant _WeightIssue_\t\t\t\t\t= 0xee865ae6bcc111b5853d9ac0495880f947e4aebeb181b1a6d904d58299e1cced;\t//keccak256(\u0022WeightIssue(address,address,uint256,uint256,uint256,uint256)\u0022);\r\n\t// bytes32 internal constant _PrivatePlacement_\t\t\t= 0x94eb37bbe0c54785ce84a078083aede618c2abba7d7b271e7b625ddf4d1282ee;\t//keccak256(\u0022PrivatePlacement(address,address,uint256,uint256,uint256)\u0022);\r\n\t// bytes32 internal constant _Propose_\t\t\t\t\t= 0x87ada46c836271e669e6bc9ba0bc9669495237e101c5291363d524bc8fc32568;\t//keccak256(\u0022Propose(address,bytes32,bytes32,address,uint256,uint256)\u0022);\r\n\t// bytes32 internal constant _Dispropose_\t\t\t\t\t= 0xc85e60c2ee8acdaa9f49d4541531b118e86d4018c9c2a0ff7556076a5ff01870;\t//keccak256(\u0022Dispropose(address,bytes32,bytes32)\u0022);\r\n\t// bytes32 internal constant _UpdateProject_\t\t\t\t= 0xa7f00da0cc536d861fb6f017f8234042f6e26699f3cd9103da6895e93c118125;\t//keccak256(\u0022UpdateProject(address,bytes32,address,address)\u0022);\r\n\t// bytes32 internal constant _ReturnProfit_\t\t\t\t= 0xba17bd6ee981e52122b986aa98e10567c311e15b7d6dad085bf94e896ed65e66;\t//keccak256(\u0022ReturnProfit(address,bytes32,uint256,uint256)\u0022);\r\n\t// bytes32 internal constant _ReturnDisinvestment_\t\t\t= 0x95211a7460b6a58c8ba08a59a584a7bf992e651f1c6379ed788ddefc41bee305;\t//keccak256(\u0022ReturnDisinvestment(address,bytes32,uint256,uint256)\u0022);\r\n\t// bytes32 internal constant _RegisterRecommender_\t\t\t= 0xfcb064cbe1c349ea06a55b745fcd262396cc7cdbee9589806d350b65df959bc4;\t//keccak256(\u0022RegisterRecommender(address,bytes32,bool,uint256)\u0022);\r\n\t// bytes32 internal constant _RegisterAgent_\t\t\t\t= 0x2afb1b2d5349ff0163b230509f92d4c12ab9854d4c76bc5f25339e2816a3d48a;\t//keccak256(\u0022RegisterAgent(address,uint256,uint256)\u0022);\r\n\t// bytes32 internal constant _AgentAppend_\t\t\t\t\t= 0x5ac70b7391396d39d0973d5ffa4bd81a1c430996801ef8c5661cc43d348c94c9;\t//keccak256(\u0022AgentAppend(address,uint256,uint256)\u0022);\r\n\t// bytes32 internal constant _AgentLock_\t\t\t\t\t= 0x12bb003ebbc79a167959a883f0e69272f5040dfc75d4b47e59fd84a803bf74a9;\t//keccak256(\u0022AgentLock(address,uint256,uint256)\u0022);\r\n\t// bytes32 internal constant _IssueInvitationOfAgent_\t\t= 0x03ffb74238869c35f07683aa632e0c375c3a24a1c57eb9d4c98c2aa7ec703ff7;\t//keccak256(\u0022IssueInvitationOfAgent(address,uint256)\u0022);\r\n\t// bytes32 internal constant _AgentUnlock_\t\t\t\t\t= 0xe172d5d2fe66445fce354d0d2be616095b5b12adbdb7bef4ebfba1ee9b7f2831;\t//keccak256(\u0022AgentUnlock(address,uint256)\u0022);\r\n\t// bytes32 internal constant _BindRecommender_\t\t\t\t= 0xe4d100017ba2dd1d43322b2387da2814945070a0503d88bf058d454061c44fca;\t//keccak256(\u0022BindRecommender(address,address,bytes32,address)\u0022);\r\n\t// bytes32 internal constant _Transfer_\t\t\t\t\t= 0x5f2147fb558c977441fbdfebcf8cd5776606adc8da5ff95566fc2a4137e54d13;\t//keccak256(\u0022Transfer(address,address,uint256,address)\u0022);\r\n\t// bytes32 internal constant _Dequeue_\t\t\t\t\t= 0x8ed4de10d9e943b936b256947298f9d79289495a4db8b55f9452da76721f0791;\t//keccak256(\u0022Dequeue(address,uint256,address,uint256)\u0022);\r\n\t// bytes32 internal constant _DequeueOrder_\t\t\t\t= 0xcc45326a7be89070b5e24ad2502035f73c92d306b6aab85d5116f3e9538bd9cf;\t//keccak256(\u0022DequeueOrder(address,uint256,uint256)\u0022);\r\n\t// bytes32 internal constant _DequeueIngot_\t\t\t\t= 0xbd1f3a5aca027a47b1833e8de51edf3d32ec6ffce34268ff5d3022f70bde1794;\t//keccak256(\u0022DequeueIngot(address,uint256,uint256)\u0022);\r\n\t// bytes32 internal constant _Vote_\t\t\t\t\t\t= 0xea430f6241d8ab7a4a7da7b9487de059426309628c9c8e7b3e9438f0f431f39e;\t//keccak256(\u0022Vote(address,bytes32,bytes32,uint256)\u0022);\r\n\t// bytes32 internal constant _VoteResult_\t\t\t\t\t= 0xa0de2ad353f45bfcc398ad86d3575629f76b3c353ca88ce789602fb9ae5d207c;\t//keccak256(\u0022VoteResult(bytes32,bytes32,bool,uint256,uint256,uint256)\u0022);\r\n\t// bytes32 internal constant _Config_\t\t\t\t\t\t= 0x4691be92868fa80845b397f0e016905e1b4322422075895b96f9b4a8f1d918cf;\t//keccak256(\u0022Config(bytes32,bytes32,uint256)\u0022);\r\n\t// bytes32 internal constant _Invest_\t\t\t\t\t\t= 0x130d745954fedb61791b614172f696ffb5219aa14649d625534e8ff825bd68cd;\t//keccak256(\u0022Invest(bytes32,address,uint256,uint256)\u0022);\r\n\t// bytes32 internal constant _Disinvest_\t\t\t\t\t= 0x386d6f5f13437a36e2cf423819da85f6dd09bdbc5f4be7e41c0680904b10d7fd;\t//keccak256(\u0022Disinvest(bytes32,address)\u0022);\r\n\t// bytes32 internal constant _DepositEth_\t\t\t\t\t= 0x7034bb05cfe54b0d147fc0574ed166101e7f0313eb404e113974fbe2a998ca83;\t//keccak256(\u0022DepositEth(address,uint256)\u0022);\r\n\t// bytes32 internal constant _WithdrawEth_\t\t\t\t\t= 0xb48511ae3e574699605a84740498056f77d218c60c8d7e0e1dee31b9c90fd745;\t//keccak256(\u0022WithdrawEth(address,address,uint256,bool)\u0022);\r\n\t// bytes32 internal constant _Forging_\t\t\t\t\t= 0x5409965f0a48c519c9ae4c920bd726a7d8ee91475b3d372ac7484ce2989ffc37;\t//keccak256(\u0022Forging(address,uint256)\u0022);\r\n\t// bytes32 internal constant _Purchase_\t\t\t\t\t= 0x3a53f56a211d9f64ed2c86f99e1aa48b4837ed6d63abc0f07ac29d32fe75e230;\t//keccak256(\u0022Purchase(address,bytes32,uint256,bool,bool)\u0022);\r\n\t// bytes32 internal constant _CancelOrder_\t\t\t\t\t= 0xc0e68d6b69f741c21e955cad2ae4d505b6f6735c7e7b278251b3f6283a5f07eb;\t//keccak256(\u0022CancelOrder(address,uint256)\u0022);\r\n\t// bytes32 internal constant _Lock4Dividend_\t\t\t\t= 0xdfd1f12277f9150ae1d758207187dfe823fe860e003119517a71ab60b3d10809;\t//keccak256(\u0022Lock4Dividend(address,uint256)\u0022);\r\n\t// bytes32 internal constant _Unlock4Circulate_\t\t\t= 0x5dd61c8c2501b31d45e1deddbdac925d30d8075094ef1d89588d6353f89a4821;\t//keccak256(\u0022Unlock4Circulate(address,uint256)\u0022);\r\n\t// bytes32 internal constant _Apply4Redeem_\t\t\t\t= 0xb117f62e1089a5c238e5631cb0a8903798ecfe12e1bb415d18856d168f7b70ec;\t//keccak256(\u0022Apply4Redeem(address,uint256)\u0022);\r\n\t// bytes32 internal constant _CancelRedeem_\t\t\t\t= 0x56d7520e387607a8daa892e3fed116badc2a636307bdc794b1c1aed97ae203f4;\t//keccak256(\u0022CancelRedeem(address,uint256)\u0022);\r\n\t// bytes32 internal constant _Redeem_\t\t\t\t\t\t= 0x222838db2794d11532d940e8dec38ae307ed0b63cd97c233322e221f998767a6;\t//keccak256(\u0022Redeem(address,uint256)\u0022);\r\n\tbytes32 internal constant _RecommendPerformance_\t\t= 0xdff59f3289527807a9634eaf83388e1f449e1f0fd75b01141ed33783d13763bb;\t//keccak256(\u0022RecommendPerformance(address,address,bytes32,uint256,uint256)\u0022);\r\n\tbytes32 internal constant _RecommendReward_\t\t\t\t= 0xea4e2775055f2f3a80aed6e1fd67888ab02b8cdd276b2983ac96b18965c864ca;\t//keccak256(\u0022RecommendReward(address,address,bytes32,uint256,uint256,uint256)\u0022);\r\n\r\n    //uint256 internal constant PROJECT_STATUS_PROPOSING\t\t= uint256(bytes32(\u0022PROJECT_STATUS_PROPOSING\u0022));\r\n    uint256 internal constant PROJECT_STATUS_VOTING\t\t\t= uint256(bytes32(\u0022PROJECT_STATUS_VOTING\u0022));\r\n    uint256 internal constant PROJECT_STATUS_FAIL\t\t\t= uint256(bytes32(\u0022PROJECT_STATUS_FAIL\u0022));\r\n    uint256 internal constant PROJECT_STATUS_PASS\t\t\t= uint256(bytes32(\u0022PROJECT_STATUS_PASS\u0022));\r\n    uint256 internal constant PROJECT_STATUS_INVESTED\t\t= uint256(bytes32(\u0022PROJECT_STATUS_INVESTED\u0022));\r\n    //uint256 internal constant PROJECT_STATUS_DISPROPOSING\t= uint256(bytes32(\u0022PROJECT_STATUS_DISPROPOSING\u0022));\r\n    uint256 internal constant PROJECT_STATUS_DISVOTING\t    = uint256(bytes32(\u0022PROJECT_STATUS_DISVOTING\u0022));\r\n    uint256 internal constant PROJECT_STATUS_DISINVESTING\t= uint256(bytes32(\u0022PROJECT_STATUS_DISINVESTING\u0022));\r\n    uint256 internal constant PROJECT_STATUS_DISINVESTED\t= uint256(bytes32(\u0022PROJECT_STATUS_DISINVESTED\u0022));\r\n    \r\n    //uint256 internal constant VOTE_YES                      = uint256(bytes32(\u0022VOTE_YES\u0022));\r\n    //uint256 internal constant VOTE_NO                       = uint256(bytes32(\u0022VOTE_NO\u0022));\r\n    //uint256 internal constant VOTE_CANCEL                   = uint256(bytes32(\u0022VOTE_CANCEL\u0022));\r\n    bytes32 internal constant VOTE_YES                      = \u0022VOTE_YES\u0022;\r\n    bytes32 internal constant VOTE_NO                       = \u0022VOTE_NO\u0022;\r\n    bytes32 internal constant VOTE_CANCEL                   = \u0022VOTE_CANCEL\u0022;\r\n    \r\n}\r\n\r\ncontract IFund {\r\n\tfunction returnProfit(bytes32 _projectID, uint256 _eth, uint256 _sf) public;\r\n\tfunction returnDisinvestment(bytes32 _projectID, uint256 _eth, uint256 _sf) public;\r\n}\r\n\r\ncontract IProject is ICaller {\r\n\tfunction invest(bytes32 _projectID, uint256 _eth, uint256 _sf) public;\r\n\tfunction disinvest() public;\r\n}\r\n\r\ncontract IData is ICalled{\r\n    // these function isn\u0027t abstract since the compiler emits automatically generated getter functions as external\r\n    function bu(bytes32) public pure returns(uint256) {}\r\n    function ba(bytes32) public pure returns(address) {}\r\n    //function bi(bytes32) public pure returns(int256) {}\r\n    //function bs(bytes32) public pure returns(string) {}\r\n    //function bb(bytes32) public pure returns(bytes) {}\r\n    \r\n    function bau(bytes32, address) public pure returns(uint256) {}\r\n    //function baa(bytes32, address) public pure returns(address) {}\r\n    //function bai(bytes32, address) public pure returns(int256) {}\r\n    //function bas(bytes32, address) public pure returns(string) {}\r\n    //function bab(bytes32, address) public pure returns(bytes) {}\r\n    \r\n    function bbu(bytes32, bytes32) public pure returns(uint256) {}\r\n    function bbs(bytes32, bytes32) public pure returns(string) {}\r\n\r\n    function buu(bytes32, uint256) public pure returns(uint256) {}\r\n    function bua(bytes32, uint256) public pure returns(address) {}\r\n\tfunction bus(bytes32, uint256) public pure returns(string) {}\r\n    function bas(bytes32, address) public pure returns(string) {}\r\n    //function bui(bytes32, uint256) public pure returns(int256) {}\r\n    //function bus(bytes32, uint256) public pure returns(string) {}\r\n    //function bub(bytes32, uint256) public pure returns(bytes) {}\r\n    \r\n    function bauu(bytes32, address, uint256) public pure returns(uint256) {}\r\n\t//function baau(bytes32, address, address) public pure returns(uint256) {}\r\n    function bbau(bytes32, bytes32, address) public pure returns(uint256) {}\r\n    //function buuu(bytes32, uint256, uint256) public pure returns(uint256) {}\r\n    function bbaau(bytes32, bytes32, address, address) public pure returns(uint256) {}\r\n    \r\n    function setBU(bytes32 _key, uint256 _value) public;\r\n    function setBA(bytes32 _key, address _value) public;\r\n    //function setBI(bytes32 _key, int256 _value) public;\r\n    //function setBS(bytes32 _key, string _value) public;\r\n    //function setBB(bytes32 _key, bytes _value) public;\r\n    \r\n    function setBAU(bytes32 _key, address _addr, uint256 _value) public;\r\n    //function setBAA(bytes32 _key, address _addr, address _value) public;\r\n    //function setBAI(bytes32 _key, address _addr, int256 _value) public;\r\n    //function setBAS(bytes32 _key, address _addr, string _value) public;\r\n    //function setBAB(bytes32 _key, address _addr, bytes _value) public;\r\n    \r\n    function setBBU(bytes32 _key, bytes32 _id, uint256 _value) public;\r\n    function setBBS(bytes32 _key, bytes32 _id, string _value) public;\r\n\r\n    function setBUU(bytes32 _key, uint256 _index, uint256 _value) public;\r\n    function setBUA(bytes32 _key, uint256 _index, address _addr) public;\r\n\tfunction setBUS(bytes32 _key, uint256 _index, string _str) public;\r\n    //function setBUI(bytes32 _key, uint256 _index, int256 _value) public;\r\n    //function setBUB(bytes32 _key, uint256 _index, bytes _value) public;\r\n\r\n\t//function setBAAU(bytes32 _key, address _token, address _addr, uint256 _value) public;\r\n\tfunction setBAUU(bytes32 _key, address _addr, uint256 _index, uint256 _value) public;\r\n    function setBBAU(bytes32 _key, bytes32 _id, address _holder, uint256 _value) public;\r\n\t//function setBUUU(bytes32 _key, uint256 _index,  uint256 _index2, uint256 _value) public;\r\n    function setBBAAU(bytes32 _key, bytes32 _id, address _from, address _to, uint256 _value) public;\r\n}\r\n\r\ncontract I$martFund is IFund, IOwned, ICaller {\r\n\r\n    function checkQuotaPropose(uint256 _eth, uint256 _sf) public view returns(bool);\r\n    function propose(bytes32 _projectID, bytes32 _proposeID, IProject _project, uint256 _eth, uint256 _sf, string _mixInfo) public;\r\n    function dispropose(bytes32 _projectID, bytes32 _disproposeID, string _mixInfo) public;\r\n\tfunction getVotes(bytes32 _ID, bytes32 _vote) public view returns(uint256);\r\n    function vote(bytes32 _ID, bytes32 _vote) public;\r\n\r\n\tfunction forging(uint256 _msm) public;\r\n    function purchase(bool _wantDividend, bool _nonInvate, bytes32 _channel, bytes32 _recommendation) public payable;\r\n    function cancelOrder(uint256 _mso) public returns(uint256 eth);\r\n    function lock4Dividend(uint256 _msd2_ms) public returns(uint256 msd);\r\n    function unlock4Circulate(uint256 _msd) public returns(uint256 msd2);\r\n\r\n    function transferMS(address _to, uint256 _ms) public returns (bool success);\r\n    function transferMSI(address _to, uint256 _msi) public returns (bool success);\r\n    function transferMSM(address _to, uint256 _msm) public returns (bool success);\r\n\r\n    function apply4Redeem(uint256 _ms) public returns(uint256 ms2r);\r\n    function cancelRedeem(uint256 _ms2r_msr) public returns(uint256 ms);\r\n    function redeem(uint256 msr) public returns(uint256 eth);\r\n    \r\n}\r\n\r\ncontract SafeMath {\r\n    // Overflow protected math functions\r\n\r\n    /**\r\n        @dev returns the sum of _x and _y, asserts if the calculation overflows\r\n\r\n        @param _x   value 1\r\n        @param _y   value 2\r\n\r\n        @return sum\r\n    */\r\n    function safeAdd(uint256 _x, uint256 _y) internal pure returns (uint256) {\r\n        uint256 z = _x \u002B _y;\r\n        require(z \u003E= _x);        //assert(z \u003E= _x);\r\n        return z;\r\n    }\r\n\r\n    /**\r\n        @dev returns the difference of _x minus _y, asserts if the subtraction results in a negative number\r\n\r\n        @param _x   minuend\r\n        @param _y   subtrahend\r\n\r\n        @return difference\r\n    */\r\n    function safeSub(uint256 _x, uint256 _y) internal pure returns (uint256) {\r\n        require(_x \u003E= _y);        //assert(_x \u003E= _y);\r\n        return _x - _y;\r\n    }\r\n\r\n    /**\r\n        @dev returns the product of multiplying _x by _y, asserts if the calculation overflows\r\n\r\n        @param _x   factor 1\r\n        @param _y   factor 2\r\n\r\n        @return product\r\n    */\r\n    function safeMul(uint256 _x, uint256 _y) internal pure returns (uint256) {\r\n        uint256 z = _x * _y;\r\n        require(_x == 0 || z / _x == _y);        //assert(_x == 0 || z / _x == _y);\r\n        return z;\r\n    }\r\n\t\r\n\tfunction safeDiv(uint256 _x, uint256 _y)internal pure returns (uint256){\r\n\t    // assert(b \u003E 0); // Solidity automatically throws when dividing by 0\r\n        // uint256 c = a / b;\r\n        // assert(a == b * c \u002B a % b); // There is no case in which this doesn\u0027t hold\r\n        return _x / _y;\r\n\t}\r\n\t\r\n\tfunction ceilDiv(uint256 _x, uint256 _y)internal pure returns (uint256){\r\n\t\treturn (_x \u002B _y - 1) / _y;\r\n\t}\r\n}\r\n\r\ncontract Sqrt {\r\n\tfunction sqrt(uint x)public pure returns(uint y) {\r\n        uint z = (x \u002B 1) / 2;\r\n        y = x;\r\n        while (z \u003C y) {\r\n            y = z;\r\n            z = (x / z \u002B z) / 2;\r\n        }\r\n    }\r\n}\r\n\r\ncontract DataCaller is Owned, ICaller {\r\n    IData public data;\r\n    \r\n    constructor(IData _data) public {\r\n        data = IData(_data);\r\n    }\r\n    \r\n    function calledUpdate(address _oldCalled, address _newCalled) public ownerOnly {\r\n        if(data == _oldCalled) {\r\n            data = IData(_newCalled);\r\n            emit CalledUpdate(_oldCalled, _newCalled);\r\n        }\r\n    }\r\n}\r\n\r\ncontract GetBU is DataCaller {\r\n    function getBU(bytes32 _key) internal view returns(uint256) {\r\n        return data.bu(_key);        \r\n    }\r\n}\r\n\r\ncontract SetBU is DataCaller {\r\n    function setBU(bytes32 _key, uint256 _value) internal {\r\n        data.setBU(_key, _value);    \r\n    }\r\n}\r\n\r\ncontract Disable is Owned {\r\n\tbool public disabled;\r\n\t\r\n\tmodifier enabled {\r\n\t\tassert(!disabled);\r\n\t\t_;\r\n\t}\r\n\t\r\n\tfunction disable(bool _disable) public ownerOnly {\r\n\t\tdisabled = _disable;\r\n\t}\r\n}\r\n\r\ncontract IReserve is ICalled {\r\n    // these function isn\u0027t abstract since the compiler emits automatically generated getter functions as external\r\n    function balanceOfColdWallet() public pure returns(uint256) {}\r\n    function balanceOfShares() public pure returns(uint256) {}\r\n    function balanceOfOrder() public pure returns(uint256) {}\r\n    function balanceOfMineral() public pure returns(uint256) {}\r\n    function balanceOfProject() public pure returns(uint256) {}\r\n    function balanceOfQueue() public pure returns(uint256) {}\r\n    function headOfQueue() public pure returns(uint256){}\r\n    function tailOfQueue() public view returns(uint256);\r\n    \r\n    function setColdWallet(address _coldWallet, uint256 _ratioAutoSave, uint256 _ratioAutoRemain) public;\r\n\tfunction saveToColdWallet(uint256 _amount) public;\r\n    function restoreFromColdWallet() public payable;\r\n\r\n    function depositShares() public payable;\r\n    function depositOrder() public payable;\r\n    function depositMineral() public payable;\r\n    function depositProject() public payable;\r\n    \r\n    function order2Shares(uint256 _amount) public;\r\n    function mineral2Shares(uint256 _amount) public;\r\n    function shares2Project(uint256 _amount)public;\r\n    function project2Shares(uint256 _amount)public;\r\n    function project2Mineral(uint256 _amount) public;\r\n\t\r\n    function withdrawShares(uint256 _amount) public returns(bool atonce);\r\n    function withdrawSharesTo(address _to, uint256 _amount) public returns(bool atonce);\r\n    function withdrawOrder(uint256 _amount) public returns(bool atonce);\r\n    function withdrawOrderTo(address _to, uint256 _amount) public returns(bool atonce);\r\n    function withdrawMineral(uint256 _amount) public returns(bool atonce);\r\n    function withdrawMineralTo(address _to, uint256 _amount) public returns(bool atonce);\r\n    function withdrawProject(uint256 _amount)public returns(bool atonce);\r\n    function withdrawProjectTo(address _to, uint256 _amount)public returns(bool atonce);\r\n    \r\n\tfunction() public payable;\r\n}\r\n\r\ncontract IFormula is IOwned, ICaller {\r\n    uint8 public constant MAX_PRECISION = 127;\r\n    uint32 public constant MAX_WEIGHT = 1000000;\r\n    function reserve() public pure returns(IReserve) { }\r\n\r\n    function totalSupply() public view returns (uint256);\r\n    function balanceOf(address _addr)public view returns(uint256);\r\n    function price() view public returns(uint256);\r\n    //function costOfTxShares() view public returns(uint256);\r\n    \r\n\tfunction calcTimedQuota(uint256 _rest, uint256 _full, uint256 _timespan, uint256 _period) public pure returns (uint256);\r\n    function calcEma(uint256 _emaPre, uint256 _value, uint32 _timeSpan, uint256 _period) public view returns(uint256);\r\n    //function calcFactorReward(uint256 _dailyYield) public view returns(uint256);\r\n\tfunction calcFactorMining(uint256 _roi) public view returns(uint256);\r\n    \r\n\tfunction calcOrderTo$fAmount(uint256) public view returns(uint256);\r\n\t//function calc$martFundAmount(uint256 _amount, uint256 _factorRestrain) public view returns(uint256);\r\n\r\n    function calculatePurchaseReturn(uint256 _supply, uint256 _connectorBalance, uint32 _connectorWeight, uint256 _depositAmount) public constant returns (uint256);\r\n    function calculateRedeemReturn(uint256 _supply, uint256 _connectorBalance, uint32 _connectorWeight, uint256 _sellAmount) public constant returns (uint256);\r\n\t\r\n    function power(uint256 _baseN, uint256 _baseD, uint32 _expN, uint32 _expD) public view returns (uint256, uint8);\r\n    function power2(uint256 _baseN, uint256 _baseD, uint32 _expN, uint32 _expD) public view returns (uint256, uint8);\r\n    function ln(uint256 _numerator, uint256 _denominator) public pure returns (uint256);\r\n    \r\n}\r\n\r\ncontract I$martFundImpl is ICalled, ICaller {\r\n    uint256 public constant DEQUEUE_DEFAULT             = 0;\r\n    uint256 public constant DEQUEUE_ORDER               = 1;\r\n    uint256 public constant DEQUEUE_INGOT               = 2;\r\n    uint256 public constant DEQUEUE_DOUBLE              = 3;\r\n    uint256 public constant DEQUEUE_DOUBLE_REVERSELY    = 4;\r\n    uint256 public constant DEQUEUE_NONE                = 5;\r\n    \r\n\tfunction data() public pure returns(IData){}\r\n\tfunction reserve() public pure returns(IReserve){}\r\n\tfunction formula() public pure returns(IFormula){}\r\n\t\r\n    function dequeueOrder(uint256 gaslimit, bool force) public returns(uint256 dealt);\r\n    function dequeueIngot(uint256 gaslimit, bool force) public returns(uint256 dealt);\r\n    function dequeueAlternately(uint256 gaslimit, bool force) public returns(uint256 dealt);\r\n    function dequeueDouble(uint256 gaslimit, bool force) public returns(uint256 dealt);\r\n    function dequeue(bytes32 _when) public returns(uint256 dealt);\r\n\r\n    function getVotes(bytes32 _ID, bytes32 _vote) public view returns(uint256);\r\n\tfunction impl_vote(address _holder, bytes32 _ID, bytes32 _vote) public;\r\n    function impl_forging(address _from, uint256 _msm) public;\r\n    function impl_purchase(address _from, bool _wantDividend, bool _nonInvate, bytes32 _channel) public payable;\r\n    function impl_cancelOrder(address _from, uint256 _msm) public returns(uint256 eth);\r\n    function impl_lock4Dividend(address _from, uint256 _msd2_ms) public returns(uint256 msd);\r\n    function impl_unlock4Circulate(address _from, uint256 _msd) public returns(uint256 msd2);\r\n\r\n    function impl_quotaApply4Redeem() view public returns(uint256);\r\n    function impl_apply4Redeem(address _from, uint256 _ms) public returns(uint256 ms2r);\r\n    function impl_cancelRedeem(address _from, uint256 _ms2r_msr) public returns(uint256 ms);\r\n    function impl_redeem(address _from, uint256 msr) public returns(uint256 eth);\r\n}\r\n\r\ncontract Enabled is Disable, GetBU {\r\n\tmodifier enabled2 {\r\n        require(!disabled \u0026\u0026 getBU(\u0022dappEnabled\u0022) != 0);\r\n        _;\r\n    }\r\n}\r\n\r\ncontract DisableDapp is SetBU {\r\n\tfunction disableDapp(bool _disable) public ownerOnly {\r\n\t\tsetBU(\u0022dappEnabled\u0022, _disable ? 0 : 1);\r\n\t}\r\n}\r\n    \r\ncontract GetBA is DataCaller {\r\n    function getBA(bytes32 _key) internal view returns(address) {\r\n        return data.ba(_key);        \r\n    }\r\n}\r\n\r\ncontract SetBA is DataCaller {\r\n    function setBA(bytes32 _key, address _value) internal {\r\n        data.setBA(_key, _value);    \r\n    }\r\n}\r\n\r\ncontract GetBAU is DataCaller {\r\n    function getBAU(bytes32 _key, address _addr) internal view returns(uint256) {\r\n        return data.bau(_key, _addr);        \r\n    }\r\n}\r\n\r\ncontract SetBAU is DataCaller {\r\n    function setBAU(bytes32 _key, address _addr, uint256 _value) internal {\r\n        data.setBAU(_key, _addr, _value);    \r\n    }\r\n}\r\n\r\ncontract GetBBU is DataCaller {\r\n    function getBBU(bytes32 _key, bytes32 _id) internal view returns(uint256) {\r\n        return data.bbu(_key, _id);\r\n    }\r\n}\r\n\r\ncontract SetBBU is DataCaller {\r\n    function setBBU(bytes32 _key, bytes32 _id, uint256 _value) internal {\r\n        data.setBBU(_key, _id, _value);    \r\n    }\r\n}\r\n\r\ncontract GetBBS is DataCaller {\r\n    function getBBS(bytes32 _key, bytes32 _id) internal view returns(string) {\r\n        return data.bbs(_key, _id);\r\n    }\r\n}\r\n\r\ncontract SetBBS is DataCaller {\r\n    function setBBS(bytes32 _key, bytes32 _id, string _value) internal {\r\n        data.setBBS(_key, _id, _value);    \r\n    }\r\n}\r\n\r\ncontract GetBUU is DataCaller {\r\n    function getBUU(bytes32 _key, uint256 _index) internal view returns(uint256) {\r\n        return data.buu(_key, _index);        \r\n    }\r\n}\r\n\r\ncontract SetBUU is DataCaller {\r\n    function setBUU(bytes32 _key, uint256 _index, uint256 _value) internal {\r\n        data.setBUU(_key, _index, _value);    \r\n    }\r\n}\r\n\r\ncontract GetBUA is DataCaller {\r\n\tfunction getBUA(bytes32 _key, uint256 _index) internal view returns(address) {\r\n        return data.bua(_key, _index);        \r\n    }\r\n}\r\n\r\ncontract SetBUA is DataCaller {\r\n\tfunction setBUA(bytes32 _key, uint256 _index, address _addr) internal {\r\n        data.setBUA(_key, _index, _addr);        \r\n    }\r\n}\r\n\r\ncontract GetBUS is DataCaller {\r\n\tfunction getBUS(bytes32 _key, uint256 _index) internal view returns(string) {\r\n        return data.bus(_key, _index);        \r\n    }\r\n}\r\n\r\ncontract SetBUS is DataCaller {\r\n\tfunction setBUS(bytes32 _key, uint256 _index, string _str) internal {\r\n        data.setBUS(_key, _index, _str);        \r\n    }\r\n}\r\n\r\ncontract GetBAUU is DataCaller {\r\n\tfunction getBAUU(bytes32 _key, address _addr, uint256 _index) internal view returns(uint256) {\r\n        return data.bauu(_key, _addr, _index);        \r\n    }\r\n}\r\n\r\ncontract SetBAUU is DataCaller {\r\n\tfunction setBAUU(bytes32 _key, address _addr, uint256 _index, uint256 _value) internal {\r\n        data.setBAUU(_key, _addr, _index, _value);    \r\n    }\r\n}\r\n\r\ncontract GetBBAU is DataCaller {\r\n    function getBBAU(bytes32 _key, bytes32 _id, address _holder) internal view returns(uint256) {\r\n        return data.bbau(_key, _id, _holder);\r\n    }\r\n}\r\n\r\ncontract SetBBAU is DataCaller {\r\n    function setBBAU(bytes32 _key, bytes32 _id, address _holder, uint256 _value) internal {\r\n        data.setBBAU(_key, _id, _holder, _value);    \r\n    }\r\n}\r\n\r\ncontract GetBBAAU is DataCaller {\r\n    function getBBAAU(bytes32 _key, bytes32 _id, address _from, address _to) internal view returns(uint256) {\r\n        return data.bbaau(_key, _id, _from, _to);        \r\n    }\r\n}\r\n\r\ncontract SetBBAAU is DataCaller {\r\n    function setBBAAU(bytes32 _key, bytes32 _id, address _from, address _to, uint256 _value) internal {\r\n        data.setBBAAU(_key, _id, _from, _to, _value);\r\n    }\r\n}\r\n\r\ncontract Destructor is Owned{\r\n    function destruct() public ownerOnly {\r\n        selfdestruct(owner);\r\n    }\r\n}\r\n\r\ncontract $martFund is Constant, I$martFund, IERC223Receiver, SafeMath, Sqrt, DataCaller, Enabled, DisableDapp, GetBA, GetBAU, SetBAU, GetBUA, SetBUA, GetBUU, SetBUU, GetBBU, SetBBU, GetBBAU, GetBUS, SetBUS, GetBAUU, Destructor{    //, RLPReader {\r\n    IReserve public reserve;\r\n    IFormula public formula;\r\n    I$martFundImpl public impl;\r\n    \r\n    constructor(IData _data, IReserve _reserve, IFormula _formula, I$martFundImpl _impl) DataCaller(_data) public {\r\n        reserve = _reserve;\r\n        formula = _formula;\r\n        impl = _impl;\r\n    }\r\n\r\n    function calledUpdate(address _oldCalled, address _newCalled) public ownerOnly {\r\n        if(data == _oldCalled){\r\n            data = IData(_newCalled);\r\n        }else if(reserve == _oldCalled){\r\n            reserve = IReserve(_newCalled);\r\n        }else if(formula == _oldCalled){\r\n            formula = IFormula(_newCalled);\r\n        }else if(impl == _oldCalled){\r\n\t\t\timpl = I$martFundImpl(_newCalled);\r\n\t\t}else{\r\n            return;\r\n        }\r\n        emit CalledUpdate(_oldCalled, _newCalled);\r\n    }\r\n\r\n    function updateEmaDailyYieldSF(uint256 _value) internal/*public*/ returns(uint256) {\r\n        uint256 ema = getBU(\u0022emaDailyYieldSF\u0022);\r\n        uint32 timeSpan = uint32(safeSub(now, getBU(\u0022timeLastMiningSF\u0022)));\r\n\t\tsetBU(\u0022timeLastMiningSF\u0022, now);\r\n        ema = formula.calcEma(ema, _value, timeSpan, 1 days);\r\n        setBU(\u0022emaDailyYieldSF\u0022, ema);\r\n        return ema;\r\n    }\r\n\r\n    function checkQuotaPropose(uint256 _eth, uint256 _sf) public view returns(bool) {\r\n\t\tuint256 totalSupply_ = formula.totalSupply();\r\n\t\tuint256 reserve_ = reserve.balanceOfShares();\r\n\t\tif(_sf * 1 ether \u003E totalSupply_ * getBU(\u0022quotaPerProposeSF\u0022) || _eth * 1 ether \u003E reserve_ * getBU(\u0022quotaPerProposeEth\u0022))\r\n\t\t\treturn false;\r\n\t\tfor(uint256 id = getBUU(_projectsVoting_, 0x0); id != 0x0; id = getBUU(_projectsVoting_, id)) {\r\n\t\t\t_sf  \u002B= getBUU(_investmentSF_,  id);\r\n\t\t\t_eth \u002B= getBUU(_investmentEth_, id);\r\n\t\t}\r\n\t\treturn _sf * 1 ether \u003C= totalSupply_ * getBU(\u0022quotaAllProposeSF\u0022) \u0026\u0026 _eth * 1 ether \u003C= reserve_ * getBU(\u0022quotaAllProposeEth\u0022);\r\n\t}\r\n\t\r\n\tevent Propose(address indexed _holder, bytes32 indexed _projectID, bytes32 _proposeID, IProject _project, uint256 _eth, uint256 _sf);\r\n    function propose(bytes32 _projectID, bytes32 _proposeID, IProject _project, uint256 _eth, uint256 _sf, string _mixInfo) public enabled2 {\r\n\t\temit Propose(msg.sender, _proposeID, _projectID, _project, _eth, _sf);\r\n\t\t// emitEvent(_Propose_, bytes32(msg.sender), _projectID, uint256(_proposeID), uint256(_project), _eth, _sf);\r\n\t\tIDummyToken $fd = IDummyToken(getBA(_$FD_));\r\n\t\trequire($fd.balanceOf(msg.sender) * 1 ether \u003E= $fd.totalSupply() * getBU(_thresholdPropose_));\t//, \u0022Proponent has not enough $FD!\u0022\r\n\t\tif(address(_project) != address(0x0))\r\n\t\t\trequire(checkQuotaPropose(_eth, _sf));\t\t\t//, \u0022Too much financing!\u0022\r\n        \r\n        if(_projectID == _proposeID) {\t\t\t\t\t\t\t// first invest of the _projectID\r\n            uint256 projectID = getBAU(_projectID_, _project);\r\n\t\t\tuint256 status = getBUU(_projectStatus_, projectID);\r\n\t\t\trequire(projectID == 0 || status == PROJECT_STATUS_FAIL || status == PROJECT_STATUS_DISINVESTED);\r\n            projectID = uint256(_projectID);\r\n            setBAU(_projectID_, _project, projectID);\r\n        }else{\r\n            projectID = uint256(_projectID);\r\n\t\t\trequire(getBAU(_projectID_, _project) == projectID);\r\n\t\t\trequire(getBUU(_projectStatus_, projectID) == PROJECT_STATUS_INVESTED);\t//, \u0022Can\u0027t repropose a project which had not INVESTED!\u0022\r\n\t\t\tuint256 proposeID = getBUU(_proposeID_, projectID);\r\n\t\t\trequire(proposeID == 0 || proposeID == projectID || getBUU(_projectStatus_, proposeID) != PROJECT_STATUS_VOTING);\r\n\t\t\tuint256 disproposeID = getBUU(_disproposeID_, projectID);\r\n\t\t\trequire(disproposeID == 0 || getBUU(_projectStatus_, disproposeID) == PROJECT_STATUS_FAIL);\r\n        }\r\n       \r\n\t\tproposeID = uint256(_proposeID);\r\n        require(getBUU(_projectStatus_, proposeID) == 0x0);\t//, \u0022Can\u0027t propose same proposeID again!\u0022\r\n \t\tsetBUU(_proposeID_, projectID, proposeID);\r\n\t\tsetBUU(_projectID_, proposeID, projectID);\r\n        setBUU(_projectStatus_, proposeID, PROJECT_STATUS_VOTING);\r\n\t\tsetBUU(_timePropose_, proposeID, now);\r\n\t\tsetBUA(_projectAddr_, proposeID, _project);\r\n\t\tsetBUU(_investmentSF_, proposeID, _sf);\r\n\t\tsetBUU(_investmentEth_, proposeID, _eth);\r\n\t\tsetBUS(_projectInfo_, proposeID, _mixInfo);\r\n\t\t\r\n\t\tsetBUU(_projects_, proposeID, getBUU(_projects_, 0x0));\t\t\t\t\t// join projects list\r\n\t\tsetBUU(_projects_, 0x0, proposeID);\r\n\t\tsetBUU(_projectsVoting_, proposeID, getBUU(_projectsVoting_, 0x0));\r\n\t\tsetBUU(_projectsVoting_, 0x0, proposeID);\r\n\t\t\r\n\t\tvote(_proposeID, VOTE_YES);\r\n    }\r\n    \r\n    event Dispropose(address indexed _holder, bytes32 indexed _projectID, bytes32 _disproposeID);\r\n    function dispropose(bytes32 _projectID, bytes32 _disproposeID, string _mixInfo) public enabled2 {\r\n\t\temit Dispropose(msg.sender, _projectID, _disproposeID);\r\n\t\t// emitEvent(_Dispropose_, bytes32(msg.sender), _projectID, uint256(_disproposeID));\r\n\t\tuint256 projectID = uint256(_projectID);\r\n\t\trequire(getBUU(_projectStatus_, projectID) == PROJECT_STATUS_INVESTED);\t//, \u0022Can\u0027t dispropose a project which had not INVESTED!\u0022\r\n\t\tuint256 proposeID = getBUU(_proposeID_, projectID);\r\n\t\trequire(proposeID == 0 || proposeID == projectID || getBUU(_projectStatus_, proposeID) != PROJECT_STATUS_VOTING);\r\n\t\tuint256 disproposeID = getBUU(_disproposeID_, projectID);\r\n\t\trequire(disproposeID == 0 || getBUU(_projectStatus_, disproposeID) == PROJECT_STATUS_FAIL);\t\t//, \u0022The dispropose of the project already exist!\u0022\r\n\t\tdisproposeID = uint256(_disproposeID);\r\n\t\trequire(getBUU(_projectStatus_, disproposeID) == 0x0);\t\t\t\t\t\t//, \u0022Can\u0027t dispropose same disproposeID again!\u0022\r\n\t\tsetBUU(_disproposeID_, projectID, disproposeID);\r\n\t\tsetBUU(_projectID_, disproposeID, projectID);\r\n        \r\n\t\tIDummyToken $fd = IDummyToken(getBA(_$FD_));\r\n\t\trequire($fd.balanceOf(msg.sender) * 1 ether \u003E= $fd.totalSupply() * getBU(_thresholdPropose_));\t//, \u0022Proponent has not enough $FD!\u0022\r\n\t\tsetBUU(_projectStatus_, disproposeID, PROJECT_STATUS_DISVOTING);\r\n\t\tsetBUU(_timePropose_, disproposeID, now);\r\n\t\tsetBUS(_projectInfo_, disproposeID, _mixInfo);\r\n\t\t\r\n\t\tsetBUU(_projects_, disproposeID, getBUU(_projects_, 0x0));\t\t\t\t// join projects list\r\n\t\tsetBUU(_projects_, 0x0, disproposeID);\r\n\t\tsetBUU(_projectsVoting_, disproposeID, getBUU(_projectsVoting_, 0x0));\r\n\t\tsetBUU(_projectsVoting_, 0x0, disproposeID);\r\n\t\t\r\n\t\tvote(_disproposeID, VOTE_YES);\r\n    }\r\n    \r\n    function getVotes(bytes32 _ID, bytes32 _vote) public view returns(uint256) {\r\n\t\treturn impl.getVotes(_ID, _vote);\r\n\t}\r\n\t\r\n    function vote(bytes32 _ID, bytes32 _vote) public enabled2 {\r\n\t\tuint256 status = getBUU(_projectStatus_, uint256(_ID));\r\n\t\trequire(status == PROJECT_STATUS_VOTING || status == PROJECT_STATUS_DISVOTING);\t//, \u0022Project status is not VOTING or DISVOTING!\u0022\r\n\t\timpl.impl_vote(msg.sender, _ID, _vote);\r\n    }\r\n    \r\n    function voteYes(bytes32 _projectID) public {\r\n\t\tvote(_projectID, VOTE_YES);\r\n\t}\r\n\t\r\n    function voteNo(bytes32 _projectID) public {\r\n\t\tvote(_projectID, VOTE_NO);\r\n\t}\r\n\t\r\n    function voteCancle(bytes32 _projectID) public {\r\n\t\tvote(_projectID, VOTE_CANCEL);\r\n\t}\r\n    \r\n\tevent UpdateProject(address indexed _sender, bytes32 indexed _projectID, address _oldProject, address _newProject);\r\n\tfunction updateProject(address _oldProject, address _newProject) public ownerOnly {\r\n        // assert(getBU(\u0022UpdateContract\u0022) == uint256(oldProject));\r\n        uint256 id = getBAU(_projectID_, _oldProject);\r\n        setBAU(_projectID_, _newProject, id);\r\n        setBAU(_projectID_, _oldProject, 0);\r\n        setBUA(_projectAddr_, id, _newProject);\r\n\t\temit UpdateProject(msg.sender, bytes32(id), _oldProject, _newProject);\r\n\t\t// emitEvent(_UpdateProject_, bytes32(msg.sender), bytes32(id), uint256(_oldProject), uint256(_newProject));\r\n    }\r\n    \r\n\tevent ReturnProfit(address indexed _sender, bytes32 indexed _projectID, uint256 _eth, uint256 _sf);\r\n\tfunction returnProfit(bytes32 _projectID, uint256 _eth, uint256 _sf) public enabled2 {\r\n\t    emit ReturnProfit(msg.sender, _projectID, _eth, _sf);\r\n\t\t// emitEvent(_ReturnProfit_, bytes32(msg.sender), _projectID, _eth, _sf);\r\n\t\tuint256 projectID = uint256(_projectID);\r\n\t\tif(_sf \u003E 0) {\r\n\t\t\tsetBUU(_profitSF_, projectID, safeAdd(getBUU(_profitSF_, projectID), _sf));\r\n\t\t\tsetBU(_profitSF_, safeAdd(getBU(_profitSF_), _sf));\r\n\t\t\tuint256 ema = updateEmaDailyYieldSF(_sf);\r\n\t\t\tI$FM2_Operator addrMSM2O = I$FM2_Operator(IDummyToken(getBA(_$FM2_)).operator());\r\n\t\t\tuint256 ratioDividend = addrMSM2O.updateRatioDividend(_sf, ema);\r\n\t\t\tuint256 dividend = _sf * ratioDividend / 1 ether;\r\n\t\t\tuint256 supplyOld = formula.totalSupply();\r\n\t\t\tuint256 supplyNew = safeSub(supplyOld\u002Bdividend, _sf);\r\n\t\t\tuint256 weightOld = getBU(_weightOfReserve_);\r\n\t\t\tuint256 weightNew = weightOld * supplyOld / supplyNew;\r\n\t\t\tsetBU(_weightOfReserve_, weightNew);\r\n\t\t\tuint256 reserve_ = reserve.balanceOfShares();\r\n            emit Weight(\u0022returnProfit\u0022, weightNew, weightOld, reserve_, reserve_, supplyNew, supplyOld, reserve_*1 ether/weightOld*1 ether/supplyOld);\r\n\t\t\t// emitEvent(_Weight_, \u0022returnProfit\u0022, bytes32(0), weightNew, weightOld, reserve_, reserve_, supplyNew, supplyOld, reserve_*1 ether/weightOld*1 ether/supplyOld);\r\n\t\t\tIDummyToken(getBA(_$F_)).operator().destroy(getBUA(_projectAddr_, projectID), _sf);\r\n\t\t\taddrMSM2O.dividend(dividend);\r\n\t\t\tsetBU(_returnSF_, safeSub(safeAdd(getBU(_returnSF_), _sf), dividend));\r\n\t\t}\r\n\t\tif(_eth \u003E 0) {\r\n\t\t    setBUU(_profitEth_, projectID, getBUU(_profitEth_, projectID) \u002B _eth);\r\n\t\t    setBU(_profitEth_, getBU(_profitEth_) \u002B _eth);\r\n\t\t\treserve.project2Mineral(_eth);\r\n            IEtherToken(getBA(_ETHER_)).destroy(getBUA(_projectAddr_, projectID), _eth);\r\n\t\t\t//updateEmaDailyYield(msg.value);\r\n\t\t\t//updateFactorReward();\r\n\t\t\t//setBU(\u0022hasNonceMark\u0022, hasNonceMark ? 1 : 0);\r\n            setBAU(_projectID_, msg.sender, projectID);\r\n\t\t\tITokenOperator(IDummyToken(getBA(_$FM_)).operator()).issue(msg.sender, _eth);\r\n\t\t\timpl.dequeue(\u0022dequeueWhenMining\u0022);\r\n\t\t}\r\n\t}\r\n\t\r\n    event Weight(bytes32 indexed _cause, uint256 _weightNew, uint256 _weightOld, uint256 _reserveNew, uint256 _reserveOld, uint256 _supplyNew, uint256 _supplyOld, uint256 _price);\r\n\tevent ReturnDisinvestment(address indexed _sender, bytes32 indexed _projectID, uint256 _eth, uint256 _sf);\r\n\tfunction returnDisinvestment(bytes32 _projectID, uint256 _eth, uint256 _sf) public enabled2 {\r\n\t    emit ReturnDisinvestment(msg.sender, _projectID, _eth, _sf);\r\n\t\t// emitEvent(_ReturnDisinvestment_, bytes32(msg.sender), _projectID, _eth, _sf);\r\n\t\tsetBUU(_projectStatus_, uint256(_projectID), PROJECT_STATUS_DISINVESTED);\r\n        setBUU(_disproposeID_, uint256(_projectID), 0);\r\n        address project = getBUA(_projectAddr_, uint256(_projectID));\r\n        setBAU(_projectID_, project, 0);//detach project with _projectID\r\n\t\t\r\n\t\tuint256 supply = formula.totalSupply();\r\n\t\tuint256 reserve_ = reserve.balanceOfShares(); \r\n\t\tif(_sf \u003E 0) {\r\n\t\t\tsetBUU(_profitSF_, uint256(_projectID), safeAdd(getBUU(_profitSF_, uint256(_projectID)), _sf));\r\n\t\t\tsetBU(_profitSF_, safeAdd(getBU(_profitSF_), _sf));\r\n\t\t\tsetBU(_returnSF_, safeAdd(getBU(_returnSF_), _sf));\r\n\t\t\tuint256 weightOld = getBU(_weightOfReserve_);\r\n\t\t\tuint256 weightNew = weightOld * supply / safeSub(supply, _sf);\r\n\t\t\tsetBU(_weightOfReserve_, weightNew);\r\n            emit Weight(\u0022returnDisinvestment\u0022, weightNew, weightOld, reserve_, reserve_, safeSub(supply, _sf), supply, reserve_*1 ether/weightOld*1 ether/supply);\r\n\t\t\t// emitEvent(_Weight_, \u0022returnDisinvestment\u0022, bytes32(0), weightNew, weightOld, reserve_, reserve_, safeSub(supply, _sf), supply, reserve_*1 ether/weightOld*1 ether/supply);\r\n\t\t\tIDummyToken(getBA(_$F_)).operator().destroy(project, _sf);\r\n\t\t}\r\n\t\tif(_eth \u003E 0) {\r\n\t\t\tsetBUU(_profitEth_, uint256(_projectID), getBUU(_profitEth_, uint256(_projectID)) \u002B _eth);\r\n\t\t\tsetBU(_profitEth_, getBU(_profitEth_) \u002B _eth);\r\n\t\t\tsetBU(_returnEth_, getBU(_returnEth_) \u002B _eth);\r\n\t\t\tweightOld = getBU(_weightOfReserve_);\r\n\t\t\tweightNew = weightOld * (reserve_\u002B_eth) / reserve_;\r\n\t\t\tsetBU(_weightOfReserve_, weightNew);\r\n            emit Weight(\u0022returnDisinvestment\u0022, weightNew, weightOld, reserve_\u002B_eth, reserve_, supply, supply, reserve_*1 ether/weightOld*1 ether/supply);\r\n\t\t\t// emitEvent(_Weight_, \u0022returnDisinvestment\u0022, bytes32(0), weightNew, weightOld, reserve_\u002B_eth, reserve_, supply, supply, reserve_*1 ether/weightOld*1 ether/supply);\r\n\t\t\t// reserve.depositShares.value(_eth)();\r\n            IEtherToken(getBA(_ETHER_)).destroy(project, _eth);\r\n            reserve.project2Shares(_eth);\r\n\t\t}\r\n\t}\r\n\t\r\n\tfunction forging(uint256 _msm) public enabled {\r\n        return impl.impl_forging(msg.sender, _msm);\r\n    }\r\n    \r\n    function purchase(bool _wantDividend, bool _nonInvate, bytes32 _channel, bytes32 _recommendation) public payable enabled {\r\n        if(_recommendation != 0)\r\n            IRecommend(getBA(_Recommend_)).bindRecommenderImpl(msg.sender, _recommendation);\r\n\t\tif(msg.value \u003E 0)\r\n\t\t\treturn impl.impl_purchase.value(msg.value)(msg.sender, _wantDividend, _nonInvate, _channel);\r\n    }\r\n\r\n    function cancelOrder(uint256 _mso) public enabled returns(uint256 eth) {\r\n        return impl.impl_cancelOrder(msg.sender, _mso);\r\n    }\r\n    \r\n    function lock4Dividend(uint256 _msd2_ms) public enabled returns(uint256 msd) {\r\n        return impl.impl_lock4Dividend(msg.sender, _msd2_ms);\r\n    }\r\n    \r\n    function unlock4Circulate(uint256 _msd) public enabled returns(uint256 msd2) {\r\n        return impl.impl_unlock4Circulate(msg.sender, _msd);\r\n    }\r\n    \r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value, address _token);\r\n\tfunction transferMS(address _to, uint256 _ms) public enabled returns(bool success) {\r\n        return IDummyToken(getBA(_$F_)).operator().token_transfer(msg.sender, _to, _ms);\r\n\t\temit Transfer(msg.sender, _to, _ms, getBA(_$F_));\r\n\t\t// emitEvent(_Transfer_, bytes32(msg.sender), bytes32(_to), _ms, uint256(getBA(_$F_)));\r\n    }\r\n    \r\n    function transferMSI(address _to, uint256 _msi) public enabled returns(bool success) {\r\n        return IDummyToken(getBA(_$FI_)).operator().token_transfer(msg.sender, _to, _msi);\r\n\t\temit Transfer(msg.sender, _to, _msi, getBA(_$FI_));\r\n\t\t// emitEvent(_Transfer_, bytes32(msg.sender), bytes32(_to), _msi, uint256(getBA(_$FI_)));\r\n    }\r\n    \r\n    function transferMSM(address _to, uint256 _msm) public enabled returns(bool success) {\r\n        return IDummyToken(getBA(_$FM_)).operator().token_transfer(msg.sender, _to, _msm);\r\n\t\temit Transfer(msg.sender, _to, _msm, getBA(_$FM_));\r\n\t\t// emitEvent(_Transfer_, bytes32(msg.sender), bytes32(_to), _msm, uint256(getBA(_$FM_)));\r\n    }\r\n\r\n    function apply4Redeem(uint256 _ms) public enabled returns(uint256 msr) {\r\n        return impl.impl_apply4Redeem(msg.sender, _ms);\r\n    }\r\n    \r\n    function cancelRedeem(uint256 _ms2r_msr) public enabled returns(uint256 ms) {\r\n        return impl.impl_cancelRedeem(msg.sender, _ms2r_msr);\r\n    }\r\n    \r\n    function redeem(uint256 _msr) public enabled returns(uint256 eth) {\r\n        return impl.impl_redeem(msg.sender, _msr);\r\n    }\r\n\r\n    //event Dequeue(address indexed _holder, uint256 _dealt, address _token, uint256 _gaslimit);\r\n    event DequeueOrder(address indexed _holder, uint256 _dealt, uint256 _gaslimit);\r\n\tfunction dequeueOrder(uint256 gaslimit) public enabled returns(uint256 dealt) {\t\t// for urge order\r\n\t\tdealt = impl.dequeueOrder(gaslimit, true);\r\n\t\t//emit Dequeue(msg.sender, dealt, getBA(_$FO_), gaslimit);\r\n\t\temit DequeueOrder(msg.sender, dealt, gaslimit);\r\n\t\t//emitEvent(_Dequeue_, bytes32(msg.sender), bytes32(0), dealt, uint256(getBA(_$FO_)), gaslimit);\r\n\t\t// emitEvent(_DequeueOrder_, bytes32(msg.sender), bytes32(0), dealt, gaslimit);\r\n\t}\r\n    \r\n    event DequeueIngot(address indexed _holder, uint256 _dealt, uint256 _gaslimit);\r\n    function dequeueIngot(uint256 gaslimit) public enabled returns(uint256 dealt) {\r\n\t\tdealt = impl.dequeueIngot(gaslimit, true);\r\n\t\t//emit Dequeue(msg.sender, dealt, getBA(_$FM2_), gaslimit);\r\n\t\temit DequeueIngot(msg.sender, dealt, gaslimit);\r\n\t\t//emitEvent(_Dequeue_, bytes32(msg.sender), bytes32(0), dealt, uint256(getBA(_$FM2_)), gaslimit);\r\n\t\t// emitEvent(_DequeueIngot_, bytes32(msg.sender), bytes32(0), dealt, gaslimit);\r\n\t}\r\n\r\n    function nop()public{\r\n    }\r\n\t\r\n    function tokenFallback(address _from, uint _value, bytes _data) public enabled2 returns(bool){\r\n        if(msg.sender == getBA(_$F_))\r\n            return true;\r\n        return false;\r\n        _from;  _value; _data;\r\n    }\r\n\t\r\n    function() public payable{\r\n        purchase(false, false, 0x0, 0x0);\r\n    }\r\n}\r\n\r\ncontract IRecommend{\r\n    function bindRecommenderImpl(address _sender, bytes32 _recommendation) public returns(bool);\r\n}\r\n\r\ncontract I$FM2_Operator {\r\n\tfunction updateRatioDividend(uint256 _amount, uint256 _ema) public returns(uint256 ratioDividend);\r\n    function dequeueIngot(uint256 gaslimit, bool force) public returns(uint256);\r\n\tfunction dividend(uint256 _amount) public;\r\n}\r\n\r\ncontract IEtherToken {\r\n    function destroy(address _from, uint256 _eth) public;\r\n}","ABI":"[{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_disable\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022name\u0022:\u0022disableDapp\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022gaslimit\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022dequeueIngot\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022dealt\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_eth\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_sf\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022checkQuotaPropose\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022destruct\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022nop\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_projectID\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022name\u0022:\u0022_proposeID\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022name\u0022:\u0022_project\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_eth\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_sf\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_mixInfo\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022name\u0022:\u0022propose\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022formula\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_ms\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022apply4Redeem\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022msr\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_msm\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022forging\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_mso\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022cancelOrder\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022eth\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_ms2r_msr\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022cancelRedeem\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022ms\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022x\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022sqrt\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022y\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022pure\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_oldProject\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_newProject\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022updateProject\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_ms\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022transferMS\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022success\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_oldCalled\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_newCalled\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022calledUpdate\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_msd2_ms\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022lock4Dividend\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022msd\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022data\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_projectID\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022name\u0022:\u0022_eth\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_sf\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022returnDisinvestment\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022acceptOwnership\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_projectID\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022voteNo\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022impl\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022owner\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_wantDividend\u0022,\u0022type\u0022:\u0022bool\u0022},{\u0022name\u0022:\u0022_nonInvate\u0022,\u0022type\u0022:\u0022bool\u0022},{\u0022name\u0022:\u0022_channel\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022name\u0022:\u0022_recommendation\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022purchase\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:true,\u0022stateMutability\u0022:\u0022payable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_disable\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022name\u0022:\u0022disable\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022gaslimit\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022dequeueOrder\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022dealt\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_msm\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022transferMSM\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022success\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_projectID\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022name\u0022:\u0022_eth\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_sf\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022returnProfit\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_from\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_value\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_data\u0022,\u0022type\u0022:\u0022bytes\u0022}],\u0022name\u0022:\u0022tokenFallback\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_ID\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022name\u0022:\u0022_vote\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022getVotes\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022reserve\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_projectID\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022voteYes\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022newOwner\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_projectID\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022name\u0022:\u0022_disproposeID\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022name\u0022:\u0022_mixInfo\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022name\u0022:\u0022dispropose\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_msr\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022redeem\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022eth\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_msd\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022unlock4Circulate\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022msd2\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022disabled\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_ID\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022name\u0022:\u0022_vote\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022vote\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_msi\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022transferMSI\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022success\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022transferOwnership\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_projectID\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022voteCancle\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[{\u0022name\u0022:\u0022_data\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_reserve\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_formula\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_impl\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022constructor\u0022},{\u0022payable\u0022:true,\u0022stateMutability\u0022:\u0022payable\u0022,\u0022type\u0022:\u0022fallback\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022_holder\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022_projectID\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022_proposeID\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022_project\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022_eth\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022_sf\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022Propose\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022_holder\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022_projectID\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022_disproposeID\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022Dispropose\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022_sender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022_projectID\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022_oldProject\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022_newProject\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022UpdateProject\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022_sender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022_projectID\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022_eth\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022_sf\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022ReturnProfit\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022_cause\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022_weightNew\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022_weightOld\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022_reserveNew\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022_reserveOld\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022_supplyNew\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022_supplyOld\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022_price\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022Weight\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022_sender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022_projectID\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022_eth\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022_sf\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022ReturnDisinvestment\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022_from\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022_to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022_value\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022_token\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022Transfer\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022_holder\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022_dealt\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022_gaslimit\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022DequeueOrder\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022_holder\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022_dealt\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022_gaslimit\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022DequeueIngot\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022_oldCalled\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022_newCalled\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022CalledUpdate\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022_prevOwner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022_newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022OwnerUpdate\u0022,\u0022type\u0022:\u0022event\u0022}]","ContractName":"$martFund","CompilerVersion":"v0.4.24\u002Bcommit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000081ac3291ab7a952aa002c2cb1e27ea00a8af9e74000000000000000000000000a04bcf9eba11506b828af34d232fb5335d50a8530000000000000000000000002679c7dfce9210ddcb1e6e98d376ce40e71489970000000000000000000000007f7d2c68f51437106a2296141a00eab098fea26e","Library":"","SwarmSource":"bzzr://db6708f9828357b409c4c27ee82e8c7de45ac7837efd71ceec8377b6ec030e2a"}]