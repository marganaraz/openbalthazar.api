[{"SourceCode":"// File: contracts/upgradeability/EternalStorage.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\n/**\r\n * @title EternalStorage\r\n * @dev This contract holds all the necessary state variables to carry out the storage of any contract.\r\n */\r\ncontract EternalStorage {\r\n\r\n    mapping(bytes32 =\u003E uint256) internal uintStorage;\r\n    mapping(bytes32 =\u003E string) internal stringStorage;\r\n    mapping(bytes32 =\u003E address) internal addressStorage;\r\n    mapping(bytes32 =\u003E bytes) internal bytesStorage;\r\n    mapping(bytes32 =\u003E bool) internal boolStorage;\r\n    mapping(bytes32 =\u003E int256) internal intStorage;\r\n\r\n\r\n    mapping(bytes32 =\u003E uint256[]) internal uintArrayStorage;\r\n    mapping(bytes32 =\u003E string[]) internal stringArrayStorage;\r\n    mapping(bytes32 =\u003E address[]) internal addressArrayStorage;\r\n    //mapping(bytes32 =\u003E bytes[]) internal bytesArrayStorage;\r\n    mapping(bytes32 =\u003E bool[]) internal boolArrayStorage;\r\n    mapping(bytes32 =\u003E int256[]) internal intArrayStorage;\r\n    mapping(bytes32 =\u003E bytes32[]) internal bytes32ArrayStorage;\r\n}\r\n\r\n// File: contracts/upgradeable_contracts/EternalOwnable.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\n\r\n/**\r\n * @title EternalOwnable\r\n * @dev This contract has an owner address providing basic authorization control\r\n */\r\ncontract EternalOwnable is EternalStorage {\r\n    /**\r\n    * @dev Event to show ownership has been transferred\r\n    * @param previousOwner representing the address of the previous owner\r\n    * @param newOwner representing the address of the new owner\r\n    */\r\n    event EternalOwnershipTransferred(address previousOwner, address newOwner);\r\n\r\n    /**\r\n    * @dev Throws if called by any account other than the owner.\r\n    */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner());\r\n        _;\r\n    }\r\n\r\n    /**\r\n    * @dev Tells the address of the owner\r\n    * @return the address of the owner\r\n    */\r\n    function owner() public view returns (address) {\r\n        return addressStorage[keccak256(abi.encodePacked(\u0022owner\u0022))];\r\n    }\r\n\r\n    /**\r\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n    * @param newOwner the address to transfer ownership to.\r\n    */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0));\r\n        setOwner(newOwner);\r\n    }\r\n\r\n    /**\r\n    * @dev Sets a new owner address\r\n    */\r\n    function setOwner(address newOwner) internal {\r\n        emit EternalOwnershipTransferred(owner(), newOwner);\r\n        addressStorage[keccak256(abi.encodePacked(\u0022owner\u0022))] = newOwner;\r\n    }\r\n}\r\n\r\n// File: contracts/IForeignBridgeValidators.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\ninterface IForeignBridgeValidators {\r\n    function isValidator(address _validator) public view returns(bool);\r\n    function requiredSignatures() public view returns(uint256);\r\n    function setValidators(address[] _validators) public returns(bool);\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.4.24;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, reverts on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\r\n    // benefit is lost if \u0027b\u0027 is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b \u003E 0); // Solidity only automatically asserts when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c \u002B a % b); // There is no case in which this doesn\u0027t hold\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b \u003C= a);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, reverts on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a \u002B b;\r\n    require(c \u003E= a);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n  * reverts when dividing by zero.\r\n  */\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0);\r\n    return a % b;\r\n  }\r\n}\r\n\r\n// File: contracts/upgradeable_contracts/native_to_erc20/ForeignBridgeValidators.sol\r\n\r\npragma solidity 0.4.24;\r\n\r\n\r\n\r\n\r\n\r\ncontract ForeignBridgeValidators is IForeignBridgeValidators, EternalStorage, EternalOwnable {\r\n  using SafeMath for uint256;\r\n\r\n  event ValidatorsChanged (address[] validators);\r\n  event RequiredSignaturesChanged (uint256 requiredSignatures);\r\n\r\n  // foreignBridge is the owner of this contract\r\n  function initialize(address[] _initialValidators, address _foreignBridge) public returns (bool) {\r\n    require(!isInitialized());\r\n    require(_foreignBridge != address(0));\r\n    setOwner(_foreignBridge);\r\n    for (uint256 i = 0; i \u003C _initialValidators.length; i\u002B\u002B) {\r\n        require(_initialValidators[i] != address(0));\r\n    }\r\n    _setValidators(_initialValidators);\r\n    emit ValidatorsChanged(_initialValidators);\r\n    _setRequiredSignatures();\r\n    emit RequiredSignaturesChanged(requiredSignatures());\r\n    _setDeployedAtBlock();\r\n    _setInitialize(true);\r\n    return isInitialized();\r\n  }\r\n\r\n  function setValidators(address[] _validators) public onlyOwner returns (bool) {\r\n    for (uint256 i = 0; i \u003C _validators.length; i\u002B\u002B) {\r\n      require(_validators[i] != address(0));\r\n    }\r\n    _setValidators(_validators);\r\n    emit ValidatorsChanged(_validators);\r\n    _setRequiredSignatures();\r\n    emit RequiredSignaturesChanged(requiredSignatures());\r\n    return true;\r\n  }\r\n\r\n  bytes32 internal constant VALIDATORS = keccak256(abi.encodePacked(\u0022validators\u0022));\r\n  bytes32 internal constant REQUIRED_SIGNATURES = keccak256(abi.encodePacked(\u0022requiredSignatures\u0022));\r\n  bytes32 internal constant IS_INITIALIZED = keccak256(abi.encodePacked(\u0022isInitialized\u0022));\r\n  bytes32 internal constant DEPLOYED_AT_BLOCK = keccak256(abi.encodePacked(\u0022deployedAtBlock\u0022));\r\n\r\n  function validators() public view returns(address[]) {\r\n    return addressArrayStorage[VALIDATORS];\r\n  }\r\n\r\n  function validatorCount() public view returns(uint256) {\r\n    return addressArrayStorage[VALIDATORS].length;\r\n  }\r\n\r\n  function isValidator(address _address) public view returns(bool) {\r\n    for (uint256 i; i \u003C validatorCount(); i\u002B\u002B) {\r\n      if (_address == addressArrayStorage[VALIDATORS][i]) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  function requiredSignatures() public view returns(uint256) {\r\n    return uintStorage[REQUIRED_SIGNATURES];\r\n  }\r\n\r\n  function isInitialized() public view returns(bool) {\r\n      return boolStorage[IS_INITIALIZED];\r\n  }\r\n\r\n  function deployedAtBlock() public view returns(uint256) {\r\n      return uintStorage[DEPLOYED_AT_BLOCK];\r\n  }\r\n\r\n  function getForeignBridgeValidatorsInterfacesVersion() public pure returns(uint64 major, uint64 minor, uint64 patch) {\r\n      return (1, 0, 0);\r\n  }\r\n\r\n  function _setValidators(address[] _validators) private {\r\n    addressArrayStorage[VALIDATORS] = _validators;\r\n  }\r\n\r\n  function _setRequiredSignatures() private {\r\n    uintStorage[REQUIRED_SIGNATURES] = validatorCount().div(2).add(1);\r\n    emit RequiredSignaturesChanged(requiredSignatures());\r\n  }\r\n\r\n  function _setInitialize(bool _status) private {\r\n      boolStorage[IS_INITIALIZED] = _status;\r\n  }\r\n\r\n  function _setDeployedAtBlock() private {\r\n    uintStorage[DEPLOYED_AT_BLOCK] = block.number;\r\n  }\r\n}","ABI":"[{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022validatorCount\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022isInitialized\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_initialValidators\u0022,\u0022type\u0022:\u0022address[]\u0022},{\u0022name\u0022:\u0022_foreignBridge\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022initialize\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022getForeignBridgeValidatorsInterfacesVersion\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022major\u0022,\u0022type\u0022:\u0022uint64\u0022},{\u0022name\u0022:\u0022minor\u0022,\u0022type\u0022:\u0022uint64\u0022},{\u0022name\u0022:\u0022patch\u0022,\u0022type\u0022:\u0022uint64\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022pure\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022requiredSignatures\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022owner\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_validators\u0022,\u0022type\u0022:\u0022address[]\u0022}],\u0022name\u0022:\u0022setValidators\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022deployedAtBlock\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022validators\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address[]\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022transferOwnership\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_address\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022isValidator\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022validators\u0022,\u0022type\u0022:\u0022address[]\u0022}],\u0022name\u0022:\u0022ValidatorsChanged\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022requiredSignatures\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022RequiredSignaturesChanged\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022previousOwner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022EternalOwnershipTransferred\u0022,\u0022type\u0022:\u0022event\u0022}]","ContractName":"ForeignBridgeValidators","CompilerVersion":"v0.4.24\u002Bcommit.e67f0147","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://fda7074680d1c8cba9ce9f15949bab6b41e7a7084c14d2462df9e3a9765dd0c6"}]