[{"SourceCode":"// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * \u0060onlyOwner\u0060, which can be aplied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \u0022Ownable: caller is not the owner\u0022);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * \u0060onlyOwner\u0060 functions anymore. Can only be called by the current owner.\r\n     *\r\n     * \u003E Note: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (\u0060newOwner\u0060).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (\u0060newOwner\u0060).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \u0022Ownable: new owner is the zero address\u0022);\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/access/Roles.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping (address =\u003E bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev Give an account access to this role.\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(!has(role, account), \u0022Roles: account already has role\u0022);\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Remove an account\u0027s access to this role.\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(has(role, account), \u0022Roles: account does not have role\u0022);\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Check if an account has this role.\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0), \u0022Roles: account is the zero address\u0022);\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Wrappers over Solidity\u0027s arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * \u0060SafeMath\u0060 restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it\u0027s recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060\u002B\u0060 operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a \u002B b;\r\n        require(c \u003E= a, \u0022SafeMath: addition overflow\u0022);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060-\u0060 operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b \u003C= a, \u0022SafeMath: subtraction overflow\u0022);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060*\u0060 operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\r\n        // benefit is lost if \u0027b\u0027 is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \u0022SafeMath: multiplication overflow\u0022);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060/\u0060 operator. Note: this function uses a\r\n     * \u0060revert\u0060 opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b \u003E 0, \u0022SafeMath: division by zero\u0022);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c \u002B a % b); // There is no case in which this doesn\u0027t hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060%\u0060 operator. This function uses a \u0060revert\u0060\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \u0022SafeMath: modulo by zero\u0022);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see \u0060ERC20Detailed\u0060.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by \u0060account\u0060.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves \u0060amount\u0060 tokens from the caller\u0027s account to \u0060recipient\u0060.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a \u0060Transfer\u0060 event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that \u0060spender\u0060 will be\r\n     * allowed to spend on behalf of \u0060owner\u0060 through \u0060transferFrom\u0060. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when \u0060approve\u0060 or \u0060transferFrom\u0060 are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets \u0060amount\u0060 as the allowance of \u0060spender\u0060 over the caller\u0027s tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * \u003E Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an \u0060Approval\u0060 event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves \u0060amount\u0060 tokens from \u0060sender\u0060 to \u0060recipient\u0060 using the\r\n     * allowance mechanism. \u0060amount\u0060 is then deducted from the caller\u0027s\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a \u0060Transfer\u0060 event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when \u0060value\u0060 tokens are moved from one account (\u0060from\u0060) to\r\n     * another (\u0060to\u0060).\r\n     *\r\n     * Note that \u0060value\u0060 may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a \u0060spender\u0060 for an \u0060owner\u0060 is set by\r\n     * a call to \u0060approve\u0060. \u0060value\u0060 is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: contracts/interfaces/ISRC20.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @title SRC20 public interface\r\n */\r\ninterface ISRC20 {\r\n\r\n    event RestrictionsAndRulesUpdated(address restrictions, address rules);\r\n\r\n    function transferToken(address to, uint256 value, uint256 nonce, uint256 expirationTime,\r\n        bytes32 msgHash, bytes calldata signature) external returns (bool);\r\n    function transferTokenFrom(address from, address to, uint256 value, uint256 nonce,\r\n        uint256 expirationTime, bytes32 hash, bytes calldata signature) external returns (bool);\r\n    function getTransferNonce() external view returns (uint256);\r\n    function getTransferNonce(address account) external view returns (uint256);\r\n    function executeTransfer(address from, address to, uint256 value) external returns (bool);\r\n    function updateRestrictionsAndRules(address restrictions, address rules) external returns (bool);\r\n\r\n    // ERC20 part-like interface\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address who) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n\r\n    function increaseAllowance(address spender, uint256 value) external returns (bool);\r\n    function decreaseAllowance(address spender, uint256 value) external returns (bool);\r\n}\r\n\r\n// File: contracts/interfaces/ISRC20Managed.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n    @title SRC20 interface for managers\r\n */\r\ninterface ISRC20Managed {\r\n    event ManagementTransferred(address indexed previousManager, address indexed newManager);\r\n\r\n    function burn(address account, uint256 value) external returns (bool);\r\n    function mint(address account, uint256 value) external returns (bool);\r\n}\r\n\r\n// File: contracts/interfaces/ISRC20Roles.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Contract module which allows children to implement access managements\r\n * with multiple roles.\r\n *\r\n * \u0060Authority\u0060 the one how is authorized by token owner/issuer to authorize transfers\r\n * either on-chain or off-chain.\r\n *\r\n * \u0060Delegate\u0060 the person who person responsible for updating KYA document\r\n *\r\n * \u0060Manager\u0060 the person who is responsible for minting and burning the tokens. It should be\r\n * be registry contract where staking-\u003Eminting is executed.\r\n */\r\ncontract ISRC20Roles {\r\n    function isAuthority(address account) external view returns (bool);\r\n    function removeAuthority(address account) external returns (bool);\r\n    function addAuthority(address account) external returns (bool);\r\n\r\n    function isDelegate(address account) external view returns (bool);\r\n    function addDelegate(address account) external returns (bool);\r\n    function removeDelegate(address account) external returns (bool);\r\n\r\n    function manager() external view returns (address);\r\n    function isManager(address account) external view returns (bool);\r\n    function transferManagement(address newManager) external returns (bool);\r\n    function renounceManagement() external returns (bool);\r\n}\r\n\r\n// File: contracts/interfaces/IManager.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Manager handles SRC20 burn/mint in relation to\r\n * SWM token staking.\r\n */\r\ninterface IManager {\r\n \r\n    event SRC20SupplyMinted(address src20, address swmAccount, uint256 swmValue, uint256 src20Value);\r\n    event SRC20StakeIncreased(address src20, address swmAccount, uint256 swmValue);\r\n    event SRC20StakeDecreased(address src20, address swmAccount, uint256 swmValue);\r\n\r\n    function mintSupply(address src20, address swmAccount, uint256 swmValue, uint256 src20Value) external returns (bool);\r\n    function increaseSupply(address src20, address swmAccount, uint256 srcValue) external returns (bool);\r\n    function decreaseSupply(address src20, address swmAccount, uint256 srcValue) external returns (bool);\r\n    function renounceManagement(address src20) external returns (bool);\r\n    function transferManagement(address src20, address newManager) external returns (bool);\r\n    function calcTokens(address src20, uint256 swmValue) external view returns (uint256);\r\n\r\n    function getStake(address src20) external view returns (uint256);\r\n    function swmNeeded(address src20, uint256 srcValue) external view returns (uint256);\r\n    function getSrc20toSwmRatio(address src20) external returns (uint256);\r\n    function getTokenOwner(address src20) external view returns (address);\r\n}\r\n\r\n// File: contracts/factories/Manager.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Manager handles SRC20 burn/mint in relation to\r\n * SWM token staking.\r\n */\r\ncontract Manager is IManager, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    event SRC20SupplyMinted(address src20, address swmAccount, uint256 swmValue, uint256 src20Value);\r\n    event SRC20SupplyIncreased(address src20, address swmAccount, uint256 srcValue);\r\n    event SRC20SupplyDecreased(address src20, address swmAccount, uint256 srcValue);\r\n\r\n    mapping (address =\u003E SRC20) internal _registry;\r\n\r\n    struct SRC20 {\r\n        address owner;\r\n        address roles;\r\n        uint256 stake;\r\n        address minter;\r\n    }\r\n\r\n    IERC20 private _swmERC20;\r\n\r\n    constructor(address swmERC20) public {\r\n        require(swmERC20 != address(0), \u0027SWM ERC20 is zero address\u0027);\r\n\r\n        _swmERC20 = IERC20(swmERC20);\r\n    }\r\n\r\n    modifier onlyTokenOwner(address src20) {\r\n        require(_isTokenOwner(src20), \u0022Caller not token owner.\u0022);\r\n        _;\r\n    }\r\n\r\n    // Note that, similarly to the role of token owner, there is only one manager per src20 token contract.\r\n    // Only one address can have this role.\r\n    modifier onlyMinter(address src20) {\r\n        require(msg.sender == _registry[src20].minter, \u0022Caller not token minter.\u0022);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Mint additional supply of SRC20 tokens based on SWN token stake.\r\n     * Can be used for initial supply and subsequent minting of new SRC20 tokens.\r\n     * When used, Manager will update SWM/SRC20 values in this call and use it\r\n     * for token owner\u0027s incStake/decStake calls, minting/burning SRC20 based on\r\n     * current SWM/SRC20 ratio.\r\n     * Only owner of this contract can invoke this method. Owner is SWARM controlled\r\n     * address.\r\n     * Emits SRC20SupplyMinted event.\r\n     *\r\n     * @param src20 SRC20 token address.\r\n     * @param swmAccount SWM ERC20 account holding enough SWM tokens (\u003E= swmValue)\r\n     * with manager contract address approved to transferFrom.\r\n     * @param swmValue SWM stake value.\r\n     * @param src20Value SRC20 tokens to mint\r\n     * @return true on success.\r\n     */\r\n    function mintSupply(address src20, address swmAccount, uint256 swmValue, uint256 src20Value)\r\n        onlyMinter(src20)\r\n        external\r\n        returns (bool)\r\n    {\r\n        require(swmAccount != address(0), \u0022SWM account is zero\u0022);\r\n        require(swmValue != 0, \u0022SWM value is zero\u0022);\r\n        require(src20Value != 0, \u0022SRC20 value is zero\u0022);\r\n        require(_registry[src20].owner != address(0), \u0022SRC20 token contract not registered\u0022);\r\n\r\n        _registry[src20].stake = _registry[src20].stake.add(swmValue);\r\n\r\n        require(_swmERC20.transferFrom(swmAccount, address(this), swmValue));\r\n        require(ISRC20Managed(src20).mint(_registry[src20].owner, src20Value));\r\n\r\n        emit SRC20SupplyMinted(src20, swmAccount, swmValue, src20Value);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev This is function token issuer can call in order to increase his SRC20 supply this\r\n     * and stake his tokens.\r\n     *\r\n     * @param src20 Address of src20 token contract\r\n     * @param swmAccount Account from which stake tokens are going to be deducted\r\n     * @param srcValue Value of desired SRC20 token value\r\n     * @return true if success\r\n     */\r\n    function increaseSupply(address src20, address swmAccount, uint256 srcValue)\r\n        external\r\n        onlyTokenOwner(src20)\r\n        returns (bool)\r\n    {\r\n        require(swmAccount != address(0), \u0022SWM account is zero\u0022);\r\n        require(srcValue != 0, \u0022SWM value is zero\u0022);\r\n        require(_registry[src20].owner != address(0), \u0022SRC20 token contract not registered\u0022);\r\n\r\n        uint256 swmValue = _swmNeeded(src20, srcValue);\r\n\r\n        require(_swmERC20.transferFrom(swmAccount, address(this), swmValue));\r\n        require(ISRC20Managed(src20).mint(_registry[src20].owner, srcValue));\r\n\r\n        _registry[src20].stake = _registry[src20].stake.add(swmValue);\r\n        emit SRC20SupplyIncreased(src20, swmAccount, swmValue);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev This is function token issuer can call in order to decrease his SRC20 supply\r\n     * and his stake back\r\n     *\r\n     * @param src20 Address of src20 token contract\r\n     * @param swmAccount Account to which stake tokens will be returned\r\n     * @param srcValue Value of desired SRC20 token value\r\n     * @return true if success\r\n     */\r\n    function decreaseSupply(address src20, address swmAccount, uint256 srcValue)\r\n        external\r\n        onlyTokenOwner(src20)\r\n        returns (bool)\r\n    {\r\n        require(swmAccount != address(0), \u0022SWM account is zero\u0022);\r\n        require(srcValue != 0, \u0022SWM value is zero\u0022);\r\n        require(_registry[src20].owner != address(0), \u0022SRC20 token contract not registered\u0022);\r\n\r\n        uint256 swmValue = _swmNeeded(src20, srcValue);\r\n\r\n        require(_swmERC20.transfer(swmAccount, swmValue));\r\n        require(ISRC20Managed(src20).burn(_registry[src20].owner, srcValue));\r\n\r\n        _registry[src20].stake = _registry[src20].stake.sub(swmValue);\r\n        emit SRC20SupplyDecreased(src20, swmAccount, srcValue);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows manager to renounce management.\r\n     *\r\n     * @param src20 SRC20 token address.\r\n     * @return true on success.\r\n     */\r\n    function renounceManagement(address src20)\r\n        external\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        require(_registry[src20].owner != address(0), \u0022SRC20 token contract not registered\u0022);\r\n\r\n        require(ISRC20Roles(_registry[src20].roles).renounceManagement());\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows manager to transfer management to another address.\r\n     *\r\n     * @param src20 SRC20 token address.\r\n     * @param newManager New manager address.\r\n     * @return true on success.\r\n     */\r\n    function transferManagement(address src20, address newManager)\r\n        public\r\n        onlyOwner\r\n        returns (bool)\r\n    {\r\n        require(_registry[src20].owner != address(0), \u0022SRC20 token contract not registered\u0022);\r\n        require(newManager != address(0), \u0022newManager address is zero\u0022);\r\n\r\n        require(ISRC20Roles(_registry[src20].roles).transferManagement(newManager));\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev External function allowing consumers to check corresponding SRC20 amount\r\n     * to supplied SWM amount.\r\n     *\r\n     * @param src20 SRC20 token to check for.this\r\n     * @param swmValue SWM value.\r\n     * @return Amount of SRC20 tokens.\r\n     */\r\n    function calcTokens(address src20, uint256 swmValue) external view returns (uint256) {\r\n        return _calcTokens(src20, swmValue);\r\n    }\r\n\r\n    /**\r\n     * @dev External view function for calculating SWM tokens needed for increasing/decreasing\r\n     * src20 token supply.\r\n     *\r\n     * @param src20 Address of src20 contract\r\n     * @param srcValue Amount of src20 tokens.this\r\n     * @return Amount of SWM tokens\r\n     */\r\n    function swmNeeded(address src20, uint256 srcValue) external view returns (uint256) {\r\n        return _swmNeeded(src20, srcValue);\r\n    }\r\n\r\n    /**\r\n     * @dev External function for calculating how much SWM tokens are needed to be staked\r\n     * in order to get 1 SRC20 token\r\n     *\r\n     * @param src20 Address of src20 token contract\r\n     * @return Amount of SWM tokens\r\n     */\r\n    function getSrc20toSwmRatio(address src20) external returns (uint256) {\r\n        uint256 totalSupply = ISRC20(src20).totalSupply();\r\n        return totalSupply.mul(10 ** 18).div(_registry[src20].stake);\r\n    }\r\n\r\n    /**\r\n     * @dev External view function to get current SWM stake\r\n     *\r\n     * @param src20 Address of SRC20 token contract\r\n     * @return Current stake in wei SWM tokens\r\n     */\r\n    function getStake(address src20) external view returns (uint256) {\r\n        return _registry[src20].stake;\r\n    }\r\n\r\n    /**\r\n     * @dev Get address of token owner\r\n     *\r\n     * @param src20 Address of SRC20 token contract\r\n     * @return Address of token owner\r\n     */\r\n    function getTokenOwner(address src20) external view returns (address) {\r\n        return _registry[src20].owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function calculating new SRC20 values based on minted ones. On every\r\n     * new minting of supply new SWM and SRC20 values are saved for further calculations.\r\n     *\r\n     * @param src20 SRC20 token address.\r\n     * @param swmValue SWM stake value.\r\n     * @return Amount of SRC20 tokens.\r\n     */\r\n    function _calcTokens(address src20, uint256 swmValue) internal view returns (uint256) {\r\n        require(src20 != address(0), \u0022Token address is zero\u0022);\r\n        require(swmValue != 0, \u0022SWM value is zero\u0022);\r\n        require(_registry[src20].owner != address(0), \u0022SRC20 token contract not registered\u0022);\r\n\r\n        uint256 totalSupply = ISRC20(src20).totalSupply();\r\n\r\n        return swmValue.mul(totalSupply).div(_registry[src20].stake);\r\n    }\r\n\r\n    function _swmNeeded(address src20, uint256 srcValue) internal view returns (uint256) {\r\n        uint256 totalSupply = ISRC20(src20).totalSupply();\r\n\r\n        return srcValue.mul(_registry[src20].stake).div(totalSupply);\r\n    }\r\n\r\n    /**\r\n     * @return true if \u0060msg.sender\u0060 is the token owner of the registered SRC20 contract.\r\n     */\r\n    function _isTokenOwner(address src20) internal view returns (bool) {\r\n        return msg.sender == _registry[src20].owner;\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/ISRC20Registry.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n/**\r\n * @dev Interface for SRC20 Registry contract\r\n */\r\ncontract ISRC20Registry {\r\n    event FactoryAdded(address account);\r\n    event FactoryRemoved(address account);\r\n    event SRC20Registered(address token, address tokenOwner);\r\n    event SRC20Removed(address token);\r\n    event MinterAdded(address minter);\r\n    event MinterRemoved(address minter);\r\n\r\n    function put(address token, address roles, address tokenOwner, address minter) external returns (bool);\r\n    function remove(address token) external returns (bool);\r\n    function contains(address token) external view returns (bool);\r\n\r\n    function addMinter(address minter) external returns (bool);\r\n    function getMinter(address src20) external view returns (address);\r\n    function removeMinter(address minter) external returns (bool);\r\n\r\n    function addFactory(address account) external returns (bool);\r\n    function removeFactory(address account) external returns (bool);\r\n}\r\n\r\n// File: contracts/factories/SRC20Registry.sol\r\n\r\npragma solidity ^0.5.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev SRC20 registry contains the address of every created \r\n * SRC20 token. Registered factories can add addresses of\r\n * new tokens, public can query tokens.\r\n */\r\ncontract SRC20Registry is ISRC20Registry, Manager {\r\n    using Roles for Roles.Role;\r\n\r\n    Roles.Role private _factories;\r\n    mapping (address =\u003E bool) _authorizedMinters;\r\n\r\n    /**\r\n     * @dev constructor requiring SWM ERC20 contract address.\r\n     */\r\n    constructor(address swmERC20)\r\n        Manager(swmERC20)\r\n        public\r\n    {\r\n    }\r\n\r\n    /**\r\n     * @dev Adds new factory that can register token.\r\n     * Emits FactoryAdded event.\r\n     *\r\n     * @param account The factory contract address.\r\n     * @return True on success.\r\n     */\r\n    function addFactory(address account) external onlyOwner returns (bool) {\r\n        require(account != address(0), \u0022account is zero address\u0022);\r\n\r\n        _factories.add(account);\r\n\r\n        emit FactoryAdded(account);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Removes factory that can register token.\r\n     * Emits FactoryRemoved event.\r\n     *\r\n     * @param account The factory contract address.\r\n     * @return True on success.\r\n     */\r\n    function removeFactory(address account) external onlyOwner returns (bool) {\r\n        require(account != address(0), \u0022account is zero address\u0022);\r\n\r\n        _factories.remove(account);\r\n\r\n        emit FactoryRemoved(account);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds token to registry. Only factories can add.\r\n     * Emits SRC20Registered event.\r\n     *\r\n     * @param token The token address.\r\n     * @param roles roles SRC20Roles contract address.\r\n     * @param tokenOwner Owner of the token.\r\n     * @return True on success.\r\n     */\r\n    function put(address token, address roles, address tokenOwner, address minter) external returns (bool) {\r\n        require(token != address(0), \u0022token is zero address\u0022);\r\n        require(roles != address(0), \u0022roles is zero address\u0022);\r\n        require(tokenOwner != address(0), \u0022tokenOwner is zero address\u0022);\r\n        require(_factories.has(msg.sender), \u0022factory not registered\u0022);\r\n        require(_authorizedMinters[minter] == true, \u0027minter not authorized\u0027);\r\n\r\n        _registry[token].owner = tokenOwner;\r\n        _registry[token].roles = roles;\r\n        _registry[token].minter = minter;\r\n\r\n        emit SRC20Registered(token, tokenOwner);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Removes token from registry.\r\n     * Emits SRC20Removed event.\r\n     *\r\n     * @param token The token address.\r\n     * @return True on success.\r\n     */\r\n    function remove(address token) external onlyOwner returns (bool) {\r\n        require(token != address(0), \u0022token is zero address\u0022);\r\n        require(_registry[token].owner != address(0), \u0022token not registered\u0022);\r\n\r\n        delete _registry[token];\r\n\r\n        emit SRC20Removed(token);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Checks if registry contains token.\r\n     *\r\n     * @param token The token address.\r\n     * @return True if registry contains token.\r\n     */\r\n    function contains(address token) external view returns (bool) {\r\n        return _registry[token].owner != address(0);\r\n    }\r\n\r\n    /**\r\n     *  This proxy function adds a contract to the list of authorized minters\r\n     *\r\n     *  @param minter The address of the minter contract to add to the list of authorized minters\r\n     *  @return true on success\r\n     */\r\n    function addMinter(address minter) external onlyOwner returns (bool) {\r\n        require(minter != address(0), \u0022minter is zero address\u0022);\r\n\r\n        _authorizedMinters[minter] = true;\r\n\r\n        emit MinterAdded(minter);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     *  With this function you can fetch address of authorized minter for SRC20.\r\n     *\r\n     *  @param src20 Address of SRC20 token we want to check minters for.\r\n     *  @return address of authorized minter.\r\n     */\r\n    function getMinter(address src20) external view returns (address) {\r\n        return _registry[src20].minter;\r\n    }\r\n\r\n    /**\r\n     *  This proxy function removes a contract from the list of authorized minters\r\n     *\r\n     *  @param minter The address of the minter contract to remove from the list of authorized minters\r\n     *  @return true on success\r\n     */\r\n    function removeMinter(address minter) external onlyOwner returns (bool) {\r\n        require(minter != address(0), \u0022minter is zero address\u0022);\r\n\r\n        _authorizedMinters[minter] = false;\r\n\r\n        emit MinterRemoved(minter);\r\n\r\n        return true;\r\n    }\r\n}","ABI":"[{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022token\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022remove\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022addFactory\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022minter\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022removeMinter\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022removeFactory\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022src20\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022renounceManagement\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022src20\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022getSrc20toSwmRatio\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022src20\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022srcValue\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022swmNeeded\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022token\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022contains\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022src20\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022swmAccount\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022srcValue\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022increaseSupply\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022renounceOwnership\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022src20\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022getStake\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022src20\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022newManager\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022transferManagement\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022owner\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022isOwner\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022minter\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022addMinter\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022src20\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022swmValue\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022calcTokens\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022src20\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022swmAccount\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022swmValue\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022src20Value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022mintSupply\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022src20\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022getMinter\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022token\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022roles\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022tokenOwner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022minter\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022put\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022src20\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022getTokenOwner\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022src20\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022swmAccount\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022srcValue\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022decreaseSupply\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022transferOwnership\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[{\u0022name\u0022:\u0022swmERC20\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022constructor\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022src20\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022swmAccount\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022swmValue\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022src20Value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022SRC20SupplyMinted\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022src20\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022swmAccount\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022srcValue\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022SRC20SupplyIncreased\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022src20\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022swmAccount\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022srcValue\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022SRC20SupplyDecreased\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022previousOwner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022OwnershipTransferred\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022src20\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022swmAccount\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022swmValue\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022SRC20StakeIncreased\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022src20\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022swmAccount\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022swmValue\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022SRC20StakeDecreased\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022FactoryAdded\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022FactoryRemoved\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022token\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022tokenOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022SRC20Registered\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022token\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022SRC20Removed\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022minter\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022MinterAdded\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022minter\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022MinterRemoved\u0022,\u0022type\u0022:\u0022event\u0022}]","ContractName":"SRC20Registry","CompilerVersion":"v0.5.10\u002Bcommit.5a6ea5b1","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"0000000000000000000000003505f494c3f0fed0b594e01fa41dd3967645ca39","Library":"","SwarmSource":"bzzr://e24351b32becd2b68da57a9c0434cbd8e387a6e4414b3657695065fd138508f9"}]