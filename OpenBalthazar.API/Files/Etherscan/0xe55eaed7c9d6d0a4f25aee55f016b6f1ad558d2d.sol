[{"SourceCode":"pragma solidity ^0.5.11;\r\n\r\n\r\n/**\r\n * @dev Wrappers over Solidity\u0027s arithmetic operations with added overflow\r\n * checks.\r\n *\r\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\r\n * in bugs, because programmers usually assume that an overflow raises an\r\n * error, which is the standard behavior in high level programming languages.\r\n * \u0060SafeMath\u0060 restores this intuition by reverting the transaction when an\r\n * operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it\u0027s recommended to use it always.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060\u002B\u0060 operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a \u002B b;\r\n        require(c \u003E= a, \u0022SafeMath: addition overflow\u0022);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060-\u0060 operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b \u003C= a, \u0022SafeMath: subtraction overflow\u0022);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060*\u0060 operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\r\n        // benefit is lost if \u0027b\u0027 is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \u0022SafeMath: multiplication overflow\u0022);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060/\u0060 operator. Note: this function uses a\r\n     * \u0060revert\u0060 opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b \u003E 0, \u0022SafeMath: division by zero\u0022);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c \u002B a % b); // There is no case in which this doesn\u0027t hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060%\u0060 operator. This function uses a \u0060revert\u0060\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \u0022SafeMath: modulo by zero\u0022);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ninterface ERC20 {\r\n    function totalSupply() external view returns (uint supply);\r\n    function balanceOf(address _owner) external view returns (uint balance);\r\n    function transfer(address _to, uint _value) external returns (bool success);\r\n    function transferFrom(address _from, address _to, uint _value) external returns (bool success);\r\n    function approve(address _spender, uint256 _value) external returns (bool success);\r\n    function allowance(address _owner, address _spender) external view returns (uint remaining);\r\n    function decimals() external view returns(uint digits);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n}\r\n\r\n\r\n/// @title Kyber Network interface\r\ninterface KyberNetworkProxyInterface {\r\n    function getExpectedRate(ERC20 src, ERC20 dest, uint srcQty) external view returns (uint expectedRate, uint slippageRate);\r\n    function tradeWithHint(ERC20 src, uint srcAmount, ERC20 dest, address destAddress,\r\n            uint maxDestAmount, uint minConversionRate, address walletId, bytes calldata hint) external payable returns(uint);\r\n}\r\n\r\n\r\n/// @title Compound Finance interface\r\ninterface CERC20 {\r\n  function mint(uint mintAmount) external returns (uint);\r\n  function redeemUnderlying(uint redeemAmount) external returns (uint);\r\n  function borrow(uint borrowAmount) external returns (uint);\r\n  function repayBorrow(uint repayAmount) external returns (uint);\r\n  function borrowBalanceCurrent(address account) external returns (uint);\r\n  function exchangeRateCurrent() external returns (uint);\r\n\r\n  function balanceOf(address account) external view returns (uint);\r\n  function decimals() external view returns (uint);\r\n  function underlying() external view returns (address);\r\n}\r\n\r\n\r\n/// @title Ownable Contract\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original \u0060owner\u0060 of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor () internal {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @return the address of the owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \u0022caller must be the Contract Owner\u0022);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return true if \u0060msg.sender\u0060 is the owner of the contract.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to relinquish control of the contract.\r\n     * It will not be possible to call the functions with the \u0060onlyOwner\u0060\r\n     * modifier anymore.\r\n     * @notice Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \u0022New Owner must not be empty.\u0022);\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n/// @title Memento Fund Contract\r\ncontract Mementofund is Ownable {\r\n    using SafeMath for uint256;\r\n    \r\n    \r\n    \r\n    //variables\r\n    uint minRate;\r\n    // uint256 public totalFundsInDAI;\r\n    uint256 public developerFeeRate;\r\n    uint public managerTransactionFee;\r\n    uint public managerFundFee;\r\n    uint accountIndexMax;\r\n    uint userTokenCount;\r\n\r\n    //Events\r\n    event managerAddressUpdated(address newaddress);\r\n    event kybertrade(address _src, uint256 _amount, address _dest, uint256 _destqty);\r\n    event deposit(ERC20 _src, uint256 _amount);\r\n\r\n    // addresses\r\n    address public DAI_ADDR;\r\n    address payable public CDAI_ADDR;\r\n    address payable public KYBER_ADDR;\r\n    address payable public ADMIN_ADDR;\r\n    address payable public COMPOUND_ADDR;\r\n\r\n    // Interfaces\r\n    ERC20 internal dai;\r\n    KyberNetworkProxyInterface internal kyber;\r\n    CERC20 internal CDai;\r\n    bytes public constant PERM_HINT = \u0022PERM\u0022;\r\n\r\n    // Constants\r\n    ERC20 internal constant ETH_TOKEN_ADDRESS = ERC20(0x00eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee);\r\n    uint constant internal PRECISION = (10**18);\r\n    uint constant internal MAX_QTY   = (10**28); // 10B tokens\r\n    uint constant internal ETH_DECIMALS = 18;\r\n    uint constant internal MAX_DECIMALS = 18;\r\n\r\n    //Structs\r\n\r\n    struct Account{\r\n        address payable benefactorAddress;\r\n        string benefactorName;\r\n        address payable managerAddress;\r\n        address[] signatories;\r\n        uint creationDate;\r\n        uint unlockDate;\r\n        uint preUnlockMonthlyquota;\r\n\r\n    }\r\n\r\n\r\n    struct Investment{\r\n        uint256 timestamp;\r\n        address depositedBy;\r\n        address srcTokenAddress;\r\n        uint256 srcAmount;\r\n        address destTokenAddress;\r\n        uint256 destAmount;\r\n    }\r\n\r\n    struct Memory{\r\n        uint256 timestamp;\r\n        address depositedBy;\r\n        bytes ipfshash;\r\n        string memoryText;\r\n        string filetype;\r\n    }\r\n\r\n    //Mappings\r\n    //Account Tracking\r\n    mapping(address =\u003E mapping(uint =\u003E address)) public usertokenMapping;\r\n    mapping(address =\u003E uint) public userTokens;\r\n\r\n    mapping(address =\u003E mapping(address =\u003E uint256)) public userBalance;\r\n    mapping(address =\u003E Account) public accounts;\r\n    mapping(address =\u003E Investment[]) public userInvestments;\r\n    // mapping(address =\u003E address) uniswapExchange;\r\n\r\n    constructor(\r\n        address payable _adminAddr,\r\n        address _daiAddr,\r\n        address payable _kyberAddr,\r\n        address payable _cdaiAddr\r\n\r\n      ) public {\r\n\r\n        KYBER_ADDR = _kyberAddr;\r\n        ADMIN_ADDR = _adminAddr;\r\n        CDAI_ADDR = _cdaiAddr;\r\n        DAI_ADDR = _daiAddr;\r\n        dai = ERC20(DAI_ADDR);\r\n        CDai = CERC20(CDAI_ADDR);\r\n        kyber = KyberNetworkProxyInterface(_kyberAddr);\r\n        // compound = Compound(_compoundAddr);\r\n        \r\n        \r\n        bool daiApprovalResult = dai.approve(DAI_ADDR, 2**256-1);\r\n        require(daiApprovalResult, \u0022Failed to approve cDAI contract to spend DAI\u0022);\r\n      }\r\n\r\n    // Internal Utilities\r\n    modifier onlyFundAdmin() {\r\n        require(isFundAdmin(), \u0022Only Fund Manger is Authorised to execute that function.\u0022);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @return true if \u0060msg.sender\u0060 is the owner of the contract.\r\n     */\r\n    function isFundAdmin() public view returns (bool) {\r\n        return msg.sender == ADMIN_ADDR;\r\n    }\r\n\r\n\r\n    function isRegisteredBenefactor(address _account) public view returns (bool) {\r\n\r\n        if (accounts[_account].benefactorAddress != address(0x00)){\r\n        return  true;\r\n        }\r\n    }\r\n\r\n    function isAccountManager(address _account) public view returns (bool) {\r\n\r\n        if (accounts[_account].managerAddress == msg.sender){\r\n        return  true;\r\n        }\r\n    }\r\n    \r\n    \r\n    \r\n    function handleIndexes(address _account, address _token) internal {\r\n        if (userBalance[_account][_token] == 0x00) {\r\n                usertokenMapping[_account][userTokens[_account]] = _token;\r\n                userTokens[_account] \u002B= 1;\r\n            }\r\n    }\r\n\r\n\r\n\r\n    //Account Management Functions\r\n    function registerAccount(address payable _benefactorAddress, string memory _benefactorName,\r\n                             address payable _managerAddress, address[] memory _signatories, uint _unlockDate,\r\n                             uint _preUnlockMonthlyquota) public returns(bool) {\r\n\r\n        if (accounts[_benefactorAddress].benefactorAddress == address(0x00)){\r\n\r\n            Account storage account = accounts[_benefactorAddress];\r\n            account.benefactorAddress = _benefactorAddress;\r\n            account.benefactorName = _benefactorName;\r\n            account.managerAddress = _managerAddress;\r\n            account.signatories = _signatories;\r\n            account.creationDate = now;\r\n            account.unlockDate = _unlockDate;\r\n            account.preUnlockMonthlyquota = _preUnlockMonthlyquota;\r\n\r\n\r\n\r\n        }\r\n\r\n\r\n        }\r\n\r\n\r\n\r\n    // Kyber Trading Function\r\n    function _kybertrade(ERC20 _srcToken, uint256 _srcAmount, ERC20 _destToken)\r\n    internal\r\n    returns(\r\n      uint256 _actualDestAmount\r\n    )\r\n  {\r\n    require(_srcToken != _destToken, \u0022Source matches Destination.\u0022);\r\n    uint256 msgValue;\r\n    uint256 rate;\r\n\r\n    if (_srcToken != ETH_TOKEN_ADDRESS) {\r\n      msgValue = 0;\r\n      _srcToken.approve(KYBER_ADDR, 0);\r\n      _srcToken.approve(KYBER_ADDR, _srcAmount);\r\n    } else {\r\n      msgValue = _srcAmount;\r\n    }\r\n    (,rate) = kyber.getExpectedRate(_srcToken, _destToken, _srcAmount);\r\n    _actualDestAmount = kyber.tradeWithHint.value(msgValue)(\r\n      _srcToken,\r\n      _srcAmount,\r\n      _destToken,\r\n      address(uint160(address(this))),\r\n      MAX_QTY,\r\n      rate,\r\n      address(0),\r\n      PERM_HINT\r\n    );\r\n    require(_actualDestAmount \u003E 0, \u0022Destination value must be greater than 0\u0022);\r\n    if (_srcToken != ETH_TOKEN_ADDRESS) {\r\n      _srcToken.approve(KYBER_ADDR, 0);\r\n        }\r\n    }\r\n\r\n    function investEthToDai(address _account) public payable returns (bool) {\r\n        require(isRegisteredBenefactor(_account),\u0022Specified account must be registered.\u0022);\r\n\r\n        handleIndexes(_account, address(DAI_ADDR));\r\n\r\n        uint256 destqty = _kybertrade(ETH_TOKEN_ADDRESS, msg.value, dai);\r\n\r\n        userBalance[_account][address(DAI_ADDR)] = userBalance[_account][address(DAI_ADDR)].add(destqty);\r\n        userInvestments[_account].push(Investment({\r\n                                                timestamp: now,\r\n                                                depositedBy: msg.sender,\r\n                                                srcTokenAddress: address(ETH_TOKEN_ADDRESS),\r\n                                                srcAmount: msg.value,\r\n                                                destTokenAddress: address(DAI_ADDR),\r\n                                                destAmount: destqty\r\n                                                }));\r\n        emit kybertrade(address(ETH_TOKEN_ADDRESS), msg.value, DAI_ADDR, destqty);\r\n\r\n        return true;\r\n    }\r\n\r\n    function investEthToToken(address _account, ERC20 _token) external payable returns (bool) {\r\n        require(isRegisteredBenefactor(_account),\u0022Sepcified account must be registered\u0022);\r\n        handleIndexes(_account, address(_token));\r\n\r\n        uint256 destqty = _kybertrade(ETH_TOKEN_ADDRESS, msg.value, _token);\r\n        userBalance[_account][address(_token)] = userBalance[_account][address(_token)].add(destqty);\r\n        userInvestments[_account].push(Investment({\r\n                                                timestamp: now,\r\n                                                depositedBy: msg.sender,\r\n                                                srcTokenAddress: address(ETH_TOKEN_ADDRESS),\r\n                                                srcAmount: msg.value,\r\n                                                destTokenAddress: address(_token),\r\n                                                destAmount: destqty\r\n                                                }));\r\n        emit kybertrade(address(ETH_TOKEN_ADDRESS), msg.value, address(_token), destqty);\r\n        return true;\r\n    }\r\n\r\n    function investToken(address _account, ERC20 _token, uint256 _amount) external  returns (bool) {\r\n        require(isRegisteredBenefactor(_account),\u0022Specified account must be registered\u0022);\r\n\r\n        require(_token.balanceOf(msg.sender) \u003E= _amount, \u0022Sender balance Too Low.\u0022);\r\n        require(_token.approve(address(this), _amount), \u0022Fund not approved to transfer senders Token Balance\u0022);\r\n        require(_token.transfer(address(this), _amount), \u0022Sender hasn\u0027tr transferred tokens.\u0022);\r\n\r\n        handleIndexes(_account, address(_token));\r\n\r\n        userBalance[_account][address(_token)] = userBalance[_account][address(_token)].add(_amount);\r\n        userInvestments[_account].push(Investment({\r\n                                                timestamp: now,\r\n                                                depositedBy: msg.sender,\r\n                                                srcTokenAddress: address(_token),\r\n                                                srcAmount: _amount,\r\n                                                destTokenAddress: address(_token),\r\n                                                destAmount: _amount\r\n                                                }));\r\n        return true;\r\n    }\r\n\r\n    function investTokenToToken(address _account, ERC20 _token, uint256 _amount, ERC20 _dest) external  returns (bool) {\r\n        require(isRegisteredBenefactor(_account), \u0022Specified account must be registered\u0022);\r\n        require(_token.balanceOf(msg.sender) \u003E= _amount, \u0022Account token balance must be greater that spscified amount\u0022);\r\n        require(_token.approve(address(this), _amount), \u0022Contract must be approved to transfer Specified token\u0022);\r\n        require(_token.transfer(address(this), _amount), \u0022Specified Token must be tranferred from caller to contract\u0022);\r\n\r\n        handleIndexes(_account, address(_token));\r\n\r\n        uint destqty = _kybertrade(_token, _amount, _dest);\r\n        userBalance[_account][address(_token)] = userBalance[_account][address(_token)].add(destqty);\r\n        userInvestments[_account].push(Investment({\r\n                                                timestamp: now,\r\n                                                depositedBy: msg.sender,\r\n                                                srcTokenAddress: address(_token),\r\n                                                srcAmount: _amount,\r\n                                                destTokenAddress: address(_dest),\r\n                                                destAmount: destqty\r\n                                                }));\r\n        emit deposit(_dest, destqty);\r\n        return true;\r\n    }\r\n\r\n    function splitInvestEthToToken(address _account, address[] memory _tokens, uint[] memory _ratios) public payable {\r\n        require(isRegisteredBenefactor(_account),\u0022Specified account must be registered\u0022);\r\n        require(msg.value \u003E 0, \u0022Transaction must have ether value\u0022);\r\n        require(_tokens.length == _ratios.length, \u0022unmatched array lengths\u0022);\r\n\r\n        handleIndexes(_account, address(ETH_TOKEN_ADDRESS));\r\n\r\n        uint256 msgValue = msg.value;\r\n\r\n            require(_tokens.length \u003E 0, \u0022Array must be greater than 0.\u0022);\r\n            uint quotaTotal;\r\n            for (uint i = 0;i \u003C _tokens.length; i\u002B\u002B) {\r\n                quotaTotal = quotaTotal.add(quotaTotal);\r\n            }\r\n\r\n            require(quotaTotal \u003C 100, \u0022Split Total Greater than 100.\u0022);\r\n\r\n            for (uint i = 0; i \u003C _tokens.length; i\u002B\u002B) {\r\n                handleIndexes(_account, address(_tokens[i]));\r\n                uint256 quota = (msg.value * _ratios[i]) / 100;\r\n                require(quota \u003C msg.value, \u0022Quota Split greater than Message Value\u0022);\r\n                uint destqty = _kybertrade(ETH_TOKEN_ADDRESS, quota, ERC20(_tokens[i]));\r\n                userBalance[_account][address(_tokens[i])] = userBalance[_account][address(_tokens[i])].add(destqty);\r\n                userInvestments[_account].push(Investment({\r\n                                                timestamp: now,\r\n                                                depositedBy: msg.sender,\r\n                                                srcTokenAddress: address(ETH_TOKEN_ADDRESS),\r\n                                                srcAmount: quota,\r\n                                                destTokenAddress: address(_tokens[i]),\r\n                                                destAmount: destqty\r\n                                                }));\r\n                msgValue = msgValue.sub(quota);\r\n                emit kybertrade(address(ETH_TOKEN_ADDRESS),quota, address(_tokens[i]), destqty);\r\n            }\r\n        userBalance[_account][address(ETH_TOKEN_ADDRESS)] = userBalance[_account][address(ETH_TOKEN_ADDRESS)].add(msgValue);\r\n        userInvestments[_account].push(Investment({\r\n                                        timestamp: now,\r\n                                        depositedBy: msg.sender,\r\n                                        srcTokenAddress: address(ETH_TOKEN_ADDRESS),\r\n                                        srcAmount: msgValue,\r\n                                        destTokenAddress: address(ETH_TOKEN_ADDRESS),\r\n                                        destAmount: msgValue\r\n                                        }));\r\n    }\r\n\r\n    function swapTokenToEther (address _account, ERC20 _src, uint _amount) public {\r\n        require(isAccountManager(_account),\u0022Caller must be registered as an Account Manager\u0022);\r\n        uint destqty = _kybertrade(_src, _amount, ETH_TOKEN_ADDRESS);\r\n        userBalance[_account][address(_src)] = userBalance[_account][address(_src)].sub(_amount);\r\n        userBalance[_account][address(ETH_TOKEN_ADDRESS)] = userBalance[_account][address(ETH_TOKEN_ADDRESS)].add(destqty);\r\n\r\n        emit kybertrade(address(_src), _amount, address(ETH_TOKEN_ADDRESS), destqty);\r\n\r\n    }\r\n\r\n    function swapEtherToToken (address _account, ERC20 _dest, uint _amount) public {\r\n        require(isAccountManager(_account),\u0022Caller must be registered as an Account Manager\u0022);\r\n        uint destqty = _kybertrade(ETH_TOKEN_ADDRESS, _amount, _dest);\r\n        userBalance[_account][address(_dest)] = userBalance[_account][address(_dest)].add(destqty);\r\n        userBalance[_account][address(ETH_TOKEN_ADDRESS)] = userBalance[_account][address(ETH_TOKEN_ADDRESS)].sub(_amount);\r\n\r\n        emit kybertrade(address(ETH_TOKEN_ADDRESS), _amount, address(_dest), destqty);\r\n\r\n    }\r\n\r\n\r\n    function swapTokenToToken(address _account, ERC20 _src, uint256 _amount, ERC20 _dest) public {\r\n        require(isAccountManager(_account),\u0022Caller must be registered as an Account Manager\u0022);\r\n        uint destqty = _kybertrade(_src, _amount, _dest);\r\n        userBalance[_account][address(_src)] = userBalance[_account][address(_src)].sub(_amount);\r\n        userBalance[_account][address(_dest)] = userBalance[_account][address(_dest)].add(destqty);\r\n        emit kybertrade(address(_src), _amount, address(_dest), destqty);\r\n\r\n    }\r\n\r\n\r\n\r\n    //Fund Admin Functions\r\n    function updateAdminAddress(address payable _newaddress) external onlyFundAdmin returns (bool) {\r\n        require(_newaddress != address(0),\u0022New admin address must not be blank\u0022);\r\n        require(_newaddress != ADMIN_ADDR, \u0022New admin addres must not be current admin address\u0022);\r\n\r\n        ADMIN_ADDR = _newaddress;\r\n        emit managerAddressUpdated(_newaddress);\r\n\r\n    }\r\n\r\n    function updateDaiAddress(address payable _newaddress) external onlyFundAdmin returns (bool) {\r\n        require(_newaddress != address(0),\u0022New admin address must not be blank\u0022);\r\n        require(_newaddress != DAI_ADDR, \u0022New DAI Contract adress must not be current DAI Contract Address\u0022);\r\n\r\n        DAI_ADDR = _newaddress;\r\n\r\n    }\r\n\r\n    function updateKyberAddress(address payable _newaddress) external onlyFundAdmin returns (bool) {\r\n        require(_newaddress != address(0),\u0022New admin address must not be blank\u0022);\r\n        require(_newaddress != KYBER_ADDR, \u0022New KYBER Contract address must be different from old Contract Address\u0022);\r\n\r\n        KYBER_ADDR = _newaddress;\r\n\r\n    }\r\n\r\n\r\n    // function lend(address _account, )\r\n\r\n    function getBalance(address _account, ERC20 _token) public view returns(uint256) {\r\n        return userBalance[_account][address(_token)];\r\n    }\r\n\r\n\r\n    function withdraw(address payable _account, ERC20 _token, uint256 _amount) public {\r\n        require(isRegisteredBenefactor(address(_account)));\r\n        require(now \u003E accounts[_account].unlockDate);\r\n        require(userBalance[msg.sender][address(_token)] \u003E= _amount);\r\n        if (_token == ETH_TOKEN_ADDRESS) {\r\n                userBalance[msg.sender][address(_token)] = userBalance[msg.sender][address(_token)].sub(_amount);\r\n                msg.sender.transfer(_amount);\r\n        } else {\r\n                userBalance[msg.sender][address(_token)] = userBalance[msg.sender][address(_token)].sub(_amount);\r\n                _token.transfer(msg.sender, _amount);\r\n        }\r\n\r\n    }\r\n\r\n    function closeaccount(address payable _account) public {\r\n        require(isRegisteredBenefactor(_account));\r\n        require(block.timestamp \u003E accounts[_account].unlockDate);\r\n        require(userTokens[_account] \u003E 0, \u0022User Tokens must be greater than 0\u0022);\r\n\r\n\r\n\r\n        for (uint i = 0; i \u003C userTokens[msg.sender]; i\u002B\u002B) {\r\n            address token = usertokenMapping[msg.sender][i];\r\n            uint256 balance = userBalance[msg.sender][token];\r\n            withdraw(_account, ERC20(token), balance);\r\n        }\r\n\r\n\r\n    }\r\n\r\n    //Management functions\r\n\r\n\r\n    //fallback - send eth to manager so he can refund sender\r\n    function () external payable {\r\n        userBalance[ADMIN_ADDR][address(ETH_TOKEN_ADDRESS)] = userBalance[ADMIN_ADDR][address(ETH_TOKEN_ADDRESS)].add(msg.value);\r\n\r\n\r\n\r\n    }\r\n}","ABI":"[{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022developerFeeRate\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022managerFundFee\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address payable\u0022,\u0022name\u0022:\u0022_newaddress\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022updateKyberAddress\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_account\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022contract ERC20\u0022,\u0022name\u0022:\u0022_dest\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022swapEtherToToken\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022isRegisteredBenefactor\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address payable\u0022,\u0022name\u0022:\u0022_benefactorAddress\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022string\u0022,\u0022name\u0022:\u0022_benefactorName\u0022,\u0022type\u0022:\u0022string\u0022},{\u0022internalType\u0022:\u0022address payable\u0022,\u0022name\u0022:\u0022_managerAddress\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022address[]\u0022,\u0022name\u0022:\u0022_signatories\u0022,\u0022type\u0022:\u0022address[]\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_unlockDate\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_preUnlockMonthlyquota\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022registerAccount\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address payable\u0022,\u0022name\u0022:\u0022_newaddress\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022updateDaiAddress\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_account\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022contract ERC20\u0022,\u0022name\u0022:\u0022_token\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022investToken\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_account\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022contract ERC20\u0022,\u0022name\u0022:\u0022_src\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_amount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022contract ERC20\u0022,\u0022name\u0022:\u0022_dest\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022swapTokenToToken\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_account\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022contract ERC20\u0022,\u0022name\u0022:\u0022_token\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022investEthToToken\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:true,\u0022stateMutability\u0022:\u0022payable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022isFundAdmin\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022accounts\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022address payable\u0022,\u0022name\u0022:\u0022benefactorAddress\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022string\u0022,\u0022name\u0022:\u0022benefactorName\u0022,\u0022type\u0022:\u0022string\u0022},{\u0022internalType\u0022:\u0022address payable\u0022,\u0022name\u0022:\u0022managerAddress\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022creationDate\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022unlockDate\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022preUnlockMonthlyquota\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_account\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022address[]\u0022,\u0022name\u0022:\u0022_tokens\u0022,\u0022type\u0022:\u0022address[]\u0022},{\u0022internalType\u0022:\u0022uint256[]\u0022,\u0022name\u0022:\u0022_ratios\u0022,\u0022type\u0022:\u0022uint256[]\u0022}],\u0022name\u0022:\u0022splitInvestEthToToken\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:true,\u0022stateMutability\u0022:\u0022payable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022userBalance\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022renounceOwnership\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022managerTransactionFee\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address payable\u0022,\u0022name\u0022:\u0022_newaddress\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022updateAdminAddress\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022PERM_HINT\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bytes\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bytes\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022owner\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022isAccountManager\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022isOwner\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022userInvestments\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022timestamp\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022depositedBy\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022srcTokenAddress\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022srcAmount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022destTokenAddress\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022destAmount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022usertokenMapping\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022ADMIN_ADDR\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022address payable\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_account\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022contract ERC20\u0022,\u0022name\u0022:\u0022_token\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_amount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022contract ERC20\u0022,\u0022name\u0022:\u0022_dest\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022investTokenToToken\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022KYBER_ADDR\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022address payable\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022COMPOUND_ADDR\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022address payable\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_account\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022contract ERC20\u0022,\u0022name\u0022:\u0022_token\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022getBalance\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022DAI_ADDR\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address payable\u0022,\u0022name\u0022:\u0022_account\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022contract ERC20\u0022,\u0022name\u0022:\u0022_token\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022withdraw\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022CDAI_ADDR\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022address payable\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address payable\u0022,\u0022name\u0022:\u0022_account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022closeaccount\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_account\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022contract ERC20\u0022,\u0022name\u0022:\u0022_src\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022swapTokenToEther\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022userTokens\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022investEthToDai\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:true,\u0022stateMutability\u0022:\u0022payable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022transferOwnership\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address payable\u0022,\u0022name\u0022:\u0022_adminAddr\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_daiAddr\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022address payable\u0022,\u0022name\u0022:\u0022_kyberAddr\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022address payable\u0022,\u0022name\u0022:\u0022_cdaiAddr\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022constructor\u0022},{\u0022payable\u0022:true,\u0022stateMutability\u0022:\u0022payable\u0022,\u0022type\u0022:\u0022fallback\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022newaddress\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022managerAddressUpdated\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_src\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_amount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_dest\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_destqty\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022kybertrade\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022contract ERC20\u0022,\u0022name\u0022:\u0022_src\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022deposit\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022previousOwner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022OwnershipTransferred\u0022,\u0022type\u0022:\u0022event\u0022}]","ContractName":"Mementofund","CompilerVersion":"v0.5.11\u002Bcommit.c082d0b4","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000047259b700a4360146e4f359ce29ed8a7ef79a83000000000000000000000000089d24a6b4ccb1b6faa2625fe562bdd9a23260359000000000000000000000000818e6fecd516ecc3849daf6845e3ec868087b755000000000000000000000000f5dce57282a584d2746faf1593d3121fcac444dc","Library":"","SwarmSource":"bzzr://cdd4d6fc9c20dae8bc6c47455ca958dfc613cc750de93a0e46f461ce949a40dd"}]