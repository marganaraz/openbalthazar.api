[{"SourceCode":"pragma solidity ^0.5.8;\r\npragma experimental ABIEncoderV2;\r\n\r\ninterface ManagerLike {\r\n    function cdpCan(address, uint, address) external view returns (uint);\r\n    function ilks(uint) external view returns (bytes32);\r\n    function owns(uint) external view returns (address);\r\n    function urns(uint) external view returns (address);\r\n    function vat() external view returns (address);\r\n}\r\n\r\ninterface CdpsLike {\r\n    function getCdpsAsc(address, address) external view returns (uint[] memory, address[] memory, bytes32[] memory);\r\n}\r\n\r\ninterface VatLike {\r\n    function can(address, address) external view returns (uint);\r\n    function ilks(bytes32) external view returns (uint, uint, uint, uint, uint);\r\n    function dai(address) external view returns (uint);\r\n    function urns(bytes32, address) external view returns (uint, uint);\r\n\r\n}\r\n\r\ninterface JugLike {\r\n    function ilks(bytes32) external view returns (uint, uint);\r\n    function base() external view returns (uint);\r\n}\r\n\r\ninterface PotLike {\r\n    function dsr() external view returns (uint);\r\n    function pie(address) external view returns (uint);\r\n    function chi() external view returns (uint);\r\n}\r\n\r\ninterface SpotLike {\r\n    function ilks(bytes32) external view returns (PipLike, uint);\r\n}\r\n\r\ninterface PipLike {\r\n    function peek() external view returns (bytes32, bool);\r\n}\r\n\r\ninterface OtcInterface {\r\n    function getPayAmount(address, address, uint) external view returns (uint);\r\n}\r\n\r\ninterface InstaMcdAddress {\r\n    function manager() external view returns (address);\r\n    function dai() external view returns (address);\r\n    function daiJoin() external view returns (address);\r\n    function vat() external view returns (address);\r\n    function jug() external view returns (address);\r\n    function cat() external view returns (address);\r\n    function gov() external view returns (address);\r\n    function adm() external view returns (address);\r\n    function vow() external view returns (address);\r\n    function spot() external view returns (address);\r\n    function pot() external view returns (address);\r\n    function esm() external view returns (address);\r\n    function mcdFlap() external view returns (address);\r\n    function mcdFlop() external view returns (address);\r\n    function mcdDeploy() external view returns (address);\r\n    function mcdEnd() external view returns (address);\r\n    function proxyActions() external view returns (address);\r\n    function proxyActionsEnd() external view returns (address);\r\n    function proxyActionsDsr() external view returns (address);\r\n    function getCdps() external view returns (address);\r\n    function saiTub() external view returns (address);\r\n    function weth() external view returns (address);\r\n    function bat() external view returns (address);\r\n    function sai() external view returns (address);\r\n    function ethAJoin() external view returns (address);\r\n    function ethAFlip() external view returns (address);\r\n    function batAJoin() external view returns (address);\r\n    function batAFlip() external view returns (address);\r\n    function ethPip() external view returns (address);\r\n    function batAPip() external view returns (address);\r\n    function saiJoin() external view returns (address);\r\n    function saiFlip() external view returns (address);\r\n    function saiPip() external view returns (address);\r\n    function migration() external view returns (address payable);\r\n}\r\n\r\n\r\ncontract DSMath {\r\n\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x \u002B y) \u003E= x, \u0022math-not-safe\u0022);\r\n    }\r\n\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        z = x - y \u003C= x ? x - y : 0;\r\n    }\r\n\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, \u0022math-not-safe\u0022);\r\n    }\r\n\r\n    uint constant WAD = 10 ** 18;\r\n    uint constant RAY = 10 ** 27;\r\n\r\n    function rmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, y), RAY / 2) / RAY;\r\n    }\r\n\r\n    function wmul(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, y), WAD / 2) / WAD;\r\n    }\r\n\r\n    function rdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, RAY), y / 2) / y;\r\n    }\r\n\r\n    function wdiv(uint x, uint y) internal pure returns (uint z) {\r\n        z = add(mul(x, WAD), y / 2) / y;\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract Helpers is DSMath {\r\n    /**\r\n     * @dev get MakerDAO MCD Address contract\r\n     */\r\n    function getMcdAddresses() public pure returns (address mcd) {\r\n        mcd = 0xF23196DF1C440345DE07feFbe556a5eF0dcD29F0; \r\n    }\r\n\r\n    /**\r\n     * @dev get OTC Address\r\n     */\r\n    function getOtcAddress() public pure returns (address otcAddr) {\r\n        otcAddr = 0x39755357759cE0d7f32dC8dC45414CCa409AE24e; // main\r\n    }\r\n\r\n    address public mkrAddr = 0x39755357759cE0d7f32dC8dC45414CCa409AE24e; \r\n\r\n    struct CdpData {\r\n        uint id;\r\n        address owner;\r\n        bytes32 ilk;\r\n        uint ink;\r\n        uint art;\r\n        uint debt;\r\n        uint stabiltyRate;\r\n        uint price;\r\n        uint liqRatio;\r\n        address urn;\r\n    }\r\n\r\n}\r\n\r\n\r\ncontract McdResolver is Helpers {\r\n    function getDsr() external view returns (uint dsr) {\r\n        address pot = InstaMcdAddress(getMcdAddresses()).pot();\r\n        dsr = PotLike(pot).dsr();\r\n    }\r\n\r\n    function getDaiDeposited(address owner) external view returns (uint amt) {\r\n        address pot = InstaMcdAddress(getMcdAddresses()).pot();\r\n        uint chi = PotLike(pot).chi();\r\n        uint pie = PotLike(pot).pie(owner);\r\n        amt = rmul(pie,chi);\r\n    }\r\n\r\n    function getCdpsByAddress(address owner) external view returns (CdpData[] memory) {\r\n        (uint[] memory ids, address[] memory urns, bytes32[] memory ilks) = CdpsLike(InstaMcdAddress(getMcdAddresses()).getCdps()).getCdpsAsc(InstaMcdAddress(getMcdAddresses()).manager(), owner);\r\n        CdpData[] memory cdps = new CdpData[](ids.length);\r\n\r\n        for (uint i = 0; i \u003C ids.length; i\u002B\u002B) {\r\n            (uint ink, uint art) = VatLike(ManagerLike(InstaMcdAddress(getMcdAddresses()).manager()).vat()).urns(ilks[i], urns[i]);\r\n            (,uint rate, uint priceMargin,,) = VatLike(ManagerLike(InstaMcdAddress(getMcdAddresses()).manager()).vat()).ilks(ilks[i]);\r\n            uint mat = getIlkRatio(ilks[i]);\r\n            uint debt = rmul(art,rate);\r\n            uint price = rmul(priceMargin, mat);\r\n\r\n            cdps[i] = CdpData(\r\n                ids[i],\r\n                owner,\r\n                ilks[i],\r\n                ink,\r\n                art,\r\n                debt,\r\n                getFee(ilks[i]),\r\n                price,\r\n                mat,\r\n                urns[i]\r\n            );\r\n        }\r\n        return cdps;\r\n    }\r\n\r\n    function getCdpsById(uint id) external view returns (CdpData memory) {\r\n        address urn = ManagerLike(InstaMcdAddress(getMcdAddresses()).manager()).urns(id);\r\n        bytes32 ilk = ManagerLike(InstaMcdAddress(getMcdAddresses()).manager()).ilks(id);\r\n        address owner = ManagerLike(InstaMcdAddress(getMcdAddresses()).manager()).owns(id);\r\n\r\n        (uint ink, uint art) = VatLike(ManagerLike(InstaMcdAddress(getMcdAddresses()).manager()).vat()).urns(ilk, urn);\r\n        (,uint rate, uint priceMargin,,) = VatLike(ManagerLike(InstaMcdAddress(getMcdAddresses()).manager()).vat()).ilks(ilk);\r\n        uint debt = rmul(art,rate);\r\n\r\n        uint mat = getIlkRatio(ilk);\r\n        uint price = rmul(priceMargin, mat);\r\n\r\n        uint feeRate = getFee(ilk);\r\n        CdpData memory cdp = CdpData(\r\n            id,\r\n            owner,\r\n            ilk,\r\n            ink,\r\n            art,\r\n            debt,\r\n            feeRate,\r\n            price,\r\n            mat,\r\n            urn\r\n        );\r\n        return cdp;\r\n    }\r\n\r\n    function getFee(bytes32 ilk) public view returns (uint fee) {\r\n        address jug = InstaMcdAddress(getMcdAddresses()).jug();\r\n        (uint duty,) = JugLike(jug).ilks(ilk);\r\n        uint base = JugLike(jug).base();\r\n        fee = add(duty, base);\r\n    }\r\n\r\n    function getIlkPrice(bytes32 ilk) public view returns (uint price) {\r\n        address spot = InstaMcdAddress(getMcdAddresses()).spot();\r\n        address vat = InstaMcdAddress(getMcdAddresses()).vat();\r\n        (, uint mat) = SpotLike(spot).ilks(ilk);\r\n        (,,uint spotPrice,,) = VatLike(vat).ilks(ilk);\r\n        price = rmul(mat, spotPrice);\r\n    }\r\n\r\n    function getIlkRatio(bytes32 ilk) public view returns (uint ratio) {\r\n        address spot = InstaMcdAddress(getMcdAddresses()).spot();\r\n        (, ratio) = SpotLike(spot).ilks(ilk);\r\n    }\r\n\r\n    function getMkrToTknAmt(address tokenAddr, uint mkrAmt) public view returns (uint tknAmt) {\r\n        tknAmt = OtcInterface(getOtcAddress()).getPayAmount(tokenAddr, address(mkrAddr), mkrAmt);\r\n    }\r\n}","ABI":"[{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022tokenAddr\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022mkrAmt\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022getMkrToTknAmt\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022tknAmt\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022getDsr\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022dsr\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022mkrAddr\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022ilk\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022getIlkPrice\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022price\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022owner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022getDaiDeposited\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022amt\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022ilk\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022getIlkRatio\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022ratio\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022owner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022getCdpsByAddress\u0022,\u0022outputs\u0022:[{\u0022components\u0022:[{\u0022name\u0022:\u0022id\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022owner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022ilk\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022name\u0022:\u0022ink\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022art\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022debt\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022stabiltyRate\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022price\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022liqRatio\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022urn\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022tuple[]\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022getMcdAddresses\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022mcd\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022pure\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022id\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022getCdpsById\u0022,\u0022outputs\u0022:[{\u0022components\u0022:[{\u0022name\u0022:\u0022id\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022owner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022ilk\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022name\u0022:\u0022ink\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022art\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022debt\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022stabiltyRate\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022price\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022liqRatio\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022urn\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022tuple\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022getOtcAddress\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022otcAddr\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022pure\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022ilk\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022getFee\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022fee\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022}]","ContractName":"McdResolver","CompilerVersion":"v0.5.8\u002Bcommit.23d335f2","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://742b214a51b621f1977340cbc6c87fceeae71530b40521c8feb4aa09c50450b0"}]