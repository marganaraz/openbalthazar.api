[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\nlibrary SafeMath {\r\n  \r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a \u002B b;\r\n        require(c \u003E= a, \u0022SafeMath: addition overflow\u0022);\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b \u003C= a, \u0022SafeMath: subtraction overflow\u0022);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n    \r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \u0022SafeMath: multiplication overflow\u0022);\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b \u003E 0, \u0022SafeMath: division by zero\u0022);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n   \r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \u0022SafeMath: modulo by zero\u0022);\r\n        return a % b;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n  \r\n    function isContract(address account) internal view returns (bool) {\r\n     \r\n        uint256 size;\r\n        \r\n        assembly { size := extcodesize(account) }\r\n        return size \u003E 0;\r\n    }\r\n}\r\n\r\ninterface IERC1820Registry {\r\n   \r\n    function setManager(address account, address newManager) external;\r\n  \r\n    function getManager(address account) external view returns (address);\r\n \r\n    function setInterfaceImplementer(address account, bytes32 interfaceHash, address implementer) external;\r\n  \r\n    function getInterfaceImplementer(address account, bytes32 interfaceHash) external view returns (address);\r\n   \r\n    function interfaceHash(string calldata interfaceName) external pure returns (bytes32);\r\n   \r\n    function updateERC165Cache(address account, bytes4 interfaceId) external;\r\n\r\n    function implementsERC165Interface(address account, bytes4 interfaceId) external view returns (bool);\r\n\r\n    function implementsERC165InterfaceNoCache(address account, bytes4 interfaceId) external view returns (bool);\r\n\r\n    event InterfaceImplementerSet(address indexed account, bytes32 indexed interfaceHash, address indexed implementer);\r\n\r\n    event ManagerChanged(address indexed account, address indexed newManager);\r\n}\r\n\r\ninterface IERC777 {\r\n    \r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n   \r\n    function granularity() external view returns (uint256);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n  \r\n    function send(address recipient, uint256 amount, bytes calldata data) external;\r\n   \r\n    function burn(uint256 amount, bytes calldata data) external;\r\n   \r\n    function isOperatorFor(address operator, address tokenHolder) external view returns (bool);\r\n   \r\n    function authorizeOperator(address operator) external;\r\n    \r\n    function revokeOperator(address operator) external;\r\n\r\n    function defaultOperators() external view returns (address[] memory);\r\n\r\n    \r\n    function operatorSend(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount,\r\n        bytes calldata data,\r\n        bytes calldata operatorData\r\n    ) external;\r\n\r\n    function operatorBurn(\r\n        address account,\r\n        uint256 amount,\r\n        bytes calldata data,\r\n        bytes calldata operatorData\r\n    ) external;\r\n\r\n    event Sent(\r\n        address indexed operator,\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 amount,\r\n        bytes data,\r\n        bytes operatorData\r\n    );\r\n\r\n    event Minted(address indexed operator, address indexed to, uint256 amount, bytes data, bytes operatorData);\r\n\r\n    event Burned(address indexed operator, address indexed from, uint256 amount, bytes data, bytes operatorData);\r\n\r\n    event AuthorizedOperator(address indexed operator, address indexed tokenHolder);\r\n\r\n    event RevokedOperator(address indexed operator, address indexed tokenHolder);\r\n}\r\n\r\ninterface IERC777Recipient {\r\n    \r\n    function tokensReceived(\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint amount,\r\n        bytes calldata userData,\r\n        bytes calldata operatorData\r\n    ) external;\r\n}\r\n\r\ninterface IERC777Sender {\r\n   \r\n    function tokensToSend(\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint amount,\r\n        bytes calldata userData,\r\n        bytes calldata operatorData\r\n    ) external;\r\n}\r\n\r\ninterface IERC20 {\r\n    \r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n  \r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract ERC777 is IERC777, IERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    IERC1820Registry private _erc1820 = IERC1820Registry(0xc0cE3461c92D95b4E1D3ABeb5c9D378b1e418030);\r\n\r\n    mapping(address =\u003E uint256) private _balances;\r\n\r\n    uint256 private _totalSupply;\r\n    string private _name;\r\n    string private _symbol;\r\n    bytes32 constant private senderHash    = 0x29ddb589b1fb5fc7cf394961c1adf5f8c6454761adf795e67fe149f658abe895;\r\n    bytes32 constant private recipientHash = 0xb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b;\r\n\r\n    address[] private _defaultOperatorsArray;\r\n\r\n    mapping(address =\u003E bool) private _defaultOperators;\r\n    mapping(address =\u003E mapping(address =\u003E bool)) private _operators;\r\n    mapping(address =\u003E mapping(address =\u003E bool)) private _revokedDefaultOperators;\r\n    mapping (address =\u003E mapping (address =\u003E uint256)) private _allowances;\r\n\r\n     constructor(\r\n        string memory name,\r\n        string memory symbol,\r\n        address[] memory defaultOperators\r\n    ) public {\r\n        _name   = name;\r\n        _symbol = symbol;\r\n\r\n        _defaultOperatorsArray = defaultOperators;\r\n        for (uint256 i = 0; i \u003C _defaultOperatorsArray.length; i\u002B\u002B) {\r\n            _defaultOperators[_defaultOperatorsArray[i]] = true;\r\n        }\r\n        _erc1820.setInterfaceImplementer(address(this), keccak256(\u0022ERC777Token\u0022), address(this));\r\n        _erc1820.setInterfaceImplementer(address(this), keccak256(\u0022ERC20Token\u0022), address(this));\r\n    }\r\n\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n   function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n    function decimals() public pure returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    function granularity() public view returns (uint256) {\r\n        return 18;\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n function balanceOf(address tokenHolder) public view returns (uint256) {\r\n        return _balances[tokenHolder];\r\n    }\r\n    function send(address recipient, uint256 amount, bytes calldata data) external {\r\n        _send(msg.sender, msg.sender, recipient, amount, data, \u0022\u0022, true);\r\n    }\r\n    function transfer(address recipient, uint256 amount) external returns (bool) {\r\n        require(recipient != address(0), \u0022ERC777: transfer to the zero address\u0022);\r\n\r\n        address from = msg.sender;\r\n\r\n        _callTokensToSend(from, from, recipient, amount, \u0022\u0022, \u0022\u0022);\r\n\r\n        _move(from, from, recipient, amount, \u0022\u0022, \u0022\u0022);\r\n\r\n        _callTokensReceived(from, from, recipient, amount, \u0022\u0022, \u0022\u0022, false);\r\n\r\n        return true;\r\n    }\r\n\r\n     function burn(uint256 amount, bytes calldata data) external {\r\n        _burn(msg.sender, msg.sender, amount, data, \u0022\u0022);\r\n    }\r\n    \r\n    function isOperatorFor(\r\n        address operator,\r\n        address tokenHolder\r\n    ) public view returns (bool) {\r\n        return operator == tokenHolder ||\r\n            (_defaultOperators[operator] \u0026\u0026 !_revokedDefaultOperators[tokenHolder][operator]) ||\r\n            _operators[tokenHolder][operator];\r\n    }\r\n   function authorizeOperator(address operator) external {\r\n        require(msg.sender != operator, \u0022ERC777: authorizing self as operator\u0022);\r\n\r\n        if (_defaultOperators[operator]) {\r\n            delete _revokedDefaultOperators[msg.sender][operator];\r\n        } else {\r\n            _operators[msg.sender][operator] = true;\r\n        }\r\n\r\n        emit AuthorizedOperator(operator, msg.sender);\r\n    }\r\n\r\n     function revokeOperator(address operator) external {\r\n        require(operator != msg.sender, \u0022ERC777: revoking self as operator\u0022);\r\n\r\n        if (_defaultOperators[operator]) {\r\n            _revokedDefaultOperators[msg.sender][operator] = true;\r\n        } else {\r\n            delete _operators[msg.sender][operator];\r\n        }\r\n\r\n        emit RevokedOperator(operator, msg.sender);\r\n    }\r\n\r\n   function defaultOperators() public view returns (address[] memory) {\r\n        return _defaultOperatorsArray;\r\n    }\r\n\r\n   function operatorSend(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount,\r\n        bytes calldata data,\r\n        bytes calldata operatorData\r\n    )\r\n    external\r\n    {\r\n        require(isOperatorFor(msg.sender, sender), \u0022ERC777: caller is not an operator for holder\u0022);\r\n        _send(msg.sender, sender, recipient, amount, data, operatorData, true);\r\n    }\r\n\r\n  \r\n    function operatorBurn(address account, uint256 amount, bytes calldata data, bytes calldata operatorData) external {\r\n        require(isOperatorFor(msg.sender, account), \u0022ERC777: caller is not an operator for holder\u0022);\r\n        _burn(msg.sender, account, amount, data, operatorData);\r\n    }\r\n\r\n\r\n    function allowance(address holder, address spender) public view returns (uint256) {\r\n        return _allowances[holder][spender];\r\n    }\r\n\r\n\r\n    function approve(address spender, uint256 value) external returns (bool) {\r\n        address holder = msg.sender;\r\n        _approve(holder, spender, value);\r\n        return true;\r\n    }\r\n\r\n  \r\n    function transferFrom(address holder, address recipient, uint256 amount) external returns (bool) {\r\n        require(recipient != address(0), \u0022ERC777: transfer to the zero address\u0022);\r\n        require(holder != address(0), \u0022ERC777: transfer from the zero address\u0022);\r\n\r\n        address spender = msg.sender;\r\n\r\n        _callTokensToSend(spender, holder, recipient, amount, \u0022\u0022, \u0022\u0022);\r\n\r\n        _move(spender, holder, recipient, amount, \u0022\u0022, \u0022\u0022);\r\n        _approve(holder, spender, _allowances[holder][spender].sub(amount));\r\n\r\n        _callTokensReceived(spender, holder, recipient, amount, \u0022\u0022, \u0022\u0022, false);\r\n\r\n        return true;\r\n    }\r\n\r\n    function _mint(\r\n        address operator,\r\n        address account,\r\n        uint256 amount,\r\n        bytes memory userData,\r\n        bytes memory operatorData\r\n    )\r\n    internal\r\n    {\r\n        require(account != address(0), \u0022ERC777: mint to the zero address\u0022);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n\r\n        _callTokensReceived(operator, address(0), account, amount, userData, operatorData, true);\r\n\r\n        emit Minted(operator, account, amount, userData, operatorData);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    function _send(\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint256 amount,\r\n        bytes memory userData,\r\n        bytes memory operatorData,\r\n        bool requireReceptionAck\r\n    )\r\n        private\r\n    {\r\n        require(from != address(0), \u0022ERC777: send from the zero address\u0022);\r\n        require(to != address(0), \u0022ERC777: send to the zero address\u0022);\r\n\r\n        _callTokensToSend(operator, from, to, amount, userData, operatorData);\r\n\r\n        _move(operator, from, to, amount, userData, operatorData);\r\n\r\n        _callTokensReceived(operator, from, to, amount, userData, operatorData, requireReceptionAck);\r\n    }\r\n    \r\n    function _burn(\r\n        address operator,\r\n        address from,\r\n        uint256 amount,\r\n        bytes memory data,\r\n        bytes memory operatorData\r\n    )\r\n        private\r\n    {\r\n        require(from != address(0), \u0022ERC777: burn from the zero address\u0022);\r\n\r\n        _callTokensToSend(operator, from, address(0), amount, data, operatorData);\r\n\r\n\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        _balances[from] = _balances[from].sub(amount);\r\n\r\n        emit Burned(operator, from, amount, data, operatorData);\r\n        emit Transfer(from, address(0), amount);\r\n    }\r\n\r\n    function _move(\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint256 amount,\r\n        bytes memory userData,\r\n        bytes memory operatorData\r\n    )\r\n        private\r\n    {\r\n        _balances[from] = _balances[from].sub(amount);\r\n        _balances[to] = _balances[to].add(amount);\r\n\r\n        emit Sent(operator, from, to, amount, userData, operatorData);\r\n        emit Transfer(from, to, amount);\r\n    }\r\n\r\n    function _approve(address holder, address spender, uint256 value) private {\r\n           require(spender != address(0), \u0022ERC777: approve to the zero address\u0022);\r\n\r\n        _allowances[holder][spender] = value;\r\n        emit Approval(holder, spender, value);\r\n    }\r\n\r\n   function _callTokensToSend(\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint256 amount,\r\n        bytes memory userData,\r\n        bytes memory operatorData\r\n    )\r\n        private\r\n    {\r\n        address implementer = _erc1820.getInterfaceImplementer(from, senderHash);\r\n        if (implementer != address(0)) {\r\n            IERC777Sender(implementer).tokensToSend(operator, from, to, amount, userData, operatorData);\r\n        }\r\n    }\r\n\r\n     function _callTokensReceived(\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint256 amount,\r\n        bytes memory userData,\r\n        bytes memory operatorData,\r\n        bool requireReceptionAck\r\n    )\r\n        private\r\n    {\r\n        address implementer = _erc1820.getInterfaceImplementer(to, recipientHash);\r\n        if (implementer != address(0)) {\r\n            IERC777Recipient(implementer).tokensReceived(operator, from, to, amount, userData, operatorData);\r\n        } else if (requireReceptionAck) {\r\n            require(!to.isContract(), \u0022ERC777: token recipient contract has no implementer for ERC777TokensRecipient\u0022);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n//STARXtoken\u0027s smart contract\r\ncontract STARXtoken is ERC777 {\r\n      constructor () public ERC777(\u0022STARX\u0022, \u0022STARX\u0022, new address[](0)) {\r\n        _mint(msg.sender, msg.sender, 1000000000 * 10 ** 18, \u0022\u0022, \u0022\u0022);\r\n    }\r\n}","ABI":"[{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022defaultOperators\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address[]\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022name\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022spender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022approve\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022totalSupply\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022holder\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022recipient\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022transferFrom\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022decimals\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint8\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022pure\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022granularity\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022sender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022recipient\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022data\u0022,\u0022type\u0022:\u0022bytes\u0022},{\u0022name\u0022:\u0022operatorData\u0022,\u0022type\u0022:\u0022bytes\u0022}],\u0022name\u0022:\u0022operatorSend\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022tokenHolder\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022balanceOf\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022operator\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022authorizeOperator\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022symbol\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022recipient\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022data\u0022,\u0022type\u0022:\u0022bytes\u0022}],\u0022name\u0022:\u0022send\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022recipient\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022transfer\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022operator\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022tokenHolder\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022isOperatorFor\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022holder\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022spender\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022allowance\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022operator\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022revokeOperator\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022data\u0022,\u0022type\u0022:\u0022bytes\u0022},{\u0022name\u0022:\u0022operatorData\u0022,\u0022type\u0022:\u0022bytes\u0022}],\u0022name\u0022:\u0022operatorBurn\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022data\u0022,\u0022type\u0022:\u0022bytes\u0022}],\u0022name\u0022:\u0022burn\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022constructor\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022from\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022Transfer\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022owner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022spender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022Approval\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022operator\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022from\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022data\u0022,\u0022type\u0022:\u0022bytes\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022operatorData\u0022,\u0022type\u0022:\u0022bytes\u0022}],\u0022name\u0022:\u0022Sent\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022operator\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022data\u0022,\u0022type\u0022:\u0022bytes\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022operatorData\u0022,\u0022type\u0022:\u0022bytes\u0022}],\u0022name\u0022:\u0022Minted\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022operator\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022from\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022data\u0022,\u0022type\u0022:\u0022bytes\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022operatorData\u0022,\u0022type\u0022:\u0022bytes\u0022}],\u0022name\u0022:\u0022Burned\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022operator\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022tokenHolder\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022AuthorizedOperator\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022operator\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022tokenHolder\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022RevokedOperator\u0022,\u0022type\u0022:\u0022event\u0022}]","ContractName":"STARXtoken","CompilerVersion":"v0.5.0\u002Bcommit.1d4f565a","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://0d6f8c289051242d17a82681a73190da9c711de39d9a9aa1b806f564b6fc912d"}]