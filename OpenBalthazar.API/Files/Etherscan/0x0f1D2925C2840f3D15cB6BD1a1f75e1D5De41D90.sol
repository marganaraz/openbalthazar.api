[{"SourceCode":"pragma solidity ^0.5.10;\r\n\r\n// ----------------------------------------------------------------------------\r\n// PEG Stable Coin\r\n//\r\n// Symbol      : PEG\r\n// Name        : PEG Stable Coin\r\n// Decimals    : 18\r\n//\r\n// (c) Ciar\u00E1n \u00D3 hAol\u00E1in, Phil Maguire 2019. The MIT License.\r\n//\r\n// (c) BokkyPooBah / Bok Consulting Pty Ltd 2018. The MIT Licence.\r\n// ----------------------------------------------------------------------------\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// Safe maths\r\n// ----------------------------------------------------------------------------\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a \u002B b;\r\n        require(c \u003E= a);\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        require(b \u003C= a);\r\n        c = a - b;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a * b;\r\n        require(a == 0 || c / a == b);\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        require(b \u003E 0);\r\n        c = a / b;\r\n    }\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// ERC Token Standard #20 Interface\r\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\r\n// ----------------------------------------------------------------------------\r\ninterface ERC20Interface {\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address tokenOwner) external view returns (uint256 balance);\r\n    function allowance(address tokenOwner, address spender) external view returns (uint256 remaining);\r\n    function transfer(address to, uint256 tokens) external returns (bool success);\r\n    function approve(address spender, uint256 tokens) external returns (bool success);\r\n    function transferFrom(address from, address to, uint256 tokens) external returns (bool success);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint256 tokens);\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// Contract function to receive approval and execute function in one call\r\n//\r\n// Borrowed from MiniMeToken\r\n// ----------------------------------------------------------------------------\r\ninterface ApproveAndCallFallBack {\r\n    function receiveApproval(address from, uint256 tokens, address token, bytes calldata data) external;\r\n}\r\n\r\n\r\n// ----------------------------------------------------------------------------\r\n// Owned contract\r\n// ----------------------------------------------------------------------------\r\ncontract Owned {\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n// DAI Medianiser Interface\r\n// ----------------------------------------------------------------------------\r\ninterface MedianiserInterface {\r\n    function peek() external view returns (bytes32, bool);\r\n}\r\n\r\n// ----------------------------------------------------------------------------\r\n/// @title PEG Stable Coin\r\n/// @author Ciar\u00E1n \u00D3 hAol\u00E1in\r\n/// @notice This is the contract for the PEG Stable Coin\r\n/// @dev Defines an ERC20 token which manages the PEG token and its ETH pool\r\n// ----------------------------------------------------------------------------\r\ncontract PEG is ERC20Interface, Owned {\r\n    using SafeMath for uint;\r\n\r\n    string public symbol;\r\n    string public  name;\r\n    uint8 public decimals;\r\n    uint256 _totalSupply;\r\n    uint256 lastPriceAdjustment;\r\n    uint256 timeBetweenPriceAdjustments;\r\n\r\n    mapping(address =\u003E uint) balances;\r\n    mapping(address =\u003E mapping(address =\u003E uint)) allowed;\r\n    \r\n    MedianiserInterface medianiser;\r\n    \r\n    event Burn(address indexed tokenOwner, uint256 tokens);\r\n    event gotPEG(address indexed caller, uint256 amountGivenEther, uint256 amountReceivedPEG);\r\n    event gotEther(address indexed caller, uint256 amountGivenPEG, uint256 amountReceivedEther);\r\n    event Inflate(uint256 previousPoolSize, uint256 amountMinted);\r\n    event Deflate(uint256 previousPoolSize, uint256 amountBurned);\r\n    event NoAdjustment();\r\n    event FailedAdjustment();\r\n\r\n    \r\n    /// @notice This creates the PEG Stable Coin and creates PEG tokens for the pool\r\n    /// @dev Contract constructor which accepts no parameters\r\n    constructor() payable public {\r\n        symbol = \u0022PEG\u0022;\r\n        name = \u0022PEG Stablecoin\u0022;\r\n        decimals = 18;\r\n        lastPriceAdjustment = now;\r\n        timeBetweenPriceAdjustments = 60*60;\r\n        \r\n        medianiser = MedianiserInterface(0x729D19f657BD0614b4985Cf1D82531c67569197B);\r\n        \r\n        uint256 feedPrice;\r\n        bool priceIsValid;\r\n        (feedPrice, priceIsValid) = getPriceETH_USD();\r\n        require(priceIsValid);\r\n        \r\n        _totalSupply = feedPrice.mul(address(this).balance).div(10**uint(decimals));\r\n        balances[address(this)] = _totalSupply;\r\n        emit Transfer(address(0), address(this), _totalSupply);\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    /// @notice Get the current total supply of PEG tokens\r\n    /// @dev Get the current total supply of PEG tokens\r\n    /// @return total supply of PEG tokens\r\n    // ------------------------------------------------------------------------\r\n    function totalSupply() public view returns (uint) {\r\n        return _totalSupply;\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    /// @notice Get the PEG balance of a given address\r\n    /// @dev Get the PEG balance of a given address\r\n    /// @param tokenOwner The address to find the PEG balance of\r\n    /// @return PEG balance of tokenOwner\r\n    // ------------------------------------------------------------------------\r\n    function balanceOf(address tokenOwner) public view returns (uint256 balance) {\r\n        return balances[tokenOwner];\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    /// @notice Transfer PEG tokens from a user to another user. Doesn\u0027t allow transfers to 0x0 address (use burn())\r\n    /// @dev Transfer PEG tokens from a user to another user. Doesn\u0027t allow transfers to 0x0 address (use burn())\r\n    /// @param to Address to send tokens to\r\n    /// @param tokens Quantity of tokens to send\r\n    /// @return true if transfer is successful\r\n    // ------------------------------------------------------------------------\r\n    function transfer(address to, uint256 tokens) public returns (bool success) {\r\n        require(to != address(0));\r\n        if (to == address(this)) getEther(tokens);\r\n        else {\r\n            balances[msg.sender] = balances[msg.sender].sub(tokens);\r\n            balances[to] = balances[to].add(tokens);\r\n            emit Transfer(msg.sender, to, tokens);\r\n        }\r\n        return true;\r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    /// @notice Burn PEG Tokens\r\n    /// @dev Burn PEG Tokens\r\n    /// @param tokens Quantity of tokens to burn\r\n    /// @return true if burn is successful\r\n    // ------------------------------------------------------------------------\r\n    function burn(uint256 tokens) public returns (bool success) {\r\n        _totalSupply = _totalSupply.sub(tokens);\r\n        balances[msg.sender] -= balances[msg.sender].sub(tokens);\r\n        emit Burn(msg.sender, tokens);\r\n        return true;\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    /// @notice Token owner can approve for \u0060spender\u0060 to \u0060transferFrom(...)\u0060 \u0060tokens\u0060 from the token owner\u0027s account\r\n    /// @dev Token owner can approve for \u0060spender\u0060 to \u0060transferFrom(...)\u0060 \u0060tokens\u0060 from the token owner\u0027s account\r\n    /// @param spender Address to authorise to spend tokens on your behalf\r\n    /// @param tokens Quantity of tokens to authorise for spending\r\n    /// @return true if approval is successful\r\n    // ------------------------------------------------------------------------\r\n    function approve(address spender, uint256 tokens) public returns (bool success) {\r\n        allowed[msg.sender][spender] = tokens;\r\n        emit Approval(msg.sender, spender, tokens);\r\n        return true;\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    /// @notice Transfer \u0060tokens\u0060 from the \u0060from\u0060 account to the \u0060to\u0060 account. Caller must be approved to spend these funds.\r\n    /// @dev Transfer \u0060tokens\u0060 from the \u0060from\u0060 account to the \u0060to\u0060 account. Caller must be approved to spend these funds.\r\n    /// @param from Address to transfer tokens from\r\n    /// @param to Address tokens will be transferred to\r\n    /// @param tokens Quantity of tokens to transfer (must be approvedd by \u0060to\u0060 address)\r\n    /// @return true if approval is successful\r\n    // ------------------------------------------------------------------------\r\n    function transferFrom(address from, address to, uint256 tokens) public returns (bool success) {\r\n        balances[from] = balances[from].sub(tokens);\r\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\r\n        balances[to] = balances[to].add(tokens);\r\n        emit Transfer(from, to, tokens);\r\n        return true;\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    /// @notice Get the amount of tokens approved by an address \u0060tokenOwner\u0060 for use by \u0060spender\u0060\r\n    /// @dev Get the amount of tokens approved by an address \u0060tokenOwner\u0060 for use by \u0060spender\u0060\r\n    /// @param tokenOwner The address owner whose tokens we want to verify approval for\r\n    /// @param spender The address of the potentially approved spender\r\n    /// @return the amount of PEG \u0060spender\u0060 is approved to transfer on behalf of \u0060tokenOwner\u0060\r\n    // ------------------------------------------------------------------------\r\n    function allowance(address tokenOwner, address spender) public view returns (uint256 allowancePEG) {\r\n        return allowed[tokenOwner][spender];\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    /// @notice Token owner can approve for \u0060spender\u0060 to transferFrom(...) \u0060tokens\u0060 from the token owner\u0027s account. The \u0060spender\u0060 contract function \u0060receiveApproval(...)\u0060 is then executed\r\n    /// @dev Token owner can approve for \u0060spender\u0060 to transferFrom(...) \u0060tokens\u0060 from the token owner\u0027s account. The \u0060spender\u0060 contract function \u0060receiveApproval(...)\u0060 is then executed\r\n    /// @param spender The contract address to be approved\r\n    /// @param tokens The number of tokens the caller is approving for \u0060spender\u0060 to use\r\n    /// @param data The function call data provided to \u0060spender.receiveApproval()\u0060\r\n    // ------------------------------------------------------------------------\r\n    function approveAndCall(address spender, uint256 tokens, bytes memory data) public returns (bool success) {\r\n        allowed[msg.sender][spender] = tokens;\r\n        emit Approval(msg.sender, spender, tokens);\r\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);\r\n        return true;\r\n    }\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Don\u0027t accept ETH through the fallback function, since we need gas!\r\n    // ------------------------------------------------------------------------\r\n    function () external payable {\r\n        getPEG();\r\n    }\r\n    \r\n    modifier canTriggerPriceAdjustment {\r\n        _;\r\n        if (now \u003E= lastPriceAdjustment \u002B timeBetweenPriceAdjustments) priceFeedAdjustment();\r\n    }\r\n    \r\n    function getNextPriceAdjustmentTime() public view returns (uint256 nextPriceAdjustmentTime) {\r\n        if (now \u003E= lastPriceAdjustment \u002B timeBetweenPriceAdjustments) return 0;\r\n        else return lastPriceAdjustment \u002B timeBetweenPriceAdjustments - now;\r\n    }\r\n    \r\n    function getPEG() public payable canTriggerPriceAdjustment returns (bool success, uint256 amountReceivedPEG) {\r\n        amountReceivedPEG = balances[address(this)].mul(msg.value.mul(10**5).div(address(this).balance)).div(10**5);\r\n        balances[address(this)] = balances[address(this)].sub(amountReceivedPEG);\r\n        balances[msg.sender] = balances[msg.sender].add(amountReceivedPEG);\r\n        emit gotPEG(msg.sender, msg.value, amountReceivedPEG);\r\n        emit Transfer(address(this), msg.sender, amountReceivedPEG);\r\n        return (true, amountReceivedPEG);\r\n    }\r\n    \r\n    function getEther(uint256 amountGivenPEG) public canTriggerPriceAdjustment returns (bool success, uint256 amountReceivedEther) {\r\n        amountReceivedEther = address(this).balance.mul(amountGivenPEG.mul(10**5).div(balanceOf(address(this)).add(amountGivenPEG))).div(10**5);\r\n        balances[address(this)] = balances[address(this)].add(amountGivenPEG);\r\n        balances[msg.sender] = balances[msg.sender].sub(amountGivenPEG);\r\n        emit gotEther(msg.sender, amountGivenPEG, amountReceivedEther);\r\n        emit Transfer(msg.sender, address(this), amountGivenPEG);\r\n        msg.sender.transfer(amountReceivedEther);\r\n        return (true, amountReceivedEther);\r\n    }\r\n    \r\n    function getPoolBalances() public view returns (uint256 balanceETH, uint256 balancePEG) {\r\n        return (address(this).balance, balanceOf(address(this)));\r\n    }\r\n    \r\n    function inflateEtherPool() public payable returns (bool success) {\r\n        return true;\r\n    }\r\n    \r\n    function getPriceETH_USD() public view returns (uint256 priceETH_USD, bool priceIsValid) {\r\n        bytes32 price;\r\n        (price, priceIsValid) = medianiser.peek();\r\n        return (uint(price), priceIsValid);\r\n    }\r\n    \r\n    function priceFeedAdjustment() private returns (uint256 newRatePEG) {\r\n        uint256 feedPrice;\r\n        bool priceIsValid;\r\n        (feedPrice, priceIsValid) = getPriceETH_USD();\r\n        \r\n        if (!priceIsValid) {\r\n            newRatePEG = balances[address(this)];\r\n            lastPriceAdjustment = now;\r\n            emit FailedAdjustment();\r\n            return (newRatePEG);\r\n        }\r\n        \r\n        feedPrice = feedPrice.mul(address(this).balance).div(10**uint(decimals));\r\n        if (feedPrice \u003E balances[address(this)]) {\r\n            uint256 posDelta = feedPrice.sub(balances[address(this)]).div(10);\r\n            newRatePEG = balances[address(this)].add(posDelta);\r\n            emit Inflate(balances[address(this)], posDelta);\r\n            emit Transfer(address(0), address(this), posDelta);\r\n            balances[address(this)] = newRatePEG;\r\n            _totalSupply = _totalSupply.add(posDelta);\r\n        } else if (feedPrice \u003C balances[address(this)]) {\r\n            uint256 negDelta = balances[address(this)].sub(feedPrice).div(10);\r\n            newRatePEG = balances[address(this)].sub(negDelta);\r\n            emit Deflate(balances[address(this)], negDelta);\r\n            emit Transfer(address(this), address(0), negDelta);\r\n            balances[address(this)] = newRatePEG;\r\n            _totalSupply = _totalSupply.sub(negDelta);\r\n        } else {\r\n            newRatePEG = balances[address(this)];\r\n            emit NoAdjustment();\r\n        }\r\n        lastPriceAdjustment = now;\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Owner can transfer out any accidentally sent ERC20 tokens\r\n    // ------------------------------------------------------------------------\r\n    function transferAnyERC20Token(address tokenAddress, uint256 tokens) public onlyOwner returns (bool success) {\r\n        return ERC20Interface(tokenAddress).transfer(owner, tokens);\r\n    }\r\n    \r\n    function dumpContractCode() public view returns (bytes memory o_code) {\r\n        address _addr = address(this);\r\n        assembly {\r\n            let size := extcodesize(_addr)\r\n            o_code := mload(0x40)\r\n            mstore(0x40, add(o_code, and(add(add(size, 0x20), 0x1f), not(0x1f))))\r\n            mstore(o_code, size)\r\n            extcodecopy(_addr, add(o_code, 0x20), 0, size)\r\n        }\r\n    }\r\n}","ABI":"[{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022name\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022spender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022tokens\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022approve\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022success\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022getPEG\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022success\u0022,\u0022type\u0022:\u0022bool\u0022},{\u0022name\u0022:\u0022amountReceivedPEG\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:true,\u0022stateMutability\u0022:\u0022payable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022dumpContractCode\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022o_code\u0022,\u0022type\u0022:\u0022bytes\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022totalSupply\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022from\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022tokens\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022transferFrom\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022success\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022decimals\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint8\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022getNextPriceAdjustmentTime\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022nextPriceAdjustmentTime\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022tokens\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022burn\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022success\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022getPoolBalances\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022balanceETH\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022balancePEG\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022tokenOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022balanceOf\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022balance\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022acceptOwnership\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022owner\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022symbol\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022tokens\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022transfer\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022success\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022inflateEtherPool\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022success\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:true,\u0022stateMutability\u0022:\u0022payable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022spender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022tokens\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022data\u0022,\u0022type\u0022:\u0022bytes\u0022}],\u0022name\u0022:\u0022approveAndCall\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022success\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022newOwner\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022tokenAddress\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022tokens\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022transferAnyERC20Token\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022success\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022tokenOwner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022spender\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022allowance\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022allowancePEG\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022getPriceETH_USD\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022priceETH_USD\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022priceIsValid\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022amountGivenPEG\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022getEther\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022success\u0022,\u0022type\u0022:\u0022bool\u0022},{\u0022name\u0022:\u0022amountReceivedEther\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022transferOwnership\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[],\u0022payable\u0022:true,\u0022stateMutability\u0022:\u0022payable\u0022,\u0022type\u0022:\u0022constructor\u0022},{\u0022payable\u0022:true,\u0022stateMutability\u0022:\u0022payable\u0022,\u0022type\u0022:\u0022fallback\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022tokenOwner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022tokens\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022Burn\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022caller\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022amountGivenEther\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022amountReceivedPEG\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022gotPEG\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022caller\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022amountGivenPEG\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022amountReceivedEther\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022gotEther\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022previousPoolSize\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022amountMinted\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022Inflate\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022previousPoolSize\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022amountBurned\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022Deflate\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022NoAdjustment\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022FailedAdjustment\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022_from\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022_to\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022OwnershipTransferred\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022from\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022tokens\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022Transfer\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022tokenOwner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022spender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022tokens\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022Approval\u0022,\u0022type\u0022:\u0022event\u0022}]","ContractName":"PEG","CompilerVersion":"v0.5.10\u002Bcommit.5a6ea5b1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://da538fa871bb2b1ff4a44b4218dacc38a24368719cc12e89abb9e47520d01e11"}]