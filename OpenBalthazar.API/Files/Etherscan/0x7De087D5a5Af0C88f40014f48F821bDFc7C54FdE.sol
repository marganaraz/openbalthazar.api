[{"SourceCode":"// Created using Token Wizard https://github.com/poanetwork/token-wizard by POA Network \r\n// Temporarily have SafeMath here until all contracts have been migrated to SafeMathLib version from OpenZeppelin\r\n\r\npragma solidity ^0.4.8;\r\n\r\n\r\n/**\r\n * Math operations with safety checks\r\n */\r\ncontract SafeMath {\r\n  function safeMul(uint a, uint b) internal returns (uint) {\r\n    uint c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function safeDiv(uint a, uint b) internal returns (uint) {\r\n    assert(b \u003E 0);\r\n    uint c = a / b;\r\n    assert(a == b * c \u002B a % b);\r\n    return c;\r\n  }\r\n\r\n  function safeSub(uint a, uint b) internal returns (uint) {\r\n    assert(b \u003C= a);\r\n    return a - b;\r\n  }\r\n\r\n  function safeAdd(uint a, uint b) internal returns (uint) {\r\n    uint c = a \u002B b;\r\n    assert(c\u003E=a \u0026\u0026 c\u003E=b);\r\n    return c;\r\n  }\r\n\r\n  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a \u003E= b ? a : b;\r\n  }\r\n\r\n  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n    return a \u003C b ? a : b;\r\n  }\r\n\r\n  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a \u003E= b ? a : b;\r\n  }\r\n\r\n  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n    return a \u003C b ? a : b;\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title ERC20Basic\r\n * @dev Simpler version of ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/179\r\n */\r\ncontract ERC20Basic {\r\n  uint256 public totalSupply;\r\n  function balanceOf(address who) public constant returns (uint256);\r\n  function transfer(address to, uint256 value) public returns (bool);\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n/**\r\n * This smart contract code is Copyright 2017 TokenMarket Ltd. For more information see https://tokenmarket.net\r\n *\r\n * Licensed under the Apache License, version 2.0: https://github.com/TokenMarketNet/ico/blob/master/LICENSE.txt\r\n */\r\n\r\n\r\n\r\n/**\r\n * Safe unsigned safe math.\r\n *\r\n * https://blog.aragon.one/library-driven-development-in-solidity-2bebcaf88736#.750gwtwli\r\n *\r\n * Originally from https://raw.githubusercontent.com/AragonOne/zeppelin-solidity/master/contracts/SafeMathLib.sol\r\n *\r\n * Maintained here until merged to mainline zeppelin-solidity.\r\n *\r\n */\r\nlibrary SafeMathLibExt {\r\n\r\n  function times(uint a, uint b) returns (uint) {\r\n    uint c = a * b;\r\n    assert(a == 0 || c / a == b);\r\n    return c;\r\n  }\r\n\r\n  function divides(uint a, uint b) returns (uint) {\r\n    assert(b \u003E 0);\r\n    uint c = a / b;\r\n    assert(a == b * c \u002B a % b);\r\n    return c;\r\n  }\r\n\r\n  function minus(uint a, uint b) returns (uint) {\r\n    assert(b \u003C= a);\r\n    return a - b;\r\n  }\r\n\r\n  function plus(uint a, uint b) returns (uint) {\r\n    uint c = a \u002B b;\r\n    assert(c\u003E=a);\r\n    return c;\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \u0022user permissions\u0022.\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original \u0060owner\u0060 of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner public {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n/**\r\n * This smart contract code is Copyright 2017 TokenMarket Ltd. For more information see https://tokenmarket.net\r\n *\r\n * Licensed under the Apache License, version 2.0: https://github.com/TokenMarketNet/ico/blob/master/LICENSE.txt\r\n */\r\n\r\n\r\n\r\n/**\r\n * This smart contract code is Copyright 2017 TokenMarket Ltd. For more information see https://tokenmarket.net\r\n *\r\n * Licensed under the Apache License, version 2.0: https://github.com/TokenMarketNet/ico/blob/master/LICENSE.txt\r\n */\r\n\r\n\r\n\r\n\r\n/**\r\n * This smart contract code is Copyright 2017 TokenMarket Ltd. For more information see https://tokenmarket.net\r\n *\r\n * Licensed under the Apache License, version 2.0: https://github.com/TokenMarketNet/ico/blob/master/LICENSE.txt\r\n */\r\n\r\n\r\n\r\n\r\n\r\n/*\r\n * Haltable\r\n *\r\n * Abstract contract that allows children to implement an\r\n * emergency stop mechanism. Differs from Pausable by causing a throw when in halt mode.\r\n *\r\n *\r\n * Originally envisioned in FirstBlood ICO contract.\r\n */\r\ncontract Haltable is Ownable {\r\n  bool public halted;\r\n\r\n  modifier stopInEmergency {\r\n    if (halted) throw;\r\n    _;\r\n  }\r\n\r\n  modifier stopNonOwnersInEmergency {\r\n    if (halted \u0026\u0026 msg.sender != owner) throw;\r\n    _;\r\n  }\r\n\r\n  modifier onlyInEmergency {\r\n    if (!halted) throw;\r\n    _;\r\n  }\r\n\r\n  // called by the owner on emergency, triggers stopped state\r\n  function halt() external onlyOwner {\r\n    halted = true;\r\n  }\r\n\r\n  // called by the owner on end of emergency, returns to normal state\r\n  function unhalt() external onlyOwner onlyInEmergency {\r\n    halted = false;\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * This smart contract code is Copyright 2017 TokenMarket Ltd. For more information see https://tokenmarket.net\r\n *\r\n * Licensed under the Apache License, version 2.0: https://github.com/TokenMarketNet/ico/blob/master/LICENSE.txt\r\n */\r\n\r\n\r\n\r\n/**\r\n * Interface for defining crowdsale pricing.\r\n */\r\ncontract PricingStrategy {\r\n\r\n  address public tier;\r\n\r\n  /** Interface declaration. */\r\n  function isPricingStrategy() public constant returns (bool) {\r\n    return true;\r\n  }\r\n\r\n  /** Self check if all references are correctly set.\r\n   *\r\n   * Checks that pricing strategy matches crowdsale parameters.\r\n   */\r\n  function isSane(address crowdsale) public constant returns (bool) {\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev Pricing tells if this is a presale purchase or not.\r\n     @param purchaser Address of the purchaser\r\n     @return False by default, true if a presale purchaser\r\n   */\r\n  function isPresalePurchase(address purchaser) public constant returns (bool) {\r\n    return false;\r\n  }\r\n\r\n  /* How many weis one token costs */\r\n  function updateRate(uint newOneTokenInWei) public;\r\n\r\n  /**\r\n   * When somebody tries to buy tokens for X eth, calculate how many tokens they get.\r\n   *\r\n   *\r\n   * @param value - What is the value of the transaction send in as wei\r\n   * @param tokensSold - how much tokens have been sold this far\r\n   * @param weiRaised - how much money has been raised this far in the main token sale - this number excludes presale\r\n   * @param msgSender - who is the investor of this transaction\r\n   * @param decimals - how many decimal units the token has\r\n   * @return Amount of tokens the investor receives\r\n   */\r\n  function calculatePrice(uint value, uint weiRaised, uint tokensSold, address msgSender, uint decimals) public constant returns (uint tokenAmount);\r\n}\r\n\r\n/**\r\n * This smart contract code is Copyright 2017 TokenMarket Ltd. For more information see https://tokenmarket.net\r\n *\r\n * Licensed under the Apache License, version 2.0: https://github.com/TokenMarketNet/ico/blob/master/LICENSE.txt\r\n */\r\n\r\n\r\n\r\n/**\r\n * Finalize agent defines what happens at the end of succeseful crowdsale.\r\n *\r\n * - Allocate tokens for founders, bounties and community\r\n * - Make tokens transferable\r\n * - etc.\r\n */\r\ncontract FinalizeAgent {\r\n\r\n  bool public reservedTokensAreDistributed = false;\r\n\r\n  function isFinalizeAgent() public constant returns(bool) {\r\n    return true;\r\n  }\r\n\r\n  /** Return true if we can run finalizeCrowdsale() properly.\r\n   *\r\n   * This is a safety check function that doesn\u0027t allow crowdsale to begin\r\n   * unless the finalizer has been set up properly.\r\n   */\r\n  function isSane() public constant returns (bool);\r\n\r\n  function distributeReservedTokens(uint reservedTokensDistributionBatch);\r\n\r\n  /** Called once by crowdsale finalize() if the sale was success. */\r\n  function finalizeCrowdsale();\r\n\r\n}\r\n/**\r\n * This smart contract code is Copyright 2017 TokenMarket Ltd. For more information see https://tokenmarket.net\r\n *\r\n * Licensed under the Apache License, version 2.0: https://github.com/TokenMarketNet/ico/blob/master/LICENSE.txt\r\n */\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @title ERC20 interface\r\n * @dev see https://github.com/ethereum/EIPs/issues/20\r\n */\r\ncontract ERC20 is ERC20Basic {\r\n  function allowance(address owner, address spender) public constant returns (uint256);\r\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n  function approve(address spender, uint256 value) public returns (bool);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n/**\r\n * A token that defines fractional units as decimals.\r\n */\r\ncontract FractionalERC20Ext is ERC20 {\r\n\r\n  uint public decimals;\r\n  uint public minCap;\r\n\r\n}\r\n\r\n\r\n\r\n/**\r\n * Abstract base contract for token sales.\r\n *\r\n * Handle\r\n * - start and end dates\r\n * - accepting investments\r\n * - minimum funding goal and refund\r\n * - various statistics during the crowdfund\r\n * - different pricing strategies\r\n * - different investment policies (require server side customer id, allow only whitelisted addresses)\r\n *\r\n */\r\ncontract CrowdsaleExt is Haltable {\r\n\r\n  /* Max investment count when we are still allowed to change the multisig address */\r\n  uint public MAX_INVESTMENTS_BEFORE_MULTISIG_CHANGE = 5;\r\n\r\n  using SafeMathLibExt for uint;\r\n\r\n  /* The token we are selling */\r\n  FractionalERC20Ext public token;\r\n\r\n  /* How we are going to price our offering */\r\n  PricingStrategy public pricingStrategy;\r\n\r\n  /* Post-success callback */\r\n  FinalizeAgent public finalizeAgent;\r\n\r\n  /* name of the crowdsale tier */\r\n  string public name;\r\n\r\n  /* tokens will be transfered from this address */\r\n  address public multisigWallet;\r\n\r\n  /* if the funding goal is not reached, investors may withdraw their funds */\r\n  uint public minimumFundingGoal;\r\n\r\n  /* the UNIX timestamp start date of the crowdsale */\r\n  uint public startsAt;\r\n\r\n  /* the UNIX timestamp end date of the crowdsale */\r\n  uint public endsAt;\r\n\r\n  /* the number of tokens already sold through this contract*/\r\n  uint public tokensSold = 0;\r\n\r\n  /* How many wei of funding we have raised */\r\n  uint public weiRaised = 0;\r\n\r\n  /* How many distinct addresses have invested */\r\n  uint public investorCount = 0;\r\n\r\n  /* Has this crowdsale been finalized */\r\n  bool public finalized;\r\n\r\n  bool public isWhiteListed;\r\n\r\n  address[] public joinedCrowdsales;\r\n  uint8 public joinedCrowdsalesLen = 0;\r\n  uint8 public joinedCrowdsalesLenMax = 50;\r\n  struct JoinedCrowdsaleStatus {\r\n    bool isJoined;\r\n    uint8 position;\r\n  }\r\n  mapping (address =\u003E JoinedCrowdsaleStatus) joinedCrowdsaleState;\r\n\r\n  /** How much ETH each address has invested to this crowdsale */\r\n  mapping (address =\u003E uint256) public investedAmountOf;\r\n\r\n  /** How much tokens this crowdsale has credited for each investor address */\r\n  mapping (address =\u003E uint256) public tokenAmountOf;\r\n\r\n  struct WhiteListData {\r\n    bool status;\r\n    uint minCap;\r\n    uint maxCap;\r\n  }\r\n\r\n  //is crowdsale updatable\r\n  bool public isUpdatable;\r\n\r\n  /** Addresses that are allowed to invest even before ICO offical opens. For testing, for ICO partners, etc. */\r\n  mapping (address =\u003E WhiteListData) public earlyParticipantWhitelist;\r\n\r\n  /** List of whitelisted addresses */\r\n  address[] public whitelistedParticipants;\r\n\r\n  /** This is for manul testing for the interaction from owner wallet. You can set it to any value and inspect this in blockchain explorer to see that crowdsale interaction works. */\r\n  uint public ownerTestValue;\r\n\r\n  /** State machine\r\n   *\r\n   * - Preparing: All contract initialization calls and variables have not been set yet\r\n   * - Prefunding: We have not passed start time yet\r\n   * - Funding: Active crowdsale\r\n   * - Success: Minimum funding goal reached\r\n   * - Failure: Minimum funding goal not reached before ending time\r\n   * - Finalized: The finalized has been called and succesfully executed\r\n   */\r\n  enum State{Unknown, Preparing, PreFunding, Funding, Success, Failure, Finalized}\r\n\r\n  // A new investment was made\r\n  event Invested(address investor, uint weiAmount, uint tokenAmount, uint128 customerId);\r\n\r\n  // Address early participation whitelist status changed\r\n  event Whitelisted(address addr, bool status, uint minCap, uint maxCap);\r\n  event WhitelistItemChanged(address addr, bool status, uint minCap, uint maxCap);\r\n\r\n  // Crowdsale start time has been changed\r\n  event StartsAtChanged(uint newStartsAt);\r\n\r\n  // Crowdsale end time has been changed\r\n  event EndsAtChanged(uint newEndsAt);\r\n\r\n  function CrowdsaleExt(string _name, address _token, PricingStrategy _pricingStrategy, address _multisigWallet, uint _start, uint _end, uint _minimumFundingGoal, bool _isUpdatable, bool _isWhiteListed) {\r\n\r\n    owner = msg.sender;\r\n\r\n    name = _name;\r\n\r\n    token = FractionalERC20Ext(_token);\r\n\r\n    setPricingStrategy(_pricingStrategy);\r\n\r\n    multisigWallet = _multisigWallet;\r\n    if(multisigWallet == 0) {\r\n        throw;\r\n    }\r\n\r\n    if(_start == 0) {\r\n        throw;\r\n    }\r\n\r\n    startsAt = _start;\r\n\r\n    if(_end == 0) {\r\n        throw;\r\n    }\r\n\r\n    endsAt = _end;\r\n\r\n    // Don\u0027t mess the dates\r\n    if(startsAt \u003E= endsAt) {\r\n        throw;\r\n    }\r\n\r\n    // Minimum funding goal can be zero\r\n    minimumFundingGoal = _minimumFundingGoal;\r\n\r\n    isUpdatable = _isUpdatable;\r\n\r\n    isWhiteListed = _isWhiteListed;\r\n  }\r\n\r\n  /**\r\n   * Don\u0027t expect to just send in money and get tokens.\r\n   */\r\n  function() payable {\r\n    throw;\r\n  }\r\n\r\n  /**\r\n   * Make an investment.\r\n   *\r\n   * Crowdsale must be running for one to invest.\r\n   * We must have not pressed the emergency brake.\r\n   *\r\n   * @param receiver The Ethereum address who receives the tokens\r\n   * @param customerId (optional) UUID v4 to track the successful payments on the server side\r\n   *\r\n   */\r\n  function investInternal(address receiver, uint128 customerId) stopInEmergency private {\r\n\r\n    // Determine if it\u0027s a good time to accept investment from this participant\r\n    if(getState() == State.PreFunding) {\r\n      // Are we whitelisted for early deposit\r\n      throw;\r\n    } else if(getState() == State.Funding) {\r\n      // Retail participants can only come in when the crowdsale is running\r\n      // pass\r\n      if(isWhiteListed) {\r\n        if(!earlyParticipantWhitelist[receiver].status) {\r\n          throw;\r\n        }\r\n      }\r\n    } else {\r\n      // Unwanted state\r\n      throw;\r\n    }\r\n\r\n    uint weiAmount = msg.value;\r\n\r\n    // Account presale sales separately, so that they do not count against pricing tranches\r\n    uint tokenAmount = pricingStrategy.calculatePrice(weiAmount, weiRaised, tokensSold, msg.sender, token.decimals());\r\n\r\n    if(tokenAmount == 0) {\r\n      // Dust transaction\r\n      throw;\r\n    }\r\n\r\n    if(isWhiteListed) {\r\n      if(tokenAmount \u003C earlyParticipantWhitelist[receiver].minCap \u0026\u0026 tokenAmountOf[receiver] == 0) {\r\n        // tokenAmount \u003C minCap for investor\r\n        throw;\r\n      }\r\n\r\n      // Check that we did not bust the investor\u0027s cap\r\n      if (isBreakingInvestorCap(receiver, tokenAmount)) {\r\n        throw;\r\n      }\r\n\r\n      updateInheritedEarlyParticipantWhitelist(receiver, tokenAmount);\r\n    } else {\r\n      if(tokenAmount \u003C token.minCap() \u0026\u0026 tokenAmountOf[receiver] == 0) {\r\n        throw;\r\n      }\r\n    }\r\n\r\n    if(investedAmountOf[receiver] == 0) {\r\n       // A new investor\r\n       investorCount\u002B\u002B;\r\n    }\r\n\r\n    // Update investor\r\n    investedAmountOf[receiver] = investedAmountOf[receiver].plus(weiAmount);\r\n    tokenAmountOf[receiver] = tokenAmountOf[receiver].plus(tokenAmount);\r\n\r\n    // Update totals\r\n    weiRaised = weiRaised.plus(weiAmount);\r\n    tokensSold = tokensSold.plus(tokenAmount);\r\n\r\n    // Check that we did not bust the cap\r\n    if(isBreakingCap(weiAmount, tokenAmount, weiRaised, tokensSold)) {\r\n      throw;\r\n    }\r\n\r\n    assignTokens(receiver, tokenAmount);\r\n\r\n    // Pocket the money\r\n    if(!multisigWallet.send(weiAmount)) throw;\r\n\r\n    // Tell us invest was success\r\n    Invested(receiver, weiAmount, tokenAmount, customerId);\r\n  }\r\n\r\n  /**\r\n   * Allow anonymous contributions to this crowdsale.\r\n   */\r\n  function invest(address addr) public payable {\r\n    investInternal(addr, 0);\r\n  }\r\n\r\n  /**\r\n   * The basic entry point to participate the crowdsale process.\r\n   *\r\n   * Pay for funding, get invested tokens back in the sender address.\r\n   */\r\n  function buy() public payable {\r\n    invest(msg.sender);\r\n  }\r\n\r\n  function distributeReservedTokens(uint reservedTokensDistributionBatch) public inState(State.Success) onlyOwner stopInEmergency {\r\n    // Already finalized\r\n    if(finalized) {\r\n      throw;\r\n    }\r\n\r\n    // Finalizing is optional. We only call it if we are given a finalizing agent.\r\n    if(address(finalizeAgent) != address(0)) {\r\n      finalizeAgent.distributeReservedTokens(reservedTokensDistributionBatch);\r\n    }\r\n  }\r\n\r\n  function areReservedTokensDistributed() public constant returns (bool) {\r\n    return finalizeAgent.reservedTokensAreDistributed();\r\n  }\r\n\r\n  function canDistributeReservedTokens() public constant returns(bool) {\r\n    CrowdsaleExt lastTierCntrct = CrowdsaleExt(getLastTier());\r\n    if ((lastTierCntrct.getState() == State.Success) \u0026\u0026 !lastTierCntrct.halted() \u0026\u0026 !lastTierCntrct.finalized() \u0026\u0026 !lastTierCntrct.areReservedTokensDistributed()) return true;\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Finalize a succcesful crowdsale.\r\n   *\r\n   * The owner can triggre a call the contract that provides post-crowdsale actions, like releasing the tokens.\r\n   */\r\n  function finalize() public inState(State.Success) onlyOwner stopInEmergency {\r\n\r\n    // Already finalized\r\n    if(finalized) {\r\n      throw;\r\n    }\r\n\r\n    // Finalizing is optional. We only call it if we are given a finalizing agent.\r\n    if(address(finalizeAgent) != address(0)) {\r\n      finalizeAgent.finalizeCrowdsale();\r\n    }\r\n\r\n    finalized = true;\r\n  }\r\n\r\n  /**\r\n   * Allow to (re)set finalize agent.\r\n   *\r\n   * Design choice: no state restrictions on setting this, so that we can fix fat finger mistakes.\r\n   */\r\n  function setFinalizeAgent(FinalizeAgent addr) public onlyOwner {\r\n    assert(address(addr) != address(0));\r\n    assert(address(finalizeAgent) == address(0));\r\n    finalizeAgent = addr;\r\n\r\n    // Don\u0027t allow setting bad agent\r\n    if(!finalizeAgent.isFinalizeAgent()) {\r\n      throw;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Allow addresses to do early participation.\r\n   */\r\n  function setEarlyParticipantWhitelist(address addr, bool status, uint minCap, uint maxCap) public onlyOwner {\r\n    if (!isWhiteListed) throw;\r\n    assert(addr != address(0));\r\n    assert(maxCap \u003E 0);\r\n    assert(minCap \u003C= maxCap);\r\n    assert(now \u003C= endsAt);\r\n\r\n    if (!isAddressWhitelisted(addr)) {\r\n      whitelistedParticipants.push(addr);\r\n      Whitelisted(addr, status, minCap, maxCap);\r\n    } else {\r\n      WhitelistItemChanged(addr, status, minCap, maxCap);\r\n    }\r\n\r\n    earlyParticipantWhitelist[addr] = WhiteListData({status:status, minCap:minCap, maxCap:maxCap});\r\n  }\r\n\r\n  function setEarlyParticipantWhitelistMultiple(address[] addrs, bool[] statuses, uint[] minCaps, uint[] maxCaps) public onlyOwner {\r\n    if (!isWhiteListed) throw;\r\n    assert(now \u003C= endsAt);\r\n    assert(addrs.length == statuses.length);\r\n    assert(statuses.length == minCaps.length);\r\n    assert(minCaps.length == maxCaps.length);\r\n    for (uint iterator = 0; iterator \u003C addrs.length; iterator\u002B\u002B) {\r\n      setEarlyParticipantWhitelist(addrs[iterator], statuses[iterator], minCaps[iterator], maxCaps[iterator]);\r\n    }\r\n  }\r\n\r\n  function updateInheritedEarlyParticipantWhitelist(address reciever, uint tokensBought) private {\r\n    if (!isWhiteListed) throw;\r\n    if (tokensBought \u003C earlyParticipantWhitelist[reciever].minCap \u0026\u0026 tokenAmountOf[reciever] == 0) throw;\r\n\r\n    uint8 tierPosition = getTierPosition(this);\r\n\r\n    for (uint8 j = tierPosition \u002B 1; j \u003C joinedCrowdsalesLen; j\u002B\u002B) {\r\n      CrowdsaleExt crowdsale = CrowdsaleExt(joinedCrowdsales[j]);\r\n      crowdsale.updateEarlyParticipantWhitelist(reciever, tokensBought);\r\n    }\r\n  }\r\n\r\n  function updateEarlyParticipantWhitelist(address addr, uint tokensBought) public {\r\n    if (!isWhiteListed) throw;\r\n    assert(addr != address(0));\r\n    assert(now \u003C= endsAt);\r\n    assert(isTierJoined(msg.sender));\r\n    if (tokensBought \u003C earlyParticipantWhitelist[addr].minCap \u0026\u0026 tokenAmountOf[addr] == 0) throw;\r\n    //if (addr != msg.sender \u0026\u0026 contractAddr != msg.sender) throw;\r\n    uint newMaxCap = earlyParticipantWhitelist[addr].maxCap;\r\n    newMaxCap = newMaxCap.minus(tokensBought);\r\n    earlyParticipantWhitelist[addr] = WhiteListData({status:earlyParticipantWhitelist[addr].status, minCap:0, maxCap:newMaxCap});\r\n  }\r\n\r\n  function isAddressWhitelisted(address addr) public constant returns(bool) {\r\n    for (uint i = 0; i \u003C whitelistedParticipants.length; i\u002B\u002B) {\r\n      if (whitelistedParticipants[i] == addr) {\r\n        return true;\r\n        break;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  function whitelistedParticipantsLength() public constant returns (uint) {\r\n    return whitelistedParticipants.length;\r\n  }\r\n\r\n  function isTierJoined(address addr) public constant returns(bool) {\r\n    return joinedCrowdsaleState[addr].isJoined;\r\n  }\r\n\r\n  function getTierPosition(address addr) public constant returns(uint8) {\r\n    return joinedCrowdsaleState[addr].position;\r\n  }\r\n\r\n  function getLastTier() public constant returns(address) {\r\n    if (joinedCrowdsalesLen \u003E 0)\r\n      return joinedCrowdsales[joinedCrowdsalesLen - 1];\r\n    else\r\n      return address(0);\r\n  }\r\n\r\n  function setJoinedCrowdsales(address addr) private onlyOwner {\r\n    assert(addr != address(0));\r\n    assert(joinedCrowdsalesLen \u003C= joinedCrowdsalesLenMax);\r\n    assert(!isTierJoined(addr));\r\n    joinedCrowdsales.push(addr);\r\n    joinedCrowdsaleState[addr] = JoinedCrowdsaleStatus({\r\n      isJoined: true,\r\n      position: joinedCrowdsalesLen\r\n    });\r\n    joinedCrowdsalesLen\u002B\u002B;\r\n  }\r\n\r\n  function updateJoinedCrowdsalesMultiple(address[] addrs) public onlyOwner {\r\n    assert(addrs.length \u003E 0);\r\n    assert(joinedCrowdsalesLen == 0);\r\n    assert(addrs.length \u003C= joinedCrowdsalesLenMax);\r\n    for (uint8 iter = 0; iter \u003C addrs.length; iter\u002B\u002B) {\r\n      setJoinedCrowdsales(addrs[iter]);\r\n    }\r\n  }\r\n\r\n  function setStartsAt(uint time) onlyOwner {\r\n    assert(!finalized);\r\n    assert(isUpdatable);\r\n    assert(now \u003C= time); // Don\u0027t change past\r\n    assert(time \u003C= endsAt);\r\n    assert(now \u003C= startsAt);\r\n\r\n    CrowdsaleExt lastTierCntrct = CrowdsaleExt(getLastTier());\r\n    if (lastTierCntrct.finalized()) throw;\r\n\r\n    uint8 tierPosition = getTierPosition(this);\r\n\r\n    //start time should be greater then end time of previous tiers\r\n    for (uint8 j = 0; j \u003C tierPosition; j\u002B\u002B) {\r\n      CrowdsaleExt crowdsale = CrowdsaleExt(joinedCrowdsales[j]);\r\n      assert(time \u003E= crowdsale.endsAt());\r\n    }\r\n\r\n    startsAt = time;\r\n    StartsAtChanged(startsAt);\r\n  }\r\n\r\n  /**\r\n   * Allow crowdsale owner to close early or extend the crowdsale.\r\n   *\r\n   * This is useful e.g. for a manual soft cap implementation:\r\n   * - after X amount is reached determine manual closing\r\n   *\r\n   * This may put the crowdsale to an invalid state,\r\n   * but we trust owners know what they are doing.\r\n   *\r\n   */\r\n  function setEndsAt(uint time) public onlyOwner {\r\n    assert(!finalized);\r\n    assert(isUpdatable);\r\n    assert(now \u003C= time);// Don\u0027t change past\r\n    assert(startsAt \u003C= time);\r\n    assert(now \u003C= endsAt);\r\n\r\n    CrowdsaleExt lastTierCntrct = CrowdsaleExt(getLastTier());\r\n    if (lastTierCntrct.finalized()) throw;\r\n\r\n\r\n    uint8 tierPosition = getTierPosition(this);\r\n\r\n    for (uint8 j = tierPosition \u002B 1; j \u003C joinedCrowdsalesLen; j\u002B\u002B) {\r\n      CrowdsaleExt crowdsale = CrowdsaleExt(joinedCrowdsales[j]);\r\n      assert(time \u003C= crowdsale.startsAt());\r\n    }\r\n\r\n    endsAt = time;\r\n    EndsAtChanged(endsAt);\r\n  }\r\n\r\n  /**\r\n   * Allow to (re)set pricing strategy.\r\n   *\r\n   * Design choice: no state restrictions on the set, so that we can fix fat finger mistakes.\r\n   */\r\n  function setPricingStrategy(PricingStrategy _pricingStrategy) public onlyOwner {\r\n    assert(address(_pricingStrategy) != address(0));\r\n    assert(address(pricingStrategy) == address(0));\r\n    pricingStrategy = _pricingStrategy;\r\n\r\n    // Don\u0027t allow setting bad agent\r\n    if(!pricingStrategy.isPricingStrategy()) {\r\n      throw;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Allow to change the team multisig address in the case of emergency.\r\n   *\r\n   * This allows to save a deployed crowdsale wallet in the case the crowdsale has not yet begun\r\n   * (we have done only few test transactions). After the crowdsale is going\r\n   * then multisig address stays locked for the safety reasons.\r\n   */\r\n  function setMultisig(address addr) public onlyOwner {\r\n\r\n    // Change\r\n    if(investorCount \u003E MAX_INVESTMENTS_BEFORE_MULTISIG_CHANGE) {\r\n      throw;\r\n    }\r\n\r\n    multisigWallet = addr;\r\n  }\r\n\r\n  /**\r\n   * @return true if the crowdsale has raised enough money to be a successful.\r\n   */\r\n  function isMinimumGoalReached() public constant returns (bool reached) {\r\n    return weiRaised \u003E= minimumFundingGoal;\r\n  }\r\n\r\n  /**\r\n   * Check if the contract relationship looks good.\r\n   */\r\n  function isFinalizerSane() public constant returns (bool sane) {\r\n    return finalizeAgent.isSane();\r\n  }\r\n\r\n  /**\r\n   * Check if the contract relationship looks good.\r\n   */\r\n  function isPricingSane() public constant returns (bool sane) {\r\n    return pricingStrategy.isSane(address(this));\r\n  }\r\n\r\n  /**\r\n   * Crowdfund state machine management.\r\n   *\r\n   * We make it a function and do not assign the result to a variable, so there is no chance of the variable being stale.\r\n   */\r\n  function getState() public constant returns (State) {\r\n    if(finalized) return State.Finalized;\r\n    else if (address(finalizeAgent) == 0) return State.Preparing;\r\n    else if (!finalizeAgent.isSane()) return State.Preparing;\r\n    else if (!pricingStrategy.isSane(address(this))) return State.Preparing;\r\n    else if (block.timestamp \u003C startsAt) return State.PreFunding;\r\n    else if (block.timestamp \u003C= endsAt \u0026\u0026 !isCrowdsaleFull()) return State.Funding;\r\n    else if (isMinimumGoalReached()) return State.Success;\r\n    else return State.Failure;\r\n  }\r\n\r\n  /** Interface marker. */\r\n  function isCrowdsale() public constant returns (bool) {\r\n    return true;\r\n  }\r\n\r\n  //\r\n  // Modifiers\r\n  //\r\n\r\n  /** Modified allowing execution only if the crowdsale is currently running.  */\r\n  modifier inState(State state) {\r\n    if(getState() != state) throw;\r\n    _;\r\n  }\r\n\r\n\r\n  //\r\n  // Abstract functions\r\n  //\r\n\r\n  /**\r\n   * Check if the current invested breaks our cap rules.\r\n   *\r\n   *\r\n   * The child contract must define their own cap setting rules.\r\n   * We allow a lot of flexibility through different capping strategies (ETH, token count)\r\n   * Called from invest().\r\n   *\r\n   * @param weiAmount The amount of wei the investor tries to invest in the current transaction\r\n   * @param tokenAmount The amount of tokens we try to give to the investor in the current transaction\r\n   * @param weiRaisedTotal What would be our total raised balance after this transaction\r\n   * @param tokensSoldTotal What would be our total sold tokens count after this transaction\r\n   *\r\n   * @return true if taking this investment would break our cap rules\r\n   */\r\n  function isBreakingCap(uint weiAmount, uint tokenAmount, uint weiRaisedTotal, uint tokensSoldTotal) public constant returns (bool limitBroken);\r\n\r\n  function isBreakingInvestorCap(address receiver, uint tokenAmount) public constant returns (bool limitBroken);\r\n\r\n  /**\r\n   * Check if the current crowdsale is full and we can no longer sell any tokens.\r\n   */\r\n  function isCrowdsaleFull() public constant returns (bool);\r\n\r\n  /**\r\n   * Create new tokens or transfer issued tokens to the investor depending on the cap model.\r\n   */\r\n  function assignTokens(address receiver, uint tokenAmount) private;\r\n}\r\n\r\n/**\r\n * This smart contract code is Copyright 2017 TokenMarket Ltd. For more information see https://tokenmarket.net\r\n *\r\n * Licensed under the Apache License, version 2.0: https://github.com/TokenMarketNet/ico/blob/master/LICENSE.txt\r\n */\r\n\r\n\r\n\r\n/**\r\n * This smart contract code is Copyright 2017 TokenMarket Ltd. For more information see https://tokenmarket.net\r\n *\r\n * Licensed under the Apache License, version 2.0: https://github.com/TokenMarketNet/ico/blob/master/LICENSE.txt\r\n */\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * Standard ERC20 token with Short Hand Attack and approve() race condition mitigation.\r\n *\r\n * Based on code by FirstBlood:\r\n * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\r\n */\r\ncontract StandardToken is ERC20, SafeMath {\r\n\r\n  /* Token supply got increased and a new owner received these tokens */\r\n  event Minted(address receiver, uint amount);\r\n\r\n  /* Actual balances of token holders */\r\n  mapping(address =\u003E uint) balances;\r\n\r\n  /* approve() allowances */\r\n  mapping (address =\u003E mapping (address =\u003E uint)) allowed;\r\n\r\n  /* Interface declaration */\r\n  function isToken() public constant returns (bool weAre) {\r\n    return true;\r\n  }\r\n\r\n  function transfer(address _to, uint _value) returns (bool success) {\r\n    balances[msg.sender] = safeSub(balances[msg.sender], _value);\r\n    balances[_to] = safeAdd(balances[_to], _value);\r\n    Transfer(msg.sender, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  function transferFrom(address _from, address _to, uint _value) returns (bool success) {\r\n    uint _allowance = allowed[_from][msg.sender];\r\n\r\n    balances[_to] = safeAdd(balances[_to], _value);\r\n    balances[_from] = safeSub(balances[_from], _value);\r\n    allowed[_from][msg.sender] = safeSub(_allowance, _value);\r\n    Transfer(_from, _to, _value);\r\n    return true;\r\n  }\r\n\r\n  function balanceOf(address _owner) constant returns (uint balance) {\r\n    return balances[_owner];\r\n  }\r\n\r\n  function approve(address _spender, uint _value) returns (bool success) {\r\n\r\n    // To change the approve amount you first have to reduce the addresses\u0060\r\n    //  allowance to zero by calling \u0060approve(_spender, 0)\u0060 if it is not\r\n    //  already 0 to mitigate the race condition described here:\r\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    if ((_value != 0) \u0026\u0026 (allowed[msg.sender][_spender] != 0)) throw;\r\n\r\n    allowed[msg.sender][_spender] = _value;\r\n    Approval(msg.sender, _spender, _value);\r\n    return true;\r\n  }\r\n\r\n  function allowance(address _owner, address _spender) constant returns (uint remaining) {\r\n    return allowed[_owner][_spender];\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * A token that can increase its supply by another contract.\r\n *\r\n * This allows uncapped crowdsale by dynamically increasing the supply when money pours in.\r\n * Only mint agents, contracts whitelisted by owner, can mint new tokens.\r\n *\r\n */\r\ncontract MintableTokenExt is StandardToken, Ownable {\r\n\r\n  using SafeMathLibExt for uint;\r\n\r\n  bool public mintingFinished = false;\r\n\r\n  /** List of agents that are allowed to create new tokens */\r\n  mapping (address =\u003E bool) public mintAgents;\r\n\r\n  event MintingAgentChanged(address addr, bool state  );\r\n\r\n  /** inPercentageUnit is percents of tokens multiplied to 10 up to percents decimals.\r\n  * For example, for reserved tokens in percents 2.54%\r\n  * inPercentageUnit = 254\r\n  * inPercentageDecimals = 2\r\n  */\r\n  struct ReservedTokensData {\r\n    uint inTokens;\r\n    uint inPercentageUnit;\r\n    uint inPercentageDecimals;\r\n    bool isReserved;\r\n    bool isDistributed;\r\n  }\r\n\r\n  mapping (address =\u003E ReservedTokensData) public reservedTokensList;\r\n  address[] public reservedTokensDestinations;\r\n  uint public reservedTokensDestinationsLen = 0;\r\n  bool reservedTokensDestinationsAreSet = false;\r\n\r\n  modifier onlyMintAgent() {\r\n    // Only crowdsale contracts are allowed to mint new tokens\r\n    if(!mintAgents[msg.sender]) {\r\n        throw;\r\n    }\r\n    _;\r\n  }\r\n\r\n  /** Make sure we are not done yet. */\r\n  modifier canMint() {\r\n    if(mintingFinished) throw;\r\n    _;\r\n  }\r\n\r\n  function finalizeReservedAddress(address addr) public onlyMintAgent canMint {\r\n    ReservedTokensData storage reservedTokensData = reservedTokensList[addr];\r\n    reservedTokensData.isDistributed = true;\r\n  }\r\n\r\n  function isAddressReserved(address addr) public constant returns (bool isReserved) {\r\n    return reservedTokensList[addr].isReserved;\r\n  }\r\n\r\n  function areTokensDistributedForAddress(address addr) public constant returns (bool isDistributed) {\r\n    return reservedTokensList[addr].isDistributed;\r\n  }\r\n\r\n  function getReservedTokens(address addr) public constant returns (uint inTokens) {\r\n    return reservedTokensList[addr].inTokens;\r\n  }\r\n\r\n  function getReservedPercentageUnit(address addr) public constant returns (uint inPercentageUnit) {\r\n    return reservedTokensList[addr].inPercentageUnit;\r\n  }\r\n\r\n  function getReservedPercentageDecimals(address addr) public constant returns (uint inPercentageDecimals) {\r\n    return reservedTokensList[addr].inPercentageDecimals;\r\n  }\r\n\r\n  function setReservedTokensListMultiple(\r\n    address[] addrs, \r\n    uint[] inTokens, \r\n    uint[] inPercentageUnit, \r\n    uint[] inPercentageDecimals\r\n  ) public canMint onlyOwner {\r\n    assert(!reservedTokensDestinationsAreSet);\r\n    assert(addrs.length == inTokens.length);\r\n    assert(inTokens.length == inPercentageUnit.length);\r\n    assert(inPercentageUnit.length == inPercentageDecimals.length);\r\n    for (uint iterator = 0; iterator \u003C addrs.length; iterator\u002B\u002B) {\r\n      if (addrs[iterator] != address(0)) {\r\n        setReservedTokensList(addrs[iterator], inTokens[iterator], inPercentageUnit[iterator], inPercentageDecimals[iterator]);\r\n      }\r\n    }\r\n    reservedTokensDestinationsAreSet = true;\r\n  }\r\n\r\n  /**\r\n   * Create new tokens and allocate them to an address..\r\n   *\r\n   * Only callably by a crowdsale contract (mint agent).\r\n   */\r\n  function mint(address receiver, uint amount) onlyMintAgent canMint public {\r\n    totalSupply = totalSupply.plus(amount);\r\n    balances[receiver] = balances[receiver].plus(amount);\r\n\r\n    // This will make the mint transaction apper in EtherScan.io\r\n    // We can remove this after there is a standardized minting event\r\n    Transfer(0, receiver, amount);\r\n  }\r\n\r\n  /**\r\n   * Owner can allow a crowdsale contract to mint new tokens.\r\n   */\r\n  function setMintAgent(address addr, bool state) onlyOwner canMint public {\r\n    mintAgents[addr] = state;\r\n    MintingAgentChanged(addr, state);\r\n  }\r\n\r\n  function setReservedTokensList(address addr, uint inTokens, uint inPercentageUnit, uint inPercentageDecimals) private canMint onlyOwner {\r\n    assert(addr != address(0));\r\n    if (!isAddressReserved(addr)) {\r\n      reservedTokensDestinations.push(addr);\r\n      reservedTokensDestinationsLen\u002B\u002B;\r\n    }\r\n\r\n    reservedTokensList[addr] = ReservedTokensData({\r\n      inTokens: inTokens, \r\n      inPercentageUnit: inPercentageUnit, \r\n      inPercentageDecimals: inPercentageDecimals,\r\n      isReserved: true,\r\n      isDistributed: false\r\n    });\r\n  }\r\n}\r\n\r\n/**\r\n * ICO crowdsale contract that is capped by amout of tokens.\r\n *\r\n * - Tokens are dynamically created during the crowdsale\r\n *\r\n *\r\n */\r\ncontract MintedTokenCappedCrowdsaleExt is CrowdsaleExt {\r\n\r\n  /* Maximum amount of tokens this crowdsale can sell. */\r\n  uint public maximumSellableTokens;\r\n\r\n  function MintedTokenCappedCrowdsaleExt(\r\n    string _name, \r\n    address _token, \r\n    PricingStrategy _pricingStrategy, \r\n    address _multisigWallet, \r\n    uint _start, uint _end, \r\n    uint _minimumFundingGoal, \r\n    uint _maximumSellableTokens, \r\n    bool _isUpdatable, \r\n    bool _isWhiteListed\r\n  ) CrowdsaleExt(_name, _token, _pricingStrategy, _multisigWallet, _start, _end, _minimumFundingGoal, _isUpdatable, _isWhiteListed) {\r\n    maximumSellableTokens = _maximumSellableTokens;\r\n  }\r\n\r\n  // Crowdsale maximumSellableTokens has been changed\r\n  event MaximumSellableTokensChanged(uint newMaximumSellableTokens);\r\n\r\n  /**\r\n   * Called from invest() to confirm if the curret investment does not break our cap rule.\r\n   */\r\n  function isBreakingCap(uint weiAmount, uint tokenAmount, uint weiRaisedTotal, uint tokensSoldTotal) public constant returns (bool limitBroken) {\r\n    return tokensSoldTotal \u003E maximumSellableTokens;\r\n  }\r\n\r\n  function isBreakingInvestorCap(address addr, uint tokenAmount) public constant returns (bool limitBroken) {\r\n    assert(isWhiteListed);\r\n    uint maxCap = earlyParticipantWhitelist[addr].maxCap;\r\n    return (tokenAmountOf[addr].plus(tokenAmount)) \u003E maxCap;\r\n  }\r\n\r\n  function isCrowdsaleFull() public constant returns (bool) {\r\n    return tokensSold \u003E= maximumSellableTokens;\r\n  }\r\n\r\n  function setMaximumSellableTokens(uint tokens) public onlyOwner {\r\n    assert(!finalized);\r\n    assert(isUpdatable);\r\n    assert(now \u003C= startsAt);\r\n\r\n    CrowdsaleExt lastTierCntrct = CrowdsaleExt(getLastTier());\r\n    assert(!lastTierCntrct.finalized());\r\n\r\n    maximumSellableTokens = tokens;\r\n    MaximumSellableTokensChanged(maximumSellableTokens);\r\n  }\r\n\r\n  function updateRate(uint newOneTokenInWei) public onlyOwner {\r\n    assert(!finalized);\r\n    assert(isUpdatable);\r\n    assert(now \u003C= startsAt);\r\n\r\n    CrowdsaleExt lastTierCntrct = CrowdsaleExt(getLastTier());\r\n    assert(!lastTierCntrct.finalized());\r\n\r\n    pricingStrategy.updateRate(newOneTokenInWei);\r\n  }\r\n\r\n  /**\r\n   * Dynamically create tokens and assign them to the investor.\r\n   */\r\n  function assignTokens(address receiver, uint tokenAmount) private {\r\n    MintableTokenExt mintableToken = MintableTokenExt(token);\r\n    mintableToken.mint(receiver, tokenAmount);\r\n  }\r\n}","ABI":"[{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022ownerTestValue\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022addr\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022invest\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:true,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022addr\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022tokenAmount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022isBreakingInvestorCap\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022limitBroken\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022addrs\u0022,\u0022type\u0022:\u0022address[]\u0022}],\u0022name\u0022:\u0022updateJoinedCrowdsalesMultiple\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022isPricingSane\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022sane\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022name\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022payable\u0022:false,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022endsAt\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022isUpdatable\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022addr\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022isAddressWhitelisted\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022minimumFundingGoal\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022getState\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint8\u0022}],\u0022payable\u0022:false,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022addr\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022setFinalizeAgent\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022whitelistedParticipantsLength\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022investedAmountOf\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022finalizeAgent\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022addr\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022isTierJoined\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022areReservedTokensDistributed\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022tokens\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022setMaximumSellableTokens\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022maximumSellableTokens\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022weiRaised\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022isCrowdsale\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022finalize\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_pricingStrategy\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022setPricingStrategy\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022tokensSold\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022halt\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022MAX_INVESTMENTS_BEFORE_MULTISIG_CHANGE\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022newOneTokenInWei\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022updateRate\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022time\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022setEndsAt\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022pricingStrategy\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022isMinimumGoalReached\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022reached\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022joinedCrowdsalesLenMax\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint8\u0022}],\u0022payable\u0022:false,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022addr\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022status\u0022,\u0022type\u0022:\u0022bool\u0022},{\u0022name\u0022:\u0022minCap\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022maxCap\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022setEarlyParticipantWhitelist\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022owner\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022multisigWallet\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022tokenAmountOf\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022weiAmount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022tokenAmount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022weiRaisedTotal\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022tokensSoldTotal\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022isBreakingCap\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022limitBroken\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022buy\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:true,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022isFinalizerSane\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022sane\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022startsAt\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022addr\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022getTierPosition\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint8\u0022}],\u0022payable\u0022:false,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022addrs\u0022,\u0022type\u0022:\u0022address[]\u0022},{\u0022name\u0022:\u0022statuses\u0022,\u0022type\u0022:\u0022bool[]\u0022},{\u0022name\u0022:\u0022minCaps\u0022,\u0022type\u0022:\u0022uint256[]\u0022},{\u0022name\u0022:\u0022maxCaps\u0022,\u0022type\u0022:\u0022uint256[]\u0022}],\u0022name\u0022:\u0022setEarlyParticipantWhitelistMultiple\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022finalized\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022halted\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022canDistributeReservedTokens\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022joinedCrowdsales\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022time\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022setStartsAt\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022addr\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022tokensBought\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022updateEarlyParticipantWhitelist\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022getLastTier\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022earlyParticipantWhitelist\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022status\u0022,\u0022type\u0022:\u0022bool\u0022},{\u0022name\u0022:\u0022minCap\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022maxCap\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022unhalt\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022reservedTokensDistributionBatch\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022distributeReservedTokens\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022isCrowdsaleFull\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022investorCount\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022whitelistedParticipants\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022joinedCrowdsalesLen\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint8\u0022}],\u0022payable\u0022:false,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022isWhiteListed\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022transferOwnership\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022addr\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022setMultisig\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022token\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[{\u0022name\u0022:\u0022_name\u0022,\u0022type\u0022:\u0022string\u0022},{\u0022name\u0022:\u0022_token\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_pricingStrategy\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_multisigWallet\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_start\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_end\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_minimumFundingGoal\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_maximumSellableTokens\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_isUpdatable\u0022,\u0022type\u0022:\u0022bool\u0022},{\u0022name\u0022:\u0022_isWhiteListed\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022type\u0022:\u0022constructor\u0022},{\u0022payable\u0022:true,\u0022type\u0022:\u0022fallback\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022newMaximumSellableTokens\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022MaximumSellableTokensChanged\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022investor\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022weiAmount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022tokenAmount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022customerId\u0022,\u0022type\u0022:\u0022uint128\u0022}],\u0022name\u0022:\u0022Invested\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022addr\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022status\u0022,\u0022type\u0022:\u0022bool\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022minCap\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022maxCap\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022Whitelisted\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022addr\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022status\u0022,\u0022type\u0022:\u0022bool\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022minCap\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022maxCap\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022WhitelistItemChanged\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022newStartsAt\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022StartsAtChanged\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022newEndsAt\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022EndsAtChanged\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022previousOwner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022OwnershipTransferred\u0022,\u0022type\u0022:\u0022event\u0022}]","ContractName":"MintedTokenCappedCrowdsaleExt","CompilerVersion":"v0.4.11\u002Bcommit.68ef5810","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"00000000000000000000000000000000000000000000000000000000000001400000000000000000000000004673d0270d05260d39f6fdaf31d620be95d242ab000000000000000000000000bf10bad84a045704d1d7c709e5adade49e41550c0000000000000000000000001ea7b38689495737626b5435d32ae49ea17485c5000000000000000000000000000000000000000000000000000000005d7bb5f8000000000000000000000000000000000000000000000000000000005d7bbd0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000056bc75e2d631000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000104672656967687454727573742e636f6d00000000000000000000000000000000","Library":"SafeMathLibExt:3d03a10c73235235fc102944c99e307417819770","SwarmSource":"bzzr://9dc06727f6c2d49b3ba4e587e612c4cb03fb3f1e7fc454a3ce05554a3ef87860"}]