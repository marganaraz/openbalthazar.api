[{"SourceCode":"pragma solidity 0.5.12;  /*\r\n/* Safemath library */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060\u002B\u0060 operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a \u002B b;\r\n        require(c \u003E= a, \u0022SafeMath: addition overflow\u0022);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060-\u0060 operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b \u003C= a, \u0022SafeMath: subtraction overflow\u0022);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060*\u0060 operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\r\n        // benefit is lost if \u0027b\u0027 is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \u0022SafeMath: multiplication overflow\u0022);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060/\u0060 operator. Note: this function uses a\r\n     * \u0060revert\u0060 opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b \u003E 0, \u0022SafeMath: division by zero\u0022);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c \u002B a % b); // There is no case in which this doesn\u0027t hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity\u0027s \u0060%\u0060 operator. This function uses a \u0060revert\u0060\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \u0022SafeMath: modulo by zero\u0022);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n// Owner Handler\r\ncontract ownerShip    // Auction Contract Owner and OwherShip change\r\n{\r\n    //Global storage declaration\r\n    address payable public owner;\r\n\r\n    address payable public newOwner;\r\n\r\n    bool public safeGuard ; // To hault all non owner functions in case of imergency\r\n\r\n    //Event defined for ownership transfered\r\n    event OwnershipTransferredEv(address payable indexed previousOwner, address payable indexed newOwner);\r\n\r\n\r\n    //Sets owner only on first run\r\n    constructor() public \r\n    {\r\n        //Set contract owner\r\n        owner = msg.sender;\r\n        // Disabled global hault on first deploy\r\n        safeGuard = false;\r\n\r\n    }\r\n\r\n    //This will restrict function only for owner where attached\r\n    modifier onlyOwner() \r\n    {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n\r\n    function transferOwnership(address payable _newOwner) public onlyOwner \r\n    {\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n\r\n    //the reason for this flow is to protect owners from sending ownership to unintended address due to human error\r\n    function acceptOwnership() public \r\n    {\r\n        require(msg.sender == newOwner);\r\n        emit OwnershipTransferredEv(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n\r\n    function changesafeGuardStatus() onlyOwner public\r\n    {\r\n        if (safeGuard == false)\r\n        {\r\n            safeGuard = true;\r\n        }\r\n        else\r\n        {\r\n            safeGuard = false;    \r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\ncontract tokenERC20 is  ownerShip\r\n{\r\n    // Public variables of the token\r\n    using SafeMath for uint256;\r\n    bytes32 public name;\r\n    bytes8 public symbol;\r\n    uint8 public decimals; // places of decimal\r\n    uint256 public totalSupply;\r\n    uint256 public totalMintAfterInitial;\r\n    uint256 public maximumSupply;\r\n\r\n    uint public burningRate = 500;    // 500=5%\r\n\r\n    // struct to store token and ether value \r\n    struct userBalance \r\n    {\r\n        uint256 totalValue;\r\n        uint256 freezeValue;\r\n        uint256 freezeDate;\r\n        uint256 meltValue;    \r\n    }\r\n\r\n    // Mapped storage for token  ( If token address is 0 means ether)\r\n    mapping (address =\u003E mapping (address =\u003E userBalance)) public tokens;\r\n\r\n\r\n        // This creates an array with all balances\r\n    mapping (address =\u003E uint256) public balanceOf;\r\n    mapping (address =\u003E mapping (address =\u003E uint256)) public allowance;\r\n    \r\n    /* Records for the fronzen accounts */\r\n    mapping (address =\u003E bool) public frozenAccount;\r\n        \r\n    /* This generates a public event on the blockchain that will notify clients */\r\n    event FrozenFunds(address target, bool frozen);\r\n    \r\n    // This generates a public event on the blockchain that will notify clients\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n  \r\n    \r\n    // This notifies clients about the amount burnt\r\n    event Burn(address indexed from, uint256 value);\r\n\r\n     //Calculate percent and return result\r\n    function calculatePercentage(uint256 PercentOf, uint256 percentTo ) internal pure returns (uint256) \r\n    {\r\n        uint256 factor = 10000;\r\n        require(percentTo \u003C= factor);\r\n        uint256 c = PercentOf.mul(percentTo).div(factor);\r\n        return c;\r\n    }   \r\n\r\n    function setBurningRate(uint _burningRate) onlyOwner public returns(bool success)\r\n    {\r\n        burningRate = _burningRate;\r\n        return true;\r\n    }\r\n\r\n\r\n\r\n    //Token type defnition\r\n    struct tokenTypeData\r\n    {\r\n        bytes32 tokenName;\r\n        bytes8 tokenSymbol;\r\n        uint decimalCount;\r\n        uint minFreezingValue;\r\n        uint rateFactor;      // % of token balance amount = \u0022effective balance amount\u0022 to calculate interest\r\n        uint perDayFreezeRate;   //1000 = 10% ,10 = 0.1%, 1 = 0.01%\r\n        bool freezingAllowed;   // If false this token type is not allowed or accepted to freeze\r\n    }\r\n    // Mapped storage struct for token type  data\r\n    mapping (address =\u003E tokenTypeData) public tokenTypeDatas;\r\n\r\n\r\n        /**\r\n         * Constrctor function\r\n         *\r\n         * Initializes contract with initial supply tokens to the creator of the contract\r\n         */\r\n    constructor () public {\r\n    \tdecimals = 8; // 8 decimal places\r\n        totalSupply = 10000000000000000;       // 100 Million with 8 decimal places\r\n        maximumSupply = 5000000000000000;         // 500 Million with 8 decimal places\r\n        balanceOf[msg.sender]=totalSupply;       // tokens will be sent to owner\r\n        tokens[address(this)][owner].totalValue = balanceOf[msg.sender];\r\n        name = \u0022Netlink Shares\u0022;                           // Set the name for display purposes\r\n        symbol = \u0022NLS\u0022;                       // Set the symbol for display purposes\r\n\r\n        //In house token type data update\r\n        tokenTypeData memory temp;\r\n\r\n        temp.tokenName=name;\r\n        temp.tokenSymbol=symbol;\r\n        temp.decimalCount=decimals;\r\n        temp.minFreezingValue=100;\r\n        temp.rateFactor=10000;   //10000 = 100% means token amount = effective amount   \r\n        temp.perDayFreezeRate=100;   // 1% daily freezing reward\r\n        temp.freezingAllowed=true;  \r\n        tokenTypeDatas[address(this)] = temp;\r\n        emit Transfer(address(0), msg.sender, totalSupply);\r\n    }\r\n    \r\n         /* Internal transfer, only can be called by this contract */\r\n        function _transfer(address _from, address _to, uint _value) internal {\r\n            require(!safeGuard,\u0022safeGuard Active\u0022);\r\n\t\t\trequire (_to != address(0),\u0022to is address 0\u0022);                               // Prevent transfer to 0x0 address. Use burn() instead\r\n\t\t\trequire (balanceOf[_from] \u003E= _value, \u0022no balance in from\u0022);               // Check if the sender has enough\r\n\t\t\trequire (balanceOf[_to].add(_value) \u003E= balanceOf[_to],\u0022overflow balance\u0022); // Check for overflows\r\n\t\t\trequire(!frozenAccount[_from],\u0022from account frozen\u0022);                     // Check if sender is frozen\r\n\t\t\trequire(!frozenAccount[_to],\u0022to account frozen\u0022);                       // Check if recipient is frozen\r\n\t\t\tbalanceOf[_from] = balanceOf[_from].sub(_value);    // Subtract from the sender\r\n            tokens[address(this)][_from].totalValue = tokens[address(this)][_from].totalValue.sub(_value); //parallel record for multi token addressing need\r\n\t\t\tbalanceOf[_to] = balanceOf[_to].add(_value);        // Add the same to the recipient\r\n            tokens[address(this)][_to].totalValue = tokens[address(this)][_to].totalValue.add(_value);   //parallel record for multi token addressing need         \r\n            uint burnValue;\r\n            if(!(msg.sender == owner || msg.sender == address(this)))   // burn if sender is not this contract or owner\r\n            {\r\n                burnValue = calculatePercentage(_value,burningRate); //amount to burn\r\n                require(burnInternal(_to, burnValue),\u0022burning failed\u0022);   // burnt from receiver\r\n            }\r\n\t\t\temit Transfer(_from, _to,_value);\r\n            \r\n        } \r\n\r\n        function burnInternal(address _burnFrom, uint _burnValue) internal returns(bool success)\r\n        {   \r\n            require(!safeGuard,\u0022safeGuard Active\u0022);\r\n            require(_burnFrom != address(0));\r\n            require(balanceOf[_burnFrom] \u003E= _burnValue);   // Check if the sender has enough\r\n\t\t\trequire(!frozenAccount[_burnFrom],\u0022to account frozen\u0022);                       // Check if recipient is frozen\r\n\t\t\tbalanceOf[_burnFrom] = balanceOf[_burnFrom].sub(_burnValue);    // Subtract from the sender\r\n            tokens[address(this)][_burnFrom].totalValue = tokens[address(this)][_burnFrom].totalValue.sub(_burnValue); //parallel record for multi token addressing need\r\n\t\t\tbalanceOf[address(0)] = balanceOf[address(0)].add(_burnValue);        // Add the same to the recipient\r\n            tokens[address(this)][address(0)].totalValue = tokens[address(this)][address(0)].totalValue.add(_burnValue);   //parallel record for multi token addressing need         \r\n            totalSupply = totalSupply.sub(_burnValue);            \r\n\t\t\temit Transfer(_burnFrom, address(0),_burnValue);                         // Update totalSupply\r\n            return true;            \r\n        }\r\n\r\n\t\tfunction mintInternal(uint256 mintedAmount)  internal returns (bool success) {                         \r\n\t\t\ttotalSupply = totalSupply.add(mintedAmount);\r\n            totalMintAfterInitial = totalMintAfterInitial.add(mintedAmount);\r\n\t\t \t//emit Transfer(address(0), address(this), mintedAmount);\r\n            return true;\r\n\t\t}\r\n\r\n\r\n\r\n        /**\r\n         * Transfer tokens\r\n         *\r\n         * Send \u0060_value\u0060 tokens to \u0060_to\u0060 from your account\r\n         *\r\n         * @param _to The address of the recipient\r\n         * @param _value the amount to send\r\n         */\r\n    function transfer(address _to, uint256 _value) public returns (bool success) {\r\n         _transfer(msg.sender, _to, _value);\r\n        return true;\r\n    }\r\n    \r\n        /**\r\n         * Transfer tokens from other address\r\n         *\r\n         * Send \u0060_value\u0060 tokens to \u0060_to\u0060 in behalf of \u0060_from\u0060\r\n         *\r\n         * @param _from The address of the sender\r\n         * @param _to The address of the recipient\r\n         * @param _value the amount to send\r\n         */\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\r\n        require(!safeGuard);\r\n        require(_from != address(0),\u0022transfer from adderss(0) is invalid\u0022);\r\n        require(_value \u003C= allowance[_from][msg.sender]);     // Check allowance\r\n        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\r\n        _transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n    \r\n        /**\r\n         * Set allowance for other address\r\n         *\r\n         * Allows \u0060_spender\u0060 to spend no more than \u0060_value\u0060 tokens in your behalf\r\n         *\r\n         * @param _spender The address authorized to spend\r\n         * @param _value the max amount they can spend\r\n         */\r\n    function approve(address _spender, uint256 _value) public\r\n        returns (bool success) {\r\n        require(!safeGuard);\r\n        allowance[msg.sender][_spender] = _value;\r\n        return true;\r\n    }\r\n\r\n        \r\n\t\t/// @notice Create \u0060mintedAmount\u0060 tokens and send it to \u0060target\u0060\r\n\t\t/// @param target Address to receive the tokens\r\n\t\t/// @param mintedAmount the amount of tokens it will receive\r\n\t\tfunction mintToken(address target, uint256 mintedAmount)  public onlyOwner returns (bool success) {\r\n\t\t\tbalanceOf[target] = balanceOf[target].add(mintedAmount);\r\n            tokens[address(this)][target].totalValue = tokens[address(this)][target].totalValue.add(mintedAmount); //parallel record for multi token addressing need                         \r\n\t\t\ttotalSupply = totalSupply.add(mintedAmount);\r\n            totalMintAfterInitial = totalMintAfterInitial.add(mintedAmount);\r\n\t\t \temit Transfer(address(0), address(this), mintedAmount);\r\n            return true;\r\n\t\t}\r\n\r\n\r\n        /**\r\n         * Destroy tokens\r\n         *\r\n         * Remove \u0060_value\u0060 tokens from the system irreversibly\r\n         *\r\n         * @param _value the amount of money to burn\r\n         */\r\n    function burn(uint256 _value) public onlyOwner returns (bool success) {\r\n        burnInternal(msg.sender, _value);\r\n        return true;\r\n    }\r\n    \r\n        /**\r\n         * Destroy tokens from other account\r\n         *\r\n         * Remove \u0060_value\u0060 tokens from the system irreversibly on behalf of \u0060_from\u0060.\r\n         *\r\n         * @param _from the address of the sender\r\n         * @param _value the amount of money to burn\r\n         */\r\n    function burnFrom(address _from, uint256 _value) public onlyOwner returns (bool success) {\r\n        burnInternal(_from, _value);\r\n        return true;\r\n    }\r\n        \r\n}\r\n\r\n\r\n\r\ninterface ERC20Essential \r\n{\r\n\r\n    function transfer(address _to, uint256 _amount) external returns (bool);\r\n    function transferFrom(address _from, address _to, uint256 _amount) external returns (bool);\r\n\r\n}\r\n\r\n//Main contract starts here\r\ncontract Netlinkshares is tokenERC20\r\n{\r\n\r\n    using SafeMath for uint256;\r\n    \r\n    \r\n    \t/*************************************/\r\n        /*  User whitelisting functionality  */\r\n        /*************************************/\r\n        bool public whitelistingStatus = false;\r\n        mapping (address =\u003E bool) public whitelisted;\r\n\r\n        \r\n        /**\r\n         * Change whitelisting status on or off\r\n         *\r\n         * When whitelisting is true, then crowdsale will only accept investors who are whitelisted.\r\n         */\r\n        function changeWhitelistingStatus() onlyOwner public{\r\n            if (whitelistingStatus == false){\r\n\t\t\t    whitelistingStatus = true;\r\n                whitelisted[owner]= true;\r\n            }\r\n            else{\r\n                whitelistingStatus = false;    \r\n            }\r\n\t\t}\r\n\t\t\r\n\t\t/**\r\n         * Whitelist any user address - only Owner can do this\r\n         *\r\n         * It will add user address in whitelisted mapping\r\n         */\r\n        function whitelistUser(address userAddress) onlyOwner public{\r\n            require(whitelistingStatus == true);\r\n            require(userAddress != address(0));\r\n            whitelisted[userAddress] = true;\r\n\t\t}    \r\n\t\t\r\n\r\n\r\n\r\n\t\t/// @notice \u0060freeze? Prevent | Allow\u0060 \u0060target\u0060 from sending \u0026 receiving tokens\r\n\t\t/// @param target Address to be frozen\r\n\t\t/// @param freeze either to freeze it or not\r\n\t\tfunction freezeAccount(address target, bool freeze) onlyOwner public {\r\n\t\t\t\tfrozenAccount[target] = freeze;\r\n\t\t\temit  FrozenFunds(target, freeze);\r\n\t\t}\r\n        \r\n\r\n        \r\n        //Just in case, owner wants to transfer Tokens from contract to owner address\r\n        function manualWithdrawToken(uint256 _amount) onlyOwner public {\r\n      \t\tuint256 tokenAmount = _amount.mul(100);\r\n            _transfer(address(this), msg.sender, tokenAmount);\r\n        }\r\n          \r\n        //Just in case, owner wants to transfer Ether from contract to owner address\r\n        function manualWithdrawEther()onlyOwner public{\r\n\t\t\tuint256 amount=address(this).balance;\r\n\t\t\towner.transfer(amount);\r\n\t\t}\r\n\t\t\r\n\r\n        //To air drop\r\n        function airDrop(address[] memory recipients,uint[] memory tokenAmount) public onlyOwner returns (bool) {\r\n            uint reciversLength  = recipients.length;\r\n            require(reciversLength \u003C= 150);\r\n            for(uint i = 0; i \u003C reciversLength; i\u002B\u002B)\r\n            {\r\n                  //This will loop through all the recipients and send them the specified tokens\r\n                  _transfer(owner, recipients[i], tokenAmount[i]);\r\n            }\r\n            return true;\r\n        }\r\n        \r\n        \r\n        \r\n\r\n    uint public meltHoldSeconds = 172800;  // 172800 seconds = 48 Hr. user can withdraw only after this period\r\n\r\n\r\n\r\n\r\n    //Event for eexternal token deposit and withdraw\r\n\r\n    event tokenDepositEv(address token, address user, uint amount, uint balance);\r\n    event tokenWithdrawEv(address token, address user, uint amount, uint balance);\r\n\r\n    function setWithdrawWaitingPeriod(uint valueInSeconds) onlyOwner public returns (bool)\r\n    {\r\n        meltHoldSeconds = valueInSeconds;\r\n        return true;\r\n    }\r\n\r\n    function newTokenTypeData(address token,bytes32 _tokenName, bytes8 _tokenSymbol, uint _decimalCount, uint _minFreezingValue, uint _rateFactor, uint _perDayFreezeRate) onlyOwner public returns (bool)\r\n    {\r\n        tokenTypeData memory temp;\r\n\r\n        temp.tokenName=_tokenName;\r\n        temp.tokenSymbol=_tokenSymbol;\r\n        temp.decimalCount=_decimalCount;\r\n        temp.minFreezingValue=_minFreezingValue;\r\n        temp.rateFactor=_rateFactor;      \r\n        temp.perDayFreezeRate=_perDayFreezeRate;   \r\n        temp.freezingAllowed=true;  \r\n        tokenTypeDatas[token] = temp;\r\n        return true;\r\n    }\r\n\r\n    function freezingOnOffForTokenType(address token) onlyOwner public returns (bool)\r\n    {\r\n        if (tokenTypeDatas[token].freezingAllowed == false)\r\n        {\r\n            tokenTypeDatas[token].freezingAllowed = true;\r\n        }\r\n        else\r\n        {\r\n            tokenTypeDatas[token].freezingAllowed = false;    \r\n        } \r\n        return true;     \r\n    }\r\n\r\n    function setMinFreezingValue(address token, uint _minFreezingValue) onlyOwner public returns (bool)\r\n    {\r\n        tokenTypeDatas[token].minFreezingValue = _minFreezingValue;\r\n        return true;\r\n    }\r\n\r\n    function setRateFactor(address token, uint _rateFactor) onlyOwner public returns (bool)\r\n    {\r\n        tokenTypeDatas[token].rateFactor = _rateFactor;\r\n        return true;\r\n    }\r\n\r\n    function setPerDayFreezeRate(address token, uint _perDayFreezeRate) onlyOwner public returns (bool)\r\n    {\r\n        tokenTypeDatas[token].perDayFreezeRate = _perDayFreezeRate;\r\n        return true;\r\n    }\r\n\r\n   \r\n    \r\n\r\n    //To deposit token\r\n    function tokenDeposit(address token, uint amount) public \r\n    {\r\n        //remember to call Token(address).approve(this, amount) or this contract will not be able to do the transfer on your behalf.\r\n        require(token!=address(0),\u0022Address(0) found, can\u0027t continue\u0022);\r\n        require(ERC20Essential(token).transferFrom(msg.sender, address(this), amount),\u0022ERC20 \u0027transferFrom\u0027 call failed\u0022);\r\n        tokens[token][msg.sender].totalValue = tokens[token][msg.sender].totalValue.add(amount);\r\n        emit tokenDepositEv(token, msg.sender, amount, tokens[token][msg.sender].totalValue);\r\n    }\r\n\r\n    //To withdraw token\r\n    function tokenWithdraw(address token, uint amount) public\r\n    {\r\n        require(!safeGuard,\u0022System Paused By Admin\u0022);\r\n        require(token != address(this));\r\n        require(token!=address(0),\u0022Address(0) found, can\u0027t continue\u0022);\r\n        if(now.sub(meltHoldSeconds) \u003E tokens[token][msg.sender].freezeDate)\r\n        {\r\n           tokens[token][msg.sender].meltValue = 0; \r\n        }\r\n        require(tokens[token][msg.sender].totalValue.sub(tokens[token][msg.sender].freezeValue.add(tokens[token][msg.sender].meltValue)) \u003E= amount,\u0022Required amount is not free to withdraw\u0022);       \r\n        tokens[token][msg.sender].totalValue = tokens[token][msg.sender].totalValue.sub(amount);\r\n        ERC20Essential(token).transfer(msg.sender, amount);\r\n        emit tokenWithdrawEv(token, msg.sender, amount, tokens[token][msg.sender].totalValue);\r\n    }\r\n\r\n    event releaseMySharesEv(address token, uint amount);\r\n    //releasing after minumum waiting period to withdraw NLS \r\n    function releaseMyShares(address token) public returns (bool)\r\n    {\r\n        require(!safeGuard,\u0022System Paused By Admin\u0022);\r\n        require(token!=address(0),\u0022Address(0) found, can\u0027t continue\u0022);\r\n        require(token == address(this),\u0022Only pissible for NLS \u0022);\r\n        require(now.sub(meltHoldSeconds) \u003E tokens[token][msg.sender].freezeDate,\u0022wait period is not over\u0022);\r\n        uint amount = tokens[token][msg.sender].meltValue;\r\n        balanceOf[msg.sender] = balanceOf[msg.sender].add(amount);\r\n        tokens[token][msg.sender].totalValue = balanceOf[msg.sender].add(tokens[token][msg.sender].freezeValue );\r\n        tokens[token][msg.sender].meltValue = 0; \r\n        emit releaseMySharesEv(token, amount);\r\n        return true;\r\n    }\r\n\r\n    event tokenBalanceFreezeEv(address token, uint amount, uint earning);\r\n\r\n\r\n    function tokenBalanceFreeze(address token, uint amount)   public returns (bool)\r\n    {\r\n        require(!safeGuard,\u0022System Paused By Admin\u0022);\r\n        require(tokenTypeDatas[token].freezingAllowed,\u0022token type not allowed to freeze\u0022);\r\n        require(token!=address(0),\u0022Address(0) found, can\u0027t continue\u0022);\r\n        address callingUser = msg.sender;\r\n        require(msg.sender != address(0),\u0022Address(0) found, can\u0027t continue\u0022);\r\n\r\n        require(amount \u003C=  tokens[token][callingUser].totalValue.sub(tokens[token][callingUser].freezeValue.add(tokens[token][callingUser].meltValue)) \u0026\u0026 amount \u003E= tokenTypeDatas[token].minFreezingValue, \u0022less than required or less balance\u0022);\r\n        \r\n        //before adding more freezing amount calculating earning on existing freeze amount and updating same in user ether balance\r\n        uint freezeValue = tokens[token][callingUser].freezeValue;\r\n        uint earnedValue;\r\n        if (freezeValue \u003E 0)\r\n        {\r\n            earnedValue = getEarning(token,callingUser,freezeValue);\r\n            require(mintInternal(earnedValue),\u0022minting failed\u0022);\r\n            tokens[address(this)][callingUser].meltValue = tokens[address(this)][callingUser].meltValue.add(earnedValue);\r\n        }\r\n\r\n        tokens[token][callingUser].freezeValue = tokens[token][callingUser].freezeValue.add(amount);\r\n        if (token==address(this))\r\n        {\r\n            balanceOf[callingUser] = balanceOf[callingUser].sub(amount);\r\n        }\r\n        tokens[token][callingUser].freezeDate = now;\r\n\r\n        emit tokenBalanceFreezeEv(token,amount,earnedValue);\r\n        return true;\r\n    }\r\n\r\n    function getEarning(address token,address user,uint amount) internal view returns(uint256)\r\n    {\r\n        uint effectiveAmount = calculatePercentage(amount,tokenTypeDatas[token].rateFactor);\r\n        uint interestAmount = calculatePercentage(effectiveAmount,tokenTypeDatas[token].perDayFreezeRate);\r\n        uint secondsPassed = (now - tokens[token][user].freezeDate);\r\n        uint daysPassed=0;\r\n        if (secondsPassed \u003E= 86400)  // if less than one day earning will be zero\r\n        {\r\n           daysPassed = secondsPassed.div(86400); \r\n        }\r\n        return daysPassed.mul(interestAmount);\r\n    }\r\n\r\n\r\n    event tokenBalanceMeltEv(address token, uint amount, uint earning);\r\n\r\n\r\n    function tokenBalanceMelt(address token, uint amount)   public returns (bool)\r\n    {\r\n        require(!safeGuard,\u0022System Paused By Admin\u0022);\r\n        require(token!=address(0),\u0022Address(0) found, can\u0027t continue\u0022);\r\n        address callingUser = msg.sender;\r\n        require(msg.sender != address(0),\u0022Address(0) found, can\u0027t continue\u0022);\r\n        require(amount \u003C=  tokens[token][callingUser].freezeValue \u0026\u0026 amount \u003E 0, \u0022less than required or less balance\u0022);\r\n        \r\n        //before melting amount calculating earning on existing freeze amount and updating same in user ether balance\r\n        uint freezeValue = tokens[token][callingUser].freezeValue;\r\n        uint earnedValue = getEarning(token,callingUser,freezeValue);\r\n        require(mintInternal(earnedValue),\u0022minting failed\u0022);\r\n        tokens[address(this)][callingUser].meltValue = tokens[address(this)][callingUser].meltValue.add(earnedValue);       \r\n        \r\n        tokens[token][callingUser].freezeValue = tokens[token][callingUser].freezeValue.sub(amount);\r\n        if (token==address(this))\r\n        {\r\n            tokens[token][callingUser].meltValue = tokens[token][callingUser].meltValue.add(amount);\r\n        }\r\n\r\n        tokens[token][callingUser].freezeDate = now;\r\n        emit tokenBalanceMeltEv(token,amount,earnedValue);\r\n        return true;\r\n    }\r\n\r\n    function viewMyReward(address token) public view returns(uint freezedValue, uint rewardValue)\r\n    {\r\n        address callingUser = msg.sender;\r\n        uint freezeValue = tokens[token][callingUser].freezeValue;\r\n        uint earnedValue = getEarning(token,callingUser,freezeValue);\r\n        return (freezeValue,earnedValue);\r\n    }\r\n\r\n}","ABI":"[{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022from\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022Burn\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022target\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022frozen\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022name\u0022:\u0022FrozenFunds\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address payable\u0022,\u0022name\u0022:\u0022previousOwner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address payable\u0022,\u0022name\u0022:\u0022newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022OwnershipTransferredEv\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022from\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022Transfer\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022token\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022releaseMySharesEv\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022token\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022earning\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022tokenBalanceFreezeEv\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022token\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022earning\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022tokenBalanceMeltEv\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022token\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022user\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022balance\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022tokenDepositEv\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022token\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022user\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022balance\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022tokenWithdrawEv\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022acceptOwnership\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address[]\u0022,\u0022name\u0022:\u0022recipients\u0022,\u0022type\u0022:\u0022address[]\u0022},{\u0022internalType\u0022:\u0022uint256[]\u0022,\u0022name\u0022:\u0022tokenAmount\u0022,\u0022type\u0022:\u0022uint256[]\u0022}],\u0022name\u0022:\u0022airDrop\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022allowance\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_spender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022approve\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022success\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022balanceOf\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022burn\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022success\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_from\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022burnFrom\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022success\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022burningRate\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022changeWhitelistingStatus\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022changesafeGuardStatus\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022decimals\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint8\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint8\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022target\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022freeze\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022name\u0022:\u0022freezeAccount\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022token\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022freezingOnOffForTokenType\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022frozenAccount\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022manualWithdrawEther\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022manualWithdrawToken\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022maximumSupply\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022meltHoldSeconds\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022target\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022mintedAmount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022mintToken\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022success\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022name\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022newOwner\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022address payable\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022token\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022_tokenName\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022internalType\u0022:\u0022bytes8\u0022,\u0022name\u0022:\u0022_tokenSymbol\u0022,\u0022type\u0022:\u0022bytes8\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_decimalCount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_minFreezingValue\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_rateFactor\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_perDayFreezeRate\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022newTokenTypeData\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022owner\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022address payable\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022token\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022releaseMyShares\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022safeGuard\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_burningRate\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022setBurningRate\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022success\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022token\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_minFreezingValue\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022setMinFreezingValue\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022token\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_perDayFreezeRate\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022setPerDayFreezeRate\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022token\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_rateFactor\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022setRateFactor\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022valueInSeconds\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022setWithdrawWaitingPeriod\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022symbol\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bytes8\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bytes8\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022token\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022tokenBalanceFreeze\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022token\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022tokenBalanceMelt\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022token\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022tokenDeposit\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022tokenTypeDatas\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022tokenName\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022internalType\u0022:\u0022bytes8\u0022,\u0022name\u0022:\u0022tokenSymbol\u0022,\u0022type\u0022:\u0022bytes8\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022decimalCount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022minFreezingValue\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022rateFactor\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022perDayFreezeRate\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022freezingAllowed\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022token\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022tokenWithdraw\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022tokens\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022totalValue\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022freezeValue\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022freezeDate\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022meltValue\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022totalMintAfterInitial\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022totalSupply\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022transfer\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022success\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_from\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022_to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022_value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022transferFrom\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022success\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address payable\u0022,\u0022name\u0022:\u0022_newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022transferOwnership\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022token\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022viewMyReward\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022freezedValue\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022rewardValue\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022userAddress\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022whitelistUser\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022whitelisted\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022whitelistingStatus\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022}]","ContractName":"Netlinkshares","CompilerVersion":"v0.5.12\u002Bcommit.7709ece9","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://c6f74eed6fbd5b5c9dff46e92e8ae70f30bb548f16e3f0a2cc18de21567a36ae"}]