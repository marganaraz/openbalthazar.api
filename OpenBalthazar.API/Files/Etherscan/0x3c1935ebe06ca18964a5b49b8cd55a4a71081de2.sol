[{"SourceCode":"//orfeed.org alpha contract\r\npragma solidity ^ 0.4 .26;\r\n\r\ninterface IKyberNetworkProxy {\r\n    function maxGasPrice() external view returns(uint);\r\n\r\n    function getUserCapInWei(address user) external view returns(uint);\r\n\r\n    function getUserCapInTokenWei(address user, ERC20 token) external view returns(uint);\r\n\r\n    function enabled() external view returns(bool);\r\n\r\n    function info(bytes32 id) external view returns(uint);\r\n\r\n    function getExpectedRate(ERC20 src, ERC20 dest, uint srcQty) external view returns(uint expectedRate, uint slippageRate);\r\n\r\n    function tradeWithHint(ERC20 src, uint srcAmount, ERC20 dest, address destAddress, uint maxDestAmount, uint minConversionRate, address walletId, bytes hint) external payable returns(uint);\r\n\r\n    function swapEtherToToken(ERC20 token, uint minRate) external payable returns(uint);\r\n\r\n    function swapTokenToEther(ERC20 token, uint tokenQty, uint minRate) external returns(uint);\r\n}\r\n\r\ninterface SynthetixExchange {\r\n    function effectiveValue(bytes32 from, uint256 amount, bytes32 to) external view returns(uint256);\r\n}\r\n\r\ninterface Kyber {\r\n    function getOutputAmount(ERC20 from, ERC20 to, uint256 amount) external view returns(uint256);\r\n\r\n    function getInputAmount(ERC20 from, ERC20 to, uint256 amount) external view returns(uint256);\r\n}\r\n\r\ninterface Synthetix {\r\n    function getOutputAmount(bytes32 from, bytes32 to, uint256 amount) external view returns(uint256);\r\n\r\n    function getInputAmount(bytes32 from, bytes32 to, uint256 amount) external view returns(uint256);\r\n}\r\n\r\ninterface premiumSubInterface {\r\n    function getExchangeRate(string fromSymbol, string toSymbol, string venue, uint256 amount, address requestAddress) external view returns(uint256);\r\n\r\n}\r\ninterface synthetixMain {\r\n    function getOutputAmount(bytes32 from, bytes32 to, uint256 amount) external view returns(uint256);\r\n\r\n    function getInputAmount(bytes32 from, bytes32 to, uint256 amount) external view returns(uint256);\r\n}\r\n\r\ncontract synthConvertInterface {\r\n    function name() external view returns(string);\r\n\r\n    function setGasPriceLimit(uint256 _gasPriceLimit) external;\r\n\r\n    function approve(address spender, uint256 value) external returns(bool);\r\n\r\n    function removeSynth(bytes32 currencyKey) external;\r\n\r\n    function issueSynths(bytes32 currencyKey, uint256 amount) external;\r\n\r\n    function mint() external returns(bool);\r\n\r\n    function setIntegrationProxy(address _integrationProxy) external;\r\n\r\n    function nominateNewOwner(address _owner) external;\r\n\r\n    function initiationTime() external view returns(uint256);\r\n\r\n    function totalSupply() external view returns(uint256);\r\n\r\n    function setFeePool(address _feePool) external;\r\n\r\n    function exchange(bytes32 sourceCurrencyKey, uint256 sourceAmount, bytes32 destinationCurrencyKey, address destinationAddress) external returns(bool);\r\n\r\n    function setSelfDestructBeneficiary(address _beneficiary) external;\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns(bool);\r\n\r\n    function decimals() external view returns(uint8);\r\n\r\n    function synths(bytes32) external view returns(address);\r\n\r\n    function terminateSelfDestruct() external;\r\n\r\n    function rewardsDistribution() external view returns(address);\r\n\r\n    function exchangeRates() external view returns(address);\r\n\r\n    function nominatedOwner() external view returns(address);\r\n\r\n    function setExchangeRates(address _exchangeRates) external;\r\n\r\n    function effectiveValue(bytes32 sourceCurrencyKey, uint256 sourceAmount, bytes32 destinationCurrencyKey) external view returns(uint256);\r\n\r\n    function transferableSynthetix(address account) external view returns(uint256);\r\n\r\n    function validateGasPrice(uint256 _givenGasPrice) external view;\r\n\r\n    function balanceOf(address account) external view returns(uint256);\r\n\r\n    function availableCurrencyKeys() external view returns(bytes32[]);\r\n\r\n    function acceptOwnership() external;\r\n\r\n    function remainingIssuableSynths(address issuer, bytes32 currencyKey) external view returns(uint256);\r\n\r\n    function availableSynths(uint256) external view returns(address);\r\n\r\n    function totalIssuedSynths(bytes32 currencyKey) external view returns(uint256);\r\n\r\n    function addSynth(address synth) external;\r\n\r\n    function owner() external view returns(address);\r\n\r\n    function setExchangeEnabled(bool _exchangeEnabled) external;\r\n\r\n    function symbol() external view returns(string);\r\n\r\n    function gasPriceLimit() external view returns(uint256);\r\n\r\n    function setProxy(address _proxy) external;\r\n\r\n    function selfDestruct() external;\r\n\r\n    function integrationProxy() external view returns(address);\r\n\r\n    function setTokenState(address _tokenState) external;\r\n\r\n    function collateralisationRatio(address issuer) external view returns(uint256);\r\n\r\n    function rewardEscrow() external view returns(address);\r\n\r\n    function SELFDESTRUCT_DELAY() external view returns(uint256);\r\n\r\n    function collateral(address account) external view returns(uint256);\r\n\r\n    function maxIssuableSynths(address issuer, bytes32 currencyKey) external view returns(uint256);\r\n\r\n    function transfer(address to, uint256 value) external returns(bool);\r\n\r\n    function synthInitiatedExchange(address from, bytes32 sourceCurrencyKey, uint256 sourceAmount, bytes32 destinationCurrencyKey, address destinationAddress) external returns(bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value, bytes data) external returns(bool);\r\n\r\n    function feePool() external view returns(address);\r\n\r\n    function selfDestructInitiated() external view returns(bool);\r\n\r\n    function setMessageSender(address sender) external;\r\n\r\n    function initiateSelfDestruct() external;\r\n\r\n    function transfer(address to, uint256 value, bytes data) external returns(bool);\r\n\r\n    function supplySchedule() external view returns(address);\r\n\r\n    function selfDestructBeneficiary() external view returns(address);\r\n\r\n    function setProtectionCircuit(bool _protectionCircuitIsActivated) external;\r\n\r\n    function debtBalanceOf(address issuer, bytes32 currencyKey) external view returns(uint256);\r\n\r\n    function synthetixState() external view returns(address);\r\n\r\n    function availableSynthCount() external view returns(uint256);\r\n\r\n    function allowance(address owner, address spender) external view returns(uint256);\r\n\r\n    function escrow() external view returns(address);\r\n\r\n    function tokenState() external view returns(address);\r\n\r\n    function burnSynths(bytes32 currencyKey, uint256 amount) external;\r\n\r\n    function proxy() external view returns(address);\r\n\r\n    function issueMaxSynths(bytes32 currencyKey) external;\r\n\r\n    function exchangeEnabled() external view returns(bool);\r\n}\r\n\r\ninterface Uniswap {\r\n    function getEthToTokenInputPrice(uint256 ethSold) external view returns(uint256);\r\n\r\n    function getEthToTokenOutputPrice(uint256 tokensBought) external view returns(uint256);\r\n\r\n    function getTokenToEthInputPrice(uint256 tokensSold) external view returns(uint256);\r\n\r\n    function getTokenToEthOutputPrice(uint256 ethBought) external view returns(uint256);\r\n}\r\n\r\ninterface ERC20 {\r\n    function totalSupply() public view returns(uint supply);\r\n\r\n    function balanceOf(address _owner) public view returns(uint balance);\r\n\r\n    function transfer(address _to, uint _value) public returns(bool success);\r\n\r\n    function transferFrom(address _from, address _to, uint _value) public returns(bool success);\r\n\r\n    function approve(address _spender, uint _value) public returns(bool success);\r\n\r\n    function allowance(address _owner, address _spender) public view returns(uint remaining);\r\n\r\n    function decimals() public view returns(uint digits);\r\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\r\n}\r\n\r\ncontract IERC20Token {\r\n    // these functions aren\u0027t abstract since the compiler emits automatically generated getter functions as external\r\n    function name() public view returns(string) {}\r\n\r\n    function symbol() public view returns(string) {}\r\n\r\n    function decimals() public view returns(uint8) {}\r\n\r\n    function totalSupply() public view returns(uint256) {}\r\n\r\n    function balanceOf(address _owner) public view returns(uint256) {\r\n        _owner;\r\n    }\r\n\r\n    function allowance(address _owner, address _spender) public view returns(uint256) {\r\n        _owner;\r\n        _spender;\r\n    }\r\n\r\n    function transfer(address _to, uint256 _value) public returns(bool success);\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns(bool success);\r\n\r\n    function approve(address _spender, uint256 _value) public returns(bool success);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal constant returns(uint256) {\r\n        uint256 c = a * b;\r\n        assert(a == 0 || c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal constant returns(uint256) {\r\n        assert(b \u003E 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        assert(a == b * c \u002B a % b); // There is no case in which this doesn\u0027t hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal constant returns(uint256) {\r\n        assert(b \u003C= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal constant returns(uint256) {\r\n        uint256 c = a \u002B b;\r\n        assert(c \u003E= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n// Oracle Feed Contract\r\ncontract orfeed {\r\n    using SafeMath\r\n    for uint256;\r\n\r\n    address owner;\r\n    mapping(string =\u003E address) freeRateTokenSymbols;\r\n    mapping(string =\u003E address) freeRateForexSymbols;\r\n    mapping(string =\u003E bytes32) freeRateForexBytes;\r\n\r\n    uint256 rateDivide1;\r\n    uint256 rateMultiply1;\r\n\r\n    uint256 rateDivide2;\r\n    uint256 rateMultiply2;\r\n\r\n    uint256 rateDivide3;\r\n    uint256 rateMultiply3;\r\n\r\n    uint256 rateDivide4;\r\n    uint256 rateMultiply4;\r\n\r\n    address ethTokenAddress;\r\n\r\n    address tokenPriceOracleAddress;\r\n    address synthetixExchangeAddress;\r\n\r\n    address tokenPriceOracleAddress2;\r\n\r\n    //forex price oracle address. Can be changed by DAO\r\n    address forexPriceOracleAddress;\r\n\r\n    //premium price oracle address. Can be changed by DAO\r\n    address premiumSubPriceOracleAddress;\r\n\r\n    premiumSubInterface psi;\r\n    IKyberNetworkProxy ki;\r\n    SynthetixExchange se;\r\n    synthConvertInterface s;\r\n    synthetixMain si;\r\n    Kyber kyber;\r\n    Synthetix synthetix;\r\n    Uniswap uniswap;\r\n    ERC20 ethToken;\r\n\r\n    /*\r\n\r\n    ----\r\n\r\n\r\n    Below is referenced for understanding for how flow works\r\n\r\n\r\n    ----\r\n\r\n    This will be set in external premium sub contract\r\n    mapping(string =\u003E address) feedOwners;\r\n    mapping(string =\u003E uint256) feedOwnerDeposits;\r\n    mapping(string =\u003E address[]) feedSubscribers;\r\n\r\n    //normalsubfee should always remain zero\r\n    uint256 normalSubscriptionFee = 0;\r\n\r\n \r\n    \r\n    //voted on by owner DAO\r\n    uint256 premiumSubscriptionFee = 1;\r\n\r\n    //vote on by ownerDAO\r\n    uint256 purchaseUntakenFeedFee = 1;\r\n\r\n    //voted on by ownerDAO\r\n    uint256 houseTransactionPercentage = 1;\r\n\r\n    */\r\n\r\n    // Functions with this modifier can only be executed by the owner\r\n    modifier onlyOwner() {\r\n        if (msg.sender != owner) {\r\n            throw;\r\n        }\r\n        _;\r\n    }\r\n\r\n    //free ERC20 rates. Can be changed/updated by ownerDAO\r\n    constructor() public payable {\r\n        freeRateTokenSymbols[\u0027DAI\u0027] = 0x89d24a6b4ccb1b6faa2625fe562bdd9a23260359;\r\n        freeRateTokenSymbols[\u0027USDC\u0027] = 0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48;\r\n        freeRateTokenSymbols[\u0027MKR\u0027] = 0x9f8f72aa9304c8b593d555f12ef6589cc3a579a2;\r\n        freeRateTokenSymbols[\u0027LINK\u0027] = 0x514910771af9ca656af840dff83e8264ecf986ca;\r\n        freeRateTokenSymbols[\u0027BAT\u0027] = 0x0d8775f648430679a709e98d2b0cb6250d2887ef;\r\n        freeRateTokenSymbols[\u0027WBTC\u0027] = 0x2260fac5e5542a773aa44fbcfedf7c193bc2c599;\r\n        freeRateTokenSymbols[\u0027BTC\u0027] = 0x2260fac5e5542a773aa44fbcfedf7c193bc2c599;\r\n        freeRateTokenSymbols[\u0027OMG\u0027] = 0xd26114cd6EE289AccF82350c8d8487fedB8A0C07;\r\n        freeRateTokenSymbols[\u0027ZRX\u0027] = 0xe41d2489571d322189246dafa5ebde1f4699f498;\r\n        freeRateTokenSymbols[\u0027TUSD\u0027] = 0x0000000000085d4780B73119b644AE5ecd22b376;\r\n        freeRateTokenSymbols[\u0027ETH\u0027] = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n        freeRateTokenSymbols[\u0027WETH\u0027] = 0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2;\r\n\r\n        //free forex rates. Can be changed/updated by ownerDAO        \r\n        freeRateForexSymbols[\u0027USD\u0027] = 0x57ab1e02fee23774580c119740129eac7081e9d3;\r\n        freeRateForexSymbols[\u0027EUR\u0027] = 0xd71ecff9342a5ced620049e616c5035f1db98620;\r\n        freeRateForexSymbols[\u0027CHF\u0027] = 0x0f83287ff768d1c1e17a42f44d644d7f22e8ee1d;\r\n        freeRateForexSymbols[\u0027JPY\u0027] = 0xf6b1c627e95bfc3c1b4c9b825a032ff0fbf3e07d;\r\n        freeRateForexSymbols[\u0027GBP\u0027] = 0x97fe22e7341a0cd8db6f6c021a24dc8f4dad855f;\r\n\r\n        freeRateForexBytes[\u0027USD\u0027] = 0x7355534400000000000000000000000000000000000000000000000000000000;\r\n        freeRateForexBytes[\u0027EUR\u0027] = 0x7345555200000000000000000000000000000000000000000000000000000000;\r\n        freeRateForexBytes[\u0027CHF\u0027] = 0x7343484600000000000000000000000000000000000000000000000000000000;\r\n        freeRateForexBytes[\u0027JPY\u0027] = 0x734a505900000000000000000000000000000000000000000000000000000000;\r\n        freeRateForexBytes[\u0027GBP\u0027] = 0x7347425000000000000000000000000000000000000000000000000000000000;\r\n\r\n        //when returning rates they will be first divided by and then multiplied by these rates\r\n        rateDivide1 = 100;\r\n        rateMultiply1 = 100;\r\n\r\n        rateDivide2 = 100;\r\n        rateMultiply2 = 100;\r\n\r\n        rateDivide3 = 100;\r\n        rateMultiply3 = 100;\r\n\r\n        rateDivide4 = 100;\r\n        rateMultiply4 = 100;\r\n\r\n        //erc20 price oracle address. Can be changed by DAO\r\n        tokenPriceOracleAddress = 0xFd9304Db24009694c680885e6aa0166C639727D6;\r\n        synthetixExchangeAddress = 0x99a46c42689720d9118FF7aF7ce80C2a92fC4f97;\r\n\r\n        tokenPriceOracleAddress2 = 0xe9Cf7887b93150D4F2Da7dFc6D502B216438F244;\r\n\r\n        //forex price oracle address. Can be changed by DAO\r\n        forexPriceOracleAddress = 0xE86C848De6e4457720A1eb7f37B519010CD26d35;\r\n\r\n        //premium price oracle address. Can be changed by DAO\r\n        premiumSubPriceOracleAddress = 0xc011a72400e58ecd99ee497cf89e3775d4bd732f;\r\n\r\n        ethTokenAddress = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n\r\n\r\n        ethToken = ERC20(ethTokenAddress);\r\n\r\n        \r\n\r\n        ki = IKyberNetworkProxy(tokenPriceOracleAddress);\r\n        se = SynthetixExchange(synthetixExchangeAddress);\r\n\r\n        si = synthetixMain(forexPriceOracleAddress);\r\n\r\n        kyber = Kyber(tokenPriceOracleAddress); // Kyber oracle\r\n        synthetix = Synthetix(forexPriceOracleAddress); // Synthetix oracle\r\n\r\n        uniswap = Uniswap(tokenPriceOracleAddress2);\r\n\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function() payable {\r\n        throw;\r\n    }\r\n\r\n    function getTokenToSynthOutputAmount(ERC20 token, bytes32 synth, uint256 inputAmount) returns(uint256) {\r\n        kyber = Kyber(tokenPriceOracleAddress); \r\n        uint256 ethAmount = kyber.getOutputAmount(token, ethToken, inputAmount);\r\n        uniswap = Uniswap(tokenPriceOracleAddress2);\r\n        uint256 sethAmount = uniswap.getEthToTokenInputPrice(ethAmount);\r\n        synthetix = Synthetix(forexPriceOracleAddress);\r\n        uint256 outputAmount = synthetix.getOutputAmount(\u0027sETH\u0027, synth, sethAmount);\r\n        return outputAmount;\r\n    }\r\n\r\n    function getSynthToTokenOutputAmount(bytes32 synth, ERC20 token, uint256 inputAmount) returns(uint256) {\r\n         kyber = Kyber(tokenPriceOracleAddress); \r\n        synthetix = Synthetix(forexPriceOracleAddress);\r\n        uint256 sethAmount = synthetix.getOutputAmount(synth, \u0027sETH\u0027, inputAmount);\r\n        uniswap = Uniswap(tokenPriceOracleAddress2);\r\n        uint256 ethAmount = uniswap.getTokenToEthInputPrice(sethAmount);\r\n        uint256 outputAmount = kyber.getOutputAmount(ethToken, token, ethAmount);\r\n        return outputAmount;\r\n    }\r\n\r\n    //this will go to a DAO\r\n    function changeOwner(address newOwner) onlyOwner external returns(bool) {\r\n        owner = newOwner;\r\n        return true;\r\n    }\r\n\r\n    function updateMulDivConverter1(uint256 newDiv, uint256 newMul) onlyOwner external returns(bool) {\r\n        rateMultiply1 = newMul;\r\n        rateDivide1 = newDiv;\r\n        return true;\r\n    }\r\n\r\n    function updateMulDivConverter2(uint256 newDiv, uint256 newMul) onlyOwner external returns(bool) {\r\n        rateMultiply2 = newMul;\r\n        rateDivide2 = newDiv;\r\n        return true;\r\n    }\r\n\r\n    function updateMulDivConverter3(uint256 newDiv, uint256 newMul) onlyOwner external returns(bool) {\r\n        rateMultiply3 = newMul;\r\n        rateDivide3 = newDiv;\r\n        return true;\r\n    }\r\n\r\n    function updateMulDivConverter4(uint256 newDiv, uint256 newMul) onlyOwner external returns(bool) {\r\n        rateMultiply4 = newMul;\r\n        rateDivide4 = newDiv;\r\n        return true;\r\n    }\r\n\r\n    //this will go to a DAO\r\n    function updateTokenOracleAddress(address newOracle) onlyOwner external returns(bool) {\r\n        tokenPriceOracleAddress = newOracle;\r\n        return true;\r\n    }\r\n\r\n    function updateEthTokenAddress(address newOracle) onlyOwner external returns(bool) {\r\n        ethTokenAddress = newOracle;\r\n        return true;\r\n    }\r\n\r\n\r\n\r\n    function updateTokenOracleAddress2(address newOracle) onlyOwner external returns(bool) {\r\n        tokenPriceOracleAddress2 = newOracle;\r\n        return true;\r\n    }\r\n\r\n\r\n    //this will go to a DAO\r\n    function updateForexOracleAddress(address newOracle) onlyOwner external returns(bool) {\r\n        forexPriceOracleAddress = newOracle;\r\n        return true;\r\n    }\r\n\r\n\r\n    //this will go to a DAO\r\n    function updatePremiumSubOracleAddress(address newOracle) onlyOwner external returns(bool) {\r\n        premiumSubPriceOracleAddress = newOracle;\r\n        return true;\r\n    }\r\n\r\n    //this will go to a DAO\r\n    function addFreeToken(string symb, address tokenAddress) onlyOwner external returns(bool) {\r\n        if (freeRateTokenSymbols[symb] != 0x0) {\r\n            //this token already exists\r\n            return false;\r\n        }\r\n        freeRateTokenSymbols[symb] = tokenAddress;\r\n        return true;\r\n    }\r\n\r\n    function addFreeCurrency(string symb, address tokenAddress, bytes32 byteCode) onlyOwner external returns(bool) {\r\n        if (freeRateForexSymbols[symb] != 0x0) {\r\n            //this token already exists\r\n            return false;\r\n        }\r\n        freeRateForexSymbols[symb] = tokenAddress;\r\n        freeRateForexBytes[symb] = byteCode;\r\n        return true;\r\n    }\r\n\r\n    function removeFreeToken(string symb) onlyOwner external returns(bool) {\r\n        freeRateTokenSymbols[symb] = 0x0;\r\n        return true;\r\n    }\r\n\r\n\r\n    function removeFreeCurrency(string symb) onlyOwner external returns(bool) {\r\n        freeRateForexSymbols[symb] = 0x0;\r\n        return true;\r\n    }\r\n\r\n   \r\n\r\n    //returns zero if the rate cannot be found\r\n    function getExchangeRate(string fromSymbol, string toSymbol, string venue, uint256 amount) constant external returns(uint256) {\r\n        bool isFreeFrom = isFree(fromSymbol);\r\n        bool isFreeTo = isFree(toSymbol);\r\n        bool isFreeVenue = isFreeVenueCheck(venue);\r\n        uint256 rate;\r\n\r\n        if (isFreeFrom == true \u0026\u0026 isFreeTo == true \u0026\u0026 isFreeVenue == true) {\r\n            rate = getFreeExchangeRate(fromSymbol, toSymbol, amount);\r\n            return rate;\r\n        } else {\r\n            psi = premiumSubInterface(premiumSubPriceOracleAddress);\r\n            //init.sender and msg.sender must have premium\r\n            rate = psi.getExchangeRate(fromSymbol, toSymbol, venue, amount, msg.sender);\r\n            return rate;\r\n        }\r\n    }\r\n\r\n\r\n\r\n    function getTokenAddress(string symbol) constant external returns(address){\r\n        return freeRateTokenSymbols[symbol];\r\n    }\r\n\r\n    function getForexAddress(string symbol) constant external returns(address){\r\n         return freeRateForexSymbols[symbol];\r\n    }\r\n\r\n    function getSynthBytes32(string symbol)  constant external returns(bytes32){\r\n        return freeRateForexBytes[symbol];\r\n    }\r\n\r\n    function getTokenDecimalCount(address tokenAddress) constant external returns(uint256){\r\n        ERC20 thisToken = ERC20(tokenAddress);\r\n        uint256 decimalCount = thisToken.decimals();\r\n    }\r\n\r\n\r\n\r\n    function compareStrings(string memory a, string memory b) public view returns(bool) {\r\n        return (keccak256(abi.encodePacked((a))) == keccak256(abi.encodePacked((b))));\r\n    }\r\n\r\n    function isFreeVenueCheck(string venueToCheck) returns(bool) {\r\n        string memory blankString = \u0027\u0027;\r\n        string memory defaultString = \u0027DEFAULT\u0027;\r\n        \r\n        if (compareStrings(venueToCheck, blankString)) {\r\n            return true;\r\n        } \r\n        \r\n        if (compareStrings(venueToCheck, defaultString)) {\r\n            return true;\r\n        } \r\n    \r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function isFree(string symToCheck) returns(bool) {\r\n        if (freeRateTokenSymbols[symToCheck] != 0x0) {\r\n            return true;\r\n        }\r\n        if (freeRateForexSymbols[symToCheck] != 0x0) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    function getFreeExchangeRate(string fromSymb, string toSymb, uint256 amount) returns(uint256) {\r\n        uint256 ethAmount;\r\n\r\n         //token to token\r\n        if (freeRateTokenSymbols[fromSymb] != 0x0 \u0026\u0026 freeRateTokenSymbols[toSymb] != 0x0) {\r\n           \r\n             kyber = Kyber(tokenPriceOracleAddress); \r\n            uint256 toRate = kyber.getOutputAmount(ERC20(freeRateTokenSymbols[fromSymb]), ERC20(freeRateTokenSymbols[toSymb]), amount);\r\n           \r\n        } \r\n\r\n        //token to forex\r\n        else if (freeRateTokenSymbols[fromSymb] != 0x0 \u0026\u0026 freeRateTokenSymbols[toSymb] == 0x0) {\r\n           \r\n            uint256 toRate2 = getTokenToSynthOutputAmount(ERC20(freeRateTokenSymbols[fromSymb]), freeRateForexBytes[toSymb], amount);\r\n            return toRate2.mul(rateMultiply2).div(rateDivide2);\r\n        } \r\n\r\n        //forex to token\r\n        else if (freeRateTokenSymbols[fromSymb] == 0x0 \u0026\u0026 freeRateTokenSymbols[toSymb] != 0x0) {\r\n            \r\n            uint256 toRate3 = getSynthToTokenOutputAmount(freeRateForexBytes[fromSymb], ERC20(freeRateTokenSymbols[toSymb]), amount);\r\n            return toRate3.mul(rateMultiply3).div(rateDivide3);\r\n        } \r\n\r\n\r\n        //forex to forex\r\n\r\n        else if (freeRateTokenSymbols[fromSymb] == 0x0 \u0026\u0026 freeRateTokenSymbols[toSymb] == 0x0) {\r\n            \r\n            uint256 toRate4 = se.effectiveValue(freeRateForexBytes[fromSymb], amount, freeRateForexBytes[toSymb]);\r\n            return toRate4.mul(rateMultiply4).div(rateDivide4);\r\n        } \r\n        //something\u0027s wrong\r\n        else {\r\n            return 0;\r\n        }\r\n    }\r\n    \r\n    //end contract\r\n}","ABI":"[{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022symb\u0022,\u0022type\u0022:\u0022string\u0022},{\u0022name\u0022:\u0022tokenAddress\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022byteCode\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022addFreeCurrency\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022newDiv\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022newMul\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022updateMulDivConverter2\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022synth\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022name\u0022:\u0022token\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022inputAmount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022getSynthToTokenOutputAmount\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022symb\u0022,\u0022type\u0022:\u0022string\u0022},{\u0022name\u0022:\u0022tokenAddress\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022addFreeToken\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022newOracle\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022updateForexOracleAddress\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022newDiv\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022newMul\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022updateMulDivConverter1\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022newDiv\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022newMul\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022updateMulDivConverter3\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022fromSymbol\u0022,\u0022type\u0022:\u0022string\u0022},{\u0022name\u0022:\u0022toSymbol\u0022,\u0022type\u0022:\u0022string\u0022},{\u0022name\u0022:\u0022venue\u0022,\u0022type\u0022:\u0022string\u0022},{\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022getExchangeRate\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022symb\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022name\u0022:\u0022removeFreeToken\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022newOracle\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022updateEthTokenAddress\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022newOracle\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022updatePremiumSubOracleAddress\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022symb\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022name\u0022:\u0022removeFreeCurrency\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022venueToCheck\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022name\u0022:\u0022isFreeVenueCheck\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022symToCheck\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022name\u0022:\u0022isFree\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022changeOwner\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022tokenAddress\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022getTokenDecimalCount\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022a\u0022,\u0022type\u0022:\u0022string\u0022},{\u0022name\u0022:\u0022b\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022name\u0022:\u0022compareStrings\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022symbol\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022name\u0022:\u0022getTokenAddress\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022token\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022synth\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022name\u0022:\u0022inputAmount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022getTokenToSynthOutputAmount\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022newOracle\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022updateTokenOracleAddress2\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022symbol\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022name\u0022:\u0022getSynthBytes32\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022fromSymb\u0022,\u0022type\u0022:\u0022string\u0022},{\u0022name\u0022:\u0022toSymb\u0022,\u0022type\u0022:\u0022string\u0022},{\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022getFreeExchangeRate\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022newOracle\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022updateTokenOracleAddress\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022newDiv\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022newMul\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022updateMulDivConverter4\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022symbol\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022name\u0022:\u0022getForexAddress\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[],\u0022payable\u0022:true,\u0022stateMutability\u0022:\u0022payable\u0022,\u0022type\u0022:\u0022constructor\u0022},{\u0022payable\u0022:true,\u0022stateMutability\u0022:\u0022payable\u0022,\u0022type\u0022:\u0022fallback\u0022}]","ContractName":"orfeed","CompilerVersion":"v0.4.26\u002Bcommit.4563c3fc","OptimizationUsed":"0","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://ed02a5c3aa7c1a114c26e69267fb0af903b73d6f7344c1d53ad701c61d9206d3"}]