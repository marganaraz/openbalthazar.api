[{"SourceCode":"pragma solidity ^0.5.12;\r\n\r\n/**\r\n * @dev Simplified contract of a \u0060../Swapper.sol\u0060\r\n */\r\ncontract SwapperLike {\r\n    function fromDaiToBTU(address, uint256) external;\r\n}\r\n\r\n\r\n/**\r\n * @dev Simplified contract of a VatLike\r\n * For full implementation please see MakerDAO\u0027s repo at \u003Chttps://github.com/makerdao/dss\u003E\r\n */\r\ncontract VatLike {\r\n    function hope(address) external;\r\n}\r\n\r\n\r\n/**\r\n * @dev Simplified contract of a PotLike\r\n * For full implementation please see MakerDAO\u0027s repo at \u003Chttps://github.com/makerdao/dss\u003E\r\n */\r\ncontract PotLike {\r\n    function chi() external view returns (uint256);\r\n    function rho() external view returns (uint256);\r\n    function dsr() external view returns (uint256);\r\n    function drip() external returns (uint256);\r\n    function join(uint256) external;\r\n    function exit(uint256) external;\r\n}\r\n\r\n\r\n/**\r\n * @dev Simplified contract of a DaiJoin\r\n * For full implementation please see MakerDAO\u0027s repo at \u003Chttps://github.com/makerdao/dss\u003E\r\n */\r\ncontract JoinLike {\r\n    function join(address, uint256) external;\r\n    function exit(address, uint256) external;\r\n}\r\n\r\n\r\n/**\r\n * @dev Simplified contract of a ERC20 Token\r\n */\r\ncontract ERC20Like {\r\n    function transferFrom(address, address, uint256) external returns (bool);\r\n    function transfer(address, uint256) external returns (bool);\r\n    function approve(address, uint256) external returns (bool);\r\n    function allowance(address, address) external view returns (uint256);\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\r\n * the optional functions; to access them see {ERC20Detailed}.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by \u0060account\u0060.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves \u0060amount\u0060 tokens from the caller\u0027s account to \u0060recipient\u0060.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that \u0060spender\u0060 will be\r\n     * allowed to spend on behalf of \u0060owner\u0060 through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets \u0060amount\u0060 as the allowance of \u0060spender\u0060 over the caller\u0027s tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves \u0060amount\u0060 tokens from \u0060sender\u0060 to \u0060recipient\u0060 using the\r\n     * allowance mechanism. \u0060amount\u0060 is then deducted from the caller\u0027s\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when \u0060value\u0060 tokens are moved from one account (\u0060from\u0060) to\r\n     * another (\u0060to\u0060).\r\n     *\r\n     * Note that \u0060value\u0060 may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a \u0060spender\u0060 for an \u0060owner\u0060 is set by\r\n     * a call to {approve}. \u0060value\u0060 is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nlibrary RayMath {\r\n    uint256 internal constant ONE_RAY = 10**27;\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a \u002B b;\r\n        require(c \u003E= a, \u0022Bdai: overflow\u0022);\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errMsg)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        require(b \u003C= a, errMsg);\r\n\r\n        return a - b;\r\n    }\r\n\r\n    function subOrZero(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (b \u003E a) {\r\n            return uint256(0);\r\n        } else {\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        c = a * b;\r\n        require(c / a == b, \u0022bDai: multiplication overflow\u0022);\r\n\r\n        return c;\r\n    }\r\n\r\n    function rmul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mul(a, b) / ONE_RAY;\r\n    }\r\n\r\n    /**\r\n     * @dev Warning : result is rounded toward zero\r\n     */\r\n    function rdiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b \u003E 0, \u0022bDai: division by 0\u0022);\r\n\r\n        return mul(a, ONE_RAY) / b;\r\n    }\r\n\r\n    /**\r\n     * @dev do division with rouding up\r\n     */\r\n    function rdivup(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return add(mul(a, ONE_RAY), sub(b, 1, \u0022bDai: division by 0\u0022)) / b;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Implementation of the bDAI ERC20 token\r\n *\r\n * This contracts aims to take \u0060amount\u0060 DAI, subscribes it to the DSR program and\r\n * gives back \u0060amount\u0060 of bDAI. User can then earn interests on these bDAI in BTU\r\n *\r\n * To have bDAI user needs to call join or joinFor\r\n * claim and claimFor are used to be get back interests in BTU\r\n * exit and exitFor are aimed to claim back the user\u0027s DAI\r\n */\r\ncontract Bdai is IERC20 {\r\n    using RayMath for uint256;\r\n\r\n    bool public live;\r\n    uint8 public constant decimals = 18;\r\n    uint256 public totalSupply;\r\n\r\n    string public constant name = \u0022BTU Incentivized DAI\u0022;\r\n    string public constant symbol = \u0022bDAI\u0022;\r\n    string public constant version = \u00221\u0022;\r\n\r\n    mapping(address =\u003E uint256) private _balances;\r\n    mapping(address =\u003E uint256) private _pies;\r\n    mapping(address =\u003E uint256) private _nonces;\r\n\r\n    mapping(address =\u003E mapping(address =\u003E uint256)) private _allowances;\r\n\r\n    ERC20Like public dai;\r\n    JoinLike public daiJoin;\r\n    PotLike public pot;\r\n    VatLike public vat;\r\n    SwapperLike public swapper;\r\n\r\n    address public owner;\r\n\r\n    bytes32 public DOMAIN_SEPARATOR; //EIP712 domain\r\n\r\n    //keccak256 \u0022Permit(address holder,address spender,uint256 nonce,uint256 expiry,bool allowed)\u0022\r\n    bytes32 public constant PERMIT_TYPEHASH = 0xea2aa0a1be11a07ed86d755c93467f4f82362b452371d1ba94d1715123511acb;\r\n\r\n    //keccak256 \u0022ClaimFor(address holder,address spender,uint256 nonce,uint256 expiry,address dest)\u0022\r\n    bytes32 public constant CLAIM_TYPEHASH = 0xcbd06f2e482e52538ba0a2e3b1ec074c1ff826895448b9cf7b33c0abbbe904b3;\r\n\r\n    //keccak256 \u0022ExitFor(address holder,address spender,uint256 nonce,uint256 expiry,uint256 amount)\u0022\r\n    bytes32 public constant EXIT_TYPEHASH = 0x703d2576480f8b8746c2232693aae93ab2bda9c8b68427bce6eff0c6238807ed;\r\n\r\n    /**\r\n     * @dev Sets the external MakerDAO\u0027s contract address. All of these values are immutable.\r\n     *      Authorises these contracts to play with DAI owned by \u0060this\u0060\r\n     */\r\n    constructor(\r\n        address dai_,\r\n        address daiJoin_,\r\n        address pot_,\r\n        address vat_,\r\n        address swapper_,\r\n        uint256 chainId_\r\n    ) public {\r\n        owner = msg.sender;\r\n        live = true;\r\n\r\n        dai = ERC20Like(dai_);\r\n        daiJoin = JoinLike(daiJoin_);\r\n        pot = PotLike(pot_);\r\n        vat = VatLike(vat_);\r\n        swapper = SwapperLike(swapper_);\r\n\r\n        vat.hope(daiJoin_);\r\n        vat.hope(pot_);\r\n\r\n        dai.approve(daiJoin_, uint256(-1));\r\n        dai.approve(swapper_, uint256(-1));\r\n\r\n        DOMAIN_SEPARATOR = keccak256(\r\n            abi.encode(\r\n                keccak256(\r\n                    \u0022EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\u0022\r\n                ),\r\n                keccak256(bytes(name)),\r\n                keccak256(bytes(version)),\r\n                chainId_,\r\n                address(this)\r\n            )\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the amount of bDAI owned by \u0060account\u0060.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers \u0060amount\u0060 of bDAI from \u0060sender\u0060 to \u0060recipient\u0060\r\n     *      Before the transfer, \u0060sender\u0060 earns interrests on its bDAI\r\n     *\r\n     * Requirements :\r\n     * - \u0060recipient\u0060 cannot be the zero address.\r\n     * - the caller must have a balance of at least \u0060amount\u0060.\r\n     *\r\n     * Emits {Transfer} event\r\n     */\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool)\r\n    {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the pie owned by \u0060account\u0060 on the DSR contract (e.g. pot.sol from MakerDAO).\r\n     */\r\n    function pieOf(address account) external view returns (uint256) {\r\n        return _pies[account];\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the last recorded \u0060chi\u0060 from the dsr contract\r\n     */\r\n    function chi() external view returns (uint256) {\r\n        return pot.chi();\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the last recorded \u0060rho\u0060 from the dsr contract\r\n     */\r\n    function rho() external view returns (uint256) {\r\n        return pot.rho();\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the last recorded \u0060dsr\u0060 from the dsr contract\r\n     */\r\n    function dsr() external view returns (uint256) {\r\n        return pot.dsr();\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the amount of bDAI which \u0060spender\u0060 can take from \u0060tokenOwner\u0060 account\r\n     */\r\n    function allowance(address tokenOwner, address spender)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return _allowances[tokenOwner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev Sets an allowance of \u0060amount\u0060 for \u0060spender\u0060 over the caller\u0027s bDAI\r\n     *\r\n     * Emits {Approval} event\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool) {\r\n        require(spender != address(0), \u0022Bdai: approve to 0x0\u0022);\r\n\r\n        _allowances[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers \u0060amount\u0060 of bDAI from \u0060sender\u0060 to \u0060recipient\u0060\r\n     *      Before the transfer, \u0060sender\u0060 earns interrests on its bDAI\r\n     *      Updates allowance if not set to MAX_UINT256\r\n     *\r\n     * Requirements :\r\n     * - \u0060sender\u0060cannot be the zero address.\r\n     * - \u0060recipient\u0060 cannot be the zero address.\r\n     * - the caller must have an allowance of at least \u0060amount\u0060.\r\n     * - \u0060sender\u0060 must have at least \u0060amount\u0060 of token\r\n     *\r\n     * Emits {Transfer} event\r\n     * Emits an {Approval} event indicating the updated allowance\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount)\r\n        external\r\n        returns (bool)\r\n    {\r\n        _allow(sender, msg.sender, amount);\r\n        _transfer(sender, recipient, amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Takes \u0060amount\u0060 of DAI (in wad) from the caller and subscribes it to the dsr\r\n     *      Mints \u0060amount\u0060 of bDAI for the caller\r\n     *\r\n     * Requirements :\r\n     * - the caller must have at least \u0060amount\u0060 of DAI.\r\n     *\r\n     * Emits {Transfer} event\r\n     */\r\n    function join(uint256 amount) external {\r\n        _join(msg.sender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Takes \u0060amount\u0060 of DAI (in wad) from the caller and subscribes it to the dsr\r\n     *      Mints \u0060amount\u0060 of bDAI for \u0060dest\u0060 (e.g. DAI are taken from caller and bDAI are sent to \u0060dest\u0060)\r\n     *\r\n     * Requirements :\r\n     * - the caller must have at least \u0060amount\u0060 of DAI.\r\n     * - \u0060dest\u0060 cannot be zero address\r\n     *\r\n     * Emits {Transfer} event\r\n     */\r\n    function joinFor(address dest, uint256 amount) external {\r\n        require(dest != address(0), \u0022bDai: dest cannot be 0x0\u0022);\r\n        _join(dest, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Recalculates caller\u0027s \u0060pie\u0060 to fit with its bDAI\r\n     *      Converts interrests to BTU and sends it to caller\u0027s address\r\n     */\r\n    function claim() external {\r\n        _claim(msg.sender, msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Recalculates caller\u0027s \u0060pie\u0060 to fit with its bDAI\r\n     *      Converts interrests to BTU and sends it to \u0060dest\u0060 address\r\n     *\r\n     * Requirements :\r\n     * - \u0060dest\u0060 cannot be the zero address\r\n     */\r\n    function claim(address dest) external {\r\n        require(dest != address(0), \u0022bDai: dest cannot be 0x0\u0022);\r\n        _claim(msg.sender, dest);\r\n    }\r\n\r\n    /**\r\n     * @dev Takes \u0060amount\u0060 of bDAI and returns \u0060amount\u0060 of DAI\r\n     *      Claims interest\r\n     *      Burns \u0060amount\u0060 of bDAI\r\n     *\r\n     * Requirements :\r\n     * - the caller must have at least \u0060amount\u0060 of bDAI.\r\n     *\r\n     * Emits {Transfer} event\r\n     */\r\n    function exit(uint256 amount) external {\r\n        _exit(msg.sender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers \u0060amounts\u0060 of bDAI from caller to \u0060recipients\u0060\r\n     * Before the transfer, caller earns interrests on its bDAI\r\n     *\r\n     * Requirements :\r\n     * - \u0060recipients\u0060 cannot contain the zero address.\r\n     * - the caller must have a balance of at least \u0060total(amounts)\u0060.\r\n     *\r\n     * Emits {Transfer} event\r\n     */\r\n    function transfer(address[] memory recipients, uint256[] memory amounts)\r\n        public\r\n        returns (bool)\r\n    {\r\n        _transfer(msg.sender, recipients, amounts);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers \u0060amounts\u0060 of bDAI from caller to \u0060recipients\u0060\r\n     * Before the transfer, caller earns interrests on its bDAI\r\n     *\r\n     * Requirements :\r\n     * - \u0060sender\u0060cannot be the zero address.\r\n     * - \u0060recipients\u0060 cannot contain the zero address.\r\n     * - the caller must have an allowance of at least \u0060total(amounts)\u0060.\r\n     * - \u0060sender\u0060 must have a balance of at least \u0060total(amounts)\u0060.\r\n     *\r\n     * Emits {Transfer} event\r\n     * Emits an {Approval} event indicating the updated allowance\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address[] memory recipients,\r\n        uint256[] memory amounts\r\n    ) public returns (bool) {\r\n        uint256 total;\r\n\r\n        for (uint256 i; i \u003C recipients.length; \u002B\u002Bi) {\r\n            total = total.add(amounts[i]);\r\n        }\r\n\r\n        _allow(sender, msg.sender, total);\r\n        _transfer(sender, recipients, amounts);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the noce ofe \u0060account\u0060\r\n     */\r\n    function nonces(address account) external view returns (uint256) {\r\n        return _nonces[account];\r\n    }\r\n\r\n    /**\r\n     * @dev Sets an allowance of \u0060MAX_UINT256\u0060 for \u0060spender\u0060 over the holder\u0027s bDAI if \u0060allowaed\u0060 set to \u0060true\u0060\r\n     *\r\n     * Requiremets:\r\n     * - \u0060holder\u0060 cannot be the zero address\r\n     * - \u0060spender\u0060 cannot be the zero address\r\n     * - \u0060nonce\u0060 must be actual nonce of \u0060holder\u0060 \u002B 1\r\n     * - \u0060expiry\u0060 must be zero (for infinite validity) or lower than \u0060now\u0060 if not null\r\n     * - \u0060v\u0060, \u0060r\u0060, \u0060s\u0060 must contain the permit message signed by \u0060holder\u0060\r\n     *\r\n     * Emits {Approval} event\r\n     */\r\n    function permit(\r\n        address holder,\r\n        address spender,\r\n        uint256 nonce,\r\n        uint256 expiry,\r\n        bool allowed,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external {\r\n        require(holder != address(0), \u0022bDai: approve from 0x0\u0022);\r\n        require(spender != address(0), \u0022bDai: approve to 0x0\u0022);\r\n        require(expiry == 0 || now \u003C= expiry, \u0022bDai: permit-expired\u0022);\r\n        require(nonce == _nonces[holder]\u002B\u002B, \u0022bDai: invalid-nonce\u0022);\r\n\r\n        bytes32 digest = keccak256(\r\n            abi.encodePacked(\r\n                \u0022\\x19\\x01\u0022,\r\n                DOMAIN_SEPARATOR,\r\n                keccak256(\r\n                    abi.encode(\r\n                        PERMIT_TYPEHASH,\r\n                        holder,\r\n                        spender,\r\n                        nonce,\r\n                        expiry,\r\n                        allowed\r\n                    )\r\n                )\r\n            )\r\n        );\r\n\r\n        require(holder == ecrecover(digest, v, r, s), \u0022bDai: invalid-permit\u0022);\r\n        uint256 amount = allowed ? uint256(-1) : 0;\r\n        _allowances[holder][spender] = amount;\r\n        emit Approval(holder, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Recalculates \u0060account\u0060\u0027s \u0060pie\u0060 to fit with its bDAI\r\n     *      Converts interrests to BTU and sends it to \u0060dest\u0060 address\r\n     *\r\n     * Requirements :\r\n     * - the caller must have an allowance \u003E= of the \u0060account\u0060\u0027s balance\r\n     * - \u0060dest\u0060 cannot be the zero address\r\n     */\r\n    function claimFor(\r\n        address holder,\r\n        uint256 nonce,\r\n        uint256 expiry,\r\n        address dest,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external {\r\n        require(dest != address(0), \u0022bDai: dest cannot be 0x0\u0022);\r\n        require(holder != address(0), \u0022bDai: claim from 0x0\u0022);\r\n        require(expiry == 0 || now \u003C= expiry, \u0022bDai: permit-expired\u0022);\r\n        require(nonce == _nonces[holder]\u002B\u002B, \u0022bDai: invalid-nonce\u0022);\r\n\r\n        bytes32 digest = keccak256(\r\n            abi.encodePacked(\r\n                \u0022\\x19\\x01\u0022,\r\n                DOMAIN_SEPARATOR,\r\n                keccak256(\r\n                    abi.encode(\r\n                        CLAIM_TYPEHASH,\r\n                        holder,\r\n                        msg.sender,\r\n                        nonce,\r\n                        expiry,\r\n                        dest\r\n                    )\r\n                )\r\n            )\r\n        );\r\n\r\n        require(holder == ecrecover(digest, v, r, s), \u0022bDai: invalid-permit\u0022);\r\n        _claim(holder, dest);\r\n    }\r\n\r\n    /**\r\n     * @dev Takes \u0060amount\u0060 of bDAI and returns \u0060amount\u0060 of DAI in the name of \u0060account\u0060\r\n     * Claims interest\r\n     * Burns \u0060amount\u0060 of bDAI\r\n     *\r\n     * Requirements :\r\n     * - \u0060holder\u0060 must have at least \u0060amount\u0060 of bDAI.\r\n     * - \u0060holder\u0060 cannot be the zero address\r\n     * - \u0060nonce\u0060 must be actual nonce of \u0060holder\u0060 \u002B 1\r\n     * - \u0060expiry\u0060 must be zero (for infinite validity) or lower than \u0060now\u0060 if not null\r\n     * - \u0060v\u0060, \u0060r\u0060, \u0060s\u0060 must contain the permit message signed by \u0060holder\u0060\r\n     *\r\n     * Emits {Transfer} event\r\n     */\r\n    function exitFor(\r\n        address holder,\r\n        uint256 nonce,\r\n        uint256 expiry,\r\n        uint256 amount,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external {\r\n        require(holder != address(0), \u0022bDai: exit from 0x0\u0022);\r\n        require(expiry == 0 || now \u003C= expiry, \u0022bDai: permit-expired\u0022);\r\n        require(nonce == _nonces[holder]\u002B\u002B, \u0022bDai: invalid-nonce\u0022);\r\n\r\n        bytes32 digest = keccak256(\r\n            abi.encodePacked(\r\n                \u0022\\x19\\x01\u0022,\r\n                DOMAIN_SEPARATOR,\r\n                keccak256(\r\n                    abi.encode(\r\n                        EXIT_TYPEHASH,\r\n                        holder,\r\n                        msg.sender,\r\n                        nonce,\r\n                        expiry,\r\n                        amount\r\n                    )\r\n                )\r\n            )\r\n        );\r\n\r\n        require(holder == ecrecover(digest, v, r, s), \u0022bDai: invalid-permit\u0022);\r\n        _exit(holder, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev only callers with address equals to \u0060owner\u0060 can call functions with this modifier\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \u0022bDai: op not allowed\u0022);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Changes the contract owner from \u0060owner\u0060 to \u0060owner_\u0060\r\n     *\r\n     * Requirements :\r\n     * - the caller must be the actual contract \u0060owner\u0060\r\n     * - \u0060owner_\u0060 cannot be the zero address\r\n     *\r\n     */\r\n    function setOwner(address owner_) external onlyOwner {\r\n        require(owner_ != address(0), \u0022bDai: owner cannot be 0x0\u0022);\r\n        owner = owner_;\r\n    }\r\n\r\n    /**\r\n     * @dev Changes the \u0060live\u0060 params, if set to \u0060false\u0060 join functionnality is blocked\r\n     *\r\n     * Requirements :\r\n     * - the caller must be the actual contract \u0060owner\u0060\r\n     *\r\n     */\r\n    function freeze(bool freeze_) external onlyOwner {\r\n        live = !freeze_;\r\n    }\r\n\r\n    /**\r\n     * @dev Changes the \u0060swapper\u0060 contract\r\n     *\r\n     * Requirements :\r\n     * - the caller must be the actual contract \u0060owner\u0060\r\n     * - \u0060swapper_\u0060 cannot be the zero address\r\n     *\r\n     */\r\n    function setSwapper(address swapper_) external onlyOwner {\r\n        require(swapper_ != address(0), \u0022bDai: cannot set to 0x0\u0022);\r\n        address oldSwapper = address(swapper);\r\n        swapper = SwapperLike(swapper_);\r\n\r\n        dai.approve(oldSwapper, uint256(0));\r\n        dai.approve(swapper_, uint256(-1));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the actual \u0060chi\u0060 from the DSR (e.g. call \u0060pot.drip()\u0060 if needed)\r\n     */\r\n    function _chi() internal returns (uint256) {\r\n        return now \u003E pot.rho() ? pot.drip() : pot.chi();\r\n    }\r\n\r\n    /**\r\n     * @dev Updates the allowance of \u0060caller\u0060 over \u0060sender\u0060 for a specified \u0060amount\u0060\r\n     * Emits an {Approval} event indicating the updated allowance\r\n     */\r\n    function _allow(address sender, address caller, uint256 amount) internal {\r\n        uint256 a = _allowances[sender][caller];\r\n        require(a \u003E 0, \u0022bDAI: bad allowance\u0022);\r\n        if (a != uint256(-1)) {\r\n            _allowances[sender][caller] = a.sub(amount, \u0022bDAI: bad allowance\u0022);\r\n            emit Approval(sender, caller, _allowances[sender][caller]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers \u0060amount\u0060 of bDAI from \u0060sender\u0060 to \u0060recipient\u0060\r\n     * Before the transfer, \u0060sender\u0060 earns interrests on its bDAI\r\n     *\r\n     * Requirements :\r\n     * - \u0060sender\u0060cannot be the zero address.\r\n     * - \u0060recipient\u0060 cannot be the zero address.\r\n     * - the caller must have a balance of at least \u0060amount\u0060.\r\n     *\r\n     * Emits {Transfer} event\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount)\r\n        internal\r\n    {\r\n        require(sender != address(0), \u0022Bdai: transfer from 0x0\u0022);\r\n        require(recipient != address(0), \u0022Bdai: transfer to 0x0\u0022);\r\n\r\n        uint256 c = _chi();\r\n        uint256 senderBalance = _balances[sender];\r\n        uint256 oldSenderPie = _pies[sender];\r\n        uint256 tmp = senderBalance.rdivup(c); //Pie reseted\r\n        uint256 pieToClaim = oldSenderPie.subOrZero(tmp);\r\n        uint256 pieToBeTransfered = amount.rdivup(c);\r\n\r\n        _balances[sender] = senderBalance.sub(\r\n            amount,\r\n            \u0022bDai: not enougth funds\u0022\r\n        );\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n\r\n        tmp = pieToClaim.add(pieToBeTransfered);\r\n        if (tmp \u003E oldSenderPie) {\r\n            _pies[sender] = 0;\r\n            _pies[recipient] = _pies[recipient].add(oldSenderPie);\r\n        } else {\r\n            _pies[sender] = oldSenderPie - tmp;\r\n            _pies[recipient] = _pies[recipient].add(pieToBeTransfered);\r\n        }\r\n\r\n        if (pieToClaim \u003E 0) {\r\n            uint256 claimedToken = pieToClaim.rmul(c);\r\n\r\n            pot.exit(pieToClaim);\r\n            daiJoin.exit(address(this), claimedToken);\r\n            swapper.fromDaiToBTU(sender, claimedToken);\r\n        }\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers \u0060amounts\u0060 of bDAI from caller to \u0060recipients\u0060\r\n     * Before the transfer, caller earns interrests on its bDAI\r\n     *\r\n     * Requirements :\r\n     * - \u0060sender\u0060cannot be the zero address.\r\n     * - \u0060recipients\u0060 cannot contain the zero address.\r\n     * - the caller must have an allowance of at least \u0060total(amounts)\u0060.\r\n     * - \u0060sender\u0060 must have a balance of at least \u0060total(amounts)\u0060.\r\n     *\r\n     * Emits {Transfer} event\r\n     */\r\n    function _transfer(\r\n        address sender,\r\n        address[] memory recipients,\r\n        uint256[] memory amounts\r\n    ) internal {\r\n        require(sender != address(0), \u0022Bdai: transfer from 0x0\u0022);\r\n\r\n        uint256 c = _chi();\r\n        uint256 senderBalance = _balances[sender];\r\n        uint256 oldSenderPie = _pies[sender];\r\n        uint256 tmp = senderBalance.rdivup(c); //Pie reseted\r\n        uint256 pieToClaim = oldSenderPie.subOrZero(tmp);\r\n        uint256 pieToBeTransfered;\r\n\r\n        uint256 total;\r\n        uint256 totalPie = oldSenderPie;\r\n        for (uint256 i; i \u003C recipients.length; \u002B\u002Bi) {\r\n            require(recipients[i] != address(0), \u0022Bdai: transfer to 0x0\u0022);\r\n            total = total.add(amounts[i]);\r\n\r\n            pieToBeTransfered = amounts[i].rdivup(c);\r\n            _balances[recipients[i]] = _balances[recipients[i]].add(amounts[i]);\r\n\r\n            tmp = pieToClaim.add(pieToBeTransfered);\r\n            if (tmp \u003E oldSenderPie) {\r\n                totalPie = 0;\r\n                _pies[recipients[i]] = _pies[recipients[i]].add(oldSenderPie);\r\n            } else {\r\n                totalPie = oldSenderPie - tmp;\r\n                _pies[recipients[i]] = _pies[recipients[i]].add(\r\n                    pieToBeTransfered\r\n                );\r\n            }\r\n\r\n            emit Transfer(sender, recipients[i], amounts[i]);\r\n        }\r\n\r\n        _balances[sender] = senderBalance.sub(total, \u0022bDai: not enougth funds\u0022);\r\n        _pies[sender] = totalPie;\r\n\r\n        if (pieToClaim \u003E 0) {\r\n            uint256 claimedToken = pieToClaim.rmul(c);\r\n\r\n            pot.exit(pieToClaim);\r\n            daiJoin.exit(address(this), claimedToken);\r\n            swapper.fromDaiToBTU(sender, claimedToken);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Takes \u0060amount\u0060 of DAI (in wad) from the caller and subscribes it to the dsr\r\n     * Mints \u0060amount\u0060 of bDAI for \u0060dest\u0060 (e.g. DAI are taken from caller and bDAI are sent to \u0060dest\u0060)\r\n     *\r\n     * Requirements :\r\n     * - the caller must have at least \u0060amount\u0060 of DAI.\r\n     *\r\n     * Emits {Transfer} event\r\n     */\r\n    function _join(address dest, uint256 amount) internal {\r\n        require(live, \u0022bDai: system is frozen\u0022);\r\n\r\n        uint256 c = _chi();\r\n        uint256 pie = amount.rdiv(c);\r\n\r\n        totalSupply = totalSupply.add(amount);\r\n        _balances[dest] = _balances[dest].add(amount);\r\n        _pies[dest] = _pies[dest].add(pie);\r\n\r\n        dai.transferFrom(msg.sender, address(this), amount);\r\n        daiJoin.join(address(this), amount);\r\n        pot.join(pie);\r\n\r\n        emit Transfer(address(0), dest, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Recalculates \u0060account\u0060\u0027s \u0060pie\u0060 to fit with its bDAI\r\n     *      Sends BTU to \u0060dest\u0060 address\r\n     * Converts interrests to BTU and sends it to caller\u0027s address\r\n     */\r\n    function _claim(address account, address dest) internal {\r\n        uint256 c = _chi();\r\n        uint256 newPie = _balances[account].rdivup(c);\r\n        uint256 pieDiff = _pies[account].subOrZero(newPie);\r\n\r\n        if (pieDiff \u003E 0) {\r\n            uint256 exitedTokens = pieDiff.rmul(c);\r\n            _pies[account] = newPie;\r\n\r\n            pot.exit(pieDiff);\r\n            daiJoin.exit(address(this), exitedTokens);\r\n            swapper.fromDaiToBTU(dest, exitedTokens);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Takes \u0060amount\u0060 of bDAI and returns \u0060amount\u0060 of DAI in the name of \u0060account\u0060\r\n     * Claims interest\r\n     * Burns \u0060amount\u0060 of bDAI\r\n     *\r\n     * Requirements :\r\n     * - \u0060amount\u0060 cannot be zero\r\n     * - \u0060account\u0060 must have at least \u0060amount\u0060 of bDAI.\r\n     * - the caller must have an allowance of at least \u0060amount\u0060 over the \u0060account\u0060 address\r\n     *\r\n     * Emits {Transfer} event\r\n     */\r\n    function _exit(address account, uint256 amount) internal {\r\n        require(amount \u003E 0, \u0022bDai : zero amount\u0022);\r\n\r\n        uint256 c = _chi();\r\n        uint256 bal2 = _balances[account].sub(\r\n            amount,\r\n            \u0022bDai: not enougth funds\u0022\r\n        );\r\n        uint256 pie2 = bal2.rdiv(c);\r\n        uint256 pieDiff = _pies[account].sub(pie2, \u0022bDai: not enougth funds\u0022);\r\n        uint256 totalDai = pieDiff.rmul(c);\r\n        uint256 interestToken = totalDai.subOrZero(amount);\r\n\r\n        _balances[account] = bal2;\r\n        totalSupply = totalSupply.sub(amount, \u0022bDai: totalSupply underflow\u0022);\r\n        _pies[account] = pie2;\r\n\r\n        pot.exit(pieDiff);\r\n        daiJoin.exit(address(this), totalDai);\r\n        dai.transfer(account, amount);\r\n\r\n        if (interestToken \u003E 0) {\r\n            swapper.fromDaiToBTU(account, interestToken);\r\n        }\r\n\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n}","ABI":"[{\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022dai_\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022daiJoin_\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022pot_\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022vat_\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022swapper_\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022chainId_\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022constructor\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022owner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022spender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022Approval\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022from\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022Transfer\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022CLAIM_TYPEHASH\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022DOMAIN_SEPARATOR\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022EXIT_TYPEHASH\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022PERMIT_TYPEHASH\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022tokenOwner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022spender\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022allowance\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022spender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022approve\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022balanceOf\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022chi\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022dest\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022claim\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022claim\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022holder\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022nonce\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022expiry\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022dest\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint8\u0022,\u0022name\u0022:\u0022v\u0022,\u0022type\u0022:\u0022uint8\u0022},{\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022r\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022s\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022claimFor\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022dai\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022contract ERC20Like\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022daiJoin\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022contract JoinLike\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022decimals\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint8\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint8\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022dsr\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022exit\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022holder\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022nonce\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022expiry\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint8\u0022,\u0022name\u0022:\u0022v\u0022,\u0022type\u0022:\u0022uint8\u0022},{\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022r\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022s\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022exitFor\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022freeze_\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022name\u0022:\u0022freeze\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022join\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022dest\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022joinFor\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022live\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022name\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022string\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022nonces\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022owner\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022holder\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022spender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022nonce\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022expiry\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022allowed\u0022,\u0022type\u0022:\u0022bool\u0022},{\u0022internalType\u0022:\u0022uint8\u0022,\u0022name\u0022:\u0022v\u0022,\u0022type\u0022:\u0022uint8\u0022},{\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022r\u0022,\u0022type\u0022:\u0022bytes32\u0022},{\u0022internalType\u0022:\u0022bytes32\u0022,\u0022name\u0022:\u0022s\u0022,\u0022type\u0022:\u0022bytes32\u0022}],\u0022name\u0022:\u0022permit\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022pieOf\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022pot\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022contract PotLike\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022rho\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022owner_\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022setOwner\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022swapper_\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022setSwapper\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022swapper\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022contract SwapperLike\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022symbol\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022string\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022totalSupply\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022recipient\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022transfer\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address[]\u0022,\u0022name\u0022:\u0022recipients\u0022,\u0022type\u0022:\u0022address[]\u0022},{\u0022internalType\u0022:\u0022uint256[]\u0022,\u0022name\u0022:\u0022amounts\u0022,\u0022type\u0022:\u0022uint256[]\u0022}],\u0022name\u0022:\u0022transfer\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022sender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022recipient\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022transferFrom\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022sender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022address[]\u0022,\u0022name\u0022:\u0022recipients\u0022,\u0022type\u0022:\u0022address[]\u0022},{\u0022internalType\u0022:\u0022uint256[]\u0022,\u0022name\u0022:\u0022amounts\u0022,\u0022type\u0022:\u0022uint256[]\u0022}],\u0022name\u0022:\u0022transferFrom\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022vat\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022contract VatLike\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022version\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022string\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022}]","ContractName":"Bdai","CompilerVersion":"v0.5.12\u002Bcommit.7709ece9","OptimizationUsed":"1","Runs":"2048","ConstructorArguments":"0000000000000000000000006b175474e89094c44da98b954eedeac495271d0f0000000000000000000000009759a6ac90977b93b58547b4a71c78317f391a28000000000000000000000000197e90f9fad81970ba7976f33cbd77088e5d7cf700000000000000000000000035d1b3f3d7966a1dfe207aa4514c12a259a0492b00000000000000000000000013a36fef375cb8f3fdb776fea090e3016a7c3c600000000000000000000000000000000000000000000000000000000000000001","Library":"","SwarmSource":"bzzr://0393be7c3b5ab2037e88e0dee20d88ed4adba8e53af7d1f6a002507d5e6f2038"}]