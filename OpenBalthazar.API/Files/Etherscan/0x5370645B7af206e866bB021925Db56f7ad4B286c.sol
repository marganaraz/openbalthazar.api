[{"SourceCode":"pragma solidity ^0.5.0;\r\n\r\ncontract UtilMutualAlliance{\r\n    uint ethWei = 1 ether;\r\n\r\n    function getLevel(uint value) internal view returns (uint) {\r\n        if (value \u003E= 1 * ethWei \u0026\u0026 value \u003C= 5 * ethWei) {\r\n            return 1;\r\n        }\r\n        if (value \u003E= 6 * ethWei \u0026\u0026 value \u003C= 14 * ethWei) {\r\n            return 2;\r\n        }\r\n        if (value \u003E= 15 * ethWei \u0026\u0026 value \u003C= 20 * ethWei) {\r\n            return 3;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function getLineLevel(uint value) internal view returns (uint) {\r\n        if (value \u003E= 1 * ethWei \u0026\u0026 value \u003C= 5 * ethWei) {\r\n            return 1;\r\n        }\r\n        if (value \u003E= 6 * ethWei \u0026\u0026 value \u003C= 14 * ethWei) {\r\n            return 2;\r\n        }\r\n        if (value \u003E= 15 * ethWei) {\r\n            return 3;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function getSepScByLevel(uint level) internal pure returns(uint) {\r\n        if (level == 1) {\r\n            return 65;\r\n        }\r\n        if (level == 2) {\r\n            return 85;\r\n        }\r\n        if (level == 3) {\r\n            return 120;\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    function getScByLevel(uint level, uint reInvestCount) internal pure returns (uint) {\r\n        if (level == 1) {\r\n            if (reInvestCount == 0) {\r\n                return 20;\r\n            }\r\n            if (reInvestCount == 1) {\r\n                return 25;\r\n            }\r\n            if (reInvestCount == 2) {\r\n                return 30;\r\n            }\r\n            if (reInvestCount == 3) {\r\n                return 35;\r\n            }\r\n            if (reInvestCount \u003E= 4) {\r\n                return 50;\r\n            }\r\n        }\r\n        if (level == 2) {\r\n            if (reInvestCount == 0) {\r\n                return 30;\r\n            }\r\n            if (reInvestCount == 1) {\r\n                return 40;\r\n            }\r\n            if (reInvestCount == 2) {\r\n                return 50;\r\n            }\r\n            if (reInvestCount == 3) {\r\n                return 60;\r\n            }\r\n            if (reInvestCount \u003E= 4) {\r\n                return 70;\r\n            }\r\n        }\r\n        if (level == 3) {\r\n            if (reInvestCount == 0) {\r\n                return 60;\r\n            }\r\n            if (reInvestCount == 1) {\r\n                return 70;\r\n            }\r\n            if (reInvestCount == 2) {\r\n                return 80;\r\n            }\r\n            if (reInvestCount == 3) {\r\n                return 90;\r\n            }\r\n            if (reInvestCount \u003E= 4) {\r\n                return 100;\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function getFireScByLevel(uint level) internal pure returns (uint) {\r\n        if (level == 1) {\r\n            return 3;\r\n        }\r\n        if (level == 2) {\r\n            return 6;\r\n        }\r\n        if (level == 3) {\r\n            return 10;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function getDynamicFloor(uint level) internal pure returns (uint) {\r\n        if (level == 1) {\r\n            return 1;\r\n        }\r\n        if (level == 2) {\r\n            return 2;\r\n        }\r\n        if (level == 3) {\r\n            return 20;\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    function getFloorIndex(uint floor) internal pure returns (uint) {\r\n        if (floor == 1) {\r\n            return 1;\r\n        }\r\n        if (floor == 2) {\r\n            return 2;\r\n        }\r\n        if (floor == 3) {\r\n            return 3;\r\n        }\r\n        if (floor \u003E= 4 \u0026\u0026 floor \u003C= 5) {\r\n            return 4;\r\n        }\r\n        if (floor \u003E= 6 \u0026\u0026 floor \u003C= 10) {\r\n            return 5;\r\n        }\r\n        if (floor \u003E= 11) {\r\n            return 6;\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    function getRecommendScaleByLevelAndTim(uint level, uint floorIndex) internal pure returns (uint){\r\n        if (level == 1 \u0026\u0026 floorIndex == 1) {\r\n            return 20;\r\n        }\r\n        if (level == 2) {\r\n            if (floorIndex == 1) {\r\n                return 30;\r\n            }\r\n            if (floorIndex == 2) {\r\n                return 20;\r\n            }\r\n        }\r\n        if (level == 3) {\r\n            if (floorIndex == 1) {\r\n                return 50;\r\n            }\r\n            if (floorIndex == 2) {\r\n                return 30;\r\n            }\r\n            if (floorIndex == 3) {\r\n                return 20;\r\n            }\r\n            if (floorIndex == 4) {\r\n                return 10;\r\n            }\r\n            if (floorIndex == 5) {\r\n                return 5;\r\n            }\r\n            if (floorIndex \u003E= 6) {\r\n                return 2;\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function isEmpty(string memory str) internal pure returns (bool) {\r\n        if (bytes(str).length == 0) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n}\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\ncontract Context {\r\n    // Empty internal constructor, to prevent people from mistakenly deploying\r\n    // an instance of this contract, which should be used via inheritance.\r\n    constructor() internal {}\r\n    // solhint-disable-previous-line no-empty-blocks\r\n\r\n    function _msgSender() internal view returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this;\r\n        // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * \u0060onlyOwner\u0060, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor () internal {\r\n        _owner = _msgSender();\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \u0022Ownable: caller is not the owner\u0022);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return _msgSender() == _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * \u0060onlyOwner\u0060 functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (\u0060newOwner\u0060).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (\u0060newOwner\u0060).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \u0022Ownable: new owner is the zero address\u0022);\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Roles\r\n * @dev Library for managing addresses assigned to a Role.\r\n */\r\nlibrary Roles {\r\n    struct Role {\r\n        mapping(address =\u003E bool) bearer;\r\n    }\r\n\r\n    /**\r\n     * @dev Give an account access to this role.\r\n     */\r\n    function add(Role storage role, address account) internal {\r\n        require(!has(role, account), \u0022Roles: account already has role\u0022);\r\n        role.bearer[account] = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Remove an account\u0027s access to this role.\r\n     */\r\n    function remove(Role storage role, address account) internal {\r\n        require(has(role, account), \u0022Roles: account does not have role\u0022);\r\n        role.bearer[account] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Check if an account has this role.\r\n     * @return bool\r\n     */\r\n    function has(Role storage role, address account) internal view returns (bool) {\r\n        require(account != address(0), \u0022Roles: account is the zero address\u0022);\r\n        return role.bearer[account];\r\n    }\r\n}\r\n\r\n/**\r\n * @title WhitelistAdminRole\r\n * @dev WhitelistAdmins are responsible for assigning and removing Whitelisted accounts.\r\n */\r\ncontract WhitelistAdminRole is Context, Ownable {\r\n    using Roles for Roles.Role;\r\n\r\n    event WhitelistAdminAdded(address indexed account);\r\n    event WhitelistAdminRemoved(address indexed account);\r\n\r\n    Roles.Role private _whitelistAdmins;\r\n\r\n    constructor () internal {\r\n        _addWhitelistAdmin(_msgSender());\r\n    }\r\n\r\n    modifier onlyWhitelistAdmin() {\r\n        require(isWhitelistAdmin(_msgSender()) || isOwner(), \u0022WhitelistAdminRole: caller does not have the WhitelistAdmin role\u0022);\r\n        _;\r\n    }\r\n\r\n    function isWhitelistAdmin(address account) public view returns (bool) {\r\n        return _whitelistAdmins.has(account);\r\n    }\r\n\r\n    function addWhitelistAdmin(address account) public onlyWhitelistAdmin {\r\n        _addWhitelistAdmin(account);\r\n    }\r\n\r\n    function removeWhitelistAdmin(address account) public onlyOwner {\r\n        _whitelistAdmins.remove(account);\r\n        emit WhitelistAdminRemoved(account);\r\n    }\r\n\r\n    function renounceWhitelistAdmin() public {\r\n        _removeWhitelistAdmin(_msgSender());\r\n    }\r\n\r\n    function _addWhitelistAdmin(address account) internal {\r\n        _whitelistAdmins.add(account);\r\n        emit WhitelistAdminAdded(account);\r\n    }\r\n\r\n    function _removeWhitelistAdmin(address account) internal {\r\n        _whitelistAdmins.remove(account);\r\n        emit WhitelistAdminRemoved(account);\r\n    }\r\n}\r\n\r\ncontract MutualAlliance is UtilMutualAlliance, WhitelistAdminRole {\r\n\r\n    using SafeMath for *;\r\n\r\n    string constant private name = \u0022MutualAlliance Official\u0022;\r\n\r\n    uint ethWei = 1 ether;\r\n\r\n    address payable private devAddr = address(0x3fd4967d8C5079c2D37cbaac8014c1e9584Fe5Dd);\r\n\r\n    address payable private loyal = address(0x0EF71a4b3b37dbAb581bEc482bcd0eE7429917A3);\r\n\r\n    address payable private other = address(0x0040E7d9808e9D344158D7379E0b91b61B93CC9F);\r\n\r\n    struct User {\r\n        uint id;\r\n        address userAddress;\r\n        uint staticLevel;\r\n        uint dynamicLevel;\r\n        uint allInvest;\r\n        uint freezeAmount;\r\n        uint unlockAmount;\r\n        uint unlockAmountRedeemTime;\r\n        uint allStaticAmount;\r\n        uint hisStaticAmount;\r\n        uint dynamicWithdrawn;\r\n        uint staticWithdrawn;\r\n        Invest[] invests;\r\n        uint staticFlag;\r\n\r\n        mapping(uint =\u003E mapping(uint =\u003E uint)) dynamicProfits;\r\n        uint reInvestCount;\r\n        uint inviteAmount;\r\n        uint solitaire;\r\n        uint hisSolitaire;\r\n    }\r\n\r\n    struct UserGlobal {\r\n        uint id;\r\n        address userAddress;\r\n        string inviteCode;\r\n        string referrer;\r\n    }\r\n\r\n    struct Invest {\r\n        address userAddress;\r\n        uint investAmount;\r\n        uint investTime;\r\n        uint realityInvestTime;\r\n        uint times;\r\n        uint modeFlag;\r\n        bool isSuspendedInvest;\r\n    }\r\n\r\n    uint coefficient = 10;\r\n    uint startTime;\r\n    uint baseTime;\r\n    uint investCount = 0;\r\n    mapping(uint =\u003E uint) rInvestCount;\r\n    uint investMoney = 0;\r\n    mapping(uint =\u003E uint) rInvestMoney;\r\n    uint uid = 0;\r\n    uint rid = 1;\r\n    uint period = 3 days;\r\n    uint suspendedTime = 0;\r\n    uint suspendedDays = 0 days;\r\n    uint lastInvestTime = 0;\r\n    mapping(uint =\u003E mapping(address =\u003E User)) userRoundMapping;\r\n    mapping(address =\u003E UserGlobal) userMapping;\r\n    mapping(string =\u003E address) addressMapping;\r\n    mapping(uint =\u003E address) public indexMapping;\r\n    mapping(uint =\u003E uint) public everyDayInvestMapping;\r\n    mapping(uint =\u003E uint[]) investAmountList;\r\n    mapping(uint =\u003E uint) transformAmount;\r\n    uint baseLimit = 300 * ethWei;\r\n\r\n    /**\r\n     * @dev Just a simply check to prevent contract\r\n     * @dev this by calling method in constructor.\r\n     */\r\n    modifier isHuman() {\r\n        address addr = msg.sender;\r\n        uint codeLength;\r\n\r\n        assembly {codeLength := extcodesize(addr)}\r\n        require(codeLength == 0, \u0022sorry humans only\u0022);\r\n        require(tx.origin == msg.sender, \u0022sorry, human only\u0022);\r\n        _;\r\n    }\r\n\r\n    modifier isSuspended() {\r\n        require(notSuspended(), \u0022suspended\u0022);\r\n        _;\r\n    }\r\n\r\n    event LogInvestIn(address indexed who, uint indexed uid, uint amount, uint time, uint investTime, string inviteCode, string referrer, uint t);\r\n    event LogWithdrawProfit(address indexed who, uint indexed uid, uint amount, uint time, uint t);\r\n    event LogRedeem(address indexed who, uint indexed uid, uint amount, uint now);\r\n\r\n    constructor () public {\r\n    }\r\n\r\n    function() external payable {\r\n    }\r\n\r\n    function activeGame(uint time, uint _baseTime) external onlyWhitelistAdmin\r\n    {\r\n        require(time \u003E now, \u0022invalid game start time\u0022);\r\n        startTime = time;\r\n\r\n        if (baseTime == 0) {\r\n            baseTime = _baseTime;\r\n        }\r\n    }\r\n\r\n    function setCoefficient(uint coeff, uint _baseLimit) external onlyWhitelistAdmin\r\n    {\r\n        require(coeff \u003E 0, \u0022invalid coeff\u0022);\r\n        coefficient = coeff;\r\n        require(_baseLimit \u003E 0, \u0022invalue base limit\u0022);\r\n        baseLimit = _baseLimit;\r\n    }\r\n\r\n    function gameStart() public view returns (bool) {\r\n        return startTime != 0 \u0026\u0026 now \u003E startTime;\r\n    }\r\n\r\n    function investIn(string memory inviteCode, string memory referrer, uint flag)\r\n    public\r\n    isHuman()\r\n    payable\r\n    {\r\n        require(flag == 0 || flag == 1, \u0022invalid flag\u0022);\r\n        require(gameStart(), \u0022game not start\u0022);\r\n        require(msg.value \u003E= 1 * ethWei \u0026\u0026 msg.value \u003C= 20 * ethWei, \u0022between 1 and 20\u0022);\r\n        require(msg.value == msg.value.div(ethWei).mul(ethWei), \u0022invalid msg value\u0022);\r\n        uint investTime = getInvestTime(msg.value);\r\n        uint investDay = getCurrentInvestDay(investTime);\r\n        everyDayInvestMapping[investDay] = msg.value.add(everyDayInvestMapping[investDay]);\r\n        calUserQueueingStatic(msg.sender);\r\n\r\n        UserGlobal storage userGlobal = userMapping[msg.sender];\r\n        if (userGlobal.id == 0) {\r\n            require(!isEmpty(inviteCode), \u0022empty invite code\u0022);\r\n            address referrerAddr = getUserAddressByCode(referrer);\r\n            require(uint(referrerAddr) != 0, \u0022referer not exist\u0022);\r\n            require(referrerAddr != msg.sender, \u0022referrer can\u0027t be self\u0022);\r\n            require(!isUsed(inviteCode), \u0022invite code is used\u0022);\r\n\r\n            registerUser(msg.sender, inviteCode, referrer);\r\n        }\r\n\r\n        User storage user = userRoundMapping[rid][msg.sender];\r\n        if (uint(user.userAddress) != 0) {\r\n            require(user.freezeAmount == 0 \u0026\u0026 user.unlockAmount == 0, \u0022your invest not unlocked\u0022);\r\n            user.allInvest = user.allInvest.add(msg.value);\r\n            user.freezeAmount = msg.value;\r\n            user.staticLevel = getLevel(msg.value);\r\n            user.dynamicLevel = getLineLevel(msg.value);\r\n        } else {\r\n            user.id = userGlobal.id;\r\n            user.userAddress = msg.sender;\r\n            user.freezeAmount = msg.value;\r\n            user.staticLevel = getLevel(msg.value);\r\n            user.dynamicLevel = getLineLevel(msg.value);\r\n            user.allInvest = msg.value;\r\n            if (!isEmpty(userGlobal.referrer)) {\r\n                address referrerAddr = getUserAddressByCode(userGlobal.referrer);\r\n                if (referrerAddr != address(0)) {\r\n                    userRoundMapping[rid][referrerAddr].inviteAmount\u002B\u002B;\r\n                }\r\n            }\r\n        }\r\n        Invest memory invest = Invest(msg.sender, msg.value, investTime, now, 0, flag, !notSuspended(investTime));\r\n        user.invests.push(invest);\r\n        lastInvestTime = investTime;\r\n\r\n        investCount = investCount.add(1);\r\n        investMoney = investMoney.add(msg.value);\r\n        rInvestCount[rid] = rInvestCount[rid].add(1);\r\n        rInvestMoney[rid] = rInvestMoney[rid].add(msg.value);\r\n        \r\n        if (user.staticLevel \u003E= 3) {\r\n            storeSolitaire(msg.sender);\r\n        }\r\n        investAmountList[rid].push(msg.value);\r\n\r\n        storeDynamicPreProfits(msg.sender, getDayForProfits(investTime), flag);\r\n\r\n        sendFeetoAdmin(msg.value);\r\n        trySendTransform(msg.value);\r\n\r\n        emit LogInvestIn(msg.sender, userGlobal.id, msg.value, now, investTime, userGlobal.inviteCode, userGlobal.referrer, 0);\r\n    }\r\n\r\n    function reInvestIn() external payable {\r\n        require(gameStart(), \u0022game not start\u0022);\r\n        User storage user = userRoundMapping[rid][msg.sender];\r\n        require(user.id \u003E 0, \u0022user haven\u0027t invest in round before\u0022);\r\n        calStaticProfitInner(msg.sender);\r\n        require(user.freezeAmount == 0, \u0022user have had invest in round\u0022);\r\n        require(user.unlockAmount \u003E 0, \u0022user must have unlockAmount\u0022);\r\n        require(user.unlockAmount.add(msg.value) \u003C= 20 * ethWei, \u0022can not beyond 20 eth\u0022);\r\n        require(user.unlockAmount.add(msg.value) == user.unlockAmount.add(msg.value).div(ethWei).mul(ethWei), \u0022invalid msg value\u0022);\r\n\r\n        bool isEnough;\r\n        uint sendMoney;\r\n        sendMoney = calDynamicProfits(msg.sender);\r\n        if (sendMoney \u003E 0) {\r\n            (isEnough, sendMoney) = isEnoughBalance(sendMoney);\r\n\r\n            if (sendMoney \u003E 0) {\r\n                user.dynamicWithdrawn = user.dynamicWithdrawn.add(sendMoney);\r\n                sendMoneyToUser(msg.sender, sendMoney.mul(90).div(100));\r\n                sendMoneyToUser(loyal, sendMoney.mul(10).div(100));\r\n                emit LogWithdrawProfit(msg.sender, user.id, sendMoney, now, 2);\r\n            }\r\n            if (!isEnough) {\r\n                endRound();\r\n                return;\r\n            }\r\n        }\r\n\r\n        uint reInvestAmount = user.unlockAmount.add(msg.value);\r\n\r\n        uint investTime = now;\r\n        calUserQueueingStatic(msg.sender);\r\n\r\n        uint leastAmount = reInvestAmount.mul(4).div(100);\r\n        (isEnough, sendMoney) = isEnoughBalance(leastAmount);\r\n        if (!isEnough) {\r\n            if (sendMoney \u003E 0) {\r\n                sendMoneyToUser(msg.sender, sendMoney);\r\n            }\r\n            endRound();\r\n            return;\r\n        }\r\n\r\n        user.unlockAmount = 0;\r\n        user.allInvest = user.allInvest.add(reInvestAmount);\r\n        user.freezeAmount = user.freezeAmount.add(reInvestAmount);\r\n        user.staticLevel = getLevel(user.freezeAmount);\r\n        user.dynamicLevel = getLineLevel(user.freezeAmount);\r\n        user.reInvestCount = user.reInvestCount.add(1);\r\n        user.unlockAmountRedeemTime = 0;\r\n\r\n        uint flag = user.invests[user.invests.length-1].modeFlag;\r\n        Invest memory invest = Invest(msg.sender, reInvestAmount, investTime, now, 0, flag, !notSuspended(investTime));\r\n        user.invests.push(invest);\r\n        if (investTime \u003E lastInvestTime) {\r\n            lastInvestTime = investTime;\r\n        }\r\n\r\n        investCount = investCount.add(1);\r\n        investMoney = investMoney.add(reInvestAmount);\r\n        rInvestCount[rid] = rInvestCount[rid].add(1);\r\n        rInvestMoney[rid] = rInvestMoney[rid].add(reInvestAmount);\r\n        if (user.staticLevel \u003E= 3) {\r\n            storeSolitaire(msg.sender);\r\n        }\r\n        investAmountList[rid].push(reInvestAmount);\r\n        storeDynamicPreProfits(msg.sender, getDayForProfits(investTime), flag);\r\n\r\n        sendFeetoAdmin(reInvestAmount);\r\n        trySendTransform(reInvestAmount);\r\n        emit LogInvestIn(msg.sender, user.id, reInvestAmount, now, investTime, userMapping[msg.sender].inviteCode, userMapping[msg.sender].referrer, 1);\r\n    }\r\n\r\n    function storeSolitaire(address user) private {\r\n        uint len = investAmountList[rid].length;\r\n        if (len != 0) {\r\n            uint tmpTotalInvest;\r\n            for (uint i = 1; i \u003C= 20 \u0026\u0026 i \u003C= len; i\u002B\u002B) {\r\n                tmpTotalInvest = tmpTotalInvest.add(investAmountList[rid][len-i]);\r\n            }\r\n            uint reward = tmpTotalInvest.mul(1).div(10000).mul(6);\r\n            if (reward \u003E 0) {\r\n                userRoundMapping[rid][user].solitaire = userRoundMapping[rid][user].solitaire.add(reward);\r\n            }\r\n        }\r\n    }\r\n\r\n    function withdrawProfit()\r\n    public\r\n    isHuman()\r\n    {\r\n        require(gameStart(), \u0022game not start\u0022);\r\n        User storage user = userRoundMapping[rid][msg.sender];\r\n        calStaticProfitInner(msg.sender);\r\n\r\n        uint sendMoney = user.allStaticAmount;\r\n\r\n        bool isEnough = false;\r\n        uint resultMoney = 0;\r\n        (isEnough, resultMoney) = isEnoughBalance(sendMoney);\r\n        if (!isEnough) {\r\n            endRound();\r\n        }\r\n\r\n        if (resultMoney \u003E 0) {\r\n            sendMoneyToUser(msg.sender, resultMoney);\r\n            user.staticWithdrawn = user.staticWithdrawn.add(sendMoney);\r\n            user.allStaticAmount = 0;\r\n            emit LogWithdrawProfit(msg.sender, user.id, resultMoney, now, 1);\r\n        }\r\n    }\r\n\r\n    function isEnoughBalance(uint sendMoney) private view returns (bool, uint){\r\n        if (sendMoney \u003E= address(this).balance) {\r\n            return (false, address(this).balance);\r\n        } else {\r\n            return (true, sendMoney);\r\n        }\r\n    }\r\n\r\n    function isEnoughBalanceToRedeem(uint sendMoney, uint reInvestCount, uint hisStaticAmount) private view returns (bool, uint){\r\n        uint deductedStaticAmount = 0;\r\n        if (reInvestCount \u003E= 0 \u0026\u0026 reInvestCount \u003C= 6) {\r\n            deductedStaticAmount = hisStaticAmount.mul(5).div(10);\r\n            sendMoney = sendMoney.sub(deductedStaticAmount);\r\n        }\r\n        if (reInvestCount \u003E 6 \u0026\u0026 reInvestCount \u003C= 18) {\r\n            deductedStaticAmount = hisStaticAmount.mul(4).div(10);\r\n            sendMoney = sendMoney.sub(deductedStaticAmount);\r\n        }\r\n        if (reInvestCount \u003E 18 \u0026\u0026 reInvestCount \u003C= 36) {\r\n            deductedStaticAmount = hisStaticAmount.mul(3).div(10);\r\n            sendMoney = sendMoney.sub(deductedStaticAmount);\r\n        }\r\n        if (reInvestCount \u003E= 37) {\r\n            deductedStaticAmount = hisStaticAmount.mul(1).div(10);\r\n            sendMoney = sendMoney.sub(deductedStaticAmount);\r\n        }\r\n        if (sendMoney \u003E= address(this).balance) {\r\n            return (false, address(this).balance);\r\n        } else {\r\n            return (true, sendMoney);\r\n        }\r\n    }\r\n\r\n    function sendMoneyToUser(address payable userAddress, uint money) private {\r\n        userAddress.transfer(money);\r\n    }\r\n\r\n    function calStaticProfitInner(address payable userAddr) private returns (uint){\r\n        User storage user = userRoundMapping[rid][userAddr];\r\n        if (user.id == 0 || user.freezeAmount == 0) {\r\n            return 0;\r\n        }\r\n        uint allStatic = 0;\r\n        uint i = user.invests.length.sub(1);\r\n        Invest storage invest = user.invests[i];\r\n        uint scale;\r\n        if (invest.modeFlag == 0) {\r\n            scale = getScByLevel(user.staticLevel, user.reInvestCount);\r\n        } else if (invest.modeFlag == 1) {\r\n            scale = getSepScByLevel(user.staticLevel);\r\n        }\r\n        uint startDay = invest.investTime.sub(8 hours).div(1 days).mul(1 days);\r\n        if (now.sub(8 hours) \u003C startDay) {\r\n            return 0;\r\n        }\r\n        uint staticGaps = now.sub(8 hours).sub(startDay).div(1 days);\r\n\r\n        if (staticGaps \u003E 6) {\r\n            staticGaps = 6;\r\n        }\r\n        if (staticGaps \u003E invest.times) {\r\n            if (invest.isSuspendedInvest) {\r\n                allStatic = staticGaps.sub(invest.times).mul(scale).mul(invest.investAmount).div(10000).mul(2);\r\n                invest.times = staticGaps;\r\n            } else {\r\n                allStatic = staticGaps.sub(invest.times).mul(scale).mul(invest.investAmount).div(10000);\r\n                invest.times = staticGaps;\r\n            }\r\n        }\r\n\r\n        (uint unlockDay, uint unlockAmountRedeemTime) = getUnLockDay(invest.investTime);\r\n\r\n        if (unlockDay \u003E= 6 \u0026\u0026 user.freezeAmount != 0) {\r\n            user.staticFlag = user.staticFlag.add(1);\r\n            user.freezeAmount = user.freezeAmount.sub(invest.investAmount);\r\n            user.unlockAmount = user.unlockAmount.add(invest.investAmount);\r\n            user.unlockAmountRedeemTime = unlockAmountRedeemTime;\r\n            user.staticLevel = getLevel(user.freezeAmount);\r\n\r\n            if (user.solitaire \u003E 0) {\r\n                userAddr.transfer(user.solitaire);\r\n                user.hisSolitaire = user.hisSolitaire.add(user.solitaire);\r\n                emit LogWithdrawProfit(userAddr, user.id, user.solitaire, now, 3);\r\n            }\r\n            user.solitaire = 0;\r\n        }\r\n\r\n        allStatic = allStatic.mul(coefficient).div(10);\r\n        user.allStaticAmount = user.allStaticAmount.add(allStatic);\r\n        user.hisStaticAmount = user.hisStaticAmount.add(allStatic);\r\n        return user.allStaticAmount;\r\n    }\r\n\r\n    function getStaticProfits(address userAddr) public view returns(uint, uint, uint) {\r\n        User memory user = userRoundMapping[rid][userAddr];\r\n        if (user.id == 0 || user.invests.length == 0) {\r\n            return (0, 0, 0);\r\n        }\r\n        if (user.freezeAmount == 0) {\r\n            return (0, user.hisStaticAmount, user.staticWithdrawn);\r\n        }\r\n        uint allStatic = 0;\r\n        uint i = user.invests.length.sub(1);\r\n        Invest memory invest = user.invests[i];\r\n        uint scale;\r\n        if (invest.modeFlag == 0) {\r\n            scale = getScByLevel(user.staticLevel, user.reInvestCount);\r\n        } else if (invest.modeFlag == 1) {\r\n            scale = getSepScByLevel(user.staticLevel);\r\n        }\r\n        uint startDay = invest.investTime.sub(8 hours).div(1 days).mul(1 days);\r\n        if (now.sub(8 hours) \u003C startDay) {\r\n            return (0, user.hisStaticAmount, user.staticWithdrawn);\r\n        }\r\n        uint staticGaps = now.sub(8 hours).sub(startDay).div(1 days);\r\n\r\n        if (staticGaps \u003E 6) {\r\n            staticGaps = 6;\r\n        }\r\n        if (staticGaps \u003E invest.times) {\r\n            if (invest.isSuspendedInvest) {\r\n                allStatic = staticGaps.sub(invest.times).mul(scale).mul(invest.investAmount).div(10000).mul(2);\r\n            } else {\r\n                allStatic = staticGaps.sub(invest.times).mul(scale).mul(invest.investAmount).div(10000);\r\n            }\r\n        }\r\n\r\n        allStatic = allStatic.mul(coefficient).div(10);\r\n        return (\r\n            user.allStaticAmount.add(allStatic),\r\n            user.hisStaticAmount.add(allStatic),\r\n            user.staticWithdrawn\r\n        );\r\n    }\r\n\r\n    function storeDynamicPreProfits(address userAddr, uint investDay, uint modeFlag) private {\r\n        uint freezeAmount = userRoundMapping[rid][userAddr].freezeAmount;\r\n        if (freezeAmount \u003E= 1 * ethWei) {\r\n            uint scale;\r\n            if (modeFlag == 0) {\r\n                scale = getScByLevel(userRoundMapping[rid][userAddr].staticLevel, userRoundMapping[rid][userAddr].reInvestCount);\r\n            } else if (modeFlag == 1) {\r\n                scale = getSepScByLevel(userRoundMapping[rid][userAddr].staticLevel);\r\n            }\r\n            uint staticMoney = freezeAmount.mul(scale).div(10000);\r\n            updateReferrerPreProfits(userMapping[userAddr].referrer, investDay, staticMoney);\r\n        }\r\n    }\r\n\r\n    function updateReferrerPreProfits(string memory referrer, uint day, uint staticMoney) private {\r\n        string memory tmpReferrer = referrer;\r\n\r\n        for (uint i = 1; i \u003C= 20; i\u002B\u002B) {\r\n            if (isEmpty(tmpReferrer)) {\r\n                break;\r\n            }\r\n            uint floorIndex = getFloorIndex(i);\r\n            address tmpUserAddr = addressMapping[tmpReferrer];\r\n            if (tmpUserAddr == address(0)) {\r\n                break;\r\n            }\r\n\r\n            for (uint j = 0; j \u003C 6; j\u002B\u002B) {\r\n                uint dayIndex = day.add(j);\r\n                uint currentMoney = userRoundMapping[rid][tmpUserAddr].dynamicProfits[floorIndex][dayIndex];\r\n                userRoundMapping[rid][tmpUserAddr].dynamicProfits[floorIndex][dayIndex] = currentMoney.add(staticMoney);\r\n            }\r\n            tmpReferrer = userMapping[tmpUserAddr].referrer;\r\n        }\r\n    }\r\n\r\n    function calDynamicProfits(address user) public view returns (uint) {\r\n        uint len = userRoundMapping[rid][user].invests.length;\r\n        if (len == 0) {\r\n            return 0;\r\n        }\r\n        uint userInvestDay = getDayForProfits(userRoundMapping[rid][user].invests[len - 1].investTime);\r\n        uint totalProfits;\r\n\r\n        uint floor;\r\n        uint dynamicLevel = userRoundMapping[rid][user].dynamicLevel;\r\n        floor = getDynamicFloor(dynamicLevel);\r\n        if (floor \u003E 20) {\r\n            floor = 20;\r\n        }\r\n        uint floorCap = getFloorIndex(floor);\r\n        uint fireSc = getFireScByLevel(dynamicLevel);\r\n\r\n        for (uint i = 1; i \u003C= floorCap; i\u002B\u002B) {\r\n            uint recommendSc = getRecommendScaleByLevelAndTim(dynamicLevel, i);\r\n            for (uint j = 0; j \u003C 6; j\u002B\u002B) {\r\n                uint day = userInvestDay.add(j);\r\n                uint staticProfits = userRoundMapping[rid][user].dynamicProfits[i][day];\r\n\r\n                if (recommendSc != 0) {\r\n                    uint tmpDynamicAmount = staticProfits.mul(fireSc).mul(recommendSc);\r\n                    totalProfits = tmpDynamicAmount.div(10).div(100).add(totalProfits);\r\n                }\r\n            }\r\n        }\r\n\r\n        return totalProfits;\r\n    }\r\n\r\n    function registerUserInfo(address user, string calldata inviteCode, string calldata referrer) external onlyOwner {\r\n        registerUser(user, inviteCode, referrer);\r\n    }\r\n\r\n    function calUserQueueingStatic(address userAddress) private returns(uint) {\r\n        User storage calUser = userRoundMapping[rid][userAddress];\r\n\r\n        uint investLength = calUser.invests.length;\r\n        if (investLength == 0) {\r\n            return 0;\r\n        }\r\n\r\n        Invest memory invest = calUser.invests[investLength - 1];\r\n        if (invest.investTime \u003C= invest.realityInvestTime) {\r\n            return 0;\r\n        }\r\n\r\n        uint staticGaps = getQueueingStaticGaps(invest.investTime, invest.realityInvestTime);\r\n        if (staticGaps \u003C= 0) {\r\n            return 0;\r\n        }\r\n        uint staticAmount = invest.investAmount.mul(staticGaps).mul(5).div(10000);\r\n        calUser.hisStaticAmount = calUser.hisStaticAmount.add(staticAmount);\r\n        calUser.allStaticAmount = calUser.allStaticAmount.add(staticAmount);\r\n        return staticAmount;\r\n    }\r\n\r\n    function getQueueingStaticGaps(uint investTime, uint realityInvestTime) private pure returns (uint){\r\n        if(investTime \u003C= realityInvestTime){\r\n            return 0;\r\n        }\r\n        uint startDay = realityInvestTime.sub(8 hours).div(1 days).mul(1 days);\r\n        uint staticGaps = investTime.sub(8 hours).sub(startDay).div(1 days);\r\n        return staticGaps;\r\n    }\r\n\r\n    function redeem()\r\n    public\r\n    isHuman()\r\n    isSuspended()\r\n    {\r\n        require(gameStart(), \u0022game not start\u0022);\r\n        User storage user = userRoundMapping[rid][msg.sender];\r\n        require(user.id \u003E 0, \u0022user not exist\u0022);\r\n        withdrawProfit();\r\n        require(now \u003E= user.unlockAmountRedeemTime, \u0022redeem time non-arrival\u0022);\r\n\r\n        uint sendMoney = user.unlockAmount;\r\n        require(sendMoney != 0, \u0022you don\u0027t have unlock money\u0022);\r\n        uint reInvestCount = user.reInvestCount;\r\n        uint hisStaticAmount = user.hisStaticAmount;\r\n\r\n        bool isEnough = false;\r\n        uint resultMoney = 0;\r\n\r\n        uint index = user.invests.length - 1;\r\n        if (user.invests[index].modeFlag == 0) {\r\n            (isEnough, resultMoney) = isEnoughBalanceToRedeem(sendMoney, reInvestCount, hisStaticAmount);\r\n        } else if (user.invests[index].modeFlag == 1) {\r\n            require(reInvestCount == 4 || (reInvestCount\u003E4 \u0026\u0026 (reInvestCount-4)%5 == 0), \u0022reInvest time not enough\u0022);\r\n            (isEnough, resultMoney) = isEnoughBalance(sendMoney);\r\n        } else {\r\n            revert(\u0022invalid flag\u0022);\r\n        }\r\n\r\n        if (!isEnough) {\r\n            endRound();\r\n        }\r\n        if (resultMoney \u003E 0) {\r\n            sendMoneyToUser(msg.sender, resultMoney);\r\n            user.unlockAmount = 0;\r\n            user.staticLevel = getLevel(user.freezeAmount);\r\n            user.dynamicLevel = 0;\r\n            user.reInvestCount = 0;\r\n            user.hisStaticAmount = 0;\r\n            emit LogRedeem(msg.sender, user.id, resultMoney, now);\r\n        }\r\n    }\r\n\r\n    function getUnLockDay(uint investTime) public view returns (uint unlockDay, uint unlockAmountRedeemTime){\r\n        uint gameStartTime = startTime;\r\n        if (gameStartTime \u003C= 0 || investTime \u003E now || investTime \u003C gameStartTime) {\r\n            return (0, 0);\r\n        }\r\n        unlockDay = now.sub(investTime).div(1 days);\r\n        unlockAmountRedeemTime = 0;\r\n        if (unlockDay \u003C 6) {\r\n            return (unlockDay, unlockAmountRedeemTime);\r\n        }\r\n        unlockAmountRedeemTime = investTime.add(uint(6).mul(1 days));\r\n\r\n        uint stopTime = suspendedTime;\r\n        if (stopTime == 0) {\r\n            return (unlockDay, unlockAmountRedeemTime);\r\n        }\r\n\r\n        uint stopDays = suspendedDays;\r\n        uint stopEndTime = stopTime.add(stopDays.mul(1 days));\r\n        if (investTime \u003C stopTime){\r\n            if(unlockAmountRedeemTime \u003E= stopEndTime){\r\n                unlockAmountRedeemTime = unlockAmountRedeemTime.add(stopDays.mul(1 days));\r\n            }else if(unlockAmountRedeemTime \u003C stopEndTime \u0026\u0026 unlockAmountRedeemTime \u003E stopTime){\r\n                unlockAmountRedeemTime = stopEndTime.add(unlockAmountRedeemTime.sub(stopTime));\r\n            }\r\n        }\r\n        if (investTime \u003E= stopTime \u0026\u0026 investTime \u003C stopEndTime){\r\n            if(unlockAmountRedeemTime \u003E= stopEndTime){\r\n                unlockAmountRedeemTime = unlockAmountRedeemTime.add(stopEndTime.sub(investTime));\r\n            }else if(unlockAmountRedeemTime \u003C stopEndTime \u0026\u0026 unlockAmountRedeemTime \u003E stopTime){\r\n                unlockAmountRedeemTime = stopEndTime.add(uint(6).mul(1 days));\r\n            }\r\n        }\r\n        return (unlockDay, unlockAmountRedeemTime);\r\n    }\r\n\r\n    function endRound() private {\r\n        rid\u002B\u002B;\r\n        startTime = now.add(period).div(1 days).mul(1 days);\r\n        coefficient = 10;\r\n    }\r\n\r\n    function isUsed(string memory code) public view returns (bool) {\r\n        address user = getUserAddressByCode(code);\r\n        return uint(user) != 0;\r\n    }\r\n\r\n    function getUserAddressByCode(string memory code) public view returns (address) {\r\n        return addressMapping[code];\r\n    }\r\n\r\n    function sendFeetoAdmin(uint amount) private {\r\n        devAddr.transfer(amount.div(25));\r\n    }\r\n\r\n    function trySendTransform(uint amount) private {\r\n        if (transformAmount[rid] \u003E 500 * ethWei) {\r\n            return;\r\n        }\r\n        uint sendAmount = amount.div(100);\r\n        transformAmount[rid] = transformAmount[rid].add(sendAmount);\r\n        other.transfer(sendAmount);\r\n    }\r\n\r\n    function getGameInfo() public isHuman() view returns (uint, uint, uint, uint, uint, uint, uint, uint, uint, uint, uint, uint) {\r\n        uint dayInvest;\r\n        uint dayLimit;\r\n        dayInvest = everyDayInvestMapping[getCurrentInvestDay(now)];\r\n        dayLimit = getCurrentInvestLimit(now);\r\n        return (\r\n        rid,\r\n        uid,\r\n        startTime,\r\n        investCount,\r\n        investMoney,\r\n        rInvestCount[rid],\r\n        rInvestMoney[rid],\r\n        coefficient,\r\n        dayInvest,\r\n        dayLimit,\r\n        now,\r\n        lastInvestTime\r\n        );\r\n    }\r\n\r\n    function getUserInfo(address user, uint roundId) public isHuman() view returns (\r\n        uint[19] memory ct, string memory inviteCode, string memory referrer\r\n    ) {\r\n\r\n        if (roundId == 0) {\r\n            roundId = rid;\r\n        }\r\n\r\n        User memory userInfo = userRoundMapping[roundId][user];\r\n\r\n        ct[0] = userInfo.id;\r\n        ct[1] = userInfo.staticLevel;\r\n        ct[2] = userInfo.dynamicLevel;\r\n        ct[3] = userInfo.allInvest;\r\n        Invest memory invest;\r\n        if (userInfo.invests.length == 0) {\r\n            ct[4] = 0;\r\n        } else {\r\n            invest = userInfo.invests[userInfo.invests.length-1];\r\n            if (invest.modeFlag == 0) {\r\n                ct[4] = getScByLevel(userInfo.staticLevel, userInfo.reInvestCount);\r\n            } else if(invest.modeFlag == 1) {\r\n                ct[4] = getSepScByLevel(userInfo.staticLevel);\r\n            } else {\r\n                ct[4] = 0;\r\n            }\r\n        }\r\n        ct[5] = userInfo.inviteAmount;\r\n        ct[6] = userInfo.freezeAmount;\r\n        ct[7] = userInfo.staticWithdrawn.add(userInfo.dynamicWithdrawn);\r\n        ct[8] = userInfo.staticWithdrawn;\r\n        ct[9] = userInfo.dynamicWithdrawn;\r\n        uint canWithdrawn;\r\n        uint hisWithdrawn;\r\n        uint staticWithdrawn;\r\n        (canWithdrawn, hisWithdrawn, staticWithdrawn) = getStaticProfits(user);\r\n        ct[10] = canWithdrawn;\r\n        ct[11] = calDynamicProfits(user);\r\n        uint lockDay;\r\n        uint redeemTime;\r\n        (lockDay, redeemTime) = getUnLockDay(invest.investTime);\r\n        ct[12] = lockDay;\r\n        ct[13] = redeemTime;\r\n        ct[14] = userInfo.reInvestCount;\r\n        ct[15] = invest.modeFlag;\r\n        ct[16] = userInfo.unlockAmount;\r\n        ct[17] = invest.investTime;\r\n        ct[18] = userInfo.hisSolitaire;\r\n\r\n        inviteCode = userMapping[user].inviteCode;\r\n        referrer = userMapping[user].referrer;\r\n        return (\r\n        ct,\r\n        inviteCode,\r\n        referrer\r\n        );\r\n    }\r\n\r\n    function getInvestTime(uint amount) public view returns (uint){\r\n        uint lastTime = lastInvestTime;\r\n\r\n        uint investTime = 0;\r\n\r\n        if (isLessThanLimit(amount, now)) {\r\n            if (now \u003C lastTime) {\r\n                investTime = lastTime.add(1 seconds);\r\n            } else {\r\n                investTime = now;\r\n            }\r\n        } else {\r\n            investTime = lastTime.add(1 seconds);\r\n            if (!isLessThanLimit(amount, investTime)) {\r\n                investTime = getCurrentInvestDay(lastTime).mul(1 days).add(baseTime);\r\n            }\r\n        }\r\n        return investTime;\r\n    }\r\n\r\n\r\n    function getDayForProfits(uint investTime) private pure returns (uint) {\r\n        return investTime.sub(8 hours).div(1 days);\r\n    }\r\n\r\n    function getCurrentInvestLimit(uint investTime) public view returns (uint){\r\n        uint currentDays = getCurrentInvestDay(investTime).sub(1);\r\n        uint currentRound = currentDays.div(6).add(1);\r\n        uint x = 3 ** (currentRound.sub(1));\r\n        uint y = 2 ** (currentRound.sub(1));\r\n        return baseLimit.mul(x).div(y);\r\n    }\r\n\r\n    function getCurrentInvestDay(uint investTime) public view returns (uint){\r\n        uint gameStartTime = baseTime;\r\n        if (gameStartTime == 0 || investTime \u003C gameStartTime) {\r\n            return 0;\r\n        }\r\n        uint currentInvestDay = investTime.sub(gameStartTime).div(1 days).add(1);\r\n        return currentInvestDay;\r\n    }\r\n    function isLessThanLimit(uint amount, uint investTime) public view returns (bool){\r\n        return getCurrentInvestLimit(investTime) \u003E= amount.add(everyDayInvestMapping[getCurrentInvestDay(investTime)]);\r\n    }\r\n    function notSuspended() public view returns (bool) {\r\n        uint sTime = suspendedTime;\r\n        uint sDays = suspendedDays;\r\n        return sTime == 0 || now \u003C sTime || now \u003E= sDays.mul(1 days).add(sTime);\r\n    }\r\n\r\n    function notSuspended(uint investTime) public view returns (bool) {\r\n        uint sTime = suspendedTime;\r\n        uint sDays = suspendedDays;\r\n        return sTime == 0 || investTime \u003C sTime || investTime \u003E= sDays.mul(1 days).add(sTime);\r\n    }\r\n\r\n    function suspended(uint stopTime, uint stopDays) external onlyWhitelistAdmin {\r\n        require(gameStart(), \u0022game not start\u0022);\r\n        require(stopTime \u003E now, \u0022stopTime shoule gt now\u0022);\r\n        require(stopTime \u003E lastInvestTime, \u0022stopTime shoule gt lastInvestTime\u0022);\r\n        suspendedTime = stopTime;\r\n        suspendedDays = stopDays;\r\n    }\r\n\r\n    function getUserById(uint id) public view returns (address){\r\n        return indexMapping[id];\r\n    }\r\n\r\n    function getAvailableReInvestInAmount(address userAddr) public view returns (uint){\r\n        User memory user = userRoundMapping[rid][userAddr];\r\n        if(user.freezeAmount == 0){\r\n            return user.unlockAmount;\r\n        }else{\r\n            Invest memory invest = user.invests[user.invests.length - 1];\r\n            (uint unlockDay, uint unlockAmountRedeemTime) = getUnLockDay(invest.investTime);\r\n            if(unlockDay \u003E= 6){\r\n                return invest.investAmount;\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    function getAvailableRedeemAmount(address userAddr) public view returns (uint){\r\n        User memory user = userRoundMapping[rid][userAddr];\r\n        if (now \u003C user.unlockAmountRedeemTime) {\r\n            return 0;\r\n        }\r\n        uint allUnlock = user.unlockAmount;\r\n        if (user.freezeAmount \u003E 0) {\r\n            Invest memory invest = user.invests[user.invests.length - 1];\r\n            (uint unlockDay, uint unlockAmountRedeemTime) = getUnLockDay(invest.investTime);\r\n            if (unlockDay \u003E= 6 \u0026\u0026 now \u003E= unlockAmountRedeemTime) {\r\n                allUnlock = invest.investAmount;\r\n            }\r\n            if(invest.modeFlag == 1){\r\n                if(user.reInvestCount \u003C 4 || (user.reInvestCount - 4)%5 != 0){\r\n                    allUnlock = 0;\r\n                }\r\n            }\r\n        }\r\n        return allUnlock;\r\n    }\r\n\r\n    function registerUser(address user, string memory inviteCode, string memory referrer) private {\r\n        UserGlobal storage userGlobal = userMapping[user];\r\n        if (userGlobal.id != 0) {\r\n            userGlobal.userAddress = user;\r\n            userGlobal.inviteCode = inviteCode;\r\n            userGlobal.referrer = referrer;\r\n            \r\n            addressMapping[inviteCode] = user;\r\n            indexMapping[uid] = user;\r\n        } else {\r\n            uid\u002B\u002B;\r\n            userGlobal.id = uid;\r\n            userGlobal.userAddress = user;\r\n            userGlobal.inviteCode = inviteCode;\r\n            userGlobal.referrer = referrer;\r\n            \r\n            addressMapping[inviteCode] = user;\r\n            indexMapping[uid] = user;\r\n        }\r\n        \r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that revert on error\r\n */\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, reverts on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring \u0027a\u0027 not being zero, but the\r\n        // benefit is lost if \u0027b\u0027 is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \u0022mul overflow\u0022);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b \u003E 0, \u0022div zero\u0022);\r\n        // Solidity only automatically asserts when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c \u002B a % b); // There is no case in which this doesn\u0027t hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b \u003C= a, \u0022lower sub bigger\u0022);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, reverts on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a \u002B b;\r\n        require(c \u003E= a, \u0022overflow\u0022);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\r\n    * reverts when dividing by zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b != 0, \u0022mod zero\u0022);\r\n        return a % b;\r\n    }\r\n}","ABI":"[{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022reInvestIn\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:true,\u0022stateMutability\u0022:\u0022payable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022getGameInfo\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022investTime\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022getUnLockDay\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022unlockDay\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022unlockAmountRedeemTime\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022everyDayInvestMapping\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022inviteCode\u0022,\u0022type\u0022:\u0022string\u0022},{\u0022name\u0022:\u0022referrer\u0022,\u0022type\u0022:\u0022string\u0022},{\u0022name\u0022:\u0022flag\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022investIn\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:true,\u0022stateMutability\u0022:\u0022payable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022investTime\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022getCurrentInvestLimit\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022gameStart\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022investTime\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022getCurrentInvestDay\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022userAddr\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022getAvailableReInvestInAmount\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022notSuspended\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022renounceWhitelistAdmin\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022userAddr\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022getStaticProfits\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022userAddr\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022getAvailableRedeemAmount\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022code\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022name\u0022:\u0022isUsed\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022removeWhitelistAdmin\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022time\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_baseTime\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022activeGame\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022id\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022getUserById\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022renounceOwnership\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022addWhitelistAdmin\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022user\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022roundId\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022getUserInfo\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022ct\u0022,\u0022type\u0022:\u0022uint256[19]\u0022},{\u0022name\u0022:\u0022inviteCode\u0022,\u0022type\u0022:\u0022string\u0022},{\u0022name\u0022:\u0022referrer\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022getInvestTime\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022owner\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022isOwner\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022withdrawProfit\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022code\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022name\u0022:\u0022getUserAddressByCode\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022user\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022calDynamicProfits\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022stopTime\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022stopDays\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022suspended\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022user\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022inviteCode\u0022,\u0022type\u0022:\u0022string\u0022},{\u0022name\u0022:\u0022referrer\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022name\u0022:\u0022registerUserInfo\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022indexMapping\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022investTime\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022isLessThanLimit\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022isWhitelistAdmin\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022investTime\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022notSuspended\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022redeem\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022coeff\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_baseLimit\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022setCoefficient\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022transferOwnership\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022constructor\u0022},{\u0022payable\u0022:true,\u0022stateMutability\u0022:\u0022payable\u0022,\u0022type\u0022:\u0022fallback\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022who\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022uid\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022time\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022investTime\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022inviteCode\u0022,\u0022type\u0022:\u0022string\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022referrer\u0022,\u0022type\u0022:\u0022string\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022t\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022LogInvestIn\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022who\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022uid\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022time\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022t\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022LogWithdrawProfit\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022who\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022uid\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022now\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022LogRedeem\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022WhitelistAdminAdded\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022WhitelistAdminRemoved\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022previousOwner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022OwnershipTransferred\u0022,\u0022type\u0022:\u0022event\u0022}]","ContractName":"MutualAlliance","CompilerVersion":"v0.5.0\u002Bcommit.1d4f565a","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://cae7e5c8a6f2c81d445aad95d5488f89acd3bff2d6c71b6dc3d0989b944f5261"}]