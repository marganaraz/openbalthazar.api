[{"SourceCode":"pragma solidity 0.5.11; // optimization runs: 200, evm version: petersburg\r\n\r\n\r\ninterface DTokenInterface {\r\n  event Mint(address minter, uint256 mintAmount, uint256 mintTokens);\r\n  event Redeem(address redeemer, uint256 redeemAmount, uint256 redeemTokens);\r\n\r\n  function mint(uint256 underlyingToSupply) external returns (uint256 dTokensMinted);\r\n\r\n  function mintViaCToken(uint256 cUSDCToSupply) external returns (uint256 dUSDCMinted);\r\n\r\n  function redeem(uint256 dTokenToBurn) external returns (uint256 underlyingReceived);\r\n\r\n  function redeemToCToken(uint256 dUSDCToBurn) external returns (uint256 cUSDCReceived);\r\n\r\n  function redeemUnderlying(uint256 underelyingToReceive) external returns (uint256 dTokensBurned);\r\n\r\n  function redeemUnderlyingToCToken(uint256 usdcToReceive) external returns (uint256 dUSDCBurned);\r\n\r\n  function pullSurplus() external returns (uint256 cTokenSurplus);\r\n\r\n  function accrueInterest() external;\r\n\r\n  function totalSupplyUnderlying() external view returns (uint256);\r\n\r\n  function balanceOfUnderlying(address account) external view returns (uint256 underlyingBalance);\r\n\r\n  function getSurplus() external view returns (uint256 cUSDCSurplus);\r\n\r\n  function exchangeRateCurrent() external view returns (uint256 dTokenExchangeRate);\r\n\r\n  function supplyRatePerBlock() external view returns (uint256 dTokenInterestRate);\r\n\r\n  function getSpreadPerBlock() external view returns (uint256 rateSpread);\r\n\r\n  function getVersion() external pure returns (uint256 version);\r\n}\r\n\r\n\r\ninterface CTokenInterface {\r\n  function mint(uint256 mintAmount) external returns (uint256 err);\r\n\r\n  function redeem(uint256 redeemAmount) external returns (uint256 err);\r\n\r\n  function redeemUnderlying(uint256 redeemAmount) external returns (uint256 err);\r\n\r\n  function balanceOf(address account) external view returns (uint256 balance);\r\n\r\n  function balanceOfUnderlying(address account) external returns (uint256 balance);\r\n\r\n  function exchangeRateCurrent() external returns (uint256 exchangeRate);\r\n\r\n  function transfer(address recipient, uint256 value) external returns (bool);\r\n\r\n  function transferFrom(\r\n    address sender, address recipient, uint256 value\r\n  ) external returns (bool);\r\n\r\n  function supplyRatePerBlock() external view returns (uint256 rate);\r\n\r\n  function exchangeRateStored() external view returns (uint256 rate);\r\n\r\n  function accrualBlockNumber() external view returns (uint256 blockNumber);\r\n}\r\n\r\n\r\ninterface ERC20Interface {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n}\r\n\r\n\r\ninterface SpreadRegistryInterface {\r\n  function getUSDCSpreadPerBlock() external view returns (uint256 usdcSpreadPerBlock);\r\n}\r\n\r\n\r\nlibrary SafeMath {\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a \u002B b;\r\n    require(c \u003E= a, \u0022SafeMath: addition overflow\u0022);\r\n\r\n    return c;\r\n  }\r\n\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b \u003C= a, \u0022SafeMath: subtraction overflow\u0022);\r\n    uint256 c = a - b;\r\n\r\n    return c;\r\n  }\r\n\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n\r\n    uint256 c = a * b;\r\n    require(c / a == b, \u0022SafeMath: multiplication overflow\u0022);\r\n\r\n    return c;\r\n  }\r\n\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b \u003E 0, \u0022SafeMath: division by zero\u0022);\r\n    uint256 c = a / b;\r\n\r\n    return c;\r\n  }\r\n\r\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0, \u0022SafeMath: modulo by zero\u0022);\r\n    return a % b;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @title DharmaUSDCPrototype1\r\n * @author 0age (dToken mechanics derived from Compound cTokens, ERC20 methods\r\n * derived from Open Zeppelin\u0027s ERC20 contract)\r\n * @notice Initial prototype for a cUSDC wrapper token. This version is not\r\n * upgradeable, and serves as an initial test of the eventual dUSDC mechanics.\r\n * The dUSDC exchange rate will grow at an approximate APR of 5% or at the cUSDC\r\n * exchange rate, whichever is greater.\r\n */\r\ncontract DharmaUSDCPrototype1 is ERC20Interface, DTokenInterface {\r\n  using SafeMath for uint256;\r\n\r\n  uint256 internal constant _DHARMA_USDC_VERSION = 0;\r\n\r\n  string internal constant _NAME = \u0022Dharma USD Coin (Prototype 1)\u0022;\r\n  string internal constant _SYMBOL = \u0022dUSDC-p1\u0022;\r\n  uint8 internal constant _DECIMALS = 8; // to match cUSDC\r\n\r\n  uint256 internal constant _SCALING_FACTOR = 1e18;\r\n  uint256 internal constant _HALF_OF_SCALING_FACTOR = 5e17;\r\n  uint256 internal constant _COMPOUND_SUCCESS = 0;\r\n\r\n  CTokenInterface internal constant _CUSDC = CTokenInterface(\r\n    0x39AA39c021dfbaE8faC545936693aC917d5E7563 // mainnet\r\n  );\r\n\r\n  ERC20Interface internal constant _USDC = ERC20Interface(\r\n    0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48 // mainnet\r\n  );\r\n\r\n  SpreadRegistryInterface internal constant _SPREAD = SpreadRegistryInterface(\r\n    0xA143fD004B3c26f8FAeDeb9224eC03585e63d041\r\n  );\r\n\r\n  // Note: this is just an EOA for the initial prototype.\r\n  address internal constant _VAULT = 0x7e4A8391C728fEd9069B2962699AB416628B19Fa;\r\n\r\n  mapping (address =\u003E uint256) private _balances;\r\n\r\n  mapping (address =\u003E mapping (address =\u003E uint256)) private _allowances;\r\n\r\n  uint256 private _totalSupply;\r\n\r\n  // TODO: pack these more tightly in storage\r\n  uint256 private _blockLastUpdated;\r\n  uint256 private _dUSDCExchangeRate;\r\n  uint256 private _cUSDCExchangeRate;\r\n\r\n  constructor() public {\r\n    // Approve cUSDC to transfer USDC on behalf of this contract in order to mint.\r\n    require(_USDC.approve(address(_CUSDC), uint256(-1)));\r\n\r\n    _blockLastUpdated = block.number;\r\n    _dUSDCExchangeRate = 1e28; // 1 USDC == 1 dUSDC to start\r\n    _cUSDCExchangeRate = _CUSDC.exchangeRateCurrent();\r\n  }\r\n\r\n  /**\r\n   * @notice Transfer \u0060amount\u0060 USDC from \u0060msg.sender\u0060 to this contract, use them\r\n   * to mint cUSDC, and mint dTokens with \u0060msg.sender\u0060 as the beneficiary. Ensure\r\n   * that this contract has been approved to transfer the USDC on behalf of the\r\n   * caller.\r\n   * @param usdcToSupply uint256 The amount of USDC to provide as part of minting.\r\n   * @return The amount of dUSDC received in return for the supplied USDC.\r\n   */\r\n  function mint(\r\n    uint256 usdcToSupply\r\n  ) external accrues returns (uint256 dUSDCMinted) {\r\n    // Pull in USDC - ensure that this contract has sufficient allowance.\r\n    require(\r\n      _USDC.transferFrom(msg.sender, address(this), usdcToSupply),\r\n      \u0022USDC transfer failed.\u0022\r\n    );\r\n\r\n    // Use the USDC to mint cUSDC. (TODO: include error code in revert reason)\r\n    require(_CUSDC.mint(usdcToSupply) == _COMPOUND_SUCCESS, \u0022cUSDC mint failed.\u0022);\r\n\r\n    // Determine the dUSDC to mint using the exchange rate.\r\n    dUSDCMinted = usdcToSupply.mul(_SCALING_FACTOR).div(_dUSDCExchangeRate);\r\n\r\n    // Mint dUSDC to the caller.\r\n    _mint(msg.sender, usdcToSupply, dUSDCMinted);\r\n  }\r\n\r\n  /**\r\n   * @notice Transfer \u0060amount\u0060 cUSDC from \u0060msg.sender\u0060 to this contract and mint\r\n   * dTokens with \u0060msg.sender\u0060 as the beneficiary. Ensure that this contract has\r\n   * been approved to transfer the cUSDC on behalf of the caller.\r\n   * @param cUSDCToSupply uint256 The amount of cUSDC to provide as part of\r\n   * minting.\r\n   * @return The amount of dUSDC received in return for the supplied cUSDC.\r\n   */\r\n  function mintViaCToken(\r\n    uint256 cUSDCToSupply\r\n  ) external accrues returns (uint256 dUSDCMinted) {\r\n    // Pull in cUSDC - ensure that this contract has sufficient allowance.\r\n    (bool ok, bytes memory data) = address(_CUSDC).call(abi.encodeWithSelector(\r\n      _CUSDC.transferFrom.selector, msg.sender, address(this), cUSDCToSupply\r\n    ));\r\n\r\n    _checkCompoundInteraction(_CUSDC.transferFrom.selector, ok, data);\r\n\r\n    // Determine the USDC equivalent of the supplied cUSDC amount.\r\n    uint256 usdcEquivalent = cUSDCToSupply.mul(_cUSDCExchangeRate) / _SCALING_FACTOR;\r\n\r\n    // Determine the dUSDC to mint using the exchange rate.\r\n    dUSDCMinted = usdcEquivalent.mul(_SCALING_FACTOR).div(_dUSDCExchangeRate);\r\n\r\n    // Mint dUSDC to the caller.\r\n    _mint(msg.sender, usdcEquivalent, dUSDCMinted);\r\n  }\r\n\r\n  /**\r\n   * @notice Redeem \u0060dUSDCToBurn\u0060 dUSDC from \u0060msg.sender\u0060, use the corresponding\r\n   * cUSDC to redeem USDC, and transfer the USDC to \u0060msg.sender\u0060.\r\n   * @param dUSDCToBurn uint256 The amount of dUSDC to provide for USDC.\r\n   * @return The amount of USDC received in return for the provided cUSDC.\r\n   */\r\n  function redeem(\r\n    uint256 dUSDCToBurn\r\n  ) external accrues returns (uint256 usdcReceived) {\r\n    // Determine the underlying USDC value of the dUSDC to be burned.\r\n    usdcReceived = dUSDCToBurn.mul(_dUSDCExchangeRate) / _SCALING_FACTOR;\r\n\r\n    // Burn the dUSDC.\r\n    _burn(msg.sender, usdcReceived, dUSDCToBurn);\r\n\r\n    // Use the cUSDC to redeem USDC and ensure that the operation succeeds.\r\n    (bool ok, bytes memory data) = address(_CUSDC).call(abi.encodeWithSelector(\r\n      _CUSDC.redeemUnderlying.selector, usdcReceived\r\n    ));\r\n\r\n    _checkCompoundInteraction(_CUSDC.redeemUnderlying.selector, ok, data);\r\n\r\n    // Send the USDC to the redeemer.\r\n    require(_USDC.transfer(msg.sender, usdcReceived), \u0022USDC transfer failed.\u0022);\r\n  }\r\n\r\n  /**\r\n   * @notice Redeem \u0060dUSDCToBurn\u0060 dUSDC from \u0060msg.sender\u0060 and transfer the\r\n   * corresponding amount of cUSDC to \u0060msg.sender\u0060.\r\n   * @param dUSDCToBurn uint256 The amount of dUSDC to provide for USDC.\r\n   * @return The amount of cUSDC received in return for the provided dUSDC.\r\n   */\r\n  function redeemToCToken(\r\n    uint256 dUSDCToBurn\r\n  ) external accrues returns (uint256 cUSDCReceived) {\r\n    // Determine the underlying USDC value of the dUSDC to be burned.\r\n    uint256 usdcEquivalent = dUSDCToBurn.mul(_dUSDCExchangeRate) / _SCALING_FACTOR;\r\n\r\n    // Determine the amount of cUSDC corresponding to the redeemed USDC value.\r\n    cUSDCReceived = usdcEquivalent.mul(_SCALING_FACTOR).div(_cUSDCExchangeRate);\r\n\r\n    // Burn the dUSDC.\r\n    _burn(msg.sender, usdcEquivalent, dUSDCToBurn);\r\n\r\n    // Transfer the cUSDC to the caller and ensure that the operation succeeds.\r\n    (bool ok, bytes memory data) = address(_CUSDC).call(abi.encodeWithSelector(\r\n      _CUSDC.transfer.selector, msg.sender, cUSDCReceived\r\n    ));\r\n\r\n    _checkCompoundInteraction(_CUSDC.transfer.selector, ok, data);\r\n  }\r\n\r\n  /**\r\n   * @notice Redeem the dUSDC equivalent value of USDC amount \u0060usdcToReceive\u0060 from\r\n   * \u0060msg.sender\u0060, use the corresponding cUSDC to redeem USDC, and transfer the\r\n   * USDC to \u0060msg.sender\u0060.\r\n   * @param usdcToReceive uint256 The amount, denominated in USDC, of the cUSDC to\r\n   * provide for USDC.\r\n   * @return The amount of dUSDC burned in exchange for the returned USDC.\r\n   */\r\n  function redeemUnderlying(\r\n    uint256 usdcToReceive\r\n  ) external accrues returns (uint256 dUSDCBurned) {\r\n    // Determine the dUSDC to redeem using the exchange rate.\r\n    dUSDCBurned = usdcToReceive.mul(_SCALING_FACTOR).div(_dUSDCExchangeRate);\r\n\r\n    // Burn the dUSDC.\r\n    _burn(msg.sender, usdcToReceive, dUSDCBurned);\r\n\r\n    // Use the cUSDC to redeem USDC and ensure that the operation succeeds.\r\n    (bool ok, bytes memory data) = address(_CUSDC).call(abi.encodeWithSelector(\r\n      _CUSDC.redeemUnderlying.selector, usdcToReceive\r\n    ));\r\n\r\n    _checkCompoundInteraction(_CUSDC.redeemUnderlying.selector, ok, data);\r\n\r\n    // Send the USDC to the redeemer.\r\n    require(_USDC.transfer(msg.sender, usdcToReceive), \u0022USDC transfer failed.\u0022);\r\n  }\r\n\r\n  /**\r\n   * @notice Redeem the dUSDC equivalent value of USDC amount \u0060usdcToReceive\u0060 from\r\n   * \u0060msg.sender\u0060 and transfer the corresponding amount of cUSDC to \u0060msg.sender\u0060.\r\n   * @param usdcToReceive uint256 The amount, denominated in USDC, of the cUSDC to\r\n   * provide for USDC.\r\n   * @return The amount of dUSDC burned in exchange for the returned cUSDC.\r\n   */\r\n  function redeemUnderlyingToCToken(\r\n    uint256 usdcToReceive\r\n  ) external accrues returns (uint256 dUSDCBurned) {\r\n    // Determine the dUSDC to redeem using the exchange rate.\r\n    dUSDCBurned = usdcToReceive.mul(_SCALING_FACTOR).div(_dUSDCExchangeRate);\r\n\r\n    // Burn the dUSDC.\r\n    _burn(msg.sender, usdcToReceive, dUSDCBurned);\r\n\r\n    // Determine the amount of cUSDC corresponding to the redeemed USDC value.\r\n    uint256 cUSDCToReceive = usdcToReceive.mul(_SCALING_FACTOR).div(_cUSDCExchangeRate);\r\n\r\n    // Transfer the cUSDC to the caller and ensure that the operation succeeds.\r\n    (bool ok, bytes memory data) = address(_CUSDC).call(abi.encodeWithSelector(\r\n      _CUSDC.transfer.selector, msg.sender, cUSDCToReceive\r\n    ));\r\n\r\n    _checkCompoundInteraction(_CUSDC.transfer.selector, ok, data);\r\n  }\r\n\r\n  /**\r\n   * @notice Transfer cUSDC in excess of the total dUSDC balance to a dedicated\r\n   * \u0022vault\u0022 account.\r\n   * @return The amount of cUSDC transferred to the vault account.\r\n   */\r\n  function pullSurplus() external accrues returns (uint256 cUSDCSurplus) {\r\n    // Determine the cUSDC surplus (difference between total dUSDC and total cUSDC)\r\n    (, cUSDCSurplus) = _getSurplus();\r\n\r\n    // Transfer the cUSDC to the vault and ensure that the operation succeeds.\r\n    (bool ok, bytes memory data) = address(_CUSDC).call(abi.encodeWithSelector(\r\n      _CUSDC.transfer.selector, _VAULT, cUSDCSurplus\r\n    ));\r\n\r\n    _checkCompoundInteraction(_CUSDC.transfer.selector, ok, data);\r\n  }\r\n\r\n  /**\r\n   * @notice Manually advance the dUSDC exchange rate and update the cUSDC\r\n   * exchange rate to that of the current block.\r\n   */\r\n  function accrueInterest() external accrues {\r\n    // The \u0060accrues()\u0060 modifier contains all function logic.\r\n  }\r\n\r\n  /**\r\n   * @notice Transfer \u0060amount\u0060 tokens from \u0060msg.sender\u0060 to \u0060recipient\u0060.\r\n   * @param recipient address The account to transfer tokens to.\r\n   * @param amount uint256 The amount of tokens to transfer.\r\n   * @return A boolean indicating whether the transfer was successful.\r\n   */\r\n  function transfer(address recipient, uint256 amount) external returns (bool) {\r\n    _transfer(msg.sender, recipient, amount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @notice Transfer dUSDC equal to \u0060amount\u0060 USDC from \u0060msg.sender\u0060 to =\r\n   * \u0060recipient\u0060.\r\n   * @param recipient address The account to transfer tokens to.\r\n   * @param amount uint256 The amount of tokens to transfer.\r\n   * @return A boolean indicating whether the transfer was successful.\r\n   */\r\n  function transferUnderlying(\r\n    address recipient, uint256 amount\r\n  ) external accrues returns (bool) {\r\n    // Determine the dUSDC to transfer using the exchange rate\r\n    uint256 dUSDCAmount = amount.mul(_SCALING_FACTOR).div(_dUSDCExchangeRate);\r\n\r\n    _transfer(msg.sender, recipient, dUSDCAmount);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @notice Approve \u0060spender\u0060 to transfer up to \u0060value\u0060 tokens on behalf of\r\n   * \u0060msg.sender\u0060.\r\n   * @param spender address The account to grant the allowance.\r\n   * @param value uint256 The size of the allowance to grant.\r\n   * @return A boolean indicating whether the approval was successful.\r\n   */\r\n  function approve(address spender, uint256 value) external returns (bool) {\r\n    _approve(msg.sender, spender, value);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @notice Transfer \u0060amount\u0060 tokens from \u0060sender\u0060 to \u0060recipient\u0060 as long as\r\n   * \u0060msg.sender\u0060 has sufficient allowance.\r\n   * @param sender address The account to transfer tokens from.\r\n   * @param recipient address The account to transfer tokens to.\r\n   * @param amount uint256 The amount of tokens to transfer.\r\n   * @return A boolean indicating whether the transfer was successful.\r\n   */\r\n  function transferFrom(\r\n    address sender, address recipient, uint256 amount\r\n  ) external returns (bool) {\r\n    _transfer(sender, recipient, amount);\r\n    uint256 allowance = _allowances[sender][msg.sender];\r\n    if (allowance != uint256(-1)) {\r\n      _approve(sender, msg.sender, allowance.sub(amount));\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @notice Transfer dUSDC equal to \u0060amount\u0060 USDC from \u0060sender\u0060 to \u0060recipient\u0060 as\r\n   * long as \u0060msg.sender\u0060 has sufficient allowance.\r\n   * @param sender address The account to transfer tokens from.\r\n   * @param recipient address The account to transfer tokens to.\r\n   * @param amount uint256 The amount of tokens to transfer.\r\n   * @return A boolean indicating whether the transfer was successful.\r\n   */\r\n  function transferUnderlyingFrom(\r\n    address sender, address recipient, uint256 amount\r\n  ) external accrues returns (bool) {\r\n    // Determine the dUSDC to transfer using the exchange rate\r\n    uint256 dUSDCAmount = amount.mul(_SCALING_FACTOR).div(_dUSDCExchangeRate);\r\n\r\n    _transfer(sender, recipient, dUSDCAmount);\r\n    uint256 allowance = _allowances[sender][msg.sender];\r\n    if (allowance != uint256(-1)) {\r\n      _approve(sender, msg.sender, allowance.sub(dUSDCAmount));\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @notice Increase the current allowance of \u0060spender\u0060 by \u0060value\u0060 tokens.\r\n   * @param spender address The account to grant the additional allowance.\r\n   * @param addedValue uint256 The amount to increase the allowance by.\r\n   * @return A boolean indicating whether the modification was successful.\r\n   */\r\n  function increaseAllowance(\r\n    address spender, uint256 addedValue\r\n  ) external returns (bool) {\r\n    _approve(\r\n      msg.sender, spender, _allowances[msg.sender][spender].add(addedValue)\r\n    );\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @notice Decrease the current allowance of \u0060spender\u0060 by \u0060value\u0060 tokens.\r\n   * @param spender address The account to decrease the allowance for.\r\n   * @param subtractedValue uint256 The amount to subtract from the allowance.\r\n   * @return A boolean indicating whether the modification was successful.\r\n   */\r\n  function decreaseAllowance(\r\n    address spender, uint256 subtractedValue\r\n  ) external returns (bool) {\r\n    _approve(\r\n      msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue)\r\n    );\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @notice View function to get the total surplus, or cUSDC balance that\r\n   * exceeds the total dUSDC balance.\r\n   * @return The total surplus.\r\n   */\r\n  function getSurplus() external view returns (uint256 usdcSurplus) {\r\n    // Determine the USDC surplus (difference between total dUSDC and total USDC)\r\n    (usdcSurplus, ) = _getSurplus();\r\n  }\r\n\r\n  function accrualBlockNumber() external view returns (uint256 blockNumber) {\r\n    blockNumber = _blockLastUpdated;\r\n  }\r\n\r\n  /**\r\n   * @notice View function to get the current dUSDC exchange rate (multiplied by\r\n   * 10^18).\r\n   * @return The current exchange rate.\r\n   */\r\n  function exchangeRateCurrent() external view returns (uint256 dUSDCExchangeRate) {\r\n    // Get most recent dUSDC exchange rate by determining accrued interest\r\n    (dUSDCExchangeRate,,) = _getAccruedInterest();\r\n  }\r\n\r\n  /**\r\n   * @notice View function to get the current dUSDC interest earned per block\r\n   * (multiplied by 10^18).\r\n   * @return The current interest rate.\r\n   */\r\n  function supplyRatePerBlock() external view returns (uint256 dUSDCInterestRate) {\r\n    (dUSDCInterestRate,) = _getRatePerBlock();\r\n  }\r\n\r\n  /**\r\n   * @notice View function to get the current cUSDC interest spread over dUSDC per\r\n   * block (multiplied by 10^18).\r\n   * @return The current interest rate spread.\r\n   */\r\n  function getSpreadPerBlock() external view returns (uint256 rateSpread) {\r\n    (uint256 dUSDCInterestRate, uint256 cUSDCInterestRate) = _getRatePerBlock();\r\n    rateSpread = cUSDCInterestRate - dUSDCInterestRate;\r\n  }\r\n\r\n  /**\r\n   * @notice View function to get the total dUSDC supply.\r\n   * @return The total supply.\r\n   */\r\n  function totalSupply() external view returns (uint256) {\r\n    return _totalSupply;\r\n  }\r\n\r\n  /**\r\n   * @notice View function to get the total dUSDC supply, denominated in USDC.\r\n   * @return The total supply.\r\n   */\r\n  function totalSupplyUnderlying() external view returns (uint256) {\r\n    (uint256 dUSDCExchangeRate,,) = _getAccruedInterest();\r\n\r\n    // Determine the total value of all issued dUSDC in USDC\r\n    return _totalSupply.mul(dUSDCExchangeRate) / _SCALING_FACTOR;\r\n  }\r\n\r\n  /**\r\n   * @notice View function to get the total dUSDC balance of an account.\r\n   * @param account address The account to check the dUSDC balance for.\r\n   * @return The balance of the given account.\r\n   */\r\n  function balanceOf(address account) external view returns (uint256 dUSDC) {\r\n    dUSDC = _balances[account];\r\n  }\r\n\r\n  /**\r\n   * @notice View function to get the dUSDC balance of an account, denominated in\r\n   * its USDC equivalent value.\r\n   * @param account address The account to check the balance for.\r\n   * @return The total USDC-equivalent cUSDC balance.\r\n   */\r\n  function balanceOfUnderlying(\r\n    address account\r\n  ) external view returns (uint256 usdcBalance) {\r\n    // Get most recent dUSDC exchange rate by determining accrued interest\r\n    (uint256 dUSDCExchangeRate,,) = _getAccruedInterest();\r\n\r\n    // Convert account balance to USDC equivalent using the exchange rate\r\n    usdcBalance = _balances[account].mul(dUSDCExchangeRate) / _SCALING_FACTOR;\r\n  }\r\n\r\n  /**\r\n   * @notice View function to get the total allowance that \u0060spender\u0060 has to\r\n   * transfer funds from the \u0060owner\u0060 account using \u0060transferFrom\u0060.\r\n   * @param owner address The account that is granting the allowance.\r\n   * @param spender address The account that has been granted the allowance.\r\n   * @return The allowance of the given spender for the given owner.\r\n   */\r\n  function allowance(address owner, address spender) external view returns (uint256) {\r\n    return _allowances[owner][spender];\r\n  }\r\n\r\n  /**\r\n   * @notice Pure function to get the name of the token.\r\n   * @return The name of the token.\r\n   */\r\n  function name() external pure returns (string memory) {\r\n    return _NAME;\r\n  }\r\n\r\n  /**\r\n   * @notice Pure function to get the symbol of the token.\r\n   * @return The symbol of the token.\r\n   */\r\n  function symbol() external pure returns (string memory) {\r\n    return _SYMBOL;\r\n  }\r\n\r\n  /**\r\n   * @notice Pure function to get the number of decimals of the token.\r\n   * @return The number of decimals of the token.\r\n   */\r\n  function decimals() external pure returns (uint8) {\r\n    return _DECIMALS;\r\n  }\r\n\r\n  /**\r\n   * @notice Pure function for getting the current Dharma USDC version.\r\n   * @return The current Dharma USDC version.\r\n   */\r\n  function getVersion() external pure returns (uint256 version) {\r\n    version = _DHARMA_USDC_VERSION;\r\n  }\r\n\r\n  /**\r\n   * @notice Internal function to mint \u0060amount\u0060 tokens by exchanging \u0060exchanged\u0060\r\n   * tokens to \u0060account\u0060 and emit corresponding \u0060Mint\u0060 \u0026 \u0060Transfer\u0060 events.\r\n   * @param account address The account to mint tokens to.\r\n   * @param exchanged uint256 The amount of underlying tokens used to mint.\r\n   * @param amount uint256 The amount of tokens to mint.\r\n   */\r\n  function _mint(address account, uint256 exchanged, uint256 amount) internal {\r\n    _totalSupply = _totalSupply.add(amount);\r\n    _balances[account] = _balances[account].add(amount);\r\n\r\n    emit Mint(account, exchanged, amount);\r\n    emit Transfer(address(0), account, amount);\r\n  }\r\n\r\n  /**\r\n   * @notice Internal function to burn \u0060amount\u0060 tokens by exchanging \u0060exchanged\u0060\r\n   * tokens from \u0060account\u0060 and emit corresponding \u0060Redeeem\u0060 \u0026 \u0060Transfer\u0060 events.\r\n   * @param account address The account to burn tokens from.\r\n   * @param exchanged uint256 The amount of underlying tokens given for burning.\r\n   * @param amount uint256 The amount of tokens to burn.\r\n   */\r\n  function _burn(address account, uint256 exchanged, uint256 amount) internal {\r\n    uint256 balancePriorToBurn = _balances[account];\r\n    require(\r\n      balancePriorToBurn \u003E= amount, \u0022Supplied amount exceeds account balance.\u0022\r\n    );\r\n\r\n    _totalSupply = _totalSupply.sub(amount);\r\n    _balances[account] = balancePriorToBurn - amount; // overflow checked above\r\n\r\n    emit Transfer(account, address(0), amount);\r\n    emit Redeem(account, exchanged, amount);\r\n  }\r\n\r\n  /**\r\n   * @notice Internal function to move \u0060amount\u0060 tokens from \u0060sender\u0060 to\r\n   * \u0060recipient\u0060 and emit a corresponding \u0060Transfer\u0060 event.\r\n   * @param sender address The account to transfer tokens from.\r\n   * @param recipient address The account to transfer tokens to.\r\n   * @param amount uint256 The amount of tokens to transfer.\r\n   */\r\n  function _transfer(address sender, address recipient, uint256 amount) internal {\r\n    require(sender != address(0), \u0022ERC20: transfer from the zero address\u0022);\r\n    require(recipient != address(0), \u0022ERC20: transfer to the zero address\u0022);\r\n\r\n    _balances[sender] = _balances[sender].sub(amount);\r\n    _balances[recipient] = _balances[recipient].add(amount);\r\n    emit Transfer(sender, recipient, amount);\r\n  }\r\n\r\n  /**\r\n   * @notice Internal function to set the allowance for \u0060spender\u0060 to transfer up\r\n   * to \u0060value\u0060 tokens on behalf of \u0060owner\u0060.\r\n   * @param owner address The account that has granted the allowance.\r\n   * @param spender address The account to grant the allowance.\r\n   * @param value uint256 The size of the allowance to grant.\r\n   */\r\n  function _approve(address owner, address spender, uint256 value) internal {\r\n    require(owner != address(0), \u0022ERC20: approve from the zero address\u0022);\r\n    require(spender != address(0), \u0022ERC20: approve to the zero address\u0022);\r\n\r\n    _allowances[owner][spender] = value;\r\n    emit Approval(owner, spender, value);\r\n  }\r\n\r\n  /**\r\n   * @notice Internal view function to get the latest dUSDC and cUSDC exchange\r\n   * rates for USDC and provide the value for each.\r\n   * @return The dUSDC and cUSDC exchange rate, as well as a boolean indicating if\r\n   * interest accrual has been processed already or needs to be calculated and\r\n   * placed in storage.\r\n   */\r\n  function _getAccruedInterest() internal view returns (\r\n    uint256 dUSDCExchangeRate, uint256 cUSDCExchangeRate, bool fullyAccrued\r\n  ) {\r\n    // Get the number of blocks since the last time interest was accrued.\r\n    uint256 blocksToAccrueInterest = block.number - _blockLastUpdated;\r\n    fullyAccrued = (blocksToAccrueInterest == 0);\r\n\r\n    // Skip calculation and read from storage if interest was already accrued.\r\n    if (fullyAccrued) {\r\n      dUSDCExchangeRate = _dUSDCExchangeRate;\r\n      cUSDCExchangeRate = _cUSDCExchangeRate;\r\n    } else {\r\n      // Retrieve the latest exchange rate for cUSDC.\r\n      cUSDCExchangeRate = _getCurrentExchangeRate();\r\n\r\n      // Get the current spread and calculate total interest over the period.\r\n      uint256 spread = _SPREAD.getUSDCSpreadPerBlock().add(_SCALING_FACTOR);\r\n      uint256 spreadInterest = _pow(spread, blocksToAccrueInterest);\r\n\r\n      // Calculate the accrued interest for Compound over the period.\r\n      uint256 cUSDCInterest = (\r\n        cUSDCExchangeRate.mul(_SCALING_FACTOR).div(_cUSDCExchangeRate)\r\n      );\r\n\r\n      // All interest is taken by the spread if it exceeds the interest on cUSDC.\r\n      if (spreadInterest \u003E= cUSDCInterest) {\r\n        dUSDCExchangeRate = _dUSDCExchangeRate;\r\n      } else {\r\n        // Use total cUSDC interest, less the spread, to set dUSDC exchange rate.\r\n        dUSDCExchangeRate = _dUSDCExchangeRate.mul(\r\n          cUSDCInterest - spreadInterest\r\n        ) / _SCALING_FACTOR;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Internal view function to get the current cUSDC exchange rate.\r\n   * @return The current cUSDC exchange rate, or amount of USDC that is redeemable\r\n   * for each cUSDC (with 18 decimal places added to the returned exchange rate).\r\n   */\r\n  function _getCurrentExchangeRate() internal view returns (uint256 exchangeRate) {\r\n    uint256 storedExchangeRate = _CUSDC.exchangeRateStored();\r\n    uint256 blockDelta = block.number.sub(_CUSDC.accrualBlockNumber());\r\n\r\n    if (blockDelta == 0) return storedExchangeRate;\r\n\r\n    exchangeRate = blockDelta == 0 ? storedExchangeRate : storedExchangeRate.add(\r\n      storedExchangeRate.mul(\r\n        _CUSDC.supplyRatePerBlock().mul(blockDelta)\r\n      ) / _SCALING_FACTOR\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @notice Internal view function to get the total surplus, or cUSDC\r\n   * balance that exceeds the total dUSDC balance.\r\n   * @return The total surplus, denominated in both USDC and in cUSDC.\r\n   */\r\n  function _getSurplus() internal view returns (\r\n    uint256 usdcSurplus, uint256 cUSDCSurplus\r\n  ) {\r\n    (uint256 dUSDCExchangeRate, uint256 cUSDCExchangeRate,) = _getAccruedInterest();\r\n\r\n    // Determine the total value of all issued dUSDC in USDC, rounded up\r\n    uint256 dUSDCUnderlying = (\r\n      _totalSupply.mul(dUSDCExchangeRate) / _SCALING_FACTOR\r\n    ).add(1);\r\n\r\n    // Compare to total underlying USDC value of all cUSDC held by this contract\r\n    usdcSurplus = (\r\n      _CUSDC.balanceOf(address(this)).mul(cUSDCExchangeRate) / _SCALING_FACTOR\r\n    ).sub(dUSDCUnderlying);\r\n\r\n    // Determine the cUSDC equivalent of this surplus amount\r\n    cUSDCSurplus = usdcSurplus.mul(_SCALING_FACTOR).div(cUSDCExchangeRate);\r\n  }\r\n\r\n  /**\r\n   * @notice View function to get the current dUSDC and cUSDC interest supply rate\r\n   * per block (multiplied by 10^18).\r\n   * @return The current dUSDC and cUSDC interest rates.\r\n   */\r\n  function _getRatePerBlock() internal view returns (\r\n    uint256 dUSDCSupplyRate, uint256 cUSDCSupplyRate\r\n  ) {\r\n    uint256 spread = _SPREAD.getUSDCSpreadPerBlock();\r\n    cUSDCSupplyRate = _CUSDC.supplyRatePerBlock();\r\n    dUSDCSupplyRate = (spread \u003C cUSDCSupplyRate ? cUSDCSupplyRate - spread : 0);\r\n  }\r\n\r\n  /**\r\n   * @notice Internal function to take \u0060floatIn\u0060 (i.e. the value * 10^18) and\r\n   * raise it to the power of \u0060power\u0060 using \u0022exponentiation by squaring\u0022 (see\r\n   * Maker\u0027s DSMath implementation).\r\n   * @param floatIn uint256 The value.\r\n   * @param power address The power to raise the value by.\r\n   * @return The specified value raised to the specified power.\r\n   */\r\n  function _pow(uint256 floatIn, uint256 power) internal pure returns (uint256 floatOut) {\r\n    floatOut = power % 2 != 0 ? floatIn : _SCALING_FACTOR;\r\n\r\n    for (power /= 2; power != 0; power /= 2) {\r\n      floatIn = (floatIn.mul(floatIn)).add(_HALF_OF_SCALING_FACTOR) / _SCALING_FACTOR;\r\n\r\n      if (power % 2 != 0) {\r\n        floatOut = (floatIn.mul(floatOut)).add(_HALF_OF_SCALING_FACTOR) / _SCALING_FACTOR;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Internal pure function to determine if a call to cUSDC succeeded and\r\n   * to revert, supplying the reason, if it failed. Failure can be caused by a\r\n   * call that reverts, or by a call that does not revert but returns a non-zero\r\n   * error code.\r\n   * @param functionSelector bytes4 The function selector that was called.\r\n   * @param ok bool A boolean representing whether the call returned or\r\n   * reverted.\r\n   * @param data bytes The data provided by the returned or reverted call.\r\n   */\r\n  function _checkCompoundInteraction(\r\n    bytes4 functionSelector, bool ok, bytes memory data\r\n  ) internal pure {\r\n    // Determine if something went wrong with the attempt.\r\n    if (ok) {\r\n      uint256 compoundError = abi.decode(data, (uint256)); // throws on no data\r\n      if (compoundError != _COMPOUND_SUCCESS) {\r\n        revert(\r\n          string(\r\n            abi.encodePacked(\r\n              \u0022Compound cUSDC contract returned error code \u0022,\r\n              uint8((compoundError / 10) \u002B 48),\r\n              uint8((compoundError % 10) \u002B 48),\r\n              \u0022 while attempting to call \u0022,\r\n              _getFunctionName(functionSelector),\r\n              \u0022.\u0022\r\n            )\r\n          )\r\n        );\r\n      }\r\n    } else {\r\n      revert(\r\n        string(\r\n          abi.encodePacked(\r\n            \u0022Compound cUSDC contract reverted while attempting to call \u0022,\r\n            _getFunctionName(functionSelector),\r\n            \u0022: \u0022,\r\n            _decodeRevertReason(data)\r\n          )\r\n        )\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Internal pure function to get a Compound function name based on the\r\n   * selector.\r\n   * @param functionSelector bytes4 The function selector.\r\n   * @return The name of the function as a string.\r\n   */\r\n  function _getFunctionName(\r\n    bytes4 functionSelector\r\n  ) internal pure returns (string memory functionName) {\r\n    if (functionSelector == _CUSDC.mint.selector) {\r\n      functionName = \u0027mint\u0027;\r\n    } else if (functionSelector == _CUSDC.redeemUnderlying.selector) {\r\n      functionName = \u0027redeemUnderlying\u0027;\r\n    } else if (functionSelector == _CUSDC.transferFrom.selector) {\r\n      functionName = \u0027transferFrom\u0027;\r\n    } else if (functionSelector == _CUSDC.transfer.selector) {\r\n      functionName = \u0027transfer\u0027;\r\n    } else {\r\n      functionName = \u0027an unknown function\u0027;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Internal pure function to decode revert reasons. The revert reason\r\n   * prefix is removed and the remaining string argument is decoded.\r\n   * @param revertData bytes The raw data supplied alongside the revert.\r\n   * @return The decoded revert reason string.\r\n   */\r\n  function _decodeRevertReason(\r\n    bytes memory revertData\r\n  ) internal pure returns (string memory revertReason) {\r\n    // Solidity prefixes revert reason with 0x08c379a0 -\u003E Error(string) selector\r\n    if (\r\n      revertData.length \u003E 68 \u0026\u0026 // prefix (4) \u002B position (32) \u002B length (32)\r\n      revertData[0] == byte(0x08) \u0026\u0026\r\n      revertData[1] == byte(0xc3) \u0026\u0026\r\n      revertData[2] == byte(0x79) \u0026\u0026\r\n      revertData[3] == byte(0xa0)\r\n    ) {\r\n      // Get the revert reason without the prefix from the revert data.\r\n      bytes memory revertReasonBytes = new bytes(revertData.length - 4);\r\n      for (uint256 i = 4; i \u003C revertData.length; i\u002B\u002B) {\r\n        revertReasonBytes[i - 4] = revertData[i];\r\n      }\r\n\r\n      // Decode the resultant revert reason as a string.\r\n      revertReason = abi.decode(revertReasonBytes, (string));\r\n    } else {\r\n      // Simply return the default, with no revert reason.\r\n      revertReason = \u0022(no revert reason)\u0022;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @notice Modifier to determine the latest dUSDC and cUSDC exchange rates, and\r\n   * to update the respective storage values if they have not already been\r\n   * updated at some point in the current block, before proceeding to execution\r\n   * of the rest of the decorated function.\r\n   */\r\n  modifier accrues() {\r\n    (\r\n      uint256 dUSDCExchangeRate, uint256 cUSDCExchangeRate, bool fullyAccrued\r\n    ) = _getAccruedInterest();\r\n\r\n    if (!fullyAccrued) {\r\n      // Update storage with dUSDC \u002B cUSDC exchange rates as of the current block\r\n      _blockLastUpdated = block.number;\r\n      _dUSDCExchangeRate = dUSDCExchangeRate;\r\n      _cUSDCExchangeRate = cUSDCExchangeRate;\r\n    }\r\n\r\n    _;\r\n  }\r\n}","ABI":"[{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022name\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022string\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022pure\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022spender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022approve\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022getVersion\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022version\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022pure\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022usdcToReceive\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022redeemUnderlyingToCToken\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022dUSDCBurned\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022totalSupply\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022pullSurplus\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022cUSDCSurplus\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022getSurplus\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022usdcSurplus\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022sender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022recipient\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022transferFrom\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022dUSDCToBurn\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022redeemToCToken\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022cUSDCReceived\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022decimals\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint8\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint8\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022pure\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022recipient\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022transferUnderlying\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022spender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022addedValue\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022increaseAllowance\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022balanceOfUnderlying\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022usdcBalance\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022getSpreadPerBlock\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022rateSpread\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022accrualBlockNumber\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022blockNumber\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022account\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022balanceOf\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022dUSDC\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022sender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022recipient\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022transferUnderlyingFrom\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022usdcToReceive\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022redeemUnderlying\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022dUSDCBurned\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022symbol\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022string\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022string\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022pure\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022usdcToSupply\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022mint\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022dUSDCMinted\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022spender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022subtractedValue\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022decreaseAllowance\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022accrueInterest\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022recipient\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022amount\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022transfer\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022bool\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022supplyRatePerBlock\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022dUSDCInterestRate\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022exchangeRateCurrent\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022dUSDCExchangeRate\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022cUSDCToSupply\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022mintViaCToken\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022dUSDCMinted\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022dUSDCToBurn\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022redeem\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022usdcReceived\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022owner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022spender\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022allowance\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022totalSupplyUnderlying\u0022,\u0022outputs\u0022:[{\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022constructor\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022minter\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022mintAmount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022mintTokens\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022Mint\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022redeemer\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022redeemAmount\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022redeemTokens\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022Redeem\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022from\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022Transfer\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022owner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022internalType\u0022:\u0022address\u0022,\u0022name\u0022:\u0022spender\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022internalType\u0022:\u0022uint256\u0022,\u0022name\u0022:\u0022value\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022Approval\u0022,\u0022type\u0022:\u0022event\u0022}]","ContractName":"DharmaUSDCPrototype1","CompilerVersion":"v0.5.11\u002Bcommit.c082d0b4","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://220a1e70eb41402da8fedf034f1cf9e61f1ddf6f6d5ceb5f9201f06924327126"}]