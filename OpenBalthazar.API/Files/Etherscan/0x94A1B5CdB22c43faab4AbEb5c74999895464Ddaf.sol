[{"SourceCode":"// https://tornado.cash\r\n/*\r\n* d888888P                                           dP              a88888b.                   dP\r\n*    88                                              88             d8\u0027   \u006088                   88\r\n*    88    .d8888b. 88d888b. 88d888b. .d8888b. .d888b88 .d8888b.    88        .d8888b. .d8888b. 88d888b.\r\n*    88    88\u0027  \u006088 88\u0027  \u006088 88\u0027  \u006088 88\u0027  \u006088 88\u0027  \u006088 88\u0027  \u006088    88        88\u0027  \u006088 Y8ooooo. 88\u0027  \u006088\r\n*    88    88.  .88 88       88    88 88.  .88 88.  .88 88.  .88 dP Y8.   .88 88.  .88       88 88    88\r\n*    dP    \u006088888P\u0027 dP       dP    dP \u006088888P8 \u006088888P8 \u006088888P\u0027 88  Y88888P\u0027 \u006088888P8 \u006088888P\u0027 dP    dP\r\n* ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo\r\n*/\r\n\r\n// File: contracts/MerkleTreeWithHistory.sol\r\n\r\npragma solidity ^0.5.8;\r\n\r\nlibrary MiMC {\r\n  function MiMCSponge(uint256 in_xL, uint256 in_xR, uint256 in_k) public pure returns (uint256 xL, uint256 xR);\r\n}\r\n\r\ncontract MerkleTreeWithHistory {\r\n  uint256 public levels;\r\n\r\n  uint8 constant ROOT_HISTORY_SIZE = 100;\r\n  uint256[] private _roots;\r\n  uint256 public current_root = 0;\r\n\r\n  uint256[] private _filled_subtrees;\r\n  uint256[] private _zeros;\r\n\r\n  uint32 public next_index = 0;\r\n\r\n  constructor(uint256 tree_levels, uint256 zero_value) public {\r\n    levels = tree_levels;\r\n\r\n    _zeros.push(zero_value);\r\n    _filled_subtrees.push(_zeros[0]);\r\n\r\n    for (uint8 i = 1; i \u003C levels; i\u002B\u002B) {\r\n      _zeros.push(hashLeftRight(_zeros[i-1], _zeros[i-1]));\r\n      _filled_subtrees.push(_zeros[i]);\r\n    }\r\n\r\n    _roots = new uint256[](ROOT_HISTORY_SIZE);\r\n    _roots[0] = hashLeftRight(_zeros[levels - 1], _zeros[levels - 1]);\r\n  }\r\n\r\n  function hashLeftRight(uint256 left, uint256 right) public pure returns (uint256 mimc_hash) {\r\n    uint256 k = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\r\n    uint256 R = 0;\r\n    uint256 C = 0;\r\n\r\n    R = addmod(R, left, k);\r\n    (R, C) = MiMC.MiMCSponge(R, C, 0);\r\n\r\n    R = addmod(R, right, k);\r\n    (R, C) = MiMC.MiMCSponge(R, C, 0);\r\n\r\n    mimc_hash = R;\r\n  }\r\n\r\n  function _insert(uint256 leaf) internal {\r\n    uint32 current_index = next_index;\r\n    require(current_index != 2**(levels - 1), \u0022Merkle tree is full\u0022);\r\n    next_index \u002B= 1;\r\n    uint256 current_level_hash = leaf;\r\n    uint256 left;\r\n    uint256 right;\r\n\r\n    for (uint256 i = 0; i \u003C levels; i\u002B\u002B) {\r\n      if (current_index % 2 == 0) {\r\n        left = current_level_hash;\r\n        right = _zeros[i];\r\n\r\n        _filled_subtrees[i] = current_level_hash;\r\n      } else {\r\n        left = _filled_subtrees[i];\r\n        right = current_level_hash;\r\n      }\r\n\r\n      current_level_hash = hashLeftRight(left, right);\r\n\r\n      current_index /= 2;\r\n    }\r\n\r\n    current_root = (current_root \u002B 1) % ROOT_HISTORY_SIZE;\r\n    _roots[current_root] = current_level_hash;\r\n  }\r\n\r\n  function isKnownRoot(uint256 root) public view returns(bool) {\r\n    if (root == 0) {\r\n      return false;\r\n    }\r\n    // search most recent first\r\n    uint256 i;\r\n    for(i = current_root; i \u003C 2**256 - 1; i--) {\r\n      if (root == _roots[i]) {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    // process the rest of roots\r\n    for(i = ROOT_HISTORY_SIZE - 1; i \u003E current_root; i--) {\r\n      if (root == _roots[i]) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n\r\n    // or we can do that in other way\r\n    //   uint256 i = _current_root;\r\n    //   do {\r\n    //       if (root == _roots[i]) {\r\n    //           return true;\r\n    //       }\r\n    //       if (i == 0) {\r\n    //           i = ROOT_HISTORY_SIZE;\r\n    //       }\r\n    //       i--;\r\n    //   } while (i != _current_root);\r\n  }\r\n\r\n  function getLastRoot() public view returns(uint256) {\r\n    return _roots[current_root];\r\n  }\r\n\r\n  function roots() public view returns(uint256[] memory) {\r\n    return _roots;\r\n  }\r\n\r\n  function filled_subtrees() public view returns(uint256[] memory) {\r\n    return _filled_subtrees;\r\n  }\r\n\r\n  function zeros() public view returns(uint256[] memory) {\r\n    return _zeros;\r\n  }\r\n}\r\n\r\n// File: contracts/Mixer.sol\r\n\r\npragma solidity ^0.5.8;\r\n\r\n\r\ncontract IVerifier {\r\n  function verifyProof(uint256[2] memory a, uint256[2][2] memory b, uint256[2] memory c, uint256[4] memory input) public returns(bool);\r\n}\r\n\r\ncontract Mixer is MerkleTreeWithHistory {\r\n  uint256 public transferValue;\r\n  bool public isDepositsEnabled = true;\r\n  // operator can disable new deposits in case of emergency\r\n  // it also receives a relayer fee\r\n  address payable public operator;\r\n  mapping(uint256 =\u003E bool) public nullifierHashes;\r\n  // we store all commitments just to prevent accidental deposits with the same commitment\r\n  mapping(uint256 =\u003E bool) public commitments;\r\n  IVerifier verifier;\r\n\r\n  event Deposit(uint256 indexed commitment, uint256 leafIndex, uint256 timestamp);\r\n  event Withdraw(address to, uint256 nullifierHash, uint256 fee);\r\n\r\n  /**\r\n    @dev The constructor\r\n    @param _verifier the address of SNARK verifier for this contract\r\n    @param _transferValue the value for all deposits in this contract in wei\r\n  */\r\n  constructor(\r\n    address _verifier,\r\n    uint256 _transferValue,\r\n    uint8 _merkleTreeHeight,\r\n    uint256 _emptyElement,\r\n    address payable _operator\r\n  ) MerkleTreeWithHistory(_merkleTreeHeight, _emptyElement) public {\r\n    verifier = IVerifier(_verifier);\r\n    transferValue = _transferValue;\r\n    operator = _operator;\r\n  }\r\n\r\n  /**\r\n    @dev Deposit funds into mixer. The caller must send value equal to \u0060transferValue\u0060 of this mixer.\r\n    @param commitment the note commitment, which is PedersenHash(nullifier \u002B secret)\r\n  */\r\n  function deposit(uint256 commitment) public payable {\r\n    require(isDepositsEnabled, \u0022deposits disabled\u0022);\r\n    require(msg.value == transferValue, \u0022Please send \u0060transferValue\u0060 ETH along with transaction\u0022);\r\n    require(!commitments[commitment], \u0022The commitment has been submitted\u0022);\r\n    _insert(commitment);\r\n    commitments[commitment] = true;\r\n    emit Deposit(commitment, next_index - 1, block.timestamp);\r\n  }\r\n\r\n  /**\r\n    @dev Withdraw deposit from the mixer. \u0060a\u0060, \u0060b\u0060, and \u0060c\u0060 are zkSNARK proof data, and input is an array of circuit public inputs\r\n    \u0060input\u0060 array consists of:\r\n      - merkle root of all deposits in the mixer\r\n      - hash of unique deposit nullifier to prevent double spends\r\n      - the receiver of funds\r\n      - optional fee that goes to the transaction sender (usually a relay)\r\n  */\r\n  function withdraw(uint256[2] memory a, uint256[2][2] memory b, uint256[2] memory c, uint256[4] memory input) public {\r\n    uint256 root = input[0];\r\n    uint256 nullifierHash = input[1];\r\n    address payable receiver = address(input[2]);\r\n    uint256 fee = input[3];\r\n\r\n    require(!nullifierHashes[nullifierHash], \u0022The note has been already spent\u0022);\r\n    require(fee \u003C transferValue, \u0022Fee exceeds transfer value\u0022);\r\n    require(isKnownRoot(root), \u0022Cannot find your merkle root\u0022); // Make sure to use a recent one\r\n    require(verifier.verifyProof(a, b, c, input), \u0022Invalid withdraw proof\u0022);\r\n\r\n    nullifierHashes[nullifierHash] = true;\r\n    receiver.transfer(transferValue - fee);\r\n    if (fee \u003E 0) {\r\n      operator.transfer(fee);\r\n    }\r\n    emit Withdraw(receiver, nullifierHash, fee);\r\n  }\r\n\r\n  function toggleDeposits() external {\r\n    require(msg.sender == operator, \u0022unauthorized\u0022);\r\n    isDepositsEnabled = !isDepositsEnabled;\r\n  }\r\n\r\n  function changeOperator(address payable _newAccount) external {\r\n    require(msg.sender == operator, \u0022unauthorized\u0022);\r\n    operator = _newAccount;\r\n  }\r\n\r\n  function isSpent(uint256 nullifier) public view returns(bool) {\r\n    return nullifierHashes[nullifier];\r\n  }\r\n}","ABI":"[{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022_newAccount\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022changeOperator\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022filled_subtrees\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256[]\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022nullifierHashes\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022transferValue\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022roots\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256[]\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022commitments\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022zeros\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256[]\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022levels\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022a\u0022,\u0022type\u0022:\u0022uint256[2]\u0022},{\u0022name\u0022:\u0022b\u0022,\u0022type\u0022:\u0022uint256[2][2]\u0022},{\u0022name\u0022:\u0022c\u0022,\u0022type\u0022:\u0022uint256[2]\u0022},{\u0022name\u0022:\u0022input\u0022,\u0022type\u0022:\u0022uint256[4]\u0022}],\u0022name\u0022:\u0022withdraw\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022operator\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022isDepositsEnabled\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022nullifier\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022isSpent\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022left\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022right\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022hashLeftRight\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022mimc_hash\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022pure\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022next_index\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint32\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022current_root\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[{\u0022name\u0022:\u0022root\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022isKnownRoot\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022commitment\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022deposit\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:true,\u0022stateMutability\u0022:\u0022payable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022getLastRoot\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022toggleDeposits\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[{\u0022name\u0022:\u0022_verifier\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022_transferValue\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_merkleTreeHeight\u0022,\u0022type\u0022:\u0022uint8\u0022},{\u0022name\u0022:\u0022_emptyElement\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022name\u0022:\u0022_operator\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022constructor\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022commitment\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022leafIndex\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022timestamp\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022Deposit\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022to\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022nullifierHash\u0022,\u0022type\u0022:\u0022uint256\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022fee\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022Withdraw\u0022,\u0022type\u0022:\u0022event\u0022}]","ContractName":"Mixer","CompilerVersion":"v0.5.10\u002Bcommit.5a6ea5b1","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"0000000000000000000000002c031def2175f4f5aabda87b169bac91a44a2048000000000000000000000000000000000000000000000000016345785d8a0000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000010000000000000000000000008589427373d6d84e98730d7795d8f6f8731fda16","Library":"MiMC:100341623d0e9e3cd5be19e8db7c53709812a873","SwarmSource":"bzzr://305dc7e1aa034e649ccab81c9e67331ad48ac3b809cc078de5f3c060d281b509"}]