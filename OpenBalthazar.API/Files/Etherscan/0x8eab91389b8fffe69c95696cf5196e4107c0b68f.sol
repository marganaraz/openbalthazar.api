[{"SourceCode":"pragma solidity ^0.5.8;\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b \u003E 0); // Solidity automatically throws when dividing by 0\r\n        // uint256 c = a / b;\r\n        // assert(a == b * c \u002B a % b); // There is no case in which this doesn\u0027t hold\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b \u003C= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n        c = a \u002B b;\r\n        assert(c \u003E= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \u0022user permissions\u0022.\r\n */\r\ncontract Ownable {\r\n    address internal owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev The Ownable constructor sets the original \u0060owner\u0060 of the contract to the sender\r\n     * account.\r\n     */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n     * @param newOwner The address to transfer ownership to.\r\n     */\r\n    function transferOwnership(address newOwner) onlyOwner public returns (bool) {\r\n        require(newOwner != address(0x0));\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused, \u0022Contract is Paused\u0022);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused, \u0022Contract is unpaused\u0022);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() public onlyOwner whenNotPaused {\r\n    paused = true;\r\n    emit Pause();\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() public onlyOwner whenPaused {\r\n    paused = false;\r\n    emit Unpause();\r\n  }\r\n}\r\n\r\n\r\ncontract ERC20 {\r\n    uint256 public totalSupply;\r\n\r\n    function balanceOf(address who) public view returns (uint256);\r\n    function transfer(address to, uint256 value) public returns (bool);\r\n    function approve(address spender, uint256 value) public returns (bool);\r\n    function allowance(address owner, address spender) public view returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n\r\ncontract NanakShahiDistribution is Ownable, Pausable {\r\n    \r\n    ERC20 NannakTokenAddress;\r\n    \r\n    address advisorAddress;\r\n    address founderAddress;\r\n    address teamAddress;\r\n    address reserveAddress;\r\n    \r\n    uint256 public totalSupply = SafeMath.mul(1000000000, 1 ether);\r\n    uint256 internal publicSupply = SafeMath.mul(SafeMath.div(totalSupply,100),50);\r\n    uint256 internal reserveSupply = SafeMath.mul(SafeMath.div(totalSupply,100),14);\r\n    uint256 internal teamSupply = SafeMath.mul(SafeMath.div(totalSupply,100),13);\r\n    uint256 internal advisorSupply = SafeMath.mul(SafeMath.div(totalSupply,100),3);\r\n    uint256 internal bountySupply = SafeMath.mul(SafeMath.div(totalSupply,100),5);\r\n    uint256 internal founderSupply = SafeMath.mul(SafeMath.div(totalSupply,100),15);\r\n    \r\n    bool internal grantAdvisorSupply;\r\n    bool internal grantFounderSupply;\r\n    bool internal grantTeamSupply;\r\n\r\n    constructor () public {\r\n        NannakTokenAddress = ERC20(0xEE01970f0620Aa69A1978394ABe9a3521061BddA);\r\n        \r\n        advisorAddress = address(0x819acdf6731B51Dd7E68D5DfB6f602BBD8E62871);\r\n        founderAddress = address(0x996f2959cE684B2cA221b9f0Da41899662220953);\r\n        teamAddress = address(0x3c61fD8BDFf22C3Aa309f52793288CfB8A271325);\r\n        reserveAddress = address(0x3501C88dCEAC658014d6C4406E0D39e11a7e0340);\r\n        \r\n        grantAdvisorSupply = false;\r\n        grantFounderSupply = false;\r\n        grantTeamSupply = false;\r\n\r\n    }    \r\n\r\n    event TransferBountyTokens(address [] beneficiary, uint256[] tokens);\r\n    event TransferReservedTokens(address reserveAddress, uint256 reserveSupply);   \r\n    event TransferAdvisorTokens(address advisorAddress, uint256 advisorSupply);\r\n    event TransferFounderTokens(address founderAddress, uint256 founderSupply);\r\n    event TransferTeamTokens(address teamAddress, uint256 teamSupply);\r\n    event TransferPublicTokens(address beneficiary, uint256 tokens);\r\n    \r\n    \r\n    /** \r\n      * function bountyFunds - Transfer bounty tokens via AirDrop\r\n      * @param beneficiary address where owner wants to transfer tokens\r\n      * @param tokens value of token\r\n      */\r\n\r\n    function bountyFunds(address[] memory beneficiary, uint256[] memory tokens) onlyOwner whenNotPaused public {\r\n        for (uint256 i = 0; i \u003C beneficiary.length; i\u002B\u002B) {\r\n            tokens[i] = SafeMath.mul(tokens[i],1 ether); \r\n            \r\n            require(bountySupply \u003E= tokens[i], \u0022Remaining bounty supply is less\u0022);\r\n            \r\n            bountySupply = SafeMath.sub(bountySupply,tokens[i]);\r\n            NannakTokenAddress.transfer(beneficiary[i], tokens[i]);\r\n        }\r\n    \r\n    emit TransferBountyTokens(beneficiary, tokens);\r\n    }\r\n\r\n    /** \r\n      * function reserveFunds - Transfer reserve tokens to wallet for future platform usage\r\n      */\r\n    \r\n    function reserveFunds() onlyOwner whenNotPaused public { \r\n        require(reserveSupply \u003E 0, \u0022Reserve supply is 0\u0022);\r\n        NannakTokenAddress.transfer(reserveAddress, reserveSupply);\r\n        reserveSupply = 0;\r\n        \r\n        emit TransferReservedTokens(reserveAddress, reserveSupply);    \r\n    }\r\n    \r\n    /** \r\n      * function grantAdvisorToken - Transfer advisor tokens to advisor wallet \r\n      */\r\n    \r\n    function grantAdvisorToken() onlyOwner whenNotPaused public {\r\n    \r\n        require(!grantAdvisorSupply, \u0022Advisor supply already taken\u0022);\r\n        require(advisorSupply \u003E 0, \u0022Advisor supply is 0\u0022);\r\n            \r\n        NannakTokenAddress.transfer(advisorAddress, advisorSupply);\r\n                \r\n        emit TransferAdvisorTokens(advisorAddress, advisorSupply);\r\n        \r\n        advisorSupply = 0;\r\n    }\r\n\r\n    /** \r\n      * function grantFounderToken - Transfer tokens to Founder wallet\r\n      */\r\n    \r\n    function grantFounderToken() onlyOwner whenNotPaused public {\r\n    \r\n        require(!grantFounderSupply);\r\n        require(founderSupply \u003E 0, \u0022Founder Supply is 0\u0022);\r\n        \r\n        NannakTokenAddress.transfer(founderAddress, founderSupply);\r\n        \r\n        emit TransferFounderTokens(founderAddress, founderSupply);\r\n           \r\n        founderSupply = 0;\r\n    }\r\n\r\n   /** \r\n     * function grantTeamToken - Transfer tokens to Team wallet \r\n     */\r\n    \r\n    function grantTeamToken() onlyOwner whenNotPaused public {\r\n        \r\n        require(!grantTeamSupply);\r\n        require(teamSupply \u003E 0, \u0022Team Suuply is 0\u0022);\r\n        \r\n        NannakTokenAddress.transfer(teamAddress, teamSupply);\r\n        \r\n        emit TransferTeamTokens(teamAddress, teamSupply);\r\n        teamSupply = 0;\r\n    }\r\n    \r\n    /** \r\n     *.function transferToken - Used to transfer tokens to public users\r\n     * @param beneficiary - Address where owner wants to transfer tokens\r\n     * @param tokens -  Number of tokens\r\n     */\r\n      function transferToken(address beneficiary, uint256 tokens) onlyOwner whenNotPaused public {\r\n    \r\n        require(publicSupply \u003E 0, \u0022Public Supply is 0\u0022);\r\n        tokens = SafeMath.mul(tokens, 1 ether);\r\n     \r\n        require(publicSupply \u003E= tokens, \u0022Public Supply is less\u0022);\r\n        publicSupply = SafeMath.sub(publicSupply, tokens);\r\n        NannakTokenAddress.transfer(beneficiary, tokens);\r\n    \r\n        emit TransferPublicTokens(beneficiary, tokens);\r\n      }\r\n}","ABI":"[{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022beneficiary\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022name\u0022:\u0022tokens\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022transferToken\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022totalSupply\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022grantFounderToken\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022grantAdvisorToken\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022unpause\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:true,\u0022inputs\u0022:[],\u0022name\u0022:\u0022paused\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022view\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022reserveFunds\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022pause\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022beneficiary\u0022,\u0022type\u0022:\u0022address[]\u0022},{\u0022name\u0022:\u0022tokens\u0022,\u0022type\u0022:\u0022uint256[]\u0022}],\u0022name\u0022:\u0022bountyFunds\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022grantTeamToken\u0022,\u0022outputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022constant\u0022:false,\u0022inputs\u0022:[{\u0022name\u0022:\u0022newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022transferOwnership\u0022,\u0022outputs\u0022:[{\u0022name\u0022:\u0022\u0022,\u0022type\u0022:\u0022bool\u0022}],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022function\u0022},{\u0022inputs\u0022:[],\u0022payable\u0022:false,\u0022stateMutability\u0022:\u0022nonpayable\u0022,\u0022type\u0022:\u0022constructor\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022beneficiary\u0022,\u0022type\u0022:\u0022address[]\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022tokens\u0022,\u0022type\u0022:\u0022uint256[]\u0022}],\u0022name\u0022:\u0022TransferBountyTokens\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022reserveAddress\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022reserveSupply\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022TransferReservedTokens\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022advisorAddress\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022advisorSupply\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022TransferAdvisorTokens\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022founderAddress\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022founderSupply\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022TransferFounderTokens\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022teamAddress\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022teamSupply\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022TransferTeamTokens\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:false,\u0022name\u0022:\u0022beneficiary\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:false,\u0022name\u0022:\u0022tokens\u0022,\u0022type\u0022:\u0022uint256\u0022}],\u0022name\u0022:\u0022TransferPublicTokens\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022Pause\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[],\u0022name\u0022:\u0022Unpause\u0022,\u0022type\u0022:\u0022event\u0022},{\u0022anonymous\u0022:false,\u0022inputs\u0022:[{\u0022indexed\u0022:true,\u0022name\u0022:\u0022previousOwner\u0022,\u0022type\u0022:\u0022address\u0022},{\u0022indexed\u0022:true,\u0022name\u0022:\u0022newOwner\u0022,\u0022type\u0022:\u0022address\u0022}],\u0022name\u0022:\u0022OwnershipTransferred\u0022,\u0022type\u0022:\u0022event\u0022}]","ContractName":"NanakShahiDistribution","CompilerVersion":"v0.5.8\u002Bcommit.23d335f2","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","Library":"","SwarmSource":"bzzr://9651d7042be3fc6ce00d71f72da9f962458ae866e5de8cccc9482302266de0ef"}]